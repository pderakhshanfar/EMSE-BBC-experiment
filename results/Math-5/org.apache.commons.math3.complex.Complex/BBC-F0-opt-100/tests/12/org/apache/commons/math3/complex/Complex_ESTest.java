/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:33:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.4300075619643524E-298, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      complex0.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.sqrt1z();
      complex1.sinh();
      Complex complex5 = complex1.pow(complex3);
      complex1.nthRoot(115);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex5.subtract(complex7);
      complex1.add((double) 115);
      complex1.subtract(complex2);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex6.tanh();
      complex4.pow(1.0);
      complex1.multiply(7);
      complex8.pow(complex7);
      Complex complex11 = complex6.asin();
      complex4.sqrt1z();
      complex11.sqrt();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-45817.1981), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex2.multiply(102);
      complex3.tan();
      complex4.nthRoot(295);
      Complex complex5 = complex2.sqrt1z();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), 1.0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.tan();
      complex1.readResolve();
      Complex complex4 = complex3.multiply(17);
      complex1.tan();
      complex4.subtract(complex3);
      Complex complex5 = complex2.log();
      complex1.tanh();
      Complex complex6 = new Complex(17);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex5.sinh();
      complex4.toString();
      Complex complex9 = complex8.asin();
      int int0 = 1517;
      complex8.nthRoot(478);
      complex7.createComplex(1.0, 424.255);
      complex9.readResolve();
      complex1.tanh();
      int int1 = 1073741824;
      // Undeclared exception!
      complex4.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-851.4123011857));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1572.65040249012), (-1572.65040249012));
      Complex complex1 = complex0.INF.subtract((-1572.65040249012));
      complex1.I.hashCode();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex4.INF.divide(complex0);
      Complex complex8 = complex7.I.subtract(complex1);
      Complex complex9 = complex0.pow(complex4);
      Complex complex10 = complex9.ONE.exp();
      complex9.I.nthRoot(1023);
      complex4.I.log();
      complex9.add((-1572.65040249012));
      Complex complex11 = complex5.cos();
      complex11.NaN.subtract(complex6);
      complex3.divide(complex2);
      Complex complex12 = complex10.ONE.divide(complex1);
      complex2.INF.subtract(complex9);
      Complex complex13 = complex6.subtract((-2784.934442088));
      Complex complex14 = complex13.NaN.multiply(1023);
      complex3.divide((-749.0));
      complex8.atan();
      Complex complex15 = complex4.log();
      complex15.NaN.hashCode();
      complex10.ZERO.abs();
      complex4.NaN.hashCode();
      complex15.ONE.multiply(1718);
      Complex complex16 = complex10.pow(complex13);
      complex6.sqrt();
      complex14.multiply(complex12);
      complex16.add((double) 1718);
      complex6.multiply((-1572.65040249012));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(4.1719443712336026E278, 0.0);
      Complex complex1 = complex0.sin();
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.I.sqrt1z();
      complex5.INF.getField();
      Complex complex6 = complex1.NaN.exp();
      complex6.NaN.divide(complex1);
      complex1.cos();
      complex0.acos();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex4.divide(complex0);
      Complex complex9 = complex8.multiply(37);
      complex1.atan();
      Complex complex10 = complex3.sin();
      Complex complex11 = Complex.valueOf((double) 37);
      complex9.tanh();
      complex1.abs();
      complex10.multiply(complex8);
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(830.39810864084, Double.NaN);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1018.94286), 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-0.9852866695372031));
      complex1.nthRoot(96);
      Complex complex2 = complex0.ONE.reciprocal();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
      complex4.ZERO.exp();
      Complex complex5 = complex3.pow(complex4);
      complex5.ZERO.pow(Double.NaN);
      Complex complex6 = complex4.sinh();
      Complex complex7 = Complex.valueOf((-497.38));
      complex6.ONE.multiply(complex3);
      complex6.ONE.sin();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex2.sinh();
      complex9.ZERO.multiply(complex1);
      complex4.acos();
      complex8.exp();
      complex4.subtract(complex2);
      complex1.tanh();
      complex7.sin();
      complex1.multiply(complex6);
      complex4.sin();
      complex2.subtract(2.8600151239287047E-298);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex.valueOf((-880.0), (-880.0));
      Complex complex0 = new Complex(4807.31786267, (-20.0));
      Complex complex1 = complex0.tan();
      complex1.log();
      Complex complex2 = new Complex(20.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(12.029530849866342, 12.029530849866342);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.tanh();
      complex3.add(0.0);
      complex2.sqrt1z();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.reciprocal();
      complex5.multiply((-2806));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(360.0, 360.0);
      Complex complex1 = complex0.multiply(360.0);
      Complex complex2 = new Complex(360.0, 7.225974166887662E86);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.I.tanh();
      complex2.I.abs();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.ONE.reciprocal();
      complex3.NaN.cos();
      complex3.hashCode();
      Complex complex8 = complex0.pow(complex4);
      complex8.acos();
      complex2.readResolve();
      complex1.pow(4525.9124964299335);
      complex0.sin();
      Complex complex9 = complex5.tan();
      complex6.atan();
      Complex complex10 = complex6.negate();
      complex10.INF.pow(20.120535952234402);
      complex1.subtract(7.225974166887662E86);
      complex7.sqrt();
      complex9.tan();
      Complex.valueOf(3692.6369752853066);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex.valueOf(519.5612750920276, 519.5612750920276);
      Complex complex0 = Complex.NaN;
      Complex.valueOf(0.07558783903288377);
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex0.readResolve();
      Complex complex2 = complex1.sqrt();
      complex2.createComplex(Double.POSITIVE_INFINITY, 5.4985298195094216E153);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6778947114944458, 3.3426643650610496E-268);
      Complex complex1 = complex0.asin();
      complex1.abs();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.multiply(438);
      Complex complex4 = Complex.valueOf((-2151.60453693795), 1.5800256583859738);
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex5.ZERO.subtract((-1769.7839448));
      Complex complex7 = complex6.add(complex3);
      Complex complex8 = complex4.ZERO.log();
      Complex complex9 = new Complex(0.6778947114944458, 710.10914542);
      complex9.ZERO.hashCode();
      complex0.ZERO.subtract(complex9);
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex1.subtract(complex10);
      Complex complex12 = complex2.atan();
      Complex complex13 = complex1.sqrt1z();
      complex13.ONE.sqrt1z();
      complex11.createComplex(3.3426643650610496E-268, 1.5800256583859738);
      complex5.asin();
      complex7.divide(complex3);
      complex13.subtract(Double.NaN);
      complex12.asin();
      complex11.multiply(438);
      complex11.add(Double.NaN);
      complex8.exp();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      complex1.NaN.tan();
      complex1.INF.acos();
      double double0 = (-796.37196);
      complex1.NaN.subtract((-796.37196));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(519.5612750920276, 519.5612750920276);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.NaN.cos();
      Complex complex3 = Complex.valueOf(3.953806005373127E-272);
      Complex complex4 = Complex.valueOf((-2.414213562373095), 3.953806005373127E-272);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.divide(519.5612750920276);
      Complex complex7 = complex5.negate();
      complex7.ONE.sin();
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex(1.914241888698598E-4, 3.953806005373127E-272);
      Complex complex10 = complex9.divide(complex6);
      complex10.sqrt1z();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2372.77681, 2372.77681);
      Complex complex1 = new Complex(2372.77681, 5.721901722635793E113);
      Complex complex2 = complex0.multiply(complex1);
      complex1.cos();
      Complex complex3 = Complex.valueOf(1242.419684);
      Complex complex4 = Complex.valueOf(2.69449520111084, Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      Complex complex5 = complex0.divide(1242.419684);
      complex5.negate();
      complex0.sin();
      complex3.tan();
      Complex complex6 = Complex.ONE;
      complex3.readResolve();
      complex6.nthRoot(454);
      complex2.sqrt();
      complex4.multiply(2254.90605);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex2.INF.abs();
      complex1.multiply((-2392.3));
      Complex complex3 = complex0.asin();
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.0, 19.0);
      Complex complex1 = complex0.tan();
      complex0.INF.log();
      complex1.log();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 45;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(882.5330877892397, 882.5330877892397);
      complex1.multiply(882.5330877892397);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-572576.4385540063));
      complex0.I.tanh();
      Complex complex2 = complex1.multiply(complex0);
      complex0.ZERO.log();
      complex1.INF.abs();
      Complex complex3 = complex0.I.divide((-101.5637404284));
      complex2.ZERO.nthRoot(2325);
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex2.I.pow(complex5);
      Complex complex6 = complex2.tanh();
      complex4.toString();
      Complex complex7 = complex3.add((-572576.4385540063));
      complex7.I.multiply(2325);
      Complex complex8 = complex4.add(complex7);
      complex8.ZERO.toString();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex8.multiply(2325);
      complex11.negate();
      complex11.abs();
      complex9.sinh();
      complex10.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.500201674336832E-8);
      Complex complex1 = complex0.NaN.multiply(1.500201674336832E-8);
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = Complex.valueOf(1.500201674336832E-8);
      Complex.valueOf((-3227.4831), 679.499591815315);
      complex0.sqrt1z();
      complex3.divide(Double.NaN);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.sin();
      complex5.tan();
      Complex complex6 = complex4.atan();
      complex6.ONE.nthRoot(1395);
      complex2.readResolve();
      complex1.nthRoot(144);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(520.599485, 520.599485);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      complex2.sqrt1z();
      complex3.sqrt();
      complex0.sin();
      complex3.hashCode();
      Complex complex4 = new Complex((-248.027315), (-1.0));
      complex4.conjugate();
      Complex complex5 = Complex.valueOf(2577.818670626686, (-1145.429438624319));
      complex5.acos();
      complex0.tan();
      complex2.atan();
      complex5.readResolve();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.9888977057628651, 0.9888977057628651);
      Complex complex2 = Complex.valueOf((-1.083731651792243E7));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.divide((-1.083731651792243E7));
      Complex complex5 = complex0.multiply(1036);
      Complex complex6 = complex3.subtract((double) 1036);
      Complex complex7 = Complex.valueOf(1.0, (double) 3794);
      complex7.pow(complex6);
      complex1.acos();
      Complex complex8 = complex3.tanh();
      complex3.conjugate();
      Complex complex9 = complex0.divide(complex3);
      complex2.abs();
      complex5.nthRoot(138);
      Complex complex10 = complex6.log();
      complex4.sinh();
      complex10.conjugate();
      complex8.reciprocal();
      complex0.cosh();
      Complex.valueOf((-629.8));
      complex6.getArgument();
      Complex complex11 = complex8.tanh();
      complex9.log();
      complex11.add((-3.1415926535007257));
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 0.6527930498123169;
      Complex complex0 = new Complex(0.6527930498123169);
      Complex complex1 = complex0.multiply((-378));
      Complex complex2 = complex0.subtract(0.6527930498123169);
      Complex complex3 = Complex.valueOf(2.5664454597063013E-4, (double) (-378));
      Complex complex4 = new Complex(2.5664454597063013E-4);
      complex1.pow(complex4);
      Complex complex5 = complex4.acos();
      complex5.tanh();
      complex4.conjugate();
      Complex complex6 = complex2.divide(complex4);
      complex3.abs();
      try { 
        complex6.nthRoot((-378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -378
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(2.603954315185547, 0.9888977057628651);
      Complex complex1 = Complex.valueOf((-1.083731651792243E7));
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex3.I.multiply((-378));
      complex3.I.subtract(0.9888977057628651);
      Complex complex4 = Complex.valueOf(0.9888977057628651, (double) 3794);
      complex4.NaN.pow(complex2);
      Complex complex5 = complex3.acos();
      complex5.INF.tanh();
      complex5.conjugate();
      Complex complex6 = complex5.ZERO.divide(complex3);
      complex6.ZERO.abs();
      complex0.nthRoot(3794);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.sinh();
      complex8.NaN.conjugate();
      Complex complex9 = complex8.reciprocal();
      complex2.cosh();
      Complex complex10 = Complex.valueOf((-1.083731651792243E7));
      complex10.getArgument();
      Complex complex11 = complex0.tanh();
      complex11.NaN.log();
      complex1.add(3.441979296651362E-7);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.6527930498123169);
      Complex complex1 = new Complex(1055.5422979307, 433.35);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 4.995552216100365E-193);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = Complex.valueOf((-1444.029704762491));
      complex3.sqrt();
      complex5.negate();
      Complex complex8 = new Complex(1.0, 1055.5422979307);
      complex6.cosh();
      Complex complex9 = complex2.add((-4227.147665462658));
      complex6.reciprocal();
      complex3.tanh();
      complex7.add(381.55445496826866);
      Complex complex10 = Complex.INF;
      complex10.isInfinite();
      Complex.valueOf((-2107.97796), 6.099815017942321E-17);
      Complex complex11 = complex9.log();
      // Undeclared exception!
      complex11.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(882.5330877892397, 882.5330877892397);
      Complex complex2 = complex1.multiply((-3292.0081284715));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.reciprocal();
      complex0.sqrt1z();
      complex1.sqrt();
      complex1.sin();
      complex3.hashCode();
      Complex complex5 = Complex.ZERO;
      complex5.asin();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.sqrt();
      complex2.tanh();
      Complex complex7 = complex4.subtract(3.091617462831603E221);
      Complex complex8 = Complex.valueOf((double) (-329), Double.POSITIVE_INFINITY);
      complex8.sinh();
      complex7.getField();
      Complex complex9 = Complex.ONE;
      complex9.sinh();
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.NaN;
      complex9.isInfinite();
      Complex complex12 = Complex.valueOf(0.997737556561086, (-793.0));
      complex12.log();
      Complex.valueOf((-793.0), 0.8813735870195429);
      complex6.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(882.5330877892397, 882.5330877892397);
      Complex complex2 = complex1.multiply((-3292.0081284715));
      Complex complex3 = complex2.subtract(complex0);
      complex1.reciprocal();
      Complex complex4 = complex0.sqrt1z();
      complex1.sqrt();
      complex4.nthRoot(94);
      complex3.reciprocal();
      complex2.subtract((double) 94);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(520.599485, 19.0);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.sqrt1z();
      complex2.getField();
      Complex complex6 = complex4.exp();
      complex3.divide(complex4);
      Complex complex7 = complex0.subtract(complex1);
      complex4.cos();
      complex0.isInfinite();
      Complex complex8 = complex5.asin();
      complex1.sqrt();
      complex2.tanh();
      complex8.subtract(20.0);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 3725.686);
      Complex complex10 = complex9.sinh();
      complex7.getField();
      complex7.sinh();
      complex6.add(complex10);
      Complex.valueOf(19.0);
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf(6.283185307179586, 1.0187183636134904E-106);
      complex3.multiply(954.747);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(882.5330877892397, 882.5330877892397);
      Complex complex2 = complex1.multiply((-3292.0081284715));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.sqrt1z();
      complex1.sqrt();
      Complex complex6 = complex1.sin();
      complex3.hashCode();
      complex3.conjugate();
      Complex complex7 = complex6.acos();
      Complex complex8 = Complex.NaN;
      complex4.getField();
      Complex complex9 = complex5.sinh();
      Complex complex10 = new Complex((-3292.0081284715));
      complex9.add(complex10);
      Complex.valueOf(1541.124);
      Complex complex11 = new Complex((-1763.0118013708), 5.5822855204629114E-9);
      Complex.valueOf(2280.829083077, Double.NaN);
      complex7.multiply(1.0005665509961763);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 7.772668425499348E-8);
      Complex complex1 = complex0.createComplex(7.772668425499348E-8, 7.772668425499348E-8);
      complex1.ONE.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = Complex.valueOf((-1163.031));
      complex0.toString();
      complex1.getField();
      Complex complex5 = complex0.tanh();
      complex5.exp();
      complex5.sinh();
      complex5.toString();
      complex4.nthRoot(4811);
      Complex complex6 = complex0.createComplex((-2280.829083077), 726.7156513507069);
      complex6.pow((-1163.031));
      complex3.cosh();
      complex0.negate();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(882.5330877892397, 882.5330877892397);
      Complex complex2 = complex1.multiply((-3292.0081284715));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.reciprocal();
      complex0.sqrt1z();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex1.sin();
      complex6.INF.getArgument();
      complex2.hashCode();
      Complex complex7 = complex4.conjugate();
      complex7.acos();
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.ONE;
      complex1.divide(complex9);
      complex4.multiply((-329));
      complex3.atan();
      Complex complex10 = Complex.valueOf((double) (-329));
      Complex complex11 = complex10.multiply(2.0);
      complex11.multiply(672.92247087);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex5.I.createComplex(0.0, (-496.86597645));
      complex1.toString();
      complex0.multiply(complex2);
      complex5.sqrt();
      complex2.negate();
      complex2.cosh();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.multiply((-201));
      complex0.atan();
      complex5.multiply(6.283185307179586);
      complex8.multiply(1.0074354568442952E-9);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(864.3, (-1390.815393272));
      Complex complex1 = complex0.NaN.sinh();
      complex1.ZERO.exp();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex3.divide(8768.811744053446);
      Complex complex6 = complex1.negate();
      complex6.toString();
      complex1.multiply(0);
      complex2.multiply(complex6);
      Complex complex7 = Complex.valueOf(864.3, 1.3810978455418157);
      complex7.cos();
      complex0.toString();
      Complex complex8 = complex1.multiply(complex2);
      complex0.sqrt();
      complex4.negate();
      Complex complex9 = complex2.cosh();
      complex5.add((-1390.815393272));
      Complex complex10 = complex9.reciprocal();
      complex8.tanh();
      Complex complex11 = Complex.valueOf(1.0);
      complex10.divide(complex11);
      complex8.sinh();
      Complex complex12 = Complex.ZERO;
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(864.3, (-1390.815393272));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.exp();
      complex1.ZERO.sqrt1z();
      Complex complex3 = Complex.I;
      complex3.add(8.094245527567745E152);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.log();
      Complex complex7 = complex5.createComplex(6.099815017942321E-17, (-1.0));
      complex5.toString();
      Complex.valueOf((-1390.815393272), (-1390.815393272));
      complex2.sqrt();
      complex6.negate();
      complex6.cosh();
      complex2.add(527.45294);
      complex7.reciprocal();
      complex7.tanh();
      Complex complex8 = complex7.add(51.8);
      complex4.isInfinite();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.cosh();
      complex1.getReal();
      Complex complex2 = complex1.add((-2001.86515));
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.createComplex(0.0, 0.6527930498123169);
      complex5.readResolve();
      complex1.isNaN();
      Complex complex6 = complex1.acos();
      complex2.toString();
      Complex complex7 = complex5.sinh();
      complex7.tan();
      Complex complex8 = complex6.multiply(complex2);
      Complex complex9 = new Complex(1989.47580081, Double.POSITIVE_INFINITY);
      complex3.hashCode();
      Complex complex10 = complex5.multiply((-1819));
      Complex complex11 = complex10.add(643.11667783148);
      complex3.getArgument();
      Complex complex12 = complex0.multiply(complex5);
      Complex complex13 = complex1.subtract(complex8);
      complex13.nthRoot(1);
      complex0.sqrt1z();
      complex1.log();
      complex12.negate();
      Complex complex14 = complex11.asin();
      Complex complex15 = complex3.add(complex13);
      complex8.sinh();
      Complex complex16 = complex5.add(complex15);
      complex16.acos();
      complex14.multiply(1.1149986927391714E-7);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1.0705722541811197E-7), (-1018.7666542643116));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.ZERO.acos();
      complex0.INF.reciprocal();
      Complex complex3 = Complex.valueOf((-242.745203829998));
      complex3.multiply((-2895.69127));
      complex1.getReal();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(520.599485, 19.0);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.sqrt1z();
      complex2.getField();
      complex4.exp();
      complex3.divide(complex4);
      complex3.subtract(complex2);
      complex1.cos();
      complex5.isInfinite();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.sqrt();
      complex3.tanh();
      Complex complex8 = complex6.subtract(19.0);
      complex2.sinh();
      complex7.getField();
      Complex complex9 = complex3.sinh();
      Complex.valueOf(520.599485);
      Complex complex10 = new Complex(20.0, 20.0);
      Complex complex11 = complex10.pow(3.1441807353831463E-106);
      complex11.I.sqrt1z();
      complex8.getField();
      complex4.sinh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
      Complex complex1 = Complex.valueOf((-0.6527930498123169));
      Complex.valueOf(1045.6787892803081, (-963.88));
      complex0.atan();
      Complex complex2 = Complex.I;
      complex0.equals(complex1);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.pow((-2.9726830960751796E-9));
      complex1.hashCode();
      Complex complex2 = complex0.multiply((-2.9726830960751796E-9));
      complex1.add(complex0);
      complex0.divide(complex2);
      Complex complex3 = Complex.valueOf((-2.9726830960751796E-9));
      Complex.valueOf((-208.0430653439935), (-208.0430653439935));
      complex3.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.ZERO.cosh();
      complex2.ONE.pow(0.0);
      complex3.getImaginary();
      complex3.divide(0.9999999834064365);
      complex3.subtract(0.0);
      Complex complex4 = Complex.I;
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.6527930498123169);
      Complex complex1 = complex0.atan();
      complex1.multiply((-5123.233447670788));
      Complex complex2 = complex1.multiply(1061.0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-5489.277336328648));
      Complex complex2 = complex0.add((-5489.277336328648));
      complex0.nthRoot(37);
      complex1.ZERO.getArgument();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex4.multiply(0.0);
      Complex complex8 = complex3.negate();
      Complex complex9 = Complex.INF;
      complex9.isInfinite();
      Complex complex10 = complex7.log();
      Complex complex11 = Complex.INF;
      complex11.getImaginary();
      complex0.add((-5489.277336328648));
      complex4.sqrt();
      complex7.cosh();
      complex6.log();
      complex3.sin();
      Complex complex12 = complex5.sinh();
      complex8.isNaN();
      complex8.readResolve();
      complex10.subtract(complex12);
      complex5.divide(complex2);
      Complex complex13 = new Complex(0.0, 3.552483039882807E-9);
      complex13.sinh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.ONE.add((-630.1443642831628));
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex4.cos();
      Complex complex7 = Complex.NaN;
      complex7.readResolve();
      complex0.equals(complex6);
      complex2.hashCode();
      complex0.getField();
      Complex complex8 = complex4.reciprocal();
      Complex.valueOf((-630.1443642831628), (-1457.3048196071875));
      Complex complex9 = complex0.subtract(970.49);
      Complex complex10 = complex7.cos();
      complex10.getReal();
      Complex.valueOf((-128.544));
      complex1.add(970.49);
      Complex complex11 = complex7.exp();
      complex9.acos();
      complex0.getField();
      complex9.abs();
      complex5.subtract(1.0413759887481643E23);
      Complex complex12 = complex11.negate();
      complex1.asin();
      complex8.add(complex10);
      complex3.sinh();
      Complex complex13 = Complex.INF;
      complex12.add(complex13);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.500201674336832E-8);
      Complex complex1 = complex0.NaN.multiply(1.500201674336832E-8);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = Complex.valueOf(5.27579825970359E190, 1.5707963158766112);
      Complex.valueOf(4.968499160079769E-271, 1575.88625590509);
      Complex complex6 = complex3.sqrt1z();
      complex6.subtract((-1831.1));
      complex1.reciprocal();
      complex5.divide(395821.631109265);
      complex6.negate();
      Complex complex7 = complex0.tan();
      Complex complex8 = new Complex(0.375);
      complex8.toString();
      complex7.atan();
      complex5.readResolve();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.ONE.add((-630.1443642831628));
      Complex complex4 = complex0.NaN.cosh();
      complex4.ONE.sinh();
      complex0.I.multiply(complex1);
      Complex complex5 = complex0.sinh();
      complex5.asin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.multiply((-1007.6585755));
      Complex complex8 = complex6.negate();
      complex6.isInfinite();
      complex6.I.log();
      complex7.getImaginary();
      Complex complex9 = complex5.add(1906.0);
      Complex complex10 = complex9.INF.sqrt();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex11.log();
      complex10.getField();
      Complex complex13 = Complex.valueOf(Double.NaN);
      complex13.abs();
      complex0.subtract((-630.1443642831628));
      Complex complex14 = complex6.negate();
      complex3.asin();
      complex9.add(complex12);
      Complex complex15 = new Complex((-0.7103449660402462));
      complex15.sinh();
      complex14.add(complex8);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.multiply(2146741597);
      Complex.valueOf((double) 404);
      Complex complex1 = new Complex(404);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(4.1719443712336026E278, 0.0);
      Complex complex1 = complex0.sin();
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.I.sqrt1z();
      complex5.INF.getField();
      Complex complex6 = complex1.NaN.exp();
      complex6.NaN.divide(complex1);
      Complex complex7 = complex0.NaN.subtract(complex2);
      complex1.cos();
      complex7.acos();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex4.divide(complex0);
      Complex complex10 = complex9.multiply(37);
      complex1.atan();
      Complex complex11 = complex3.sin();
      Complex complex12 = Complex.valueOf((double) 37);
      complex10.tanh();
      complex1.abs();
      complex11.multiply(complex9);
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-5489.277336328648));
      Complex complex2 = complex0.add((-5489.277336328648));
      complex0.nthRoot(37);
      complex1.ZERO.getArgument();
      complex1.ONE.cos();
      Complex complex3 = Complex.valueOf(0.0, (-5489.277336328648));
      complex1.equals(complex3);
      complex2.hashCode();
      complex0.ONE.getField();
      Complex complex4 = complex2.reciprocal();
      Complex.valueOf((-5489.277336328648), (double) 37);
      Complex complex5 = complex0.subtract((-1421.21352));
      complex5.NaN.cos();
      complex0.getReal();
      Complex complex6 = Complex.valueOf(128.759529);
      complex6.I.add(1.0413759887481643E23);
      complex6.ONE.exp();
      complex0.acos();
      complex5.getField();
      complex4.abs();
      complex0.subtract((-159.09406347));
      complex2.multiply(37);
      Complex complex7 = complex0.pow((-1421.21352));
      complex7.log();
      complex4.exp();
      Complex complex8 = Complex.ONE;
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(864.3, (-1390.815393272));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.ZERO.sqrt1z();
      complex0.getReal();
      Complex complex4 = complex0.add((-1390.815393272));
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex4.createComplex(0.0, 0.0);
      complex7.ONE.readResolve();
      complex7.isNaN();
      Complex complex8 = complex0.acos();
      complex0.toString();
      Complex complex9 = complex8.NaN.sinh();
      complex9.I.tan();
      Complex complex10 = complex8.multiply(complex5);
      Complex complex11 = complex10.INF.tanh();
      complex11.hashCode();
      complex10.I.multiply(1);
      Complex complex12 = complex10.I.add(1304.3);
      complex5.getArgument();
      Complex complex13 = complex0.multiply(complex8);
      complex4.exp();
      complex13.acos();
      Complex complex14 = new Complex(1, (-1.5707963267948966));
      complex14.getField();
      complex6.abs();
      complex0.subtract(232.95);
      Complex complex15 = complex2.negate();
      complex12.asin();
      complex2.add(complex3);
      complex10.sinh();
      complex3.add(complex15);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.ONE.log();
      complex5.I.createComplex(0.0, (-496.86597645));
      complex1.toString();
      complex0.multiply(complex2);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex2.negate();
      complex2.cosh();
      Complex complex8 = complex6.add(998.63584859048);
      complex3.reciprocal();
      complex6.tanh();
      complex7.add(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(999.63584859048, 20.0);
      Complex complex1 = complex0.cosh();
      complex1.multiply(20.0);
      Complex complex2 = Complex.valueOf(3.953806005373127E-272, 999.63584859048);
      Complex complex3 = Complex.valueOf(999.63584859048, 999.63584859048);
      complex1.sqrt1z();
      complex3.subtract(999.63584859048);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.divide(20.0);
      Complex complex6 = complex1.negate();
      complex5.tan();
      complex4.toString();
      complex3.atan();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.ONE.add((-630.1443642831628));
      Complex complex4 = complex0.NaN.cosh();
      complex4.ONE.sinh();
      complex0.I.multiply(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.multiply((-1007.6585755));
      Complex complex9 = complex7.negate();
      complex7.isInfinite();
      Complex complex10 = complex7.I.log();
      complex8.getImaginary();
      complex5.add(1906.0);
      Complex complex11 = complex3.add(1906.0);
      Complex complex12 = complex10.exp();
      complex5.acos();
      complex5.getField();
      complex8.abs();
      complex8.subtract((-9.082923009890997E-9));
      complex5.negate();
      complex2.asin();
      complex11.add(complex2);
      complex6.sinh();
      complex7.add(complex12);
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(882.5330877892397, 882.5330877892397);
      Complex complex2 = complex1.multiply((-3292.0081284715));
      Complex complex3 = complex2.subtract(complex0);
      complex1.reciprocal();
      complex0.sqrt1z();
      complex1.sqrt();
      Complex complex4 = complex1.sin();
      complex3.hashCode();
      complex3.conjugate();
      complex4.acos();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.divide(complex4);
      complex4.multiply((-329));
      complex6.atan();
      complex4.sin();
      Complex complex7 = Complex.valueOf(882.5330877892397);
      complex5.tanh();
      complex7.abs();
      complex0.multiply(complex1);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.500201674336832E-8);
      Complex complex1 = complex0.NaN.multiply(1.500201674336832E-8);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.I.sqrt();
      complex0.sin();
      complex3.INF.hashCode();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = Complex.NaN;
      complex6.I.divide(complex7);
      Complex complex8 = complex2.multiply((-329));
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex9.INF.sin();
      complex10.multiply((-3112.6));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-419.15), (-419.15));
      complex0.INF.toString();
      Complex complex1 = complex0.subtract((-2833.0));
      complex0.isInfinite();
      complex1.INF.add(1.4470673509275515E-259);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.log();
      complex1.getImaginary();
      complex1.add((-0.9060367023968168));
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.cosh();
      complex4.log();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex2.sinh();
      complex3.isNaN();
      complex4.readResolve();
      complex7.subtract(complex4);
      complex4.divide(complex7);
      Complex complex8 = Complex.valueOf((-458.3885545), 69.18106982628592);
      complex8.sinh();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-419.15), (-419.15));
      complex0.INF.toString();
      Complex complex1 = complex0.subtract((-2833.0));
      Complex complex2 = complex0.tan();
      complex2.ONE.hashCode();
      complex1.acos();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.sqrt1z();
      complex4.sinh();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.I.getArgument();
      Complex complex1 = complex0.ONE.sqrt();
      complex1.I.abs();
      Complex complex2 = complex0.INF.multiply(1);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex2.I.multiply(complex0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.add(complex1);
      complex6.abs();
      complex6.NaN.cos();
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = complex7.INF.subtract(2.0);
      complex7.abs();
      Complex complex9 = complex1.reciprocal();
      complex9.INF.hashCode();
      Complex complex10 = complex5.I.log();
      Complex complex11 = complex2.log();
      complex8.acos();
      complex0.isNaN();
      complex10.NaN.nthRoot(1);
      Complex complex12 = complex5.sin();
      complex12.NaN.sqrt();
      complex3.getField();
      complex8.getField();
      complex1.acos();
      complex4.divide(0.0);
      complex5.cosh();
      complex10.multiply(complex1);
      complex7.negate();
      complex6.subtract(2.0);
      complex11.subtract(569.737451);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-540.7));
      complex0.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.multiply((-118.67871));
      Complex complex3 = Complex.valueOf((-118.67871));
      complex3.ONE.divide((-521.5084298));
      complex0.ZERO.exp();
      Complex.valueOf((-2402.041468713517));
      Complex complex4 = complex0.ZERO.sinh();
      complex4.getArgument();
      complex0.nthRoot(1);
      complex0.toString();
      complex4.sqrt1z();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex1.I.add(0.0);
      complex0.INF.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.I.negate();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.ONE.pow(complex6);
      complex7.ONE.toString();
      Complex complex8 = complex3.multiply(0.0);
      complex8.toString();
      Complex complex9 = complex3.tan();
      complex9.ONE.sqrt();
      Complex complex10 = complex0.I.cosh();
      complex10.I.subtract(complex2);
      Complex complex11 = complex9.atan();
      complex11.cos();
      Complex complex12 = complex0.createComplex(0.0, 0.0);
      Complex complex13 = complex9.tan();
      complex13.readResolve();
      complex9.sinh();
      complex4.multiply(1);
      Object object0 = complex4.readResolve();
      complex5.equals(object0);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4151833653450012, (-391.95432555));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex2.INF.pow(complex1);
      complex1.isInfinite();
      Complex complex3 = Complex.valueOf(Double.NaN, (-1225.39656291396));
      Complex complex4 = complex3.INF.multiply((-832.586413701065));
      complex3.add(complex1);
      Complex complex5 = complex3.divide((-1225.39656291396));
      complex5.INF.toString();
      Complex complex6 = complex5.sinh();
      complex6.createComplex((-534.79), Double.NaN);
      Complex complex7 = Complex.INF;
      complex3.add(complex7);
      complex4.sinh();
      complex1.getArgument();
      try { 
        complex1.nthRoot((-4541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,541
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(4.1719443712336026E278, 0.0);
      Complex complex1 = complex0.sin();
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.I.sqrt1z();
      complex5.INF.getField();
      Complex complex6 = complex1.NaN.exp();
      complex6.NaN.divide(complex1);
      complex0.NaN.subtract(complex2);
      complex1.cos();
      complex0.isInfinite();
      complex0.asin();
      Complex complex7 = complex0.sqrt();
      complex2.tanh();
      Complex complex8 = complex1.subtract(0.0);
      complex8.ZERO.sinh();
      complex7.getField();
      complex8.sinh();
      Complex.valueOf(20.0);
      Complex complex9 = complex3.pow(20.0);
      complex9.I.getField();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.conjugate();
      complex2.ONE.add((-630.1443642831628));
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex3.ONE.sinh();
      complex0.I.multiply(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.multiply((-1007.6585755));
      complex7.negate();
      complex7.isInfinite();
      Complex complex9 = complex7.I.log();
      complex8.getImaginary();
      Complex complex10 = complex5.add(1906.0);
      Complex complex11 = complex10.INF.sqrt();
      Complex complex12 = complex5.cosh();
      complex12.log();
      complex7.sin();
      complex9.sinh();
      complex0.isNaN();
      complex1.readResolve();
      complex3.subtract(complex11);
      complex4.divide(complex1);
      Complex complex13 = complex6.sinh();
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-5489.277336328648));
      Complex complex2 = complex0.add((-5489.277336328648));
      complex0.nthRoot(37);
      complex1.ZERO.getArgument();
      complex1.ONE.cos();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex2.hashCode();
      complex0.ONE.getField();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf((-5489.277336328648), (double) 37);
      Complex complex5 = complex0.subtract((-1421.21352));
      complex5.NaN.cos();
      complex0.getReal();
      Complex complex6 = Complex.valueOf(128.759529);
      complex6.I.add(1.0413759887481643E23);
      complex6.ONE.exp();
      Complex complex7 = complex0.acos();
      complex5.getField();
      complex3.abs();
      Complex complex8 = complex0.subtract((-159.09406347));
      complex8.ZERO.negate();
      complex3.asin();
      complex4.add(complex1);
      Complex complex9 = complex3.sinh();
      complex7.add(complex9);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.500201674336832E-8);
      Complex complex1 = complex0.NaN.multiply(1.500201674336832E-8);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.I.sqrt();
      complex0.sin();
      complex3.INF.hashCode();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = Complex.NaN;
      complex6.I.divide(complex7);
      Complex complex8 = complex2.multiply((-329));
      Complex complex9 = complex8.NaN.atan();
      complex9.INF.sin();
      Complex.valueOf(1.500201674336832E-8);
      Complex complex10 = complex4.tanh();
      complex10.INF.abs();
      complex2.multiply(complex4);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt1z();
      complex0.hashCode();
      complex0.readResolve();
      complex0.readResolve();
      complex0.ONE.subtract(0.0);
      complex1.INF.hashCode();
      Complex complex2 = complex1.pow((-123.0));
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.pow(complex2);
      complex4.NaN.log();
      complex4.NaN.sqrt();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.reciprocal();
      complex5.ONE.readResolve();
      complex2.add((-123.0));
      Object object0 = new Object();
      Complex complex7 = complex2.INF.cos();
      complex5.NaN.tanh();
      complex7.INF.nthRoot(2686);
      complex1.equals(object0);
      Complex complex8 = complex2.asin();
      complex2.multiply((-20.0));
      complex0.getField();
      complex5.equals((Object) null);
      complex6.toString();
      complex2.acos();
      complex7.multiply((-123.0));
      complex7.add(6.283185307179586);
      complex8.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2405.3));
      complex0.I.abs();
      Complex complex1 = Complex.valueOf((-2405.3), 85.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex1.pow(0.0);
      complex1.ZERO.hashCode();
      Complex complex5 = complex3.pow(0.0);
      complex1.pow(0.0);
      complex3.ZERO.multiply(1431);
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = complex5.pow(0.0);
      Complex complex8 = complex4.sqrt1z();
      complex8.log();
      complex4.createComplex(0.0, (-1057.76769981075));
      complex6.multiply((-2397.8558656451405));
      Complex complex9 = complex8.subtract(complex7);
      complex9.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf((-1311.163), 0.0);
      Complex complex2 = complex1.NaN.divide((-1311.163));
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex3.ONE.multiply(complex2);
      complex0.equals(complex1);
      complex0.INF.readResolve();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.ZERO.createComplex(0.0, 0.0);
      complex4.divide((-9.598330731102836E-8));
      Complex complex7 = complex2.subtract(complex1);
      complex7.sqrt();
      Complex complex8 = complex0.conjugate();
      complex8.ZERO.multiply(555);
      Complex complex9 = complex4.pow(complex5);
      complex9.INF.divide(complex0);
      complex9.log();
      complex3.getReal();
      Complex complex10 = complex3.add(complex4);
      complex10.getReal();
      complex6.subtract((-1311.163));
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      complex0.cosh();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.ONE.log();
      complex4.I.createComplex(0.0, (-496.86597645));
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex1.tanh();
      complex5.ZERO.toString();
      Complex complex6 = complex5.ONE.cos();
      complex6.tan();
      Complex complex7 = complex1.sqrt();
      complex7.INF.log();
      complex6.isInfinite();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.12956339275823E-9, 0.0);
      Complex complex1 = complex0.ONE.negate();
      complex0.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.multiply(0.0);
      complex1.ZERO.add(6.12956339275823E-9);
      Complex complex4 = complex1.subtract(6.12956339275823E-9);
      Complex complex5 = complex4.NaN.add(6.12956339275823E-9);
      Complex complex6 = complex2.atan();
      Complex.valueOf(0.0);
      Complex.valueOf((-963.88), (-2718.919146273911));
      complex6.atan();
      Complex complex7 = Complex.I;
      complex3.equals(complex7);
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(864.3, (-1390.815393272));
      Complex complex1 = complex0.NaN.sinh();
      complex1.ZERO.exp();
      complex1.ZERO.sqrt1z();
      complex0.getReal();
      Complex complex2 = complex0.add((-1390.815393272));
      Complex complex3 = complex2.I.reciprocal();
      complex2.NaN.sqrt1z();
      Complex complex4 = complex2.createComplex(0.0, 0.0);
      complex4.ONE.readResolve();
      complex4.isNaN();
      Complex complex5 = complex0.acos();
      complex0.toString();
      Complex complex6 = complex5.NaN.sinh();
      complex6.I.tan();
      Complex complex7 = complex5.multiply(complex3);
      Complex complex8 = complex7.INF.tanh();
      complex8.hashCode();
      complex7.I.multiply(1);
      complex7.I.add(1304.3);
      complex3.getArgument();
      Complex complex9 = complex0.multiply(complex5);
      Complex complex10 = complex0.subtract(complex9);
      try { 
        complex10.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.pow((-2.9726830960751796E-9));
      complex1.getImaginary();
      complex1.divide(2129.7255956159);
      Complex complex2 = complex0.subtract((-4.669479688040173E-9));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2319.62063320513, 2319.62063320513);
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.ONE.multiply((-3046));
      Complex complex2 = complex0.createComplex(2319.62063320513, 1517.112);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = Complex.valueOf(128.321);
      complex4.sin();
      Complex complex5 = complex3.INF.multiply(complex4);
      complex4.ONE.atan();
      Complex complex6 = complex1.NaN.sqrt();
      Complex complex7 = complex0.I.reciprocal();
      complex7.ONE.exp();
      Complex complex8 = complex5.I.add((-7.8552453));
      complex8.ONE.getField();
      Complex complex9 = complex3.log();
      Complex complex10 = Complex.valueOf(1517.112, 1978.0387138159558);
      complex1.pow(1517.112);
      complex6.subtract(complex9);
      complex1.sinh();
      // Undeclared exception!
      complex10.nthRoot(5583);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-253.231800101), (-253.231800101));
      complex0.getArgument();
      complex0.getField();
      complex0.abs();
      Complex complex1 = complex0.pow((-253.231800101));
      Complex complex2 = complex1.NaN.sqrt();
      complex1.multiply(37);
      complex1.divide(complex0);
      Complex.valueOf((-253.231800101), (double) 37);
      complex0.nthRoot(37);
      complex1.pow((-2.356194490192345));
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1.0705722541811197E-7), (-1018.7666542643116));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.ZERO.acos();
      complex0.INF.reciprocal();
      complex2.I.pow(complex0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2056.6852);
      complex1.toString();
      Complex complex2 = complex0.ZERO.sqrt();
      complex0.sqrt();
      Complex complex3 = complex0.add(complex1);
      complex2.ZERO.reciprocal();
      complex3.INF.getField();
      complex0.INF.asin();
      complex3.abs();
      Complex complex4 = complex3.negate();
      complex4.INF.divide(2056.6852);
      complex4.pow(2056.6854431096262);
      complex3.I.multiply((-1915.04901858847));
      complex2.getArgument();
      complex2.getArgument();
      Complex complex5 = complex3.divide(1487.9);
      complex5.I.subtract(6.283185307179586);
      Complex complex6 = complex3.createComplex(Double.NaN, 2089.7575015329);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = Complex.valueOf((double) 1, (double) 1);
      Complex complex3 = complex2.NaN.tan();
      complex3.I.sqrt();
      Complex complex4 = complex2.INF.multiply(1);
      complex4.ONE.tanh();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex0.divide(1.0);
      complex7.NaN.getField();
      complex5.INF.log();
      complex4.pow(508.9252584);
      complex6.cos();
      complex1.negate();
      complex7.reciprocal();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(911.6415, (-891.4833736452473));
      int int0 = (-1243);
      Complex complex1 = complex0.add((-891.4833736452473));
      complex1.INF.reciprocal();
      complex0.I.abs();
      complex0.ONE.readResolve();
      try { 
        complex0.nthRoot((-1243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,243
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = (-1853.4813367259862);
      double double1 = (-1794.21219);
      Complex complex0 = new Complex((-1853.4813367259862), (-1794.21219));
      Complex complex1 = complex0.ONE.add((-1512.4138974));
      complex1.createComplex((-1512.4138974), (-1794.21219));
      Complex complex2 = complex0.sinh();
      complex2.add((-1853.4813367259862));
      Complex complex3 = complex0.subtract(complex1);
      complex3.negate();
      Complex complex4 = complex3.ZERO.negate();
      try { 
        complex4.NaN.nthRoot((-103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -103
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(999.63584859048, 20.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(20.0);
      Complex complex3 = Complex.valueOf(3.953806005373127E-272, 999.63584859048);
      Complex.valueOf(999.63584859048, 999.63584859048);
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex4.I.subtract(999.63584859048);
      complex1.reciprocal();
      Complex complex5 = complex0.divide(2892.987);
      Complex complex6 = complex5.ONE.negate();
      complex6.ONE.tan();
      complex2.toString();
      complex1.atan();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.ZERO.sin();
      complex1.nthRoot(1618);
      complex0.getArgument();
      Complex complex4 = complex3.pow(complex2);
      complex1.ZERO.abs();
      Complex complex5 = complex1.sinh();
      complex5.NaN.toString();
      complex5.toString();
      Complex complex6 = complex1.INF.subtract(complex2);
      Complex complex7 = complex4.pow((-1353.50377606111));
      Complex complex8 = complex7.ZERO.negate();
      complex8.NaN.exp();
      complex5.hashCode();
      complex3.toString();
      Complex complex9 = complex4.cos();
      complex9.getField();
      Complex complex10 = complex0.pow(complex5);
      complex10.cos();
      Complex.valueOf((-1353.50377606111));
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(425.084114334);
      Complex complex1 = Complex.valueOf(425.084114334, (-181.81));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ONE.subtract(425.084114334);
      Complex.valueOf((-181.81), 425.084114334);
      complex0.isNaN();
      complex0.log();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.ONE.negate();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(501.7942978058);
      complex1.toString();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(1850.222, 1850.222);
      Complex complex1 = complex0.multiply((-101));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex2.INF.pow(complex1);
      Complex complex6 = complex0.multiply((double) (-101));
      complex6.NaN.asin();
      Complex complex7 = complex5.subtract(complex0);
      complex7.ONE.atan();
      complex2.isNaN();
      complex2.pow((double) (-101));
      Complex complex8 = complex4.add(complex1);
      complex6.conjugate();
      complex6.sinh();
      complex8.multiply((-101));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-3101.00580621912));
      complex0.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.divide(2.0);
      Complex complex4 = Complex.valueOf((-3101.00580621912), (-3101.00580621912));
      complex3.add(complex4);
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex3.subtract(6.283185307179586);
      complex7.INF.multiply(6.283185307179586);
      Complex complex8 = complex1.sqrt();
      complex8.INF.exp();
      complex8.createComplex(3.6938826366068014E-196, 3.6938826366068014E-196);
      complex5.readResolve();
      complex6.hashCode();
      complex0.tan();
      Complex complex9 = complex0.multiply((-1.0));
      try { 
        complex9.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.divide((-1323.0160854));
      complex0.subtract((-1323.0160854));
      complex1.multiply(762);
      Complex complex2 = complex0.asin();
      complex2.ONE.reciprocal();
      complex0.getReal();
      complex1.nthRoot(1333);
      Complex complex3 = Complex.valueOf(Double.NaN, (double) 1333);
      complex1.subtract(complex0);
      Complex complex4 = complex3.cosh();
      complex4.NaN.getArgument();
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = complex4.pow(complex5);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex6.negate();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ZERO.multiply((-1.7198866036687559E90));
      complex2.toString();
      Complex complex3 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.NaN.pow(complex4);
      complex5.getArgument();
      complex0.abs();
      Complex complex7 = complex1.I.negate();
      complex7.NaN.cos();
      complex0.getArgument();
      Complex complex8 = complex1.cosh();
      complex0.NaN.readResolve();
      Complex complex9 = complex3.ZERO.acos();
      complex9.ZERO.sin();
      complex0.abs();
      Complex complex10 = complex3.conjugate();
      complex1.negate();
      complex3.getReal();
      Complex complex11 = complex0.subtract(complex3);
      Complex complex12 = complex11.ONE.multiply(complex6);
      complex10.isInfinite();
      Complex complex13 = complex10.sinh();
      Complex complex14 = complex13.ONE.conjugate();
      complex14.add(complex11);
      complex4.isInfinite();
      complex5.divide(0.0);
      complex10.getField();
      complex8.exp();
      complex3.subtract(Double.NaN);
      complex12.multiply(0.0);
      complex0.createComplex(0.0, 2466.6947544);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(520.599485, 520.599485);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.INF.negate();
      complex4.I.toString();
      Complex complex5 = complex0.multiply(0);
      complex0.NaN.multiply(complex1);
      complex5.ONE.cos();
      complex5.ONE.toString();
      Complex complex6 = complex2.multiply(complex3);
      complex0.sqrt();
      complex4.negate();
      complex1.cosh();
      Complex complex7 = complex5.add(6.283185307179586);
      complex6.reciprocal();
      complex7.tanh();
      complex5.add(0.0);
      complex6.isInfinite();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      complex2.NaN.reciprocal();
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.multiply(1742.5049759);
      complex3.NaN.multiply(1742.5049759);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ZERO.nthRoot(133);
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex0.hashCode();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex1.subtract(complex2);
      complex6.ZERO.getArgument();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex0.log();
      complex8.subtract(0.0);
      complex0.acos();
      Complex complex9 = complex0.subtract(0.0);
      complex1.hashCode();
      Complex complex10 = complex5.I.createComplex(0.0, 0.0);
      Complex complex11 = complex0.multiply(complex9);
      complex4.multiply(complex2);
      complex11.multiply((-325));
      Complex complex12 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex13 = complex1.asin();
      complex5.I.toString();
      Complex complex14 = complex7.subtract(458.0);
      complex14.ZERO.negate();
      complex1.NaN.add(complex13);
      Complex complex15 = Complex.ONE;
      complex5.subtract(complex15);
      complex3.log();
      complex10.add(0.0);
      Complex complex16 = complex12.negate();
      complex16.tan();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.ONE.nthRoot(4384);
      assertFalse(list0.contains(complex0));
      assertEquals(4384, list0.size());
      
      Complex complex1 = complex0.reciprocal();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.valueOf(Double.NaN, 0.0);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-3923.250827675658));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex3.NaN.sinh();
      complex4.subtract(complex2);
      Complex complex5 = complex1.NaN.add(3542.3575);
      Complex complex6 = complex2.ZERO.add(3542.3575);
      assertTrue(complex2.isInfinite());
      
      boolean boolean0 = complex1.isInfinite();
      assertFalse(boolean0);
      
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex3.NaN.multiply((-3923.250827675658));
      Complex complex9 = complex7.INF.subtract(complex3);
      assertSame(complex9, complex8);
      
      Complex complex10 = complex1.sin();
      Complex complex11 = complex10.NaN.sinh();
      Complex complex12 = complex10.exp();
      double double0 = complex12.ONE.abs();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.5693166750915097, complex12.getReal(), 0.01);
      
      Complex complex13 = complex1.cos();
      assertEquals((-0.8262398686706889), complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex3.cosh();
      assertNotSame(complex3, complex6);
      assertSame(complex14, complex5);
      assertFalse(complex3.equals((Object)complex2));
      assertSame(complex3, complex11);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-6.540181860667302E168));
      Complex complex2 = Complex.valueOf(1254.0270579515793, (-6.540181860667302E168));
      assertEquals((-6.540181860667302E168), complex2.getImaginary(), 0.01);
      assertEquals(1254.0270579515793, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex1.INF.sinh();
      Complex complex6 = complex5.ZERO.pow(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.add(complex3);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex4);
      assertTrue(complex10.equals((Object)complex1));
      assertSame(complex9, complex8);
      assertNotSame(complex10, complex6);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertNotSame(complex10, complex5);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
  }
}
