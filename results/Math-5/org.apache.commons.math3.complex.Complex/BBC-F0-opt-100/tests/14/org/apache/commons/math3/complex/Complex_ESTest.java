/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:41:31 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex1.multiply(15.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.722612904888278E232), 1213.9868754975937);
      complex0.ONE.tan();
      complex0.pow(0.5805994272232056);
      Complex complex1 = complex0.sqrt1z();
      complex1.multiply(185);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(6.229095980733463E-53);
      Complex complex2 = complex1.multiply(15);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.createComplex(20.0, 1102.0);
      Complex complex6 = Complex.valueOf(6.229095980733463E-53, 1.1714041233062744);
      Complex complex7 = complex2.pow(45.8001);
      complex7.asin();
      Complex complex8 = complex6.subtract(1334.429);
      complex5.toString();
      complex8.nthRoot(37);
      Complex complex9 = complex4.multiply(complex1);
      Complex.valueOf(45.8001);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.I;
      complex0.I.hashCode();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.ZERO.pow(complex2);
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.ONE.subtract((-20.0));
      complex8.I.sin();
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex3.I.subtract(223.91625883521);
      Complex complex9 = complex7.atan();
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex5.INF.multiply(complex7);
      complex1.NaN.acos();
      Complex complex10 = complex7.pow((-20.0));
      complex10.ONE.nthRoot(450);
      Complex complex11 = complex2.negate();
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex6.sqrt();
      complex13.ONE.getArgument();
      Complex.valueOf((-20.0), (-20.0));
      complex4.reciprocal();
      complex5.asin();
      complex12.sinh();
      Complex complex14 = complex12.atan();
      complex14.ONE.getField();
      complex5.cosh();
      complex9.sinh();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(3796.459664518872);
      complex0.toString();
      Complex complex1 = new Complex(3796.459664518872);
      complex1.NaN.getArgument();
      Complex complex2 = new Complex(3796.459664518872, Double.NaN);
      Complex complex3 = complex0.divide(complex0);
      complex3.log();
      Complex complex4 = complex1.conjugate();
      complex0.tan();
      complex1.nthRoot(2845);
      complex2.atan();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.exp();
      Complex complex6 = new Complex((-342.0));
      complex6.negate();
      Complex complex7 = new Complex(3028.796801);
      complex7.tan();
      complex4.createComplex(2845, 20.0);
      complex4.abs();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.tanh();
      complex1.abs();
      Complex complex2 = complex1.reciprocal();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3.069849599753188E69, (-20.0));
      complex1.I.subtract((-20.0));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf((-2862.276371940333));
      Complex complex5 = complex3.ONE.multiply((-20.0));
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex1.exp();
      complex1.negate();
      complex8.tanh();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex4.ONE.sinh();
      complex9.INF.hashCode();
      Complex complex11 = complex9.tan();
      complex4.abs();
      complex8.add((-20.0));
      complex2.acos();
      complex5.log();
      complex10.asin();
      complex0.acos();
      complex11.acos();
      complex7.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1559.0, 1559.0);
      complex0.NaN.conjugate();
      Complex complex1 = Complex.I;
      complex1.NaN.abs();
      Complex complex2 = complex0.subtract(complex1);
      complex2.multiply(728);
      complex2.ZERO.acos();
      complex0.divide(complex2);
      Complex complex3 = complex0.sqrt();
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(2827.74, 0.0);
      Complex complex2 = complex1.divide(2.5257552661512635E-165);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.log();
      complex0.conjugate();
      complex4.createComplex(1344.645775219797, 6.283185307179586);
      Complex complex5 = Complex.I;
      complex3.nthRoot(286);
      Complex complex6 = complex0.atan();
      complex2.acos();
      complex0.isNaN();
      complex3.reciprocal();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1.4161468365471424);
      Complex complex1 = complex0.I.cos();
      complex1.INF.multiply(complex0);
      complex0.atan();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-2635.5311573801737));
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.I.reciprocal();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex0.negate();
      complex4.ZERO.abs();
      Complex complex9 = complex8.asin();
      complex9.I.sinh();
      complex0.ONE.toString();
      complex9.INF.nthRoot(2181);
      Complex complex10 = complex4.sinh();
      Complex.valueOf((-711.7), (-9.374695893307895E158));
      Complex complex11 = complex10.NaN.divide((double) 2181);
      Complex complex12 = complex8.conjugate();
      complex12.NaN.sin();
      Complex complex13 = complex4.multiply(complex12);
      complex13.cos();
      Complex complex14 = complex7.createComplex(0.0, Double.NaN);
      complex7.tanh();
      complex14.NaN.cos();
      complex11.reciprocal();
      complex14.atan();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 4360.38120164;
      Complex.valueOf(4360.38120164);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.toString();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.atan();
      complex2.ZERO.asin();
      Complex complex3 = Complex.valueOf(790.5788982705923, 3.9313342464E12);
      Complex complex4 = complex0.subtract((-2584.1255974));
      Complex complex5 = complex0.asin();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.INF.sqrt();
      complex7.INF.multiply((-2584.1255974));
      Complex complex8 = complex3.ONE.createComplex(261.742913052, (-1819.1));
      complex1.ZERO.hashCode();
      Complex complex9 = complex5.createComplex(870.317503497, (-2584.1255974));
      complex9.multiply(2916);
      Complex complex10 = complex0.ZERO.multiply(complex6);
      complex10.nthRoot(2916);
      complex9.hashCode();
      complex3.tan();
      Complex complex11 = complex3.divide(complex1);
      complex11.I.pow(complex8);
      complex4.cos();
      complex8.cos();
      complex8.abs();
      Complex complex12 = complex8.sin();
      complex12.getField();
      complex2.subtract(3.8679729175917516E-8);
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1.2926667550488092E7), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.tanh();
      complex3.reciprocal();
      Complex.valueOf(270.415226, (-1.2926667550488092E7));
      Complex complex4 = complex1.multiply(complex0);
      complex4.ZERO.subtract((-677.7));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = new Complex(20.0, 1306.8767);
      Complex complex2 = complex0.multiply(complex1);
      complex0.isInfinite();
      Complex complex3 = Complex.valueOf((-790.5788982705923), 20.0);
      complex3.isInfinite();
      complex0.acos();
      complex1.tanh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = Complex.ZERO;
      complex3.multiply(complex1);
      Complex complex7 = Complex.valueOf(6.283185307179586);
      complex7.divide(complex2);
      complex4.sqrt();
      Complex complex8 = complex6.divide(complex1);
      complex3.ZERO.getField();
      complex8.ONE.readResolve();
      complex5.divide(complex3);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-1.862645149230957E-8));
      complex0.I.negate();
      complex0.pow(complex1);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sqrt();
      complex4.divide(complex5);
      complex2.divide(complex5);
      complex3.multiply((-2475.39317197));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1741.37, 502.0434137955949);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.multiply((-1));
      complex0.multiply(294);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex0.subtract((-1.0));
      Complex complex7 = complex1.log();
      complex2.sqrt();
      Complex complex8 = complex3.pow(complex6);
      complex7.ONE.exp();
      Complex complex9 = Complex.NaN;
      complex5.reciprocal();
      complex7.readResolve();
      complex4.subtract(502.0434137955949);
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex8.add((-1.0));
      complex11.subtract(1741.37);
      Complex complex12 = new Complex(1741.37, 294);
      complex10.pow(complex4);
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY, 1101.0);
      complex13.tanh();
      Complex.valueOf(6.283185307179586, 1409.79973887466);
      complex2.multiply(complex9);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.multiply(complex0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = new Complex(2427.446, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.divide(complex2);
      complex1.add(1.1155805587768555);
      Complex complex6 = complex0.ONE.pow(complex2);
      complex6.exp();
      Complex complex7 = complex1.negate();
      Complex complex8 = new Complex(3.9174693825966044E-64, 2030.250507509598);
      Complex complex9 = complex8.subtract((-1600.652620215));
      Complex complex10 = Complex.I;
      complex9.reciprocal();
      Complex complex11 = Complex.I;
      complex0.negate();
      complex0.add(complex10);
      complex5.abs();
      complex7.divide(complex2);
      complex2.acos();
      complex10.negate();
      complex10.isInfinite();
      complex4.multiply(810);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.nthRoot(817);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex1.sqrt();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(8.3778329, 8.3778329);
      complex1.multiply(complex0);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex1.isInfinite();
      Complex complex2 = complex1.acos();
      // Undeclared exception!
      complex2.nthRoot(2146461488);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.2926667550488092E7), (-1.2926667550488092E7));
      complex0.multiply(complex1);
      complex1.readResolve();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ZERO;
      complex2.equals(complex3);
      complex3.isInfinite();
      Complex complex4 = complex1.acos();
      complex4.tanh();
      complex1.add((-1.2926667550488092E7));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.I;
      complex7.multiply(complex1);
      Complex complex9 = complex6.divide(complex8);
      complex9.sqrt();
      complex3.add(complex1);
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(621.476);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.multiply(complex0);
      complex0.divide(complex2);
      Complex complex5 = Complex.I;
      complex5.sqrt();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.divide(complex6);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-668.55));
      Complex complex1 = Complex.valueOf((-668.55), (-668.55));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.divide(complex1);
      complex3.toString();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      complex1.I.subtract(20.0);
      complex2.ONE.tan();
      complex0.isNaN();
      Complex complex3 = complex1.reciprocal();
      complex1.sqrt();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      complex2.getImaginary();
      Complex complex3 = complex1.divide(Double.NEGATIVE_INFINITY);
      complex0.subtract(complex3);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(3796.459664518872);
      complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.tan();
      complex2.NaN.getArgument();
      complex0.subtract(Double.NaN);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.acos();
      complex4.negate();
      Complex complex5 = new Complex(Double.NaN);
      complex0.isInfinite();
      complex2.subtract(3796.459664518872);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.6553317308425903, (-3025.8));
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      Complex complex2 = Complex.NaN;
      complex2.equals("xIH\">`S =:XM`");
      Complex complex3 = Complex.valueOf((-3025.8));
      complex3.isInfinite();
      complex0.acos();
      complex0.tanh();
      Complex complex4 = complex2.add(0.6170875772350976);
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.multiply(complex6);
      complex5.divide(complex0);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = Complex.valueOf((-495.238137), 0.6170875772350976);
      complex9.getImaginary();
      complex2.sqrt();
      complex7.divide(1.0);
      Complex complex10 = Complex.valueOf(476.0, (-398.0));
      complex10.subtract(complex4);
      complex8.getField();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.multiply(0.0);
      Complex complex1 = complex0.asin();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(3796.459664518872);
      complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.tan();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.add(Double.NaN);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = Complex.ZERO;
      complex0.multiply(complex3);
      Complex complex6 = complex3.divide(complex4);
      Complex complex7 = complex2.sqrt();
      complex0.getImaginary();
      complex7.sqrt();
      complex3.divide(1.1934680816813702E125);
      Complex complex8 = new Complex((-20.0));
      Complex complex9 = complex8.subtract(complex0);
      complex6.getField();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf((-407.0), (-407.0));
      complex2.ZERO.negate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex4.INF.subtract(1442.042573514);
      complex1.I.tan();
      Complex complex7 = complex3.I.sin();
      complex7.getField();
      Complex complex8 = complex3.divide(complex4);
      complex0.abs();
      complex3.INF.conjugate();
      complex8.cos();
      complex8.toString();
      Complex complex9 = complex6.negate();
      Complex.valueOf(20.0);
      Complex complex10 = complex6.ONE.pow(356.15);
      complex9.add((-1782.7510510301));
      Complex.valueOf(356.15, Double.NaN);
      complex9.pow(complex6);
      Complex.valueOf((-407.0));
      complex9.divide(1.066575527191162);
      complex5.acos();
      complex8.multiply(3245);
      Complex complex11 = Complex.INF;
      complex11.INF.subtract(complex10);
      complex0.add(complex11);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.valueOf(0.04756242568370987);
      complex1.subtract((-2883.67));
      complex2.nthRoot(1);
      Complex complex3 = complex0.add((-2883.67));
      complex1.tanh();
      Complex complex4 = complex2.multiply(17);
      complex4.I.asin();
      complex4.toString();
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.2926667550488092E7), (-1.2926667550488092E7));
      Complex complex2 = complex0.multiply(complex1);
      complex1.equals(complex2);
      complex0.isInfinite();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      complex5.multiply((-2666));
      complex3.pow(complex1);
      complex4.multiply((-2666));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(3796.459664518872);
      complex0.toString();
      Complex complex1 = complex0.sinh();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex0.divide(complex0);
      complex3.log();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = new Complex(1.633308028614055E81);
      complex0.tan();
      complex1.nthRoot(2845);
      complex2.atan();
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.exp();
      Complex complex7 = new Complex((-342.0));
      complex7.negate();
      Complex complex8 = new Complex(3028.796801);
      complex8.tan();
      complex4.createComplex(2845, 20.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex1.subtract(3943.68);
      complex0.NaN.nthRoot(1);
      complex0.add(1869.966117808);
      Complex complex4 = complex1.atan();
      complex4.exp();
      complex2.negate();
      complex1.tan();
      complex3.createComplex(1, 1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(3796.459664518872);
      complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.tan();
      complex3.NaN.getArgument();
      complex0.subtract(3796.459664518872);
      Complex complex4 = complex3.ONE.createComplex(0.0, 3516.275449536975);
      Complex complex5 = Complex.valueOf(Double.NaN, (-3.8679729175917516E-8));
      complex5.multiply(Double.NaN);
      complex4.divide(3598.3440326143);
      complex4.multiply(3796.459664518872);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = new Complex(2427.446, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      complex3.asin();
      Complex complex4 = complex3.divide(complex2);
      complex1.add(1.1155805587768555);
      Complex complex5 = complex1.negate();
      Complex complex6 = new Complex(3.9174693825966044E-64, 2030.250507509598);
      Complex complex7 = complex6.subtract((-1600.652620215));
      Complex complex8 = Complex.I;
      complex7.reciprocal();
      Complex complex9 = Complex.I;
      complex0.negate();
      complex0.add(complex8);
      complex4.abs();
      complex5.divide(complex2);
      complex2.acos();
      complex8.negate();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.createComplex(2427.446, 2427.446);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.subtract((-868.74751741164));
      Complex complex5 = complex3.tan();
      complex1.getImaginary();
      complex4.sqrt();
      complex5.divide((-868.74751741164));
      Complex complex6 = Complex.valueOf(6.283185307179586, 2427.446);
      complex6.subtract(complex2);
      complex2.getField();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex0.log();
      Complex complex3 = new Complex((-2289.9810352297227), (-2289.9810352297227));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.createComplex((-2289.9810352297227), 2631.3);
      complex4.tan();
      complex2.nthRoot(1);
      complex5.atan();
      Complex complex6 = complex5.exp();
      complex6.negate();
      complex4.tan();
      complex2.createComplex((-2289.9810352297227), 3727.146430588);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.createComplex(20.0, 1.3924360275268555);
      complex2.ZERO.readResolve();
      complex1.INF.conjugate();
      Complex complex3 = complex0.NaN.multiply((-1667.27339768657));
      Complex complex4 = complex0.log();
      complex4.I.getArgument();
      complex3.subtract(complex1);
      complex0.nthRoot(2054);
      complex0.ONE.sin();
      Complex complex5 = complex3.log();
      Complex complex6 = complex4.INF.add(complex3);
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex5.INF.subtract(1.3924360275268555);
      complex8.INF.hashCode();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.NaN.multiply(complex9);
      complex1.pow(complex3);
      complex7.tan();
      complex4.sin();
      complex10.getField();
      complex4.tan();
      complex0.pow((double) 2054);
      complex10.subtract(complex4);
      complex6.multiply((double) 2054);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = (-1380);
      Complex complex1 = complex0.ONE.multiply((-1380));
      complex1.ONE.nthRoot(2084);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.acos();
      complex2.I.hashCode();
      Complex complex4 = complex0.NaN.atan();
      complex2.I.pow(complex3);
      complex0.sin();
      Complex complex5 = complex2.I.pow(complex4);
      complex5.ONE.add((double) 2084);
      complex4.NaN.createComplex(Double.POSITIVE_INFINITY, (-1380));
      Complex.valueOf(Double.POSITIVE_INFINITY, (double) 2084);
      try { 
        complex2.INF.nthRoot((-680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -680
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.2926667550488092E7), (-1.2926667550488092E7));
      Complex complex2 = complex0.multiply(complex1);
      complex1.equals(complex2);
      complex0.isInfinite();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex2.pow(complex4);
      Complex complex7 = Complex.ZERO;
      complex7.multiply(complex6);
      Complex complex8 = complex0.divide(complex4);
      complex6.sqrt();
      complex0.getImaginary();
      complex7.sqrt();
      complex3.divide((-992.1));
      complex0.subtract(complex5);
      complex8.getField();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(3796.459664518872);
      complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.tan();
      complex3.NaN.getArgument();
      Complex complex4 = complex0.subtract(3796.459664518872);
      Complex complex5 = complex3.ONE.createComplex(0.0, 3515.0);
      complex5.sin();
      complex4.ONE.add(complex1);
      complex4.readResolve();
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = complex6.NaN.divide(3796.459664518872);
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex8 = complex2.subtract(complex4);
      complex1.isNaN();
      complex0.sinh();
      Complex complex9 = Complex.NaN;
      complex2.equals(complex9);
      complex7.toString();
      complex8.multiply(143);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 2163.84);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.subtract((-3054.81));
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.add(0.0);
      complex4.multiply(989);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = new Complex(0.4148636822843022, 0.0);
      complex7.createComplex(20.0, Double.POSITIVE_INFINITY);
      complex6.multiply((-3794.7964118523396));
      complex7.acos();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex3.subtract(complex1);
      complex3.getArgument();
      complex9.sqrt1z();
      complex3.readResolve();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.142035961151123);
      Complex complex1 = complex0.INF.conjugate();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.divide(complex2);
      complex3.add((-520.816449433707));
      Complex complex5 = Complex.ZERO;
      complex5.negate();
      complex3.subtract(0.0);
      Complex complex6 = complex0.reciprocal();
      complex1.negate();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.add(complex4);
      complex8.ZERO.cosh();
      complex5.abs();
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex6.divide(complex9);
      complex6.acos();
      complex2.negate();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2025);
      Complex complex2 = complex1.I.createComplex(2025, (-2794.0));
      complex0.getField();
      complex2.ZERO.multiply(complex1);
      complex1.equals(complex2);
      complex1.isInfinite();
      Complex complex3 = Complex.valueOf((double) 2025, (double) 2025);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.I.add(0.0);
      Complex complex6 = complex1.pow(complex0);
      Complex.valueOf(0.0);
      complex2.divide(complex6);
      Complex complex7 = new Complex((-2935.7090521003847), (-1124.34));
      Complex complex8 = complex7.sqrt();
      complex4.getImaginary();
      complex5.sqrt();
      Complex complex9 = complex0.divide(1.5707963267948966);
      complex9.log();
      Complex complex10 = complex3.subtract(complex8);
      complex5.getField();
      complex7.toString();
      complex10.add(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-3595.367651644));
      complex0.equals("(C@Zz]9]GaZ6o}");
      complex0.isInfinite();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.add((-3321.3534639596337));
      complex2.pow(complex0);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = new Complex(8.503357503286679E-5, 492.42731432);
      complex4.divide(complex5);
      Complex complex6 = Complex.ONE;
      complex2.getImaginary();
      complex5.sqrt();
      Complex complex7 = complex0.divide(1.0);
      complex7.subtract(complex4);
      complex1.getField();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2026);
      complex0.getField();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.abs();
      complex2.sqrt();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2025);
      Complex complex2 = new Complex(2025, 0.6709295511245728);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.divide(complex2);
      complex2.add(3.9174693825966044E-64);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.I;
      complex7.reciprocal();
      Complex complex8 = Complex.I;
      complex8.negate();
      complex5.add(complex4);
      complex6.abs();
      complex4.divide(complex5);
      complex8.acos();
      complex4.negate();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-3321.3534639596337), (-3321.3534639596337));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide((-3321.3534639596337));
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.add((-3595.367651644));
      complex0.cosh();
      Complex complex5 = complex3.multiply((-3321.3534639596337));
      complex2.hashCode();
      complex5.multiply((-2100.94648868985));
      Complex complex6 = complex5.cos();
      complex3.negate();
      complex5.isNaN();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.cos();
      Complex complex9 = complex4.add(0.0);
      complex7.hashCode();
      Complex complex10 = complex9.subtract((-706.80529647256));
      complex10.divide((-3595.367651644));
      complex1.equals(complex0);
      complex8.add(8.04292566181629);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2025);
      Complex complex2 = complex1.I.createComplex(2025, (-2794.0));
      complex0.getField();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.equals(complex2);
      complex1.isInfinite();
      Complex complex4 = complex2.acos();
      complex4.tanh();
      Complex complex5 = complex1.I.add(0.0);
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex1.multiply(complex3);
      Complex complex8 = complex7.ONE.divide(complex3);
      complex6.sqrt();
      complex7.getImaginary();
      complex0.ONE.sqrt();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.I;
      complex9.equals(complex10);
      complex5.toString();
      complex8.multiply(1494);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2025);
      Complex complex2 = complex1.I.createComplex(2025, (-2794.0));
      complex0.getField();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = Complex.valueOf((-1287.9033));
      Complex complex4 = complex0.subtract((double) 2025);
      Complex complex5 = complex4.add(3705812.0);
      Complex complex6 = complex5.multiply((-1));
      Complex complex7 = Complex.INF;
      complex7.reciprocal();
      complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.multiply((-2794.0));
      Complex complex9 = Complex.I;
      complex9.acos();
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.ONE;
      complex6.subtract(complex11);
      complex7.getArgument();
      Complex complex12 = complex1.sqrt1z();
      complex8.readResolve();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.142035961151123);
      Complex complex1 = complex0.INF.conjugate();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex1.equals("org.apache.commons.math3.complex.Complex");
      complex1.isInfinite();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.tanh();
      complex1.add(8.750367485925089E-8);
      Complex complex6 = Complex.valueOf(4443.1535282956);
      complex6.pow(complex2);
      Complex complex7 = new Complex(2.8031064837396716E-5, 2.8031064837396716E-5);
      Complex complex8 = complex7.multiply(complex3);
      Complex complex9 = new Complex(1.142035961151123, 8.750367485925089E-8);
      complex4.divide(complex9);
      complex1.sqrt();
      complex8.getImaginary();
      complex5.sqrt();
      complex0.divide(8.750367485925089E-8);
      Complex complex10 = Complex.ZERO;
      complex10.getField();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1555.852);
      complex0.NaN.tanh();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1555.852, 1555.852);
      complex0.sqrt1z();
      complex1.NaN.multiply(1);
      Complex complex3 = complex2.subtract(1555.852);
      complex0.getField();
      Complex complex4 = complex0.ZERO.acos();
      complex1.pow(complex3);
      Complex complex5 = complex1.log();
      complex5.INF.multiply(1.0);
      Complex complex6 = complex4.tan();
      complex0.hashCode();
      complex2.negate();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.INF.cosh();
      complex1.multiply(0.4126010537147522);
      Complex complex3 = complex1.pow(complex2);
      complex3.ONE.readResolve();
      complex2.NaN.add(287.139);
      Complex complex4 = complex0.NaN.cos();
      complex3.ONE.getArgument();
      Complex complex5 = complex1.multiply((-1469));
      complex0.ZERO.tan();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex3.ONE.asin();
      complex5.NaN.add(complex8);
      complex7.NaN.getArgument();
      complex0.getField();
      complex3.isNaN();
      Complex complex9 = complex7.sqrt1z();
      complex6.INF.createComplex(1605.3158911414, 2173.8);
      complex6.sqrt();
      complex0.exp();
      Complex complex10 = Complex.INF;
      complex10.multiply(complex5);
      complex1.pow(complex10);
      complex9.pow(287.139);
      complex4.add(0.0);
      Complex complex11 = complex6.acos();
      complex11.ZERO.readResolve();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2376.4), (-2376.4));
      Complex complex2 = complex1.ONE.createComplex((-2376.4), (-2376.4));
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex0.NaN.toString();
      complex0.I.hashCode();
      Complex complex4 = complex0.acos();
      complex4.multiply(1.2599210498948732);
      complex4.NaN.getField();
      complex0.nthRoot(1346);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex6.add((-2376.4));
      complex3.divide(complex0);
      Complex complex8 = complex0.INF.tanh();
      Complex complex9 = complex5.add(1.2599210498948732);
      complex7.ONE.pow(complex9);
      Complex.valueOf(1.2599210498948732, (double) 1346);
      complex9.readResolve();
      Complex.valueOf(0.0);
      complex8.pow((double) 1346);
      Complex complex10 = complex1.multiply(2131);
      complex10.NaN.sqrt1z();
      complex8.add(complex7);
      complex2.reciprocal();
      complex4.nthRoot(2131);
      Complex.valueOf(1535.4);
      complex1.pow((double) 1346);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 2163.84);
      complex1.I.asin();
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.add(Double.POSITIVE_INFINITY);
      complex1.NaN.negate();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.ZERO.reciprocal();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.add(complex1);
      complex5.I.abs();
      complex3.ZERO.divide(complex4);
      complex3.acos();
      complex3.negate();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      complex0.NaN.abs();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.equals(complex1);
      complex1.hashCode();
      complex0.abs();
      Complex complex2 = complex0.subtract(2.0);
      complex2.ZERO.add(2739.603440913766);
      complex2.multiply(complex1);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-2296.070023473617);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.NaN.sinh();
      complex0.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 1502.3128058986595);
      complex3.INF.createComplex((-4356.100911262), 0.0);
      Complex.valueOf(0.0);
      complex0.divide(complex3);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1421.4415164005388), (-1421.4415164005388));
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.reciprocal();
      complex0.NaN.acos();
      Complex complex3 = complex2.divide((-3766.872851378819));
      complex2.isNaN();
      complex3.getField();
      Complex.valueOf((-3766.872851378819));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1900.792264706442);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.createComplex(1900.792264706442, 1900.792264706442);
      complex3.NaN.sinh();
      complex3.NaN.getArgument();
      Complex complex4 = complex3.NaN.divide((-4462.69));
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex5.ZERO.divide(4872.11);
      complex4.I.getArgument();
      Complex complex7 = complex4.INF.multiply((-2737));
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex4.exp();
      complex8.multiply(1900.792264706442);
      complex4.negate();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.ZERO.tanh();
      complex11.INF.createComplex(2071.2835, 1.5707963267948966);
      Complex complex12 = complex8.tanh();
      complex12.I.exp();
      complex1.acos();
      complex10.add(0.0);
      complex7.nthRoot(811);
      complex6.acos();
      complex4.multiply(Double.NaN);
      complex5.log();
      Complex.valueOf((-2567.4747), 1524.790699908);
      complex2.divide(0.0);
      complex8.nthRoot(657);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.atan();
      complex0.readResolve();
      complex0.isNaN();
      Complex complex2 = complex0.divide(1218.1323269736533);
      Complex complex3 = complex0.sqrt1z();
      complex3.I.getArgument();
      complex0.getArgument();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.NaN.multiply((-2170));
      complex0.NaN.reciprocal();
      complex5.ZERO.atan();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.getReal();
      complex0.equals(complex3);
      complex2.readResolve();
      complex4.I.pow((-1340.66088727));
      complex1.isInfinite();
      complex4.multiply(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1774.44), 2592.6695213952903);
      Complex.valueOf((-2347.785532439645));
      complex0.I.multiply(2592.6695213952903);
      Complex complex1 = complex0.add((-1774.44));
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex2.sinh();
      complex5.NaN.conjugate();
      complex5.ONE.multiply(complex0);
      complex5.ZERO.cosh();
      complex3.ONE.getArgument();
      complex0.NaN.abs();
      int int0 = (-2915);
      try { 
        complex4.nthRoot((-2915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,915
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0571553019207106E-8), 1325.778);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.multiply(1881.77514926);
      Complex complex3 = complex0.ONE.add((-1.0571553019207106E-8));
      complex0.NaN.createComplex((-122.579950957), 1325.778);
      complex2.I.readResolve();
      Complex complex4 = new Complex(2.0, (-1.0571553019207106E-8));
      Complex complex5 = complex3.ZERO.subtract(complex4);
      complex1.readResolve();
      complex1.sqrt();
      complex5.sin();
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.I.divide(complex1);
      Complex complex2 = Complex.ONE;
      complex2.ONE.log();
      Complex complex3 = complex0.multiply(complex2);
      complex2.subtract((-9.621538067089515E-8));
      Complex.valueOf(1029.2491524, (double) 1);
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = complex4.ZERO.atan();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex0.sqrt1z();
      complex6.toString();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-315.9851226), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.INF.sin();
      complex0.NaN.atan();
      complex0.sqrt1z();
      complex1.tan();
      Complex complex4 = complex2.subtract(complex3);
      complex1.asin();
      complex4.abs();
      Complex complex5 = complex4.log();
      complex3.atan();
      complex5.add((-315.9851226));
      complex4.nthRoot(787);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(3796.459664518872);
      complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.tan();
      complex3.NaN.getArgument();
      Complex complex4 = complex0.subtract(3796.459664518872);
      Complex complex5 = complex3.ONE.createComplex(0.0, 3515.0);
      complex5.sin();
      complex4.ONE.add(complex1);
      complex4.readResolve();
      Complex complex6 = Complex.valueOf(3796.459664518872);
      Complex complex7 = complex6.NaN.divide(3796.459664518872);
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex8 = complex2.subtract(complex4);
      complex1.isNaN();
      complex0.sinh();
      Complex complex9 = Complex.NaN;
      complex2.equals(complex9);
      complex7.toString();
      complex8.multiply(143);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.INF.atan();
      complex0.ONE.pow(complex1);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.add((-120.666));
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.multiply(0.0);
      complex4.ONE.hashCode();
      complex6.multiply(0.0);
      Complex complex7 = complex4.cos();
      complex6.negate();
      complex6.isNaN();
      complex1.ZERO.cos();
      complex1.add(0.0);
      complex2.hashCode();
      Complex complex8 = complex7.subtract((-1195.1984274907709));
      complex8.ONE.divide(Double.POSITIVE_INFINITY);
      complex4.equals(complex8);
      complex7.add(1847.24322898756);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      complex1.INF.hashCode();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.subtract(3727.146430588);
      Complex complex4 = complex2.subtract(0.0);
      complex3.ZERO.divide(complex1);
      Complex complex5 = complex4.ZERO.atan();
      complex5.NaN.multiply(complex3);
      complex5.ZERO.nthRoot(3250);
      complex1.getReal();
      complex1.exp();
      Complex complex6 = complex4.divide(3727.146430588);
      Complex complex7 = complex6.sqrt();
      complex7.multiply(0.0);
      Complex.valueOf(1999.13518);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex.valueOf((-20.0));
      complex1.subtract(3943.68);
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex0.add(1869.966117808);
      Complex complex4 = complex3.tanh();
      complex3.NaN.tan();
      complex4.multiply(1);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      complex0.ONE.readResolve();
      Complex complex2 = complex0.createComplex(1243.12585081, (-102.8715634));
      Complex complex3 = complex2.ZERO.negate();
      complex3.ZERO.add(complex1);
      complex2.ONE.hashCode();
      complex0.readResolve();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(859.9860741761947, 68.08);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3050.658883813);
      complex0.ZERO.subtract(0.3581387400627136);
      complex0.divide(263.5991353);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1674.0188985), (-1674.0188985));
      Complex complex1 = complex0.pow((-1674.0188985));
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.log();
      complex3.INF.log();
      complex2.ONE.acos();
      complex0.sinh();
      complex2.getField();
      complex1.multiply(712);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      complex2.log();
      complex0.add(20.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = Complex.valueOf(1120.0, 1120.0);
      complex1.ZERO.add((-1041.930199712842));
      Complex complex5 = complex0.NaN.subtract(complex1);
      Complex complex6 = complex0.atan();
      complex6.ZERO.tanh();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = Complex.valueOf((-1517.65841599316), (-485.30375764));
      complex5.asin();
      complex4.add(complex7);
      Complex complex9 = complex8.sqrt1z();
      complex9.ONE.negate();
      complex2.isInfinite();
      complex3.multiply(1362);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.multiply((-2666));
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1233.8660303299, (double) 1162);
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.NaN.multiply(1162);
      Complex complex3 = complex2.multiply((-1359.7961751));
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.INF.cosh();
      complex2.NaN.sqrt1z();
      complex5.INF.cos();
      Complex complex6 = complex0.sqrt1z();
      complex6.sin();
      complex6.cosh();
      try { 
        complex6.nthRoot((-2810));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,810
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.I.subtract(1291.4);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.ONE.cosh();
      complex0.multiply(complex1);
      complex1.pow(2453.0296);
      Complex complex6 = complex2.sin();
      complex0.ZERO.cos();
      complex6.getImaginary();
      complex3.getImaginary();
      complex4.createComplex((-2974.3), 2453.0296);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.cos();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.asin();
      complex1.INF.readResolve();
      complex0.sqrt();
      complex2.I.hashCode();
      complex1.getReal();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2025);
      Complex complex2 = complex1.I.createComplex(2025, (-2794.0));
      complex0.getField();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.equals(complex2);
      complex1.isInfinite();
      Complex complex4 = complex2.acos();
      complex4.tanh();
      Complex complex5 = complex1.I.add(0.0);
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex1.multiply(complex3);
      complex7.ONE.divide(complex3);
      complex6.sqrt();
      complex7.getImaginary();
      complex0.ONE.sqrt();
      Complex complex8 = complex1.divide(2665.60477);
      complex8.subtract(complex5);
      complex3.getField();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.142035961151123);
      Complex complex1 = complex0.INF.conjugate();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.subtract(1145.77652131);
      complex4.add(454.0);
      complex3.ONE.multiply(989);
      Complex complex5 = complex0.reciprocal();
      complex1.ZERO.createComplex((-1651.19), 454.0);
      Complex complex6 = complex5.multiply(1843.375221841);
      complex6.NaN.acos();
      Complex complex7 = Complex.INF;
      complex1.subtract(complex7);
      complex7.getArgument();
      complex2.sqrt1z();
      complex5.readResolve();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(754.611230862);
      Complex complex2 = Complex.valueOf(0.0);
      complex1.ZERO.multiply(754.611230862);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex3.ZERO.cos();
      complex0.equals(complex1);
      Complex complex5 = complex0.subtract((-837.14341414017));
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.ONE.asin();
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.add(complex4);
      assertEquals(2.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex5.sqrt1z();
      complex5.ZERO.multiply((-837.14341414017));
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex2.multiply(complex11);
      complex11.ZERO.readResolve();
      Complex complex13 = complex12.multiply((-379));
      assertEquals(-0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex10.ZERO.tanh();
      assertTrue(complex14.equals((Object)complex13));
      
      Complex complex15 = complex9.tan();
      String string0 = complex15.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      complex0.NaN.subtract(754.611230862);
      Complex complex16 = complex10.multiply(754.611230862);
      complex16.ONE.readResolve();
      assertEquals(754.611230862, complex16.getReal(), 0.01);
      
      Object object0 = complex10.readResolve();
      complex4.I.conjugate();
      Complex.valueOf((-2.62524392470767E-310));
      complex4.multiply(complex0);
      assertTrue(complex3.isInfinite());
      
      Complex complex17 = complex15.pow((double) (-379));
      assertEquals(837.1428168707297, complex9.getImaginary(), 0.01);
      assertEquals((-5.34051231136466E-14), complex17.getReal(), 0.01);
      assertEquals(1.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex18 = complex6.cosh();
      assertEquals(1.5430806348152437, complex18.getReal(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex6.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(2094.0);
      Complex complex1 = complex0.cos();
      complex1.getArgument();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.ZERO.createComplex(2094.0, (-1752.0));
      Complex complex5 = Complex.NaN;
      complex4.add(complex5);
      Complex complex6 = complex4.I.add(complex3);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.ONE.tan();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex7.getReal(), 0.01);
      
      complex0.isInfinite();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex1.pow(complex8);
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getImaginary(), 0.01);
      
      Complex.valueOf(2.608736797081283E-8, 1228.1415366079);
      complex8.equals(complex3);
      Complex complex10 = Complex.valueOf(913.0, 1437.6361457888);
      Complex complex11 = Complex.I;
      Complex complex12 = complex4.multiply(complex11);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(2094.0, complex12.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex5));
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex10));
      assertEquals(1752.0, complex12.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2464.12046862), (-244.0));
      Complex complex1 = complex0.NaN.sqrt1z();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      complex0.hashCode();
      double double0 = complex0.getArgument();
      assertEquals((-3.0428932702435136), double0, 0.01);
      
      Complex complex2 = complex0.add((-2464.12046862));
      Complex complex3 = complex2.add(0.0);
      assertEquals((-4928.24093724), complex3.getReal(), 0.01);
      assertEquals((-244.0), complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.pow(1381.7);
      complex1.NaN.divide(0.0);
      complex1.NaN.conjugate();
      complex1.ONE.log();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.I.divide(0.0);
      complex3.asin();
      Complex complex4 = complex0.cos();
      complex4.ONE.add(complex0);
      complex4.getImaginary();
      Complex complex5 = complex4.sqrt();
      complex1.NaN.tan();
      complex5.toString();
      int int0 = (-492);
      try { 
        complex4.ONE.nthRoot((-492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -492
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply((-1268.9157));
      Complex complex2 = complex0.atan();
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.divide(complex1);
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.0235056525096769E156), 0.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex2.NaN.subtract(0.5696103572845459);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex4.I.pow(complex2);
      complex6.ONE.abs();
      Complex complex7 = complex1.ONE.exp();
      Complex.valueOf(0.0);
      complex2.getArgument();
      Complex complex8 = complex0.pow(20.0);
      assertEquals((-1.224646799147353E-15), complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex1.log();
      Complex.valueOf((-1523.482));
      double double0 = complex9.abs();
      assertEquals(359.2402451929384, double0, 0.01);
      
      Complex complex10 = Complex.valueOf(0.0);
      assertTrue(complex10.equals((Object)complex5));
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex7.sin();
      assertEquals(0.41078129050290885, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      
      Complex complex12 = complex4.pow(complex3);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertNotSame(complex4, complex2);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertSame(complex4, complex12);
      assertSame(complex4, complex6);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ZERO.createComplex(2269.912012711473, (-282.0));
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex2.asin();
      assertSame(complex5, complex4);
      
      complex3.hashCode();
      assertEquals((-282.0), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(2269.912012711473, complex3.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2109.596536128151);
      Complex complex1 = complex0.INF.asin();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = (Complex)complex0.readResolve();
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(2109.596536128151, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.subtract((-1.0));
      assertEquals(2.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.valueOf((-1.0), 0.0);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex5.I.multiply((-593));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-1.0), complex4.getReal(), 0.01);
      assertEquals((-593.0), complex6.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertSame(complex5, complex3);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.atan();
      assertSame(complex7, complex1);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.ONE.reciprocal();
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.4142135623730951, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = complex4.acos();
      complex5.subtract(complex4);
      Complex complex6 = complex4.INF.tanh();
      Complex complex7 = complex0.I.exp();
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      
      complex4.ONE.getField();
      Complex complex8 = complex0.divide(99.944808475);
      Complex complex9 = Complex.valueOf(99.944808475);
      Complex complex10 = complex9.ZERO.add(complex8);
      Complex complex11 = complex8.I.subtract(99.944808475);
      complex8.NaN.getField();
      Complex complex12 = complex4.ZERO.tanh();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      complex0.divide(538.72);
      Complex complex13 = complex1.atan();
      Complex complex14 = complex10.multiply(complex0);
      complex14.NaN.getArgument();
      assertSame(complex10, complex5);
      
      complex6.cosh();
      assertSame(complex6, complex13);
      
      complex4.isInfinite();
      assertFalse(complex1.equals((Object)complex11));
      
      Complex complex15 = Complex.valueOf((-1429.0624231));
      assertEquals((-1429.0624231), complex15.getReal(), 0.01);
  }
}
