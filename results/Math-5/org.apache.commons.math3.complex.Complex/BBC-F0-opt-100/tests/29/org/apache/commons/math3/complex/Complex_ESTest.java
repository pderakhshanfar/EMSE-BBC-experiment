/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:19:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-8.772048092842086E271));
      complex1.sqrt1z();
      Complex complex2 = complex0.exp();
      complex1.tanh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.valueOf((-8.772048092842086E271));
      complex0.nthRoot(805);
      complex5.log();
      complex2.tan();
      complex4.acos();
      complex4.createComplex(419, 33054.0);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(3.198658219194836E-179, 3.198658219194836E-179);
      Complex complex1 = complex0.reciprocal();
      complex1.I.cos();
      Complex complex2 = complex1.I.createComplex(3.198658219194836E-179, 3.198658219194836E-179);
      complex2.ONE.abs();
      complex1.divide(complex0);
      try { 
        complex0.nthRoot((-2105));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,105
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = Complex.INF;
      complex2.ONE.sqrt1z();
      complex0.asin();
      Complex complex3 = new Complex(4.1484647020348996E7, Double.NaN);
      complex3.multiply(complex1);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.tan();
      Complex complex2 = complex1.asin();
      complex2.ONE.divide(0.29981517791748047);
      Complex complex3 = new Complex(1.5707963267948966, 2.3414841777613345E-218);
      complex3.cosh();
      Complex complex4 = complex3.tan();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.multiply((-153.1976295));
      complex4.subtract(complex2);
      Complex complex5 = complex0.subtract((-153.1976295));
      complex0.log();
      Complex complex6 = complex0.multiply((-137.13493523801));
      complex0.log();
      Complex complex7 = Complex.valueOf(224227.78319728898);
      Complex complex8 = complex7.tan();
      Complex.valueOf(1719.37);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.multiply(complex9);
      Complex complex10 = Complex.INF;
      complex5.asin();
      complex6.negate();
      complex8.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(224227.78319728898, 224227.78319728898);
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      complex0.I.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(224227.78319728898, 224227.78319728898);
      Complex complex1 = new Complex(224227.78319728898);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.multiply(224227.78319728898);
      Complex complex5 = complex2.ONE.multiply(574.0);
      complex3.NaN.subtract((-1557.999440245563));
      complex4.log();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = Complex.I;
      complex7.log();
      complex3.multiply(1719.37);
      Complex complex8 = complex5.pow(224227.78319728898);
      complex6.log();
      complex7.tan();
      Complex complex9 = Complex.valueOf(3.3888561478632076E-8);
      complex9.sinh();
      complex9.multiply(complex5);
      complex8.conjugate();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      complex0.multiply((-989));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1104.71535), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1.3055200576782227, 477.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-373.4295282750151), (-20.0));
      complex0.acos();
      Complex complex1 = complex0.sin();
      complex1.cosh();
      Complex complex2 = new Complex(8.126715604767163);
      complex1.tan();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-800.4803), 4734.45);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex2.I.asin();
      Complex complex5 = complex2.pow(4734.45);
      complex0.toString();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex5.exp();
      complex3.ZERO.pow((-455.446911));
      complex7.ONE.getArgument();
      Complex complex8 = complex6.subtract((-800.4803));
      complex3.ZERO.tanh();
      complex8.I.add(4734.45);
      Complex complex9 = complex0.ZERO.sqrt1z();
      complex9.acos();
      complex9.INF.exp();
      Complex complex10 = complex8.ONE.pow(complex6);
      complex10.I.pow(complex3);
      complex6.I.add(complex1);
      Complex complex11 = complex10.I.sinh();
      complex11.ZERO.sqrt1z();
      Complex complex12 = complex2.NaN.negate();
      complex12.NaN.log();
      complex2.reciprocal();
      Complex complex13 = complex6.reciprocal();
      complex13.ZERO.log();
      complex13.ONE.conjugate();
      complex5.pow(complex4);
      Complex complex14 = complex5.acos();
      complex14.I.exp();
      Complex complex15 = complex12.conjugate();
      complex14.abs();
      complex15.sqrt();
      complex4.tanh();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.002095574584687E155);
      Complex complex1 = complex0.acos();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3561944038423754, Double.POSITIVE_INFINITY);
      complex0.subtract(9.94381632344361E-9);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1174.8319);
      Complex complex2 = new Complex((-524.231254), Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.acos();
      complex1.getReal();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-1174.8319), (-1174.8319));
      Complex complex1 = new Complex((-1174.8319));
      complex1.equals(complex0);
      Complex complex2 = new Complex((-1174.8319));
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-106.43307));
      Complex complex5 = complex1.divide(complex4);
      complex0.sinh();
      complex5.exp();
      Complex complex6 = new Complex((-106.43307), (-1174.8319));
      complex6.nthRoot(1);
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(2821.263603429);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.acos();
      complex4.ZERO.sqrt();
      Object object0 = new Object();
      complex4.equals(object0);
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = new Complex((-20.0));
      complex2.equals((Object) null);
      complex2.log();
      Complex complex3 = new Complex(888.922);
      complex0.tanh();
      Complex complex4 = Complex.valueOf((-0.8193561374735009));
      Complex complex5 = complex4.divide(complex1);
      complex5.exp();
      Complex complex6 = Complex.valueOf(2539.24845);
      complex6.nthRoot(19);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.INF.add((-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.createComplex((-20.0), 2.625423995658143E-82);
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.add(1379.27164964);
      Complex complex6 = Complex.ZERO;
      complex5.NaN.sin();
      Complex complex7 = complex5.ONE.conjugate();
      Complex complex8 = complex2.I.reciprocal();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex10.divide(Double.POSITIVE_INFINITY);
      complex3.divide(complex7);
      Complex complex12 = Complex.ZERO;
      complex9.reciprocal();
      complex11.cosh();
      Complex complex13 = Complex.ZERO;
      complex4.equals(complex13);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.negate();
      complex2.sqrt();
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ZERO;
      complex1.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1174.8319);
      Complex complex1 = new Complex(1174.8319, 2520.938446385208);
      complex1.getImaginary();
      Complex complex2 = complex1.exp();
      complex2.nthRoot(1);
      complex0.getField();
      complex0.asin();
      Complex complex3 = complex0.multiply((-1420));
      complex3.acos();
      complex1.getReal();
      Complex complex4 = new Complex(1174.8319, 1544.2851514116605);
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.tan();
      complex6.divide(2.016791373353671E-194);
      complex7.divide(complex4);
      Complex complex8 = Complex.ONE;
      complex8.reciprocal();
      complex0.multiply(7);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8737789210802778, (-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.createComplex((-20.0), 2.625423995658143E-82);
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.valueOf(888.922, (-4166.139096966964));
      complex4.INF.multiply(138);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.sqrt();
      complex0.tan();
      complex6.ZERO.add(complex4);
      Complex complex7 = complex1.divide((-20.0));
      complex7.ONE.divide((-9.3337));
      Complex complex8 = complex6.log();
      Complex complex9 = complex5.tan();
      complex9.readResolve();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.NaN.divide((double) 138);
      Object object0 = new Object();
      complex10.equals(object0);
      complex8.subtract((-20.0));
      complex3.subtract((-3875.931));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8737789210802778, (-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.createComplex((-20.0), 2.625423995658143E-82);
      complex2.log();
      Complex complex3 = Complex.valueOf(2.625423995658143E-82, 888.922);
      Complex complex4 = Complex.ZERO;
      complex3.multiply(complex2);
      complex1.sin();
      complex2.isNaN();
      complex0.getArgument();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.sqrt();
      complex3.tan();
      complex6.divide((-3174.9970699996));
      Complex complex7 = complex3.log();
      complex5.tan();
      complex6.readResolve();
      complex0.equals(complex2);
      complex6.subtract(1.4849631831943512E-269);
      complex7.subtract(1985.916546635);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = new Complex(1.676169724123727E50, 3828.0);
      Complex complex3 = complex2.createComplex(701.0, Double.NaN);
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf(3828.0, 888.922);
      complex4.multiply(138);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex5.add(2.0);
      Complex complex8 = complex6.subtract(complex2);
      Complex complex9 = complex3.sin();
      complex4.conjugate();
      complex0.reciprocal();
      complex7.negate();
      Complex complex10 = complex8.sqrt();
      complex9.readResolve();
      complex8.equals(complex2);
      complex10.subtract(2751.3);
      complex6.subtract((-1822.8665604));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8737789210802778, (-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.I;
      complex0.atan();
      complex1.nthRoot(2262);
      Complex complex3 = Complex.valueOf(2.625423995658143E-82, (double) 2262);
      complex3.toString();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-93.02955944261191));
      Complex complex1 = complex0.tan();
      List<Complex> list0 = complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = Complex.valueOf((double) 412, (-613.0473801349));
      complex1.tanh();
      Complex complex3 = complex2.divide(complex0);
      complex3.getArgument();
      Complex complex4 = new Complex((-613.0473801349), (-613.0473801349));
      complex2.sqrt();
      complex3.add(complex4);
      complex1.negate();
      complex1.hashCode();
      complex3.isInfinite();
      Complex complex5 = new Complex((-613.0473801349));
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.add((-378.7313461945286));
      complex7.INF.multiply(complex6);
      complex2.equals(list0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      double double0 = (-70.9667379);
      Complex.valueOf((-70.9667379), (-2015.9070827138794));
      int int0 = 138;
      Complex complex2 = complex0.multiply(138);
      complex1.cos();
      double double1 = 1379.27164964;
      complex0.add(326.9);
      complex1.hashCode();
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1174.8319);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex0.equals(complex2);
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex((-1664.1));
      Complex complex5 = complex3.tanh();
      Complex.valueOf((-1.0000000000000004));
      complex3.divide(complex2);
      Complex.valueOf(1174.8319, 0.0);
      Complex.valueOf((-1038.664), (-1038.664));
      complex4.conjugate();
      complex1.abs();
      complex5.divide((-1.0000000000000004));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8737789210802778, (-20.0));
      complex0.isNaN();
      Complex complex1 = Complex.valueOf(0.8737789210802778, (-20.0));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.divide(complex0);
      complex3.getArgument();
      Complex complex4 = new Complex(6.283185307179586, 2.625423995658143E-82);
      Complex complex5 = complex2.sqrt();
      complex5.add(complex3);
      complex3.I.toString();
      Complex complex6 = Complex.INF;
      complex6.negate();
      complex0.hashCode();
      complex3.isInfinite();
      complex1.reciprocal();
      complex5.add((-613.0473801349));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-3059.1496729787), (-3059.1496729787));
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex3.ZERO.pow((-613.0473801349));
      Complex complex5 = new Complex((-1150.2757536851));
      complex5.hashCode();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex0.sinh();
      complex8.ONE.readResolve();
      Complex complex9 = complex6.I.createComplex((-1150.2757536851), (-3059.1496729787));
      Complex.valueOf((-2753.746215222));
      complex9.NaN.negate();
      Complex complex10 = complex5.tanh();
      complex10.ONE.abs();
      Complex complex11 = complex3.negate();
      complex11.sinh();
      Complex complex12 = complex6.pow(complex3);
      complex2.I.hashCode();
      complex7.divide(complex4);
      complex2.exp();
      complex6.atan();
      complex11.acos();
      complex4.divide(complex0);
      complex12.equals(complex11);
      Complex.valueOf((-613.0473801349));
      complex12.atan();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.pow(832.0);
      Complex complex2 = Complex.INF;
      complex2.abs();
      complex1.divide(complex2);
      int int0 = 1073741824;
      // Undeclared exception!
      complex1.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-93.02955944261191));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = Complex.valueOf((double) 412, (-613.0473801349));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.divide(complex0);
      complex2.getArgument();
      Complex complex5 = new Complex(2002.955558245, 0.6900760708753189);
      Complex complex6 = complex5.sqrt();
      complex3.ZERO.add(complex2);
      complex2.negate();
      complex0.hashCode();
      complex6.isInfinite();
      complex3.reciprocal();
      complex4.add((-613.0473801349));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8737789210802778, (-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.createComplex((-20.0), 2.625423995658143E-82);
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.valueOf(888.922, (-4166.139096966964));
      complex4.INF.multiply(138);
      complex1.cos();
      Complex complex5 = complex2.add(1379.27164964);
      complex5.NaN.subtract(complex1);
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex5.ONE.conjugate();
      complex2.I.reciprocal();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex2.sqrt();
      complex9.divide(Double.POSITIVE_INFINITY);
      complex3.divide(complex7);
      complex6.sinh();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = new Complex((-20.0));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.createComplex(2.625423995658143E-82, 2.625423995658143E-82);
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.valueOf((-2760459.9865152193), (-2833.7054519884196));
      complex5.multiply(138);
      complex6.cos();
      Complex complex7 = complex0.add((-2760459.9865152193));
      complex3.subtract(complex7);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex0.conjugate();
      complex5.reciprocal();
      complex1.negate();
      complex8.sqrt();
      complex4.readResolve();
      complex2.equals(complex9);
      Complex complex10 = Complex.ONE;
      complex10.subtract(120.90368737252);
      complex5.subtract(3.740711109655552);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.8737789210802778, 0.8737789210802778);
      Complex complex1 = complex0.divide((-233.034));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.cosh();
      complex0.getArgument();
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex3.tan();
      Complex complex8 = Complex.valueOf(0.8737789210802778, 0.8737789210802778);
      complex8.getField();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex5.subtract(complex4);
      Complex complex11 = complex7.acos();
      Complex complex12 = complex0.pow(complex6);
      complex3.getField();
      Complex complex13 = complex2.multiply(complex5);
      complex11.sin();
      complex11.isNaN();
      complex13.getArgument();
      complex4.sinh();
      complex6.sqrt();
      complex12.tan();
      complex13.divide((-233.034));
      complex1.log();
      complex13.tan();
      Complex complex14 = Complex.I;
      complex14.divide(1763801.2713212902);
      complex9.divide(complex1);
      complex10.sinh();
      Complex complex15 = complex3.reciprocal();
      complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = complex0.sin();
      complex2.pow((-105.75123093493697));
      complex1.NaN.abs();
      Complex complex3 = complex1.ONE.divide(complex2);
      complex3.I.nthRoot(412);
      Complex complex4 = complex1.divide(0.0);
      complex4.I.hashCode();
      complex2.sqrt();
      complex3.getImaginary();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = new Complex(412, (-2068.0));
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.log();
      complex7.tan();
      complex5.divide(2760459.9865152193);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.NaN;
      complex9.divide(complex10);
      complex8.sinh();
      complex8.reciprocal();
      complex0.multiply((-113));
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex((-1174.8319), (-1174.8319));
      complex0.getImaginary();
      Complex complex2 = complex0.exp();
      complex2.nthRoot(1);
      complex0.getField();
      complex0.asin();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex1.acos();
      complex4.getReal();
      complex1.acos();
      complex0.hashCode();
      complex0.sqrt1z();
      Complex complex5 = complex3.conjugate();
      complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex0.isNaN();
      Complex complex2 = Complex.valueOf((double) 412, (-613.0473801349));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.multiply(complex3);
      complex4.sin();
      complex4.isNaN();
      complex3.getArgument();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex2.sqrt();
      complex4.tan();
      complex1.divide((-3174.9970699996));
      complex3.log();
      Complex complex7 = complex6.tan();
      complex5.sinh();
      complex2.reciprocal();
      Complex complex8 = new Complex(0.0, (-3174.9970699996));
      complex8.multiply(412);
      complex2.sin();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = new Complex((-1.0), (-147.0));
      Complex complex2 = complex1.multiply(3409);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex((-1174.8319), (-1174.8319));
      complex0.getImaginary();
      Complex complex2 = new Complex(1.0);
      Complex complex3 = new Complex(1833.35180245, 1833.35180245);
      complex3.tanh();
      Complex complex4 = Complex.valueOf((-1.0));
      complex0.divide(complex1);
      Complex.valueOf((-1.0000000000000004), Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(713.90165584, 713.90165584);
      Complex complex6 = complex1.conjugate();
      complex5.abs();
      complex1.getArgument();
      complex2.sqrt();
      complex6.negate();
      complex3.hashCode();
      complex4.isInfinite();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1174.8319));
      complex1.hashCode();
      Complex complex2 = new Complex((-1174.8319), (-1174.8319));
      complex0.getImaginary();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.pow(1.0);
      complex4.abs();
      Complex complex5 = complex3.divide(complex2);
      complex1.nthRoot(378);
      Complex complex6 = complex5.divide(1.0);
      complex1.hashCode();
      Complex complex7 = complex3.sqrt();
      complex6.getImaginary();
      complex7.exp();
      complex5.cosh();
      Complex complex8 = Complex.NaN;
      Object object0 = complex8.readResolve();
      complex2.equals(object0);
      complex1.getArgument();
      complex8.multiply(378);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex1.divide(complex0);
      complex2.nthRoot(1841);
      Complex complex3 = complex0.divide(2229.0736);
      complex0.hashCode();
      complex2.sqrt();
      complex1.getImaginary();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.exp();
      complex5.cosh();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex3.getArgument();
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.tan();
      complex1.getField();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.acos();
      Complex complex8 = complex3.pow(complex7);
      complex3.getField();
      Complex complex9 = complex1.multiply(complex3);
      Complex complex10 = complex8.sin();
      complex5.isNaN();
      complex8.getArgument();
      complex6.sinh();
      Complex complex11 = new Complex(0.0);
      complex11.sqrt();
      complex1.tan();
      complex4.divide((-105.75123093493697));
      Complex complex12 = complex9.log();
      complex8.tan();
      complex0.divide((-3174.9970699996));
      complex10.divide(complex4);
      complex9.sinh();
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex2.multiply(complex1);
      Complex complex3 = complex2.sin();
      complex2.isNaN();
      complex1.getArgument();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.sqrt();
      complex3.tan();
      Complex complex6 = complex4.divide(0.7853981633974483);
      complex3.log();
      complex5.tan();
      Complex complex7 = complex2.divide(0.0);
      complex6.divide(complex7);
      Complex complex8 = Complex.ONE;
      complex8.sinh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1174.8319));
      complex1.hashCode();
      Complex complex2 = new Complex((-1174.8319), (-1174.8319));
      complex0.getImaginary();
      Complex complex3 = complex0.exp();
      complex3.nthRoot(1);
      complex1.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.multiply(1);
      complex5.sqrt();
      Complex complex6 = complex2.acos();
      complex6.getReal();
      complex2.acos();
      complex0.hashCode();
      complex2.sqrt1z();
      complex2.sqrt1z();
      complex6.getField();
      complex4.log();
      Complex complex7 = new Complex(1.0, (-1174.8319));
      complex7.readResolve();
      complex4.subtract(complex7);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2890.5608951302947));
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.cosh();
      complex1.getArgument();
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex0.ZERO.pow(complex3);
      Complex complex6 = complex4.I.tan();
      complex1.getField();
      Complex complex7 = complex2.cos();
      complex7.subtract(complex2);
      complex7.NaN.acos();
      complex4.ONE.pow(complex0);
      complex7.getField();
      Complex complex8 = complex7.INF.multiply(complex4);
      complex3.ONE.sin();
      complex2.isNaN();
      complex7.getArgument();
      Complex complex9 = complex8.sinh();
      complex9.NaN.sqrt();
      Complex complex10 = complex0.tan();
      complex10.divide(Double.NaN);
      complex5.cosh();
      Object object0 = complex10.readResolve();
      complex6.equals(object0);
      complex6.log();
      complex7.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.tanh();
      complex1.ONE.nthRoot(1);
      Complex complex2 = complex0.INF.add(complex1);
      complex2.INF.negate();
      complex2.ONE.sinh();
      complex2.ONE.abs();
      complex0.sqrt1z();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex(1);
      Complex complex5 = complex4.multiply(1);
      Complex complex6 = Complex.valueOf((double) 1);
      complex6.log();
      complex6.pow((-1751.0));
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.pow((-105.75123093493697));
      Complex complex4 = complex1.ONE.divide(complex2);
      Complex complex5 = complex1.divide((double) 412);
      complex5.I.hashCode();
      Complex complex6 = complex3.sqrt();
      complex3.getImaginary();
      Complex complex7 = complex1.ZERO.exp();
      complex7.NaN.nthRoot(1);
      complex1.getField();
      complex6.abs();
      complex0.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex4.multiply(412);
      Complex complex9 = Complex.I;
      complex9.log();
      complex0.pow((-4.7208848667217906E221));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex0.INF.divide(complex1);
      complex0.abs();
      complex1.getArgument();
      Complex complex5 = complex4.sqrt();
      complex5.NaN.negate();
      complex4.hashCode();
      complex3.getField();
      complex5.I.conjugate();
      Complex complex6 = complex5.log();
      complex6.ONE.multiply((-682));
      complex2.readResolve();
      Complex complex7 = Complex.I;
      complex7.subtract(complex0);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(243.19337, 1.5574076175689697);
      Complex complex1 = new Complex(3142.087897116832);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sinh();
      complex3.sinh();
      complex1.abs();
      complex0.sqrt1z();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.multiply(351);
      complex5.log();
      complex5.pow((-1.7929433274271985E-8));
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-613.0473801349), 20.0);
      complex1.tanh();
      Complex complex3 = complex2.divide(complex1);
      complex2.abs();
      complex3.getArgument();
      Complex complex4 = complex3.sqrt();
      complex0.negate();
      complex4.hashCode();
      complex1.isInfinite();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex1.ONE.tanh();
      Complex complex3 = complex0.INF.divide(complex1);
      complex0.abs();
      complex1.getArgument();
      complex3.sqrt();
      complex0.getReal();
      Complex complex4 = complex2.acos();
      complex0.hashCode();
      Complex complex5 = Complex.valueOf(57.3577459084685, Double.NaN);
      Complex complex6 = complex5.sqrt1z();
      complex4.sqrt1z();
      complex5.getField();
      Complex complex7 = complex1.log();
      complex7.readResolve();
      complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.pow((-105.75123093493697));
      complex1.NaN.abs();
      Complex complex4 = complex1.ONE.divide(complex2);
      complex4.I.nthRoot(412);
      Complex complex5 = complex1.divide(0.0);
      complex5.I.hashCode();
      complex3.sqrt();
      complex3.getImaginary();
      Complex complex6 = complex1.ZERO.exp();
      Complex complex7 = complex3.cosh();
      complex7.equals(complex6);
      complex4.log();
      complex6.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = complex0.sin();
      complex2.divide(0.29981517791748047);
      complex0.hashCode();
      Complex complex3 = complex2.sqrt();
      complex1.getImaginary();
      Complex complex4 = Complex.ONE;
      complex4.exp();
      complex0.nthRoot(387);
      complex2.getField();
      Complex complex5 = Complex.INF;
      complex5.asin();
      Complex complex6 = complex3.multiply((-149));
      Complex complex7 = complex0.tan();
      complex2.divide((double) 1);
      Complex complex8 = complex6.divide(complex7);
      complex1.sinh();
      Complex complex9 = Complex.valueOf((-3124.4455));
      Complex complex10 = complex4.multiply(372);
      complex8.getField();
      complex10.cos();
      complex4.subtract((-1283.6133526));
      complex9.subtract((-1283.6133526));
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.cosh();
      complex1.equals(complex3);
      complex1.getArgument();
      complex2.conjugate();
      Complex complex4 = complex3.pow(complex2);
      complex4.I.acos();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.ONE.cosh();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex.valueOf(0.0, 0.0);
      complex1.ONE.tanh();
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.abs();
      complex1.getArgument();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.ONE.sqrt1z();
      complex3.multiply((-1976));
      complex0.tan();
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = new Complex(Double.NaN);
      complex7.subtract((-1.0));
      complex5.subtract((double) (-1976));
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.atan();
      complex1.hashCode();
      Complex complex3 = complex0.sqrt();
      complex1.getImaginary();
      Complex complex4 = complex2.exp();
      complex0.nthRoot(2856);
      complex2.getField();
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.valueOf((-4524.6), (double) 1667);
      complex6.multiply(1);
      complex0.getReal();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.acos();
      Complex complex8 = complex3.add((double) 2856);
      complex1.divide(complex7);
      complex8.hashCode();
      complex5.add(complex3);
      complex4.sqrt1z();
      Complex complex9 = complex8.sqrt1z();
      complex4.multiply(136.904);
      complex9.getField();
      complex3.log();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.pow((-105.75123093493697));
      complex1.NaN.abs();
      Complex complex4 = complex1.ONE.divide(complex2);
      complex4.I.nthRoot(412);
      Complex complex5 = complex1.divide(0.0);
      complex5.I.hashCode();
      complex3.sqrt();
      complex3.getImaginary();
      Complex complex6 = complex1.ZERO.exp();
      Complex complex7 = complex3.cosh();
      complex7.equals(complex6);
      complex5.getArgument();
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(6.283185307179586);
      complex0.abs();
      Complex complex2 = complex0.divide(complex1);
      int int0 = 403;
      complex1.nthRoot(403);
      Complex complex3 = complex0.divide((-0.309775530891234));
      complex3.hashCode();
      Complex complex4 = complex3.sqrt();
      complex2.getImaginary();
      int int1 = (-4034);
      try { 
        complex4.nthRoot((-4034));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,034
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-2890.5608951302947), 458.0);
      complex2.tanh();
      complex0.divide(complex1);
      complex0.abs();
      complex1.getArgument();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.sqrt1z();
      complex4.multiply(2110);
      Complex complex6 = Complex.I;
      complex6.tan();
      complex5.hashCode();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-1133.2569622602641), (-1133.2569622602641));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      complex1.sqrt1z();
      Complex complex3 = complex2.multiply(759);
      complex3.tan();
      complex0.hashCode();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.sin();
      Complex complex1 = Complex.valueOf((-1132.509), (-1132.509));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.multiply(301);
      complex2.ZERO.hashCode();
      complex1.isInfinite();
      complex1.getReal();
      Complex complex4 = complex3.exp();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(2347.5567);
      complex1.tanh();
      complex0.equals(complex1);
      Complex complex2 = complex0.log();
      complex2.I.asin();
      complex2.conjugate();
      complex0.ONE.getField();
      complex0.I.nthRoot(2025);
      complex0.nthRoot(830);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.subtract((double) 2025);
      complex0.abs();
      complex4.negate();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-1.1603891006723397E-7));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex1.pow(56.32054991);
      Complex complex6 = complex3.pow(complex1);
      complex6.ONE.sqrt();
      Complex complex7 = complex3.I.divide(complex1);
      complex4.NaN.tanh();
      Complex complex8 = new Complex(2.0, (-419.0033353571296));
      complex8.INF.reciprocal();
      complex2.ZERO.subtract(complex8);
      Complex complex9 = complex4.createComplex((-419.0033353571296), 0.0);
      complex2.conjugate();
      complex7.subtract(0.0);
      complex7.toString();
      Complex complex10 = complex1.subtract(Double.NaN);
      complex10.I.sqrt1z();
      complex0.subtract(0.0);
      complex5.asin();
      complex2.acos();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(1.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex0.isInfinite();
      complex0.getImaginary();
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex2.ONE.add(complex0);
      Complex complex6 = complex5.ZERO.add((-1.0));
      Complex complex7 = complex2.INF.tanh();
      complex7.ONE.exp();
      complex3.equals("");
      Complex complex8 = complex3.cos();
      complex3.isInfinite();
      Complex complex9 = complex3.add(0.0);
      complex3.I.abs();
      complex3.readResolve();
      complex3.isNaN();
      complex2.pow(complex0);
      Complex complex10 = complex4.add(complex2);
      complex4.pow(complex9);
      Complex complex11 = complex1.tan();
      complex11.ONE.sinh();
      Complex complex12 = complex11.ZERO.reciprocal();
      complex12.I.divide(1.0);
      complex2.asin();
      Complex complex13 = Complex.valueOf(20.0);
      Complex complex14 = complex13.ZERO.negate();
      complex14.asin();
      complex2.negate();
      Complex complex15 = complex10.log();
      complex15.I.negate();
      complex8.asin();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex0.getReal();
      complex0.multiply(0.0);
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.acos();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex1.ONE.subtract(complex6);
      complex6.ONE.pow(complex4);
      Complex complex8 = complex0.asin();
      complex5.NaN.sqrt1z();
      complex5.createComplex(0.0, 2.0);
      Complex complex9 = complex8.subtract(complex2);
      complex9.I.divide(0.0);
      complex7.toString();
      complex7.isNaN();
      Complex complex10 = complex4.add(0.0);
      complex10.tan();
      complex4.atan();
      complex7.multiply(1276);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.I.add(2914.93);
      complex1.NaN.sinh();
      Complex complex2 = complex1.ZERO.sinh();
      complex1.NaN.negate();
      complex0.isNaN();
      complex2.exp();
      int int0 = (-877);
      try { 
        complex0.nthRoot((-877));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -877
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 223.8);
      Complex complex1 = complex0.subtract(223.8);
      complex0.NaN.pow(0.0);
      Complex complex2 = complex0.ONE.sinh();
      Complex.valueOf(223.8);
      Complex complex3 = complex2.I.pow(6.539175932653188E202);
      complex3.NaN.toString();
      complex3.NaN.exp();
      complex1.hashCode();
      Complex complex4 = complex2.asin();
      try { 
        complex4.ONE.nthRoot((-889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -889
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-1186.8));
      Complex complex1 = complex0.INF.conjugate();
      complex0.abs();
      Complex complex2 = complex0.cosh();
      complex1.equals(complex2);
      complex0.getArgument();
      complex1.multiply(3088);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-222.5));
      Complex complex2 = complex1.NaN.asin();
      complex2.NaN.hashCode();
      complex1.I.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.acos();
      complex4.INF.sinh();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.divide(complex4);
      complex6.NaN.hashCode();
      Complex complex7 = Complex.valueOf((-20.0), (-222.5));
      Complex complex8 = complex3.subtract((-1302.23296207));
      Complex complex9 = complex0.subtract((-20.0));
      complex5.reciprocal();
      Complex complex10 = complex4.add((-20.0));
      Complex complex11 = complex10.conjugate();
      complex7.I.hashCode();
      complex8.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex9.sqrt();
      complex13.INF.sqrt();
      complex6.getField();
      complex7.isNaN();
      complex1.log();
      try { 
        complex12.nthRoot((-808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -808
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1395.34314162, 0.0);
      Complex complex1 = Complex.valueOf(1395.34314162, 1554.7105280386);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.add(complex1);
      complex1.isNaN();
      Complex complex4 = complex0.INF.divide(complex1);
      complex4.I.sin();
      Complex complex5 = Complex.valueOf((-1121.29));
      complex5.I.atan();
      complex5.I.abs();
      Complex complex6 = Complex.ONE;
      complex1.INF.add(complex6);
      Complex.valueOf(0.0);
      complex1.readResolve();
      Complex complex7 = complex1.INF.exp();
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex2.subtract(0.0);
      Complex complex10 = complex9.ZERO.tanh();
      Complex complex11 = complex0.subtract(complex2);
      complex11.ONE.getField();
      complex2.I.subtract(complex1);
      complex3.NaN.getField();
      complex11.I.getArgument();
      complex2.toString();
      complex3.reciprocal();
      Complex complex12 = complex7.cos();
      complex8.tanh();
      complex3.exp();
      Complex.valueOf((-1121.29), 1.5707963267948966);
      complex12.INF.toString();
      complex2.subtract(complex7);
      complex10.divide(complex12);
      complex11.readResolve();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1028.319911793));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.log();
      complex1.ZERO.atan();
      Complex complex3 = complex0.exp();
      complex1.NaN.pow(complex2);
      complex3.ZERO.getArgument();
      Complex complex4 = complex2.sqrt();
      complex1.readResolve();
      Complex complex5 = Complex.valueOf((-1028.319911793));
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex1.NaN.subtract(complex6);
      complex0.INF.abs();
      complex7.I.hashCode();
      Complex complex8 = complex1.multiply((-1028.319911793));
      Complex complex9 = complex8.I.multiply((-1028.319911793));
      complex9.reciprocal();
      Complex complex10 = complex0.tanh();
      complex10.ZERO.getArgument();
      complex1.ZERO.toString();
      Complex complex11 = complex8.tan();
      complex5.ZERO.sqrt();
      Complex complex12 = complex11.INF.asin();
      complex2.createComplex((-1028.319911793), (-1028.319911793));
      complex6.isNaN();
      complex11.nthRoot(828);
      Complex complex13 = complex11.I.tan();
      complex2.pow(complex5);
      Complex.valueOf(0.0);
      complex12.INF.sqrt1z();
      complex0.abs();
      complex12.pow((-1459.305));
      complex4.tan();
      complex3.tanh();
      complex13.isInfinite();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.6754317105801715E46), 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex1.multiply(complex0);
      complex3.INF.subtract(1.3286716938018799);
      complex3.tanh();
      Complex.valueOf(0.0);
      complex0.multiply(1.3057724436551892E-9);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.INF.sin();
      complex3.ZERO.divide(complex1);
      complex0.INF.asin();
      complex1.NaN.nthRoot(4241);
      Complex complex4 = complex3.ZERO.multiply(4241);
      complex0.getReal();
      Complex complex5 = complex4.atan();
      complex5.ONE.asin();
      Complex complex6 = Complex.valueOf(9.515812117036965E-9);
      Complex complex7 = complex2.cosh();
      complex6.conjugate();
      complex2.toString();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex7.sin();
      complex9.multiply(complex2);
      complex0.getImaginary();
      complex2.sinh();
      complex2.multiply(Double.NaN);
      complex5.acos();
      Complex complex10 = Complex.ONE;
      complex8.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.add(0.0);
      complex0.getReal();
      complex0.readResolve();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3290.707588323);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.exp();
      complex2.I.readResolve();
      complex0.INF.asin();
      complex0.equals((Object) null);
      complex0.isNaN();
      Complex complex3 = complex1.multiply(3290.707588323);
      complex0.I.nthRoot(7);
      complex1.hashCode();
      Complex complex4 = complex0.reciprocal();
      complex0.sqrt();
      Complex complex5 = complex0.divide(complex3);
      complex5.ZERO.sqrt1z();
      complex4.hashCode();
      Complex.valueOf(3290.707588323);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex0.I.reciprocal();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.divide((-455.25));
      Complex complex4 = complex3.subtract(complex1);
      complex3.INF.cosh();
      complex3.INF.tanh();
      Complex complex5 = complex2.atan();
      complex4.cos();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1.81346294, (-1028.923436));
      complex0.I.getArgument();
      complex0.INF.readResolve();
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.NaN.exp();
      Complex complex2 = complex0.add(20.0);
      complex2.INF.asin();
      Complex complex3 = complex2.NaN.divide(20.0);
      Complex complex4 = complex3.subtract(20.0);
      complex4.INF.sqrt();
      complex2.getReal();
      complex2.toString();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.75123093493697));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(412);
      complex1.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.pow((-105.75123093493697));
      complex1.NaN.abs();
      Complex complex4 = complex1.ONE.divide(complex2);
      complex4.I.nthRoot(412);
      Complex complex5 = complex1.divide(0.0);
      complex5.I.hashCode();
      Complex complex6 = complex3.sqrt();
      complex3.getImaginary();
      Complex complex7 = complex1.ZERO.exp();
      complex7.NaN.nthRoot(1);
      complex1.getField();
      Complex complex8 = complex0.asin();
      complex8.multiply(1667);
      complex5.getReal();
      Complex.valueOf(0.0);
      Complex complex9 = complex5.acos();
      Complex complex10 = complex2.add(Double.NaN);
      complex10.ZERO.divide(complex8);
      complex5.hashCode();
      complex9.add(complex1);
      complex6.sqrt1z();
      complex4.sqrt1z();
      complex10.multiply(2.603954315185547);
      complex8.getField();
      complex9.log();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow(3.430336362898836E-90);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = complex0.ONE.multiply(complex2);
      complex5.sqrt();
      Complex complex6 = complex0.ONE.reciprocal();
      complex4.NaN.getField();
      Complex complex7 = complex6.I.pow(0.0);
      Complex complex8 = complex3.ZERO.multiply(complex2);
      complex0.abs();
      complex0.getField();
      complex8.tanh();
      complex7.getField();
      Complex.valueOf(Double.NaN, 6.007922084557054E-9);
      complex1.NaN.abs();
      complex3.nthRoot(1710);
      Complex complex9 = complex3.multiply(Double.NaN);
      complex4.abs();
      complex7.I.sqrt1z();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = Complex.I;
      Complex complex12 = complex10.ONE.pow(complex11);
      complex8.sqrt();
      Complex complex13 = complex9.conjugate();
      complex13.ZERO.cosh();
      Complex complex14 = complex10.multiply(complex7);
      Complex.valueOf(3.430336362898836E-90);
      complex3.tan();
      complex0.getField();
      Complex complex15 = complex14.multiply(complex12);
      complex10.sqrt();
      complex15.toString();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.INF.divide(0.2592042088508606);
      Complex complex3 = complex0.sqrt();
      complex3.subtract(36.800133807);
      Complex complex4 = complex2.asin();
      complex4.I.multiply(complex3);
      complex1.getImaginary();
      Complex complex5 = complex2.exp();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.pow(complex1);
      complex0.log();
      complex1.add(complex6);
      complex4.hashCode();
      complex5.reciprocal();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.NaN.createComplex(0.0, 0.0);
      Complex complex4 = complex1.asin();
      complex4.toString();
      complex4.I.pow(0.0);
      complex1.I.sqrt();
      complex3.abs();
      Complex complex5 = complex4.multiply(0.0);
      complex0.divide(4267.518503862996);
      Complex complex6 = complex4.NaN.asin();
      complex5.INF.toString();
      complex2.subtract(0.0);
      Complex complex7 = complex5.divide(complex4);
      complex4.hashCode();
      complex2.log();
      complex6.NaN.readResolve();
      complex6.sqrt1z();
      complex7.negate();
      complex6.abs();
      complex1.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1024.0);
      Complex complex1 = complex0.INF.multiply(1024.0);
      complex0.isNaN();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.multiply((-3824.0));
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.NaN.divide((-3824.0));
      Complex complex6 = complex4.negate();
      complex4.I.getField();
      Complex complex7 = complex0.ZERO.divide(1024.0);
      complex1.ZERO.exp();
      complex7.ONE.cos();
      Complex complex8 = complex1.I.multiply((-2271.768631));
      complex8.NaN.createComplex((-2729.76930505), (-2729.76930505));
      Complex complex9 = complex0.I.sqrt1z();
      complex9.I.multiply(complex6);
      Complex complex10 = complex1.conjugate();
      Complex complex11 = Complex.valueOf((-3168.15), (-3168.15));
      complex10.ONE.toString();
      complex11.ONE.exp();
      complex10.readResolve();
      complex4.add(complex6);
      Complex complex12 = Complex.valueOf((-3824.0), (-3824.0));
      complex3.hashCode();
      complex2.getReal();
      complex6.isInfinite();
      complex5.sin();
      complex4.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.toString();
      Complex complex2 = complex0.createComplex(370.8, 370.8);
      Complex complex3 = Complex.valueOf(370.8);
      complex0.INF.divide(complex2);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.multiply(370.8);
      Complex complex6 = complex3.multiply(complex2);
      complex2.reciprocal();
      complex6.ONE.abs();
      Complex.valueOf((-884.20425));
      complex0.tanh();
      complex4.getArgument();
      complex1.NaN.multiply(593);
      complex4.getArgument();
      complex1.getField();
      Complex complex7 = Complex.valueOf(0.0, 370.8);
      complex7.I.asin();
      complex5.tanh();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex1.ONE.tanh();
      Complex complex3 = complex0.INF.divide(complex1);
      complex0.abs();
      complex1.getArgument();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.NaN.negate();
      complex5.ONE.sqrt1z();
      complex4.multiply((-1976));
      Complex complex6 = complex0.tan();
      complex6.hashCode();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-4.556583652800433E-8), (-4.556583652800433E-8));
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-2012.887294), (-2012.887294));
      Complex complex1 = complex0.reciprocal();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.I.hashCode();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex4.negate();
      complex3.createComplex((-1214.7), 0.0);
      Complex complex6 = complex4.add((-2012.887294));
      complex6.NaN.divide(complex5);
      Complex complex7 = complex6.sqrt1z();
      complex7.NaN.sqrt();
      complex7.I.createComplex(0.0, 0.0);
      complex7.ONE.log();
      Complex complex8 = complex6.multiply(0);
      complex7.atan();
      complex4.conjugate();
      complex2.multiply(1.232402895636637E-7);
      Complex complex9 = complex6.reciprocal();
      complex9.NaN.toString();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1148.2515493098354));
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.ONE.exp();
      complex0.INF.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf((-1148.2515493098354));
      complex1.toString();
      Complex complex5 = complex1.tanh();
      complex5.NaN.exp();
      complex5.ONE.multiply((-2433));
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.ONE.acos();
      complex7.I.tan();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex2.subtract(0.0);
      complex9.getField();
      Complex complex10 = complex4.tanh();
      complex10.I.multiply(complex4);
      complex8.sqrt();
      Complex.valueOf((-8.18804507680012E74));
      complex9.sqrt();
      complex5.asin();
      complex4.tan();
      complex5.multiply((-2433));
      complex3.readResolve();
      Complex.valueOf((-1388.3888101));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4.216079296087462E101);
      Complex complex1 = Complex.valueOf(4.216079296087462E101, 960.043732295207);
      complex0.nthRoot(37);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.pow(complex1);
      complex1.I.hashCode();
      Complex complex4 = complex3.NaN.subtract(0.0);
      complex0.NaN.acos();
      Complex complex5 = complex4.NaN.divide((-1822.5374546851795));
      Complex complex6 = complex0.NaN.log();
      Complex complex7 = complex1.log();
      complex7.getImaginary();
      Complex complex8 = complex3.divide((double) 37);
      complex2.getReal();
      Complex complex9 = complex0.divide((-1181.6170537402384));
      complex1.sinh();
      Complex complex10 = complex0.atan();
      complex10.I.tan();
      complex9.add(complex2);
      complex6.acos();
      Complex complex11 = complex8.conjugate();
      complex11.ZERO.asin();
      complex5.multiply(13);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      int int0 = 0;
      Complex complex2 = complex0.INF.add(2.2823266983032227);
      complex2.ONE.multiply(0);
      complex0.ONE.tanh();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2890.5608951302947));
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.cosh();
      complex1.getArgument();
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex0.ZERO.pow(complex3);
      complex4.I.tan();
      complex1.getField();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.subtract(complex2);
      complex6.NaN.acos();
      Complex complex8 = complex4.ONE.pow(complex0);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex6.getField();
      Complex complex9 = complex6.INF.multiply(complex4);
      Complex complex10 = complex3.ONE.sin();
      complex2.isNaN();
      complex6.getArgument();
      Complex complex11 = complex9.sinh();
      complex11.NaN.sqrt();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex12 = complex0.tan();
      complex12.divide(Double.NaN);
      Complex complex13 = complex12.INF.log();
      assertEquals(0.7853981633974483, complex13.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex13.getReal(), 0.01);
      
      Complex complex14 = complex1.tan();
      Complex complex15 = complex3.divide(2.0);
      Complex complex16 = complex2.ZERO.divide(complex6);
      Complex complex17 = complex14.sinh();
      Complex complex18 = Complex.valueOf(0.0);
      assertFalse(complex18.equals((Object)complex4));
      
      Complex complex19 = complex5.multiply(0);
      assertSame(complex19, complex15);
      
      complex10.getField();
      assertEquals(0.8414709848078965, complex10.getReal(), 0.01);
      
      Complex complex20 = complex17.cos();
      assertEquals(1.0000000598419463, complex20.getReal(), 0.01);
      assertEquals((-3.4595359739445153E-4), complex17.getImaginary(), 0.01);
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex2.subtract(0.0);
      complex5.subtract((-2890.5608951302947));
      assertSame(complex3, complex7);
      
      Complex complex22 = complex21.sqrt();
      assertTrue(complex21.equals((Object)complex11));
      assertSame(complex21, complex16);
      assertSame(complex22, complex5);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex3.ZERO.sqrt1z();
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex1.pow(complex3);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex5));
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf(20.0, 0.6902132034301758);
      assertEquals(20.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.reciprocal();
      complex2.createComplex(0.6902132034301758, (-491.333169));
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.divide(complex2);
      assertEquals(1.1883951057781212, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      double double0 = complex5.getReal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex5, complex1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ZERO.tan();
      complex1.INF.getArgument();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.INF.createComplex(0.0, (-894.15777539));
      Complex complex4 = complex3.ZERO.cos();
      complex2.ONE.abs();
      complex0.ZERO.abs();
      List<Complex> list0 = complex0.nthRoot(1);
      assertFalse(list0.isEmpty());
      
      Complex complex5 = Complex.valueOf((double) 1, 0.0);
      Complex complex6 = complex5.I.add(1215.0249559828655);
      assertEquals(1215.0249559828655, complex6.getReal(), 0.01);
      
      Complex complex7 = complex5.atan();
      complex3.getImaginary();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex8.log();
      assertEquals(0.16143936157119557, complex9.getReal(), 0.01);
      
      Complex complex10 = complex7.subtract((double) 1);
      assertEquals((-0.21460183660255172), complex10.getReal(), 0.01);
      
      Complex complex11 = complex4.createComplex(0.7853981633974483, 0.0);
      assertTrue(complex11.equals((Object)complex7));
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      double double0 = complex1.getReal();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2964.82803));
      Complex complex1 = complex0.ONE.multiply(648);
      complex0.NaN.sqrt1z();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.ZERO.subtract(complex3);
      Complex complex5 = complex4.I.tan();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex5.getImaginary(), 0.01);
      
      complex1.getImaginary();
      Complex complex6 = complex3.log();
      assertSame(complex6, complex4);
      
      double double0 = complex3.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex7 = complex0.exp();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      complex3.ONE.hashCode();
      Complex complex8 = complex3.subtract((-1.803495543));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex8.equals((Object)complex2));
      
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.divide((-1885.985001));
      assertEquals((-0.00343263106171027), complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(665.15382471153);
      Complex complex1 = Complex.valueOf(665.15382471153, 665.15382471153);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(442429.61052837677, complex2.getReal(), 0.01);
      assertEquals(442429.61052837677, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.ZERO.add(417.72);
      Complex complex4 = complex0.NaN.sqrt1z();
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.ZERO.cos();
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.ONE.add(complex0);
      assertEquals(666.15382471153, complex6.getReal(), 0.01);
      assertFalse(complex6.equals((Object)complex4));
      
      complex0.isNaN();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = Complex.valueOf((-1453.290946018032), (-75.871339898684));
      assertEquals((-1453.290946018032), complex8.getReal(), 0.01);
      assertEquals((-75.871339898684), complex8.getImaginary(), 0.01);
      
      Complex complex9 = Complex.valueOf(417.72);
      assertTrue(complex9.equals((Object)complex3));
      
      double double0 = complex7.getArgument();
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0.0015034116362988505, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.multiply(Double.NaN);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex4 = complex0.INF.add(complex1);
      Complex complex5 = complex4.ONE.sinh();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex5.getReal(), 0.01);
      
      complex4.ONE.abs();
      assertTrue(complex4.isInfinite());
      
      Complex complex6 = complex0.sqrt1z();
      complex6.I.multiply(1732.0);
      Complex complex7 = complex6.cos();
      assertEquals(0.15594369476537437, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      double double0 = complex2.getReal();
      assertEquals(1.557407724654902, complex2.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-594.5903956099));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.NaN.exp();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex4.ZERO.multiply(1806);
      assertTrue(complex5.equals((Object)object0));
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.NaN.pow(complex4);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.cos();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.414213562373095, complex8.getReal(), 0.01);
      
      complex4.isInfinite();
      assertSame(complex4, complex6);
      assertEquals((-3.141592653589793), complex3.getImaginary(), 0.01);
      
      complex7.cos();
      complex0.isInfinite();
      Complex complex9 = complex7.sin();
      assertEquals(1.944930430201024E10, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
  }
}
