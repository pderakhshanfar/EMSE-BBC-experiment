/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:53:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.NaN.subtract(complex1);
      complex1.multiply((-560));
      complex2.NaN.createComplex(148.4719908609224, 148.4719908609224);
      Complex complex3 = complex0.negate();
      complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.negate();
      complex4.ZERO.sqrt1z();
      complex3.asin();
      complex3.pow((-248.4728869779));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      complex1.tan();
      complex1.abs();
      complex0.add((-739.1317701752776));
      Complex.valueOf(1315.47, (-20.0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.3282890219894906E230), (-1867.22192));
      complex0.abs();
      complex1.INF.negate();
      complex1.add(17193.609104909105);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8836492887460383E270);
      Complex complex1 = new Complex(1.6332083257987747E-10, 813.89);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.NaN.sqrt1z();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.add(1.8836492887460383E270);
      complex3.cosh();
      complex4.divide(complex3);
      complex4.tan();
      Complex.valueOf(1.8836492887460383E270, 813.89);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(3221.29471051389);
      Complex complex1 = complex0.multiply(1637.041561257);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.multiply(Double.NaN);
      complex3.NaN.cosh();
      complex0.getField();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(1111.84);
      Complex complex3 = Complex.ONE;
      complex3.asin();
      complex0.asin();
      Complex complex4 = Complex.valueOf(92.0, 20.0);
      complex2.tan();
      Complex complex5 = Complex.NaN;
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(222276.29185270437, 222276.29185270437);
      Complex complex1 = complex0.log();
      complex1.ZERO.hashCode();
      complex1.ONE.toString();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.I.pow(222276.29185270437);
      complex2.ONE.abs();
      complex2.ONE.toString();
      complex4.I.exp();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.divide(1140.8);
      complex6.I.subtract(complex3);
      complex4.cos();
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex1.I.cos();
      complex2.cos();
      Complex complex9 = Complex.valueOf(1140.8, (-407.0684));
      Complex complex10 = complex4.ZERO.cos();
      complex9.multiply(complex3);
      Complex complex11 = complex6.pow(complex2);
      complex11.I.conjugate();
      complex8.nthRoot(1044);
      Complex complex12 = complex5.asin();
      complex12.ONE.multiply(315);
      complex7.abs();
      complex12.tanh();
      complex10.negate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1321);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = 25.67170954042524;
      Complex complex0 = new Complex(25.67170954042524, Double.NaN);
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1446.82);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3992.0002398943716, 3992.0002398943716);
      complex0.asin();
      complex1.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tan();
      Object object0 = new Object();
      Complex complex4 = Complex.I;
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-0.37277635759509714), 7.084865265284368E158);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ZERO.multiply(2703);
      Complex complex3 = complex2.ZERO.subtract((-0.37277635759509714));
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex4.NaN.cos();
      complex1.ONE.subtract(complex3);
      Complex complex6 = complex2.ONE.add(complex3);
      Complex complex7 = complex0.acos();
      complex7.INF.readResolve();
      Complex complex8 = complex7.sin();
      complex8.I.tanh();
      Complex complex9 = complex0.log();
      Complex complex10 = complex9.ONE.subtract(complex7);
      complex5.NaN.exp();
      Complex complex11 = complex9.ONE.subtract(complex7);
      complex11.INF.sqrt();
      Object object0 = new Object();
      complex3.equals(object0);
      complex7.getField();
      complex7.multiply(complex8);
      complex5.sqrt1z();
      complex2.I.cos();
      complex10.readResolve();
      complex6.getField();
      complex5.reciprocal();
      complex0.sqrt1z();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.abs();
      Complex complex1 = complex0.log();
      complex0.INF.tan();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.I.pow(complex1);
      complex3.INF.hashCode();
      complex3.NaN.exp();
      Complex complex4 = complex2.I.log();
      complex4.NaN.cosh();
      complex1.ZERO.hashCode();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.ONE.sqrt1z();
      complex5.asin();
      complex1.INF.cosh();
      complex4.ONE.tanh();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.atan();
      complex9.atan();
      Complex complex10 = complex5.exp();
      complex7.divide(complex4);
      Complex complex11 = Complex.ZERO;
      complex10.subtract(complex0);
      complex6.tan();
      complex1.sqrt();
      Complex complex12 = complex10.acos();
      complex12.ZERO.negate();
      complex10.log();
      complex3.tan();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.getReal();
      Complex complex2 = complex1.atan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(25.325296750056555);
      complex0.hashCode();
      Complex complex2 = complex1.INF.negate();
      complex0.subtract((-640.3706554784251));
      complex2.pow((-354.392546974259));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1290.3));
      Complex complex2 = Complex.valueOf(3.7311513682845094E303);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.ZERO;
      complex4.tan();
      complex1.pow(25.325296750056555);
      Complex complex6 = Complex.NaN;
      complex6.readResolve();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(2.414213562373095, 2.414213562373095);
      Complex complex4 = complex3.asin();
      complex4.ZERO.pow(complex0);
      complex2.divide(20276.757893263253);
      Complex complex5 = Complex.ZERO;
      complex0.getField();
      complex1.asin();
      complex1.ZERO.createComplex((-0.0011029784636417393), (-2753.2));
      Complex.valueOf(0.3936265707015991);
      complex5.divide(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      Complex complex6 = complex2.sqrt1z();
      complex6.pow(3335.57);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(236.229, 236.229);
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.ZERO.getArgument();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.ONE.divide(complex1);
      Complex complex6 = complex2.asin();
      complex3.subtract((-3681.27566));
      complex2.NaN.multiply((-3270));
      Complex complex7 = complex2.atan();
      complex5.log();
      complex6.equals(complex1);
      Complex complex8 = complex5.exp();
      complex8.subtract(complex5);
      complex3.pow(complex4);
      complex5.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7615941559557649, 0.7615941559557649);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.NaN.cosh();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.divide((-1564.8469076));
      Complex complex5 = complex3.I.subtract(complex1);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf((-964.675250041756));
      Complex complex8 = complex6.I.divide(complex7);
      complex8.sqrt();
      complex4.ONE.sin();
      complex5.INF.multiply(complex2);
      complex8.NaN.add(0.7615941559557649);
      Complex complex9 = complex3.NaN.sinh();
      complex0.abs();
      complex5.sin();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.ZERO.negate();
      complex1.pow(complex3);
      complex1.abs();
      complex10.ZERO.atan();
      complex9.sqrt1z();
      Complex complex12 = complex4.createComplex(Double.NaN, (-964.675250041756));
      complex12.I.nthRoot(796);
      Complex complex13 = complex11.acos();
      complex6.multiply((-2072.2474534276525));
      complex13.conjugate();
      Complex complex14 = complex9.cos();
      complex14.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      complex2.asin();
      Complex.valueOf(0.3936265707015991);
      Complex complex3 = complex1.divide(1.4761208012714633E-4);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = Complex.valueOf(6.809741127603255E225, 6.809741127603255E225);
      complex1.abs();
      Complex complex2 = complex1.log();
      complex0.INF.tan();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.I.pow(complex2);
      complex4.INF.hashCode();
      complex4.NaN.exp();
      Complex complex5 = complex3.I.log();
      complex5.NaN.cosh();
      complex2.ZERO.hashCode();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex1.ONE.sqrt1z();
      Complex complex8 = complex6.asin();
      complex2.INF.cosh();
      complex5.ONE.tanh();
      Complex complex9 = complex2.subtract(complex0);
      Complex complex10 = complex1.exp();
      Complex complex11 = complex0.atan();
      complex11.atan();
      Complex complex12 = complex6.exp();
      Complex complex13 = complex9.divide(complex5);
      complex13.I.exp();
      complex12.subtract(complex1);
      complex7.tan();
      complex2.sqrt();
      Complex complex14 = complex12.acos();
      complex14.ZERO.negate();
      complex12.log();
      complex4.tan();
      complex8.equals("(Infinity, Infinity)");
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      complex3.getField();
      complex3.asin();
      Complex.valueOf((-1426.4059));
      complex0.divide(1113.892741);
      Complex complex4 = new Complex(0.3936265707015991, Double.POSITIVE_INFINITY);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.tanh();
      complex0.isInfinite();
      Complex complex1 = complex0.reciprocal();
      complex0.getField();
      Complex complex2 = Complex.ONE;
      complex0.I.tanh();
      complex1.nthRoot(679);
      complex1.multiply(679);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.414213562373095);
      Complex complex2 = complex1.asin();
      complex2.asin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.pow(2419.981);
      complex5.ONE.readResolve();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(76.7);
      Complex complex1 = Complex.valueOf(1.5442993640899658);
      Complex complex2 = complex1.INF.add(2.594209135294356E-9);
      complex0.toString();
      Complex complex3 = complex1.log();
      complex0.INF.createComplex((-1936.1042291169), 76.7);
      complex2.INF.getArgument();
      complex3.I.getField();
      Complex complex4 = complex3.createComplex(0.5947071313858032, 76.7);
      complex0.acos();
      complex4.INF.add(complex2);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex0.sinh();
      complex7.ONE.hashCode();
      Complex complex8 = complex4.add(2.594209135294356E-9);
      Complex complex9 = complex8.tan();
      complex9.NaN.abs();
      complex9.log();
      complex4.abs();
      complex4.reciprocal();
      complex6.atan();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-1550.1464697144);
      double double1 = (-1.0);
      Complex complex1 = new Complex((-1550.1464697144), (-1.0));
      complex1.asin();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.414213562373095);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex(2.414213562373095, 2.414213562373095);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.subtract(complex6);
      complex3.divide(20276.757893263253);
      complex2.sqrt1z();
      complex7.getField();
      complex7.hashCode();
      complex7.pow(Double.NaN);
      Complex complex8 = Complex.valueOf((-1936.1042291169));
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.multiply((-215));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.414213562373095);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex(2.414213562373095, 2.414213562373095);
      complex5.asin();
      complex5.cosh();
      complex0.tan();
      Complex complex6 = complex2.pow((-4.82842712474619));
      complex6.multiply(1066);
      complex6.reciprocal();
      try { 
        complex3.nthRoot((-942));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -942
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.198855229106814E-8, (-4555.293194396288));
      Complex complex1 = complex0.INF.divide((-4555.293194396288));
      complex0.isInfinite();
      Complex complex2 = complex1.add((-4555.293194396288));
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.pow((-674.20857));
      complex0.ZERO.multiply(complex5);
      Complex.valueOf(1.977118730545044, 1.977118730545044);
      complex3.add(complex0);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(484.110462992804);
      Complex complex2 = complex1.divide(484.110462992804);
      Complex complex3 = complex1.I.sqrt();
      complex0.getArgument();
      Complex complex4 = complex2.NaN.subtract(complex0);
      complex2.ONE.getField();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.sinh();
      complex2.I.toString();
      Complex complex7 = complex6.NaN.createComplex((-821.66144895), 1.0);
      complex7.INF.conjugate();
      complex5.sinh();
      Complex complex8 = complex2.sin();
      complex2.toString();
      complex8.equals(complex1);
      Complex complex9 = complex2.add((-4.82842712474619));
      complex9.I.sqrt1z();
      complex8.equals((Object) null);
      Complex complex10 = complex6.acos();
      Complex complex11 = complex10.INF.divide(complex5);
      complex11.ZERO.tan();
      complex10.multiply(complex9);
      Complex complex12 = complex5.pow(complex7);
      complex12.multiply(1);
      complex4.conjugate();
      complex3.tan();
      complex3.multiply(1);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.INF;
      complex2.I.sinh();
      Complex.valueOf(1535.15);
      complex2.tanh();
      Complex complex3 = Complex.I;
      complex3.equals(complex0);
      complex1.atan();
      Complex complex4 = Complex.valueOf(2.0);
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.414213562373095);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex4.tanh();
      complex1.equals("Mu>C@mOU!hMW+3=.");
      complex5.add(4101.84089808);
      complex3.multiply((-924));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ONE;
      complex2.pow(complex1);
      Complex.valueOf(442.6993, 442.6993);
      Complex complex3 = new Complex(1199.8570078482896, (-2.718281828459045));
      try { 
        complex3.nthRoot((-1926));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,926
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.atan();
      complex2.I.atan();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.I.pow(complex3);
      Complex.valueOf(0.0, 793.8969731207216);
      complex0.nthRoot(1640);
      complex1.getImaginary();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex0.pow(0.0);
      complex5.ONE.atan();
      Complex complex8 = complex6.I.cosh();
      complex8.INF.tanh();
      complex5.NaN.tan();
      Complex complex9 = complex4.acos();
      complex9.I.sqrt1z();
      Complex complex10 = complex3.negate();
      complex9.getReal();
      complex10.atan();
      Complex.valueOf((double) 1640);
      Complex complex11 = new Complex(0.0, 793.8969731207216);
      complex7.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply((-180));
      Complex.valueOf((double) (-180));
      Complex complex1 = complex0.negate();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.414213562373095);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      complex3.hashCode();
      Complex complex5 = Complex.ZERO;
      complex3.ONE.divide(complex4);
      Complex complex6 = complex5.sin();
      complex3.reciprocal();
      Complex.valueOf(2.0, 2.0);
      complex4.acos();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      complex0.reciprocal();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.divide(0.0);
      complex0.negate();
      complex0.multiply((-1495));
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex0.divide(0.0);
      complex4.sqrt1z();
      complex6.getField();
      complex2.hashCode();
      Complex complex7 = Complex.ZERO;
      complex7.getField();
      complex5.asin();
      Complex.valueOf(0.0);
      complex0.multiply((-1203));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-4968.433431508478), (-4968.433431508478));
      complex2.nthRoot(1461);
      complex2.getImaginary();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.atan();
      Complex complex5 = new Complex(1461);
      complex5.atan();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex2.tanh();
      Complex complex8 = Complex.ONE;
      complex8.tan();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex3.sqrt();
      complex4.sqrt1z();
      complex5.negate();
      Complex complex11 = Complex.ZERO;
      complex11.getReal();
      complex0.atan();
      complex10.tanh();
      complex7.multiply((double) 1461);
      Complex complex12 = complex1.negate();
      complex6.subtract(complex9);
      complex12.toString();
      complex12.divide((-4968.433431508478));
      complex11.subtract((-4968.433431508478));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.asin();
      complex0.hashCode();
      complex0.cos();
      Complex.valueOf(Double.NaN);
      complex1.divide(7.756800301729815E-9);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.sin();
      complex6.hashCode();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex9.divide(Double.NaN);
      complex9.reciprocal();
      complex10.conjugate();
      complex4.pow((-106.05887));
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = Complex.valueOf((-3454.05483), (-3454.05483));
      complex1.nthRoot(1141);
      complex3.getImaginary();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex5.atan();
      Complex complex8 = new Complex(1141);
      complex5.atan();
      complex7.cosh();
      Complex complex9 = complex1.tanh();
      complex1.tan();
      complex9.acos();
      Complex complex10 = Complex.ZERO;
      complex10.sqrt();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex11.negate();
      complex2.getReal();
      Complex complex13 = complex10.atan();
      complex13.tanh();
      complex2.multiply(0.0);
      complex1.negate();
      Complex complex14 = complex2.subtract(complex11);
      complex14.I.abs();
      complex1.toString();
      complex12.divide((-3454.05483));
      complex6.subtract((-3454.05483));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.negate();
      complex2.getReal();
      complex2.atan();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.multiply(324.2813);
      Complex complex7 = complex0.negate();
      complex5.subtract(complex7);
      complex6.toString();
      complex6.divide(700.5194);
      complex3.subtract(2103.5575);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(1858);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.multiply((-1921));
      Complex complex5 = Complex.valueOf((-1070.5726458));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = Complex.valueOf((-1985.4), 811.99528562);
      Complex complex9 = complex5.cos();
      Complex complex10 = Complex.valueOf((-1070.5726458));
      complex6.divide((-56.358151));
      complex2.log();
      Complex complex11 = new Complex((-2333.121573205372));
      Complex complex12 = complex11.sin();
      complex11.hashCode();
      complex12.sin();
      complex10.exp();
      complex8.cos();
      complex12.divide((double) (-1921));
      Complex complex13 = complex7.reciprocal();
      complex9.conjugate();
      Complex complex14 = Complex.valueOf((-480.60477026));
      complex14.pow((-1070.5726458));
      Complex complex15 = new Complex((-7.756800301729815E-9));
      complex15.sqrt();
      complex13.getImaginary();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-3515.9));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.cos();
      complex2.ZERO.conjugate();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex1.I.reciprocal();
      complex4.ONE.divide(166.8773668);
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex0.multiply(complex1);
      complex5.INF.pow(complex0);
      Complex complex7 = complex0.subtract(4.375296101347422);
      complex6.equals(complex5);
      complex6.getArgument();
      complex7.negate();
      complex3.sqrt();
      complex4.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(complex0);
      complex0.ZERO.cosh();
      complex0.INF.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.pow(1881.691403679628);
      Complex.valueOf(0.0, (-4173.280779977451));
      Complex complex4 = new Complex((-4173.280779977451));
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4555.293194396288));
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.INF.abs();
      complex0.pow((-4555.293194396288));
      Complex complex2 = Complex.ZERO;
      complex1.getField();
      complex1.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide(728.0);
      Complex complex5 = Complex.ONE;
      complex4.add(complex0);
      // Undeclared exception!
      complex4.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      complex1.ONE.divide(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.multiply((-1495));
      Complex complex5 = complex0.cosh();
      complex0.atan();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex2.atan();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex9.tan();
      complex0.acos();
      Complex complex11 = complex8.sqrt();
      complex4.sqrt1z();
      complex9.negate();
      complex2.getReal();
      complex10.atan();
      complex10.tanh();
      complex6.multiply(0.7615941559557649);
      complex10.negate();
      complex4.subtract(complex11);
      complex4.toString();
      complex2.divide(Double.NaN);
      complex7.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.atan();
      complex0.abs();
      complex1.divide(1.8718514371423056E183);
      Complex complex3 = complex1.multiply(1858);
      Complex complex4 = Complex.valueOf(1.0, 1477.194);
      Complex complex5 = complex0.subtract(complex3);
      complex5.multiply(659);
      Complex.valueOf(1.0);
      Complex complex6 = complex5.exp();
      complex5.divide(complex4);
      Complex complex7 = Complex.valueOf(1.0122946692105064, 1014.28);
      complex0.cos();
      Complex complex8 = Complex.valueOf(1477.194);
      Complex complex9 = complex2.divide(Double.NaN);
      Complex complex10 = complex5.log();
      Complex complex11 = complex8.sin();
      complex10.hashCode();
      complex4.sin();
      complex2.exp();
      complex5.cos();
      complex9.divide(1.0);
      complex4.reciprocal();
      complex11.conjugate();
      complex7.toString();
      complex6.pow(Double.NaN);
      Complex complex12 = Complex.I;
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      complex0.INF.multiply(complex1);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.pow((-1543.412969));
      Complex complex6 = Complex.valueOf((-1543.412969), (-1881.691403679628));
      complex4.cos();
      Complex complex7 = Complex.valueOf((-1543.412969));
      Complex complex8 = complex2.divide((-1543.412969));
      complex6.log();
      complex4.sin();
      complex7.hashCode();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex8.exp();
      complex7.cos();
      complex3.divide((-3576.891922));
      complex4.reciprocal();
      complex4.conjugate();
      complex10.toString();
      complex3.pow(6.283185307179586);
      Complex complex11 = complex5.sqrt();
      complex9.getArgument();
      complex1.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1273622512817383, 2.1273622512817383);
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.sqrt1z();
      complex0.isInfinite();
      Complex complex2 = Complex.NaN;
      complex2.ZERO.nthRoot(1412);
      Complex complex3 = Complex.ZERO;
      complex2.NaN.add(complex3);
      Complex complex4 = complex0.acos();
      complex4.sqrt1z();
      complex0.add(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.sinh();
      complex0.pow(complex6);
      complex4.add(2.1273622512817383);
      Complex complex7 = new Complex(2.1273622512817383);
      complex6.nthRoot(1618);
      Complex.valueOf((-1121.0));
      Complex.valueOf(2.718281828459045, (-1121.0));
      complex4.toString();
      Complex complex8 = Complex.valueOf(0.5756692886352539);
      complex8.divide(Double.POSITIVE_INFINITY);
      complex8.subtract(0.5756692886352539);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      complex0.INF.multiply(complex1);
      Complex complex2 = complex1.ZERO.cosh();
      complex0.INF.atan();
      Complex complex3 = complex0.tan();
      complex3.I.pow((-1543.412969));
      Complex.valueOf(0.0, (-4173.280779977451));
      complex0.getField();
      Complex complex4 = complex2.multiply(921);
      complex2.toString();
      Complex complex5 = new Complex(Double.NaN, (-3772.220670961));
      complex4.subtract(complex5);
      Complex complex6 = Complex.valueOf((-1543.412969));
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1433.693823052195, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sqrt1z();
      complex2.equals(complex1);
      Complex complex4 = complex0.conjugate();
      complex1.nthRoot(1412);
      Complex complex5 = Complex.ZERO;
      complex0.add(complex3);
      complex3.acos();
      Complex complex6 = complex0.sqrt1z();
      complex4.add(complex3);
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.NaN;
      complex8.sinh();
      complex6.pow(complex0);
      complex0.add(0.0);
      Complex complex9 = new Complex(1433.693823052195);
      complex9.nthRoot(924);
      Complex.valueOf((-2407.9957558182223));
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 924);
      Complex complex11 = Complex.ZERO;
      complex10.reciprocal();
      Complex.valueOf((double) 1412, 127.628745993);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex0.divide(1014.28);
      Complex complex4 = complex0.ONE.multiply(1858);
      Complex complex5 = Complex.valueOf(1.0, 0.0);
      complex3.ZERO.subtract(complex2);
      Complex complex6 = complex0.ZERO.multiply((-2732));
      Complex complex7 = Complex.valueOf((double) (-2732));
      complex7.exp();
      complex7.I.divide(complex4);
      Complex complex8 = Complex.valueOf(0.0, 1.0);
      complex3.cos();
      complex5.ONE.readResolve();
      Complex.valueOf(1.0);
      Complex complex9 = complex0.divide(1.0);
      complex3.log();
      Complex complex10 = complex6.sin();
      complex10.NaN.hashCode();
      Complex complex11 = complex10.I.sin();
      complex11.ONE.exp();
      complex2.cos();
      complex3.divide(0.0);
      complex4.reciprocal();
      complex9.conjugate();
      complex4.toString();
      Complex complex12 = Complex.valueOf(1729.567318189, 1014.28);
      Complex complex13 = complex12.ZERO.pow((double) 1858);
      complex13.ZERO.createComplex(821.43683, 0.0);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex0.divide(1014.28);
      Complex complex4 = complex0.ONE.multiply(1858);
      Complex.valueOf(1.0, 0.0);
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex0.ZERO.multiply((-2732));
      Complex complex7 = Complex.valueOf((double) (-2732));
      complex7.exp();
      Complex complex8 = complex7.I.divide(complex4);
      double double0 = 0.0;
      Complex complex9 = Complex.valueOf(0.0, 1.0);
      Complex complex10 = complex3.cos();
      complex2.cosh();
      Complex complex11 = complex9.add(complex2);
      complex8.tan();
      double double1 = 9.597302512507479E247;
      Complex complex12 = complex10.multiply(9.597302512507479E247);
      complex9.multiply(complex12);
      Complex complex13 = Complex.ONE;
      complex6.subtract(complex11);
      try { 
        complex5.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1273622512817383, 2.1273622512817383);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tanh();
      complex2.ZERO.sqrt1z();
      complex1.equals(complex0);
      Complex complex3 = complex2.conjugate();
      complex3.ZERO.nthRoot(1412);
      Complex complex4 = Complex.ZERO;
      complex3.NaN.add(complex4);
      Complex complex5 = complex0.acos();
      complex5.sqrt1z();
      complex2.add(complex0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sinh();
      complex2.pow(complex7);
      complex5.add(2.1273622512817383);
      Complex complex8 = new Complex(2.1273622512817383);
      complex7.nthRoot(1618);
      Complex.valueOf((-1121.0));
      Complex.valueOf(2.718281828459045, (-1121.0));
      Complex complex9 = Complex.ZERO;
      complex9.reciprocal();
      Complex.valueOf((-1121.0), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.multiply((-1495));
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = complex0.I.asin();
      Complex complex8 = complex6.subtract(complex4);
      Complex complex9 = complex0.divide(0.0);
      complex7.sqrt1z();
      complex9.getField();
      complex2.hashCode();
      Complex complex10 = Complex.ZERO;
      complex10.getField();
      complex8.asin();
      Complex complex11 = Complex.valueOf(0.0);
      complex11.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.ONE;
      complex10.add(complex5);
      try { 
        complex10.nthRoot((-1495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,495
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex1.I.pow(complex4);
      Complex complex6 = Complex.valueOf(0.0, 801.147);
      Complex.valueOf((double) 1640);
      Complex complex7 = complex2.multiply(complex5);
      Complex complex8 = complex2.negate();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex9.add(complex3);
      Complex complex12 = complex7.multiply(complex6);
      Complex complex13 = complex3.multiply(0.0);
      Complex complex14 = complex0.pow(complex11);
      Complex complex15 = complex14.tanh();
      Complex complex16 = Complex.valueOf((double) 1640);
      complex16.abs();
      Complex.valueOf(0.0);
      complex10.acos();
      complex12.nthRoot(1640);
      Complex complex17 = complex8.sinh();
      complex14.acos();
      complex7.subtract(complex13);
      Complex complex18 = complex15.log();
      complex13.sinh();
      complex18.divide(complex17);
      complex7.conjugate();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY, 3172.0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.atan();
      complex2.I.atan();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.I.pow(complex3);
      Complex.valueOf(0.0, 801.147);
      complex0.nthRoot(1640);
      complex1.getImaginary();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.atan();
      complex0.pow(0.0);
      complex5.ONE.atan();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex7.INF.tanh();
      complex5.NaN.tan();
      Complex complex9 = complex4.acos();
      complex9.I.sqrt();
      complex9.I.sqrt1z();
      Complex complex10 = complex4.divide(complex2);
      complex4.sinh();
      Complex complex11 = complex10.subtract(complex8);
      complex4.exp();
      complex0.tanh();
      try { 
        complex11.nthRoot((-462846552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -462,846,552
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1995.6626, 6251.820479622525);
      complex0.cosh();
      complex0.tanh();
      Complex complex1 = complex0.atan();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.atan();
      complex2.I.atan();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.I.pow(complex3);
      complex3.I.asin();
      Complex.valueOf((-6.564672913105876E-8), 2.0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(41.57172964352);
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = new Complex((-852.34498551028), (-852.34498551028));
      Complex complex3 = (Complex)complex2.I.readResolve();
      Complex complex4 = complex2.NaN.add(complex0);
      Complex complex5 = complex1.NaN.divide((-2952.717465763834));
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex2.divide(complex1);
      complex4.nthRoot(745);
      Complex complex8 = complex0.divide(complex2);
      Complex complex9 = complex8.ONE.divide(complex7);
      Complex complex10 = complex2.exp();
      complex9.NaN.getField();
      complex10.ZERO.tanh();
      Complex complex11 = complex0.sin();
      complex11.ZERO.cosh();
      complex11.add(complex8);
      Complex complex12 = complex1.tanh();
      complex8.abs();
      Complex complex13 = Complex.valueOf(814.9);
      complex12.acos();
      complex2.nthRoot(1329);
      complex3.sinh();
      complex6.acos();
      complex9.subtract(complex6);
      complex4.log();
      complex2.sinh();
      complex0.divide(complex13);
      Complex complex14 = Complex.valueOf(0.0, 1549.4331);
      complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.NaN.getField();
      Complex complex3 = complex1.ZERO.cosh();
      complex0.INF.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.pow((-1543.412969));
      complex5.tan();
      complex1.getField();
      complex0.hashCode();
      complex3.getField();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.asin();
      Complex.valueOf((-1543.412969));
      complex7.divide((-1866.521708));
      Complex complex8 = Complex.ONE;
      complex4.add(complex8);
      Complex complex9 = new Complex(1.7768193998956956);
      complex9.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex1.abs();
      Complex complex3 = complex0.divide(1014.28);
      Complex complex4 = complex0.ONE.multiply(1858);
      Complex complex5 = Complex.valueOf(0.8813735870195428, 0.0);
      complex3.ZERO.subtract(complex2);
      Complex complex6 = complex0.ZERO.multiply((-2732));
      Complex complex7 = Complex.valueOf((double) (-2732));
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.I.divide(complex4);
      Complex.valueOf(0.0, 0.8813735870195428);
      Complex complex10 = Complex.ONE;
      complex5.ONE.readResolve();
      complex8.add(complex9);
      complex3.tan();
      Complex complex11 = complex8.multiply(0.0);
      complex3.multiply(complex0);
      Complex complex12 = Complex.ONE;
      Complex complex13 = Complex.ONE;
      complex13.subtract(complex0);
      complex6.pow(complex11);
      complex8.asin();
      Complex.valueOf(997.344);
      Complex complex14 = Complex.valueOf((double) 1858);
      Complex complex15 = complex1.add(complex3);
      complex15.exp();
      complex14.cos();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex0.divide(1014.28);
      Complex complex4 = complex0.ONE.multiply(1858);
      Complex.valueOf(1.0, 0.0);
      complex3.ZERO.subtract(complex2);
      Complex complex5 = complex1.asin();
      double double0 = 0.0;
      Complex complex6 = complex5.subtract(complex3);
      complex0.divide((double) (-2732));
      Complex complex7 = complex0.acos();
      complex3.sqrt1z();
      complex3.add(complex0);
      Complex complex8 = complex7.reciprocal();
      complex4.sinh();
      Complex complex9 = complex6.pow(complex8);
      complex0.I.subtract(20.0);
      double double1 = 2.0;
      complex9.add(2.0);
      complex3.add(complex8);
      try { 
        complex2.nthRoot((-2732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,732
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.tanh();
      complex0.equals(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.divide(0.0);
      Complex complex6 = complex5.atan();
      complex1.isNaN();
      complex0.ONE.multiply(complex3);
      complex2.I.atan();
      complex1.conjugate();
      Complex complex7 = complex2.INF.exp();
      Complex complex8 = complex7.multiply(complex6);
      Complex complex9 = complex1.atan();
      Complex complex10 = complex3.conjugate();
      complex6.divide(complex9);
      complex3.sinh();
      complex9.subtract(complex8);
      complex10.exp();
      Complex complex11 = complex5.tanh();
      try { 
        complex11.nthRoot((-2803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,803
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.sin();
      int int0 = (-1495);
      complex4.multiply((-1495));
      Complex.valueOf(0.0, Double.NaN);
      Complex complex5 = complex0.ONE.log();
      complex0.I.asin();
      double double0 = 0.0;
      complex5.subtract(complex4);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.I.add(complex0);
      complex5.reciprocal();
      complex9.sinh();
      Complex complex10 = complex5.pow(complex0);
      complex10.INF.add(0.0);
      complex8.add(complex7);
      try { 
        complex2.nthRoot((-1495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,495
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.abs();
      Complex complex4 = complex2.I.pow(Double.POSITIVE_INFINITY);
      complex3.INF.cos();
      Complex complex5 = complex2.ZERO.reciprocal();
      Complex complex6 = complex5.ONE.multiply(complex1);
      complex5.I.getArgument();
      Complex complex7 = Complex.valueOf(1078.674207162);
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex7.ONE.multiply(complex0);
      Complex complex11 = complex10.NaN.pow(complex7);
      complex11.hashCode();
      Complex complex12 = complex10.ZERO.divide(complex8);
      Complex complex13 = complex7.exp();
      complex9.getImaginary();
      complex13.ZERO.conjugate();
      complex7.negate();
      complex13.readResolve();
      Complex complex14 = complex7.atan();
      complex14.pow(Double.POSITIVE_INFINITY);
      complex14.NaN.readResolve();
      complex10.sin();
      Complex complex15 = complex9.divide((-1372.60495));
      Complex complex16 = complex9.sinh();
      complex15.multiply(complex16);
      Complex complex17 = Complex.ONE;
      complex4.equals(complex17);
      complex2.negate();
      complex6.multiply(complex12);
      complex3.multiply(163);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.getArgument();
      complex0.divide(0.0);
      Complex complex1 = complex0.tan();
      complex1.ZERO.getField();
      try { 
        complex1.I.nthRoot((-177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -177
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex1.I.pow(complex4);
      Complex.valueOf(0.0, 801.147);
      complex0.nthRoot(1640);
      complex1.getImaginary();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex4.atan();
      complex0.pow(0.0);
      complex6.ONE.atan();
      Complex complex8 = complex7.I.cosh();
      complex8.INF.tanh();
      Complex complex9 = complex6.NaN.tan();
      Complex complex10 = complex5.acos();
      complex10.I.sqrt();
      complex10.I.sqrt1z();
      Complex complex11 = complex4.negate();
      complex10.getReal();
      complex11.atan();
      complex4.tanh();
      complex1.multiply(0.7615941559557649);
      Complex complex12 = complex9.negate();
      complex3.subtract(complex12);
      complex11.toString();
      complex10.divide(0.0);
      complex2.subtract(0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      complex1.atan();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex0.multiply(complex2);
      complex0.negate();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.ONE.reciprocal();
      complex3.atan();
      complex4.getReal();
      complex6.add(complex5);
      complex4.exp();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1273622512817383, 2.1273622512817383);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex1.equals(complex0);
      Complex complex4 = complex2.conjugate();
      complex4.ZERO.nthRoot(1412);
      Complex complex5 = Complex.ZERO;
      complex4.NaN.add(complex5);
      complex3.multiply(complex0);
      Complex complex6 = complex2.sqrt1z();
      complex6.NaN.getField();
      complex3.hashCode();
      complex3.getField();
      complex1.asin();
      Complex.valueOf((double) 1412);
      complex0.divide((double) 1412);
      Complex complex7 = Complex.ONE;
      complex3.add(complex7);
      complex7.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.104297782658242E26);
      complex0.getImaginary();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.reciprocal();
      complex2.ZERO.readResolve();
      Complex complex4 = complex1.INF.divide(0.0);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.ZERO.sqrt();
      complex8.I.abs();
      Complex complex9 = complex1.multiply(0);
      Complex complex10 = complex1.sin();
      complex10.ONE.multiply(complex3);
      complex9.getReal();
      complex4.equals(complex2);
      Complex complex11 = complex4.cos();
      double double0 = (-1.0);
      complex11.NaN.add((-1.0));
      complex11.NaN.tan();
      complex4.ONE.divide(complex6);
      complex1.asin();
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex0.divide(1014.28);
      Complex complex4 = complex0.ONE.multiply(1858);
      Complex complex5 = Complex.valueOf(1.0, 0.0);
      complex3.ZERO.subtract(complex2);
      Complex complex6 = complex0.ZERO.multiply((-2732));
      Complex complex7 = Complex.valueOf((double) (-2732));
      complex7.exp();
      complex7.I.divide(complex4);
      Complex complex8 = Complex.valueOf(0.0, 1.0);
      complex3.cos();
      complex5.ONE.readResolve();
      Complex.valueOf(1.0);
      Complex complex9 = complex0.divide(1.0);
      complex3.log();
      Complex complex10 = complex6.sin();
      complex10.NaN.hashCode();
      Complex complex11 = complex10.I.sin();
      complex11.ONE.exp();
      complex2.cos();
      complex3.divide(0.0);
      complex4.reciprocal();
      complex9.conjugate();
      complex4.toString();
      Complex complex12 = Complex.valueOf(1729.567318189, 1014.28);
      complex12.ZERO.pow((double) 1858);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-242.0), (-242.0));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex0.pow((-242.0));
      Complex complex8 = complex7.ONE.add(complex2);
      complex1.abs();
      Complex complex9 = complex2.subtract(complex3);
      complex8.INF.atan();
      complex8.getReal();
      complex8.readResolve();
      complex9.isInfinite();
      complex0.sinh();
      complex6.multiply((-2620));
      Complex complex10 = complex5.acos();
      complex4.divide(complex10);
      complex10.add(complex4);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(41.57172964352);
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = new Complex((-852.34498551028), (-852.34498551028));
      complex2.I.readResolve();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex1.NaN.divide((-2952.717465763834));
      complex4.INF.cos();
      Complex complex5 = complex2.divide(complex1);
      complex3.nthRoot(745);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.ONE.divide(complex5);
      Complex complex8 = complex2.exp();
      complex7.NaN.getField();
      complex8.ZERO.tanh();
      Complex complex9 = complex0.sin();
      complex9.ZERO.cosh();
      Complex complex10 = complex9.add(complex6);
      complex10.tan();
      complex0.multiply((double) 745);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(798.755297319);
      Complex complex1 = complex0.add((-1364.465517772));
      Complex complex2 = complex1.NaN.asin();
      complex2.reciprocal();
      complex2.NaN.sqrt1z();
      Complex complex3 = complex1.reciprocal();
      complex1.I.cosh();
      complex0.ONE.cos();
      complex1.abs();
      complex0.ONE.abs();
      complex3.ONE.nthRoot(1);
      complex1.abs();
      complex0.sqrt1z();
      complex1.INF.multiply((-722));
      complex3.log();
      Complex.valueOf(221.4, 1041.894386624);
      Complex complex4 = complex2.ZERO.multiply(35.0);
      complex4.INF.nthRoot(2508);
      Complex complex5 = complex3.reciprocal();
      complex5.INF.cosh();
      complex3.readResolve();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.72858));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.divide(0.0);
      complex2.hashCode();
      Complex complex3 = complex2.multiply((-299.72858));
      Complex complex4 = complex3.createComplex(5091.5106039, (-299.72858));
      complex4.divide(complex3);
      complex2.ONE.readResolve();
      Complex complex5 = complex1.asin();
      complex5.divide(5091.5106039);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex7.NaN.acos();
      complex8.NaN.cos();
      complex2.equals("nc15");
      Complex.valueOf((-1295.73312));
      Complex complex9 = complex6.cosh();
      complex3.sqrt();
      complex9.readResolve();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0197142620980974E-8));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.sqrt();
      complex4.INF.subtract(6.283185307179586);
      complex0.getField();
      complex3.abs();
      complex2.subtract((-600.535459385));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.ZERO.multiply(657);
      complex1.NaN.toString();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.add((-1418.79));
      complex4.INF.add(4733.0);
      Complex complex5 = complex1.ZERO.asin();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex2.multiply(4.123026721295484E187);
      complex7.I.pow(complex3);
      complex7.INF.multiply(710);
      complex1.getReal();
      Complex complex8 = complex6.multiply(complex1);
      complex8.ZERO.sinh();
      Complex complex9 = complex8.cos();
      complex9.INF.toString();
      Complex complex10 = Complex.valueOf(20.0);
      complex10.ZERO.sin();
      Complex complex11 = complex2.add(complex4);
      complex11.add((-1418.79));
      complex2.abs();
      Complex complex12 = complex4.sqrt1z();
      complex12.negate();
      complex0.nthRoot(657);
      complex5.createComplex(0.0, 4.123026721295484E187);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sin();
      complex2.hashCode();
      Complex complex3 = complex1.multiply(complex0);
      complex3.INF.exp();
      complex1.getImaginary();
      Complex complex4 = complex1.add(-0.0);
      Complex.valueOf(-0.0);
      complex3.createComplex(4087.864312139194, 2653.529);
      try { 
        complex4.nthRoot((-2386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,386
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1019.7966854644459, 1019.7966854644459);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-289.29264834556756));
      Complex complex1 = complex0.cos();
      complex1.I.getField();
      Complex complex2 = complex0.acos();
      complex2.getField();
      complex0.cosh();
      Complex complex3 = complex2.pow((-861.9423));
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex3.NaN.tanh();
      complex4.I.multiply((-4014));
      complex2.equals((Object) null);
      complex4.divide(1265.75671485922);
      complex5.cos();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.INF.reciprocal();
      complex3.isNaN();
      complex2.atan();
      complex7.getArgument();
      complex5.conjugate();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4646.08975121);
      Complex complex1 = Complex.NaN;
      complex1.ONE.negate();
      complex0.INF.add(complex1);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(368.48);
      Complex complex2 = Complex.valueOf(368.48, 1797.8374249292733);
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex3.I.exp();
      complex3.NaN.getArgument();
      Complex complex5 = complex4.ZERO.add(368.48);
      Complex complex6 = complex5.NaN.negate();
      complex3.I.pow(complex1);
      Complex complex7 = Complex.valueOf(368.48);
      complex7.getArgument();
      complex0.exp();
      Complex complex8 = complex7.atan();
      complex8.I.divide(0.0);
      complex2.add(1797.8374249292733);
      complex6.nthRoot(6278);
      complex2.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(1818.35099754);
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex0.cosh();
      complex3.abs();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex0.log();
      complex2.equals(complex1);
      Complex complex7 = Complex.valueOf(1818.35099754, (-3104.89098151));
      Complex complex8 = complex7.multiply(1);
      Complex complex9 = complex7.NaN.createComplex((-3104.89098151), (-3104.89098151));
      complex8.ONE.nthRoot(1);
      Complex complex10 = Complex.valueOf((-400.4003));
      Complex complex11 = complex2.ONE.asin();
      complex10.ZERO.sqrt();
      complex6.add(Double.NaN);
      Complex complex12 = complex3.INF.add(0.0);
      complex3.pow(complex5);
      Complex complex13 = complex2.add(0.0);
      complex13.ZERO.divide((-1220.47));
      complex3.NaN.tanh();
      complex8.sinh();
      complex5.sin();
      Complex complex14 = complex9.subtract(1818.35099754);
      complex14.I.subtract(complex0);
      complex1.add(complex6);
      complex10.nthRoot(1);
      complex5.sqrt();
      complex12.cos();
      complex11.divide(1956.3143941086105);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(142.39999260275);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = complex0.divide(142.39999260275);
      complex1.I.readResolve();
      Complex complex2 = complex1.exp();
      complex1.INF.sin();
      complex0.sqrt1z();
      Complex complex3 = complex2.subtract(complex0);
      int int0 = 302;
      complex1.ONE.getArgument();
      complex3.ZERO.nthRoot(302);
      complex2.ZERO.sinh();
      complex3.ONE.add(1.3509137630462646);
      complex3.ZERO.subtract(4111.65631781);
      Complex complex4 = Complex.valueOf(4111.65631781);
      complex4.I.divide(complex0);
      Complex complex5 = Complex.valueOf((double) 302);
      complex5.ZERO.sinh();
      Complex complex6 = complex1.sqrt1z();
      complex6.NaN.tan();
      complex0.divide(142.39999260275);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.pow(complex1);
      Complex.valueOf((-1.915204563140137E-9), 1.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex2 = complex0.asin();
      double double0 = (-1763.47);
      Complex complex3 = complex2.ZERO.add((-1763.47));
      Complex complex4 = complex0.INF.acos();
      Object object1 = complex2.readResolve();
      complex0.equals(object1);
      Complex complex5 = complex3.tan();
      complex5.conjugate();
      complex5.I.log();
      Complex complex6 = complex4.NaN.acos();
      Complex complex7 = complex6.INF.multiply(1050);
      complex7.ZERO.multiply(1051);
      complex7.NaN.asin();
      Complex complex8 = complex0.exp();
      complex8.ONE.getArgument();
      try { 
        complex4.ONE.nthRoot((-135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -135
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-747.48808596));
      complex0.ZERO.abs();
      Complex complex2 = complex0.createComplex((-0.16624879837036133), (-3187.041377571));
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.ONE.add(complex0);
      complex3.ZERO.log();
      complex4.INF.pow((-747.48808596));
      complex1.I.asin();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex0.add(complex6);
      complex6.conjugate();
      complex4.getField();
      complex6.getReal();
      complex1.multiply(complex5);
      complex7.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(5.421372463189529E-151);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.reciprocal();
      complex3.I.divide(complex1);
      complex2.INF.conjugate();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf((-4003.3132960147));
      complex0.I.multiply(complex4);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.I.add(complex5);
      Complex complex9 = complex8.ZERO.multiply(complex4);
      complex9.ONE.multiply((-4003.3132960147));
      Complex complex10 = complex7.ZERO.pow(complex2);
      complex1.tanh();
      complex1.abs();
      Complex complex11 = Complex.valueOf(5.421372463189529E-151);
      Complex complex12 = complex1.acos();
      complex12.I.nthRoot(1329);
      complex1.sinh();
      complex11.acos();
      complex6.subtract(complex4);
      complex5.log();
      Complex complex13 = complex6.sinh();
      complex6.divide(complex13);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(3001.630853, 3001.630853);
      complex0.ONE.tanh();
      Complex complex1 = complex0.ONE.add(3001.630853);
      complex1.cosh();
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.getArgument();
      complex2.NaN.reciprocal();
      try { 
        complex1.ZERO.nthRoot((-1810));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,810
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sinh();
      complex0.createComplex((-359.315373), Double.NaN);
      Complex complex1 = complex0.subtract((-20.0));
      complex0.getReal();
      complex1.getReal();
      complex0.sinh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      complex0.INF.multiply(complex1);
      complex1.ZERO.cosh();
      complex0.INF.atan();
      Complex complex2 = complex0.tan();
      double double0 = (-1543.412969);
      complex2.I.pow((-1543.412969));
      Complex.valueOf(0.0, (-4173.280779977451));
      complex0.getField();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex1.subtract((-2637.75369));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      complex1.conjugate();
      complex0.toString();
      complex0.nthRoot(1849);
      complex1.tanh();
      complex0.negate();
      complex0.subtract((double) 1849);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 37.08847;
      Complex complex0 = Complex.valueOf(37.08847);
      complex0.NaN.readResolve();
      complex0.ZERO.hashCode();
      double double1 = 3777.27645867;
      complex0.ZERO.toString();
      Complex complex1 = complex0.pow(3777.27645867);
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(191.0);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.ZERO;
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.add(complex2);
      complex3.INF.multiply(complex0);
      complex3.isNaN();
      complex1.INF.exp();
      Complex complex4 = complex2.negate();
      complex4.ONE.sqrt();
      Complex complex5 = complex1.exp();
      Complex.valueOf(0.4837033152580261);
      Complex.valueOf(0.4837033152580261);
      complex3.getField();
      complex2.isNaN();
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(829.6988121, 829.6988121);
      complex0.hashCode();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex1.I.subtract(complex2);
      complex1.I.negate();
      complex0.toString();
      complex0.NaN.abs();
      complex3.NaN.pow(complex2);
      complex2.ONE.toString();
      complex4.I.cos();
      Complex complex5 = complex1.ZERO.subtract(Double.NaN);
      complex2.I.sin();
      Complex complex6 = complex2.multiply(1);
      complex6.I.getField();
      complex6.add(1822.306);
      Complex complex7 = Complex.valueOf((double) 1);
      complex1.equals(complex2);
      Complex complex8 = complex4.ONE.cos();
      Complex complex9 = complex2.add(0.0);
      Complex.valueOf((-70.4));
      complex4.sinh();
      complex7.toString();
      complex6.multiply((double) 1);
      Complex complex10 = complex4.negate();
      complex10.INF.pow(829.6988121);
      complex5.pow(complex8);
      complex7.atan();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4555.293194396288));
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.NaN.conjugate();
      complex0.INF.abs();
      complex0.pow((-4555.293194396288));
      complex1.readResolve();
      Complex.valueOf(2474.8952);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.I.negate();
      complex0.getArgument();
      complex1.ONE.getField();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.add(165.508);
      Complex complex4 = complex3.I.acos();
      complex4.ONE.conjugate();
      Complex complex5 = complex3.INF.divide(complex2);
      Complex complex6 = complex3.I.conjugate();
      Complex complex7 = complex6.I.acos();
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      
      complex6.NaN.getField();
      Complex complex8 = complex6.ZERO.pow(complex0);
      complex8.ONE.cos();
      complex8.INF.log();
      complex0.conjugate();
      Complex complex9 = complex0.atan();
      complex9.add(165.508);
      complex2.conjugate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf(165.508);
      Complex complex11 = complex10.divide(165.508);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(1.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex10.ZERO.add(complex0);
      Complex complex13 = complex10.ONE.log();
      complex13.INF.cosh();
      Complex complex14 = complex3.multiply(1708);
      Complex complex15 = (Complex)complex14.INF.readResolve();
      assertTrue(complex15.isInfinite());
      
      List<Complex> list0 = complex1.nthRoot(1708);
      assertFalse(list0.contains(complex0));
      assertEquals(1708, list0.size());
      
      Complex.valueOf(Double.NaN, 0.0);
      Complex complex16 = complex12.cosh();
      assertSame(complex16, complex5);
      assertSame(complex0, complex8);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(1633.39269, 1633.39269);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.INF.tanh();
      complex3.INF.getField();
      Complex complex5 = (Complex)complex2.ZERO.readResolve();
      assertEquals((-1633.3925369443448), complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.reciprocal();
      assertEquals((-3.061113246441675E-4), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.cosh();
      complex3.getArgument();
      complex7.multiply(complex0);
      assertSame(complex7, complex3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-635.987045796277), (-635.987045796277));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isInfinite());
  }
}
