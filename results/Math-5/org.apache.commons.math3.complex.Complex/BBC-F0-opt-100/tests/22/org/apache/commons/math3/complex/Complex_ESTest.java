/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:56:48 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(705.2481255);
      Complex complex1 = Complex.valueOf(705.2481255, 705.2481255);
      Complex complex2 = complex0.sinh();
      complex2.INF.cosh();
      complex2.abs();
      Complex complex3 = complex0.pow(1.773775678340353);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.NaN.tan();
      complex3.cos();
      Complex complex6 = complex2.cosh();
      complex6.NaN.getField();
      complex1.multiply(705.2481255);
      complex3.cosh();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.37907832860946655);
      Complex complex1 = new Complex(0.37907832860946655, 8.689987517871135E92);
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.INF.exp();
      complex2.ONE.atan();
      complex2.NaN.add(complex1);
      Complex complex4 = complex2.I.tanh();
      complex4.ZERO.pow(complex3);
      complex1.I.add((-5937.53));
      complex0.subtract(complex1);
      Complex complex5 = complex1.divide((-5937.53));
      Complex complex6 = complex5.atan();
      complex6.NaN.pow(8.689987517871135E92);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.ZERO.add((-1.0));
      Complex complex4 = complex0.sin();
      complex4.I.acos();
      complex2.conjugate();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = Complex.valueOf(782.9254912649741, 0.0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.asin();
      complex5.tanh();
      complex6.negate();
      complex1.hashCode();
      complex8.conjugate();
      complex3.conjugate();
      complex3.sqrt1z();
      complex8.sqrt();
      Complex complex9 = new Complex((-2497.0), (-20.0));
      Complex complex10 = Complex.NaN;
      complex9.multiply(complex10);
      Complex complex11 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.NaN);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1115.864, (-20.0));
      complex0.pow(2619.3963);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(17);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-18.9));
      complex0.readResolve();
      Complex complex1 = complex0.cosh();
      complex1.I.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.negate();
      Complex.valueOf((-18.9), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.negate();
      complex4.ONE.multiply((-7.12139818505956E-9));
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.ONE.subtract((-20.0));
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.sqrt();
      complex7.tan();
      complex6.atan();
      Complex complex8 = complex2.sin();
      complex5.toString();
      complex8.sinh();
      complex8.sqrt1z();
      Complex.valueOf((-20.0), 101.04527554181);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.6089565753936768, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex2.nthRoot(769);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.48670899868011475);
      Complex.valueOf(0.48670899868011475);
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.863720960170636E228);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(9.863720960170636E228);
      complex1.NaN.abs();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      complex1.asin();
      Complex.valueOf(9.863720960170636E228, 9.863720960170636E228);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(Double.NaN, 1.512274346576166E-160);
      complex0.asin();
      complex1.tan();
      Complex complex2 = new Complex((-1404.2));
      complex2.equals("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex1.ONE.multiply(complex0);
      complex3.ZERO.nthRoot(3533);
      Complex complex4 = Complex.valueOf((-1845.0349138414822));
      Complex complex5 = complex1.ONE.add(0.0);
      Complex complex6 = complex5.ONE.negate();
      complex6.NaN.log();
      Complex complex7 = complex1.multiply(complex4);
      Complex complex8 = complex7.ONE.subtract(complex1);
      Complex complex9 = complex7.ONE.sqrt1z();
      complex7.ONE.sinh();
      complex8.NaN.cosh();
      Complex complex10 = complex1.I.log();
      Complex complex11 = complex1.tan();
      complex4.hashCode();
      Complex complex12 = complex8.I.multiply(3533);
      complex12.INF.pow(complex0);
      Complex complex13 = complex4.cos();
      Complex complex14 = complex11.add((-1845.0349138414822));
      complex13.sqrt();
      complex8.readResolve();
      complex10.abs();
      complex14.getArgument();
      complex9.reciprocal();
      Complex complex15 = complex14.tanh();
      Complex complex16 = complex15.NaN.sqrt();
      complex16.ONE.cosh();
      Complex complex17 = complex11.cosh();
      Complex.valueOf(9.641506045875797, 0.0);
      complex2.multiply((double) 3533);
      complex17.sinh();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.NaN.add(complex1);
      complex3.I.sin();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex1.INF.conjugate();
      complex0.NaN.multiply(840);
      complex2.I.sinh();
      complex4.I.subtract((-1.1474026049124666E-17));
      complex4.ONE.pow(3.4021296926637805);
      complex0.NaN.abs();
      Complex complex6 = complex5.createComplex(1647.599659429466, Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.ONE.add((-386.2));
      Complex complex8 = complex4.NaN.cos();
      complex4.NaN.tanh();
      Complex complex9 = complex0.subtract(complex1);
      complex6.ZERO.log();
      complex9.ONE.conjugate();
      complex2.multiply(complex4);
      complex1.sqrt();
      complex6.conjugate();
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = complex7.sin();
      complex9.sqrt1z();
      complex0.conjugate();
      complex11.multiply(complex6);
      complex8.readResolve();
      complex0.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-2498.9));
      Complex complex1 = complex0.I.divide((-2498.9));
      complex0.nthRoot(7);
      Complex complex2 = null;
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 1.222834825515747;
      Complex complex0 = new Complex(1.222834825515747, Double.NaN);
      Complex complex1 = complex0.add(1.222834825515747);
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.ZERO.subtract(complex2);
      complex3.toString();
      complex3.ZERO.cos();
      complex1.INF.exp();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.I;
      complex2.getArgument();
      complex0.readResolve();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex.valueOf(1.5707963267948966);
      Complex complex5 = Complex.valueOf((-20.0));
      Complex complex6 = complex2.add(complex5);
      complex3.sin();
      complex6.tanh();
      Complex complex7 = complex0.conjugate();
      complex1.createComplex((-1539.8), 1.5707963267948966);
      complex4.multiply(3159);
      complex4.atan();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-544.6541980821853), (-665.35064));
      Complex complex1 = complex0.INF.add((-665.35064));
      complex1.NaN.getArgument();
      Complex complex2 = complex1.ZERO.negate();
      complex1.NaN.createComplex((-665.35064), 0.0);
      Complex complex3 = Complex.valueOf((-3424.9968779872));
      complex3.tan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.INF;
      complex5.I.getArgument();
      complex4.divide(complex5);
      complex5.cosh();
      Complex complex6 = complex1.reciprocal();
      complex6.abs();
      complex6.conjugate();
      Complex complex7 = complex6.tanh();
      complex7.I.sin();
      Complex complex8 = complex6.divide((-544.6541980821853));
      complex5.sin();
      complex2.tanh();
      complex4.cosh();
      Complex complex9 = complex8.add(Double.NaN);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.multiply(37);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.valueOf((double) 17);
      Complex complex5 = complex4.sqrt();
      complex2.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.I.multiply((-3012));
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.tanh();
      complex7.subtract(complex1);
      complex5.reciprocal();
      complex7.tan();
      Complex complex8 = new Complex(0.48670899868011475);
      complex8.I.sin();
      complex8.equals(complex3);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2958.20989773597));
      Complex complex1 = Complex.INF;
      complex0.INF.divide(complex1);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.NaN.reciprocal();
      Complex complex4 = complex0.sin();
      complex4.I.acos();
      complex1.ZERO.exp();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex5.ZERO.add(153.2315204621);
      Complex.valueOf(20.0);
      Complex complex7 = complex6.tanh();
      complex3.subtract(complex7);
      complex4.reciprocal();
      Complex complex8 = new Complex(0.0);
      complex2.nthRoot(137);
      Complex complex9 = Complex.ONE;
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.negate();
      complex1.NaN.reciprocal();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex1.ZERO.exp();
      Complex complex6 = complex0.subtract(0.0);
      complex6.ZERO.add(153.2315204621);
      complex0.getArgument();
      complex2.nthRoot(2909);
      complex0.readResolve();
      Complex complex7 = Complex.valueOf((-1.1800039972549816E259));
      complex7.sqrt1z();
      complex0.cosh();
      Complex.valueOf((double) 2909);
      Complex complex8 = complex6.add(complex5);
      complex8.NaN.multiply(2909);
      complex1.sin();
      complex1.tanh();
      Complex complex9 = new Complex(0.42161011695861816);
      complex9.conjugate();
      complex4.createComplex((-1600.5005896295181), 1275.1164565907);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.reciprocal();
      Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.42), 20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.tan();
      complex0.multiply((-0.42));
      complex2.ZERO.divide((-0.42));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.subtract(2321.5557367205365);
      Complex complex5 = complex3.multiply((-3132));
      complex0.log();
      complex4.INF.subtract(20.0);
      Complex complex6 = complex1.sqrt1z();
      complex2.INF.nthRoot(1456);
      complex4.multiply((-3132));
      complex6.createComplex(2321.5557367205365, 2321.5557367205365);
      complex5.toString();
      Complex.valueOf(6.3890560989306495);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.reciprocal();
      complex1.getReal();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex1.multiply(complex3);
      complex2.acos();
      complex4.tan();
      Complex complex6 = complex4.add(0.0);
      complex6.ONE.asin();
      complex0.getField();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = new Complex(3.572270133517001E-67, 0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.divide(complex1);
      complex3.ONE.getField();
      Complex complex4 = Complex.NaN;
      Object object0 = complex4.readResolve();
      complex0.tan();
      object0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(3929.43973159, 3929.43973159);
      Complex complex1 = Complex.valueOf(138.70176411374882, (-61.79337697297959));
      Complex complex2 = complex1.add((-971.69646));
      complex0.getArgument();
      complex1.nthRoot(1);
      complex1.readResolve();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = new Complex(0.7853981633974483, (-2025.0));
      Complex complex5 = complex4.cosh();
      Complex.valueOf(7.89187408872514E284);
      complex0.add(complex1);
      complex5.sin();
      complex5.tanh();
      complex3.conjugate();
      Complex complex6 = Complex.NaN;
      complex6.createComplex(198, (-3479.66361));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2551.028425, 2551.028425);
      Complex complex1 = Complex.valueOf(2551.028425);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.createComplex(0.27999999999999997, (-1.557407724654902));
      complex3.tan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf(2551.028425);
      Complex complex6 = complex5.add(complex2);
      complex2.sin();
      complex6.tanh();
      complex2.conjugate();
      complex4.createComplex(992.0, (-1.557407724654902));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9999999999999998, (-2015.71));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = new Complex((-1.0));
      complex0.NaN.getField();
      complex2.ZERO.pow(complex0);
      Complex complex3 = Complex.valueOf((-1.0));
      complex3.I.getField();
      Complex complex4 = complex0.I.add((-1.0));
      Complex complex5 = complex2.INF.tanh();
      Complex complex6 = complex0.add(complex2);
      complex2.tan();
      Complex complex7 = complex0.NaN.reciprocal();
      Complex complex8 = complex6.exp();
      complex1.toString();
      complex6.getImaginary();
      complex5.NaN.tan();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex4.tan();
      complex8.multiply((-231));
      complex7.sqrt();
      complex3.getReal();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = new Complex((-1.0));
      complex0.NaN.getField();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = Complex.valueOf((-1.0));
      complex4.I.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.INF.tanh();
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex2.tan();
      Complex.valueOf((-1.0), (-1.0));
      Complex.valueOf((-1.0), (-1.0));
      complex1.toString();
      complex7.getImaginary();
      complex6.NaN.tan();
      Complex complex9 = complex5.divide(Double.POSITIVE_INFINITY);
      complex9.I.atan();
      complex9.divide(complex4);
      Complex complex10 = complex3.add((-2006.6526181616653));
      complex10.exp();
      complex8.toString();
      complex4.tanh();
      Complex complex11 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.negate();
      complex1.NaN.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.acos();
      complex1.ZERO.exp();
      Complex complex4 = complex0.subtract(0.0);
      complex4.ZERO.add(153.2315204621);
      complex0.getArgument();
      complex2.nthRoot(198);
      Complex complex5 = (Complex)complex0.readResolve();
      complex2.equals(complex5);
      complex4.sqrt1z();
      Complex complex6 = complex3.cosh();
      Complex complex7 = Complex.valueOf((-1.5707963267948966));
      Complex complex8 = complex4.add(complex7);
      complex5.sin();
      complex8.tanh();
      complex5.conjugate();
      Complex complex9 = complex5.sqrt();
      complex9.INF.sin();
      complex6.sinh();
      // Undeclared exception!
      complex4.nthRoot(1116983332);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3929.43973159, 3929.43973159);
      complex0.getField();
      Complex complex1 = new Complex(3929.43973159);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(5097.777);
      complex2.getField();
      Complex complex4 = Complex.valueOf(5097.777, 1.0839233273386946);
      complex3.INF.log();
      Complex complex5 = complex4.add((-1.0));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.add(complex6);
      Complex complex10 = complex7.tan();
      complex5.reciprocal();
      Complex complex11 = complex3.exp();
      complex9.toString();
      complex2.getImaginary();
      complex11.tan();
      Complex complex12 = complex3.divide(799.47157683089);
      Complex complex13 = new Complex((-1.0839233273386946));
      complex13.atan();
      complex10.divide(complex12);
      complex3.add(20.0);
      complex4.exp();
      complex3.toString();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex4.sinh();
      complex15.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1846.54149104));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.multiply(complex0);
      complex1.createComplex((-1846.54149104), (-1.4611908070155308E-8));
      Complex complex4 = complex3.cos();
      complex4.pow(complex2);
      complex2.getArgument();
      Complex complex5 = complex0.pow(2155.85089293);
      Complex complex6 = complex3.sin();
      complex6.ZERO.hashCode();
      Complex complex7 = complex6.INF.sqrt1z();
      complex3.ZERO.sin();
      Complex complex8 = complex2.I.sqrt1z();
      Complex complex9 = complex2.multiply(928426670);
      Complex complex10 = complex0.NaN.sqrt();
      complex8.ONE.conjugate();
      complex2.log();
      Complex complex11 = complex8.cos();
      complex0.I.abs();
      complex8.negate();
      complex2.isNaN();
      complex10.I.cos();
      complex7.readResolve();
      Complex complex12 = complex10.multiply(928426670);
      complex12.hashCode();
      complex9.sqrt();
      complex11.tan();
      Complex complex13 = complex5.createComplex(1499.09000309172, 1499.09000309172);
      complex13.exp();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(3929.43973159, 3929.43973159);
      Complex complex1 = Complex.valueOf(135.2392367815335, (-66.73817701117486));
      complex0.divide(complex1);
      Complex complex2 = Complex.INF;
      complex1.multiply(complex2);
      complex2.readResolve();
      complex2.getField();
      Complex complex3 = Complex.INF;
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(3929.43973159, 3929.43973159);
      complex0.I.multiply(422);
      Complex complex1 = Complex.valueOf(135.2392367815335, (-66.73817701117486));
      complex0.readResolve();
      complex1.tan();
      complex1.nthRoot(16);
      complex1.multiply(3929.43973159);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.sin();
      complex3.I.acos();
      complex1.ZERO.exp();
      Complex complex4 = complex0.subtract(0.0);
      complex4.ZERO.add(153.2315204621);
      complex0.getArgument();
      complex3.nthRoot(198);
      Complex complex5 = (Complex)complex0.readResolve();
      complex3.equals(complex5);
      complex4.sqrt1z();
      Complex complex6 = Complex.INF;
      Complex.valueOf(0.0, 153.2315204621);
      Complex complex7 = Complex.valueOf(153.2315204621);
      complex5.sin();
      complex7.tanh();
      complex5.conjugate();
      complex5.sqrt();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.negate();
      complex1.NaN.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = new Complex((-1.1748423022293739E-44), (-1.1748423022293739E-44));
      Complex complex5 = complex0.subtract(0.0);
      complex5.ZERO.add(153.2315204621);
      complex0.getArgument();
      complex2.nthRoot(198);
      Complex complex6 = (Complex)complex0.readResolve();
      complex5.isNaN();
      complex5.sqrt1z();
      Complex complex7 = complex3.cosh();
      Complex complex8 = Complex.valueOf((-1.5707963267948966));
      Complex complex9 = complex5.add(complex8);
      complex6.sin();
      complex7.INF.multiply(complex8);
      complex9.tanh();
      complex6.conjugate();
      complex6.sqrt();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.negate();
      complex1.NaN.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.acos();
      complex1.ZERO.exp();
      Complex complex4 = complex0.subtract(0.0);
      complex4.ZERO.add(153.2315204621);
      complex0.getArgument();
      complex2.nthRoot(198);
      Complex complex5 = (Complex)complex0.readResolve();
      complex2.equals(complex5);
      complex4.sqrt1z();
      Complex complex6 = complex3.cosh();
      Complex complex7 = Complex.valueOf((-1.5707963267948966));
      Complex complex8 = complex4.add(complex7);
      complex5.sin();
      complex8.tanh();
      complex5.conjugate();
      complex5.sqrt();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(1319.5876599);
      Complex complex1 = complex0.divide((-1924.0464240022263));
      Complex complex2 = complex1.subtract((-1924.0464240022263));
      Complex complex3 = new Complex(4264.713804);
      Complex complex4 = complex2.add(complex3);
      complex4.reciprocal();
      complex3.ONE.multiply(complex4);
      Complex complex5 = complex4.atan();
      complex4.sinh();
      complex3.pow((-1924.0464240022263));
      complex5.log();
      complex4.createComplex(2748.7502123, (-1924.0464240022263));
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.conjugate();
      complex4.I.nthRoot(17);
      complex0.getField();
      Complex complex7 = complex2.INF.multiply(complex4);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex2.subtract(2.4895682334899902);
      complex9.ONE.getArgument();
      complex9.I.toString();
      complex9.ONE.abs();
      complex6.NaN.divide(complex3);
      complex9.cosh();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex6.divide(0.0);
      complex11.INF.asin();
      Complex complex12 = complex5.add(complex8);
      complex0.equals("`+");
      Complex complex13 = complex10.conjugate();
      Complex.valueOf((-2072.9662392715), 0.0);
      complex0.abs();
      Complex complex14 = Complex.NaN;
      complex14.cos();
      complex10.subtract(complex12);
      complex13.tanh();
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(3929.43973158976, 3929.43973158976);
      Complex complex1 = complex0.add(1.3142988156905172E207);
      Complex complex2 = complex0.divide(3929.43973158976);
      complex1.subtract(1.3142988156905172E207);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.reciprocal();
      complex2.atan();
      Complex complex5 = complex3.sinh();
      complex4.pow((-2756.6519526669));
      complex2.log();
      complex5.createComplex(3929.43973158976, (-2756.6519526669));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.NaN.add(1.3142988156905172E207);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.subtract((-712.0));
      Complex complex6 = complex0.add(1.3142988156905172E207);
      complex2.getArgument();
      List<Complex> list0 = complex3.nthRoot(198);
      complex5.readResolve();
      Complex complex7 = Complex.valueOf((double) 198, 2.179938793182373);
      complex7.I.atan();
      complex1.equals(complex7);
      Complex complex8 = complex2.sqrt1z();
      complex4.subtract(complex0);
      Complex complex9 = complex6.tan();
      complex5.abs();
      complex3.nthRoot(413);
      Complex complex10 = complex9.acos();
      complex10.cosh();
      complex8.tanh();
      complex3.acos();
      complex6.equals(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex1.ZERO.conjugate();
      Complex complex3 = complex1.ZERO.pow(1.0);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.I.reciprocal();
      complex0.conjugate();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.ONE;
      complex7.divide(complex5);
      complex4.readResolve();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(3929.43973158976, 3929.43973158976);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(3929.43973158976);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.valueOf((-6541.9940946), 422.46503585672554);
      complex0.equals(complex3);
      complex4.NaN.log();
      Complex complex5 = Complex.valueOf((-2885.55), 3929.43973158976);
      Complex complex6 = complex5.reciprocal();
      complex6.sin();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex5.sin();
      complex7.abs();
      complex0.pow((-1667.502101062133));
      complex8.add(complex2);
      complex1.add(complex8);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1053.129544866), (-1053.129544866));
      complex0.INF.getArgument();
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.INF.add((-1053.129544866));
      Complex complex5 = complex4.INF.tanh();
      complex5.NaN.log();
      complex2.NaN.sin();
      List<Complex> list0 = complex3.ZERO.nthRoot(1314);
      Complex complex6 = complex2.INF.pow(complex1);
      Complex complex7 = complex2.divide(0.0);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.sin();
      complex7.equals(list0);
      Complex complex10 = complex1.sqrt1z();
      complex10.ONE.pow(complex9);
      Complex.valueOf(0.0);
      complex10.getImaginary();
      complex2.tanh();
      complex8.conjugate();
      complex6.subtract(complex3);
      complex2.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.subtract(complex2);
      complex2.NaN.getArgument();
      Complex complex4 = complex3.ONE.cosh();
      complex4.exp();
      complex0.getArgument();
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex5.I.sqrt();
      complex6.sqrt1z();
      complex6.NaN.acos();
      complex1.equals(complex4);
      complex6.cos();
      Complex.valueOf(2690.037885, 2690.037885);
      complex2.pow(0.0);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1053.129544866), 1653.184496);
      complex0.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex((-254.51224));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.pow((-254.51224));
      Complex complex6 = complex5.negate();
      complex6.reciprocal();
      complex2.conjugate();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.multiply(complex3);
      Complex.valueOf((-1856.9506794), (-1654.0864885));
      Complex complex9 = Complex.ONE;
      complex9.equals(complex0);
      Complex complex10 = Complex.valueOf(1653.184496, 20.0);
      complex0.reciprocal();
      complex8.sin();
      complex10.sinh();
      Complex complex11 = complex7.sin();
      complex6.abs();
      complex6.pow(0.6573580503463745);
      complex11.add(complex9);
      Complex complex12 = Complex.valueOf(2039.5);
      complex12.add(complex6);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.add(1.0);
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex1.log();
      complex4.sin();
      complex8.nthRoot(1314);
      Complex complex10 = new Complex(951.0, (-3129.434743694));
      Complex complex11 = complex10.pow(complex9);
      complex3.divide(615.0076);
      complex11.asin();
      Complex complex12 = complex4.sin();
      Complex complex13 = Complex.valueOf(1053.129544866);
      complex5.equals(complex13);
      complex2.sqrt1z();
      Complex complex14 = complex2.pow(complex9);
      Complex.valueOf(1.0);
      complex14.getImaginary();
      Complex complex15 = complex0.tanh();
      Complex complex16 = complex15.conjugate();
      complex12.subtract(complex16);
      Complex complex17 = Complex.valueOf(0.0, (-1900.0));
      complex7.subtract(complex17);
      complex14.asin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.566098167230033E-8));
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.atan();
      complex1.add((-4.566098167230033E-8));
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex0.log();
      Complex complex7 = new Complex(Double.NaN);
      Complex complex8 = complex7.sin();
      complex5.nthRoot(1314);
      complex3.pow(complex6);
      Complex complex9 = Complex.valueOf(0.0, (double) 1314);
      complex9.divide(0.0);
      complex8.asin();
      complex4.sin();
      Complex complex10 = Complex.I;
      complex10.equals(complex3);
      Complex complex11 = complex0.sqrt1z();
      complex8.pow(complex5);
      Complex complex12 = Complex.valueOf((double) 1314);
      complex4.getImaginary();
      Complex complex13 = complex5.tanh();
      complex2.conjugate();
      complex13.subtract(complex11);
      complex13.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1053.129544866), (-1053.129544866));
      complex0.INF.getArgument();
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.asin();
      complex0.multiply(0);
      complex0.divide(complex1);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.sqrt();
      complex4.abs();
      Complex complex8 = complex2.add((-2495.50313869425));
      Complex.valueOf((-64.0330808), 0.7853981633974483);
      complex3.atan();
      complex4.exp();
      complex5.sqrt1z();
      Complex complex9 = Complex.ONE;
      complex9.getArgument();
      Complex complex10 = complex0.reciprocal();
      complex10.nthRoot(1299);
      complex8.createComplex(601.75, 1282.4332350423);
      Complex.valueOf(3756.8, (-7086.2503795826));
      complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = new Complex((-1.0));
      complex0.NaN.getField();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = Complex.valueOf((-1.0));
      complex4.I.getField();
      Complex complex5 = complex0.I.add((-1.0));
      complex3.INF.nthRoot(807);
      complex2.INF.tanh();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex6.ZERO.reciprocal();
      complex2.tan();
      complex6.exp();
      complex7.toString();
      complex6.getImaginary();
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex5.divide(Double.POSITIVE_INFINITY);
      complex9.divide(complex4);
      complex5.INF.acos();
      Complex complex10 = Complex.valueOf(1.768819808959961, (double) 807);
      complex10.ONE.sinh();
      Complex complex11 = complex5.ZERO.asin();
      complex11.I.multiply(807);
      Complex complex12 = complex6.multiply(1.768819808959961);
      Complex complex13 = complex5.sqrt();
      complex3.exp();
      complex7.multiply(807);
      complex13.getImaginary();
      complex12.sinh();
      complex1.createComplex(Double.POSITIVE_INFINITY, 1.768819808959961);
      Complex.valueOf(1.768819808959961, 1.820141955326842E-7);
      complex12.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.10731174051761627, 0.10731174051761627);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.I.sqrt();
      complex0.log();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.add((double) 1314);
      Complex complex6 = complex3.tanh();
      complex4.log();
      Complex complex7 = complex2.sin();
      complex7.nthRoot(1314);
      complex6.pow(complex0);
      Complex complex8 = complex7.divide(915.9853);
      Complex complex9 = complex7.asin();
      Complex complex10 = complex2.sin();
      Complex complex11 = new Complex(0.0, 0.0);
      complex11.sqrt1z();
      Complex complex12 = complex8.pow(complex5);
      Complex.valueOf(0.0);
      complex2.getImaginary();
      complex3.NaN.sin();
      complex9.ZERO.getArgument();
      Complex complex13 = complex12.tanh();
      complex13.conjugate();
      Complex complex14 = complex10.subtract(complex6);
      Complex complex15 = complex2.subtract(complex9);
      complex14.add(complex15);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1053.129544866), (-1053.129544866));
      complex0.INF.getArgument();
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      complex2.multiply((-1053.129544866));
      Complex complex3 = complex2.subtract(2783.74430179783);
      complex3.acos();
      complex3.tan();
      Complex complex4 = complex0.divide((-1053.129544866));
      complex1.multiply(997);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex0.negate();
      Complex complex7 = Complex.ZERO;
      complex0.divide((-783.0));
      complex3.equals(complex4);
      complex5.cos();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract(2828.8810436);
      complex1.I.sqrt1z();
      Complex complex2 = complex1.ONE.multiply(561);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex3.getArgument();
      complex1.I.multiply(0.0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.I.atan();
      complex0.readResolve();
      Complex complex2 = complex0.log();
      complex2.ZERO.subtract(0.75);
      complex2.I.subtract(0.6816387176513672);
      Complex complex3 = complex2.NaN.multiply((-735));
      complex3.I.createComplex(0.6816387176513672, 0.6816387176513672);
      complex0.getImaginary();
      complex0.sqrt1z();
      Complex complex4 = complex0.ONE.acos();
      complex4.ONE.reciprocal();
      complex2.I.exp();
      try { 
        complex0.INF.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.10731174051761627, 0.10731174051761627);
      complex0.I.exp();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.log();
      complex2.multiply(0.10731174051761627);
      Complex complex3 = complex2.I.subtract(2783.74430179783);
      Complex complex4 = complex1.acos();
      complex3.I.tan();
      complex1.divide(0.0);
      Complex complex5 = complex1.multiply(0);
      complex5.cosh();
      complex3.negate();
      Complex complex6 = Complex.ZERO;
      complex6.I.divide(0.10731174051761627);
      complex4.equals(complex6);
      complex1.cos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.NaN.add(1.3142988156905172E207);
      complex2.divide((-1924.0464240022263));
      Complex complex3 = complex1.ZERO.subtract(0.0);
      Complex complex4 = complex3.ZERO.add(complex0);
      complex3.reciprocal();
      complex3.atan();
      complex0.sinh();
      Complex complex5 = complex1.pow(1.3142988156905172E207);
      complex5.ONE.log();
      complex4.createComplex(1192.75500683, 1192.75500683);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-4622.329592729));
      complex0.I.add((-4581.59798553));
      complex0.ZERO.toString();
      complex0.I.getField();
      Complex complex1 = complex0.I.add(0.0);
      complex1.ONE.conjugate();
      complex0.ONE.subtract((-4622.329592729));
      complex0.I.add((-4622.329592729));
      complex0.I.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex0.createComplex((-2004.97732147779), (-4622.329592729));
      Complex.valueOf(2401.5456512, (-2004.97732147779));
      complex2.ZERO.reciprocal();
      Complex complex3 = complex2.multiply(1.0);
      complex3.INF.cos();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.sqrt();
      complex5.ONE.subtract(1673.828700027);
      complex1.toString();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(4475.0);
      Complex complex2 = complex0.sinh();
      double double0 = 1.1852121353149414;
      Complex complex3 = complex2.pow(1.1852121353149414);
      int int0 = (-2);
      complex3.I.getField();
      try { 
        complex1.nthRoot((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.cosh();
      Complex complex1 = complex0.ZERO.sin();
      Object object0 = new Object();
      Complex complex2 = complex0.conjugate();
      complex2.NaN.divide(complex1);
      Complex complex3 = complex2.multiply((-216));
      complex3.I.asin();
      complex0.equals(object0);
      Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex4.tanh();
      complex6.INF.sqrt();
      Complex complex7 = complex6.I.conjugate();
      complex6.I.toString();
      complex7.ONE.multiply(0);
      Complex complex8 = complex5.divide(complex6);
      complex8.tanh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.NaN.cosh();
      complex1.ONE.abs();
      complex0.hashCode();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.divide((-1.0));
      complex1.acos();
      complex3.ZERO.divide(complex0);
      Complex complex4 = Complex.valueOf(1.784536881359796E-8, 3627.644008509779);
      Complex complex5 = complex3.multiply(3627.644008509779);
      complex4.NaN.abs();
      complex4.multiply(complex5);
      complex0.equals(complex5);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex1.ZERO.pow(1.0);
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = Complex.ZERO;
      complex8.multiply(complex0);
      Complex.valueOf(0.0, 0.0);
      complex7.equals(complex8);
      Complex.valueOf(1.0, 0.0);
      complex8.reciprocal();
      complex2.sin();
      complex3.sinh();
      complex2.sin();
      complex2.abs();
      complex0.pow(1.0);
      complex6.add(complex5);
      complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(854.48161968);
      Complex complex1 = complex0.NaN.add(854.48161968);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.NaN.toString();
      complex0.INF.readResolve();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex4.ZERO.multiply(complex1);
      complex5.NaN.hashCode();
      Complex complex7 = complex5.divide(0.0);
      complex2.I.toString();
      complex3.pow(0.0);
      Complex complex8 = Complex.valueOf((-2.957007209750105E-8), 477.3593789343544);
      complex6.add(complex5);
      complex3.pow(complex0);
      complex8.sqrt();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex1.subtract(Double.NaN);
      complex0.getField();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.INF.divide((-783.0));
      Complex complex5 = complex3.ONE.multiply(Double.NaN);
      complex5.NaN.conjugate();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex2.reciprocal();
      complex7.negate();
      Complex complex8 = complex1.multiply(complex7);
      complex8.sinh();
      complex7.INF.add(complex0);
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex6.abs();
      complex7.ONE.multiply(0.0);
      Complex complex9 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex10 = complex9.NaN.sqrt();
      complex0.negate();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex2.pow(Double.NaN);
      complex4.subtract((-783.0));
      complex10.toString();
      complex8.createComplex((-3440.996347283638), (-783.0));
      complex11.abs();
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex1.INF.pow(complex2);
      complex3.ONE.cosh();
      complex1.ZERO.getField();
      Complex complex4 = complex2.INF.createComplex(0.0, 0.0);
      complex4.INF.readResolve();
      complex0.getArgument();
      Complex complex5 = complex2.add(0.0);
      complex5.NaN.getArgument();
      Complex complex6 = complex5.ONE.log();
      complex6.getArgument();
      complex6.INF.negate();
      complex0.ZERO.hashCode();
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1659.842451));
      complex0.NaN.createComplex((-1659.842451), 1.716073989868164);
      Complex complex1 = Complex.ZERO;
      complex0.subtract(complex1);
      complex0.negate();
      try { 
        complex0.nthRoot((-1510));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,510
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4255.558572));
      Complex complex1 = complex0.ZERO.multiply((-4255.558572));
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex0.ZERO.multiply(0);
      complex3.NaN.atan();
      Complex complex4 = Complex.valueOf((-4255.558572));
      complex1.ONE.sqrt1z();
      Complex complex5 = complex4.asin();
      complex5.INF.acos();
      Complex complex6 = complex0.INF.divide(7.770560657946324E-9);
      double double0 = 1500.6041561248;
      Complex complex7 = complex1.NaN.createComplex(1500.6041561248, 1500.6041561248);
      complex6.ZERO.asin();
      Complex complex8 = complex0.add(0.0);
      complex0.hashCode();
      Complex complex9 = complex8.tan();
      complex7.readResolve();
      Complex complex10 = complex8.INF.subtract(complex2);
      complex10.ZERO.subtract((-4255.558572));
      complex10.ZERO.createComplex((-4255.558572), (-4255.558572));
      complex2.equals(complex0);
      complex6.readResolve();
      complex9.readResolve();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-838.59726737008));
      complex0.readResolve();
      Complex complex1 = complex0.add(2.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex1.ONE.multiply(1883);
      complex4.getArgument();
      complex3.NaN.getField();
      complex0.I.toString();
      complex2.NaN.tanh();
      Complex complex5 = complex2.INF.reciprocal();
      Complex complex6 = complex5.divide(2.0);
      Complex complex7 = complex6.I.tanh();
      complex7.I.tanh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex1.NaN.pow(complex8);
      complex5.ZERO.divide(complex2);
      complex1.INF.getArgument();
      Complex complex10 = complex0.subtract(0.0);
      Complex complex11 = complex0.negate();
      complex11.divide(complex2);
      complex11.cos();
      complex3.getField();
      complex11.divide(complex5);
      complex10.getReal();
      complex2.readResolve();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.log();
      complex0.ZERO.readResolve();
      Complex complex3 = complex0.divide(2.9279594746502846E161);
      complex0.abs();
      Complex complex4 = complex1.add(0.0);
      complex2.exp();
      complex3.toString();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1220.638968), 0.2105647623538971);
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.divide((-1220.638968));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.asin();
      complex5.ZERO.add(complex0);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex4.I.multiply(complex2);
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.sin();
      complex9.toString();
      complex4.getArgument();
      complex4.I.sin();
      complex9.abs();
      complex8.multiply(complex6);
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex7.getImaginary();
      Complex complex11 = complex7.subtract(2964.339265636031);
      complex10.tanh();
      complex1.log();
      complex8.add(581.64090760356);
      complex11.multiply(1.4296388626098633);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1748423022293739E-44));
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.acos();
      complex1.ZERO.exp();
      Complex complex5 = complex0.subtract(0.0);
      complex5.ZERO.add(153.2315204621);
      complex0.getArgument();
      complex3.nthRoot(198);
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex6 = complex5.sqrt1z();
      complex6.ZERO.subtract(complex0);
      Complex complex7 = complex6.I.tan();
      complex2.abs();
      complex5.nthRoot(413);
      complex4.acos();
      complex7.cosh();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2290.0, 20.0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(3138.5014);
      Complex complex1 = Complex.valueOf((-1721.7662604915), 3138.5014);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tanh();
      complex2.INF.multiply(0.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.conjugate();
      complex3.I.nthRoot(17);
      complex5.ONE.getField();
      Complex complex6 = complex2.INF.multiply(complex3);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex2.subtract(2.4895682334899902);
      complex8.ONE.getArgument();
      complex8.I.toString();
      complex8.ONE.abs();
      complex8.cosh();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex5.divide(0.0);
      complex10.INF.asin();
      Complex complex11 = complex4.add(complex7);
      complex0.equals("`+");
      Complex complex12 = complex9.conjugate();
      Complex.valueOf((-2072.9662392715), 0.0);
      complex0.abs();
      Complex complex13 = complex2.divide(1223.0);
      complex13.cos();
      complex9.subtract(complex11);
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.566098167230033E-8));
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.atan();
      complex2.NaN.multiply(0);
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex5.ONE.sin();
      complex4.I.tanh();
      complex6.ZERO.sqrt();
      complex6.NaN.abs();
      complex6.INF.add((-4.566098167230033E-8));
      Complex complex7 = Complex.valueOf((-4.566098167230033E-8), (-4.566098167230033E-8));
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.exp();
      complex9.sqrt1z();
      complex7.getArgument();
      complex0.reciprocal();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex0.ZERO.getArgument();
      complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ZERO.nthRoot(3533);
      Complex complex3 = Complex.valueOf((-1845.0349138414822));
      Complex complex4 = complex1.ONE.add(0.0);
      complex4.ONE.negate();
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex5.ONE.subtract(complex1);
      Complex complex7 = complex5.ONE.sqrt1z();
      Complex complex8 = complex5.ONE.sinh();
      complex6.NaN.cosh();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex1.I.log();
      Complex complex11 = complex1.tan();
      complex3.hashCode();
      Complex complex12 = complex6.I.multiply(3533);
      complex12.INF.pow(complex0);
      Complex complex13 = complex3.cos();
      Complex complex14 = complex11.add((-1845.0349138414822));
      complex13.sqrt();
      complex6.readResolve();
      complex10.abs();
      complex14.getArgument();
      complex7.reciprocal();
      Complex complex15 = complex14.tanh();
      Complex complex16 = complex15.NaN.sqrt();
      complex16.ONE.cosh();
      Complex complex17 = complex11.cosh();
      Complex.valueOf(1.866294830116931E-164, 0.0);
      complex9.multiply((double) 3533);
      complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.negate();
      Complex complex1 = new Complex((-1.0));
      complex0.NaN.getField();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = Complex.valueOf((-1.0));
      complex3.I.getField();
      Complex complex4 = complex0.I.add((-1.0));
      complex2.INF.nthRoot(807);
      complex1.INF.tanh();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.ZERO.reciprocal();
      complex1.tan();
      complex5.exp();
      complex6.toString();
      complex5.getImaginary();
      complex6.NaN.tan();
      Complex complex7 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.divide(complex3);
      complex4.INF.acos();
      Complex complex9 = Complex.valueOf(1.768819808959961, (double) 807);
      complex9.ONE.sinh();
      Complex complex10 = complex4.ZERO.asin();
      complex10.I.multiply(807);
      Complex complex11 = complex5.multiply(1.768819808959961);
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex2.exp();
      complex6.multiply(807);
      complex12.getImaginary();
      complex11.sinh();
      complex0.createComplex(0.0, 0.0);
      complex0.isInfinite();
      complex13.reciprocal();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(2.3825325965881348);
      complex0.I.getField();
      Complex complex2 = complex1.tanh();
      complex0.NaN.tan();
      Complex complex3 = complex2.pow(2.3825325965881348);
      Complex complex4 = complex0.ZERO.sqrt();
      complex3.ZERO.abs();
      Complex complex5 = complex2.ZERO.sqrt1z();
      complex2.ZERO.sqrt();
      complex2.nthRoot(1037);
      complex0.isInfinite();
      Complex complex6 = complex1.add(0.0);
      complex2.ONE.getArgument();
      Complex complex7 = complex6.createComplex(0.0, 1037);
      Complex complex8 = Complex.valueOf(0.0, 154.724);
      Complex complex9 = complex8.NaN.sqrt();
      complex9.multiply(complex5);
      complex8.I.sinh();
      complex8.acos();
      complex7.exp();
      complex8.multiply(0.0);
      complex4.createComplex(0.0, 0.0);
      complex2.sqrt();
      complex9.getField();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-822.25369), (-822.25369));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.log();
      complex2.NaN.toString();
      complex2.ZERO.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex0.pow((-822.25369));
      Complex complex6 = complex5.divide((-822.25369));
      complex6.INF.pow((-804.6739634872));
      complex6.ZERO.log();
      complex1.ONE.getField();
      Complex complex7 = complex0.multiply(2338);
      complex7.INF.add((-822.25369));
      complex7.getImaginary();
      complex0.multiply(2338);
      complex2.toString();
      Complex complex8 = complex3.subtract((double) 2338);
      complex1.sinh();
      complex8.reciprocal();
      complex6.negate();
      complex6.getReal();
      complex5.log();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(3929.43973158976, 3929.43973158976);
      Complex complex1 = Complex.INF;
      complex0.ZERO.divide(complex1);
      complex0.ZERO.readResolve();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0);
      complex1.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.add((double) 0);
      complex0.getReal();
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.add(complex2);
      complex3.multiply(complex2);
      complex2.INF.readResolve();
      complex1.getField();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(2551.028425);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4181618172507453E-8);
      Complex complex1 = complex0.exp();
      complex0.INF.subtract(4.4181618172507453E-8);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = Complex.valueOf(4.4181618172507453E-8, 4.4181618172507453E-8);
      complex4.INF.hashCode();
      complex4.NaN.readResolve();
      complex0.INF.getArgument();
      complex4.I.cos();
      Complex complex5 = complex3.reciprocal();
      complex3.tanh();
      Complex complex6 = complex4.atan();
      complex6.NaN.toString();
      complex6.subtract(complex5);
      Complex.valueOf(4.4181618172507453E-8, 5493.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1053.129544866), (-1053.129544866));
      complex0.INF.getArgument();
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.INF.add((-1053.129544866));
      Complex complex5 = complex4.INF.tanh();
      complex5.NaN.log();
      complex2.NaN.sin();
      List<Complex> list0 = complex3.ZERO.nthRoot(1314);
      Complex complex6 = complex2.INF.pow(complex1);
      Complex complex7 = complex2.divide(0.0);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.sin();
      complex7.equals(list0);
      assertTrue(list0.contains(complex3));
      
      Complex complex10 = complex1.sqrt1z();
      complex10.ONE.pow(complex9);
      Complex.valueOf(0.0);
      double double0 = complex10.getImaginary();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      Complex complex11 = complex2.tanh();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-0.7615941559557649), complex11.getReal(), 0.01);
      
      Complex complex12 = complex8.conjugate();
      assertSame(complex12, complex5);
      
      complex6.subtract(complex3);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex13 = complex2.subtract(complex6);
      assertSame(complex13, complex9);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex13, complex4);
      assertNotSame(complex6, complex12);
  }
}
