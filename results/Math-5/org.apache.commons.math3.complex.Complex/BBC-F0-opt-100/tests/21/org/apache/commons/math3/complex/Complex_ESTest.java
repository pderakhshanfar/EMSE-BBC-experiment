/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:50:58 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tanh();
      complex0.tan();
      complex0.acos();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(38.799966825399046, 7.097454751809522E-192);
      complex2.nthRoot(1434);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1994.32493452, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1994.32493452, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getArgument();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex((-6.751434891261518E-56), Double.POSITIVE_INFINITY);
      complex0.multiply(complex3);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3679.78);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.I.sin();
      Complex complex2 = complex0.multiply(complex1);
      complex2.divide(complex0);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.4431571960449219);
      complex0.divide(3253861.2800450916);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex0.ZERO.toString();
      complex0.NaN.getField();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.ONE.multiply(6.380177790989479E207);
      complex3.NaN.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      Complex complex4 = new Complex(8.378574405736031E-247);
      Complex complex5 = complex1.add(complex3);
      complex3.readResolve();
      complex2.hashCode();
      Complex complex6 = Complex.INF;
      complex4.NaN.cosh();
      Object object0 = complex6.readResolve();
      ((Complex) object0).NaN.nthRoot(709);
      complex1.abs();
      complex2.isNaN();
      Complex complex7 = complex3.subtract(1459.50032);
      Complex complex8 = complex4.sinh();
      complex3.asin();
      complex1.equals("(0.0, 0.0)");
      complex7.tanh();
      complex2.sqrt();
      complex8.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(19.740071520475475, (-163.58036878));
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.acos();
      Complex complex1 = complex0.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 2.68759245092879E-8);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.multiply(236);
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      complex2.pow(1.058754290596401E13);
      Complex complex5 = Complex.ZERO;
      complex4.equals(complex2);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      complex0.divide(Double.POSITIVE_INFINITY);
      try { 
        complex0.nthRoot((-3284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,284
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = Complex.ONE;
      complex0.pow(complex1);
      Complex complex3 = complex0.pow(Double.NaN);
      Complex complex4 = new Complex(1749.98, Double.NaN);
      complex3.subtract(complex1);
      complex1.sqrt1z();
      complex3.sqrt();
      Complex complex5 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.reciprocal();
      Complex complex1 = Complex.valueOf((-1.3672776816592591E218));
      Complex complex2 = new Complex((-1.3672776816592591E218), (-4.135121057126514E24));
      complex2.pow(complex0);
      Complex complex3 = new Complex((-1.3672776816592591E218));
      Complex.valueOf(5438.0);
      complex2.negate();
      complex2.multiply(complex1);
      Complex complex4 = complex1.reciprocal();
      complex4.abs();
      Complex.valueOf((-1.3672776816592591E218), 35.169);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.8677119923665573E-278, 400.31009513);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(400.31009513, 1.2027015686035156);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.pow(1.2027015686035156);
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.valueOf(818.33, 818.33);
      complex6.exp();
      Complex complex7 = complex2.multiply((-1329173.4100000001));
      complex2.INF.createComplex(1.2027015686035156, 4.8677119923665573E-278);
      Complex complex8 = complex4.reciprocal();
      complex4.isNaN();
      Complex complex9 = complex6.sqrt();
      complex7.multiply(4.8677119923665573E-278);
      complex5.pow(2.0);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.ZERO;
      complex11.equals(complex9);
      complex8.abs();
      Complex complex12 = complex11.tanh();
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 0.21214580535888672;
      Complex complex0 = Complex.valueOf(0.21214580535888672, 0.21214580535888672);
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.pow(complex0);
      complex0.ONE.conjugate();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ONE.createComplex((-20.0), 198.2);
      Complex complex2 = complex0.multiply(0.08692999184131622);
      complex2.ONE.sqrt();
      complex2.NaN.readResolve();
      complex2.NaN.nthRoot(1399);
      Complex complex3 = complex0.asin();
      complex1.INF.getField();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.ZERO.subtract(complex4);
      complex5.NaN.sin();
      Complex complex6 = complex3.INF.sinh();
      Complex complex7 = complex3.NaN.multiply((-829));
      complex1.abs();
      complex7.exp();
      Complex.valueOf((double) (-829), 199.20652599751844);
      complex4.I.hashCode();
      Complex complex8 = complex4.add(1.0);
      Complex complex9 = Complex.valueOf(700.39);
      Complex complex10 = complex4.multiply((-3296.874421658));
      complex8.pow((double) 1399);
      complex9.INF.multiply(complex6);
      Complex complex11 = complex1.sin();
      complex10.conjugate();
      complex1.tanh();
      complex9.asin();
      complex10.cos();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.readResolve();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.I.pow(513.0);
      Complex complex3 = Complex.valueOf(1685.67);
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex2.I.createComplex((-2165.9753249), (-2165.9753249));
      complex6.I.readResolve();
      Complex.valueOf(1900.23179);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.pow(complex7);
      Complex complex10 = complex9.createComplex(1900.23179, (-2244.747676698));
      complex10.ONE.conjugate();
      Complex complex11 = complex3.exp();
      complex10.subtract(complex11);
      complex10.nthRoot(2833);
      complex7.add(complex3);
      complex8.atan();
      complex9.toString();
      complex3.createComplex((-4368.40783056946), (-2244.747676698));
      complex5.equals(complex2);
      Complex complex12 = complex1.sqrt1z();
      complex12.ONE.subtract(complex4);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.601686954498291);
      complex12.readResolve();
      complex2.multiply((-2147483647));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(400.31009513, 400.31009513);
      complex0.nthRoot(1555);
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.add((-1152.9));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = new Complex((-1152.9), 0.0);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex1.multiply(2879.2);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = Complex.NaN;
      complex8.isNaN();
      complex7.sqrt();
      complex6.multiply(20.0);
      complex2.pow((-20.0));
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.valueOf(5722.86243583, 5722.86243583);
      complex7.equals(complex10);
      complex5.abs();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.add((-1152.9));
      Complex complex3 = complex0.subtract(complex1);
      complex3.sin();
      complex0.INF.conjugate();
      Complex.valueOf((-1152.9));
      complex1.pow(complex2);
      complex0.reciprocal();
      Complex complex4 = new Complex(1.4161468365471424);
      complex4.negate();
      Complex complex5 = complex4.multiply(complex2);
      complex0.multiply(complex2);
      complex4.reciprocal();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 2.0);
      complex0.toString();
      complex2.getField();
      Complex complex3 = complex0.reciprocal();
      complex0.sqrt();
      complex1.subtract(1354895.0);
      Complex complex4 = complex0.reciprocal();
      Complex.valueOf((-1.1009626474799805));
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.valueOf(9.737596728980696E-10);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.pow(complex5);
      complex6.reciprocal();
      Complex complex9 = new Complex(0.5954487981239669);
      Complex complex10 = complex9.negate();
      Complex complex11 = Complex.valueOf(6.380177790989479E207);
      complex3.multiply(complex11);
      complex9.ONE.hashCode();
      complex4.multiply(complex8);
      complex3.reciprocal();
      Complex complex12 = Complex.ONE;
      complex12.abs();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.multiply((-50));
      complex1.INF.pow((double) (-50));
      complex0.I.cosh();
      Complex complex2 = complex0.negate();
      complex2.equals("(1.0, 0.0)");
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf((-42.2), 2497.024829225521);
      complex2.exp();
      Complex complex5 = Complex.valueOf((-4619.100949701276));
      complex5.multiply((-138.1049648147895));
      complex4.reciprocal();
      complex1.isNaN();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = Complex.NaN;
      complex7.multiply(1.5707963267948966);
      complex4.pow(Double.NaN);
      Complex complex8 = Complex.ZERO;
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex9 = new Complex(1.6844747839686189E-9, (-1.0));
      complex9.abs();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.580025658385974), (-0.580025658385974));
      Complex.valueOf((-1866.151373537555), (-0.580025658385974));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1620.301784672622);
      Complex complex2 = complex1.tan();
      complex2.NaN.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex.valueOf(0.0, 4.8677119923665573E-278);
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(565);
      complex0.atan();
      Complex complex2 = complex1.sinh();
      complex0.hashCode();
      complex2.toString();
      Complex complex3 = complex2.sqrt1z();
      complex3.isInfinite();
      try { 
        complex3.nthRoot((-837));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -837
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex1.ZERO.toString();
      complex1.NaN.getField();
      Complex complex3 = Complex.valueOf(6.380177790989479E207, 0.0);
      Complex complex4 = complex2.ONE.multiply(6.380177790989479E207);
      Complex complex5 = complex4.NaN.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      complex1.divide(complex2);
      complex0.ZERO.readResolve();
      Complex complex6 = complex2.createComplex(Double.NaN, 6.380177790989479E207);
      complex6.ZERO.conjugate();
      Complex complex7 = complex5.conjugate();
      complex7.ZERO.multiply(1);
      complex7.nthRoot(1);
      complex0.pow(0.0);
      complex2.getImaginary();
      complex3.sinh();
      Complex.valueOf(0.0, 0.0);
      complex7.acos();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      complex0.multiply(1470.0);
      Complex complex2 = complex1.createComplex(1470.0, 0.0);
      Complex complex3 = new Complex((-759.0));
      complex2.readResolve();
      complex3.createComplex((-759.0), 0.0);
      complex0.conjugate();
      Complex complex4 = new Complex((-759.0));
      complex4.conjugate();
      Complex complex5 = complex4.multiply(1);
      // Undeclared exception!
      complex5.nthRoot(1277141308);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2084.9912513);
      complex0.readResolve();
      complex0.NaN.readResolve();
      Complex complex1 = complex0.tanh();
      complex0.I.multiply(1992);
      complex1.I.subtract(complex0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.INF.createComplex(2084.9912513, 803.4369852799);
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(2084.9912513, 2532.14292);
      Complex complex5 = complex4.pow(2532.14292);
      complex5.INF.sin();
      complex1.toString();
      complex3.toString();
      complex3.tan();
      Complex.valueOf((-1780.765));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4.8677119923665573E-278);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.NaN.pow(0.0);
      complex1.INF.multiply((-2219));
      Complex complex3 = complex0.tanh();
      complex3.subtract(0.0);
      Complex complex4 = complex2.add(0.0);
      complex4.equals(complex0);
      complex1.divide(complex4);
      complex1.multiply(2512.26);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      complex1.add((-1152.9));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sin();
      complex3.ONE.log();
      Complex complex4 = complex0.INF.conjugate();
      complex2.divide(complex4);
      complex3.ONE.getField();
      Complex complex5 = Complex.valueOf(6.283185307179586, (-1.0));
      complex5.acos();
      complex3.tan();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1.0333241479437797E-8);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.createComplex(2.046994472854778, (-9.452803975829116));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.conjugate();
      complex3.multiply(919);
      Complex complex6 = Complex.INF;
      complex6.nthRoot(1179);
      complex5.pow((double) 1179);
      complex2.getImaginary();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.exp();
      complex5.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf((-763.36879530374));
      complex5.isNaN();
      Complex complex9 = Complex.ZERO;
      complex9.sqrt();
      complex6.multiply(2.4439696075216986E-307);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.I;
      complex8.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply(Double.NaN);
      Complex complex2 = complex1.divide(complex0);
      complex2.ONE.getField();
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex4.I.add(Double.NaN);
      Complex complex5 = Complex.valueOf((-74.0245224350551));
      complex3.NaN.pow(complex5);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.ZERO.subtract(complex0);
      Complex complex8 = complex7.ZERO.asin();
      complex3.NaN.toString();
      complex8.ONE.hashCode();
      Complex complex9 = complex3.exp();
      complex8.ZERO.sin();
      complex9.ZERO.add((-74.0245224350551));
      Complex complex10 = complex7.NaN.createComplex((-74.0245224350551), (-74.0245224350551));
      Complex complex11 = complex3.NaN.subtract(complex0);
      complex6.tan();
      complex8.cosh();
      complex1.nthRoot(1415);
      complex5.reciprocal();
      complex10.I.nthRoot(1415);
      Complex complex12 = complex10.sqrt();
      complex12.sqrt();
      complex2.pow(complex4);
      Complex complex13 = complex9.tanh();
      complex13.ZERO.sqrt1z();
      complex12.pow(complex9);
      complex11.sinh();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      complex0.INF.tan();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.exp();
      complex2.NaN.getArgument();
      Complex complex3 = complex1.I.subtract(586.516034);
      complex3.ZERO.reciprocal();
      complex1.I.negate();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex4.acos();
      complex5.subtract(Double.NaN);
      Complex complex8 = new Complex(Double.NaN, 2199.348083211507);
      complex8.sqrt1z();
      complex6.sqrt1z();
      complex2.sinh();
      complex8.isInfinite();
      complex6.nthRoot(1);
      Complex complex9 = Complex.INF;
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.exp();
      complex3.NaN.getArgument();
      Complex complex4 = complex2.I.subtract(586.516034);
      complex4.ZERO.reciprocal();
      Complex complex5 = complex2.I.negate();
      complex2.divide(complex5);
      complex0.log();
      Complex complex6 = Complex.ONE;
      complex6.exp();
      complex0.acos();
      complex5.subtract(586.516034);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.sqrt1z();
      complex1.sinh();
      complex3.isInfinite();
      complex8.nthRoot(1);
      Complex complex9 = Complex.INF;
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = complex0.ONE.subtract((-6.777752790396222E-8));
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex2.ZERO.tanh();
      complex2.ONE.getArgument();
      complex0.nthRoot(1440);
      complex0.isNaN();
      complex0.readResolve();
      complex0.hashCode();
      complex0.toString();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.negate();
      complex5.NaN.cosh();
      Complex complex6 = complex1.multiply(913.639);
      complex3.sin();
      complex4.exp();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex0.ZERO.toString();
      complex0.NaN.getField();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.ONE.multiply(6.380177790989479E207);
      complex3.NaN.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      Complex complex4 = new Complex(8.378574405736031E-247);
      complex1.add(complex3);
      complex3.readResolve();
      complex2.hashCode();
      Complex complex5 = Complex.INF;
      complex4.NaN.cosh();
      complex5.readResolve();
      complex1.abs();
      complex2.isNaN();
      Complex complex6 = complex3.subtract(1459.50032);
      complex4.sinh();
      complex3.asin();
      complex1.equals("(0.0, 0.0)");
      complex6.tanh();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex1.ZERO.toString();
      complex1.NaN.getField();
      complex2.I.atan();
      Complex complex3 = complex2.ONE.multiply(6.380177790989479E207);
      Complex complex4 = complex3.NaN.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      Complex complex5 = new Complex(8.378574405736031E-247);
      complex0.ZERO.readResolve();
      Complex complex6 = complex2.createComplex(Double.NaN, 6.380177790989479E207);
      complex6.ZERO.conjugate();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.ZERO.multiply(1);
      complex7.nthRoot(1);
      complex2.sqrt1z();
      complex6.sinh();
      complex7.isInfinite();
      complex6.nthRoot(1086);
      Complex complex9 = Complex.INF;
      complex8.acos();
      complex7.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      complex0.INF.tan();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.exp();
      complex2.NaN.getArgument();
      Complex complex3 = complex1.I.subtract(586.516034);
      complex3.ZERO.reciprocal();
      Complex complex4 = complex1.I.negate();
      Complex complex5 = complex2.NaN.divide(complex1);
      complex5.NaN.log();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.INF.subtract(586.516034);
      Complex complex9 = complex8.I.sqrt1z();
      complex6.pow((-1685.0));
      complex3.getImaginary();
      Complex complex10 = complex6.sinh();
      complex10.exp();
      complex9.reciprocal();
      complex4.isNaN();
      complex9.sqrt();
      Complex complex11 = Complex.I;
      complex11.multiply((-217.7733784054));
      Complex complex12 = Complex.ZERO;
      complex5.equals("");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1.0333241479437797E-8);
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(1.0648786018364265E-63);
      Complex complex3 = complex2.exp();
      complex3.getArgument();
      Complex complex4 = complex3.subtract(1.0648786018364265E-63);
      Complex complex5 = complex3.reciprocal();
      complex5.tanh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.divide(complex6);
      complex3.log();
      Complex complex8 = new Complex((-3099.76729181496), (-46.695367685206));
      Complex complex9 = complex8.exp();
      complex4.acos();
      Complex complex10 = new Complex((-3099.76729181496));
      Complex complex11 = complex10.sqrt1z();
      complex11.sqrt1z();
      complex1.sinh();
      complex9.isNaN();
      complex7.nthRoot(1);
      Complex complex12 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ZERO.log();
      complex2.getArgument();
      Complex complex3 = complex0.INF.divide((-1.0));
      complex3.NaN.add(complex0);
      complex1.NaN.readResolve();
      complex0.hashCode();
      Object object0 = complex1.INF.readResolve();
      complex0.abs();
      complex0.isNaN();
      Complex complex4 = complex2.sqrt();
      complex4.multiply((-2146.14634912));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.I;
      object0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
      Complex complex2 = complex1.I.add(1.0);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex2.multiply(complex1);
      complex4.ZERO.multiply(1.0);
      Complex complex5 = complex2.ZERO.pow(complex0);
      complex5.ZERO.sin();
      Complex complex6 = complex0.asin();
      complex5.ONE.sqrt1z();
      complex0.ONE.acos();
      complex2.I.hashCode();
      Complex complex7 = complex6.multiply((-615046));
      complex7.ZERO.hashCode();
      Complex complex8 = complex5.ZERO.add(complex2);
      complex8.pow(1.0);
      complex0.toString();
      Complex complex9 = complex3.ZERO.acos();
      complex9.NaN.getField();
      try { 
        complex4.NaN.nthRoot((-615046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -615,046
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1.0333241479437797E-8);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex1.subtract(1.0333241479437797E-8);
      Complex complex6 = complex4.createComplex(0.5612884759902954, 5.091070300111434E-88);
      complex6.abs();
      complex5.sqrt();
      complex6.getArgument();
      complex6.hashCode();
      Complex complex7 = complex5.reciprocal();
      Complex.valueOf(0.5612884759902954);
      complex4.pow(complex7);
      complex3.toString();
      complex0.divide(complex5);
      Complex.valueOf(1.071760859427484);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      complex1.add((-1152.9));
      Complex complex2 = complex0.subtract(complex1);
      complex2.sin();
      Complex complex3 = complex0.INF.conjugate();
      complex2.divide(complex3);
      Complex complex4 = Complex.valueOf(6.283185307179586, (-1.0));
      complex4.add(0.0);
      complex1.add(1.0);
      complex1.createComplex((-28.353798), 1.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 2.0);
      complex0.toString();
      complex2.getField();
      Complex complex3 = new Complex(2.0, 1.14426851272583);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.multiply(1.14426851272583);
      Complex complex6 = complex1.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      Complex complex7 = complex4.divide(complex5);
      complex4.readResolve();
      Complex complex8 = complex3.createComplex(8.378574405736031E-247, 1.2062916667846521E-196);
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex6.conjugate();
      complex7.multiply(2823);
      complex9.nthRoot(2823);
      Complex complex11 = complex9.pow((double) 1);
      complex2.getImaginary();
      complex9.sinh();
      Complex complex12 = complex8.exp();
      complex8.multiply(2.0);
      Complex complex13 = complex10.reciprocal();
      complex13.isNaN();
      complex8.sqrt();
      complex11.multiply(2.0);
      Complex complex14 = Complex.ZERO;
      complex12.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      complex1.add((-1152.9));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.INF.conjugate();
      complex3.ZERO.sinh();
      Complex complex5 = complex2.add(complex0);
      complex4.subtract(complex5);
      complex2.sqrt();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.sinh();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex1.NaN.sinh();
      complex5.hashCode();
      complex1.toString();
      complex0.sqrt1z();
      Complex complex6 = complex4.cos();
      Complex complex7 = new Complex(1852.5293921611);
      complex7.readResolve();
      complex5.sqrt();
      Complex complex8 = Complex.valueOf((-3416.373534), (-3416.373534));
      complex8.asin();
      complex8.sin();
      complex6.multiply(1567.8463);
      Complex complex9 = Complex.NaN;
      complex9.add(3699.761534229);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex1.ZERO.toString();
      complex2.I.atan();
      Complex complex3 = complex2.ONE.multiply(6.380177790989479E207);
      Complex complex4 = complex3.NaN.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      complex1.divide(complex2);
      Complex complex5 = complex4.tanh();
      complex4.subtract((-1815.07645576));
      complex0.add(0.0);
      complex5.equals(complex2);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.divide(complex2);
      complex7.ONE.pow(complex6);
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = complex0.ONE.subtract((-6.777752790396222E-8));
      Complex complex2 = complex0.NaN.log();
      complex2.ZERO.tanh();
      complex2.ONE.getArgument();
      complex2.createComplex(1.0187183636134904E-106, 1440);
      complex0.abs();
      Complex complex3 = complex1.sqrt();
      complex3.getArgument();
      Complex complex4 = new Complex((-4637.722709), (-6.777752790396222E-8));
      complex4.hashCode();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.valueOf((-1852.5293921611));
      Complex complex7 = complex6.pow(complex5);
      complex2.toString();
      complex1.divide(complex7);
      Complex.valueOf((-6.777752790396222E-8));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex1.ZERO.toString();
      complex1.NaN.getField();
      complex2.I.atan();
      complex2.getArgument();
      Complex complex3 = complex1.subtract(0.7853981633974483);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.divide(complex5);
      complex3.NaN.sinh();
      complex6.log();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex3.subtract(1185.7717);
      complex8.sqrt1z();
      Complex complex10 = complex1.sqrt1z();
      complex2.cos();
      complex0.readResolve();
      Complex complex11 = complex7.sqrt();
      complex9.asin();
      complex11.sin();
      complex10.add(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex0.multiply(1.0183920005400422E109);
      Complex complex6 = complex5.createComplex(8.378574405736031E-247, 8.378574405736031E-247);
      complex2.divide(complex4);
      complex1.readResolve();
      Complex complex7 = complex6.createComplex(8.378574405736031E-247, 8.378574405736031E-247);
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex6.multiply(678);
      complex6.nthRoot(231);
      complex9.pow(1.072843313217163);
      complex1.getImaginary();
      complex3.sinh();
      complex0.exp();
      complex9.multiply(Double.NaN);
      complex10.reciprocal();
      complex7.isNaN();
      complex4.sqrt();
      complex8.multiply(8.378574405736031E-247);
      Complex complex11 = Complex.ZERO;
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex1.ZERO.toString();
      complex1.NaN.getField();
      complex2.I.atan();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex3.NaN.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = (Complex)complex0.ZERO.readResolve();
      Complex complex7 = complex2.createComplex(Double.NaN, 6.380177790989479E207);
      complex7.ZERO.conjugate();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex8.ZERO.multiply(1);
      complex8.nthRoot(1);
      Complex complex10 = complex6.sqrt1z();
      complex5.acos();
      complex10.tan();
      complex3.add(complex9);
      complex9.createComplex(1, 6.380177790989479E207);
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.sinh();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex1.NaN.sinh();
      complex5.hashCode();
      complex1.toString();
      complex0.sqrt1z();
      complex2.cos();
      complex3.readResolve();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.asin();
      complex2.sin();
      complex7.multiply((-3699.0));
      complex4.add((-3699.0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1.0333241479437797E-8);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.INF.negate();
      complex3.add(complex0);
      Complex complex4 = complex0.NaN.subtract(5.091070300111434E-88);
      Complex complex5 = complex4.createComplex(6.42467573615509E-178, 6.42467573615509E-178);
      complex0.INF.abs();
      complex4.I.sqrt();
      complex0.NaN.getArgument();
      complex0.hashCode();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = Complex.valueOf(5.091070300111434E-88);
      complex6.I.pow(complex7);
      complex5.toString();
      complex2.divide(complex4);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.readResolve();
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.NaN.tanh();
      complex0.NaN.createComplex(0.0, 4150.9147);
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add(2657.965754);
      Complex complex2 = complex0.pow(complex1);
      complex2.createComplex((-175.3151043), (-1587.2930671296895));
      Complex complex3 = complex2.INF.negate();
      complex3.INF.acos();
      Complex complex4 = complex1.subtract(complex0);
      complex0.hashCode();
      Complex complex5 = complex1.reciprocal();
      Complex.valueOf(0.0, 2657.965754);
      complex4.getField();
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.valueOf((-1.0));
      Complex.valueOf(2657.965754, Double.NaN);
      complex7.divide(complex0);
      complex5.acos();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(7.715994473741065E-8);
      complex0.NaN.pow(complex1);
      Complex.valueOf(315.916006853542, 7.715994473741065E-8);
      complex0.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.sqrt1z();
      complex3.sqrt1z();
      Complex complex5 = complex2.I.asin();
      Complex complex6 = complex3.I.reciprocal();
      Complex complex7 = complex4.ZERO.tanh();
      Complex complex8 = complex7.INF.reciprocal();
      complex8.ONE.multiply(complex2);
      Complex complex9 = complex4.NaN.subtract(Double.POSITIVE_INFINITY);
      complex0.asin();
      complex4.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.sqrt();
      complex5.cosh();
      complex4.add(0.0);
      complex10.sin();
      complex6.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.multiply(1.0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex.valueOf(1.0);
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex0.sqrt1z();
      complex5.getArgument();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex4.ZERO.cos();
      complex7.ZERO.pow(complex5);
      complex6.NaN.getField();
      complex1.ZERO.add((-1628.40076137654));
      Complex complex8 = complex6.cos();
      complex8.ZERO.sqrt1z();
      complex1.getField();
      Complex complex9 = complex6.sin();
      Complex complex10 = Complex.valueOf(0.0, 1.0);
      complex10.INF.getField();
      complex10.INF.divide((-1.6471487337453832E-9));
      Complex complex11 = complex4.pow(complex10);
      complex11.sin();
      Complex complex12 = new Complex(1.0);
      complex6.equals(complex12);
      complex3.getReal();
      complex9.isInfinite();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1837.95756426, 1837.95756426);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.asin();
      complex3.NaN.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex4.ONE.multiply(complex1);
      Complex complex7 = complex2.NaN.conjugate();
      complex0.I.add(0.0);
      Complex complex8 = complex5.ONE.asin();
      complex5.ONE.getArgument();
      complex8.I.sin();
      Complex complex9 = complex2.cos();
      complex9.equals(complex0);
      complex5.cosh();
      Complex complex10 = Complex.valueOf(1837.95756426);
      complex10.ZERO.getArgument();
      complex6.cosh();
      complex0.divide(0.0);
      Complex complex11 = complex7.conjugate();
      complex1.conjugate();
      complex6.negate();
      complex11.isInfinite();
      Complex.valueOf(473.233, 3.150242850860434E59);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex1.pow(0.0);
      complex0.abs();
      complex2.ONE.acos();
      Complex complex3 = complex0.multiply(2696.233);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex4.tan();
      complex7.ONE.hashCode();
      complex6.ONE.acos();
      complex6.INF.nthRoot(995);
      Complex complex8 = complex6.multiply(0);
      Complex complex9 = complex8.NaN.reciprocal();
      complex9.ONE.acos();
      complex5.INF.atan();
      Complex complex10 = complex4.ONE.sqrt();
      complex4.sqrt1z();
      complex4.subtract(20.0);
      complex6.sinh();
      complex2.exp();
      complex7.pow(903.3);
      complex10.sinh();
      Complex complex11 = Complex.I;
      Object object0 = complex11.readResolve();
      complex4.equals(object0);
      complex1.divide((double) 995);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.844722015961139E-8);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.ZERO.pow(1.844722015961139E-8);
      complex0.isInfinite();
      Complex complex4 = complex0.sinh();
      complex4.NaN.getArgument();
      Complex complex5 = Complex.valueOf((-4015.560989409));
      complex5.NaN.pow(1.69742947894444E-8);
      Complex.valueOf((-838.7812907855), 7.92177143584738E-8);
      Complex complex6 = complex5.sqrt();
      complex4.toString();
      complex6.INF.hashCode();
      complex6.multiply(2248);
      complex3.cosh();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.exp();
      complex0.INF.nthRoot(1884);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ONE.add(complex0);
      complex0.NaN.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.add(0.0);
      Complex complex4 = Complex.valueOf(0.0, (-1516.048));
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex0.ONE.pow(complex2);
      complex6.I.sin();
      Complex complex7 = complex6.NaN.sin();
      complex7.INF.subtract(Double.NaN);
      complex0.INF.readResolve();
      complex0.isInfinite();
      Complex complex8 = complex2.NaN.asin();
      complex2.getArgument();
      Complex complex9 = complex2.multiply(complex0);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex9.ZERO.tanh();
      complex3.ONE.cosh();
      Complex complex12 = complex10.ONE.log();
      complex9.getReal();
      complex3.asin();
      complex5.cosh();
      complex10.abs();
      complex11.acos();
      complex12.divide((-20.0));
      complex2.equals((Object) null);
      complex10.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow((-2234.1671));
      Complex complex2 = complex0.ZERO.acos();
      complex1.toString();
      Complex complex3 = complex2.NaN.tanh();
      complex3.ZERO.log();
      complex3.I.acos();
      Complex complex4 = complex0.ONE.divide((-2234.1671));
      Complex complex5 = complex0.NaN.subtract(232.0);
      complex4.I.acos();
      complex5.ONE.createComplex(351.211695077236, 0.0);
      complex4.NaN.pow(complex2);
      Complex.valueOf((-2234.1671));
      Complex complex6 = complex1.INF.divide(complex0);
      complex6.I.divide(complex4);
      complex0.getReal();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ZERO.subtract(complex0);
      complex2.equals(complex4);
      Complex complex9 = complex1.divide((-2234.1671));
      complex0.conjugate();
      complex4.multiply(186);
      complex9.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.exp();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.pow(complex0);
      Complex.valueOf(3607.99);
      Complex complex3 = complex2.ONE.multiply((-650));
      complex1.sqrt();
      Complex complex4 = Complex.valueOf(1688.3130906246195);
      complex4.toString();
      complex3.conjugate();
      complex0.createComplex(1688.3130906246195, 2048.854);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.sinh();
      Complex complex3 = complex1.tanh();
      complex3.ONE.atan();
      Complex complex4 = complex1.NaN.sinh();
      complex4.hashCode();
      complex1.toString();
      complex0.sqrt1z();
      complex1.isInfinite();
      complex4.nthRoot(1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(0.0);
      complex2.INF.readResolve();
      complex2.INF.reciprocal();
      complex1.hashCode();
      complex1.INF.subtract(0.6394867897033691);
      complex1.conjugate();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      complex0.exp();
      Complex complex1 = new Complex((-527.439));
      complex1.NaN.reciprocal();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.I.cosh();
      complex3.ONE.cos();
      complex2.NaN.readResolve();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex4.acos();
      complex1.acos();
      complex5.ONE.getArgument();
      complex0.tanh();
      Complex complex6 = complex5.pow(complex4);
      complex6.NaN.readResolve();
      complex6.INF.acos();
      complex0.readResolve();
      Complex complex7 = complex5.multiply(complex4);
      Complex complex8 = complex7.INF.subtract(complex0);
      complex8.NaN.hashCode();
      complex1.equals("g6{yqxkgXSqJn\"?}Kg");
      Complex complex9 = complex1.log();
      complex9.add(complex6);
      Complex.valueOf((-1447.291163247), 0.0);
      complex7.asin();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ZERO.log();
      complex2.getArgument();
      Complex complex3 = complex0.INF.divide((-1.0));
      complex3.NaN.add(complex0);
      complex1.NaN.readResolve();
      complex0.hashCode();
      complex1.INF.readResolve();
      complex0.abs();
      complex0.isNaN();
      complex0.ZERO.subtract(1459.50032);
      complex1.sinh();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.cos();
      complex0.acos();
      Complex complex2 = Complex.ZERO;
      complex0.ZERO.multiply(complex2);
      complex0.INF.multiply(complex1);
      complex0.add(203.42142);
      complex1.isInfinite();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(3815.972283585);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.sinh();
      complex3.ZERO.sqrt1z();
      complex1.multiply(3815.972283585);
      Complex complex4 = complex1.ZERO.createComplex(3815.972283585, 3815.972283585);
      complex0.I.cos();
      complex1.add(9.215765583599035E-8);
      complex0.toString();
      Complex complex5 = complex4.reciprocal();
      complex5.ONE.toString();
      Complex complex6 = complex5.createComplex((-1400.50247), (-1400.50247));
      Complex complex7 = complex4.conjugate();
      complex7.tan();
      complex5.getReal();
      Complex complex8 = complex6.INF.tanh();
      try { 
        complex8.NaN.nthRoot((-255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -255
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.createComplex(2872.430932501, 0.0);
      complex0.ZERO.reciprocal();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.sin();
      complex3.I.multiply((-4567.167));
      Complex complex5 = complex4.I.add(complex0);
      Complex complex6 = complex4.ZERO.divide(complex0);
      complex6.add(complex4);
      Complex complex7 = Complex.valueOf((-1.1357810855950775E-7));
      complex4.I.readResolve();
      complex4.readResolve();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.NaN.cosh();
      Complex complex9 = complex0.subtract(complex3);
      complex4.ONE.abs();
      Complex complex10 = Complex.valueOf((-733.6), (-202.8));
      complex0.getField();
      Complex complex11 = complex9.atan();
      complex11.I.cos();
      complex11.ZERO.tan();
      complex5.divide(complex0);
      complex0.hashCode();
      complex2.asin();
      complex10.tan();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(766.5, 766.5);
      Complex complex1 = complex0.ZERO.tan();
      complex1.INF.getField();
      Complex complex2 = complex0.multiply((-2189.39));
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.multiply((-2189.39));
      complex2.I.sqrt();
      Complex complex5 = complex4.I.add(766.5);
      Complex complex6 = complex4.ONE.add(766.5);
      complex0.cos();
      Complex complex7 = complex4.I.divide(complex2);
      complex7.sin();
      Complex complex8 = complex4.cosh();
      complex8.INF.tan();
      Complex complex9 = complex3.subtract(complex0);
      complex0.multiply(1004.49301872488);
      complex6.negate();
      Complex complex10 = complex9.sinh();
      complex1.tanh();
      complex10.isInfinite();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.toString();
      complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.cos();
      complex2.ZERO.sqrt1z();
      complex1.ZERO.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.multiply(Double.NaN);
      Complex.valueOf(Double.NaN, 707.826318092883);
      complex0.getArgument();
      complex0.sqrt();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      complex1.add((-1152.9));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sin();
      complex0.INF.conjugate();
      Complex complex4 = complex3.ZERO.sinh();
      complex1.I.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.I.divide((-3490.583639632));
      complex3.abs();
      complex3.negate();
      complex5.sqrt();
      complex3.subtract(0.0);
      Complex.valueOf((-2181.834986));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4.8677119923665573E-278);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.NaN.pow(0.0);
      Complex complex3 = complex0.tanh();
      complex3.subtract(0.0);
      Complex complex4 = complex2.add(0.0);
      complex4.equals(complex0);
      complex1.divide(complex4);
      complex1.multiply(2512.26);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-714.984348));
      Complex complex1 = complex0.NaN.multiply((-1864));
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.ONE.atan();
      complex3.NaN.createComplex((-1864), (-1864));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.acos();
      complex5.ONE.divide((-2847.0));
      complex2.atan();
      Complex complex6 = complex0.ZERO.negate();
      Complex complex7 = Complex.ZERO;
      complex6.NaN.divide(complex7);
      complex4.reciprocal();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.ONE.toString();
      Complex complex9 = complex8.NaN.divide((double) (-1864));
      complex9.NaN.subtract((-714.984348));
      complex9.subtract(complex0);
      complex0.sinh();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(841.9207690942);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.NaN.sqrt();
      complex0.cos();
      complex2.ZERO.multiply(0);
      complex1.isInfinite();
      complex1.log();
      complex3.multiply(704);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      complex1.NaN.nthRoot(1);
      complex0.toString();
      Complex complex2 = complex0.multiply((-201.5439812756));
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf(3321.3574297, 3321.3574297);
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex6.acos();
      complex6.log();
      Complex complex8 = complex0.subtract(1.5340733916570804E145);
      complex8.ONE.subtract(complex7);
      complex4.multiply((-3043));
      complex5.acos();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply(0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 2656.3369480779;
      Complex complex0 = Complex.valueOf(2656.3369480779, 2656.3369480779);
      complex0.ONE.acos();
      complex0.hashCode();
      complex0.I.subtract(2656.3369480779);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.sin();
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.getArgument();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.tan();
      complex1.I.toString();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.equals(complex1);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex1.INF.exp();
      complex4.NaN.exp();
      Complex complex5 = complex3.INF.asin();
      Complex complex6 = complex1.pow(0.0);
      complex3.hashCode();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex7.ONE.subtract(complex3);
      complex8.NaN.multiply(complex1);
      complex7.INF.atan();
      Complex complex9 = complex1.negate();
      complex9.INF.abs();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = complex0.INF.tan();
      complex1.I.atan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.exp();
      complex3.NaN.getArgument();
      Complex complex4 = complex2.I.subtract(586.516034);
      complex4.ZERO.reciprocal();
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex3.NaN.divide(complex2);
      complex6.NaN.log();
      complex3.exp();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.INF.subtract(586.516034);
      complex8.I.sqrt1z();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex9.INF.sinh();
      Complex complex11 = complex10.NaN.cos();
      complex11.ZERO.readResolve();
      complex10.INF.sqrt();
      complex7.asin();
      Complex complex12 = complex0.sin();
      complex12.multiply(0.0);
      complex5.add(586.516034);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.createComplex(6.380177790989479E207, 6.380177790989479E207);
      complex1.ZERO.toString();
      complex1.NaN.getField();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.ONE.multiply(6.380177790989479E207);
      Complex complex5 = complex4.NaN.createComplex(6.380177790989479E207, 8.378574405736031E-247);
      complex1.divide(complex2);
      complex0.ZERO.readResolve();
      Complex complex6 = complex2.createComplex(Double.NaN, 6.380177790989479E207);
      complex6.ZERO.conjugate();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.ZERO.multiply(1);
      complex7.nthRoot(1);
      complex0.pow(0.0);
      complex2.getImaginary();
      Complex complex9 = complex3.sinh();
      complex9.ONE.exp();
      complex9.NaN.multiply((double) 1);
      complex9.I.reciprocal();
      complex9.isNaN();
      complex0.sqrt();
      complex3.multiply(6.380177790989479E207);
      Complex complex10 = Complex.ZERO;
      complex8.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.pow(complex1);
      complex3.ONE.sin();
      complex1.INF.abs();
      Complex complex4 = complex0.NaN.add(complex1);
      complex1.ONE.abs();
      Complex complex5 = complex0.exp();
      complex5.INF.readResolve();
      Complex complex6 = complex5.INF.divide(complex4);
      complex6.asin();
      complex6.abs();
      complex5.abs();
      complex4.equals(complex3);
      Complex complex7 = complex5.conjugate();
      complex5.log();
      complex5.add(complex7);
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
      complex0.I.sqrt1z();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.INF.sinh();
      complex3.INF.negate();
      complex0.getImaginary();
      complex2.toString();
      complex3.toString();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex((-1823.3504), Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      int int0 = 0;
      try { 
        complex0.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3429.0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.exp();
      complex0.divide(0.0);
      complex1.toString();
      complex1.multiply(0.0);
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.I.hashCode();
      Complex complex6 = complex1.divide(complex5);
      complex6.I.nthRoot(37);
      complex6.INF.pow(complex4);
      complex4.isInfinite();
      complex0.subtract(complex4);
      complex3.log();
      complex5.isNaN();
      complex5.pow(1.998471736907959);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      complex0.INF.sqrt();
      Complex complex4 = complex0.conjugate();
      complex0.getImaginary();
      complex0.acos();
      complex3.isInfinite();
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(1215.46607);
      Complex complex1 = complex0.NaN.sinh();
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.INF.conjugate();
      complex2.I.readResolve();
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex3.NaN.log();
      complex0.NaN.abs();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.sqrt1z();
      complex7.ZERO.tan();
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.pow(Double.NaN);
      complex0.log();
      complex4.add(Double.NaN);
      Complex complex10 = complex5.I.reciprocal();
      Complex complex11 = complex4.tan();
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex3.sqrt();
      List<Complex> list0 = complex1.NaN.nthRoot(698);
      assertTrue(list0.contains(complex1));
      
      complex5.abs();
      Complex complex13 = complex5.divide((-1513.1108437609));
      complex13.INF.reciprocal();
      Complex complex14 = Complex.valueOf((-2345.615), 1.373528242111206);
      Complex complex15 = complex14.I.add(1.373528242111206);
      Complex complex16 = complex1.conjugate();
      assertSame(complex16, complex13);
      
      complex12.atan();
      complex9.sinh();
      Complex complex17 = complex15.acos();
      Complex complex18 = complex17.INF.add(complex3);
      assertEquals((-1.2071762936422912), complex17.getImaginary(), 0.01);
      assertTrue(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex10));
      
      Complex complex19 = complex6.reciprocal();
      assertEquals(0.0, complex19.getReal(), 0.01);
      assertEquals((-8.227299495429171E-4), complex19.getImaginary(), 0.01);
      
      Complex complex20 = (Complex)complex14.readResolve();
      assertEquals((-2345.615), complex20.getReal(), 0.01);
      assertEquals(1.373528242111206, complex14.getImaginary(), 0.01);
  }
}
