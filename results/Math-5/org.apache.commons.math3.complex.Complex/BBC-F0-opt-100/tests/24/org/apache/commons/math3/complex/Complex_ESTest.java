/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:01:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1689.789154111), 1.0157477855682373);
      complex0.getField();
      complex0.NaN.reciprocal();
      complex0.NaN.cos();
      Complex complex1 = new Complex(0.6905817003766437, 20.0);
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.divide((-263.112010818));
      Complex complex3 = complex0.conjugate();
      complex3.abs();
      complex1.tan();
      complex0.divide((-407.695318066159));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(868.61977831);
      complex3.getArgument();
      Complex complex4 = complex2.NaN.cos();
      complex4.INF.multiply(2.414213562373095);
      Complex complex5 = complex2.I.subtract(2.54224113415832E258);
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex2.multiply((-20.0));
      Complex.valueOf((-20.0), 0.0);
      complex0.abs();
      complex2.reciprocal();
      complex5.asin();
      complex7.asin();
      complex0.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.pow(8.707092668016246E-211);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.tan();
      complex4.acos();
      complex2.acos();
      complex0.multiply(complex2);
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(0.0);
      complex2.abs();
      complex1.multiply(484.7815402333889);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.I;
      complex3.tan();
      complex4.acos();
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-488.33205793), (-488.33205793));
      Complex complex1 = complex0.exp();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-488.33205793), 4.0447634595724164E195);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3255.4532070717, 3255.4532070717);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.sqrt1z();
      complex0.sinh();
      complex1.subtract(0.5039018405998233);
      complex1.divide(complex2);
      complex0.pow(3255.4532070717);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(0.0);
      complex2.abs();
      complex1.multiply(484.7815402333889);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.exp();
      complex0.tan();
      complex1.acos();
      complex4.acos();
      complex3.multiply(37);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 21.58509421396079);
      complex0.ZERO.getField();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.I.multiply(3334.475467);
      complex2.NaN.cosh();
      complex3.I.atan();
      complex3.NaN.divide(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.INF.divide(3334.475467);
      complex5.NaN.createComplex(3334.475467, 1326.5204);
      Complex complex6 = complex1.I.subtract(1326.5204);
      Complex complex7 = Complex.valueOf((-1.1843870433971731E201));
      complex7.ONE.readResolve();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex9.negate();
      complex8.nthRoot(960);
      complex2.pow((double) 960);
      Complex.valueOf((-2254.9982455688514), 61.8702);
      complex3.readResolve();
      complex9.getField();
      complex3.pow((double) 960);
      complex0.readResolve();
      Complex complex11 = complex6.multiply(960);
      complex11.INF.cosh();
      complex11.INF.subtract(complex10);
      complex7.sqrt1z();
      complex4.abs();
      complex0.subtract(0.0);
      complex3.pow(6.283185307179586);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.multiply(37);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ONE.subtract(complex2);
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.multiply((-1757.25));
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex10.NaN.asin();
      Complex complex12 = complex3.multiply(complex5);
      complex12.INF.atan();
      Complex complex13 = complex6.divide((-1757.25));
      complex3.ONE.sqrt1z();
      complex7.add(complex12);
      Complex complex14 = complex8.createComplex((-2712.0), Double.POSITIVE_INFINITY);
      complex8.divide(complex9);
      Complex complex15 = complex0.negate();
      complex15.ONE.reciprocal();
      complex2.I.toString();
      Complex complex16 = complex12.add((-1.0));
      complex16.nthRoot(37);
      complex13.negate();
      complex1.reciprocal();
      complex5.cos();
      complex4.acos();
      Complex.valueOf((-1.0));
      complex8.readResolve();
      Complex complex17 = complex15.divide(Double.POSITIVE_INFINITY);
      complex17.subtract(complex11);
      complex14.multiply(1750.0416);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-488.33205793), (-488.33205793));
      Complex complex1 = complex0.tanh();
      complex1.getArgument();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.230020851688713E-185);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.pow(7.230020851688713E-185);
      complex2.sqrt();
      Complex complex3 = Complex.I;
      complex3.tan();
      complex3.acos();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.sqrt();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(7.230020851688713E-185, (-2483773.124441884));
      Complex complex1 = complex0.acos();
      complex0.sin();
      complex0.divide((-2483773.124441884));
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(7.230020851688713E-185, (-2483773.124441884));
      Complex complex1 = Complex.valueOf((-20.0), (-2483773.124441884));
      complex1.INF.cosh();
      complex1.sqrt();
      Complex complex2 = complex1.tanh();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-488.33205793));
      complex0.acos();
      Complex complex1 = Complex.ONE;
      complex1.hashCode();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (-488.33205793));
      complex2.sqrt();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.82825404854514E-8, (-643.6916777965034));
      Complex complex1 = complex0.add((-1969.658));
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.divide((-643.6916777965034));
      complex0.NaN.reciprocal();
      Complex complex4 = complex2.I.multiply(7);
      Complex complex5 = complex1.exp();
      complex0.ZERO.pow(complex4);
      complex5.NaN.abs();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.ONE.multiply(5.82825404854514E-8);
      complex8.ZERO.divide(Double.NaN);
      Complex complex9 = Complex.valueOf(1.8755581161351529);
      Complex complex10 = complex3.pow(complex9);
      Complex complex11 = Complex.valueOf((-261.56807108505), 2.4200520515441895);
      complex6.INF.getField();
      Complex complex12 = complex10.INF.multiply(3925);
      Complex complex13 = complex6.sin();
      complex13.I.reciprocal();
      complex3.ONE.sqrt1z();
      complex2.INF.add(complex11);
      Complex complex14 = complex3.multiply(1.8755581161351529);
      complex2.pow(complex7);
      complex1.negate();
      complex12.subtract((double) 3925);
      Complex complex15 = complex14.tan();
      complex15.ONE.reciprocal();
      complex15.sinh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(0.0);
      complex2.abs();
      Complex complex3 = complex1.multiply(484.7815402333889);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.I;
      complex4.multiply(0.0);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.asin();
      complex0.sinh();
      double double0 = 20.0;
      complex2.ZERO.add(20.0);
      complex0.NaN.sqrt();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(0.0);
      complex2.abs();
      Complex complex3 = complex1.multiply(484.7815402333889);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.exp();
      complex4.tan();
      ComplexField complexField0 = complex5.getField();
      complex2.getField();
      Complex complex6 = Complex.INF;
      complex3.equals(complexField0);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(0.0);
      complex2.abs();
      complex1.multiply(484.7815402333889);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.exp();
      complex3.tan();
      complex4.getField();
      Complex complex5 = new Complex(484.7815402333889, 484.7815402333889);
      complex5.getField();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.valueOf(Double.NaN, 484.7815402333889);
      complex2.equals("(0.0, 0.0)");
      complex6.acos();
      complex7.add(complex6);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.log();
      complex0.multiply(complex1);
      Complex complex2 = complex1.subtract((-20.0));
      Complex complex3 = new Complex(1.0, 8.921500305802965E-5);
      complex1.multiply((-149));
      Complex complex4 = Complex.INF;
      complex4.sqrt();
      Complex complex5 = Complex.valueOf((-8344.369567558724));
      complex5.acos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.tanh();
      complex7.tanh();
      complex4.getImaginary();
      complex0.readResolve();
      Complex complex8 = Complex.I;
      complex2.add(complex8);
      complex1.reciprocal();
      complex6.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-380.30505221), 1.0274494061148778E-8);
      Complex complex1 = complex0.ZERO.add((-380.30505221));
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.NaN.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(755.49673, 4499.828819);
      complex3.toString();
      Complex complex4 = complex2.I.log();
      complex0.I.sqrt();
      Complex complex5 = complex0.add(6.283185307179586);
      complex0.readResolve();
      Complex complex6 = complex3.ONE.acos();
      Complex complex7 = complex6.INF.multiply(4499.828819);
      complex5.ZERO.getArgument();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex1.pow(complex4);
      complex8.ZERO.pow(3014.4235526);
      complex5.readResolve();
      Complex complex10 = complex4.pow(complex8);
      complex3.atan();
      Complex complex11 = complex0.log();
      complex11.ONE.multiply(complex2);
      complex10.toString();
      Complex complex12 = complex9.pow((-74.20817829610715));
      complex12.ZERO.pow(complex6);
      complex7.negate();
      Complex complex13 = Complex.valueOf(0.0);
      complex13.INF.multiply(Double.POSITIVE_INFINITY);
      complex5.atan();
      complex2.reciprocal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.ONE.subtract((-20.0));
      complex1.INF.abs();
      Complex complex2 = complex1.pow(2.6167001724243164);
      complex1.abs();
      Complex complex3 = complex0.multiply(0.0);
      complex1.sqrt();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.tan();
      complex5.getField();
      Complex complex6 = complex5.createComplex((-20.0), 1156.90289);
      complex4.exp();
      complex0.reciprocal();
      complex6.cos();
      complex3.subtract(complex2);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.ONE.subtract((-20.0));
      complex1.INF.abs();
      complex1.ZERO.nthRoot(1585);
      Complex complex2 = complex0.multiply(1585);
      Complex complex3 = complex0.exp();
      complex0.I.getField();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.NaN.exp();
      Complex complex7 = complex5.I.multiply((-914));
      complex7.sin();
      Complex.valueOf((double) 1585, (-267.858613781));
      complex7.ZERO.sqrt();
      complex4.asin();
      Complex.valueOf(6.0778104626050015E-9);
      complex2.reciprocal();
      complex7.tan();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1576.0), 1.3695101737976074);
      complex0.I.toString();
      Complex complex1 = complex0.log();
      complex1.NaN.pow(1.3695101737976074);
      complex1.INF.abs();
      Complex complex2 = complex0.multiply(1.3695101737976074);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = new Complex((-1576.0), Double.POSITIVE_INFINITY);
      complex2.tan();
      complex2.INF.getField();
      complex0.createComplex(3.0099905634916516E236, 628.7191);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex6.I.cos();
      complex7.ZERO.subtract(complex3);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.ZERO.divide(6.054601485195952E-39);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      complex1.ONE.sqrt();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex0.subtract(2.0902938842773438);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex4.I.getArgument();
      complex3.sinh();
      complex3.NaN.log();
      Complex complex5 = complex3.ZERO.exp();
      complex5.ONE.getArgument();
      complex0.toString();
      complex2.INF.negate();
      complex2.cos();
      try { 
        complex3.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-441.838055036279));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.negate();
      complex2.add(Double.NaN);
      Complex complex3 = complex2.atan();
      complex3.readResolve();
      complex2.multiply(1129);
      Complex complex4 = Complex.INF;
      complex4.pow(complex2);
      Complex.valueOf((-1603.9240173));
      Complex complex5 = new Complex((-3453.8348), (-3453.8348));
      complex5.reciprocal();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(3.7298611779671127E-124);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.ONE.multiply(3.7298611779671127E-124);
      Complex.valueOf((-2097.198854633), (-2097.198854633));
      Complex complex7 = complex5.pow(complex6);
      complex4.conjugate();
      complex1.atan();
      complex1.getArgument();
      Object object0 = complex4.readResolve();
      complex2.equals(object0);
      Complex complex8 = Complex.INF;
      complex3.pow(complex1);
      Complex complex9 = Complex.I;
      complex7.add((-782.0));
      Complex complex10 = Complex.INF;
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-211.975829));
      Complex.valueOf((-211.975829), (-2471.613997091046));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.tanh();
      complex1.createComplex((-211.975829), Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.createComplex(Double.POSITIVE_INFINITY, (-5.376251584638963E-8));
      Complex complex8 = new Complex((-2471.613997091046), (-20.0));
      complex5.negate();
      complex7.isNaN();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.acos();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.add(Double.NaN);
      complex3.atan();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.multiply(4991);
      Complex complex6 = complex4.exp();
      complex6.getField();
      complex5.readResolve();
      complex4.add(1866.8612812044098);
      complex6.asin();
      complex2.equals(complex5);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      complex2.getArgument();
      Complex complex3 = Complex.I;
      complex2.pow(complex3);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.atan();
      complex4.getArgument();
      complex3.readResolve();
      complex3.equals(complex0);
      Complex complex6 = Complex.INF;
      complex3.pow(complex5);
      Complex complex7 = Complex.I;
      complex1.add((-637.455207636844));
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      complex2.NaN.getArgument();
      Complex complex3 = complex2.multiply(Double.NaN);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.exp();
      complex5.tan();
      complex2.getField();
      Complex complex6 = complex1.createComplex(Double.NaN, Double.NaN);
      complex3.exp();
      complex3.reciprocal();
      complex4.cos();
      complex1.subtract(complex6);
      Complex complex7 = new Complex((-2037.055978930902), (-1624.806034151369));
      Complex complex8 = new Complex((-1624.806034151369), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      complex2.NaN.getArgument();
      complex2.getField();
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.multiply(1.3695101737976074);
      complex4.ONE.negate();
      Complex complex5 = complex2.multiply(632);
      complex4.sqrt();
      Complex complex6 = Complex.NaN;
      complex6.asin();
      complex5.acos();
      complex3.acos();
      complex1.tanh();
      complex3.tanh();
      complex0.getImaginary();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex1.multiply(complex2);
      complex0.INF.divide(complex4);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.log();
      complex3.tan();
      complex6.acos();
      complex3.divide(complex4);
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = Complex.ZERO;
      complex9.add(3.7298611779671127E-124);
      complex8.multiply(3.7298611779671127E-124);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cos();
      complex1.multiply(complex3);
      complex3.negate();
      Complex complex4 = complex1.log();
      Complex complex5 = new Complex((-1941.741439798), (-1941.741439798));
      complex5.tan();
      complex3.acos();
      Complex complex6 = complex5.divide(complex4);
      complex2.divide(complex3);
      complex6.add(1.1944413786591128);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.982180242124184E65);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.pow(5.982180242124184E65);
      complex1.pow(complex0);
      complex2.conjugate();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.atan();
      complex1.getArgument();
      complex3.readResolve();
      complex1.equals(complex0);
      Complex complex5 = Complex.INF;
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      complex1.subtract(95439.88339376952);
      Complex complex3 = complex2.multiply(1.3695101737976074);
      Complex complex4 = new Complex(8.921500305802965E-5, 4499.828819);
      Complex complex5 = complex4.multiply((-149));
      complex4.sqrt();
      complex3.asin();
      Complex complex6 = Complex.valueOf((-1045.7));
      Complex complex7 = complex6.acos();
      complex4.acos();
      Complex complex8 = complex7.tanh();
      complex5.tanh();
      complex8.getImaginary();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.982180242124184E65);
      complex0.asin();
      Complex complex1 = complex0.pow(5.982180242124184E65);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.multiply(1052);
      complex3.sqrt();
      complex0.divide(5.982180242124184E65);
      complex3.multiply(5.982180242124184E65);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.divide((-240.3367));
      Complex complex1 = complex0.add((-240.3367));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.multiply(complex1);
      complex1.ZERO.add(complex3);
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex4.tanh();
      complex3.multiply((-240.3367));
      Complex complex8 = complex7.pow((-240.3367));
      complex6.multiply(complex8);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.NaN.conjugate();
      complex4.atan();
      complex4.getArgument();
      complex5.divide(complex1);
      complex4.nthRoot(1);
      Complex complex6 = complex2.sin();
      Complex complex7 = Complex.I;
      complex5.multiply(complex7);
      Complex complex8 = Complex.valueOf((-74.397339803693), 641.42);
      complex8.tan();
      complex8.asin();
      complex6.isInfinite();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2626.0388534777);
      Complex complex1 = complex0.cos();
      complex1.ONE.getField();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.INF.conjugate();
      complex3.getField();
      Complex complex4 = complex2.INF.add(2626.0388534777);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.add(1.1489352403441815E-169);
      Complex.valueOf(2274.1708);
      complex4.reciprocal();
      Complex.valueOf(1.1489352403441815E-169, (-892.46326));
      Complex complex7 = complex5.atan();
      complex4.abs();
      complex7.nthRoot(1);
      complex0.isNaN();
      complex1.pow((-20.0));
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.I.acos();
      complex1.ONE.abs();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.sin();
      complex5.readResolve();
      complex2.sqrt();
      Complex complex7 = complex4.sinh();
      Complex complex8 = new Complex(1, 1.0);
      complex8.conjugate();
      complex2.nthRoot(1);
      Complex complex9 = complex5.sqrt1z();
      complex6.toString();
      Complex complex10 = new Complex((-1.0439966196904604), 1);
      Complex complex11 = complex5.divide(complex10);
      complex6.nthRoot(4970);
      complex11.sin();
      complex5.multiply(complex7);
      complex10.tan();
      complex10.asin();
      complex9.isInfinite();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.multiply(1);
      complex0.readResolve();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.NaN.conjugate();
      complex3.atan();
      complex1.INF.conjugate();
      Complex.valueOf(20.0, Double.NaN);
      complex0.atan();
      complex1.abs();
      complex4.nthRoot(381);
      complex2.isInfinite();
      complex2.pow(0.0);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = Complex.INF;
      complex0.pow(complex3);
      Complex complex4 = Complex.valueOf((-1603.9240173));
      complex2.reciprocal();
      Complex.valueOf((-1603.9240173), 0.0);
      Complex complex5 = complex4.atan();
      complex4.ZERO.add(0.4311734437942505);
      complex5.abs();
      complex4.nthRoot(4973);
      complex1.isInfinite();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.I.multiply(0.4734157919883728);
      Complex complex3 = complex2.ZERO.sinh();
      complex1.readResolve();
      Complex complex4 = Complex.INF;
      complex0.pow(complex4);
      complex3.conjugate();
      Complex complex5 = Complex.valueOf(Double.NaN, 0.0);
      complex5.atan();
      complex0.getArgument();
      Complex complex6 = Complex.NaN;
      complex5.equals(complex6);
      Complex complex7 = Complex.INF;
      complex0.pow(complex0);
      complex2.add(Double.NaN);
      Complex complex8 = new Complex(946.4, 946.4);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-211.975829));
      Complex complex4 = complex1.pow(complex3);
      complex3.conjugate();
      Complex complex5 = complex3.atan();
      complex4.getArgument();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex6 = Complex.INF;
      complex1.pow(complex0);
      Complex complex7 = Complex.I;
      complex7.add((-211.975829));
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ZERO.add(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.I.subtract(complex5);
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex4.INF.atan();
      complex8.I.subtract(complex3);
      Complex complex9 = complex0.ZERO.subtract(complex3);
      complex9.I.toString();
      Complex complex10 = complex9.INF.conjugate();
      complex10.toString();
      Complex complex11 = complex3.subtract(Double.NaN);
      Complex complex12 = complex5.NaN.createComplex(1290.47575020905, (-908.3484416));
      complex12.sinh();
      Complex complex13 = complex11.I.subtract(complex1);
      complex11.getImaginary();
      Complex complex14 = new Complex((-908.3484416));
      Complex complex15 = complex13.sin();
      complex7.hashCode();
      Complex.valueOf(1.0);
      complex15.toString();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.multiply(1);
      complex1.atan();
      Complex complex2 = new Complex(0.10660636002044777, 1789.0);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex0.cosh();
      complex4.add(1789.0);
      Complex complex5 = Complex.valueOf(664.99050294);
      complex2.reciprocal();
      Complex.valueOf(1789.0, 0.10660636002044777);
      Complex complex6 = new Complex(6.283185307179586);
      complex6.atan();
      complex3.abs();
      complex2.nthRoot(485);
      complex5.isInfinite();
      complex3.pow(0.3265062939982134);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      complex0.add(complex0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex5.subtract(complex0);
      complex8.subtract(complex3);
      complex3.toString();
      complex7.conjugate();
      Complex complex9 = Complex.valueOf(0.7308512343514764, 0.0);
      complex9.toString();
      complex8.subtract(0.4734157919883728);
      Complex complex10 = complex7.createComplex(0.4734157919883728, Double.NaN);
      complex10.subtract(complex0);
      complex7.getImaginary();
      complex10.reciprocal();
      complex4.sin();
      complex6.hashCode();
      Complex.valueOf((-204.21));
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1576.0), 1.3695101737976074);
      complex0.I.toString();
      Complex complex1 = complex0.INF.log();
      complex1.NaN.pow(1.3695101737976074);
      complex0.INF.abs();
      complex1.INF.abs();
      Complex complex2 = complex0.multiply(1.3695101737976074);
      Complex complex3 = complex2.sqrt();
      complex2.NaN.exp();
      complex2.tan();
      complex2.INF.getField();
      complex0.createComplex(3.0099905634916516E236, 628.7191);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 1.3695101737976074);
      complex7.getArgument();
      complex3.abs();
      complex1.cosh();
      complex5.pow(1.8755581161351529);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.I.acos();
      complex1.ONE.abs();
      Complex complex3 = complex1.atan();
      complex1.pow(complex3);
      Complex complex4 = complex1.cosh();
      complex4.I.add(1.0);
      Complex.valueOf(1.0);
      complex0.I.reciprocal();
      Complex.valueOf(1.0, (-311.342984881566));
      complex2.createComplex(2758.905650706808, 2355.5013519852605);
      complex2.exp();
      complex4.reciprocal();
      Complex complex5 = Complex.valueOf(1422.80273, (-2158.3480339050293));
      complex5.cos();
      Complex complex6 = Complex.valueOf((-311.342984881566));
      Complex complex7 = Complex.valueOf(1299.4728, 1090.0179248);
      complex6.multiply((-2553.0));
      complex7.multiply((-311.342984881566));
      complex0.NaN.log();
      // Undeclared exception!
      complex4.nthRoot(14094041);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-1576.0), 1.3695101737976074);
      complex0.I.toString();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.pow(1.3695101737976074);
      complex1.INF.abs();
      Complex complex3 = complex0.multiply(1.3695101737976074);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex3.add(complex5);
      complex6.getReal();
      complex6.atan();
      complex7.reciprocal();
      complex2.sinh();
      Complex complex9 = complex8.multiply(complex6);
      complex9.getField();
      complex3.pow(1701.17);
      Complex complex10 = new Complex(664.99050294, (-20.0));
      complex10.pow(4699.827005001573);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3246.60281794);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = complex0.ZERO.createComplex((-2758.905650706808), 801.0190001302);
      Complex complex3 = complex0.sqrt1z();
      complex0.isNaN();
      complex0.ONE.asin();
      Complex complex4 = complex3.ONE.tan();
      Complex.valueOf((-109.4390774678));
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex0.I.tan();
      complex6.NaN.cos();
      Complex complex7 = complex0.INF.add(complex1);
      complex5.ONE.createComplex((-109.4390774678), 3246.60281794);
      Complex complex8 = complex7.ZERO.cos();
      complex2.reciprocal();
      complex3.readResolve();
      complex0.NaN.add(complex2);
      complex2.reciprocal();
      complex4.getArgument();
      Complex complex9 = complex1.exp();
      complex9.ZERO.acos();
      complex5.getImaginary();
      complex8.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2122.526381836165), (-616.857051));
      Complex complex1 = complex0.ONE.pow(2.0);
      Complex complex2 = complex1.INF.exp();
      complex2.I.conjugate();
      Complex complex3 = complex1.I.acos();
      complex3.INF.add(complex2);
      Complex complex4 = complex0.I.createComplex(2.0, (-2122.526381836165));
      complex0.isInfinite();
      Complex complex5 = complex0.sqrt1z();
      complex0.sqrt1z();
      Complex.valueOf((-2122.526381836165));
      complex5.I.abs();
      complex0.multiply((-951));
      complex4.divide((-2122.526381836165));
      complex1.exp();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(3392.0, 1501.455615929);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.createComplex(20.0, 1514.62049);
      complex2.multiply(2991.9270785658);
      complex2.multiply(20.0);
      complex0.NaN.pow(complex1);
      complex0.I.abs();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      complex3.ONE.multiply(complex0);
      Complex complex4 = Complex.valueOf(0.5568217039108276, 0.0);
      complex4.I.pow(complex3);
      complex3.readResolve();
      Complex complex5 = complex0.conjugate();
      complex0.ZERO.subtract(complex5);
      complex5.getArgument();
      Complex complex6 = Complex.valueOf(1.0, 1.0);
      complex6.I.conjugate();
      complex6.ZERO.sqrt1z();
      complex0.asin();
      complex3.getField();
      complex4.createComplex(0.0, (-0.7853981633974483));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(197.169109131254);
      Complex complex1 = complex0.divide(0.0);
      complex1.NaN.pow(complex0);
      Complex complex2 = Complex.valueOf(197.169109131254);
      complex0.toString();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.ONE;
      complex2.NaN.add(complex4);
      Complex complex5 = complex2.multiply(complex0);
      complex3.I.abs();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.log();
      complex7.I.conjugate();
      complex3.asin();
      Complex complex8 = complex3.divide((-2640.932210343));
      complex8.INF.sin();
      complex8.getArgument();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-488.33205793));
      Complex complex1 = complex0.tanh();
      complex1.ZERO.sqrt1z();
      complex1.exp();
      complex1.nthRoot(2775);
      complex0.negate();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(855);
      Complex complex2 = complex1.ZERO.subtract((double) 855);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.cosh();
      complex2.isNaN();
      complex3.ZERO.log();
      Complex complex5 = complex2.ONE.cosh();
      Complex complex6 = complex2.multiply(complex3);
      complex6.ONE.getArgument();
      Complex complex7 = complex1.createComplex((-2.8390360197221716E-8), 0.0);
      Complex complex8 = complex1.add((double) 855);
      complex7.hashCode();
      Complex complex9 = complex7.conjugate();
      complex4.cos();
      Complex complex10 = complex0.subtract(complex8);
      Complex complex11 = complex10.acos();
      complex5.equals(complex11);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.divide((-1179.0639186983326));
      complex2.NaN.createComplex(20.0, 760.0924712013);
      Complex complex3 = complex0.asin();
      complex3.ZERO.sqrt();
      complex3.log();
      complex3.conjugate();
      complex1.reciprocal();
      Complex complex4 = complex2.divide(410.394731);
      complex3.cos();
      complex4.isNaN();
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = 1539.955526;
      Complex complex0 = Complex.valueOf((-3.448944157854234E-8), 1539.955526);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.add(Double.NaN);
      complex2.reciprocal();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.subtract(complex1);
      complex1.NaN.getField();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex4.INF.pow(complex5);
      complex0.hashCode();
      Complex complex7 = complex6.divide((-1919.86372902));
      Complex complex8 = complex7.I.sqrt();
      complex8.ONE.atan();
      complex7.ONE.tan();
      Complex complex9 = complex6.NaN.pow(0.0);
      complex9.NaN.sqrt();
      complex2.NaN.divide((-171.0272046));
      complex7.ZERO.divide(5.054202073556894E-211);
      complex4.sinh();
      Complex complex10 = complex6.asin();
      Complex.valueOf((-1493.966850378), 1539.955526);
      complex3.INF.conjugate();
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.pow(complex1);
      complex2.getField();
      complex1.ZERO.readResolve();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex4.subtract(complex1);
      complex5.INF.cosh();
      complex2.I.nthRoot(238);
      Complex complex6 = complex1.atan();
      complex2.INF.pow(complex1);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex1.add((-1551.29335));
      complex8.NaN.cos();
      complex4.ZERO.conjugate();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex4.log();
      complex10.NaN.hashCode();
      complex9.hashCode();
      Complex complex11 = complex3.divide(complex1);
      Object object0 = complex8.readResolve();
      complex1.equals(object0);
      complex5.createComplex((-1551.29335), (-1711.21178387461));
      complex7.multiply(complex4);
      Complex complex12 = Complex.INF;
      complex11.add(complex12);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = Complex.valueOf(1.0, 1.14426851272583);
      complex0.ZERO.add(complex2);
      complex1.ZERO.toString();
      complex2.I.multiply(complex0);
      complex0.getReal();
      Complex.valueOf(1.14426851272583);
      Complex complex4 = complex1.cosh();
      complex2.getReal();
      complex1.log();
      complex3.createComplex(0.0, 1.0);
      Complex complex5 = Complex.valueOf((-23.04));
      complex5.I.hashCode();
      complex4.readResolve();
      complex4.acos();
      complex2.multiply(1.0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex1.NaN.negate();
      complex1.pow(complex0);
      Complex complex6 = complex5.ONE.sqrt1z();
      complex6.I.divide(2089.3);
      Complex complex7 = Complex.valueOf((-1536.3), 0.0);
      Complex complex8 = new Complex((-865.080105), (-1536.3));
      complex8.NaN.getField();
      complex0.asin();
      complex8.ZERO.getField();
      complex1.NaN.getField();
      Complex complex9 = complex8.NaN.subtract(0.0);
      Complex complex10 = complex9.INF.acos();
      complex8.NaN.readResolve();
      Complex complex11 = complex5.multiply(complex8);
      complex10.divide(0.0);
      complex11.ONE.toString();
      complex11.nthRoot(1405);
      complex2.negate();
      complex7.acos();
      complex10.asin();
      complex4.readResolve();
      complex4.log();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      complex1.ONE.sqrt();
      Complex complex2 = complex1.I.multiply(0.4734157919883728);
      complex2.ZERO.sinh();
      Complex complex3 = complex2.tan();
      Complex.valueOf(24.63294256480807);
      Complex complex4 = complex0.cosh();
      complex2.I.abs();
      Complex complex5 = complex4.INF.tan();
      complex5.ZERO.getArgument();
      complex0.toString();
      complex2.readResolve();
      Complex complex6 = complex2.pow(complex0);
      complex4.ONE.getArgument();
      complex6.NaN.abs();
      complex4.cosh();
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(2806.182761588541);
      complex1.I.divide(2114.2223612629);
      Complex.valueOf(3095.6662718);
      Complex.valueOf(0.0, 2806.182761588541);
      complex0.nthRoot(839);
      Complex complex2 = complex0.conjugate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.I.pow(1940.0);
      complex2.ZERO.subtract(0.0);
      complex0.getField();
      Complex complex3 = complex0.NaN.tan();
      complex0.getReal();
      Complex complex4 = complex0.sinh();
      complex4.I.multiply(1940.0);
      complex4.ONE.atan();
      complex3.ZERO.atan();
      complex1.divide(0.0);
      complex4.multiply(complex3);
      Complex complex5 = Complex.ONE;
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex1.ONE.divide(complex0);
      Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex0.negate();
      complex2.NaN.cosh();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(3.7298611779671127E-124);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.ONE.multiply(3.7298611779671127E-124);
      complex5.ONE.subtract((-782.0));
      Complex complex7 = complex1.NaN.negate();
      complex4.readResolve();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex2.sqrt1z();
      complex9.INF.cosh();
      Complex complex10 = complex8.add(complex3);
      complex10.getReal();
      complex1.atan();
      Complex complex11 = complex4.reciprocal();
      complex2.sinh();
      complex1.multiply(complex10);
      complex7.getField();
      complex11.pow(0.0);
      complex6.pow(1350.54052);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.createComplex(2126.58086, 1087.660982);
      complex0.NaN.hashCode();
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.acos();
      try { 
        complex1.INF.nthRoot((-855));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -855
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(834.714, 1.274413296252691E81);
      Complex complex1 = complex0.multiply(2194.1849223);
      complex1.add(834.714);
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.ZERO.asin();
      Complex complex3 = complex1.I.asin();
      complex3.subtract(834.714);
      Complex complex4 = complex1.createComplex(1.274413296252691E81, 834.714);
      Complex complex5 = complex4.NaN.add(complex0);
      complex5.NaN.hashCode();
      complex5.multiply(0);
      complex5.atan();
      complex4.hashCode();
      complex4.exp();
      Complex complex6 = complex1.sinh();
      complex6.abs();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.abs();
      complex0.INF.getField();
      Complex complex1 = complex0.INF.add(339.37758);
      Complex complex2 = complex0.add((-1.1603891006723397E-7));
      complex2.pow((-1.1603891006723397E-7));
      Complex complex3 = complex0.pow((-1.1603891006723397E-7));
      complex1.NaN.abs();
      Complex complex4 = Complex.valueOf(20.0, Double.NaN);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ZERO.divide(0.0);
      complex6.ZERO.divide(complex5);
      Complex complex7 = complex5.sin();
      complex5.tan();
      complex7.NaN.readResolve();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.I.atan();
      complex3.toString();
      complex2.multiply(4433.20437);
      Complex complex10 = complex7.add(complex1);
      complex9.ONE.getArgument();
      Complex complex11 = complex6.add(complex10);
      complex2.toString();
      complex9.divide(339.37758);
      complex11.exp();
      Complex complex12 = complex6.tanh();
      complex12.multiply(Double.POSITIVE_INFINITY);
      complex6.getReal();
      complex2.createComplex((-1093.1772), 0.0);
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ZERO.add(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.I.subtract(complex5);
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex4.INF.atan();
      complex8.I.subtract(complex3);
      Complex complex9 = complex0.ZERO.subtract(complex3);
      complex9.I.toString();
      Complex complex10 = complex9.INF.conjugate();
      complex10.toString();
      Complex complex11 = complex3.subtract(Double.NaN);
      complex5.NaN.createComplex(1290.47575020905, (-908.3484416));
      Complex complex12 = complex11.I.subtract(complex1);
      complex11.getImaginary();
      complex11.reciprocal();
      complex12.sin();
      complex7.hashCode();
      Complex.valueOf(1.0);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1480.008140043377));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.ONE.divide(complex1);
      Complex.valueOf(0.0, (-1480.008140043377));
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex0.INF.acos();
      complex0.getReal();
      Complex complex5 = complex0.tan();
      complex3.atan();
      complex5.subtract(complex4);
      complex2.pow((-1480.008140043377));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.INF.createComplex(0.0, (-2612.7812597641));
      Complex complex3 = complex0.ZERO.multiply(complex1);
      complex3.NaN.sinh();
      Complex complex4 = complex3.ONE.sin();
      complex4.ZERO.multiply((-2612.7812597641));
      complex0.getField();
      complex0.ONE.add(complex4);
      complex1.NaN.divide(complex0);
      complex1.getField();
      Complex complex5 = Complex.valueOf(200.8063005255);
      Complex complex6 = complex5.ONE.divide(complex0);
      complex6.asin();
      Complex complex7 = complex6.NaN.divide(complex1);
      complex7.INF.getField();
      Complex complex8 = complex1.divide((-4.722612904888278E232));
      complex0.subtract(1.058213771597129E-7);
      Complex complex9 = complex2.multiply((-3298.508802));
      complex9.sqrt1z();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1569.0, 1569.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.cosh();
      complex3.ZERO.negate();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex2.subtract(complex0);
      complex5.I.divide(complex3);
      Complex complex6 = complex1.I.sin();
      complex6.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex2.createComplex(0.0, (-1035.0314270098668));
      complex1.subtract(1569.0);
      complex1.isInfinite();
      complex0.readResolve();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.ZERO.hashCode();
      complex1.I.acos();
      complex1.ONE.abs();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.cosh();
      complex4.I.add(1.0);
      Complex.valueOf(1.0);
      Complex complex5 = complex0.I.reciprocal();
      Complex.valueOf(1.0, (-311.342984881566));
      Complex complex6 = complex0.atan();
      complex3.abs();
      complex0.nthRoot(1);
      complex5.isInfinite();
      complex2.pow(0.0);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-769.0714), (-769.0714));
      Complex complex1 = Complex.ZERO;
      complex1.I.add(complex0);
      complex0.equals(complex1);
      Complex complex2 = complex1.log();
      complex2.ONE.sqrt1z();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.atan();
      Complex.valueOf((-769.0714), 1.4262712796792241E-9);
      complex2.isNaN();
      complex4.getImaginary();
      complex3.pow((-769.0714));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sin();
      complex1.I.exp();
      Complex complex2 = complex0.ONE.multiply(1);
      complex2.ONE.pow(complex0);
      complex0.hashCode();
      complex2.I.acos();
      complex1.I.add(complex0);
      complex2.ZERO.abs();
      try { 
        complex1.nthRoot((-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -482
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.ZERO.divide(6.054601485195952E-39);
      complex0.isNaN();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      complex0.abs();
      Complex complex1 = complex0.cos();
      complex0.getReal();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2626.0388534777);
      Complex complex1 = complex0.cos();
      complex1.ONE.getField();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.INF.conjugate();
      complex3.getField();
      Complex complex4 = complex2.INF.add(2626.0388534777);
      complex2.ZERO.sin();
      complex1.readResolve();
      Complex complex5 = complex1.ONE.sqrt();
      Complex complex6 = complex0.I.sinh();
      Complex complex7 = complex6.ZERO.conjugate();
      complex1.nthRoot(1);
      Complex complex8 = complex1.sqrt1z();
      complex8.ZERO.toString();
      complex2.I.divide(complex8);
      complex0.nthRoot(1);
      complex0.sin();
      Complex complex9 = complex4.multiply(complex2);
      Complex complex10 = complex9.NaN.tan();
      complex10.INF.asin();
      complex5.isInfinite();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-920));
      Complex complex3 = complex0.I.subtract(0.0);
      Complex complex4 = complex3.ZERO.cosh();
      complex4.NaN.tan();
      Complex complex5 = complex1.tanh();
      Complex complex6 = new Complex((-5.448044533034374E-10), (-499.254228838559));
      complex1.NaN.add(complex6);
      Complex complex7 = complex2.add(0.0);
      complex7.ZERO.multiply((-570.204464089623));
      complex3.sinh();
      Complex complex8 = complex5.acos();
      complex8.NaN.multiply((-920));
      complex3.sqrt1z();
      complex2.isInfinite();
      Complex complex9 = complex6.atan();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1576.0), 1.3695101737976074);
      complex0.I.toString();
      Complex complex1 = complex0.INF.log();
      complex1.NaN.pow(1.3695101737976074);
      complex1.INF.abs();
      Complex complex2 = complex0.multiply(1.3695101737976074);
      Complex complex3 = complex2.sqrt();
      complex2.NaN.exp();
      complex2.tan();
      complex2.INF.getField();
      complex0.createComplex(3.0099905634916516E236, 628.7191);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.I.cos();
      complex6.ZERO.subtract(complex3);
      Complex complex7 = Complex.valueOf(Double.NaN, 3.0099905634916516E236);
      complex7.ZERO.multiply(Double.NaN);
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex.valueOf(1.0);
      complex2.sinh();
      Complex complex3 = complex1.subtract(1.266589879989624);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.multiply(1);
      complex0.readResolve();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      complex1.NaN.conjugate();
      complex3.atan();
      complex3.getArgument();
      complex3.equals(complex1);
      Complex complex4 = Complex.INF;
      complex0.I.pow(complex4);
      complex3.add(0.0);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.cos();
      complex0.INF.nthRoot(1583);
      Complex complex1 = complex0.sinh();
      complex1.asin();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-211.975829));
      Complex complex4 = complex3.I.sqrt();
      complex3.tanh();
      complex4.I.createComplex((-946.4), Double.NaN);
      complex1.I.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.ZERO.sqrt();
      Complex complex5 = complex1.multiply(0);
      complex1.toString();
      complex5.log();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.atan();
      Complex.valueOf(1233.010261762613);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.NaN.multiply(complex2);
      complex5.INF.add(0.0);
      complex0.NaN.add(complex1);
      Complex complex6 = complex3.add(20.0);
      complex6.exp();
      complex3.isNaN();
      complex6.sqrt1z();
      complex2.sin();
      complex4.pow(1233.010261762613);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.sin();
      complex0.INF.sinh();
      Complex complex3 = complex0.exp();
      complex3.I.toString();
      complex2.hashCode();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      complex1.INF.abs();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex0.subtract((-4129.3));
      Complex complex5 = complex0.log();
      complex5.getArgument();
      Complex complex6 = complex4.multiply((-4129.3));
      Complex complex7 = complex4.multiply(complex3);
      complex7.INF.negate();
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      complex6.INF.getField();
      Complex complex8 = complex6.ONE.divide((-4129.3));
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex5.multiply(2407);
      assertTrue(complex9.equals((Object)complex4));
      
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.NaN.cos();
      Complex complex12 = complex10.I.add(complex0);
      complex12.INF.negate();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex13.asin();
      complex13.sin();
      Complex complex15 = complex14.sin();
      Complex complex16 = Complex.valueOf((-4129.3), (double) 2407);
      assertEquals(2407.0, complex16.getImaginary(), 0.01);
      assertEquals((-4129.3), complex16.getReal(), 0.01);
      
      Complex complex17 = complex15.ONE.add((-4129.3));
      assertFalse(complex17.equals((Object)complex8));
      
      String string0 = complex15.toString();
      assertEquals("(6.123233995736765E-17, 0.9999999999999997)", string0);
      
      complex15.getField();
      Complex complex18 = complex2.atan();
      assertEquals((-1.5707963267948966), complex18.getReal(), 0.01);
      
      Complex complex19 = complex12.sqrt();
      assertTrue(complex19.equals((Object)complex11));
      assertEquals((-1.233403117511217), complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(547.2, (-1.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex2.NaN.multiply(0.0);
      complex2.getArgument();
      complex0.INF.nthRoot(1);
      Complex.valueOf((double) 1);
      Complex complex6 = complex3.divide(complex2);
      assertEquals((-546.2), complex6.getReal(), 0.01);
      
      Complex complex7 = complex1.sinh();
      complex5.atan();
      Complex.valueOf((-364.0), (-1.0));
      Complex complex8 = complex7.ONE.multiply(3169);
      Complex complex9 = complex8.ONE.multiply(complex5);
      assertEquals(3169.0, complex8.getReal(), 0.01);
      
      Complex complex10 = complex7.INF.multiply(1);
      boolean boolean0 = complex7.isInfinite();
      assertFalse(boolean0);
      
      complex1.cosh();
      Complex complex11 = Complex.valueOf((-1.0), 0.0);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex10.divide((double) 3169);
      assertTrue(complex12.isInfinite());
      
      Complex complex13 = complex4.cosh();
      assertEquals((-2.181416804996904E234), complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex5.subtract((-2588.93));
      assertSame(complex14, complex9);
      assertTrue(complex2.equals((Object)complex11));
      
      Complex complex15 = complex7.multiply(547.2);
      assertEquals((-623.1097796666529), complex15.getImaginary(), 0.01);
      assertEquals(274.48668172115225, complex15.getReal(), 0.01);
      
      complex10.createComplex(1.0, 3169);
      assertTrue(complex10.equals((Object)complex12));
  }
}
