/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:59:57 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((double) 1289, Double.POSITIVE_INFINITY);
      complex1.multiply(1289);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-592.124790864251), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex2.sin();
      Complex complex3 = complex2.multiply(1080.246042803889);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex5.sqrt1z();
      complex1.sinh();
      complex7.divide(complex3);
      complex7.acos();
      complex6.multiply((-3.881598887298574E-9));
      complex0.tanh();
      Complex complex8 = complex3.conjugate();
      complex8.nthRoot(1656);
      complex4.multiply(686);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.atan();
      complex4.INF.asin();
      Complex complex6 = complex3.atan();
      complex6.NaN.tanh();
      complex1.ONE.sinh();
      complex0.isInfinite();
      Object object0 = new Object();
      complex1.equals(object0);
      complex5.isNaN();
      complex6.pow(complex2);
      complex5.asin();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.I.nthRoot(99);
      complex0.sinh();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      Object object0 = complex1.readResolve();
      ((Complex) object0).I.sinh();
      Complex complex3 = Complex.valueOf((-20.0));
      complex2.I.getArgument();
      complex3.cos();
      Complex complex4 = complex2.multiply(100);
      Complex complex5 = complex4.NaN.add(complex3);
      Complex complex6 = complex1.sin();
      complex2.ZERO.subtract((-1567.3221160656649));
      complex6.I.add(27.306944357139606);
      Complex complex7 = complex2.multiply(1.160062863223139E-4);
      complex1.NaN.nthRoot(100);
      complex7.NaN.hashCode();
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex8.ONE.sqrt1z();
      complex8.subtract(complex0);
      Complex complex10 = complex1.reciprocal();
      complex10.tan();
      complex7.tan();
      complex5.INF.divide(complex9);
      Complex complex11 = complex5.sin();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(5.831349876080173E285, 2105.595436871038);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(21.029328768, (-418.28211919204));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tan();
      complex1.isNaN();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.cos();
      complex4.acos();
      Complex complex5 = new Complex(1680.66044149, 0.0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.0);
      complex1.log();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex((-20.0), (-20.0));
      Complex complex6 = new Complex((-20.0), (-20.0));
      Complex complex7 = Complex.NaN;
      complex3.getReal();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2104.378348736639, 2104.378348736639);
      Complex complex1 = complex0.multiply((-8856816.469263088));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.sqrt1z();
      complex1.acos();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2104.378111136766, 938.077687);
      Complex complex1 = complex0.tan();
      complex0.nthRoot(1);
      Complex complex2 = complex1.pow(938.077687);
      Complex complex3 = complex0.NaN.subtract(938.077687);
      Complex complex4 = complex3.NaN.sinh();
      complex4.ONE.toString();
      Complex complex5 = complex2.pow(938.077687);
      complex5.INF.conjugate();
      Complex complex6 = Complex.valueOf(0.5127768516540527, 8.751606149833694E244);
      Complex complex7 = complex5.exp();
      complex2.pow(complex3);
      complex6.sqrt1z();
      complex7.acos();
      complex4.tanh();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-3646.0));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.INF;
      complex3.NaN.reciprocal();
      complex2.subtract((-3646.0));
      Complex complex4 = Complex.I;
      complex0.createComplex(290.883042, 2.344210229239252E-4);
      Complex complex5 = Complex.valueOf((-1455.233575), 2.344210229239252E-4);
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.ONE;
      complex8.tan();
      Complex complex9 = new Complex(4599.79, Double.NaN);
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.ZERO;
      complex5.sqrt();
      complex6.getReal();
      complex11.tanh();
      Complex.valueOf(290.883042, (-3646.0));
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(1393, 4040.3338664043);
      complex0.log();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex0.subtract(1151.69987601836);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.600448597385527E-8, 2.600448597385527E-8);
      Complex complex1 = new Complex(4428407.234631544, 20.0);
      Complex complex2 = complex1.multiply(4.800501435803201E-220);
      Complex complex3 = Complex.ZERO;
      complex0.abs();
      Complex complex4 = Complex.I;
      complex1.multiply(complex4);
      complex1.sqrt1z();
      Complex complex5 = Complex.INF;
      complex5.asin();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.ZERO;
      complex7.acos();
      complex0.tan();
      complex2.isNaN();
      Complex complex8 = Complex.I;
      complex2.cos();
      complex1.acos();
      Complex complex9 = new Complex(20.0, (-1596.22895746));
      complex3.reciprocal();
      complex8.tanh();
      complex8.sqrt1z();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2442.668036976867, Double.POSITIVE_INFINITY);
      complex0.I.pow(complex1);
      complex0.ZERO.pow(3034.2);
      complex0.reciprocal();
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-4.011320021817099E249), 867.6466241451234);
      complex1.INF.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      complex1.NaN.readResolve();
      complex2.ONE.getArgument();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.INF.pow(complex4);
      Complex complex6 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.ZERO.log();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex2.atan();
      complex8.reciprocal();
      Complex complex9 = complex0.atan();
      complex9.ONE.readResolve();
      complex9.I.nthRoot(1018);
      complex6.divide((-4.011320021817099E249));
      complex3.pow(complex4);
      complex7.cos();
      complex3.divide(867.6466241451234);
      Complex complex10 = complex5.exp();
      complex6.acos();
      Complex complex11 = complex1.add(0.0);
      complex11.I.conjugate();
      complex10.getField();
      complex8.cosh();
      Complex.valueOf(77.039);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.reciprocal();
      Complex complex2 = new Complex((-753.5799445315807));
      complex2.sqrt1z();
      Complex complex3 = complex1.log();
      complex2.acos();
      Complex complex4 = complex3.log();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex3.tan();
      complex4.readResolve();
      complex1.add(169.46836);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2103.602804232);
      Complex complex1 = complex0.INF.pow(2103.602804232);
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(4207.20537077653, 20.0);
      Complex complex4 = complex3.divide(20.0);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex0.add(complex5);
      complex4.sqrt1z();
      Complex complex7 = complex3.log();
      complex2.log();
      Complex complex8 = complex1.divide(2103.602804232);
      complex3.tan();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.divide(0.1666666505023083);
      complex10.I.atan();
      complex5.sqrt();
      complex7.reciprocal();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(865.9874283473906, 865.9874283473906);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-1260.7879));
      Complex complex3 = complex2.ZERO.divide((-1260.7879));
      complex3.INF.multiply(734);
      Complex complex4 = complex2.ZERO.tanh();
      complex4.INF.tanh();
      Complex complex5 = complex1.I.add(865.9874283473906);
      Complex complex6 = complex1.INF.log();
      complex5.INF.nthRoot(2144295578);
      Complex complex7 = complex0.pow(865.9874283473906);
      complex1.ONE.hashCode();
      Complex complex8 = complex6.divide(complex5);
      complex8.INF.multiply(complex1);
      Complex complex9 = complex8.subtract(complex7);
      complex6.NaN.getArgument();
      complex8.INF.multiply((-137));
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex9.ONE.multiply(complex10);
      complex5.ZERO.divide(865.9874283473906);
      complex5.toString();
      complex0.sin();
      Complex complex12 = complex11.createComplex((-137), 865.9874283473906);
      Complex complex13 = complex12.ONE.subtract((-97.733067564));
      complex0.multiply(1373.0694478971);
      Complex.valueOf((-97.733067564));
      Complex complex14 = complex5.conjugate();
      complex14.ONE.log();
      Complex complex15 = complex14.ZERO.multiply(complex13);
      complex15.cosh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-1890.252), (-1890.252));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tanh();
      complex1.multiply(Double.NaN);
      Complex complex3 = complex0.sinh();
      complex3.divide(672.6);
      Complex complex4 = Complex.valueOf(672.6, 672.6);
      complex4.tanh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(2441.9127200118583, 2441.9127200118583);
      Complex complex7 = complex5.pow(complex6);
      complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-643.00131714336), (-481.91162));
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex0.divide((-643.00131714336));
      Complex complex3 = complex0.tan();
      complex1.abs();
      Complex complex4 = Complex.ONE;
      complex2.divide((-0.0010375357585985512));
      complex1.asin();
      complex1.readResolve();
      complex3.getReal();
      try { 
        complex2.nthRoot((-1402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,402
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex0.tanh();
      complex3.sqrt1z();
      int int0 = 2147017087;
      // Undeclared exception!
      complex1.ZERO.nthRoot(2147017087);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-643.00131714336), (-481.91162));
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf((-481.91162), (-622.621379884));
      complex0.pow(complex2);
      Complex complex3 = Complex.valueOf((-1948.9));
      complex3.multiply(733);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.reciprocal();
      complex6.divide((-3210.6319944));
      Complex complex7 = complex4.asin();
      complex1.multiply(2146443285);
      complex7.abs();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = new Complex((-1948.9));
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.6239101886749268, 2277.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = Complex.INF;
      complex2.subtract((-4601.8));
      complex4.createComplex((-7.019891063126053E-9), 1062.9);
      Complex complex6 = Complex.NaN;
      complex5.nthRoot(2940);
      Complex complex7 = Complex.ZERO;
      complex3.sqrt();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2103.602804232);
      Complex complex1 = complex0.INF.pow(2103.602804232);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.ONE.reciprocal();
      complex2.divide(complex3);
      Complex complex5 = complex1.sqrt1z();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex3.conjugate();
      complex2.add(1985.5526630444128);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.multiply(complex5);
      complex7.nthRoot(2940);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.ZERO;
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1.1765332726757802E-8);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(334.86323, 1.1765332726757802E-8);
      Complex complex4 = complex3.createComplex(1.1765332726757802E-8, 1.1765332726757802E-8);
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.NaN;
      complex6.conjugate();
      complex1.sqrt();
      Complex complex7 = new Complex((-1.0), (-739.54));
      complex7.createComplex(334.86323, 251.6);
      Complex complex8 = complex4.reciprocal();
      complex0.sin();
      complex8.multiply(complex2);
      complex6.add((-1.0));
      complex3.getReal();
      Complex complex9 = new Complex(1.1765332726757802E-8, (-975.35430795407));
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.INF;
      complex7.add(complex11);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3166970112139726E161);
      Complex complex1 = Complex.valueOf(1.3166970112139726E161);
      Complex complex2 = complex0.sinh();
      complex2.atan();
      Complex complex3 = complex2.add((-1.8196842273916379E241));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.divide(complex1);
      complex2.readResolve();
      complex4.ZERO.acos();
      Complex complex6 = complex4.sinh();
      complex6.pow(complex5);
      Complex complex7 = complex5.multiply(complex3);
      complex7.I.pow(complex2);
      complex6.I.tan();
      complex7.cosh();
      complex5.I.reciprocal();
      complex5.sqrt1z();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.INF.divide(1153.281467362);
      complex9.ZERO.createComplex((-651.206), 1153.281467362);
      Complex complex10 = complex1.multiply(complex6);
      complex10.I.divide(complex1);
      complex6.add(complex4);
      Complex complex11 = complex3.multiply(2146937826);
      complex0.asin();
      complex6.add(complex11);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(992.7763886537192, 1832.663);
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      complex1.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = new Complex(1548.522007);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.divide(Double.POSITIVE_INFINITY);
      complex6.conjugate();
      complex5.add(3956.0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.multiply(complex3);
      Complex.valueOf(3956.0);
      complex5.add(complex8);
      Complex complex9 = Complex.valueOf((-20.0));
      complex1.isInfinite();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      complex9.getReal();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.subtract(complex2);
      complex2.toString();
      complex2.toString();
      Complex complex4 = new Complex((-2258.14381105982), 2103.602804232);
      complex4.getArgument();
      complex0.tanh();
      Complex complex5 = complex4.exp();
      complex5.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2103.602804232);
      Complex complex1 = complex0.INF.pow(2103.602804232);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ONE.tanh();
      complex0.ONE.reciprocal();
      complex2.divide(complex3);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex2.createComplex(5.289988151341401E130, (-951.1974));
      Complex.valueOf(Double.NaN, 1.7911398904871E84);
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex5.multiply((-355));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex4.add(complex7);
      Complex complex10 = Complex.valueOf((-1415.4284049855405), (-1.0));
      Complex complex11 = complex10.reciprocal();
      complex3.divide((double) 733);
      Complex complex12 = complex6.asin();
      Complex complex13 = complex1.multiply((-355));
      complex12.abs();
      Object object0 = new Object();
      Object object1 = complex9.readResolve();
      complex11.equals(object1);
      Complex complex14 = Complex.I;
      complex14.getArgument();
      complex13.tanh();
      complex9.add(complex6);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(819.1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex4.log();
      complex4.divide((-643.00131714336));
      complex2.tan();
      Complex complex8 = Complex.ONE;
      complex6.readResolve();
      complex7.cos();
      Complex.valueOf((-643.00131714336), 846.447544);
      complex5.getField();
      Complex complex9 = Complex.INF;
      try { 
        complex9.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.divide((-643.00131714336));
      Complex complex4 = complex3.divide(complex1);
      complex3.add(complex0);
      complex3.sqrt1z();
      complex0.log();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex3.log();
      complex6.divide(3375.174623208066);
      Complex complex7 = complex2.tan();
      complex1.asin();
      complex5.readResolve();
      complex3.getReal();
      complex6.cos();
      Complex complex8 = Complex.valueOf(1453.119330993, (-1779.528083));
      complex8.getField();
      Complex complex9 = Complex.NaN;
      complex9.divide((-0.9640275800758169));
      complex7.multiply(complex4);
      Complex.valueOf((-3409.6));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(992.7763886537192, 1832.663);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(992.7763886537192, 992.7763886537192);
      complex2.negate();
      Complex complex3 = complex1.divide(2063.16920997);
      Complex.valueOf(2.1478649410390003E-162);
      Complex complex4 = new Complex(6.283185307179586);
      complex4.subtract(complex3);
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ZERO;
      complex0.exp();
      complex0.conjugate();
      Complex complex8 = complex7.createComplex(2851.783458688933, 302.98031241114);
      complex6.sqrt();
      Complex complex9 = new Complex((-1.0), 20.0);
      complex2.createComplex(3540.51978596146, 20.0);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex2.sin();
      complex5.multiply(complex8);
      complex6.add(3578.3);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.multiply(539);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.reciprocal();
      complex0.divide(1505.643426890096);
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf(0.6907027959823608);
      complex2.pow(1505.643426890096);
      complex7.abs();
      Object object0 = complex5.readResolve();
      complex6.equals(object0);
      complex2.log();
      complex2.getReal();
      complex5.add(complex3);
      complex4.isInfinite();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-4601.8), 232.03817);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4601.8));
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.ZERO.subtract(232.03817);
      complex2.ONE.createComplex((-4601.8), 232.03817);
      complex2.I.pow(complex5);
      complex0.asin();
      Complex complex6 = new Complex(232.03817, (-4601.8));
      complex6.hashCode();
      Complex complex7 = new Complex((-4601.8), (-4601.8));
      complex7.sin();
      complex1.getReal();
      complex3.pow(0.7615941559557649);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(992.7763886537192, 1832.663);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(1832.663);
      complex0.ONE.divide(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex3.log();
      complex0.acos();
      Complex complex6 = complex3.log();
      complex6.ZERO.asin();
      complex1.divide(1173.98934829);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.ONE.asin();
      complex8.divide(complex4);
      complex5.readResolve();
      complex0.getReal();
      complex1.ONE.cos();
      Complex.valueOf((-1474.68974), Double.POSITIVE_INFINITY);
      complex6.getField();
      complex7.divide(5184729.0);
      complex7.multiply(complex2);
      Complex.valueOf(992.7763886537192);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.6239101886749268, 2277.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(2277.0);
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.subtract((-4601.8));
      complex4.createComplex((-7.019891063126053E-9), 1062.9);
      Complex complex7 = Complex.valueOf((-4601.8), (-4601.8));
      Complex complex8 = complex7.pow(complex4);
      Complex complex9 = complex5.multiply(733);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex0.add(complex6);
      complex0.reciprocal();
      Complex complex12 = complex11.divide(4.8469121929875096E-4);
      Complex complex13 = complex12.asin();
      Complex complex14 = complex10.multiply(2146443285);
      complex4.abs();
      Object object0 = new Object();
      complex12.equals(object0);
      Complex complex15 = complex0.log();
      complex15.INF.atan();
      complex9.getReal();
      complex8.add(complex15);
      complex13.isInfinite();
      complex0.getField();
      complex14.abs();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(232.03817, 232.03817);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(602.1070235042747);
      complex2.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.subtract(602.1070235042747);
      Complex complex5 = complex2.createComplex(8.469452958963579E278, 602.1070235042747);
      complex5.pow(complex3);
      Complex complex6 = complex3.asin();
      Complex complex7 = complex0.multiply(733);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.add(complex0);
      Complex complex10 = complex4.reciprocal();
      complex0.divide((double) 733);
      complex2.asin();
      complex7.multiply(733);
      complex4.pow(602.1070235042747);
      complex9.abs();
      Complex complex11 = Complex.valueOf((-1667.662));
      Object object0 = new Object();
      complex11.equals(object0);
      complex6.log();
      complex1.getReal();
      complex11.add(complex1);
      complex10.isInfinite();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-1779.528083), (-643.00131714336));
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.divide(2063.16920997);
      Complex.valueOf(1.0);
      complex3.subtract(complex2);
      complex0.createComplex(0.16359257698059082, Double.NaN);
      Complex complex5 = Complex.ZERO;
      complex5.exp();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex0.createComplex((-739.54), 2851.783458688933);
      complex4.sqrt();
      Complex complex8 = new Complex(9.38085478424E-4, (-1.0));
      complex8.createComplex(9.38085478424E-4, (-1.0));
      complex4.reciprocal();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex0.multiply(complex7);
      complex10.NaN.add((-739.54));
      Complex.valueOf((-1341.0569907442305), 1.86124E-8);
      complex9.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      complex1.sinh();
      Complex complex2 = complex1.log();
      complex2.getReal();
      Complex complex3 = Complex.I;
      complex0.add(complex3);
      complex2.isInfinite();
      complex0.getField();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-643.00131714336), (-481.91162));
      Complex complex1 = Complex.INF;
      Complex complex2 = (Complex)complex1.readResolve();
      complex0.equals(complex1);
      complex2.getReal();
      complex1.getArgument();
      complex2.equals(complex1);
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex2.abs();
      Complex complex3 = complex0.cos();
      complex3.cos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.conjugate();
      complex5.readResolve();
      complex4.log();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(992.7763886537192, (-1.08247638308967E-4));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(1674.5013133903);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex1.sqrt1z();
      complex1.log();
      Complex complex6 = complex1.acos();
      complex6.log();
      complex5.divide(1832.663);
      complex4.tan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.asin();
      complex3.readResolve();
      complex4.getReal();
      complex8.cos();
      Complex.valueOf(1832.663, (-1030.5242142));
      complex1.getField();
      Complex complex9 = complex2.divide(992.7769858464428);
      Complex complex10 = new Complex(992.7763886537192);
      complex9.multiply(complex10);
      Complex.valueOf((-2519.0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      complex1.ZERO.readResolve();
      complex0.nthRoot(542);
      Complex complex2 = Complex.valueOf((double) 542, (-447.06977));
      complex2.INF.abs();
      complex0.getImaginary();
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = Complex.valueOf(2240.9327069853);
      complex4.INF.sqrt();
      complex4.getField();
      complex5.add(2912.6000384300733);
      Complex complex7 = complex2.conjugate();
      complex4.divide(complex6);
      Complex complex8 = complex5.NaN.sqrt1z();
      complex8.divide(Double.POSITIVE_INFINITY);
      complex1.conjugate();
      Complex complex9 = complex5.add(Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.multiply(complex7);
      complex10.I.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex11.ZERO.add(complex1);
      Complex.valueOf(0.0);
      complex1.isInfinite();
      Complex complex13 = complex9.subtract(complex6);
      Complex complex14 = Complex.ONE;
      complex13.multiply(complex14);
      Complex complex15 = complex13.acos();
      complex15.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-4.2353126480000004E7));
      Complex complex1 = complex0.pow((-4345.0));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex2.cos();
      complex2.ZERO.asin();
      Complex complex6 = complex1.I.sin();
      Complex complex7 = complex1.sinh();
      complex1.divide(complex5);
      Complex complex8 = complex7.createComplex(3.8430073345807614E-5, 927.9);
      complex8.I.createComplex(1656.079, 3.8430073345807614E-5);
      Complex complex9 = complex8.asin();
      Complex complex10 = Complex.valueOf((-1674.5013133903));
      complex6.divide(927.9);
      complex7.atan();
      complex10.log();
      Complex complex11 = complex6.sqrt1z();
      complex10.tanh();
      Complex complex12 = complex11.sqrt1z();
      complex3.sqrt();
      complex11.sqrt1z();
      complex4.divide((-2103.602804232));
      complex12.INF.multiply(complex9);
      Complex.valueOf(588.4456968, 1656.079);
      Object object0 = complex12.readResolve();
      complex7.equals(object0);
      Complex.valueOf(588.4456968);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Object object0 = complex1.INF.readResolve();
      complex0.NaN.negate();
      complex0.divide(0.4132472276687622);
      Complex complex2 = Complex.valueOf(7.3370297995122135E-152);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.conjugate();
      complex4.ZERO.createComplex(0.4132472276687622, 0.4132472276687622);
      complex5.sqrt();
      object0.toString();
      complex5.getArgument();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = (Complex)complex1.INF.readResolve();
      complex0.NaN.negate();
      Complex complex3 = complex0.divide(0.4132472276687622);
      Complex.valueOf(0.4132472276687622);
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex0.exp();
      complex4.conjugate();
      complex2.createComplex(1497.330250902577, 3.2021376921211934E-155);
      complex5.sqrt();
      complex5.createComplex(1.0, 1832.663);
      Complex complex6 = complex4.reciprocal();
      complex0.sin();
      complex5.multiply(complex3);
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-4601.8), (-4601.8));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4601.8));
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex1.ZERO.pow(complex3);
      Complex complex4 = complex0.ZERO.subtract((-4601.8));
      complex2.ONE.createComplex((-4601.8), (-4601.8));
      complex2.I.pow(complex4);
      complex0.asin();
      Complex complex5 = complex3.add((-4601.8));
      complex5.abs();
      complex2.negate();
      complex3.hashCode();
      Complex complex6 = Complex.ONE;
      complex6.sinh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0), (-1.0));
      Complex complex2 = Complex.INF;
      complex2.divide(complex0);
      complex2.abs();
      Complex complex3 = Complex.ZERO;
      complex3.subtract(106.06455);
      int int0 = 671;
      int int1 = (-1249);
      try { 
        complex1.nthRoot((-1249));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,249
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      complex1.abs();
      complex1.log();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.createComplex(689.912474507, 0.0);
      complex3.tan();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.valueOf(2135586.501412, 2373049.7137006796);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.valueOf(233.857027958012, (-4546.6764751203));
      Complex complex9 = complex7.multiply(2845);
      complex8.subtract(2.581312717296228E20);
      complex7.asin();
      complex5.hashCode();
      complex2.exp();
      Complex.valueOf(1.0, (-3.046577356838847E-10));
      Complex complex10 = complex4.sinh();
      complex7.getArgument();
      complex7.getArgument();
      complex10.getArgument();
      complex10.getArgument();
      Complex complex11 = Complex.ONE;
      complex5.multiply(complex4);
      complex9.sin();
      Complex.valueOf(993.7763886537192);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.abs();
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.sinh();
      Complex complex5 = Complex.valueOf(3513.789521348023, Double.NaN);
      Complex complex6 = complex5.divide(283.586);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex2.multiply(complex8);
      Complex complex10 = complex6.pow(complex9);
      complex5.multiply(complex7);
      complex3.exp();
      complex10.getReal();
      complex2.getArgument();
      complex8.equals(complex6);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.subtract((-485.894592254048));
      complex1.abs();
      complex7.cos();
      Complex complex13 = complex6.cos();
      complex4.cosh();
      complex9.conjugate();
      complex12.readResolve();
      complex11.log();
      complex12.multiply(complex13);
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(992.7763886537192, 1832.663);
      Complex complex1 = Complex.ONE;
      complex0.INF.divide(1832.663);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex2.ONE.pow(complex3);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.ONE.sqrt1z();
      Complex complex6 = complex4.log();
      complex0.acos();
      complex4.log();
      complex1.divide(1173.98934829);
      Complex complex7 = complex6.tan();
      complex7.ONE.asin();
      complex6.readResolve();
      complex0.getReal();
      complex1.ONE.cos();
      Complex.valueOf(0.0, 992.7763886537192);
      Complex complex8 = complex5.acos();
      complex8.ZERO.sinh();
      Complex complex9 = complex8.cos();
      complex0.hashCode();
      complex9.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1073.342193);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.abs();
      Complex complex2 = complex0.multiply((-2415));
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex3.ONE.divide(0.0);
      Complex complex6 = complex0.sqrt1z();
      complex6.ONE.sqrt1z();
      Complex complex7 = complex1.multiply(complex6);
      Complex complex8 = complex1.I.pow(complex3);
      complex8.ONE.multiply(complex4);
      Complex complex9 = complex5.add(Double.NaN);
      complex8.equals(complex9);
      complex6.reciprocal();
      complex3.multiply((-0.14622397238366855));
      Complex complex10 = complex7.sqrt();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex0.I.atan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex1.exp();
      complex2.getReal();
      complex0.getArgument();
      Complex complex5 = Complex.valueOf(0.7853981633974483, 1.5707963267948966);
      complex4.equals(complex5);
      complex3.subtract(0.3464667797088623);
      Complex complex6 = Complex.NaN;
      complex6.abs();
      complex2.cos();
      Complex complex7 = Complex.valueOf(0.3464667797088623, (-1287.2102521));
      Complex complex8 = complex7.cos();
      Complex complex9 = complex4.cosh();
      complex7.conjugate();
      complex9.readResolve();
      complex8.log();
      Complex complex10 = Complex.ONE;
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2103.602804232);
      Complex complex1 = complex0.INF.pow(2103.602804232);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.ONE.reciprocal();
      complex0.toString();
      complex0.atan();
      complex3.toString();
      complex4.getArgument();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-4601.8), 232.03817);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4601.8));
      complex0.ONE.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ZERO.subtract(232.03817);
      complex2.ONE.createComplex((-4601.8), 232.03817);
      Complex complex5 = complex2.I.pow(complex4);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.multiply(733);
      Complex complex8 = Complex.ZERO;
      complex8.add(complex5);
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex5.divide((-4601.8));
      Complex complex11 = complex1.asin();
      Complex complex12 = complex3.multiply(489295402);
      Complex complex13 = complex11.pow((double) 733);
      complex8.abs();
      complex0.equals(complex13);
      complex9.log();
      complex12.getReal();
      complex7.add(complex10);
      complex6.isInfinite();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      complex1.abs();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.divide(1516.338);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = Complex.valueOf(1516.338);
      Complex complex8 = complex7.sqrt1z();
      complex2.multiply(complex0);
      Complex complex9 = complex4.pow(complex5);
      complex2.multiply(complex5);
      complex5.exp();
      complex9.getReal();
      complex2.getArgument();
      Complex complex10 = new Complex(Double.NaN);
      complex2.equals(complex10);
      complex8.subtract(1516.338);
      complex9.abs();
      Complex complex11 = complex0.cos();
      complex11.cos();
      complex2.cosh();
      complex0.conjugate();
      complex6.readResolve();
      Complex complex12 = complex10.log();
      complex5.multiply(complex12);
      complex5.sinh();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-4601.8), 232.03817);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4601.8));
      complex0.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.divide((-2332.996930141131));
      Complex complex5 = Complex.valueOf(390.0);
      complex3.subtract(complex2);
      complex4.exp();
      complex5.conjugate();
      Complex complex6 = complex0.createComplex(1.1765332726757802E-8, (-685.5995031));
      Complex complex7 = complex2.sqrt();
      complex6.createComplex((-2076.8948971759023), (-183.934));
      complex7.reciprocal();
      complex4.sin();
      Complex.valueOf((-2332.996930141131));
      complex7.divide(complex1);
      Complex.valueOf((-4601.8), 3219.34238);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.subtract(1.1588881015777588);
      complex4.createComplex(Double.POSITIVE_INFINITY, 1.1588881015777588);
      Complex complex5 = complex0.pow(complex2);
      complex4.asin();
      Complex complex6 = complex5.add((-1.0));
      complex5.abs();
      Complex complex7 = Complex.valueOf((-6495.05413430127));
      complex7.negate();
      complex3.hashCode();
      complex4.subtract(complex2);
      complex7.sinh();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.log();
      Complex complex9 = Complex.ZERO;
      complex6.getField();
      complex0.divide((-6495.05413430127));
      complex2.multiply(complex3);
      Complex.valueOf(284090.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-643.00131714336), (-481.91162));
      Complex complex1 = Complex.INF;
      Complex complex2 = (Complex)complex1.readResolve();
      complex0.equals(complex1);
      complex2.getReal();
      complex1.getArgument();
      complex2.equals(complex1);
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex2.abs();
      Complex complex3 = complex0.cos();
      complex3.cos();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.conjugate();
      complex5.readResolve();
      complex4.log();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.sqrt1z();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex1.I.pow(complex3);
      Complex complex8 = Complex.NaN;
      complex6.INF.exp();
      complex0.getReal();
      complex2.ZERO.getArgument();
      complex7.atan();
      complex2.getReal();
      Complex.valueOf(0.0, (double) (-2415));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-4601.8), 232.03817);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4601.8));
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex1.ZERO.pow(complex3);
      Complex complex4 = complex0.ZERO.subtract(232.03817);
      Complex complex5 = complex2.ONE.createComplex((-4601.8), 232.03817);
      complex2.I.pow(complex4);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex3.add(232.03817);
      complex7.abs();
      Complex complex8 = complex2.negate();
      complex3.hashCode();
      Complex.valueOf(232.03817);
      complex8.subtract(complex7);
      complex8.NaN.sinh();
      Complex.valueOf(1907.9222808774696);
      complex8.log();
      Complex complex9 = complex3.pow(394.34879);
      Complex complex10 = complex6.acos();
      complex0.sinh();
      complex5.cos();
      complex9.hashCode();
      Object object0 = new Object();
      complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.abs();
      Complex complex2 = complex0.multiply((-2415));
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.ONE.sinh();
      complex3.ONE.divide(0.0);
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.sqrt1z();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex1.I.pow(complex3);
      complex7.ONE.multiply(complex4);
      complex6.INF.exp();
      complex0.getReal();
      complex2.ZERO.getArgument();
      complex6.equals(complex2);
      Complex complex8 = complex5.subtract(0.0);
      complex1.NaN.abs();
      Complex complex9 = complex3.cos();
      complex9.ONE.cos();
      Complex complex10 = complex8.cosh();
      complex10.ZERO.conjugate();
      complex4.readResolve();
      complex7.log();
      complex2.multiply(complex7);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-4102.02287895868), (-1456.34679600395));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add(1547.029);
      complex2.I.multiply(462);
      complex0.getArgument();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2461.319));
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.multiply(complex1);
      complex3.divide(0.3063063621520996);
      Complex complex4 = complex0.sqrt();
      complex1.tan();
      complex0.sqrt();
      complex1.sinh();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-4601.8), 232.03817);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4601.8));
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex1.ZERO.pow(complex3);
      Complex complex4 = complex0.ZERO.subtract(232.03817);
      Complex complex5 = complex2.ONE.createComplex((-4601.8), 232.03817);
      complex2.I.pow(complex4);
      complex0.asin();
      Complex complex6 = complex3.add(232.03817);
      complex6.abs();
      Complex complex7 = complex2.negate();
      complex3.hashCode();
      Complex.valueOf(232.03817);
      complex7.subtract(complex6);
      complex7.NaN.sinh();
      Complex complex8 = Complex.valueOf(1907.9222808774696);
      complex7.log();
      Complex complex9 = complex3.pow(394.34879);
      complex9.ZERO.getField();
      complex5.divide(0.33675122261047363);
      complex9.multiply(complex8);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.multiply((-533));
      complex2.NaN.cosh();
      complex2.I.add((double) (-533));
      Complex complex3 = complex1.INF.add((double) (-533));
      Complex complex4 = complex2.acos();
      complex4.ONE.exp();
      complex0.getArgument();
      complex1.NaN.cos();
      Complex complex5 = complex1.tanh();
      complex5.NaN.toString();
      complex5.NaN.readResolve();
      complex1.createComplex((-2.356194490192345), (-533));
      complex0.getReal();
      complex3.abs();
      complex4.createComplex((-20.0), (-533));
      Complex.valueOf((-1919.9708), 1.905394922122271E10);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex3.log();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.ONE.log();
      complex6.I.pow(complex1);
      complex5.getField();
      complex2.isNaN();
      complex0.getReal();
      Object object0 = new Object();
      complex5.equals(object0);
      complex2.divide(complex5);
      complex3.isNaN();
      Complex complex7 = complex4.INF.subtract(0.0);
      complex7.hashCode();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.INF.sinh();
      complex9.I.tanh();
      complex5.ONE.acos();
      complex9.sqrt();
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex0.I.atan();
      complex1.ONE.atan();
      complex0.ONE.sin();
      Complex complex2 = complex0.add(0.3464667797088623);
      complex1.equals(complex0);
      complex2.reciprocal();
      Complex complex3 = complex2.multiply(0.3464667797088623);
      complex3.ONE.sqrt();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(2204.658, 2204.658);
      complex0.ZERO.createComplex(2204.658, (-1605.90543034118));
      Complex complex1 = complex0.ZERO.atan();
      complex1.divide(1.096142053604126);
      complex1.subtract(complex0);
      Complex complex2 = complex0.tan();
      complex0.add(complex2);
      Complex complex3 = Complex.valueOf(3935.902068291);
      Complex complex4 = complex3.ONE.subtract(2204.658);
      complex4.I.asin();
      complex0.conjugate();
      complex2.getReal();
      Complex complex5 = complex0.cosh();
      complex5.I.add((-4036.838145));
      complex3.hashCode();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = Complex.I;
      complex2.I.getArgument();
      Complex complex3 = complex0.ONE.divide(complex2);
      complex3.I.getArgument();
      complex0.exp();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex0.asin();
      complex3.getImaginary();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.I.add(complex5);
      complex4.I.sqrt();
      complex1.hashCode();
      Complex complex8 = complex2.multiply(complex1);
      Complex.valueOf(1.5707963267948966, 0.0);
      Complex complex9 = complex4.divide(complex1);
      complex9.ZERO.multiply(1);
      complex9.NaN.subtract(complex4);
      complex7.hashCode();
      complex8.subtract(complex6);
      Complex complex10 = Complex.valueOf(1.5707963267948966);
      Complex complex11 = complex10.ONE.atan();
      complex11.ONE.getArgument();
      complex2.isInfinite();
      complex8.readResolve();
      Complex complex12 = complex10.add(complex4);
      Complex complex13 = Complex.valueOf(0.0);
      complex12.isInfinite();
      complex13.multiply(0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.atan();
      complex7.NaN.tanh();
      complex4.ONE.sinh();
      complex6.equals("OiE,vPd{dei");
      Object object0 = new Object();
      complex1.equals(object0);
      complex6.isNaN();
      complex7.pow(complex2);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.tanh();
      complex1.getField();
      complex1.I.atan();
      complex0.isNaN();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex1.INF.log();
      complex5.ZERO.divide(2485.1361);
      complex3.I.sqrt1z();
      complex3.INF.abs();
      Complex complex6 = complex1.conjugate();
      complex6.conjugate();
      complex2.I.acos();
      complex1.acos();
      complex4.atan();
      Complex complex7 = complex2.tanh();
      double double0 = 2811.501;
      try { 
        complex7.ONE.nthRoot((-1732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,732
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-643.00131714336), (-481.91162));
      Complex complex1 = Complex.INF;
      complex1.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.reciprocal();
      complex2.nthRoot(2926);
      complex2.negate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow(0.0);
      complex0.ONE.hashCode();
      complex0.ONE.sin();
      complex0.getReal();
      Complex complex1 = complex0.pow((-652.3821012010495));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.ONE.getArgument();
      double double0 = Double.NaN;
      Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.I.sinh();
      complex2.ZERO.divide(0.0);
      complex2.I.exp();
      complex0.equals(complex1);
      Complex complex3 = complex0.subtract(Double.NaN);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.asin();
      try { 
        complex6.nthRoot((-847));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -847
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.subtract(6.283185307179586);
      double double1 = 0.0;
      Complex complex2 = complex0.NaN.pow(0.0);
      complex2.add(0.0);
      Complex complex3 = complex1.conjugate();
      complex3.cosh();
      int int0 = 760;
      try { 
        complex1.ONE.nthRoot((-755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -755
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(3.273212962622764E-8, 3.273212962622764E-8);
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.I.getField();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex0.log();
      complex2.INF.negate();
      complex0.abs();
      complex2.ZERO.sinh();
      Complex complex6 = complex5.subtract((-1188.3679257));
      complex6.ZERO.conjugate();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.INF.sqrt1z();
      complex3.multiply(0.0);
      complex1.acos();
      Complex.valueOf((-1.0));
      Complex complex9 = Complex.NaN;
      complex7.INF.divide(complex9);
      complex8.NaN.log();
      complex7.INF.conjugate();
      complex8.multiply((-339));
      complex4.abs();
      complex5.abs();
      Complex complex10 = Complex.I;
      complex1.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex1.ZERO.pow(0.0);
      complex0.conjugate();
      Complex.valueOf(20.0, 20.0);
      complex2.I.pow(complex1);
      complex0.divide(408.3794787386);
      complex0.readResolve();
      Complex complex3 = complex0.sqrt();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1.3166970112139726E161, 1.3166970112139726E161);
      complex0.INF.readResolve();
      complex0.divide(1.3166970112139726E161);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.multiply((-1357));
      complex2.ONE.toString();
      complex2.NaN.exp();
      complex1.isNaN();
      Complex.valueOf(0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 2801.618647115);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0389614239253089E-8), (-1.0389614239253089E-8));
      complex0.ONE.abs();
      Complex complex1 = complex0.sqrt();
      complex1.sin();
      complex0.toString();
      Complex complex2 = complex0.divide((-1580.86444830328));
      complex2.ZERO.pow(complex0);
      complex2.pow(complex0);
      Complex complex3 = Complex.INF;
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1461.371858876);
      Complex complex1 = complex0.NaN.multiply(0.1677299439907074);
      Complex complex2 = complex0.ONE.tan();
      complex2.INF.getField();
      complex0.getReal();
      complex0.negate();
      Complex complex3 = complex2.subtract(0.0);
      complex3.nthRoot(1088);
      complex0.isInfinite();
      Complex complex4 = complex1.createComplex(1461.371858876, (-2278.813896173));
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex0.isNaN();
      Complex complex2 = complex0.tanh();
      complex0.I.exp();
      complex0.INF.sqrt1z();
      Complex complex3 = complex2.multiply(3824);
      Complex complex4 = complex1.pow(1163.3448061304841);
      Complex complex5 = complex3.log();
      complex5.ZERO.tanh();
      complex1.NaN.sinh();
      complex4.tan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.907487641016455E-8), 946.210679);
      Complex complex2 = complex0.I.multiply(356.030955660692);
      complex0.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.pow(complex0);
      Complex complex7 = complex2.NaN.reciprocal();
      complex7.ONE.sin();
      complex5.isInfinite();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.I.subtract(complex6);
      Complex complex10 = complex9.NaN.sqrt();
      complex6.getImaginary();
      complex2.equals("");
      Complex complex11 = complex2.divide(356.030955660692);
      complex2.add(Double.NaN);
      complex8.ZERO.multiply(complex10);
      complex1.tanh();
      complex4.sqrt1z();
      complex8.multiply(356.030955660692);
      complex11.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-1401.12931242), 0.0);
      Complex complex1 = complex0.subtract((-1401.12931242));
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.ZERO.sin();
      complex0.NaN.pow(complex3);
      complex1.divide(complex0);
      Complex.valueOf(0.0, 0.0);
      complex0.getReal();
      complex2.add((-1163.5663662));
      complex1.asin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2665.7395370023855), (-2665.7395370023855));
      Complex complex2 = complex0.ONE.pow(0.1881638467311859);
      Complex complex3 = complex1.I.createComplex(3286.849903024, (-2665.7395370023855));
      Complex.valueOf(0.0, 450.6698522286061);
      complex0.pow(complex1);
      Complex complex4 = complex1.createComplex((-2665.7395370023855), (-2665.7395370023855));
      Complex complex5 = complex1.multiply(0);
      Complex complex6 = complex5.ONE.multiply(complex4);
      complex4.getArgument();
      complex2.pow(3286.849903024);
      complex3.acos();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.subtract(0.0);
      List<Complex> list0 = complex3.nthRoot(671);
      Complex complex4 = complex3.NaN.createComplex(0.0, 0.0);
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex5.ONE.multiply(671);
      Complex complex7 = complex6.I.add(complex4);
      complex7.ONE.reciprocal();
      Complex complex8 = complex0.divide(0.0);
      complex8.NaN.asin();
      complex5.multiply(671);
      Complex complex9 = complex2.I.pow((double) 671);
      complex9.I.abs();
      complex1.equals(list0);
      Complex complex10 = complex0.log();
      complex5.getReal();
      complex2.add(complex1);
      complex0.equals((Object) null);
      complex5.isInfinite();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.ZERO.getField();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.ZERO.subtract(0.0);
      complex4.INF.acos();
      Complex complex6 = complex5.NaN.createComplex(0.0, 0.0);
      complex6.INF.asin();
      complex0.ONE.toString();
      Complex complex7 = complex2.ZERO.add(0.0);
      complex7.NaN.log();
      complex6.ZERO.readResolve();
      complex2.tan();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.add(0.0);
      complex10.INF.pow(complex3);
      complex0.getField();
      Complex complex11 = complex0.pow(0.0);
      Complex complex12 = complex8.sqrt1z();
      Complex complex13 = complex12.I.subtract((-349.803924));
      complex13.tan();
      complex11.tan();
      complex3.getField();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      complex1.INF.readResolve();
      complex0.NaN.negate();
      complex0.divide(0.4132472276687622);
      Complex complex2 = Complex.valueOf(7.3370297995122135E-152);
      complex2.subtract(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.conjugate();
      complex3.ZERO.createComplex(0.4132472276687622, 0.4132472276687622);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.I.createComplex(0.4132472276687622, 0.4132472276687622);
      complex1.reciprocal();
      Complex complex7 = complex4.sin();
      complex7.I.multiply(complex6);
      complex7.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.divide((-186.125));
      complex0.NaN.abs();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.INF.sqrt1z();
      complex4.ZERO.pow(complex1);
      complex3.ZERO.hashCode();
      complex3.INF.multiply(907);
      complex0.pow(complex2);
      Complex complex5 = complex3.multiply(0.0);
      complex5.NaN.cosh();
      complex0.log();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(992.7763886537192, 1832.663);
      Complex complex1 = Complex.ONE;
      complex0.INF.divide(1832.663);
      complex0.ONE.divide(complex1);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex2.log();
      complex0.acos();
      complex2.log();
      complex1.divide(1173.98934829);
      Complex complex5 = complex4.tan();
      complex5.ONE.asin();
      complex4.readResolve();
      complex0.getReal();
      complex1.ONE.cos();
      Complex.valueOf(0.0, 992.7763886537192);
      Complex complex6 = complex3.acos();
      complex6.ZERO.sinh();
      Complex complex7 = complex6.cos();
      complex0.hashCode();
      complex7.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.conjugate();
      complex2.INF.getField();
      Complex complex3 = complex0.divide(complex1);
      complex0.getImaginary();
      complex3.atan();
      complex1.ZERO.sinh();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      complex4.INF.multiply(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex5 = complex3.subtract(complex4);
      complex5.I.divide(complex1);
      Complex complex6 = complex3.reciprocal();
      complex6.I.negate();
      complex4.sinh();
      Complex complex7 = Complex.NaN;
      complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.atan();
      complex1.abs();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ZERO.tan();
      complex5.ONE.reciprocal();
      complex5.INF.sqrt();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = Complex.valueOf((-3.046577356838847E-10), Double.NaN);
      Complex complex8 = complex7.I.multiply(0);
      Complex complex9 = complex0.subtract(Double.NaN);
      complex9.asin();
      complex0.hashCode();
      complex3.exp();
      Complex complex10 = Complex.valueOf((-3.046577356838847E-10), (-7690.479115));
      complex10.ZERO.sinh();
      complex10.INF.getArgument();
      complex10.INF.getArgument();
      complex1.getArgument();
      complex2.getArgument();
      Complex complex11 = Complex.ONE;
      complex8.multiply(complex11);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.I.atan();
      complex2.I.readResolve();
      Complex complex3 = complex0.sin();
      complex3.multiply(complex1);
      complex1.negate();
      complex1.cos();
      Complex complex4 = complex1.pow(1353.488773427);
      Complex complex5 = complex4.NaN.pow(0.0);
      complex5.I.add(538.0822);
      complex2.I.conjugate();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1634.3264, (-20.0));
      Complex complex1 = complex0.ZERO.asin();
      complex1.ONE.conjugate();
      complex0.log();
      try { 
        complex0.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.readResolve();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.isNaN();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2103.602804232);
      Complex complex1 = complex0.INF.pow(2103.602804232);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ONE.tanh();
      complex0.ONE.reciprocal();
      complex0.toString();
      Complex complex3 = complex0.atan();
      complex0.tan();
      complex3.getReal();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex1.INF.cosh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex1.INF.subtract(complex2);
      complex2.toString();
      complex1.toString();
      complex5.getArgument();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.600448597385527E-8);
      Complex complex1 = complex0.ONE.multiply(2.600448597385527E-8);
      Complex complex2 = complex1.I.divide(complex0);
      complex0.abs();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.I.asin();
      complex5.ZERO.log();
      complex5.ZERO.acos();
      complex4.tan();
      complex4.isNaN();
      complex1.readResolve();
      Complex complex6 = complex1.cos();
      complex4.acos();
      complex6.divide(2.600448597385527E-8);
      complex6.sin();
      complex3.divide(2.600448597385527E-8);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex1.NaN.acos();
      complex3.I.log();
      complex1.atan();
      complex2.hashCode();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.pow(0.0);
      complex2.INF.negate();
      complex1.I.acos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.pow(0.0);
      complex4.NaN.acos();
      complex3.add(complex1);
      complex1.pow(0.0);
      complex2.getArgument();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3600.144296007);
      complex0.ONE.toString();
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3191636800765991, 0.3191636800765991);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex4.tan();
      assertEquals(1.0839233273386946, complex5.getImaginary(), 0.01);
      assertEquals(0.27175258531951174, complex5.getReal(), 0.01);
      
      Complex complex6 = complex3.NaN.acos();
      Complex complex7 = complex6.I.cosh();
      String string0 = complex7.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      complex6.INF.sinh();
      Complex complex8 = complex6.multiply(0.3191636800765991);
      complex8.ONE.conjugate();
      complex6.NaN.sqrt();
      Complex complex9 = complex3.divide(0.3191636800765991);
      assertTrue(complex9.equals((Object)complex4));
      
      Complex complex10 = complex3.acos();
      Complex complex11 = complex10.NaN.createComplex(0.0, 0.3191636800765991);
      Complex complex12 = complex3.atan();
      complex3.ONE.log();
      complex12.ZERO.multiply(1);
      complex3.getReal();
      Complex complex13 = complex12.tanh();
      complex11.getReal();
      Complex complex14 = complex10.sin();
      complex1.getReal();
      complex14.ONE.divide(complex11);
      Complex.valueOf(0.0, 0.3191636800765991);
      complex3.hashCode();
      Complex complex15 = complex6.cos();
      Complex complex16 = complex15.subtract(complex14);
      assertSame(complex16, complex2);
      assertEquals(1.0051224183441003, complex14.getReal(), 0.01);
      
      complex7.INF.createComplex(0.3191636800765991, 0.3191636800765991);
      complex0.I.getField();
      complex3.add(complex0);
      Complex complex17 = complex7.sin();
      double double0 = complex17.getReal();
      assertEquals(0.5143952585235492, double0, 0.01);
      
      Complex complex18 = complex13.sqrt();
      assertEquals(0.21347173802410166, complex18.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.ONE.reciprocal();
      double double0 = complex2.getArgument();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.valueOf(1113.69656098807);
      complex4.NaN.multiply(complex3);
      Complex complex5 = complex3.acos();
      complex5.cos();
      complex5.conjugate();
      complex5.ONE.exp();
      complex1.NaN.add((-1087.132679));
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex3.asin();
      assertEquals((-1.1989173671185498), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.negate();
      assertTrue(complex6.equals((Object)complex2));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex3.divide(0.0);
      Complex complex9 = complex5.add((-508.0));
      assertEquals(1.19891736711855, complex9.getImaginary(), 0.01);
  }
}
