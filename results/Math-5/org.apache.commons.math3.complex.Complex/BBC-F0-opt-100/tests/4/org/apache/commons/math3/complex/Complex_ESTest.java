/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:47:39 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.6844747839686189E-9, 1.6844747839686189E-9);
      complex1.toString();
      complex0.abs();
      complex0.exp();
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex(1.6844747839686189E-9, 1.6844747839686189E-9);
      complex2.tan();
      Complex complex4 = complex0.sqrt();
      complex1.cosh();
      complex4.sqrt1z();
      complex2.asin();
      complex1.pow(complex3);
      complex4.nthRoot(2273);
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3273.0), 20.0);
      complex0.nthRoot(1);
      Complex complex1 = complex0.tan();
      complex1.acos();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3273.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.ONE.cosh();
      Complex complex2 = complex1.acos();
      complex2.acos();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.asin();
      Complex complex2 = complex1.tan();
      complex2.sqrt();
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(20.0);
      complex3.subtract(complex0);
      Complex complex4 = complex3.cosh();
      complex0.sqrt();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex4.pow((-20.0));
      Complex complex7 = complex3.log();
      complex7.asin();
      complex2.abs();
      complex7.abs();
      Complex complex8 = complex6.cos();
      Complex.valueOf(0.0, (-3581.41));
      complex5.tanh();
      Complex complex9 = complex8.sqrt1z();
      complex1.acos();
      Complex complex10 = Complex.ONE;
      complex9.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3273.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 2571915.397778577);
      complex0.I.subtract(complex1);
      Complex complex2 = complex0.multiply((-3273.0));
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3273.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3273.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.NaN.subtract(complex0);
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex1.acos();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.tanh();
      complex2.ZERO.getField();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.I.cos();
      complex3.NaN.subtract(3509.10751859868);
      Complex complex5 = complex4.ONE.divide(1.0680488848057261E284);
      Complex complex6 = complex3.log();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.NaN.divide(complex4);
      Complex complex9 = complex5.sqrt();
      complex7.ZERO.abs();
      Complex.valueOf(1.0680488848057261E284, 1.0680488848057261E284);
      complex5.add((-3.912427573594197E-9));
      complex9.pow((-1517.4826618337459));
      Complex complex10 = complex7.pow(complex0);
      Complex complex11 = complex6.sqrt();
      complex0.ZERO.nthRoot(3511);
      complex0.sqrt();
      complex11.INF.sqrt();
      Complex.valueOf(20.0);
      complex6.cosh();
      Complex.valueOf(1.653678976068E12);
      complex11.ONE.divide(complex10);
      complex11.multiply(2460);
      complex8.reciprocal();
      complex8.tan();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(1134);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add((-3615.8776753));
      Complex complex3 = complex2.tan();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex0.subtract(complex0);
      Complex complex2 = new Complex(1.2736636153072213E-90);
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      complex2.NaN.cos();
      complex3.pow(Double.POSITIVE_INFINITY);
      complex3.nthRoot(262);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1535.2456425759, 1535.2456425759);
      Complex complex1 = Complex.valueOf((-693.5168838741098), 1.2184647707594137E-209);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(11.000102, (-2359.043744095));
      complex2.abs();
      Complex complex4 = complex2.exp();
      complex3.cosh();
      Complex complex5 = Complex.NaN;
      complex3.multiply((-693.5168838741098));
      complex1.tan();
      complex3.sqrt();
      Complex complex6 = complex4.asin();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(715.3);
      complex0.asin();
      Complex complex1 = Complex.valueOf(715.3, 0.2563843715492922);
      complex0.abs();
      Complex complex2 = complex1.exp();
      complex2.cosh();
      Complex complex3 = complex1.pow(complex2);
      complex0.multiply(1.6844747839686189E-9);
      complex3.tan();
      Complex complex4 = Complex.valueOf(715.3);
      Complex complex5 = complex4.sqrt();
      complex2.asin();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(715.3);
      complex0.equals(complex0);
      complex0.asin();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1535.2456425759, 1535.2456425759);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.cosh();
      complex1.pow(complex0);
      complex2.multiply(1535.2456425759);
      Complex complex4 = complex3.tan();
      complex1.sqrt();
      complex4.asin();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(715.3);
      Complex complex1 = complex0.I.reciprocal();
      Complex.valueOf(715.3);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1525.7415495492749, (-1703.111));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.multiply(1.0904969063772398);
      Complex complex3 = complex2.NaN.multiply(1373.803);
      complex0.getField();
      Complex complex4 = complex1.multiply(1661);
      complex1.nthRoot(1661);
      Complex complex5 = new Complex((-6.2125237414), 1525.7415495492749);
      Complex complex6 = complex2.pow(complex5);
      complex6.ZERO.asin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.multiply(complex7);
      Complex complex9 = complex1.sqrt1z();
      complex9.ZERO.reciprocal();
      complex9.ONE.sqrt1z();
      Complex complex10 = complex5.pow(complex0);
      complex0.subtract((double) 1661);
      complex4.asin();
      complex1.multiply(complex10);
      complex7.add(complex5);
      complex8.multiply((-11.000102));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      complex0.NaN.acos();
      Complex complex1 = Complex.I;
      complex1.ZERO.subtract(complex0);
      Complex complex2 = Complex.valueOf(1.6844747839686189E-9, 1.6844747839686189E-9);
      complex2.INF.toString();
      complex0.ONE.abs();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.multiply(1.2736636153072213E-90);
      complex4.I.tan();
      complex4.sqrt();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex3.asin();
      complex6.pow(complex1);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.376));
      complex0.NaN.asin();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.sqrt();
      complex0.cosh();
      Complex complex4 = complex2.sqrt1z();
      complex2.createComplex(2048.500136081, 2048.500136081);
      Complex complex5 = complex2.sin();
      Complex.valueOf(1.2736636153072213E-90, 1515.0);
      Complex complex6 = Complex.I;
      complex6.tanh();
      Complex.valueOf(Double.NaN);
      Complex.valueOf(1.2736636153072213E-90, 2789.951648291);
      complex1.subtract(complex4);
      complex3.sqrt1z();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1401.6), (-1401.6));
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      complex1.acos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(2789.951648291, 1.6844747839686189E-9);
      complex3.toString();
      complex3.abs();
      complex0.exp();
      Complex complex4 = complex1.multiply(1.6844747839686189E-9);
      complex2.sqrt();
      complex1.cosh();
      complex0.sqrt1z();
      Complex complex5 = complex1.createComplex(0.0, (-645.8221433607177));
      complex4.sin();
      Complex.valueOf(2789.951648291, 2789.951648291);
      complex4.tanh();
      Complex.valueOf(670.8426280298623);
      Complex.valueOf(2789.951648291, 4650.7276642837);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex1.acos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-0.9809274911874108));
      Complex complex4 = Complex.valueOf(4193.063028541);
      complex4.abs();
      Complex complex5 = complex0.exp();
      Complex complex6 = Complex.I;
      complex6.multiply(1.8810608386993408);
      complex3.sqrt();
      complex6.cosh();
      complex2.sqrt1z();
      Complex complex7 = complex5.createComplex(707.741, 1430.599300992249);
      complex7.sin();
      Complex complex8 = Complex.valueOf((-372.51345692329465), (-4507.51894013));
      complex8.tanh();
      Complex.valueOf((-1602.0));
      Complex.valueOf(1.6844747839686189E-9, (-730.2116579528888));
      Complex complex9 = complex5.subtract(complex2);
      Complex complex10 = Complex.INF;
      complex10.sqrt1z();
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-6.2125237414));
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.createComplex(2789.951648291, 0.0);
      Complex complex5 = complex1.divide(2789.951648291);
      complex1.tan();
      Complex complex6 = complex4.divide(1.982919692993164);
      complex5.createComplex(0.0, 2948.0760401296);
      Complex complex7 = complex5.reciprocal();
      complex3.tan();
      complex6.readResolve();
      complex7.multiply(1396);
      complex0.cosh();
      complex3.exp();
      complex2.createComplex(444.231250609184, 444.231250609184);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(25.919927238128242);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.INF;
      complex2.divide(complex3);
      Complex complex4 = Complex.ONE;
      complex3.createComplex((-454.62780270499064), 25.919927238128242);
      complex0.sqrt1z();
      Complex.valueOf(2682.8486765837706, 25.919927238128242);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1004.0347783333));
      complex0.NaN.multiply((-1004.0347783333));
      complex0.getField();
      Complex complex1 = complex0.createComplex((-1004.0347783333), (-1004.0347783333));
      complex1.toString();
      Complex complex2 = complex1.divide((-1004.0347783333));
      Complex complex3 = complex2.I.tan();
      complex1.equals(complex2);
      Complex complex4 = complex2.NaN.subtract(complex3);
      complex0.equals(complex1);
      complex2.add((-1004.0347783333));
      Complex.valueOf(1519282.4856778, (-1.0));
      Complex complex5 = complex4.cos();
      complex5.nthRoot(852);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 8.707092668016246E-211);
      complex0.getImaginary();
      Complex complex1 = complex0.divide(8.707092668016246E-211);
      complex1.ZERO.conjugate();
      Complex complex2 = complex1.pow(20.0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.conjugate();
      complex4.conjugate();
      Complex complex5 = complex1.createComplex(8.707092668016246E-211, 8.707092668016246E-211);
      complex2.NaN.hashCode();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex4.I.sqrt();
      complex8.INF.tan();
      complex0.toString();
      Complex complex9 = complex1.sqrt1z();
      complex9.ONE.divide(complex2);
      complex9.subtract(complex0);
      Complex complex10 = complex1.asin();
      complex7.toString();
      Complex complex11 = new Complex(1971.62, 8.707092668016246E-211);
      complex6.equals(complex11);
      complex11.I.pow(8.707092668016246E-211);
      complex4.pow(20.0);
      Complex complex12 = complex11.tan();
      complex6.log();
      complex3.multiply(complex4);
      Complex complex13 = complex12.sqrt();
      complex13.ZERO.sin();
      complex10.cosh();
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.tanh();
      complex2.multiply((-2034458192));
      complex0.toString();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = Complex.valueOf(1.8810608386993408);
      complex4.subtract((double) (-2034458192));
      Complex complex5 = new Complex((-2034458192));
      Complex.valueOf((-498.06), (double) (-2034458192));
      Complex complex6 = complex3.sqrt();
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex((-2034458192), Double.POSITIVE_INFINITY);
      complex8.isNaN();
      complex0.tanh();
      complex6.divide(1.8810608386993408);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(25.919927238128242);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-6.2125237414));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.INF;
      complex2.divide(complex3);
      Complex complex4 = Complex.valueOf((-454.62780270499064));
      Complex complex5 = complex3.createComplex((-454.62780270499064), 25.919927238128242);
      complex0.sqrt1z();
      complex5.nthRoot(3481);
      complex1.getArgument();
      Complex.valueOf(2682.8486765837706, 2.7569686255975333E304);
      complex0.tanh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-454.62780270499064));
      complex0.ZERO.acos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.createComplex(2789.951648291, 0.0);
      Complex complex4 = complex1.divide(2789.951648291);
      complex1.tan();
      complex3.divide(1.982919692993164);
      complex4.reciprocal();
      complex2.tan();
      Complex.valueOf((-454.62780270499064));
      Complex.valueOf((-454.62780270499064));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.createComplex(7.555327465524897E-5, 2696.0384848763);
      Complex complex2 = complex0.divide(68.69517002952357);
      complex0.tan();
      complex0.divide(Double.NaN);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.createComplex(Double.NaN, 7.555327465524897E-5);
      Complex complex5 = complex4.reciprocal();
      complex1.tan();
      complex5.readResolve();
      complex2.divide(2948.0760401296);
      Complex.valueOf(287.3347140795);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(3.3527476928456816E267);
      complex0.getImaginary();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(1254.5829466192, 1254.5829466192);
      complex2.subtract(1254.5829466192);
      complex3.createComplex(0.0, (-9.161340309319204E252));
      Complex complex4 = complex2.sqrt1z();
      complex1.pow(2298.722);
      complex3.toString();
      complex4.asin();
      Complex complex5 = new Complex(2087.99542380549, 0.0);
      complex2.multiply(2298.722);
      complex1.acos();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(715.3);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(715.3, 715.3);
      complex3.equals(complex1);
      complex1.readResolve();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(25.919927238128242);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-6.2125237414));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.divide(complex3);
      Complex.valueOf((-454.62780270499064));
      Complex complex5 = complex3.createComplex((-454.62780270499064), 25.919927238128242);
      complex0.sqrt1z();
      complex5.pow((-454.62780270499064));
      complex3.toString();
      complex5.asin();
      Complex complex6 = new Complex(2682.8486765837706, (-5245.7499));
      complex2.multiply(837.457);
      complex6.acos();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-1305.9), (-1847.9492886));
      complex1.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(complex1);
      Complex.valueOf(1376.547988570812);
      complex2.subtract((-2434.2541));
      Complex complex4 = complex0.sqrt();
      complex4.equals(complex0);
      Complex complex5 = complex3.tanh();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 368.216031592);
      // Undeclared exception!
      complex0.nthRoot(1006039087);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = (-1983.771410972);
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.NaN);
      complex1.getImaginary();
      int int0 = (-4806);
      try { 
        complex0.nthRoot((-4806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,806
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-6.2125237414));
      Complex complex2 = complex1.NaN.multiply((-454.62780270499064));
      complex2.INF.tan();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.INF;
      complex3.divide((-6.2125237414));
      Complex complex5 = complex1.tan();
      complex5.divide((-454.62780270499064));
      complex4.createComplex(1892.455004057034, 0.0);
      complex3.reciprocal();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.tan();
      complex1.readResolve();
      complex3.divide(1892.455004057034);
      Complex.valueOf((-454.62780270499064));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-1983.771410972), Double.NaN);
      Complex complex1 = Complex.I;
      complex0.INF.divide((-1983.771410972));
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ZERO.createComplex((-1983.771410972), Double.NaN);
      complex0.equals("");
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.createComplex(0.0, (-3921.946));
      Complex complex3 = complex1.asin();
      complex0.abs();
      Complex complex4 = Complex.I;
      complex2.isInfinite();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.ONE;
      Complex complex7 = new Complex(0.0, 2070.65042);
      Complex complex8 = complex4.subtract((-3921.946));
      complex0.createComplex(0.0, 242.099597096);
      complex5.sqrt1z();
      complex3.pow(1.4255188208147591);
      complex8.toString();
      Complex complex9 = complex1.asin();
      Complex complex10 = new Complex((-3325.1534522), 2070.65042);
      complex9.multiply(0.0);
      complex3.acos();
      complex5.sin();
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-6.2125237414));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.INF;
      complex2.divide(complex3);
      Complex complex4 = Complex.valueOf((-454.62780270499064));
      complex0.subtract(2.8946401383311E-63);
      complex1.sqrt();
      Complex complex5 = complex3.INF.pow((-6.2125237414));
      complex4.divide(2789.951648291);
      complex5.isNaN();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.valueOf((-20.0));
      complex7.tanh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-6.2125237414));
      Complex complex2 = complex1.conjugate();
      complex2.INF.multiply(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = Complex.valueOf((-454.62780270499064));
      complex0.subtract(2.8946401383311E-63);
      complex1.sqrt();
      complex3.equals(complex0);
      complex3.INF.pow((-6.2125237414));
      Complex complex6 = complex5.divide(2789.951648291);
      Complex.valueOf(2060.337242712222, (-454.62780270499064));
      complex4.acos();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 368.216031592);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf(771.242695);
      complex3.divide(complex1);
      Complex complex4 = Complex.valueOf((-60.97));
      complex4.subtract((-60.97));
      complex4.sqrt();
      complex0.equals(complex3);
      complex3.pow((-60.97));
      Complex complex5 = complex0.divide(6.283185307179586);
      complex5.multiply(1292.718);
      complex5.acos();
      Complex complex6 = Complex.valueOf((-6099.4298), (-3279.6412980482314));
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(3228.7, (-1847.9492886));
      Complex.valueOf(1376.82065996, (-7.32));
      complex1.log();
      Complex complex2 = Complex.ONE;
      complex1.tan();
      complex2.sinh();
      complex0.tanh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.divide(complex0);
      complex0.ZERO.pow(0.0);
      Complex complex2 = (Complex)complex0.INF.readResolve();
      Complex complex3 = Complex.NaN;
      complex0.abs();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex0.tanh();
      complex3.INF.cosh();
      Complex.valueOf(0.0);
      complex3.getField();
      Complex.valueOf(1201.37903, (-2070.65042));
      complex5.createComplex((-2070.65042), (-2070.65042));
      Complex complex7 = complex4.sqrt1z();
      complex0.pow(134.0);
      Complex complex8 = complex3.asin();
      Complex complex9 = complex6.conjugate();
      complex9.ONE.add((-454.62780270499064));
      complex2.isNaN();
      Complex complex10 = Complex.valueOf(0.06032830987357496, 2791.509775);
      complex8.tanh();
      Complex complex11 = Complex.NaN;
      complex7.abs();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.subtract((-4.279090925831093E-8));
      complex0.I.atan();
      Complex complex2 = Complex.valueOf(20.0, (-4.279090925831093E-8));
      Complex complex3 = complex0.ONE.createComplex(1.4035650098167025, 20.0);
      Complex complex4 = complex3.ZERO.divide((-2483.08));
      complex4.I.tan();
      complex4.ONE.divide(1.4035650098167025);
      complex4.ZERO.createComplex((-2483.08), 28.299602796);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.tan();
      complex5.readResolve();
      complex2.cosh();
      complex6.divide(5.645687086879944E-128);
      Complex.valueOf(1.4255188208147591);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.divide(1.5503435134887695);
      complex1.ONE.log();
      Complex complex3 = complex1.asin();
      complex3.NaN.abs();
      complex3.isInfinite();
      complex2.reciprocal();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(1.5503435134887695);
      complex5.createComplex(1.5503435134887695, 1.5503435134887695);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.NaN.pow(1.5503435134887695);
      complex5.ZERO.toString();
      complex7.asin();
      complex0.conjugate();
      Complex.valueOf(1.5503435134887695, Double.NaN);
      complex5.tanh();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(1376.82065996);
      Complex complex2 = new Complex(1376.82065996, 1376.82065996);
      complex1.isNaN();
      complex0.I.readResolve();
      complex2.tan();
      complex2.sinh();
      complex1.tanh();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.divide(complex0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-697.37));
      Complex complex2 = complex1.multiply(143);
      Complex complex3 = complex0.add(517.69466029);
      complex0.INF.getArgument();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.atan();
      complex4.abs();
      Complex complex6 = complex5.add(complex4);
      complex5.nthRoot(37);
      complex6.abs();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex0.getArgument();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.createComplex((-1229.9545903953), (-1229.9545903953));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.divide(complex3);
      Complex.valueOf(0.7641670894822938);
      complex3.subtract((-1229.9545903953));
      Complex complex6 = complex5.sqrt();
      complex6.equals((Object) null);
      Complex complex7 = complex1.divide((-6255.715520515812));
      complex7.multiply(933.77000611636);
      complex6.acos();
      Complex complex8 = new Complex(585.558855593, (-1724.178));
      complex8.sin();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = Complex.valueOf((-2014.8956879));
      complex6.sqrt();
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      complex3.divide(2970.47661);
      complex2.multiply(0.5920095443725586);
      complex5.acos();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex1.ONE.divide(1.5503435134887695);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.asin();
      complex3.abs();
      complex2.isInfinite();
      complex0.reciprocal();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = Complex.valueOf(2.2978757040142953E-60, 2791.509775);
      complex6.createComplex(1.5503435134887695, 0.0);
      complex0.sqrt1z();
      Complex complex7 = complex4.pow(6.2125237414);
      complex2.toString();
      complex7.asin();
      complex5.conjugate();
      complex2.isNaN();
      Complex complex8 = Complex.valueOf(11.000102, 1.5503435134887695);
      complex8.tanh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1419.19009362);
      complex0.getImaginary();
      complex1.nthRoot(1);
      complex1.INF.nthRoot(1);
      complex1.getArgument();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.createComplex(1, 0.0);
      Complex complex4 = complex0.add((-379.0034629703993));
      complex3.subtract(352.256933442);
      complex2.subtract(1.4142135623730951);
      Complex complex5 = complex3.sqrt();
      complex5.equals(complex3);
      complex3.divide(520.0);
      Complex complex6 = complex3.multiply(1.4142135623730951);
      complex2.acos();
      complex4.sin();
      complex6.multiply((-1734.38620211146));
      Complex.valueOf(520.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      complex0.getArgument();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.NaN.createComplex(618.507500966, 618.507500966);
      Complex complex4 = Complex.ZERO;
      complex4.ZERO.divide(complex2);
      Complex complex5 = Complex.NaN;
      complex1.subtract(585.558855593);
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex3);
      Complex.valueOf(618.507500966, 618.507500966);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.multiply(0.5920095443725586);
      complex7.NaN.abs();
      complex7.INF.acos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 368.216031592);
      Complex.valueOf(0.0, 0.0);
      complex0.log();
      Complex complex1 = complex0.multiply(1737);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.add(1897.702430165257);
      complex0.isNaN();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = complex0.conjugate();
      complex4.I.sqrt();
      complex5.INF.pow((-447.093697657017));
      Complex complex6 = (Complex)complex0.readResolve();
      complex1.sqrt1z();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = Complex.valueOf(0.0, 1969.011);
      Complex complex9 = complex3.conjugate();
      complex9.I.toString();
      complex8.cosh();
      Complex complex10 = complex9.sinh();
      complex10.I.cosh();
      complex0.sinh();
      Complex.valueOf((-3257.63862), 0.0);
      complex1.toString();
      complex2.negate();
      complex7.tan();
      complex1.atan();
      complex6.atan();
      Object object0 = new Object();
      complex5.equals(object0);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-454.62780270499064), (-6.2125237414));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = Complex.valueOf((-454.62780270499064));
      complex0.subtract(2.8946401383311E-63);
      complex1.sqrt();
      complex3.equals(complex0);
      complex3.INF.pow((-6.2125237414));
      Complex complex6 = complex5.divide(2789.951648291);
      complex4.multiply(2060.337242712222);
      complex4.acos();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.ZERO.subtract(complex1);
      Complex complex2 = new Complex(Double.NaN, Double.NaN);
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(Double.NaN, Double.NaN);
      complex4.equals(complex1);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2059.337242712222), (-2059.337242712222));
      Complex complex1 = complex0.add(1685.281);
      complex1.isNaN();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.pow((-2189.039200172186));
      complex2.readResolve();
      Complex complex7 = complex3.sqrt1z();
      complex3.conjugate();
      Complex complex8 = Complex.valueOf((-7.95098893595928), 1685.281);
      complex7.conjugate();
      complex1.toString();
      Complex complex9 = complex6.cosh();
      complex0.sinh();
      complex2.cosh();
      complex4.sinh();
      complex1.nthRoot(1150);
      Complex.valueOf((-1605.0605499952692), (-447.093697657017));
      complex8.toString();
      complex1.negate();
      complex9.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(234.3224173495);
      complex2.log();
      Complex complex4 = complex1.asin();
      complex2.abs();
      Complex complex5 = Complex.I;
      complex5.isInfinite();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex4.asin();
      complex6.createComplex(20.0, Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.sqrt1z();
      complex7.pow(1778.4);
      complex3.toString();
      complex7.asin();
      Complex complex9 = complex8.conjugate();
      complex4.isNaN();
      complex7.tanh();
      complex9.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.divide(1.5503435134887695);
      Complex complex2 = Complex.INF;
      complex2.log();
      Complex complex3 = complex0.asin();
      complex3.abs();
      complex3.reciprocal();
      Complex complex4 = complex3.asin();
      complex2.subtract(0.0);
      complex3.createComplex(0.0, 1.5503435134887695);
      complex4.sqrt1z();
      Complex complex5 = complex1.pow(1.5503435134887695);
      complex5.toString();
      complex5.asin();
      Complex complex6 = complex1.conjugate();
      complex4.isNaN();
      complex0.tanh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      double double0 = 1.5503435134887695;
      complex1.ONE.divide(1.5503435134887695);
      Complex complex2 = complex1.ONE.log();
      complex1.asin();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.valueOf(2838.3805395535765);
      complex2.getField();
      Complex complex8 = complex6.divide(2838.3805395535765);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex5.sinh();
      Complex.valueOf(1.5503435134887695, (-141.227));
      Complex complex11 = complex9.cos();
      Complex complex12 = complex7.tan();
      complex12.tan();
      complex11.log();
      Complex complex13 = Complex.I;
      complex7.multiply(complex4);
      complex3.abs();
      Complex complex14 = complex12.conjugate();
      complex14.ONE.pow(3202.0300301);
      complex7.acos();
      complex14.reciprocal();
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex1.ZERO.pow(0.0);
      Complex complex5 = (Complex)complex0.INF.readResolve();
      Complex complex6 = complex0.I.add((-454.62780270499064));
      complex0.abs();
      Complex complex7 = complex6.reciprocal();
      complex4.abs();
      complex5.isInfinite();
      complex0.reciprocal();
      complex7.asin();
      Complex complex8 = Complex.valueOf(595.3372474764489, (-454.62780270499064));
      complex8.subtract(1.3850717642866474E7);
      complex3.createComplex(0.0, 595.3372474764489);
      Complex complex9 = complex3.sqrt1z();
      complex6.pow(595.3372474764489);
      complex9.toString();
      Complex complex10 = complex1.asin();
      complex9.conjugate();
      Complex complex11 = new Complex((-1839.562740398), 740.0697448627105);
      complex11.isNaN();
      complex10.tanh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.add(1897.702430165257);
      complex0.isNaN();
      Complex complex3 = new Complex(1897.702430165257);
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = Complex.valueOf(1897.702430165257, 1897.702430165257);
      Complex complex6 = complex4.I.sqrt();
      complex5.INF.pow((-447.093697657017));
      complex0.readResolve();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex4.conjugate();
      complex8.cos();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.divide(complex9);
      complex2.add(complex6);
      Complex.valueOf(1897.702430165257, 1897.702430165257);
      complex10.cosh();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      complex1.getArgument();
      Complex complex2 = complex1.ZERO.asin();
      complex0.NaN.createComplex(618.507500966, 618.507500966);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.divide(complex2);
      complex2.add(700.6237183984374);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.valueOf(0.0, 618.507500966);
      complex6.sqrt();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2789.951648291);
      Complex complex1 = Complex.valueOf(1782.65904625);
      complex1.subtract(585.558855593);
      Complex complex2 = complex0.sqrt();
      complex1.equals(complex2);
      complex2.divide(2.8946401383311E-63);
      complex2.multiply(1282.161);
      complex2.acos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      complex1.getArgument();
      Complex complex2 = complex1.ZERO.asin();
      complex0.NaN.createComplex(618.507500966, 618.507500966);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex.valueOf(0.0);
      Complex complex5 = complex1.subtract(585.6567826808727);
      complex4.sqrt();
      complex4.toString();
      Complex complex6 = new Complex((-6.552819560439773E-9));
      complex6.asin();
      Complex complex7 = Complex.ONE;
      complex7.conjugate();
      complex5.isNaN();
      complex0.tanh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.divide(1.5503435134887695);
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex1.asin();
      complex4.NaN.abs();
      complex4.isInfinite();
      Complex complex5 = complex2.reciprocal();
      complex3.abs();
      complex5.toString();
      Complex complex6 = complex4.tan();
      complex6.getField();
      Complex complex7 = complex4.divide(complex5);
      Complex complex8 = complex1.log();
      complex1.asin();
      complex4.reciprocal();
      complex5.multiply(4.344259288116142E-9);
      complex7.getArgument();
      Complex complex9 = Complex.NaN;
      complex9.readResolve();
      complex8.isInfinite();
      complex3.asin();
      complex9.multiply(4.344259288116142E-9);
      Complex complex10 = Complex.valueOf((-1241.10057233), 0.0);
      complex10.add(complex2);
      complex7.sinh();
      Complex complex11 = Complex.ONE;
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(143);
      Complex complex2 = complex1.ONE.add(517.69466029);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = Complex.INF;
      complex5.sqrt();
      complex2.equals(complex4);
      Complex complex6 = complex5.divide((double) 143);
      Complex complex7 = Complex.ONE;
      complex7.multiply((-134.9));
      complex6.acos();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2789.951648291);
      complex0.add(0.0);
      complex0.ONE.conjugate();
      Complex complex1 = complex0.sqrt();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1713.98618153524);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.I.multiply((-3271));
      Complex complex3 = complex0.reciprocal();
      complex3.readResolve();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-416.8), (-416.8));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.ONE.tan();
      complex2.INF.sqrt();
      complex2.INF.readResolve();
      Complex complex3 = Complex.NaN;
      complex0.divide(complex3);
      complex0.tanh();
      Complex complex4 = complex3.log();
      complex0.hashCode();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex1.pow(0.0);
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex7.ONE.multiply(1751.0);
      complex3.multiply((-775.260700383));
      Complex complex9 = complex4.divide((-416.8));
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex4.multiply(complex0);
      Complex.valueOf((-1800.230666118), 20.0);
      complex11.cos();
      complex11.I.subtract(complex4);
      complex5.readResolve();
      complex6.toString();
      complex10.pow((-416.8));
      complex4.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 96.37276891252681;
      Complex complex0 = Complex.valueOf(96.37276891252681);
      complex0.INF.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.cos();
      complex2.INF.cos();
      complex2.readResolve();
      complex0.add(complex1);
      complex2.cos();
      complex1.negate();
      try { 
        complex2.nthRoot((-1875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,875
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-258.21));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = Complex.valueOf((-258.21));
      complex2.ONE.exp();
      Complex complex3 = complex0.add(complex2);
      complex3.readResolve();
      Complex complex4 = complex0.divide((-258.21));
      complex4.acos();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1.0768281419102595E-106);
      complex0.equals((Object) null);
      complex0.abs();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.ZERO;
      complex1.I.pow(complex2);
      try { 
        complex1.nthRoot((-1607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,607
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1419.19009362);
      complex0.getImaginary();
      complex1.nthRoot(1);
      complex1.INF.nthRoot(1);
      complex1.getArgument();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.createComplex(1, 0.0);
      Complex complex4 = complex0.add((-379.0034629703993));
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.multiply(1);
      Complex complex7 = complex2.pow(0.0);
      complex6.I.exp();
      complex5.pow(complex2);
      complex2.readResolve();
      complex7.nthRoot(1);
      Complex complex8 = complex4.multiply(complex6);
      Complex complex9 = complex2.sinh();
      complex9.cos();
      complex3.abs();
      complex8.log();
      complex7.multiply(1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      complex1.getArgument();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.NaN.createComplex(618.507500966, 618.507500966);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ZERO.divide(complex2);
      Complex complex6 = Complex.valueOf(0.0);
      complex1.subtract(585.558855593);
      complex5.sqrt();
      complex6.equals(complex3);
      complex2.divide(0.0);
      Complex complex7 = complex2.multiply(0.5920095443725586);
      complex7.INF.acos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2631.6076496, 2631.6076496);
      Complex complex1 = complex0.I.add(Double.NaN);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.acos();
      complex0.ZERO.readResolve();
      Complex complex4 = complex0.NaN.subtract(0.0);
      complex4.ONE.cos();
      complex1.NaN.pow(190.649956606);
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = complex1.multiply((-1.0));
      complex0.abs();
      complex1.ONE.toString();
      complex1.tan();
      complex6.getField();
      complex2.I.divide(complex0);
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex1.reciprocal();
      complex5.multiply((-3084.212943647));
      complex1.getArgument();
      complex7.readResolve();
      complex9.isInfinite();
      Complex complex10 = complex9.asin();
      complex8.multiply((-1.0));
      complex2.add(complex6);
      complex7.sinh();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-31.1749695));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.tanh();
      complex2.I.getField();
      complex2.NaN.abs();
      Complex complex3 = complex1.INF.sqrt();
      complex1.ZERO.reciprocal();
      complex0.toString();
      complex3.ZERO.add(complex1);
      complex0.ONE.add((-31.1749695));
      Complex complex4 = complex1.conjugate();
      complex3.INF.exp();
      Complex complex5 = complex4.ONE.divide((-31.1749695));
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex1.subtract(complex3);
      complex4.INF.negate();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex1.ZERO.acos();
      complex8.INF.getField();
      complex1.readResolve();
      complex2.ONE.add((-31.1749695));
      Complex complex10 = complex1.tan();
      complex10.INF.pow(complex8);
      Complex.valueOf(Double.NaN, (-31.1749695));
      complex6.conjugate();
      Complex complex11 = complex3.sqrt();
      complex9.abs();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.negate();
      complex3.NaN.multiply(complex1);
      complex0.ZERO.subtract(complex2);
      Complex complex4 = complex0.divide((-5.759582672039005E-10));
      Complex complex5 = complex4.subtract(1.6793752843984384E-262);
      Complex complex6 = complex5.ZERO.pow(831.20944);
      Complex complex7 = complex0.INF.sqrt();
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex4.I.add(complex0);
      complex9.ONE.pow(0.0);
      complex5.add(1.799550702470095E-8);
      complex0.abs();
      Complex complex10 = complex8.NaN.sqrt1z();
      complex7.ONE.getArgument();
      Complex.valueOf(1.6793752843984384E-262, 0.0);
      Complex complex11 = complex8.sqrt();
      complex8.getReal();
      complex7.negate();
      complex4.log();
      complex7.toString();
      Complex complex12 = complex11.asin();
      complex12.ZERO.cosh();
      complex6.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.ZERO.multiply(873);
      Complex complex5 = complex1.ONE.divide(0.0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.I.exp();
      complex8.I.sinh();
      Complex.valueOf((-2296.828610362181));
      Complex complex9 = complex6.tanh();
      complex4.pow((-419.78692));
      complex1.pow((double) 873);
      Complex complex10 = complex4.subtract(complex7);
      Complex complex11 = Complex.ONE;
      complex1.pow(complex11);
      complex10.ZERO.sqrt();
      Complex complex12 = complex9.pow(complex3);
      complex12.abs();
      complex2.getImaginary();
      complex5.getImaginary();
      complex1.sqrt();
      complex8.subtract(complex7);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.divide(complex0);
      double double0 = 0.0;
      Complex complex4 = complex1.ZERO.pow(0.0);
      complex0.INF.readResolve();
      Complex complex5 = complex0.I.add((-454.62780270499064));
      complex0.abs();
      Complex complex6 = complex5.reciprocal();
      complex6.ZERO.tanh();
      Complex complex7 = complex0.tanh();
      complex5.INF.cosh();
      Complex.valueOf(0.0);
      complex5.getField();
      Complex complex8 = complex7.divide(0.0);
      Complex complex9 = complex1.negate();
      complex9.sinh();
      Complex complex10 = Complex.valueOf(1.0, 0.0);
      complex10.cos();
      Complex complex11 = complex8.INF.tan();
      complex11.I.tan();
      Complex complex12 = complex8.log();
      complex3.reciprocal();
      Complex complex13 = Complex.I;
      complex4.multiply(complex13);
      complex12.abs();
      complex10.conjugate();
      complex10.acos();
      Complex complex14 = complex2.reciprocal();
      try { 
        complex14.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.add(1897.702430165257);
      complex0.isNaN();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = complex0.conjugate();
      complex4.I.sqrt();
      complex5.INF.pow((-447.093697657017));
      complex0.readResolve();
      complex1.sqrt1z();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = Complex.valueOf(0.0, 1969.011);
      Complex complex8 = complex3.conjugate();
      complex8.I.toString();
      complex7.cosh();
      Complex complex9 = complex8.sinh();
      complex9.I.cosh();
      complex0.sinh();
      Complex.valueOf((-3257.63862), 0.0);
      complex1.toString();
      complex2.negate();
      complex6.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      complex0.isNaN();
      Complex complex2 = complex0.divide(0.0);
      complex2.tan();
      complex2.subtract(6.283185307179586);
      complex2.getArgument();
      complex0.isNaN();
      complex0.acos();
      complex1.isNaN();
      Complex.valueOf(643.29137780435, 7.705834203598065E-8);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.acos();
      complex3.ONE.subtract(2.0);
      Complex complex4 = complex3.INF.createComplex((-20.0), (-2462.81843111714));
      complex4.ZERO.add(complex3);
      complex1.INF.exp();
      complex1.toString();
      Complex complex5 = complex2.INF.sinh();
      complex1.INF.toString();
      Complex complex6 = Complex.ONE;
      complex2.NaN.subtract(complex6);
      Complex complex7 = complex1.log();
      complex7.ONE.getField();
      complex0.multiply(6.283185307179586);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex1.pow(6.283185307179586);
      complex10.NaN.divide(complex8);
      complex9.abs();
      complex8.tan();
      complex9.acos();
      complex5.atan();
      Complex complex11 = complex2.asin();
      complex11.sqrt1z();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(143);
      Complex complex2 = complex1.ONE.add(517.69466029);
      Complex complex3 = complex1.ZERO.pow(complex0);
      complex3.ZERO.atan();
      complex0.abs();
      complex2.add(complex1);
      try { 
        complex1.nthRoot((-497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -497
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.abs();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.INF.sqrt1z();
      complex2.ONE.exp();
      complex2.NaN.multiply((-2798.13));
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex1.ONE.sinh();
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.I.multiply(0.0);
      Complex complex6 = Complex.valueOf((-2798.13), (-4521.697941488));
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex6.cos();
      Complex complex9 = complex6.ONE.multiply(complex3);
      complex7.ZERO.negate();
      complex9.I.exp();
      Complex complex10 = complex8.I.exp();
      complex7.equals((Object) null);
      Complex complex11 = complex6.negate();
      complex1.ZERO.negate();
      complex11.nthRoot(466);
      complex8.isNaN();
      Complex complex12 = complex8.sqrt();
      complex12.ONE.getArgument();
      complex12.sinh();
      complex10.hashCode();
      Complex complex13 = complex1.sin();
      complex13.getField();
      complex11.subtract(0.0);
      complex5.readResolve();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 624.1;
      Complex complex1 = complex0.ONE.add(624.1);
      complex1.ZERO.getField();
      Complex complex2 = complex0.ONE.multiply((-581.530974501));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.pow(complex3);
      complex4.I.readResolve();
      double double1 = 0.0;
      complex2.I.pow(0.0);
      complex3.getField();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.subtract(complex1);
      complex2.ONE.toString();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.I.toString();
      complex0.hashCode();
      complex1.nthRoot(1);
      Complex complex4 = complex0.conjugate();
      complex4.ONE.sqrt1z();
      Complex complex5 = complex4.ZERO.asin();
      complex5.INF.add(complex4);
      Complex complex6 = complex0.exp();
      complex1.ZERO.tan();
      complex2.ONE.getField();
      Complex complex7 = complex1.subtract(complex6);
      complex1.toString();
      Complex complex8 = complex4.asin();
      complex8.I.reciprocal();
      complex7.readResolve();
      Complex complex9 = complex2.exp();
      complex1.isNaN();
      complex9.ZERO.abs();
      complex9.cosh();
      complex7.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex1.I.toString();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex4.conjugate();
      complex3.NaN.exp();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex0.abs();
      complex3.multiply(complex4);
      complex5.getReal();
      complex5.multiply(3598.8234597910846);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.asin();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.ONE.reciprocal();
      complex3.INF.tanh();
      try { 
        complex3.INF.nthRoot((-1139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,139
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6058173179626465);
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex0.createComplex(122.5617, 0.0);
      Complex complex3 = complex2.NaN.sinh();
      complex3.I.getField();
      complex0.INF.getField();
      Complex complex4 = complex2.NaN.subtract(complex1);
      complex4.subtract(complex1);
      complex2.INF.reciprocal();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.NaN.createComplex((-911.7422268060657), 1.6058173179626465);
      complex6.sqrt();
      Complex complex7 = complex6.I.divide((-911.7422268060657));
      complex2.cosh();
      complex7.cosh();
      complex0.acos();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = (-1045.376);
      Complex complex0 = new Complex((-1045.376));
      complex0.sqrt1z();
      complex0.ZERO.asin();
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.ZERO.pow(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.multiply(complex0);
      complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.pow(1.79214305133496E-187);
      complex3.I.abs();
      complex3.INF.divide(1.79214305133496E-187);
      complex0.sqrt();
      complex2.add(6.283185307179586);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex2.getField();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.multiply(2.0);
      Complex complex4 = complex1.subtract(complex0);
      complex4.I.reciprocal();
      complex1.ONE.subtract(2.0);
      complex1.pow(complex2);
      Complex complex5 = complex4.tanh();
      complex5.isInfinite();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.I.multiply(0);
      complex2.asin();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex3.NaN.divide(complex1);
      complex4.hashCode();
      Complex complex5 = complex3.sqrt1z();
      complex1.INF.getField();
      Complex complex6 = complex5.INF.sinh();
      complex6.sqrt();
      complex5.toString();
      complex0.hashCode();
      Complex complex7 = complex3.exp();
      complex1.ZERO.reciprocal();
      Complex complex8 = complex2.pow((double) 0);
      complex7.pow(complex2);
      Complex complex9 = complex8.divide(1.530436781375042E19);
      complex9.I.multiply(complex3);
      complex5.exp();
      complex9.divide(1.530436781375042E19);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.INF.conjugate();
      complex1.I.getArgument();
      complex1.I.abs();
      Complex complex4 = complex1.ONE.add(1058.0);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex4.INF.reciprocal();
      complex1.getReal();
      Complex complex7 = complex5.subtract(complex4);
      complex4.ONE.conjugate();
      Complex complex8 = complex5.add(complex4);
      Complex complex9 = complex1.pow(complex7);
      Complex complex10 = complex9.NaN.atan();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex7.pow(complex8);
      complex12.I.multiply(Double.NaN);
      complex11.NaN.log();
      Complex.valueOf((-2800.84));
      complex1.getArgument();
      Complex complex13 = complex11.acos();
      double double0 = complex13.getArgument();
      assertEquals(-0.0, double0, 0.01);
      
      complex0.abs();
      Complex complex14 = complex13.multiply(Double.NaN);
      assertSame(complex14, complex10);
      assertEquals(1.5707963267948966, complex13.getReal(), 0.01);
      assertTrue(complex11.equals((Object)complex6));
      
      complex3.cosh();
      assertSame(complex2, complex7);
      
      complex0.negate();
      Complex complex15 = complex4.conjugate();
      assertEquals(1059.0, complex15.getReal(), 0.01);
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-1983.771410972), Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide((-1983.771410972));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      
      Complex complex3 = complex0.ONE.add(complex1);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      
      boolean boolean0 = complex0.equals("");
      assertFalse(boolean0);
      assertTrue(complex0.isNaN());
      
      Complex complex4 = (Complex)complex1.readResolve();
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.INF.pow(complex1);
      int int0 = 1264;
      complex2.nthRoot(1264);
      complex0.readResolve();
      Complex complex3 = complex0.INF.multiply(1);
      complex3.NaN.conjugate();
      complex3.sqrt();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.divide(1.5503435134887695);
      complex1.ONE.log();
      Complex complex3 = complex1.asin();
      double double0 = complex3.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex3.isInfinite();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.subtract(1.5503435134887695);
      Complex complex7 = complex6.createComplex(1.5503435134887695, 1.5503435134887695);
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.NaN.pow(1.5503435134887695);
      assertTrue(complex9.isNaN());
      
      String string0 = complex6.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex10 = complex4.asin();
      Complex complex11 = complex1.conjugate();
      complex7.isNaN();
      assertEquals((-0.8492962300960332), complex6.getReal(), 0.01);
      
      Complex complex12 = complex10.tanh();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0344027905271984, complex12.getReal(), 0.01);
      assertEquals((-0.08097935637036051), complex12.getImaginary(), 0.01);
      
      double double1 = complex8.abs();
      assertTrue(complex0.equals((Object)complex11));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.7131147919147831, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(644.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.I.multiply(644.0);
      Complex complex2 = complex1.I.asin();
      assertEquals(0.8813735870195428, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex0.I.multiply(644.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.subtract(complex1);
      assertEquals((-644.0), complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex5 = complex0.atan();
      assertEquals((-5.551115123125783E-17), complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(1376.82065996);
      Complex complex2 = complex1.ZERO.cosh();
      complex1.isNaN();
      Complex complex3 = (Complex)complex0.I.readResolve();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.sinh();
      assertEquals(1.1752011936438014, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex4.conjugate();
      assertTrue(complex2.equals((Object)complex6));
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex7.getReal(), 0.01);
  }
}
