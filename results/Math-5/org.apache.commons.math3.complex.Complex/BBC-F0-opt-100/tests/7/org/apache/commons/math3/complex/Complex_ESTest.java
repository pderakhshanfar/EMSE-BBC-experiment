/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:58:47 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex0.cos();
      complex0.toString();
      Complex complex3 = complex1.tan();
      complex0.add(complex3);
      complex1.pow(complex2);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(7425.59406337, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.2945535544461038, 3.1);
      Complex complex1 = complex0.subtract((-538.3758722336));
      complex1.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.pow(complex3);
      complex4.add(complex1);
      Complex complex5 = Complex.valueOf(3.1, Double.POSITIVE_INFINITY);
      complex1.nthRoot(3210);
      complex2.asin();
      complex5.asin();
      complex0.sin();
      complex5.multiply(3210);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex.valueOf((-7.756586280975558E-10));
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(7.685235201534525E71, (-7.756586280975558E-10));
      Complex.valueOf(6.283185307179586, 7.685235201534525E71);
      complex1.acos();
      Complex complex3 = Complex.I;
      complex2.acos();
      Complex complex4 = complex0.conjugate();
      complex4.multiply(226);
      Complex complex5 = new Complex(226);
      complex5.getArgument();
      Complex complex6 = Complex.ONE;
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-3.351737810658083), Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4164.45139005416, Double.NaN);
      Complex complex2 = complex1.cos();
      Complex complex3 = new Complex(0.618990892446662);
      Complex complex4 = complex3.sin();
      complex1.tan();
      complex2.asin();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7179924024793253E227);
      complex0.ZERO.exp();
      Complex complex1 = new Complex(3.7179924024793253E227, 3.7179924024793253E227);
      Complex complex2 = complex0.divide(complex1);
      complex2.pow(complex0);
      complex2.sinh();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-1.5536658521931418E118));
      complex0.divide(Double.NaN);
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex((-203.88842606693217));
      complex1.INF.tan();
      complex2.hashCode();
      complex1.sin();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.ONE;
      complex3.asin();
      complex4.divide((-1956.7754259639));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.3230737988528203);
      Complex complex1 = Complex.valueOf(2.3230737988528203, 2.3230737988528203);
      complex1.multiply(complex0);
      Complex complex2 = Complex.valueOf(0.36787944117144233, 77.0527557930844);
      complex1.divide(complex2);
      complex2.subtract((-1.0));
      Complex complex3 = Complex.I;
      complex1.atan();
      Complex complex4 = new Complex(Double.NaN, (-1.4356011804377797E-9));
      Complex complex5 = new Complex(1.0);
      complex5.acos();
      Complex complex6 = Complex.I;
      complex2.acos();
      complex3.conjugate();
      complex1.multiply((-1129));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.NaN, 1.0058765411376953);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.reciprocal();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = (-1761.81757377601);
      Complex complex0 = Complex.valueOf((-1761.81757377601), (-1761.81757377601));
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.add((-550.25));
      Complex.valueOf(4.5747479502862494E-124, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-1332.89299), (-2436.811564));
      Complex complex1 = complex0.createComplex(0.5186077356338501, (-1638.7173500176016));
      Complex complex2 = Complex.valueOf((-1332.89299));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf((-4947.6380873), (-1968.2995865));
      Complex complex5 = complex4.multiply(complex2);
      Complex.valueOf(1.5707963267948966, (-4984.0));
      Complex complex6 = complex5.divide(complex1);
      complex6.subtract((-1638.7173500176016));
      complex6.divide(2548.4616);
      Complex complex7 = Complex.I;
      complex3.atan();
      Complex complex8 = Complex.INF;
      complex0.toString();
      complex8.acos();
      Complex complex9 = Complex.I;
      complex0.acos();
      complex1.conjugate();
      Complex complex10 = Complex.valueOf(0.36787944117144233);
      complex10.pow(8.186752736838443E-7);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.8));
      Complex complex1 = Complex.INF;
      complex0.INF.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.negate();
      complex0.getField();
      Complex complex4 = new Complex(1133.514399844, Double.POSITIVE_INFINITY);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(2548.4616, (-77.0527557930844));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-77.0527557930844), (-1757.4604));
      Complex complex4 = complex1.multiply(complex3);
      Complex.valueOf((-1757.4604), (-4984.0));
      complex2.divide(complex3);
      complex3.subtract((-77.0527557930844));
      complex3.divide(0.41421356237309515);
      Complex complex5 = Complex.I;
      complex4.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(20.0, (-2120.627210835206));
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.sqrt();
      complex1.INF.cos();
      Complex complex2 = complex1.cos();
      complex2.ONE.toString();
      complex0.ONE.cosh();
      complex1.NaN.multiply((double) 1);
      complex0.nthRoot(1);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getArgument();
      Complex complex1 = complex0.asin();
      complex0.abs();
      Complex complex2 = complex1.tanh();
      complex2.asin();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.isNaN();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex3.tan();
      complex4.NaN.log();
      complex3.I.add(20.0);
      complex2.readResolve();
      complex1.toString();
      complex3.pow((-964.382395219));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf(2930.3456);
      complex1.equals(complex3);
      complex0.acos();
      complex3.subtract(2930.3456);
      complex0.log();
      Complex complex4 = complex0.acos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5775.789395565709, 745.98904);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.sqrt1z();
      complex2.ZERO.readResolve();
      complex3.ZERO.sqrt();
      Complex complex4 = complex1.createComplex(1.1071487177940904, (-1905.842716579582));
      complex4.sinh();
      complex4.toString();
      complex4.sin();
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.INF.pow(complex0);
      Complex complex5 = Complex.I;
      complex2.atan();
      Complex complex6 = Complex.INF;
      complex3.NaN.sqrt();
      complex4.toString();
      Complex complex7 = complex0.acos();
      Complex complex8 = Complex.I;
      Complex complex9 = complex5.acos();
      complex9.INF.createComplex(1127.8151741912, Double.POSITIVE_INFINITY);
      complex7.conjugate();
      complex2.nthRoot(907);
      complex7.sqrt1z();
      complex2.isInfinite();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex2.INF.sinh();
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.atan();
      complex3.toString();
      complex4.log();
      Complex complex5 = Complex.INF;
      complex5.acos();
      Complex complex6 = complex3.reciprocal();
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.tan();
      complex1.pow(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.hashCode();
      complex2.getField();
      Complex complex6 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.cos();
      Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex8 = Complex.valueOf(2.0);
      Complex complex9 = complex8.sin();
      complex7.tan();
      Complex complex10 = complex4.multiply(22.417658413528162);
      complex10.NaN.multiply(complex9);
      complex6.atan();
      Complex complex11 = Complex.NaN;
      complex8.isInfinite();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(3.8331545111676784E-249);
      Complex complex2 = complex1.NaN.pow((-1124.1161096));
      complex2.NaN.sqrt();
      complex1.I.multiply(1431655765);
      complex1.log();
      complex0.tanh();
      Complex complex3 = complex1.multiply((-2323.3252663902));
      Complex complex4 = complex3.I.negate();
      complex4.I.add((double) 1431655765);
      Complex complex5 = complex3.createComplex((-2323.3252663902), Double.NaN);
      Complex complex6 = complex3.divide(complex5);
      complex6.toString();
      Complex complex7 = Complex.valueOf((-1.0));
      Complex complex8 = complex7.subtract(complex5);
      complex8.INF.tan();
      complex7.ZERO.conjugate();
      Complex.valueOf(1.0446761650634044, (-143.05097088358));
      complex1.divide(complex7);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(791.0012, 791.0012);
      complex0.sqrt();
      Complex complex1 = new Complex((-3442.0548446150106), 3.0);
      complex0.acos();
      Complex.valueOf(3.0, 791.0012);
      Complex complex2 = Complex.valueOf(4650.17162177156, 1.657668502165438E-19);
      Complex complex3 = complex1.multiply(complex0);
      complex2.divide(complex1);
      Complex complex4 = complex3.cosh();
      complex4.multiply(1.657668502165438E-19);
      Complex complex5 = new Complex((-2830.885389), 4.0891054447206644E61);
      complex5.nthRoot(1613);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.sqrt1z();
      complex7.isInfinite();
      complex6.tan();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.2));
      Complex complex1 = complex0.ZERO.subtract((-1860.12));
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf((-2153.2), (-3442.0548446150106));
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex5.subtract((-1956.5111022));
      complex4.divide((-1956.5111022));
      Complex complex7 = complex1.atan();
      complex7.toString();
      complex6.acos();
      Complex.valueOf((-1860.12), (-2153.2));
      try { 
        complex7.nthRoot((-2729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,729
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex((-1757.4604), (-1757.4604));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.divide(complex6);
      complex1.subtract(1.059309482574463);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex4.atan();
      complex3.toString();
      complex1.acos();
      complex1.log();
      complex1.acos();
      complex7.multiply(complex5);
      complex3.multiply(complex7);
      Complex complex8 = complex1.add((-883.7060922));
      Complex complex9 = new Complex(7.511345862426836, (-2670.4615));
      complex9.reciprocal();
      complex8.multiply(434);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex2.cos();
      Complex complex5 = Complex.valueOf((-910.7971337843352), Double.POSITIVE_INFINITY);
      complex0.hashCode();
      complex4.sin();
      Complex complex6 = new Complex(0.0, (-309.024463284));
      complex6.tan();
      complex5.multiply((-910.7971337843352));
      complex4.atan();
      complex4.createComplex(0.0, 2751.64602);
      Complex.valueOf(2.287280262665656E-62);
      Complex complex7 = Complex.NaN;
      complex6.multiply(2143254293);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.sqrt();
      complex0.ONE.cosh();
      complex1.NaN.multiply((double) 1);
      complex0.nthRoot(1);
      complex0.sqrt1z();
      Complex complex2 = complex0.add(2548.9839815262167);
      Complex complex3 = complex2.reciprocal();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(2701.5338703, 626.286940266);
      Complex complex1 = complex0.negate();
      complex1.NaN.createComplex(1828.86, (-6.344612631552417E-136));
      complex0.log();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex2.ONE.readResolve();
      Complex complex3 = Complex.valueOf((-1633.5202));
      complex3.ONE.getArgument();
      complex0.readResolve();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.NaN.add(5442.41);
      Complex complex3 = complex2.ONE.tan();
      complex0.abs();
      complex0.readResolve();
      Complex complex4 = complex1.createComplex(Double.POSITIVE_INFINITY, (-204.68040422));
      Complex complex5 = complex4.ZERO.asin();
      complex4.ZERO.hashCode();
      Complex complex6 = complex4.ZERO.atan();
      complex6.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.subtract(complex7);
      Complex complex9 = complex3.createComplex((-204.68040422), (-204.68040422));
      complex9.NaN.add(complex5);
      complex4.INF.sqrt();
      complex1.sqrt();
      Complex complex10 = complex5.add(complex2);
      complex4.NaN.getField();
      complex10.getField();
      complex6.getImaginary();
      complex8.log();
      Complex.valueOf((-1509.345));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3086.326750344);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.I.tan();
      complex4.pow(complex0);
      Complex complex6 = complex5.I.negate();
      complex0.hashCode();
      complex0.getField();
      Complex complex7 = complex6.divide(3086.326750344);
      complex5.cos();
      complex5.NaN.multiply(0.07604065158522855);
      Complex.valueOf(0.0, 2.0);
      complex0.hashCode();
      complex5.sin();
      complex6.tan();
      Complex complex8 = complex0.multiply(2943841.83952);
      complex8.acos();
      Complex complex9 = complex3.conjugate();
      complex4.readResolve();
      complex1.sqrt();
      Complex complex10 = Complex.NaN;
      complex10.acos();
      complex3.isInfinite();
      Complex complex11 = Complex.INF;
      complex7.equals(complex0);
      complex5.readResolve();
      Complex complex12 = Complex.valueOf(0.0, 3562.867);
      complex12.multiply(2742.007373);
      complex12.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3086.326750344);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = new Complex(3086.326750344, 3086.326750344);
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex4.subtract((-3663.5289));
      Complex complex10 = complex9.divide(0.3595926005194756);
      complex10.atan();
      complex8.toString();
      complex9.acos();
      complex3.log();
      complex6.acos();
      Complex complex11 = Complex.valueOf((-3663.5289), 1321.29294);
      complex11.conjugate();
      complex6.readResolve();
      Complex complex12 = Complex.INF;
      complex12.sqrt();
      complex1.acos();
      complex12.isInfinite();
      Complex complex13 = Complex.INF;
      complex10.equals(complex7);
      complex1.readResolve();
      complex10.multiply(3086.326750344);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex((-1757.4604), (-1757.4604));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = Complex.INF;
      complex3.hashCode();
      complex3.getField();
      complex6.divide((-1841.04));
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.valueOf(316.9866, (-1841.04));
      Complex complex9 = Complex.ZERO;
      complex9.hashCode();
      complex7.sin();
      complex5.tan();
      complex5.multiply((-3840775.11697779));
      complex1.atan();
      Complex complex10 = complex9.createComplex((-1276.816199882), (-1841.04));
      Complex.valueOf(316.9866);
      complex2.toString();
      complex3.divide((-1757.4604));
      complex10.toString();
      try { 
        complex8.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.2));
      Complex complex1 = complex0.ZERO.subtract((-1860.12));
      Complex complex2 = new Complex((-3442.0548446150106), (-3442.0548446150106));
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf((-1956.5111022));
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.subtract((-1956.5111022));
      Complex complex8 = complex5.divide((-542.817785));
      Complex complex9 = complex1.atan();
      Complex complex10 = Complex.valueOf((-3442.0548446150106));
      complex10.asin();
      Complex complex11 = complex7.conjugate();
      Complex complex12 = Complex.INF;
      complex6.pow(complex11);
      complex8.getArgument();
      complex10.sqrt();
      Complex complex13 = Complex.ONE;
      Object object0 = new Object();
      complex13.equals(object0);
      complex0.acos();
      Complex complex14 = Complex.ONE;
      complex14.getField();
      complex12.sqrt1z();
      complex9.sinh();
      complex11.reciprocal();
      try { 
        complex4.nthRoot((-977));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -977
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
      Complex complex1 = complex0.acos();
      complex1.multiply(complex0);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf((-1813.0));
      complex3.divide(complex2);
      Complex complex4 = complex1.subtract((-1813.0));
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex4.atan();
      complex2.toString();
      complex4.acos();
      Complex complex6 = complex1.log();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex6.conjugate();
      complex7.readResolve();
      Complex complex9 = Complex.I;
      complex9.sqrt();
      complex2.acos();
      complex8.isInfinite();
      Complex complex10 = Complex.INF;
      complex5.equals(complex2);
      complex4.readResolve();
      complex1.multiply(1.059309482574463);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex((-1757.4604), (-1757.4604));
      Complex complex3 = complex0.subtract(complex1);
      complex0.exp();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex1.sqrt();
      complex4.divide(complex6);
      complex4.createComplex((-380.56039999999985), (-1757.4604));
      complex4.add(2033.2943039);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.2));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      complex2.log();
      Complex complex3 = complex2.conjugate();
      complex3.tan();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      Complex.valueOf((double) 1);
      complex0.nthRoot(1);
      complex0.sqrt1z();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3018.004099163, 165.45410326696663);
      complex1.INF.subtract(1.2493910789489746);
      Complex complex2 = new Complex(1.0, 1.2493910789489746);
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3086.326750344);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = Complex.I;
      complex2.INF.log();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex4.I.negate();
      complex0.hashCode();
      complex0.getField();
      complex6.divide(3086.326750344);
      complex4.cos();
      Complex complex7 = Complex.valueOf(0.0, 2.0);
      complex0.hashCode();
      complex5.add(3086.326750344);
      Complex complex8 = new Complex(0.0, 2.0);
      complex8.reciprocal();
      complex7.tanh();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sin();
      complex0.tan();
      complex1.multiply((-894.0));
      complex1.atan();
      complex1.createComplex(8.367857513760093, 209.1719258223);
      Complex.valueOf(3075.0);
      complex1.toString();
      complex3.divide(209.1719258223);
      complex3.toString();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex((-1757.4604), (-1757.4604));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.acos();
      complex2.multiply(complex4);
      Complex complex5 = Complex.INF;
      complex3.divide(complex5);
      complex1.subtract(1.059309482574463);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex4.atan();
      complex3.toString();
      Complex complex6 = complex1.acos();
      complex1.log();
      complex1.acos();
      complex6.ONE.conjugate();
      complex2.readResolve();
      complex0.sqrt();
      complex6.acos();
      complex3.isInfinite();
      Complex complex7 = Complex.INF;
      complex7.equals(complex3);
      complex4.readResolve();
      complex3.multiply((-1757.4604));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.sqrt();
      complex1.toString();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.acos();
      complex4.readResolve();
      Complex complex5 = complex2.sqrt();
      complex5.ONE.pow(complex0);
      Complex complex6 = complex3.acos();
      complex4.isInfinite();
      complex1.equals(complex6);
      Complex complex7 = Complex.valueOf((double) 1, 2.018584871269913);
      complex7.readResolve();
      complex1.multiply(Double.NaN);
      complex6.multiply((-1902.2111391));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.2));
      Complex complex1 = complex0.ZERO.subtract((-1860.12));
      Complex complex2 = new Complex((-3442.0548446150106), (-3442.0548446150106));
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf((-1956.5111022));
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.subtract((-1956.5111022));
      complex5.divide((-542.817785));
      Complex complex8 = complex1.atan();
      complex8.toString();
      complex7.acos();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.tan();
      complex10.multiply((-1860.12));
      complex3.atan();
      complex7.createComplex(2321.069185, 2751.64602);
      Complex.valueOf((-1541.39254));
      complex7.toString();
      Complex complex11 = Complex.INF;
      complex11.divide((-1541.39254));
      complex2.toString();
      complex3.nthRoot(906);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.6400070480930697E-114);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(9.495158151301779E-10);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.I.pow(complex2);
      complex6.NaN.sin();
      Complex complex8 = complex0.atan();
      complex8.ZERO.abs();
      complex1.readResolve();
      complex4.hashCode();
      Complex complex9 = complex4.subtract(complex7);
      Complex complex10 = complex1.tan();
      complex4.getReal();
      Complex complex11 = Complex.I;
      complex8.isNaN();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.divide(complex8);
      complex9.pow(complex5);
      complex4.getField();
      complex10.sqrt1z();
      complex0.createComplex(1.6400070480930697E-114, 0.0);
      Complex complex14 = new Complex(0.0);
      complex13.pow(complex14);
      complex3.subtract(0.0);
      complex10.pow(42.7341966976734);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex((-1757.4604), (-1757.4604));
      complex0.subtract(complex1);
      Complex complex3 = complex0.log();
      complex1.ONE.hashCode();
      complex1.ONE.nthRoot(1);
      complex1.getField();
      complex1.acos();
      complex3.divide(1337639.6656163195);
      Complex complex4 = complex1.atan();
      complex2.toString();
      Complex complex5 = complex2.acos();
      complex4.INF.readResolve();
      Complex complex6 = complex4.log();
      Complex complex7 = complex5.acos();
      Complex complex8 = Complex.NaN;
      complex7.readResolve();
      complex6.sqrt();
      Complex complex9 = complex0.acos();
      complex9.isInfinite();
      Complex complex10 = new Complex(2.717587665301835E-4, (-1757.4604));
      complex10.equals(complex2);
      complex10.readResolve();
      complex1.multiply(720.2561708501196);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.6400070480930697E-114);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(9.495158151301779E-10);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.ZERO.subtract(complex2);
      complex4.I.pow(complex2);
      complex4.NaN.sin();
      Complex complex6 = complex0.atan();
      complex6.ZERO.abs();
      Complex complex7 = (Complex)complex1.readResolve();
      Complex complex8 = complex7.subtract(42.7341966976734);
      Complex.valueOf(1.6400070480930697E-114, 42.7341966976734);
      Complex complex9 = complex4.subtract(0.0);
      Complex complex10 = complex7.exp();
      Complex complex11 = complex2.divide(complex5);
      complex10.nthRoot(3573);
      complex0.sinh();
      complex11.sinh();
      Complex complex12 = Complex.NaN;
      complex12.divide((-458.123440737866));
      complex9.add(complex7);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      complex0.acos();
      Complex complex3 = complex2.multiply(complex1);
      complex1.divide(complex3);
      Complex complex4 = complex3.subtract((-2153.2));
      Complex complex5 = complex0.divide((-2153.2));
      Complex complex6 = Complex.I;
      complex1.toString();
      complex4.acos();
      Complex complex7 = complex4.log();
      Complex complex8 = complex3.acos();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.I;
      Complex complex12 = complex2.pow(complex11);
      complex5.getArgument();
      complex8.sqrt();
      complex5.equals(complex12);
      complex5.acos();
      complex11.getField();
      Complex complex13 = complex12.sqrt1z();
      complex7.sinh();
      complex6.reciprocal();
      complex13.nthRoot(1);
      complex3.toString();
      complex7.getReal();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-2153.2), (-2153.2));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex1.subtract(complex2);
      complex0.sqrt();
      complex1.divide(complex5);
      complex2.createComplex((-674.23382026317), (-380.56039999999985));
      Complex complex6 = Complex.ZERO;
      complex6.pow(complex4);
      Complex complex7 = new Complex(0.9999997900353684);
      Complex complex8 = complex7.conjugate();
      complex8.multiply(3529);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex1.subtract(2856.32216206724);
      complex5.divide(2856.32216206724);
      Complex complex7 = complex2.atan();
      complex7.toString();
      complex3.acos();
      Complex complex8 = Complex.valueOf(2856.32216206724, 2856.32216206724);
      complex8.log();
      complex3.acos();
      Complex complex9 = Complex.NaN;
      complex0.readResolve();
      Complex complex10 = new Complex(65.9012878292712, 65.9012878292712);
      complex10.sqrt();
      Complex complex11 = Complex.valueOf(2856.32216206724, 65.9012878292712);
      complex11.acos();
      complex3.isInfinite();
      Complex complex12 = new Complex((-5269.3), 3169.28112553933);
      Complex complex13 = Complex.I;
      complex7.equals(complex13);
      complex8.readResolve();
      complex6.multiply((-802.8850947));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.2));
      Complex complex1 = complex0.ZERO.subtract((-1860.12));
      Complex complex2 = new Complex((-3442.0548446150106), (-3442.0548446150106));
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf((-1956.5111022));
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.subtract((-1956.5111022));
      Complex complex8 = complex5.divide((-542.817785));
      Complex complex9 = complex1.atan();
      complex9.toString();
      complex7.acos();
      complex3.log();
      Complex complex10 = complex1.acos();
      complex8.readResolve();
      complex8.sqrt();
      Complex complex11 = new Complex((-0.9999997900353684));
      complex11.acos();
      complex5.isInfinite();
      complex0.equals(complex5);
      complex6.readResolve();
      complex10.multiply(2.6605043411254883);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(791.0012, 791.0012);
      Complex complex1 = complex0.sqrt();
      complex0.isNaN();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(791.0012);
      complex1.tan();
      complex1.readResolve();
      complex1.toString();
      double double0 = 3.9036541111764032E-140;
      Complex complex3 = complex2.pow(1498.23);
      complex3.exp();
      int int0 = 1;
      Complex complex4 = new Complex(3.9036541111764032E-140, 1);
      complex1.subtract(0.7853981633974483);
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.2));
      Complex complex1 = complex0.ZERO.subtract((-1860.12));
      complex0.isNaN();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(3.141592653589793);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = (Complex)complex1.readResolve();
      complex1.toString();
      Complex complex5 = complex1.ONE.pow(3.9036541111764032E-140);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = new Complex((-2153.2), (-2153.2));
      Complex complex8 = complex7.ONE.subtract(1.4715152230577016E25);
      complex4.abs();
      complex8.hashCode();
      complex2.subtract(complex3);
      complex1.tan();
      complex3.getReal();
      Complex complex9 = complex1.cosh();
      complex4.isNaN();
      Complex complex10 = complex9.pow(complex6);
      complex8.getField();
      complex5.sqrt1z();
      complex10.createComplex(3.9036541111764032E-140, 1904.9579);
      Complex complex11 = new Complex(1860.12);
      complex6.pow(complex10);
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1335);
      complex0.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf((double) 1335, (double) 1335);
      complex0.hashCode();
      complex2.sin();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.subtract((-7.853944465095286E-8));
      complex4.subtract((-7.853944465095286E-8));
      complex3.subtract(0.0);
      complex3.exp();
      complex2.divide(complex5);
      Complex complex6 = new Complex(1335, 3573);
      complex6.nthRoot(1335);
      complex3.sinh();
      complex3.sinh();
      try { 
        complex4.nthRoot((-1552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,552
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add((-380.56039999999985));
      Complex complex1 = complex0.createComplex((-4194.206365319), 90.3);
      complex0.add((-1446.874053));
      complex1.sin();
      complex1.sin();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.INF.divide(complex2);
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex6.add((-1446.874053));
      complex3.getReal();
      Complex complex8 = complex5.cosh();
      complex8.NaN.tan();
      complex8.INF.pow((-414.34166474));
      complex1.isNaN();
      complex2.pow(complex7);
      complex0.getField();
      complex0.sqrt1z();
      complex3.createComplex(90.3, 90.3);
      Complex complex9 = new Complex(90.3);
      complex3.pow(complex6);
      complex1.subtract(6.503128678219282E-9);
      complex5.multiply(2.0);
      complex2.multiply((-1297.075801326));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(3086.326750344);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex6.NaN.createComplex(3086.326750344, 3086.326750344);
      Complex complex8 = complex7.I.negate();
      complex0.hashCode();
      complex0.getField();
      complex8.divide(3086.326750344);
      complex5.cos();
      Complex complex9 = Complex.valueOf(0.0, 2.0);
      complex0.hashCode();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex8.tan();
      complex11.NaN.subtract(42.7341966976734);
      Complex complex12 = complex11.ZERO.subtract(0.0);
      Complex complex13 = complex9.subtract((-2496.447771181));
      Complex complex14 = complex0.exp();
      complex14.divide(complex13);
      complex5.nthRoot(3573);
      complex7.sinh();
      complex7.sinh();
      // Undeclared exception!
      complex12.nthRoot(3573);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.6400070480930697E-114);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(9.495158151301779E-10);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex0.conjugate();
      complex6.I.pow(complex2);
      complex6.NaN.sin();
      Complex complex7 = complex0.atan();
      complex7.ZERO.abs();
      Complex complex8 = (Complex)complex1.readResolve();
      complex8.subtract(42.7341966976734);
      complex4.subtract(9.495158151301779E-10);
      complex4.subtract(0.0);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex6.divide(complex5);
      complex9.nthRoot(3573);
      complex0.sinh();
      complex10.sinh();
      try { 
        complex9.nthRoot((-1628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,628
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.051832187648021666, 0.051832187648021666);
      complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.divide(complex0);
      complex2.NaN.exp();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex4.ZERO.sinh();
      complex4.ZERO.abs();
      Complex complex6 = complex5.INF.acos();
      complex1.nthRoot(1);
      Complex complex7 = complex0.multiply((double) 1);
      complex7.ZERO.sqrt();
      Complex complex8 = complex1.asin();
      complex1.abs();
      complex1.hashCode();
      complex3.ONE.subtract(complex5);
      complex8.tan();
      complex3.getReal();
      complex4.cosh();
      complex8.isNaN();
      complex2.pow(complex1);
      complex1.getField();
      complex0.sqrt1z();
      complex3.createComplex(2.728646101872049, 2.728646101872049);
      Complex complex9 = new Complex(14.101419448852539);
      complex6.pow(complex9);
      complex6.subtract((-1742.730038823387));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      complex0.acos();
      Complex complex3 = complex2.multiply(complex1);
      complex1.divide(complex3);
      Complex complex4 = complex3.subtract((-2153.2));
      complex0.divide((-2153.2));
      complex3.atan();
      complex1.toString();
      Complex complex5 = complex4.acos();
      complex4.log();
      Complex complex6 = complex3.acos();
      Complex complex7 = Complex.NaN;
      complex7.readResolve();
      complex5.sqrt();
      complex2.acos();
      complex1.isInfinite();
      Complex complex8 = new Complex((-2153.2), (-5269.3));
      complex1.equals(complex8);
      complex6.readResolve();
      complex8.multiply((-5269.3));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(791.0012, 791.0012);
      Complex complex1 = complex0.subtract(791.0012);
      complex1.isNaN();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-1860.12));
      Complex complex3 = complex2.tan();
      complex2.readResolve();
      complex3.INF.abs();
      complex3.toString();
      Complex complex4 = complex2.pow(791.0012);
      Complex complex5 = complex3.exp();
      Complex complex6 = new Complex((-1.032634625827871E-7), 6.283185307179586);
      Complex complex7 = complex1.subtract((-781.7186306273055));
      Complex complex8 = complex7.multiply(complex1);
      complex0.multiply(complex5);
      complex7.nthRoot(243);
      Complex complex9 = complex3.multiply(413412658);
      complex8.toString();
      complex4.asin();
      complex5.subtract(complex8);
      complex1.subtract((-1860.12));
      complex1.getArgument();
      complex0.getField();
      complex1.readResolve();
      complex9.log();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex2.sqrt();
      complex4.INF.divide(complex2);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex4.atan();
      Complex.valueOf(6.562319473965767E278, (-394.8330206689657));
      Complex complex8 = Complex.valueOf(6.562319473965767E278);
      complex8.sqrt();
      Complex complex9 = complex1.multiply(3087.0);
      complex7.divide(complex1);
      Complex complex10 = complex0.tan();
      complex7.asin();
      complex4.sinh();
      Complex complex11 = new Complex(6.562319473965767E278);
      complex11.sin();
      complex7.subtract(0.06429435312747955);
      Complex complex12 = complex9.add(complex5);
      Complex complex13 = complex0.exp();
      complex10.conjugate();
      Complex complex14 = Complex.NaN;
      complex14.readResolve();
      Complex complex15 = complex9.pow(complex0);
      complex10.toString();
      complex6.reciprocal();
      complex12.tan();
      complex13.negate();
      complex15.negate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      complex1.subtract(complex0);
      Complex complex3 = complex2.sqrt();
      complex3.INF.divide(complex2);
      Complex complex4 = complex0.pow(complex3);
      complex4.add((-1446.874053));
      complex3.INF.createComplex(90.3, 2786.53570957);
      Complex complex5 = complex1.add(64.226196837423);
      complex5.I.sin();
      Complex complex6 = complex3.sin();
      complex6.ZERO.tanh();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(791.0012, 791.0012);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.INF.multiply(complex0);
      complex2.INF.divide(complex0);
      complex2.I.subtract(791.0012);
      Complex complex4 = complex1.ONE.divide(791.0012);
      complex1.I.atan();
      complex4.I.toString();
      complex0.acos();
      Complex complex5 = complex1.log();
      complex5.NaN.acos();
      complex5.ONE.readResolve();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.acos();
      complex6.isInfinite();
      Complex complex8 = Complex.ZERO;
      Object object0 = complex8.readResolve();
      complex4.equals(object0);
      complex7.readResolve();
      complex3.multiply((-73.71564799));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1207.2113372431302, 1.4199501303738373E-65);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex3.NaN.exp();
      complex2.I.cos();
      Complex complex5 = complex3.NaN.sqrt1z();
      complex5.ZERO.abs();
      Complex complex6 = complex5.INF.acos();
      complex2.nthRoot(1);
      complex0.multiply((double) 1);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex4.asin();
      Complex complex9 = Complex.valueOf(908.0);
      complex9.abs();
      complex4.hashCode();
      Complex complex10 = complex3.subtract(complex5);
      Complex complex11 = complex7.tan();
      complex8.getReal();
      Complex complex12 = complex1.cosh();
      complex11.isNaN();
      complex2.pow(complex12);
      complex10.getField();
      complex12.sqrt1z();
      complex11.createComplex((-1556.05547795294), (-1241.283647667919));
      Complex complex13 = new Complex(0.0);
      complex1.pow(complex4);
      Complex complex14 = Complex.NaN;
      complex14.subtract((-2620.175152));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.I.atan();
      complex4.I.readResolve();
      complex1.I.pow(0.0);
      Complex.valueOf((-1.0), 0.0);
      complex0.nthRoot(185);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-853.4755968069547));
      complex0.ONE.reciprocal();
      Complex complex1 = Complex.valueOf((-853.4755968069547));
      complex1.NaN.getField();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.I.createComplex(184.45619, 2450.30651282037);
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex4.NaN.subtract((-853.4755968069547));
      Complex complex6 = complex3.I.add(complex0);
      complex6.INF.getArgument();
      Complex complex7 = complex6.multiply(1117);
      complex4.I.createComplex(0.0, (-853.4755968069547));
      Complex complex8 = complex7.subtract(2450.30651282037);
      complex8.NaN.tanh();
      complex0.toString();
      Complex complex9 = complex3.negate();
      complex0.cosh();
      complex9.abs();
      Complex complex10 = complex2.multiply(complex4);
      complex4.getImaginary();
      complex5.pow(complex10);
      complex5.multiply(0.0);
      Complex complex11 = complex2.pow(complex3);
      complex7.atan();
      complex11.getImaginary();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      complex2.ONE.acos();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.valueOf((-686.39));
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex2.pow(0.0);
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = complex10.ONE.conjugate();
      complex8.multiply((-931));
      complex8.INF.add(complex0);
      complex5.hashCode();
      complex9.nthRoot(112);
      complex8.nthRoot(112);
      complex3.exp();
      complex11.ZERO.reciprocal();
      complex6.multiply(577);
      complex5.cos();
      complex11.tanh();
      Complex complex12 = complex4.cos();
      complex12.ZERO.subtract(complex6);
      complex0.negate();
      Complex complex13 = complex3.subtract(0.0);
      complex2.getReal();
      complex2.atan();
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-2984.216043198221), (-2984.216043198221));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      complex2.INF.add(complex1);
      complex2.NaN.hashCode();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.INF.negate();
      complex1.ZERO.add(complex2);
      complex4.ONE.hashCode();
      complex1.ONE.sqrt1z();
      int int0 = (-499);
      try { 
        complex3.nthRoot((-499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -499
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex0.INF.multiply((-1.0583192018912101E-7));
      complex0.readResolve();
      complex3.readResolve();
      Complex complex4 = complex2.multiply(0);
      complex2.pow(complex4);
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1344.759655645376, 1344.759655645376);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.createComplex(1344.759655645376, 1344.759655645376);
      Complex complex3 = complex0.sqrt();
      Complex.valueOf(1344.759655645376, 1344.759655645376);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.INF.divide(complex1);
      complex2.INF.log();
      complex3.ONE.subtract(complex2);
      Complex complex6 = complex4.ONE.multiply((-1670));
      complex6.ONE.sqrt();
      complex6.NaN.atan();
      Complex complex7 = complex3.multiply(complex0);
      complex3.INF.abs();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.ZERO.reciprocal();
      Complex complex10 = complex9.ONE.multiply(1344.759655645376);
      Complex complex11 = complex10.NaN.tanh();
      complex11.INF.getArgument();
      Complex complex12 = complex3.sqrt();
      complex0.conjugate();
      Complex complex13 = complex3.log();
      complex13.ONE.subtract(complex6);
      complex5.multiply(1344.759655645376);
      complex12.atan();
      complex2.divide(complex1);
      complex1.tan();
      complex3.equals("");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.NaN.createComplex(0.0, (-37.6));
      complex4.NaN.pow(2717.46891976591);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.I.divide((-20.0));
      complex6.atan();
      complex1.getArgument();
      Complex complex8 = complex0.add(complex3);
      complex8.getArgument();
      Complex complex9 = complex5.reciprocal();
      complex6.isNaN();
      complex2.getArgument();
      complex3.conjugate();
      Complex complex10 = complex2.log();
      complex9.abs();
      complex1.NaN.cosh();
      complex7.sqrt();
      complex5.sqrt1z();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.negate();
      complex1.I.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex0.isNaN();
      complex0.pow(complex3);
      Complex complex4 = complex1.reciprocal();
      complex2.getField();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1335);
      complex0.cos();
      complex0.sqrt();
      Complex complex2 = Complex.valueOf((-804.87122), (double) 1335);
      complex2.I.sinh();
      complex1.negate();
      complex2.NaN.divide((-804.87122));
      complex0.conjugate();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.sqrt();
      complex0.ONE.cosh();
      complex1.NaN.multiply((double) 1);
      complex0.nthRoot(1);
      complex0.sqrt1z();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-4217.08), (-4217.08));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.divide((-1060.2305));
      complex3.negate();
      complex0.reciprocal();
      complex1.acos();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.2));
      Complex complex1 = complex0.ZERO.subtract((-1860.12));
      complex0.isNaN();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(3.141592653589793);
      Complex complex3 = complex2.INF.tan();
      complex1.readResolve();
      complex1.toString();
      Complex complex4 = complex1.ONE.pow(3.9036541111764032E-140);
      complex4.NaN.exp();
      Complex complex5 = new Complex((-2153.2), (-2153.2));
      complex5.ONE.subtract(1.4715152230577016E25);
      complex2.I.multiply(complex5);
      complex0.multiply(complex3);
      complex1.nthRoot(1);
      Complex complex6 = complex2.multiply(37);
      complex6.ZERO.toString();
      Complex complex7 = complex0.asin();
      complex7.INF.subtract(complex6);
      complex2.subtract(6.283185307179586);
      complex5.getArgument();
      complex7.getField();
      complex0.readResolve();
      complex4.log();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.readResolve();
      complex0.getImaginary();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.tanh();
      complex1.ZERO.toString();
      Complex complex6 = complex0.pow(0.0);
      complex1.getReal();
      Complex complex7 = complex4.pow(complex3);
      Complex complex8 = new Complex(0.0);
      complex7.getArgument();
      complex5.equals(complex8);
      complex7.add(9.049543313665034E115);
      complex0.negate();
      complex6.NaN.abs();
      double double0 = (-221.4);
      Complex complex9 = complex4.pow((-221.4));
      complex9.INF.sinh();
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.hashCode();
      Complex complex1 = complex0.NaN.createComplex(9.94381632344361E-9, 9.94381632344361E-9);
      complex0.getImaginary();
      Complex complex2 = complex0.pow(1.0);
      complex2.getArgument();
      complex1.sqrt1z();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(157.1418019844914);
      Complex complex1 = complex0.subtract(157.1418019844914);
      complex1.ZERO.tan();
      complex1.ONE.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.ZERO.pow(157.1418019844914);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.ZERO.atan();
      complex5.INF.multiply(complex0);
      Complex complex6 = complex2.divide(157.1418019844914);
      Complex complex7 = complex1.sinh();
      complex7.NaN.conjugate();
      complex2.getReal();
      Complex complex8 = complex2.log();
      Complex complex9 = complex6.multiply(9.023639664212642E195);
      Complex complex10 = complex9.NaN.asin();
      complex9.isNaN();
      complex9.toString();
      complex4.hashCode();
      complex0.ZERO.hashCode();
      complex3.INF.acos();
      complex5.pow(12.53562132423006);
      complex7.multiply(1);
      complex8.getArgument();
      complex3.add(complex6);
      complex10.add(complex2);
      complex9.getField();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(791.0012, 791.0012);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.acos();
      complex2.INF.multiply(complex0);
      complex2.INF.divide(complex0);
      complex2.I.subtract(791.0012);
      Complex complex3 = complex1.ONE.divide(791.0012);
      Complex complex4 = complex1.I.atan();
      complex3.I.toString();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.log();
      complex6.NaN.acos();
      complex6.ONE.readResolve();
      Complex complex7 = complex0.sqrt();
      complex7.acos();
      complex5.isInfinite();
      complex1.equals(complex7);
      complex4.readResolve();
      complex7.multiply(791.0012);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(1917);
      complex1.ZERO.sinh();
      Complex complex2 = complex0.multiply(659.19729);
      complex0.equals(complex2);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.multiply(4.169293918423203E144);
      complex0.I.asin();
      Complex complex1 = Complex.valueOf(1797.0, 1797.0);
      complex0.subtract(complex1);
      Complex complex2 = complex1.exp();
      complex1.getArgument();
      Complex complex3 = complex2.multiply((-3615));
      complex3.asin();
      complex2.reciprocal();
      Complex complex4 = Complex.valueOf(975.999503878365, 4.169293918423203E144);
      complex2.getArgument();
      complex4.equals(complex3);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1550.6));
      Complex complex1 = complex0.sqrt1z();
      complex1.getField();
      complex0.readResolve();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex1.ZERO.reciprocal();
      Complex complex5 = complex4.INF.pow(complex2);
      complex1.sinh();
      complex0.getReal();
      complex3.ZERO.multiply(complex5);
      try { 
        complex3.nthRoot((-905));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -905
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(1234.12926414682);
      complex2.toString();
      Complex complex3 = Complex.valueOf(1234.12926414682);
      complex3.I.hashCode();
      complex2.exp();
      Complex complex4 = complex3.NaN.pow((-2.0648015610276362E257));
      complex3.NaN.sinh();
      complex3.ONE.toString();
      complex4.ONE.createComplex(5.790291758828013E133, 1234.12926414682);
      Complex complex5 = complex3.NaN.sinh();
      complex5.ZERO.divide(complex1);
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.valueOf(6.562319473965767E278, (-394.8330206689657));
      Complex complex8 = complex7.ZERO.sqrt();
      complex8.NaN.multiply(6.562319473965767E278);
      complex8.NaN.divide(complex2);
      complex8.NaN.tan();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex7.sinh();
      complex10.ZERO.sin();
      complex9.I.subtract(6.283185307179586);
      Complex complex11 = complex1.add(complex0);
      Complex complex12 = complex1.exp();
      Complex complex13 = complex12.INF.conjugate();
      complex12.I.readResolve();
      complex0.pow(complex2);
      complex11.toString();
      complex7.reciprocal();
      complex6.tan();
      complex9.negate();
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(2.0);
      Complex complex1 = complex0.createComplex(2.0, 2.0);
      Complex complex2 = complex0.NaN.createComplex((-1.0), (-3562.9406546386));
      complex2.ONE.toString();
      Complex complex3 = complex1.I.cosh();
      complex3.INF.toString();
      complex3.ONE.reciprocal();
      complex0.pow((-306.973));
      complex0.getReal();
      complex0.createComplex(0.0, 0.0);
      complex2.multiply((-9.785306155980342E-26));
      complex3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      complex1.subtract(complex0);
      Complex complex3 = complex2.sqrt();
      complex3.INF.divide(complex2);
      Complex complex4 = complex0.pow(complex3);
      complex4.add((-1446.874053));
      complex3.INF.createComplex(90.3, 2786.53570957);
      Complex complex5 = complex1.add(64.226196837423);
      complex5.I.sin();
      complex3.sin();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1207.2113372431302, 1.4199501303738373E-65);
      complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.divide(complex0);
      complex2.NaN.exp();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex4.ZERO.sinh();
      complex4.ZERO.abs();
      Complex complex6 = complex5.INF.acos();
      complex1.nthRoot(1);
      Complex complex7 = complex0.multiply((double) 1);
      complex7.ZERO.sqrt();
      Complex complex8 = complex1.asin();
      complex1.abs();
      complex1.hashCode();
      complex3.ONE.subtract(complex5);
      complex8.tan();
      complex3.getReal();
      complex4.cosh();
      complex8.isNaN();
      complex2.pow(complex1);
      complex8.getField();
      complex0.sqrt1z();
      complex3.createComplex(7.096068298764022, 7.096068298764022);
      Complex complex9 = new Complex(14.101419448852539);
      complex6.pow(complex9);
      complex6.subtract((-1742.730038823387));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.multiply((-904));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.atan();
      complex2.asin();
      complex2.INF.cosh();
      complex3.acos();
      complex4.negate();
      complex0.isInfinite();
      complex4.hashCode();
      complex4.abs();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3086.326750344);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.INF.log();
      complex3.INF.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex6.NaN.createComplex(3086.326750344, 3086.326750344);
      Complex complex8 = complex7.I.negate();
      complex0.hashCode();
      complex0.getField();
      Complex complex9 = complex8.divide(3086.326750344);
      complex5.cos();
      Complex complex10 = Complex.valueOf(0.0, 2.0);
      complex0.hashCode();
      complex5.sin();
      Complex complex11 = complex8.tan();
      complex11.NaN.subtract(42.7341966976734);
      complex11.ZERO.subtract(0.0);
      double double0 = (-2496.447771181);
      Complex complex12 = complex10.subtract((-2496.447771181));
      Complex complex13 = complex0.exp();
      Complex complex14 = complex13.divide(complex12);
      complex14.ZERO.nthRoot(3573);
      complex9.sinh();
      complex6.sinh();
      try { 
        complex2.nthRoot((-1628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,628
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-2665.9395207743382), (-1409.0563936));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.NaN.pow((-190.4752364556));
      complex0.INF.add((-956.9078));
      complex2.NaN.acos();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.pow((-956.9078));
      complex1.NaN.tan();
      Complex complex5 = complex4.conjugate();
      complex5.ZERO.sqrt1z();
      complex1.toString();
      complex3.abs();
      Complex complex6 = complex3.ZERO.multiply(0);
      complex1.ZERO.add(0.0);
      Complex complex7 = complex6.NaN.sqrt1z();
      complex0.createComplex(8.771944687068322, 0.0);
      complex3.isNaN();
      Complex complex8 = complex1.negate();
      complex7.I.exp();
      complex8.NaN.getField();
      Complex complex9 = complex6.conjugate();
      complex9.getArgument();
      complex2.getReal();
      Complex complex10 = complex7.log();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      complex1.INF.divide(0.0);
      Complex complex2 = new Complex((-1455.01362248));
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.divide(complex2);
      complex4.ONE.nthRoot(1073);
      complex3.INF.readResolve();
      Complex complex5 = complex0.createComplex(0.0, 20.0);
      complex2.NaN.acos();
      complex5.I.subtract(complex3);
      Complex.valueOf((-1455.01362248));
      complex2.getReal();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex2.sqrt();
      complex7.ZERO.tan();
      complex4.equals(complex3);
      complex6.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(406.0, 406.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex3.acos();
      complex0.ZERO.sinh();
      Complex complex5 = complex3.ONE.sqrt();
      complex3.ZERO.readResolve();
      Complex complex6 = complex0.multiply((-1251.206));
      complex6.abs();
      Complex complex7 = complex4.ZERO.multiply(complex1);
      Complex complex8 = complex2.cos();
      complex0.isInfinite();
      Complex complex9 = complex5.add(20.0);
      complex0.ONE.getArgument();
      complex9.INF.abs();
      complex8.getReal();
      complex3.I.exp();
      Complex complex10 = complex4.asin();
      complex10.ZERO.subtract(complex1);
      complex0.NaN.multiply(Double.NaN);
      complex7.hashCode();
      complex9.createComplex(718405.8327761719, 718405.8327761719);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2010.95);
      Complex.valueOf(0.0, (-2423.5902509127764));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.log();
      complex2.asin();
      complex1.subtract(0.0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1.2493910789489746, 1.0);
      Complex complex1 = Complex.valueOf(1.0);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2097.510588057));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.NaN.sinh();
      complex3.ZERO.sin();
      complex3.I.toString();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.ONE.pow(0.0);
      complex5.INF.multiply(0.0);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = Complex.valueOf(0.6363908052444458, 0.0);
      complex6.NaN.divide(complex4);
      Complex complex9 = complex2.sqrt();
      complex9.NaN.hashCode();
      Complex complex10 = complex9.INF.log();
      complex9.INF.multiply((-1032));
      Complex complex11 = Complex.valueOf(0.6363908052444458, 0.0);
      complex9.I.toString();
      Complex complex12 = complex1.sin();
      complex10.sin();
      complex12.ZERO.divide(2.0);
      Complex complex13 = complex1.pow(0.6363908052444458);
      Complex complex14 = complex11.pow(164.19899380934);
      complex14.I.getField();
      complex12.getField();
      complex10.cos();
      complex7.sinh();
      complex11.abs();
      complex13.tan();
      complex8.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2706.312631058183), (-2706.312631058183));
      complex0.ZERO.reciprocal();
      Complex complex1 = Complex.valueOf((-273.5117983651994), 0.3248254060745239);
      Complex complex2 = complex0.I.add(0.3248254060745239);
      complex2.INF.add((-2706.312631058183));
      complex0.getReal();
      Complex.valueOf((-273.5117983651994));
      Complex complex3 = complex0.tan();
      complex3.I.toString();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow(2.0599991793068063E262);
      Complex complex2 = complex0.NaN.add(2.0599991793068063E262);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.valueOf(2.0599991793068063E262, (-2501.6572167304394));
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.ONE.add(complex1);
      complex6.NaN.add(2.0599991793068063E262);
      complex3.ONE.hashCode();
      complex6.NaN.tan();
      Complex complex7 = Complex.INF;
      complex2.NaN.subtract(complex7);
      Complex.valueOf(2.0599991793068063E262, 0.0);
      Complex complex8 = complex0.add(complex4);
      complex8.divide(complex3);
      int int0 = 0;
      Complex complex9 = complex0.NaN.sqrt1z();
      complex9.INF.cosh();
      Complex complex10 = complex0.multiply(0);
      complex10.NaN.subtract(complex5);
      complex3.equals(complex1);
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.6400070480930697E-114);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(9.495158151301779E-10);
      Complex.valueOf(0.0);
      complex3.ZERO.subtract(complex2);
      Complex complex4 = complex0.conjugate();
      complex4.I.pow(complex2);
      complex4.NaN.sin();
      Complex complex5 = complex0.atan();
      complex5.ZERO.abs();
      complex1.readResolve();
      Complex complex6 = complex1.multiply(0.0);
      complex6.ZERO.atan();
      complex6.NaN.createComplex(9.495158151301779E-10, (-1112.576617));
      Complex.valueOf(4.537273754534966E121);
      complex6.toString();
      complex4.divide(0.0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex((-1757.4604), (-1757.4604));
      Complex complex3 = complex0.subtract(complex1);
      complex3.log();
      complex1.ONE.hashCode();
      complex1.ONE.nthRoot(1);
      complex1.getField();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.createComplex((-2247.0), 4.597700093952774E14);
      Complex complex6 = complex5.ONE.log();
      Complex.valueOf((-2247.0), 0.0);
      Complex complex7 = complex2.add(1376.9);
      complex2.log();
      Complex complex8 = Complex.valueOf(2125.72238091);
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex10.I.pow(complex11);
      assertTrue(complex12.equals((Object)complex9));
      assertNotSame(complex9, complex12);
      
      complex8.NaN.getArgument();
      Complex complex13 = complex6.sqrt();
      boolean boolean0 = complex7.equals(complex1);
      assertFalse(boolean0);
      
      Complex complex14 = complex7.acos();
      complex14.ZERO.getField();
      assertEquals(8.187684061201226, complex14.getImaginary(), 0.01);
      
      complex13.sqrt1z();
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex15.reciprocal();
      assertEquals((-1.1883951057781212), complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      
      List<Complex> list0 = complex13.nthRoot(1);
      assertTrue(list0.contains(complex1));
      
      complex4.toString();
      complex13.getReal();
      String string0 = complex7.toString();
      assertEquals("(-380.56039999999985, -1757.4604)", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1384.138211496));
      Complex complex1 = complex0.sin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-0.9646596721685661), complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1384.138211496, double0, 0.01);
      assertEquals((-1384.138211496), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.ONE.tan();
      assertEquals(1.557407724654902, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.ONE.asin();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.pow(complex2);
      List<Complex> list0 = complex5.ONE.nthRoot(7);
      assertEquals(7, list0.size());
      assertFalse(list0.contains(complex2));
      
      complex5.createComplex((-582.6068910799), (-582.6068910799));
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex5.multiply(complex2);
      assertFalse(complex2.equals((Object)complex4));
      assertSame(complex8, complex6);
      
      boolean boolean0 = complex7.isNaN();
      assertTrue(boolean0);
  }
}
