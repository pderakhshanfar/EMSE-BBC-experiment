/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:00:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.INF.subtract(complex1);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex1 = new Complex((-1944.5593881), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.conjugate();
      complex0.tanh();
      Complex complex3 = new Complex((-1944.5593881));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.I;
      Complex.valueOf(1.1886897087097168);
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(132.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.multiply(complex2);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(376.097332564625);
      Complex complex1 = complex0.cos();
      complex1.I.subtract(complex0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.pow(376.097332564625);
      Complex complex5 = Complex.valueOf((-1.0), (-557.12687));
      complex2.ONE.getArgument();
      complex2.createComplex((-557.12687), (-185.5));
      complex5.sqrt1z();
      complex0.atan();
      complex4.reciprocal();
      complex0.multiply(0.3985368153383867);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.423976538577447E138, (-3748.53543598292));
      Complex complex1 = complex0.asin();
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.cosh();
      complex0.exp();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(1.3158882241538003E-241);
      complex1.ZERO.toString();
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf(2826.07, 20.0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      complex0.add(complex1);
      complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.NaN.sqrt1z();
      Complex complex4 = complex1.multiply(complex3);
      complex0.getReal();
      Complex.valueOf((-1159.9), 0.0);
      Complex complex5 = Complex.I;
      complex5.log();
      complex4.asin();
      Complex complex6 = complex0.cosh();
      complex2.subtract((-1159.9));
      complex5.exp();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.asin();
      Complex complex9 = new Complex((-1159.9), 1.1123170852661133);
      complex9.readResolve();
      complex5.subtract((-698.90813025011));
      Object object0 = new Object();
      complex4.readResolve();
      complex3.equals(complex5);
      Complex.valueOf(0.0);
      complex7.add(complex8);
      Complex complex10 = new Complex(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 36, 1.0);
      Complex complex1 = Complex.valueOf((double) 36);
      complex1.add(complex0);
      complex1.add(complex0);
      Complex complex2 = Complex.valueOf((-1.0898941254272996E-7));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.ONE;
      complex4.multiply(complex2);
      Complex complex5 = Complex.valueOf(Double.NaN, (-2230.7767123905));
      complex1.divide(complex4);
      complex3.log();
      complex5.asin();
      Complex complex6 = Complex.ONE;
      Complex.valueOf(1.0);
      complex3.multiply(Double.NaN);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1243.34707760365), (-1300.6));
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.574020504951477, (-1243.34707760365));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(1.905394922122271E10);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf(1.619992971420288);
      complex0.tanh();
      Complex complex2 = Complex.valueOf(1.7020113682519877E-4);
      Complex.valueOf(17.89826268488746, (-1.7020113682519877E-4));
      Complex complex3 = complex2.log();
      complex3.tanh();
      Complex complex4 = new Complex((-1.5821291250849026));
      Complex complex5 = new Complex(2.8926683313922764E-176, (-4618.857924061));
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.multiply(532);
      complex1.tan();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.exp();
      complex0.tanh();
      Complex complex1 = Complex.ZERO;
      complex0.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ZERO;
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-1128.616989158103));
      Complex complex2 = complex1.ONE.cos();
      complex2.I.pow(complex1);
      complex0.tan();
      complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-1128.616989158103));
      complex1.pow(0.0);
      Complex complex2 = complex0.multiply(225);
      complex2.NaN.sinh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.174860642202632E-8, 1.033464507572145E142);
      Complex complex2 = complex0.add(complex1);
      complex2.INF.hashCode();
      complex2.add(complex0);
      double double0 = (-3688.804);
      Complex.valueOf(1.033464507572145E142);
      complex1.sqrt1z();
      Complex complex3 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(327.1786);
      complex1.ZERO.tanh();
      complex0.pow(complex1);
      Complex complex2 = Complex.valueOf((-2031.62242267117), 882.974093003642);
      complex1.log();
      complex0.tanh();
      Complex complex3 = new Complex(327.1786);
      complex1.tanh();
      Complex complex4 = new Complex(3011.2916029086314);
      Complex complex5 = new Complex((-2031.62242267117));
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf(1047.09670108049);
      complex5.sqrt1z();
      Complex complex6 = Complex.ONE;
      complex2.getReal();
      Complex complex7 = Complex.valueOf(0.0, (-8.18804507680012E74));
      complex0.divide(complex7);
      complex0.log();
      complex5.asin();
      complex3.cosh();
      Complex complex8 = complex4.subtract((-2.148245271118002E-8));
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex1.sqrt();
      Complex complex12 = Complex.INF;
      Complex complex13 = new Complex(1.0, (-20.0));
      complex8.readResolve();
      complex3.subtract(1713.364);
      Object object0 = new Object();
      complex8.readResolve();
      Object object1 = new Object();
      complex4.equals(object1);
      Complex.valueOf(1.1123170852661133, 20.0);
      complex13.add(complex11);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1572.51, 2.0);
      complex0.nthRoot(17);
      complex0.log();
      Complex complex1 = complex0.tanh();
      complex1.equals((Object) null);
      Complex complex2 = complex0.pow(1572.51);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex2.conjugate();
      complex0.tanh();
      Complex complex3 = new Complex(0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.pow(complex0);
      Complex complex4 = Complex.valueOf(882.974093003642, 0.0);
      Complex complex5 = complex2.add(complex4);
      Complex.valueOf(0.0, (-1569.77));
      Complex.valueOf(2974.57, 2974.57);
      complex0.multiply(83);
      complex1.tan();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.NaN.toString();
      complex0.getField();
      Complex complex2 = complex1.subtract((-106.8));
      Complex complex3 = complex0.conjugate();
      complex0.reciprocal();
      complex0.hashCode();
      Complex complex4 = Complex.valueOf((-106.8));
      complex4.readResolve();
      Complex complex5 = Complex.valueOf(1.2599421120614435E-8);
      complex2.pow(complex5);
      Complex complex6 = Complex.valueOf(0.5267143249511719, (-2827.8539267920996));
      complex3.add(complex6);
      Complex complex7 = Complex.valueOf(882.974093003642, 1.2599421120614435E-8);
      complex7.reciprocal();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2934.6539267921));
      Complex complex1 = complex0.multiply((-2934.6539267921));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-2934.6539267921), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(8612193.670036292, complex1.getReal(), 0.01);
      
      Complex.valueOf((double) 17);
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(410.0881243, 17);
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex3.multiply(complex0);
      Complex complex6 = complex4.cosh();
      Complex.valueOf((-106.8));
      complex1.pow(1.0);
      complex5.pow(complex1);
      complex6.pow((-20.0));
      Complex.valueOf(1212.4976403979588, (-2934.6539267921));
      complex6.multiply((-2098));
      complex3.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-731518));
      complex1.tan();
      Complex complex2 = Complex.valueOf(2.075769060297565E143);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.I.tan();
      complex1.NaN.add(complex0);
      Complex complex2 = complex1.subtract(0.0);
      complex0.getArgument();
      Complex complex3 = complex1.subtract(0.0);
      complex3.isNaN();
      Complex complex4 = new Complex(0.0);
      complex2.toString();
      complex1.createComplex(Double.POSITIVE_INFINITY, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.ZERO.multiply((-634));
      Complex complex5 = complex4.ONE.acos();
      complex5.I.cos();
      complex1.ONE.hashCode();
      Complex complex6 = complex2.multiply(20.0);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.INF.sqrt();
      complex8.divide((-20.0));
      Complex complex9 = complex7.ZERO.cos();
      complex9.ONE.hashCode();
      Complex complex10 = complex1.multiply(2.2601466178894043);
      Complex complex11 = complex2.I.multiply(467.747643158);
      complex4.pow(42.743075454);
      Complex complex12 = complex4.ONE.divide(complex3);
      Complex complex13 = Complex.I;
      complex7.divide(complex13);
      complex10.exp();
      complex5.toString();
      complex12.pow(complex6);
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2190.889230142);
      Complex.valueOf(3083.617151525, 2190.889230142);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      complex0.add(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = new Complex(0.0, 0.14010155200958252);
      complex1.conjugate();
      complex1.tanh();
      Complex complex5 = new Complex((-1460.0));
      Complex complex6 = Complex.valueOf(0.14010155200958252);
      Complex complex7 = complex2.pow(complex6);
      Complex complex8 = Complex.valueOf((-1772.9860868722), (-1772.9860868722));
      Complex complex9 = complex8.add(complex5);
      Complex.valueOf((-1.0), 0.436867892742157);
      complex9.reciprocal();
      Complex complex10 = new Complex(1726.13131320555, (-2.5421412617425676));
      complex2.divide(complex10);
      Complex complex11 = Complex.ONE;
      complex10.reciprocal();
      complex9.tan();
      complex7.abs();
      complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.abs();
      complex0.NaN.multiply((-3039));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.divide(complex3);
      complex1.equals(complex4);
      complex1.multiply(0);
      complex0.add(5873.7815940838855);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.exp();
      complex0.NaN.toString();
      complex0.getField();
      complex0.multiply((-2859));
      complex0.toString();
      Complex complex1 = complex0.divide((-106.8));
      Complex complex2 = Complex.valueOf((-106.8));
      Complex complex3 = complex1.add(complex0);
      complex3.I.reciprocal();
      complex0.abs();
      complex3.divide(complex0);
      complex2.equals(complex0);
      complex3.multiply(0);
      complex2.add((double) 0);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      complex0.add(complex1);
      complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.NaN.sqrt1z();
      Complex complex4 = complex1.multiply(complex3);
      complex0.getReal();
      Complex.valueOf((-1159.9), 0.0);
      Complex complex5 = Complex.I;
      complex5.log();
      complex4.asin();
      Complex complex6 = complex0.cosh();
      complex2.subtract((-1159.9));
      complex5.exp();
      Complex complex7 = Complex.ZERO;
      complex0.sqrt();
      Complex complex8 = complex6.asin();
      Complex complex9 = new Complex((-1159.9), 1.1123170852661133);
      complex9.readResolve();
      complex5.subtract((-698.90813025011));
      Object object0 = new Object();
      complex4.readResolve();
      complex3.equals(complex5);
      Complex.valueOf(0.0);
      complex7.add(complex8);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = Complex.valueOf((-293.776852181902));
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex0.reciprocal();
      complex1.abs();
      complex4.divide(complex3);
      complex4.equals(complex3);
      complex0.multiply(2502);
      complex2.add(2724.984356943488);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.getField();
      complex0.toString();
      Complex complex1 = complex0.subtract((-106.8));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.reciprocal();
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(3111.849292046);
      complex4.readResolve();
      complex3.tanh();
      Complex.valueOf((-6.714184569587689E-79));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ZERO;
      complex7.multiply(complex5);
      complex2.cosh();
      Complex.valueOf((-1160.53));
      Complex complex8 = complex5.pow((-6.714184569587689E-79));
      complex3.pow(complex6);
      complex8.pow((-1160.53));
      complex1.nthRoot(307);
      Complex complex9 = Complex.valueOf((double) 83, 798.1);
      complex6.multiply(83);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sinh();
      Complex complex3 = new Complex(2413.884247588);
      Complex complex4 = complex3.exp();
      complex2.conjugate();
      complex0.tanh();
      Complex complex5 = new Complex(4343.153572228559);
      Complex complex6 = Complex.valueOf(2.2778730392456055);
      Complex complex7 = new Complex(4343.153572228559, 2.2778730392456055);
      complex7.pow(complex1);
      Complex complex8 = Complex.I;
      complex8.add(complex6);
      Complex complex9 = Complex.ZERO;
      complex1.reciprocal();
      complex6.subtract((-3075.76271062418));
      complex4.isNaN();
      Complex complex10 = Complex.ZERO;
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.exp();
      complex1.NaN.conjugate();
      complex0.ZERO.tanh();
      Complex complex3 = new Complex((-1569.77));
      Complex.valueOf((-1569.77));
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = new Complex((-1569.77));
      complex6.abs();
      complex2.divide(complex4);
      complex0.equals(complex3);
      complex5.multiply(2239);
      Complex complex7 = Complex.valueOf(8.376355992772767, (-1569.77));
      complex7.add(1919.8488);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.619992971420288, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf((-3688.804));
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex4.multiply(complex0);
      complex3.getReal();
      Complex complex8 = Complex.valueOf((-2937.700793527653), (-7065.27690282));
      Complex complex9 = complex3.divide(complex6);
      Complex complex10 = complex9.log();
      complex5.asin();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.cosh();
      complex8.tanh();
      complex3.log();
      complex11.getImaginary();
      Complex complex13 = Complex.valueOf(1300.353);
      complex11.toString();
      complex11.getReal();
      complex10.cosh();
      complex12.sin();
      Complex complex14 = Complex.INF;
      complex13.getField();
      complex7.subtract(complex2);
      complex0.subtract((-848.178563));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.exp();
      complex0.NaN.toString();
      complex0.getField();
      complex0.toString();
      Complex complex1 = complex0.divide((-106.8));
      Complex complex2 = Complex.valueOf((-106.8));
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex1.pow(complex3);
      complex2.add(complex1);
      Complex complex4 = Complex.ZERO;
      complex3.reciprocal();
      complex0.subtract(Double.NaN);
      complex1.isNaN();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex(0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.pow(complex0);
      Complex complex6 = Complex.valueOf(882.974093003642, 0.0);
      complex2.add(complex6);
      Complex.valueOf(0.0, (-1569.77));
      complex3.reciprocal();
      complex0.divide(complex4);
      Complex complex7 = Complex.ONE;
      complex6.reciprocal();
      complex1.tan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4372.431549, 4372.431549);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.tanh();
      Complex complex6 = new Complex((-2053.010683833016));
      Complex.valueOf((-2850.48136254694));
      Complex complex7 = new Complex(4.843758514283536E-7);
      Complex complex8 = complex3.pow(complex7);
      complex2.add(complex3);
      complex1.reciprocal();
      complex0.divide(complex8);
      Complex complex9 = Complex.ONE;
      complex3.reciprocal();
      Complex complex10 = Complex.ONE;
      complex10.tan();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = new Complex((-1569.77));
      Complex complex6 = Complex.valueOf((-1569.77));
      complex4.pow(complex3);
      Complex complex7 = Complex.valueOf((-20.0), (-20.0));
      complex7.add(complex3);
      Complex.valueOf(4401.814476297156, (-1569.77));
      complex7.reciprocal();
      Complex complex8 = Complex.ONE;
      complex2.divide(complex8);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex6.reciprocal();
      complex10.tan();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.add(complex1);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-3129.6));
      Complex complex4 = Complex.valueOf((-3129.6));
      complex4.sqrt1z();
      complex2.NaN.tan();
      Complex complex5 = new Complex(1.619992971420288, (-4808.4));
      complex1.multiply(complex5);
      complex2.getReal();
      Complex.valueOf((-544.0), 651.7);
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = complex6.log();
      Complex complex8 = complex2.asin();
      complex8.cosh();
      complex3.tanh();
      Complex complex9 = complex3.log();
      complex4.getImaginary();
      Complex complex10 = Complex.valueOf(0.0);
      complex5.toString();
      complex0.getReal();
      complex9.cosh();
      Complex complex11 = Complex.ZERO;
      complex11.sin();
      Complex complex12 = Complex.INF;
      complex0.getField();
      complex0.subtract(complex7);
      complex10.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.5909284353256226);
      Complex complex1 = new Complex((-3347.57904478));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex.valueOf(20.0);
      complex1.sqrt1z();
      Complex complex5 = Complex.valueOf(1.619992971420288);
      Complex complex6 = complex0.multiply(complex5);
      complex1.getReal();
      Complex.valueOf(Double.POSITIVE_INFINITY, 20.0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.divide(complex7);
      complex8.ONE.divide(0.39499378204345703);
      Complex complex9 = Complex.NaN;
      complex9.log();
      Complex complex10 = Complex.valueOf((-3347.57904478));
      complex10.asin();
      Complex complex11 = complex3.cosh();
      complex9.tanh();
      complex7.log();
      complex11.getImaginary();
      Complex complex12 = Complex.valueOf((-3347.57904478));
      complex7.toString();
      complex6.getReal();
      complex5.cosh();
      complex5.sin();
      Complex complex13 = Complex.INF;
      complex4.getField();
      complex12.subtract(complex7);
      Complex complex14 = Complex.valueOf(1.619992971420288);
      complex14.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-587.582254400528));
      Complex complex1 = new Complex(Double.NaN, (-587.582254400528));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(1033.761824326029);
      complex0.add(complex3);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf((-4.062928651503497));
      complex1.sqrt1z();
      Complex complex6 = complex3.multiply(complex2);
      complex6.getReal();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex5.divide(complex4);
      Complex complex7 = Complex.INF;
      complex7.log();
      Complex complex8 = new Complex(Double.NaN, (-4.062928651503497));
      complex8.asin();
      Complex complex9 = complex8.cosh();
      complex1.subtract((-1761.0));
      complex5.exp();
      Complex complex10 = Complex.ZERO;
      complex6.sqrt();
      complex1.asin();
      Complex complex11 = new Complex((-1761.0), (-4.062928651503497));
      complex1.readResolve();
      complex7.subtract(Double.NaN);
      Object object0 = new Object();
      complex8.ZERO.tanh();
      complex0.readResolve();
      Complex complex12 = Complex.NaN;
      complex3.equals(complex12);
      Complex.valueOf((-587.582254400528));
      complex3.add(complex9);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      complex0.ONE.add(complex1);
      Complex complex2 = complex0.add(complex1);
      complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.NaN.sqrt1z();
      complex1.multiply(complex3);
      complex0.getReal();
      Complex complex4 = Complex.valueOf((-1159.9), 0.0);
      Complex complex5 = complex1.I.divide(complex4);
      complex5.log();
      Complex complex6 = complex1.ZERO.asin();
      Complex complex7 = complex2.ONE.cosh();
      complex6.subtract(0.0);
      complex1.exp();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.sqrt();
      complex9.asin();
      Complex complex10 = new Complex((-1159.9), 1.1123170852661133);
      complex10.readResolve();
      complex7.subtract((-4571.94700125));
      Object object0 = new Object();
      Object object1 = complex0.readResolve();
      complex6.equals(object1);
      Complex complex11 = Complex.valueOf(0.0);
      complex2.add(complex11);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.exp();
      complex1.NaN.conjugate();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex3.sqrt();
      complex0.ONE.getArgument();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.negate();
      complex2.readResolve();
      Complex complex7 = complex6.add(complex4);
      complex0.sin();
      Complex complex8 = Complex.valueOf((double) 1, (double) 1);
      Complex complex9 = complex6.pow(complex8);
      Complex complex10 = complex7.atan();
      Complex complex11 = Complex.valueOf(0.0, 335.2349026);
      Complex complex12 = complex11.negate();
      complex11.createComplex((-1882.4710822522), 0.025073636323213577);
      Complex complex13 = complex10.subtract(1271.7021);
      complex0.cosh();
      complex8.isNaN();
      complex0.sin();
      complex10.exp();
      Complex.valueOf(3669.16676318);
      Object object0 = complex13.readResolve();
      complex5.equals(object0);
      complex13.atan();
      complex12.getField();
      complex9.asin();
      complex9.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.toString();
      Complex complex2 = complex0.add(complex1);
      complex2.sqrt1z();
      Complex complex3 = Complex.valueOf(5.316488751532233E-4);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.multiply(complex1);
      complex4.getReal();
      Complex.valueOf((-1159.9), (-1159.9));
      complex0.divide(complex5);
      Complex complex6 = complex0.log();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.NaN;
      complex3.tanh();
      complex9.log();
      complex6.getImaginary();
      Complex complex10 = Complex.valueOf((-1335.0514));
      complex5.toString();
      complex7.getReal();
      complex5.cosh();
      Complex complex11 = Complex.INF;
      complex11.sin();
      complex10.getField();
      complex7.subtract(complex8);
      Complex complex12 = new Complex(0.9999998586747268);
      complex10.add(complex1);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.6892333030700684);
      complex0.toString();
      complex0.hashCode();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.NaN.subtract((double) 0);
      complex1.asin();
      complex0.multiply(1970);
      complex4.getArgument();
      Complex complex5 = complex2.exp();
      complex5.sqrt1z();
      Complex complex6 = Complex.valueOf(Double.NaN, (-357.0));
      complex6.asin();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.75933511025868E163, 0.0);
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      complex1.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.divide(complex0);
      complex0.getArgument();
      complex1.abs();
      Complex complex4 = complex1.negate();
      complex0.readResolve();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex3.pow(complex5);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex5.negate();
      complex4.createComplex((-1116.29), 861.5518658916);
      Complex complex10 = Complex.valueOf(1.1302475708650368, 861.5518658916);
      complex10.subtract((-1526.717412));
      complex8.cosh();
      complex2.isNaN();
      complex4.sin();
      complex9.exp();
      Complex.valueOf((-1526.717412));
      Object object0 = new Object();
      complex10.equals(object0);
      complex6.atan();
      complex5.getField();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-587.582254400528), 1.619992971420288);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.add(complex1);
      complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(1.619992971420288);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.multiply(complex2);
      complex6.getReal();
      Complex complex7 = Complex.valueOf(1.619992971420288, 20.0);
      Complex complex8 = complex3.divide(complex6);
      Complex complex9 = complex3.log();
      complex2.asin();
      Complex complex10 = complex5.cosh();
      complex9.tanh();
      complex9.log();
      complex10.getImaginary();
      Complex complex11 = Complex.valueOf(60.2757283072);
      complex6.toString();
      complex5.getReal();
      complex1.cosh();
      complex8.sin();
      Complex complex12 = Complex.INF;
      complex12.getField();
      complex7.subtract(complex11);
      complex10.subtract(1.619992971420288);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.ONE.exp();
      complex1.NaN.conjugate();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = new Complex((-1569.77));
      Complex complex4 = Complex.valueOf((-1569.77));
      complex1.pow(complex2);
      complex0.add(complex4);
      Complex.valueOf((-1569.77), (-1569.77));
      complex2.reciprocal();
      complex1.divide(complex4);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.tan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-521.4460646626364);
      Complex complex0 = new Complex(0.0, (-521.4460646626364));
      Complex complex1 = complex0.sqrt();
      complex0.getArgument();
      int int0 = 1;
      // Undeclared exception!
      complex1.nthRoot(968520);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.subtract(2630.178034);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.sqrt();
      complex3.asin();
      complex5.readResolve();
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex2.equals(complex4);
      complex4.add(complex6);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.atan();
      complex1.getArgument();
      complex0.subtract((-587.582254400528));
      complex0.isNaN();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.NaN.toString();
      complex0.getField();
      complex0.toString();
      Complex complex2 = complex0.divide((-106.8));
      Complex complex3 = Complex.valueOf((-106.8));
      complex2.atan();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.createComplex((-106.8), 861.5518658916);
      Complex complex6 = Complex.I;
      complex6.subtract(0.0);
      complex0.cosh();
      complex4.isNaN();
      complex2.sin();
      complex3.exp();
      Complex.valueOf((-2592.71));
      complex6.equals((Object) null);
      Complex complex7 = complex5.atan();
      complex0.getField();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(6.714184569587689E-79, 6.714184569587689E-79);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.subtract(complex3);
      complex1.conjugate();
      complex2.tan();
      Complex complex5 = new Complex(6.714184569587689E-79);
      complex2.add((-869.334306899));
      complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6745661720946737E-8), (-1.6745661720946737E-8));
      Complex complex1 = new Complex((-1.6745661720946737E-8), 0.0);
      complex1.INF.multiply(complex0);
      Complex complex2 = complex1.NaN.sin();
      complex2.NaN.pow((-1.6745661720946737E-8));
      Complex complex3 = complex2.cosh();
      complex3.INF.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, (-1.6745661720946737E-8));
      complex4.I.tan();
      complex2.getArgument();
      Complex complex5 = complex1.log();
      complex5.ONE.subtract(complex3);
      complex2.readResolve();
      Complex complex6 = complex0.NaN.subtract(complex1);
      complex6.pow(0.0);
      Complex complex7 = complex0.sqrt1z();
      complex6.tan();
      complex7.sqrt();
      Complex complex8 = complex3.I.log();
      int int0 = (-1886);
      try { 
        complex8.INF.nthRoot((-1886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,886
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.6892333030700684);
      complex0.toString();
      complex0.hashCode();
      Complex complex1 = complex0.I.tan();
      complex1.I.sqrt();
      Complex complex2 = complex0.divide(0.0);
      complex2.NaN.subtract((double) 0);
      complex1.asin();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex.valueOf(1.0, 1.0);
      complex0.NaN.abs();
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-741.4358));
      Complex complex1 = new Complex(Double.NaN);
      complex0.ONE.getField();
      Complex complex2 = complex0.divide(complex1);
      complex2.I.nthRoot(1161);
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, 1801.357886234631);
      complex5.toString();
      complex0.cos();
      complex2.multiply((-1.0));
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex0.NaN.pow(complex1);
      complex1.tanh();
      complex1.INF.abs();
      complex1.negate();
      complex1.ONE.conjugate();
      double double0 = (-808.70585165734);
      Complex complex2 = Complex.valueOf((-808.70585165734));
      int int0 = 0;
      complex2.I.multiply(0);
      complex2.NaN.hashCode();
      complex0.divide(complex1);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-3009.5532501));
      complex1.multiply(complex0);
      complex0.abs();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex2.NaN.log();
      complex0.toString();
      complex4.ZERO.conjugate();
      complex3.I.multiply(3899);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.multiply(1);
      complex5.getReal();
      complex4.multiply((-6.447877375049486E-9));
      complex0.abs();
      complex5.NaN.pow(complex1);
      Complex complex7 = complex4.add(20.0);
      Complex complex8 = complex3.multiply(complex2);
      complex8.add((-4667.9331171033455));
      complex6.cosh();
      complex2.toString();
      complex7.tan();
      complex7.getReal();
      complex3.divide((-2467.107522));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-1699.3882443406935), (-1699.3882443406935));
      complex0.NaN.getArgument();
      complex0.I.nthRoot(1);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.multiply(0);
      complex1.ZERO.sinh();
      Complex complex3 = complex2.ZERO.add((double) 0);
      complex1.INF.conjugate();
      complex2.ZERO.multiply(1);
      Complex complex4 = complex1.sin();
      complex0.getReal();
      complex4.sin();
      complex3.createComplex((-1699.3882443406935), (-1699.3882443406935));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-521.4460646626364));
      Complex complex1 = new Complex((-521.4460646626364));
      Complex complex2 = Complex.valueOf((-521.4460646626364));
      Complex complex3 = complex2.INF.pow(complex1);
      complex0.add(complex1);
      Complex.valueOf((-521.4460646626364), 0.0);
      Complex complex4 = complex2.reciprocal();
      complex2.divide(complex3);
      complex0.reciprocal();
      complex4.tan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-4353.0);
      complex0.ZERO.sin();
      Complex complex1 = complex0.INF.divide((-4353.0));
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex0.ONE.subtract((-377.2611));
      complex2.ZERO.multiply((-4353.0));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex5.ZERO.add(0.0);
      double double1 = (-3204.29026988991);
      Complex complex7 = complex0.subtract((-3204.29026988991));
      complex6.INF.getField();
      complex7.ZERO.cos();
      Complex complex8 = complex7.divide(1.6195123407015624E-7);
      Complex complex9 = complex8.INF.tan();
      complex6.INF.hashCode();
      complex9.NaN.cos();
      complex0.getImaginary();
      try { 
        complex8.I.nthRoot((-1673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,673
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.multiply((-2121.25961927012));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.valueOf(1349.8);
      complex2.I.multiply(complex0);
      complex2.isNaN();
      Complex complex5 = complex3.ONE.subtract(0.0);
      Complex complex6 = complex2.add(complex1);
      complex3.ONE.add(complex1);
      complex6.ZERO.sinh();
      Complex complex7 = complex1.INF.cosh();
      complex3.multiply(2581);
      complex4.isNaN();
      Complex complex8 = Complex.valueOf(8.467026501338835E-8, (-1764.846475698));
      complex8.ONE.getArgument();
      complex7.subtract(complex1);
      complex4.acos();
      Complex complex9 = Complex.valueOf((-1764.846475698), 1349.8);
      complex7.divide(complex9);
      complex9.divide(complex5);
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.ONE.exp();
      complex1.NaN.conjugate();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.sqrt();
      complex0.ONE.getArgument();
      complex3.ZERO.nthRoot(1);
      Complex complex4 = complex0.subtract((-1569.77));
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.NaN.reciprocal();
      complex3.NaN.hashCode();
      Complex complex7 = Complex.valueOf((-1569.77));
      complex3.ONE.readResolve();
      complex5.ZERO.tanh();
      Complex complex8 = complex4.divide(complex0);
      complex5.ZERO.multiply(complex4);
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.pow(456.15374);
      complex8.pow(complex5);
      complex10.NaN.pow((-1569.77));
      complex10.nthRoot(83);
      complex7.multiply(83);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2121343612670898, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.asin();
      complex2.INF.divide(complex1);
      Complex complex4 = Complex.valueOf(1.2121343612670898, Double.NaN);
      Complex complex5 = complex3.INF.cos();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex5.negate();
      Complex complex8 = complex2.ONE.divide(1.2121343612670898);
      Complex complex9 = complex8.INF.divide(complex3);
      complex2.multiply(1.2121343612670898);
      complex7.add(complex4);
      complex1.subtract((-411.383229544));
      complex6.sin();
      Complex.valueOf(0.0, (-411.383229544));
      complex6.sin();
      Complex complex10 = complex0.ZERO.sqrt1z();
      complex4.atan();
      complex3.pow(Double.NaN);
      complex5.cosh();
      complex10.conjugate();
      Complex complex11 = complex9.asin();
      complex11.ONE.readResolve();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-2833.695141202));
      Complex complex1 = new Complex((-2833.695141202), 1167.1359347418559);
      Complex complex2 = complex1.I.multiply(complex0);
      complex1.ONE.divide(1167.1359347418559);
      Complex complex3 = complex0.createComplex(1167.1359347418559, 1307.7945);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex2.pow(complex0);
      complex6.toString();
      Complex complex7 = complex1.cos();
      complex7.I.cosh();
      complex7.I.sqrt1z();
      complex7.INF.acos();
      complex7.nthRoot(1984);
      complex3.toString();
      Complex complex8 = Complex.valueOf((-2833.695141202), 1538.7360126000715);
      complex8.I.divide(1835.0572958964092);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = new Complex((-226.31292228118), 2554.744444446891);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex3.INF.subtract((-226.31292228118));
      complex1.getField();
      complex2.ONE.add(complex0);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.hashCode();
      Complex complex5 = complex2.createComplex(6.283185307179586, 6.283185307179586);
      complex5.atan();
      Complex complex6 = complex2.acos();
      complex1.pow(complex5);
      complex0.getReal();
      complex5.isNaN();
      complex1.subtract(1375.8666400450309);
      Complex complex7 = complex6.divide(1248.1290441828);
      complex7.ZERO.subtract(6.283185307179586);
      complex4.sqrt();
      complex0.pow(complex2);
      Complex complex8 = complex2.pow(6.283185307179586);
      complex8.ONE.multiply(0);
      complex7.nthRoot(1);
      complex6.pow(complex3);
      complex0.log();
      Object object1 = new Object();
      complex1.equals(object1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      complex0.ONE.getArgument();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      complex3.NaN.abs();
      Complex complex4 = complex0.I.log();
      complex4.ONE.divide(0.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1591.68144539), (-1591.68144539));
      Complex complex1 = Complex.valueOf((-1591.68144539));
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.atan();
      complex3.INF.toString();
      Complex complex4 = complex0.NaN.pow(1485.602525417);
      complex0.ZERO.reciprocal();
      complex4.conjugate();
      complex0.toString();
      complex0.abs();
      complex0.INF.tanh();
      complex2.getField();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex1.log();
      complex1.toString();
      Complex complex7 = complex1.divide((-2060.3770905328));
      complex7.INF.getField();
      Complex complex8 = complex6.cos();
      complex6.ZERO.getField();
      complex8.ONE.pow(1485.602525417);
      complex8.hashCode();
      Complex complex9 = complex5.asin();
      complex9.ZERO.log();
      Complex complex10 = complex0.sin();
      complex3.exp();
      complex0.sqrt();
      complex9.sinh();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(4960.882822063901, 4960.882822063901);
      Complex complex1 = complex0.negate();
      Complex.valueOf(4960.882822063901, 4960.882822063901);
      complex1.subtract((-4853.32008));
      complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.divide(4960.882822063901);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ZERO.log();
      Complex.valueOf(4960.882822063901);
      complex4.asin();
      Complex complex5 = complex2.asin();
      complex5.ZERO.sqrt();
      complex5.ZERO.sqrt();
      complex2.isNaN();
      Complex complex6 = Complex.ZERO;
      complex6.acos();
      complex4.subtract(complex6);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.cos();
      complex3.readResolve();
      complex0.add(complex1);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.ZERO.atan();
      complex4.INF.hashCode();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex7.I.divide(0.0);
      Complex complex9 = complex4.asin();
      complex4.abs();
      complex9.getField();
      complex9.isInfinite();
      complex1.readResolve();
      complex2.abs();
      complex0.isNaN();
      complex1.INF.pow(complex8);
      complex9.reciprocal();
      complex4.sinh();
      Complex complex10 = complex9.multiply(complex5);
      complex10.INF.nthRoot(1);
      complex3.sin();
      complex7.divide(36.071404402473284);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.exp();
      complex0.NaN.toString();
      complex0.getField();
      complex0.toString();
      Complex complex1 = complex0.divide((-106.8));
      Complex complex2 = Complex.valueOf((-106.8));
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.I.reciprocal();
      complex0.abs();
      complex3.divide(complex0);
      Complex.valueOf(1.0, (-106.8));
      complex4.sinh();
      complex3.subtract(complex1);
      complex2.multiply((-5408.557855999598));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.subtract((-2108.974439924768));
      Complex complex2 = Complex.valueOf((-2108.974439924768));
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.NaN.sin();
      complex0.getField();
      complex1.exp();
      Complex complex5 = complex2.cosh();
      Complex complex6 = Complex.valueOf((-1.0));
      complex5.INF.reciprocal();
      Complex complex7 = complex2.ONE.divide(0.0);
      complex7.ONE.reciprocal();
      complex5.getArgument();
      complex6.INF.sinh();
      complex1.conjugate();
      Complex complex8 = complex0.cos();
      complex8.I.negate();
      Complex complex9 = complex2.multiply(925);
      complex9.NaN.divide(complex5);
      complex4.subtract(complex9);
      complex4.sin();
      complex3.isNaN();
      complex6.isNaN();
      complex6.negate();
      complex7.tan();
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ONE.add(1.184154459111628E-8);
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = new Complex(1.184154459111628E-8, 0.0);
      Complex.valueOf((-698.0));
      Complex complex4 = complex2.NaN.add((-698.0));
      complex3.NaN.negate();
      complex1.ONE.hashCode();
      complex1.pow(0.0);
      complex3.I.hashCode();
      Complex complex5 = complex0.divide(complex3);
      complex5.I.sin();
      complex5.exp();
      complex3.subtract(20.0);
      complex3.getField();
      complex1.add(complex2);
      Complex complex6 = complex3.negate();
      complex6.getReal();
      Complex complex7 = complex4.subtract((-1994.1));
      complex7.ZERO.toString();
      complex1.toString();
      complex7.subtract((-1.184154459111628E-8));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.NaN.sqrt1z();
      complex1.multiply(complex5);
      complex0.getReal();
      Complex complex6 = Complex.valueOf((-1159.9), 0.0);
      Complex complex7 = complex1.I.divide(complex6);
      Complex complex8 = complex7.log();
      complex1.ZERO.asin();
      complex3.ONE.cosh();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex1.log();
      complex10.getImaginary();
      Complex complex11 = Complex.valueOf(0.0);
      complex9.toString();
      complex4.getReal();
      complex8.cosh();
      Complex complex12 = complex4.sin();
      complex11.getField();
      complex2.subtract(complex12);
      complex1.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-82.1367758804));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.readResolve();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.valueOf(0.0, (-843.824));
      Complex complex5 = complex2.I.add(complex4);
      complex3.reciprocal();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.INF.divide(complex2);
      complex7.atan();
      complex0.subtract((-82.1367758804));
      complex6.equals(complex5);
      Complex complex8 = complex3.tan();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1134.704802795732), (-1134.704802795732));
      Complex complex1 = complex0.ZERO.multiply((-2987));
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.I.add(complex3);
      complex4.hashCode();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex3.I.sin();
      complex3.INF.add(Double.POSITIVE_INFINITY);
      complex5.ZERO.add((-1134.704802795732));
      Complex complex7 = Complex.valueOf((-604.7208590019663));
      complex0.getField();
      Complex complex8 = complex0.pow((-3258.4068015815));
      complex8.hashCode();
      Complex complex9 = complex8.ZERO.pow(0.06154331564903259);
      Complex complex10 = complex0.tanh();
      complex8.getArgument();
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex11.I.subtract(1506.6575571196158);
      complex3.tanh();
      Complex complex13 = complex12.INF.pow(complex7);
      complex4.hashCode();
      Complex complex14 = complex10.createComplex((-604.7208590019663), (-2987));
      Complex complex15 = complex11.atan();
      complex15.NaN.getArgument();
      complex2.subtract(complex6);
      complex13.subtract(1808.5136);
      complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1572.51, 2.0);
      complex0.multiply(830);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.cosh();
      complex2.I.sqrt();
      complex1.readResolve();
      complex3.toString();
      complex3.readResolve();
      complex1.toString();
      complex0.conjugate();
      complex1.isNaN();
      complex3.getReal();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex1.I.add(0.4126010537147522);
      complex0.sqrt1z();
      complex0.subtract(complex1);
      complex0.ZERO.abs();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.tan();
      complex2.asin();
      complex0.add(0.0);
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.toString();
      complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.INF.sin();
      complex3.NaN.toString();
      complex1.ONE.abs();
      complex1.INF.subtract(1177.0);
      Complex complex4 = complex0.subtract(complex1);
      Complex.valueOf(6.48979555673987E-8);
      complex0.getField();
      Complex complex5 = complex4.NaN.sin();
      complex1.acos();
      complex4.readResolve();
      Complex.valueOf(6.48979555673987E-8);
      complex2.nthRoot(17);
      complex3.tanh();
      complex4.exp();
      complex0.add(complex2);
      complex5.createComplex(17, 0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.619992971420288, 0.0);
      Complex complex1 = complex0.ZERO.pow(0.0);
      complex0.getArgument();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.atan();
      complex3.conjugate();
      Complex complex4 = complex2.INF.multiply(1.619992971420288);
      Complex complex5 = complex4.I.add(complex1);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.INF.multiply(0);
      Complex complex6 = complex0.log();
      complex6.I.subtract(0.0);
      Complex complex7 = complex1.exp();
      complex6.sqrt();
      complex7.I.asin();
      complex6.readResolve();
      complex4.subtract((-2170.681463));
      Object object1 = new Object();
      complex5.equals(object1);
      complex1.add(complex7);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2015.18199));
      Complex complex1 = complex0.NaN.reciprocal();
      complex0.ZERO.abs();
      Complex complex2 = complex0.I.exp();
      complex0.abs();
      Complex complex3 = complex1.sqrt1z();
      complex0.exp();
      Complex complex4 = complex3.subtract(0.0);
      complex4.ZERO.subtract(complex3);
      try { 
        complex2.nthRoot((-3046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,046
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex0.tanh();
      Complex complex2 = complex0.subtract(1897.8315);
      Complex complex3 = complex1.pow(1897.8315);
      Complex complex4 = complex3.ONE.multiply(complex1);
      Complex complex5 = complex3.sinh();
      complex5.ONE.createComplex(1897.8315, 1897.8315);
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.subtract(complex6);
      complex7.ZERO.acos();
      complex4.getImaginary();
      complex0.pow((-1.0));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.asin();
      complex1.acos();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.createComplex(144.0225, (-1962.656457));
      Complex complex4 = complex3.ONE.reciprocal();
      complex1.NaN.cosh();
      Complex.valueOf(0.0);
      complex4.INF.tan();
      Complex complex5 = complex3.NaN.sqrt1z();
      complex5.NaN.subtract(complex2);
      Complex complex6 = complex3.pow(complex1);
      complex6.getField();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.cosh();
      complex0.isNaN();
      complex1.getField();
      Complex complex3 = complex2.ONE.pow(153.22061);
      complex3.I.exp();
      complex0.getReal();
      Complex complex4 = complex0.sinh();
      complex2.readResolve();
      Complex complex5 = complex0.ONE.atan();
      complex5.ONE.cosh();
      Complex.valueOf(153.22061, 0.0);
      Complex complex6 = complex0.conjugate();
      complex6.NaN.atan();
      complex6.ONE.getArgument();
      complex4.pow(1.0);
      complex1.isNaN();
      try { 
        complex1.nthRoot((-71));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -71
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.hashCode();
      Complex complex1 = complex0.I.add((-1089.0));
      Complex complex2 = complex1.ONE.tan();
      complex2.ZERO.hashCode();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.subtract(0.0);
      complex1.NaN.add(0.0);
      Complex.valueOf((-1089.0), (-1134.0));
      complex3.INF.toString();
      Complex complex6 = complex4.INF.negate();
      Complex complex7 = complex6.createComplex(0.0, (-1089.0));
      complex7.NaN.hashCode();
      Complex complex8 = Complex.valueOf((-20.0), (-20.0));
      complex8.INF.abs();
      Complex complex9 = complex0.exp();
      complex3.ZERO.sin();
      Complex complex10 = complex9.divide(complex1);
      complex1.INF.getArgument();
      complex3.I.nthRoot(58);
      complex3.isNaN();
      complex10.ONE.getArgument();
      Complex complex11 = complex3.pow(complex10);
      complex5.getArgument();
      complex3.pow(complex11);
      complex5.tan();
      complex7.sqrt();
      complex10.conjugate();
      complex7.isInfinite();
      complex10.getReal();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex1.ONE.getArgument();
      Complex complex2 = complex1.INF.tan();
      String string0 = complex2.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.NaN.divide(complex2);
      complex4.ONE.getArgument();
      double double0 = complex1.abs();
      assertEquals(1.1752011936438014, double0, 0.01);
      
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = (Complex)complex1.readResolve();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex7.ONE.sin();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.pow(complex7);
      Complex complex10 = complex5.atan();
      Complex complex11 = complex0.negate();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex9.createComplex(861.5518658916, 861.5518658916);
      Complex complex13 = complex12.I.subtract(0.0);
      Complex complex14 = complex10.cosh();
      complex12.isNaN();
      Complex complex15 = complex9.sin();
      complex3.exp();
      Complex complex16 = Complex.valueOf(0.0);
      complex15.equals(complex16);
      assertSame(complex9, complex14);
      assertSame(complex7, complex15);
      assertEquals(0.0, complex16.getReal(), 0.01);
      
      Complex complex17 = complex3.atan();
      complex2.getField();
      Complex complex18 = complex17.asin();
      assertTrue(complex1.equals((Object)complex6));
      assertSame(complex18, complex5);
      assertFalse(complex1.equals((Object)complex16));
      assertSame(complex18, complex4);
      assertFalse(complex18.equals((Object)complex13));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.cos();
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
      
      complex1.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex1.add(complex0);
      boolean boolean0 = complex2.isInfinite();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(boolean0);
  }
}
