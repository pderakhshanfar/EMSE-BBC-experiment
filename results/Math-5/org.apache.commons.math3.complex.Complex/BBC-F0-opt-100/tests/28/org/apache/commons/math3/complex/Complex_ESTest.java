/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:17:04 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.100525379180908, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(58.754423420366734, Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.add(complex1);
      Complex complex2 = Complex.valueOf((-511.089167545), Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(2.0);
      complex3.abs();
      complex3.multiply(2232);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ONE;
      complex5.toString();
      complex4.tan();
      Complex complex6 = new Complex((-511.089167545), 479.0686970062438);
      Complex complex7 = complex6.sqrt();
      complex2.divide(complex7);
      complex2.cos();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(58.754423420366734, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.multiply(1746);
      Complex complex3 = Complex.NaN;
      complex2.toString();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.737252533211342E-9));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      complex0.toString();
      Complex complex3 = complex2.asin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-29.38146547673176), (-29.38146547673176));
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(58.754423420366734, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.multiply(1746);
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.ONE;
      complex0.toString();
      complex2.tan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.575759739697068E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.NaN.sqrt();
      complex2.getArgument();
      complex1.I.getField();
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.ZERO.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      complex4.I.hashCode();
      complex3.ZERO.getField();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.pow(complex5);
      complex0.nthRoot(3145);
      Complex complex6 = complex1.log();
      complex6.add(complex1);
      Complex complex7 = complex5.subtract(163.637);
      complex7.abs();
      complex2.pow(163.637);
      complex2.I.sin();
      complex6.divide(5.575759739697068E-8);
      Complex complex8 = complex4.add((double) 3145);
      complex8.NaN.getArgument();
      complex5.toString();
      Complex complex9 = complex8.divide(complex3);
      complex9.ONE.reciprocal();
      complex5.tan();
      complex7.multiply(1814);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(741.3792241195773, 20.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.log();
      complex1.getReal();
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex4.createComplex(6.283185307179586, 6.283185307179586);
      complex4.getReal();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex1.pow(complex2);
      complex0.getReal();
      Complex.valueOf(3779.7);
      Complex complex8 = complex5.pow(complex7);
      complex8.NaN.pow(complex6);
      Complex complex9 = new Complex(3779.7);
      complex3.divide(Double.NaN);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.ONE;
      complex0.toString();
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.INF;
      complex5.abs();
      complex5.abs();
      complex5.exp();
      Complex complex6 = Complex.NaN;
      complex4.getReal();
      Complex complex7 = Complex.INF;
      Complex complex8 = new Complex((-20.0));
      Complex complex9 = new Complex((-3330.9342994972517));
      Complex complex10 = complex8.tanh();
      complex1.asin();
      complex10.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.ZERO.sinh();
      complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.NaN.multiply(complex7);
      complex0.subtract(complex6);
      complex5.pow(complex3);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1339));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-295.9263574869442));
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.5012041649242747E-4));
      complex2.hashCode();
      Complex complex4 = complex2.tan();
      complex4.I.negate();
      complex3.readResolve();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex((-295.9263574869442), Double.POSITIVE_INFINITY);
      complex6.NaN.sinh();
      complex5.subtract(complex6);
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-3330.6596406669773), (-3330.6596406669773));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.divide((-20.0));
      complex0.add(Double.NaN);
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0686474223616E13);
      complex0.I.getField();
      Complex complex1 = complex0.atan();
      complex1.I.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.INF.pow(complex1);
      complex0.I.exp();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.ZERO.pow(complex1);
      Complex complex7 = complex0.log();
      complex1.ONE.reciprocal();
      Complex complex8 = complex2.ONE.sqrt1z();
      Complex complex9 = complex8.NaN.cosh();
      complex9.NaN.conjugate();
      complex3.nthRoot(849);
      complex3.cos();
      Complex.valueOf((double) 849, (-1.0));
      Complex complex10 = complex0.pow(complex2);
      complex10.ONE.divide(complex6);
      complex10.abs();
      complex1.pow(1956.556296388);
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex1.pow(complex4);
      Complex complex13 = complex11.asin();
      Complex complex14 = complex13.ONE.reciprocal();
      complex5.multiply(complex12);
      complex1.multiply(849);
      Complex complex15 = complex5.tan();
      complex7.subtract(complex3);
      complex12.exp();
      complex15.reciprocal();
      complex14.multiply((double) 849);
      complex10.sqrt();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      Complex complex2 = complex0.INF.asin();
      complex2.NaN.add(997.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-41.077957773), (-41.077957773));
      Complex complex1 = complex0.multiply(1770);
      complex1.ZERO.subtract(complex0);
      Complex complex2 = Complex.valueOf((-41.077957773));
      Complex complex3 = Complex.INF;
      complex3.INF.multiply(1770);
      complex0.NaN.subtract(complex3);
      complex2.nthRoot(1770);
      complex0.pow((-41.077957773));
      Complex complex4 = complex0.reciprocal();
      complex4.ZERO.tanh();
      Complex complex5 = complex0.cosh();
      Complex.valueOf(1406.585692558321, 2516.0);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2477.825996512, 4.153321337726989E-8);
      complex0.readResolve();
      Complex complex1 = Complex.INF;
      complex1.asin();
      Complex.valueOf(4.153321337726989E-8, 1.5012041649242747E-4);
      complex0.cosh();
      complex0.toString();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.tan();
      complex0.exp();
      complex0.tanh();
      complex3.multiply(215);
      Complex.valueOf((-1.1093292641967878E7));
      Complex complex4 = complex2.cos();
      complex4.tan();
      Complex.valueOf(304.804224776);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.atan();
      complex0.subtract((-1.0));
      Complex complex5 = complex1.multiply(1766);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.cos();
      Complex.valueOf(2251.6, 20.0);
      Complex complex9 = complex1.tan();
      complex9.readResolve();
      complex8.equals(complex5);
      complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ONE;
      complex1.toString();
      complex0.getField();
      Complex complex4 = complex1.tan();
      complex0.NaN.abs();
      complex3.exp();
      Complex complex5 = complex4.tanh();
      complex5.isNaN();
      complex2.getReal();
      Complex complex6 = Complex.INF;
      complex6.multiply(560);
      Complex.valueOf((-1760.9), Double.NaN);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply((-1.0));
      complex0.abs();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = complex2.subtract(complex1);
      complex3.getField();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex1.sin();
      complex7.subtract(1.2678272724151611);
      complex4.sqrt();
      complex6.ZERO.getArgument();
      complex5.subtract(Double.NaN);
      Complex complex8 = complex1.acos();
      complex8.ZERO.add(complex6);
      complex0.sqrt();
      complex1.getField();
      complex0.getField();
      complex8.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-499.39815405837345));
      Complex complex2 = complex0.divide((-499.39815405837345));
      try { 
        complex2.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(975.65176718229);
      complex0.createComplex(975.65176718229, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex.valueOf((-3330.6596406669773));
      Complex complex0 = new Complex((-3330.6596406669773), (-3330.6596406669773));
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.ONE;
      Complex.valueOf((-3330.6596406669773));
      complex2.getField();
      Complex complex3 = complex0.tan();
      complex2.abs();
      Complex complex4 = complex0.pow((-1.3577357192972777E258));
      Complex complex5 = complex4.exp();
      complex4.nthRoot(1156);
      Complex complex6 = complex3.tanh();
      complex6.isNaN();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.multiply(4130);
      Complex.valueOf((-1.3577357192972777E258));
      complex7.cos();
      complex0.tan();
      complex5.isInfinite();
      complex2.tanh();
      complex2.readResolve();
      Complex complex9 = Complex.valueOf((-1.3577357192972777E258));
      complex1.equals(complex9);
      complex4.cos();
      complex8.multiply((-1.2470243596102937E-8));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.cosh();
      complex1.toString();
      complex0.getField();
      Complex complex4 = complex1.tan();
      complex0.NaN.abs();
      Complex complex5 = new Complex((-3330.6596406669773), Double.NaN);
      Complex complex6 = complex5.exp();
      complex0.I.nthRoot(4153);
      Complex complex7 = complex4.tanh();
      complex7.isNaN();
      Complex complex8 = complex1.atan();
      complex6.pow(Double.NaN);
      Complex complex9 = complex8.subtract(103.8742617502459);
      Complex complex10 = Complex.ZERO;
      complex10.multiply(complex9);
      Complex complex11 = complex3.negate();
      Complex complex12 = complex11.subtract(complex3);
      Complex complex13 = complex2.log();
      Complex complex14 = Complex.valueOf(1.1035435265124826E-55);
      complex14.getReal();
      Complex complex15 = complex1.createComplex(2405.82220858752, 4153);
      complex12.getReal();
      complex10.sin();
      complex12.pow(complex13);
      complex1.getReal();
      complex6.subtract((-3330.6596406669773));
      complex9.pow(complex15);
      Complex complex16 = new Complex(0.0);
      Complex.valueOf((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(697.6676186965717, 697.6676186965717);
      Complex complex2 = Complex.valueOf(697.6676186965717);
      complex1.abs();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.subtract(986.6510083892329);
      Complex complex5 = complex0.multiply(complex1);
      complex2.negate();
      Complex complex6 = complex3.subtract(complex4);
      complex1.getReal();
      Complex complex7 = complex2.createComplex(986.6510083892329, 3443.1528059232123);
      complex7.getReal();
      complex3.sin();
      Complex complex8 = complex5.atan();
      Complex complex9 = new Complex((-1532.7), 3443.1528059232123);
      complex9.pow(complex4);
      complex3.getReal();
      complex8.subtract(20.0);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex9.pow(complex6);
      Complex complex12 = new Complex(6.5477427983683185);
      Complex.valueOf((-0.7615941559557649));
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(1728.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.cosh();
      object0.toString();
      Complex complex4 = Complex.ONE;
      complex4.getField();
      Complex complex5 = complex0.tan();
      complex0.abs();
      Complex complex6 = complex3.pow(1728.0);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex6.createComplex(1728.0, 2230.792962077);
      complex8.ZERO.add(complex1);
      complex8.getReal();
      complex7.sin();
      Complex complex9 = complex0.atan();
      complex4.pow(complex0);
      complex3.getReal();
      complex9.subtract((-2459.08173756));
      Complex complex10 = Complex.INF;
      complex0.pow(complex3);
      Complex complex11 = new Complex((-2459.08173756));
      Complex.valueOf((-1.1093292641967878E7));
      Complex complex12 = Complex.INF;
      complex12.tanh();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-369.81670837068), (-427.553));
      Complex complex1 = complex0.add(2763.070348);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      complex0.divide(complex1);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-41.077957773), (-41.077957773));
      Complex complex1 = complex0.multiply(1770);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = Complex.valueOf((-41.077957773));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.INF.multiply(1770);
      Complex complex6 = complex0.NaN.subtract(complex4);
      complex3.nthRoot(1770);
      Complex complex7 = complex0.pow((-41.077957773));
      Complex complex8 = complex1.subtract(complex0);
      complex7.ZERO.divide((-1532.7));
      complex8.getReal();
      Complex.valueOf((double) 1770);
      Complex complex9 = new Complex((-1532.7), 1.2904307529671472E-176);
      complex9.createComplex((-1532.7), (-1532.7));
      complex5.getReal();
      complex1.atan();
      complex0.pow(complex7);
      complex5.getReal();
      complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.INF;
      complex6.pow(complex9);
      Complex complex11 = new Complex(20.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(4102.5906466569, 4102.5906466569);
      complex1.toString();
      complex1.getField();
      Complex complex2 = complex0.tan();
      double double0 = 1.2890510559082031;
      Complex complex3 = Complex.valueOf(1.2890510559082031);
      complex3.abs();
      complex2.pow(1.2890510559082031);
      Complex complex4 = complex3.exp();
      int int0 = 4153;
      // Undeclared exception!
      complex4.nthRoot(2144409963);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1728.0);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.log();
      complex1.sinh();
      Complex complex2 = complex0.subtract(1728.0);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex1.INF.asin();
      complex1.INF.conjugate();
      complex0.readResolve();
      complex4.reciprocal();
      complex3.abs();
      Complex complex5 = complex2.log();
      complex4.asin();
      complex2.tan();
      complex1.divide(complex5);
      complex2.multiply(1728.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.subtract(complex2);
      complex1.getReal();
      complex4.createComplex(1.0, 140.51152204);
      complex4.getReal();
      complex4.sin();
      Complex complex6 = complex0.atan();
      complex6.pow(complex4);
      complex5.getReal();
      complex5.subtract(1.0);
      Complex complex7 = Complex.INF;
      complex7.pow(complex4);
      Complex complex8 = new Complex((-1.0));
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(697.6676186965717, 697.6676186965717);
      Complex complex2 = Complex.valueOf(697.6676186965717);
      complex1.abs();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.subtract(986.6510083892329);
      complex0.multiply(complex1);
      complex2.negate();
      Complex.valueOf((-1685.2265886837806), 697.6676186965717);
      complex3.pow(complex4);
      complex1.reciprocal();
      Complex complex5 = Complex.I;
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(1);
      complex1.readResolve();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.tan();
      complex1.isNaN();
      Complex complex5 = Complex.valueOf(2076.15739436427, 0.0);
      complex5.tanh();
      Complex complex6 = Complex.I;
      complex6.equals(complex1);
      Complex.valueOf(0.0, 0.231700599193573);
      complex3.getArgument();
      complex6.createComplex(0.0, (-1681.1707929844));
      complex1.sqrt1z();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(1471.58127450894);
      complex1.I.hashCode();
      Complex complex2 = complex1.ZERO.sin();
      complex2.NaN.subtract(complex1);
      Complex complex3 = complex0.INF.reciprocal();
      complex0.NaN.nthRoot(1073547112);
      Complex complex4 = complex3.ZERO.log();
      complex4.ONE.exp();
      complex0.I.add(1471.58127450894);
      complex0.add(4.372568630242375E-8);
      complex1.isInfinite();
      complex4.sqrt1z();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex1.multiply((-1765));
      Complex complex6 = Complex.I;
      complex4.equals(complex6);
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.ZERO;
      complex8.pow((-2638.21239));
      Complex complex9 = complex2.subtract(1.5173907279968262);
      Complex complex10 = complex5.multiply(complex7);
      complex1.negate();
      complex0.subtract(complex6);
      complex10.log();
      complex8.getReal();
      Complex complex11 = complex9.createComplex(4.588037824983901, (-2638.21239));
      complex0.getReal();
      Complex complex12 = complex9.sin();
      complex9.pow(complex2);
      complex9.getReal();
      complex11.subtract((-3206.7226768));
      complex12.pow(complex9);
      Complex complex13 = new Complex((-2638.21239));
      Complex.valueOf(1.5173907279968262);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = new Complex(Double.NaN);
      complex1.atan();
      complex0.getArgument();
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.cosh();
      complex1.toString();
      complex0.getField();
      Complex complex4 = complex1.tan();
      complex0.NaN.abs();
      Complex complex5 = complex4.pow((-3330.6596406669773));
      Complex complex6 = complex5.exp();
      complex0.I.nthRoot(4153);
      Complex complex7 = complex4.tanh();
      complex7.isNaN();
      Complex complex8 = complex1.atan();
      complex6.pow(Double.NaN);
      Complex complex9 = complex8.subtract(103.8742617502459);
      Complex complex10 = Complex.ZERO;
      complex10.multiply(complex9);
      Complex complex11 = complex3.negate();
      Complex complex12 = complex11.subtract(complex3);
      Complex complex13 = complex2.log();
      Complex complex14 = Complex.valueOf(1.1035435265124826E-55);
      complex14.getReal();
      Complex complex15 = complex1.createComplex(2405.82220858752, 4153);
      complex12.getReal();
      complex10.sin();
      complex12.pow(complex13);
      complex1.getReal();
      complex6.subtract((-3330.6596406669773));
      complex9.pow(complex15);
      Complex complex16 = new Complex(0.0);
      Complex.valueOf((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      complex1.INF.tan();
      Complex complex2 = complex1.cosh();
      complex1.toString();
      complex0.getField();
      Complex complex3 = complex1.tan();
      complex0.NaN.abs();
      Complex complex4 = complex3.pow((-3330.6596406669773));
      complex4.exp();
      complex0.I.nthRoot(4153);
      Complex complex5 = complex3.tanh();
      complex5.isNaN();
      Complex complex6 = complex5.multiply(4130);
      complex6.readResolve();
      complex4.exp();
      complex2.cos();
      complex1.tan();
      complex6.isNaN();
      complex1.tanh();
      complex4.equals(complex1);
      Complex.valueOf(577.62323276, Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex7 = complex2.createComplex((-2391.0), Double.POSITIVE_INFINITY);
      complex5.abs();
      complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-41.077957773), (-41.077957773));
      Complex complex1 = complex0.multiply(1770);
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.INF.multiply(1770);
      complex0.NaN.subtract(complex3);
      complex2.nthRoot(1770);
      Complex complex5 = complex0.pow((-41.077957773));
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex0.cosh();
      complex6.ONE.atan();
      complex1.nthRoot(1004);
      complex2.tanh();
      complex6.isNaN();
      Complex complex9 = complex2.multiply(4130);
      complex1.readResolve();
      Complex complex10 = complex4.cos();
      complex1.tan();
      complex5.isNaN();
      Complex complex11 = complex4.tanh();
      complex7.equals(complex11);
      Complex.valueOf((double) 1770, (double) 1770);
      complex0.getArgument();
      complex9.createComplex(4130, (-1427.3504967));
      complex8.sqrt1z();
      complex10.asin();
      complex2.createComplex(1264.93082560069, (-558.9));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex.valueOf((-877.8550912294888), (-877.8550912294888));
      Complex complex1 = Complex.valueOf((-3166.899401), 1.1168024085164686E112);
      complex1.getField();
      Complex complex2 = complex1.divide(4051.892687826801);
      complex0.isNaN();
      complex1.multiply(13);
      complex1.readResolve();
      Complex complex3 = Complex.NaN;
      complex2.tan();
      complex2.isNaN();
      Complex complex4 = new Complex((-1264.93082560069), 0.0);
      complex4.tanh();
      Complex.valueOf((-49.6), 0.0);
      Complex complex5 = Complex.NaN;
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.737252533211342E-9));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      complex0.toString();
      complex2.getField();
      Complex complex3 = complex1.tan();
      complex2.abs();
      Complex complex4 = complex1.pow((-3439.9393493827615));
      Complex complex5 = complex1.exp();
      complex3.nthRoot(4153);
      complex4.tanh();
      complex2.isNaN();
      Complex complex6 = complex1.multiply(4130);
      complex0.readResolve();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex0.tan();
      complex7.isNaN();
      complex6.equals(complex5);
      Complex.valueOf((double) 4130, (-1546.610049242));
      complex1.getArgument();
      complex8.createComplex(577.62323276, 4130);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.tan();
      complex2.NaN.cosh();
      complex1.INF.toString();
      complex0.getField();
      complex1.tan();
      Complex.valueOf((-1.0230024728472298E-71), (-3330.6596406669773));
      complex0.conjugate();
      complex1.hashCode();
      Object object0 = complex2.readResolve();
      Complex complex3 = Complex.ONE;
      complex3.equals(object0);
      Complex complex4 = Complex.valueOf(1.56200679236425E253, (-1.0230024728472298E-71));
      complex4.getArgument();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.I.negate();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.sqrt1z();
      complex4.subtract(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.conjugate();
      complex0.hashCode();
      Complex complex5 = (Complex)complex2.readResolve();
      complex2.equals(complex5);
      Complex.valueOf((-3.3617154084732262E17), 0.0);
      Complex complex6 = Complex.valueOf((-1186.00714), (-1186.00714));
      complex6.sin();
      Complex complex7 = Complex.I;
      complex7.pow(complex5);
      Complex complex8 = Complex.valueOf(2.0, (-3893.887277969));
      complex8.getReal();
      complex1.subtract(2.0);
      complex3.pow(complex4);
      Complex complex9 = new Complex((-1186.00714));
      Complex.valueOf(2.915165904253785E89);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 604.4105928951675;
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-2366.679982337986), 697.6676186965717);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply((-2366.679982337986));
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.divide(complex0);
      complex4.conjugate();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = complex6.ONE.multiply(complex2);
      complex7.INF.sinh();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.NaN.pow(complex6);
      Complex complex10 = complex9.NaN.cosh();
      complex10.ZERO.toString();
      Complex complex11 = Complex.I;
      Complex complex12 = complex3.pow(complex11);
      complex12.getArgument();
      complex5.multiply(complex0);
      complex12.equals("}");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(882.3686565, 6.283185307179586);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.pow(complex0);
      complex1.sqrt();
      complex4.acos();
      complex0.multiply(complex2);
      complex2.nthRoot(198);
      Complex complex5 = complex2.cosh();
      complex1.tan();
      Complex.valueOf((double) 198);
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(697.6676186965717, 697.6676186965717);
      Complex complex2 = Complex.valueOf(697.6676186965717);
      complex1.abs();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.asin();
      complex4.ONE.tan();
      complex1.divide(complex4);
      complex3.multiply(697.6676186965717);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.I.negate();
      complex2.I.asin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.subtract(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.conjugate();
      complex0.hashCode();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      Complex.valueOf((-3.3617154084732262E17), 0.0);
      complex0.getArgument();
      complex2.createComplex(Double.NaN, 2776.0855);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.1088103279787804E-8), (-3344.4814420492826));
      complex0.ZERO.negate();
      Complex complex1 = complex0.I.log();
      complex0.hashCode();
      complex1.divide((-3344.4814420492826));
      Complex complex2 = Complex.valueOf((-5.1088103279787804E-8));
      complex1.asin();
      complex2.tan();
      Complex complex3 = new Complex((-30.407556277835422), 116.6113);
      complex3.divide(complex1);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      complex1.INF.tan();
      Complex complex2 = complex1.cosh();
      complex1.toString();
      complex0.getField();
      Complex complex3 = complex1.tan();
      complex0.NaN.abs();
      Complex complex4 = complex3.pow((-3330.6596406669773));
      complex4.exp();
      complex0.I.nthRoot(4153);
      Complex complex5 = complex3.tanh();
      complex5.isNaN();
      Complex complex6 = complex5.multiply(4130);
      complex6.readResolve();
      complex2.cos();
      complex1.tan();
      complex6.isNaN();
      complex1.tanh();
      complex4.equals(complex1);
      Complex.valueOf(577.62323276, Double.POSITIVE_INFINITY);
      complex0.getArgument();
      complex2.createComplex((-2391.0), Double.POSITIVE_INFINITY);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.tan();
      complex2.NaN.cosh();
      complex1.INF.toString();
      complex0.getField();
      Complex complex3 = complex1.tan();
      complex0.NaN.abs();
      Complex complex4 = complex3.pow((-3330.6596406669773));
      complex4.exp();
      Complex complex5 = Complex.valueOf((-982.731089958604));
      complex5.subtract(1.0642823992403076E208);
      Complex.valueOf((-982.731089958604), 137.955093955);
      complex5.conjugate();
      complex1.hashCode();
      Complex.valueOf(Double.NaN, (-982.731089958604));
      Complex complex6 = Complex.I;
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.divide(complex1);
      Complex complex3 = complex0.sqrt1z();
      complex2.nthRoot(1321);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.tanh();
      complex5.log();
      Complex complex6 = complex0.multiply(complex4);
      complex2.getField();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = Complex.valueOf(0.0, (-1576.961));
      complex6.toString();
      Complex complex9 = complex5.sinh();
      complex7.getImaginary();
      Complex complex10 = Complex.I;
      complex10.pow(complex1);
      complex9.getReal();
      complex6.multiply(complex10);
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.I.add(1515.504);
      Complex complex2 = complex0.ONE.add((-5517.502777));
      complex1.I.divide(1515.504);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.atan();
      complex1.acos();
      complex5.equals(complex3);
      Complex complex6 = complex2.negate();
      complex6.sqrt();
      complex4.exp();
      complex2.divide((double) 898);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex0.sqrt();
      complex0.toString();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf(4327.96545024, 0.0);
      complex4.subtract(complex3);
      Complex complex5 = complex4.multiply((-1079));
      complex0.tan();
      Complex complex6 = Complex.ZERO;
      complex5.isInfinite();
      Complex complex7 = complex2.reciprocal();
      complex5.cosh();
      complex1.nthRoot(217);
      complex4.isInfinite();
      complex1.acos();
      Complex complex8 = Complex.valueOf(2.1151310700892382E-19, 4327.96545024);
      complex8.toString();
      complex7.isNaN();
      complex1.sin();
      complex3.pow(complex7);
      Complex complex9 = Complex.valueOf(3988.201875, (-1554.057072842182));
      complex9.divide(695.7489738621);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.acos();
      complex2.atan();
      complex2.NaN.exp();
      complex1.I.multiply(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.reciprocal();
      complex2.divide(complex0);
      complex4.sqrt1z();
      complex2.subtract((-2617.0));
      Complex complex5 = Complex.valueOf((-2617.0), (-2617.0));
      Complex complex6 = complex5.conjugate();
      complex6.hashCode();
      Complex complex7 = Complex.valueOf((-2617.0), 20.0);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-3449.0), (-3449.0));
      complex0.isNaN();
      complex1.abs();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.log();
      complex1.multiply(608950357);
      Complex complex4 = Complex.valueOf(1115.962);
      Complex complex5 = complex4.add(4877.622576624805);
      Complex complex6 = complex2.divide(complex4);
      complex4.acos();
      Complex complex7 = complex6.sinh();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.tanh();
      complex3.cos();
      complex5.abs();
      complex7.readResolve();
      complex9.atan();
      Complex complex10 = new Complex(5993.584576624806, 964);
      Complex complex11 = complex10.acos();
      complex0.equals(complex2);
      complex11.negate();
      Complex complex12 = new Complex(964, (-1554.057072842182));
      complex12.sqrt();
      complex1.exp();
      Complex complex13 = new Complex(0.0);
      complex13.divide((double) 964);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.divide(complex1);
      Complex complex3 = complex1.subtract(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.conjugate();
      complex4.tanh();
      complex0.hashCode();
      Complex complex5 = complex3.reciprocal();
      complex0.pow(0.0);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      Complex.valueOf((-3344.4814420492826), (-3344.4814420492826));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      complex2.hashCode();
      Complex complex3 = complex1.divide((-3344.4814420492826));
      Complex complex4 = Complex.valueOf(2.0);
      complex1.sqrt();
      complex0.asin();
      complex4.abs();
      Complex complex5 = Complex.valueOf((-1675.20954573419));
      complex5.exp();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1939.0));
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.createComplex((-5.1088103279787804E-8), (-1939.0));
      complex3.isNaN();
      complex3.abs();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.log();
      Complex complex6 = complex2.multiply((-2045222521));
      Complex complex7 = complex5.add(1939.0);
      complex2.divide(complex7);
      Complex complex8 = complex5.acos();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex6.tanh();
      complex3.cos();
      complex10.abs();
      complex2.readResolve();
      Complex complex11 = complex6.atan();
      complex8.acos();
      complex9.equals(complex11);
      complex3.negate();
      complex0.sqrt();
      complex3.exp();
      Complex complex12 = new Complex(6185.4164182);
      complex12.divide((-4742.4484438666));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(629.7814933);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex3.sqrt1z();
      complex4.subtract((-1.0));
      Complex.valueOf((-1.0), 1.4721424579620361);
      Complex complex6 = Complex.ZERO;
      complex5.hashCode();
      Complex.valueOf(1527.0, 249.98);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex1.INF.sqrt1z();
      complex3.INF.sqrt1z();
      Complex complex4 = complex1.ZERO.subtract(519.79345828);
      Complex.valueOf(2.2077903747558594);
      complex4.NaN.hashCode();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex2.log();
      complex6.NaN.multiply(519.79345828);
      Complex complex7 = complex6.I.cosh();
      complex7.ONE.cos();
      Complex complex8 = complex6.INF.sqrt1z();
      complex8.I.createComplex((-195.5681), Double.NaN);
      Complex complex9 = new Complex(Double.NaN, (-2.8137609614326677E-86));
      complex4.ZERO.multiply(complex9);
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex10.ZERO.add(519.79345828);
      complex4.getArgument();
      complex8.cosh();
      complex11.add(1000.875031049);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.I.pow((-1.0));
      Complex complex3 = complex2.NaN.cos();
      complex3.NaN.hashCode();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ONE.add((-2440.5825));
      complex4.ZERO.tan();
      complex5.ZERO.add(complex4);
      Complex complex6 = complex4.add((-1.0));
      complex0.sin();
      complex4.nthRoot(1);
      complex0.negate();
      Complex complex7 = complex6.sqrt();
      complex7.INF.sqrt();
      complex6.exp();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.getArgument();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.NaN.subtract(complex1);
      complex4.INF.conjugate();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex1.divide(0.0);
      Complex complex7 = complex5.multiply(complex0);
      complex7.ONE.add(complex0);
      complex5.ONE.abs();
      Complex complex8 = complex5.add((-2863.921535455));
      complex8.I.nthRoot(1884);
      complex5.equals("");
      complex2.pow((-202.6548792130611));
      complex1.getField();
      complex3.getImaginary();
      complex3.getField();
      Complex complex9 = complex1.pow(0.0);
      complex6.toString();
      complex1.log();
      complex3.sqrt1z();
      Complex complex10 = complex9.tan();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.exp();
      Complex complex1 = complex0.NaN.asin();
      complex0.hashCode();
      complex0.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.tanh();
      complex3.I.sqrt();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.tan();
      complex2.NaN.hashCode();
      Complex complex3 = complex1.INF.acos();
      complex3.subtract(0.0);
      Complex complex4 = new Complex((-1873));
      complex0.INF.add(complex4);
      try { 
        complex0.NaN.nthRoot((-1873));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,873
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(1.5518778128928824E-170, 1.5518778128928824E-170);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.pow(1.5518778128928824E-170);
      complex2.ONE.toString();
      Complex complex3 = complex2.INF.pow(complex1);
      complex3.NaN.readResolve();
      Complex complex4 = complex2.acos();
      complex1.NaN.add(1.5518778128928824E-170);
      complex0.isNaN();
      complex3.NaN.getArgument();
      Complex complex5 = complex1.ONE.createComplex((-2820.0), 1.5518778128928824E-170);
      complex5.ZERO.acos();
      Complex complex6 = Complex.valueOf((-1.957497997726303E-8));
      complex6.INF.hashCode();
      complex2.hashCode();
      complex1.ONE.exp();
      Complex complex7 = complex2.ZERO.sin();
      complex3.equals(complex0);
      complex2.getImaginary();
      complex5.getField();
      complex0.getImaginary();
      complex4.getField();
      complex3.nthRoot(79);
      complex7.reciprocal();
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.divide(complex1);
      Complex complex3 = complex0.sqrt1z();
      complex3.subtract(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.conjugate();
      complex0.hashCode();
      Complex.valueOf(0.0, 249.98);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.conjugate();
      complex0.multiply(complex2);
      Complex complex3 = complex0.divide(0.0);
      complex3.NaN.multiply(0.0);
      Complex complex4 = complex0.sin();
      complex0.conjugate();
      complex0.multiply((-2949));
      complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(2.8777050870552646E-8, 0.0);
      complex0.ONE.readResolve();
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      complex0.hashCode();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.sinh();
      complex4.ONE.multiply(complex2);
      Complex complex5 = complex3.I.add((double) 322);
      complex0.nthRoot(322);
      complex1.INF.getField();
      complex0.INF.getField();
      Complex complex6 = complex1.subtract(complex0);
      complex6.I.add(complex3);
      complex1.conjugate();
      complex6.getImaginary();
      complex6.pow(complex3);
      Complex complex7 = complex5.reciprocal();
      complex7.I.hashCode();
      complex3.negate();
      Complex.valueOf(-0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1255);
      complex0.ONE.sin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.multiply(964.59);
      complex0.isNaN();
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex1.NaN.exp();
      complex2.I.add(8.227620163729258E-235);
      Complex complex3 = complex1.NaN.pow(complex0);
      complex3.subtract(592.1119);
      complex0.multiply((-1252));
      Complex complex4 = new Complex(8.227620163729258E-235);
      complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.subtract((-89.814488716));
      complex2.hashCode();
      Complex complex3 = complex0.exp();
      complex0.tan();
      complex0.NaN.add((-89.814488716));
      Complex complex4 = complex3.NaN.conjugate();
      Complex.valueOf(0.0);
      complex1.acos();
      Complex complex5 = complex4.negate();
      complex4.getReal();
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(4013.7490840575456);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(4013.7490840575456);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.ONE.reciprocal();
      complex5.NaN.log();
      complex2.I.hashCode();
      Complex complex6 = complex2.ZERO.log();
      Complex complex7 = complex4.NaN.tan();
      complex7.I.divide(0.0);
      complex0.INF.cos();
      Complex complex8 = complex4.pow(0.0);
      complex8.ONE.acos();
      Complex complex9 = complex2.negate();
      complex9.INF.atan();
      complex3.toString();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4721424579620361, 0.0);
      complex0.I.nthRoot(912);
      Complex complex1 = new Complex(1145.13262971279, 2.9826282194717127E-268);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.subtract(complex0);
      complex3.NaN.toString();
      complex0.I.hashCode();
      Complex complex4 = complex2.multiply(1145.13262971279);
      complex4.getArgument();
      complex4.tan();
      Complex complex5 = complex2.multiply(912);
      complex5.INF.sqrt();
      complex5.multiply(912);
      complex3.getField();
      complex1.getField();
      complex3.sinh();
      Complex complex6 = complex5.tan();
      complex6.ZERO.multiply(179);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.negate();
      complex1.ZERO.nthRoot(910);
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.INF.conjugate();
      complex1.getField();
      complex0.toString();
      complex3.INF.log();
      complex3.I.multiply(0);
      complex1.add(complex0);
      complex3.readResolve();
      complex4.negate();
      complex2.getField();
      complex3.getArgument();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.1088103279787804E-8), (-3344.4814420492826));
      complex0.ZERO.negate();
      Complex complex1 = complex0.I.log();
      complex0.hashCode();
      Complex complex2 = complex1.divide((-3344.4814420492826));
      Complex complex3 = Complex.valueOf((-5.1088103279787804E-8));
      Complex complex4 = complex2.sqrt();
      complex2.I.asin();
      complex1.abs();
      complex4.exp();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(2687.164010705262);
      Complex complex1 = Complex.ONE;
      complex0.exp();
      complex0.ZERO.add(complex1);
      complex0.ZERO.tan();
      complex0.getImaginary();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.tan();
      complex2.getField();
      complex0.atan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(697.6676186965717, 9.221146830884422E-47);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.asin();
      complex4.ONE.tan();
      complex1.divide(complex4);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.createComplex(6185.4164182, 6185.4164182);
      complex1.isNaN();
      complex1.abs();
      complex1.multiply(complex2);
      Complex complex3 = complex0.log();
      complex2.I.multiply(964);
      complex1.ZERO.add(1034.8);
      Complex complex4 = complex1.divide(complex2);
      complex4.INF.acos();
      complex4.ZERO.sinh();
      complex4.tanh();
      complex4.cos();
      complex3.I.abs();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex5.I.acos();
      complex1.equals(object0);
      complex3.negate();
      Complex complex7 = complex3.sqrt();
      complex7.exp();
      complex6.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-41.077957773), (-41.077957773));
      Complex complex1 = complex0.multiply(1770);
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.INF.multiply(1770);
      Complex complex5 = complex0.NaN.subtract(complex3);
      complex2.nthRoot(1770);
      Complex complex6 = complex0.pow((-41.077957773));
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex7.ONE.atan();
      complex10.NaN.subtract((-41.077957773));
      Complex complex11 = complex7.multiply(1770);
      complex0.equals((Object) null);
      Complex complex12 = complex4.I.atan();
      Complex complex13 = complex12.pow((-41.077957773));
      complex7.subtract(217.5);
      Complex complex14 = complex6.multiply(complex11);
      complex9.negate();
      complex2.subtract(complex4);
      complex9.log();
      complex14.getReal();
      complex13.NaN.createComplex(1.9005109907641707E-72, (-41.077957773));
      complex8.getReal();
      complex4.sin();
      complex14.pow(complex5);
      complex13.getReal();
      complex1.subtract(0.0);
      complex10.pow(complex14);
      complex9.multiply(217.5);
      Complex.valueOf(1621.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.toString();
      complex0.toString();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.INF.acos();
      complex0.readResolve();
      Complex complex3 = complex1.I.pow(918.3);
      Complex complex4 = complex0.negate();
      complex4.I.cos();
      complex3.I.conjugate();
      complex3.I.readResolve();
      complex0.exp();
      complex2.cosh();
      complex3.abs();
      Complex complex5 = complex0.asin();
      complex5.log();
      complex0.multiply(1.0);
      complex5.atan();
      Complex.valueOf(918.3);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.I.add(1515.504);
      complex0.ONE.add((-5517.502777));
      complex1.I.divide(1515.504);
      Complex complex2 = complex0.asin();
      complex0.tan();
      complex2.multiply(898);
      complex0.getField();
      complex0.divide((-5517.502777));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.exp();
      complex3.NaN.tanh();
      Complex complex4 = complex2.I.add(complex1);
      complex4.ZERO.reciprocal();
      complex4.NaN.exp();
      complex0.isInfinite();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.I.multiply(complex0);
      complex6.I.multiply(1);
      complex0.NaN.exp();
      complex6.acos();
      complex5.cos();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex5.multiply((-1074));
      Complex complex9 = complex8.pow(0.0);
      complex7.pow((double) (-1074));
      complex2.asin();
      complex0.subtract(0.0);
      complex9.abs();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3330.6596406669773));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.tan();
      complex2.NaN.cosh();
      complex1.INF.toString();
      complex0.getField();
      Complex complex3 = complex1.tan();
      complex0.NaN.abs();
      Complex complex4 = complex3.pow((-3330.6596406669773));
      Complex complex5 = complex4.exp();
      complex0.I.nthRoot(4153);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex5.log();
      complex7.NaN.multiply(complex1);
      complex6.getField();
      complex3.reciprocal();
      Complex complex8 = Complex.valueOf((double) 4153, (-3330.6596406669773));
      complex1.toString();
      Complex complex9 = complex1.sinh();
      complex8.getImaginary();
      Complex complex10 = complex9.pow(complex6);
      complex0.getReal();
      complex10.multiply(complex9);
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.multiply(2.0);
      complex1.toString();
      Complex complex3 = Complex.valueOf(53.447152831856, 53.447152831856);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.conjugate();
      complex1.I.atan();
      complex5.I.conjugate();
      Complex complex6 = complex4.NaN.multiply(2.0);
      complex6.NaN.readResolve();
      Complex complex7 = complex1.multiply(complex2);
      complex7.getField();
      complex5.getImaginary();
      Complex complex8 = complex3.subtract(2.0);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.ONE.subtract(complex0);
      complex10.NaN.readResolve();
      complex10.ZERO.readResolve();
      complex0.hashCode();
      Complex complex11 = complex9.reciprocal();
      complex8.getField();
      complex3.abs();
      complex11.exp();
      Complex complex12 = complex3.log();
      complex12.getImaginary();
      complex1.negate();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      double double0 = 0.0;
      complex1.ONE.sinh();
      complex0.NaN.conjugate();
      double double1 = 5.9994277301267294E175;
      Complex complex2 = Complex.valueOf(0.0, 5.9994277301267294E175);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex0.NaN.createComplex(0.0, (-1723.23454965311));
      complex4.ZERO.subtract(complex2);
      complex1.readResolve();
      Complex complex5 = complex2.reciprocal();
      complex5.acos();
      Complex complex6 = complex3.NaN.subtract((-20.0));
      try { 
        complex6.INF.nthRoot((-5187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,187
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex0.pow((-20.0));
      complex0.ZERO.add(complex1);
      complex0.NaN.negate();
      complex0.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.ONE.multiply(6.283185307179586);
      complex3.INF.asin();
      Complex complex4 = complex0.multiply(2.174860642202632E-8);
      complex4.NaN.negate();
      complex4.ZERO.pow(complex3);
      complex2.getReal();
      complex0.multiply((-911.7860133));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(1728.0);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.NaN.asin();
      complex2.sinh();
      complex2.subtract(1728.0);
      complex2.INF.asin();
      Complex complex3 = complex1.INF.conjugate();
      complex0.readResolve();
      Complex.valueOf(7.84069876400596E-139, 0.0);
      Complex complex4 = Complex.valueOf(2790.4787, 2.0);
      complex4.getField();
      Complex complex5 = complex1.divide(2790.4787);
      complex4.isNaN();
      Complex complex6 = complex4.multiply(1);
      complex4.NaN.readResolve();
      complex6.I.cos();
      Complex complex7 = complex5.tan();
      complex3.isNaN();
      complex5.tanh();
      complex3.equals(complex5);
      Complex.valueOf((-1.0), 2.0);
      complex4.getArgument();
      complex1.createComplex(2790.4787, 7.16722782201834E-4);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(1657.0535, 1657.0535);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(1657.0535);
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.INF.multiply(0);
      complex2.ONE.hashCode();
      complex3.acos();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex1.multiply((-1280));
      complex5.divide(1657.0535);
      complex6.ONE.subtract((-4216.71170606955));
      complex6.NaN.multiply(complex2);
      complex3.subtract(complex5);
      complex1.getImaginary();
      complex3.readResolve();
      complex1.multiply(complex2);
      complex2.getArgument();
      complex1.getField();
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2419.34876252);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.I.pow(complex0);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.INF.multiply(1955.57470927);
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = Complex.valueOf(2419.34876252);
      complex0.readResolve();
      complex1.isInfinite();
      Complex complex6 = complex0.atan();
      complex6.INF.multiply(2419.34876252);
      complex6.ONE.multiply(complex0);
      complex1.readResolve();
      complex4.isNaN();
      complex5.sinh();
      complex5.conjugate();
      Object object0 = new Object();
      complex5.equals(object0);
      complex5.negate();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.acos();
      complex2.atan();
      Complex complex3 = complex2.NaN.exp();
      complex3.NaN.log();
      complex1.I.multiply(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.reciprocal();
      complex0.NaN.sqrt();
      complex0.ZERO.toString();
      Complex complex6 = complex1.pow(0.0);
      Complex complex7 = complex6.INF.subtract(complex1);
      complex7.multiply((-1114));
      complex1.tan();
      complex1.NaN.acos();
      complex0.isInfinite();
      complex6.reciprocal();
      complex0.cosh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.log();
      complex1.hashCode();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex3.ZERO.cosh();
      complex3.equals("");
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex0.cos();
      complex3.getField();
      complex4.cosh();
      Complex complex9 = complex8.ONE.divide((-449.030665));
      Complex complex10 = complex4.I.sin();
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      complex3.NaN.sqrt1z();
      complex9.I.log();
      Complex complex11 = complex4.acos();
      Complex complex12 = complex11.ZERO.reciprocal();
      complex4.getImaginary();
      complex6.NaN.atan();
      Complex complex13 = complex3.divide((-449.030665));
      Complex complex14 = complex4.reciprocal();
      complex4.INF.cosh();
      Complex complex15 = complex11.ONE.acos();
      complex6.toString();
      double double0 = complex9.getImaginary();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex16 = complex1.conjugate();
      Complex complex17 = complex6.asin();
      assertSame(complex17, complex2);
      
      complex11.hashCode();
      Complex complex18 = complex7.sin();
      assertSame(complex18, complex13);
      
      String string0 = complex15.toString();
      assertTrue(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex5));
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals("(0.0, -0.0)", string0);
      assertEquals(0.705026843555238, complex11.getReal(), 0.01);
      
      complex14.createComplex(0.0, (-6.259620482221904E-8));
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertSame(complex3, complex12);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.I.add(complex1);
      Complex complex5 = complex0.divide(1117.0277);
      String string0 = complex5.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex6 = complex5.I.sin();
      complex6.NaN.sin();
      assertEquals(1.1752011936438014, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex5.subtract(complex7);
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.negate();
      assertSame(complex11, complex3);
      
      double double0 = complex1.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex1.tan();
      assertEquals(0.0, complex14.getReal(), 0.01);
      
      double double1 = complex2.abs();
      assertTrue(complex2.equals((Object)complex4));
      assertEquals(1.0, double1, 0.01);
      assertTrue(complex1.equals((Object)complex14));
      
      complex10.getReal();
      complex9.equals((Object) null);
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex8.isInfinite());
      assertTrue(complex8.equals((Object)complex13));
  }
}
