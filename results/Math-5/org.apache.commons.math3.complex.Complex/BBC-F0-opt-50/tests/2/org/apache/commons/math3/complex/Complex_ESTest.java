/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:44:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.multiply((-1.0));
      Complex complex1 = complex0.pow((-1746.2830802));
      complex1.sqrt1z();
      complex1.nthRoot(37);
      Complex complex2 = Complex.valueOf((double) 37, Double.POSITIVE_INFINITY);
      complex2.multiply(0.37396198169657113);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.2050528526306152, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.cosh();
      complex1.tanh();
      Complex complex4 = complex3.atan();
      complex4.nthRoot(550);
      Complex complex5 = complex0.reciprocal();
      complex4.acos();
      complex2.divide(2787.146470022195);
      Complex complex6 = complex2.multiply(1.2050528526306152);
      complex5.subtract(complex3);
      complex1.multiply(17);
      complex3.multiply(complex2);
      complex1.sqrt();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.ZERO.add(complex2);
      Complex complex6 = complex2.sin();
      complex4.INF.createComplex((-5.373403325265804), (-5.373403325265804));
      Complex complex7 = complex3.ONE.subtract(2.8108219632627907E-129);
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex7.ONE.asin();
      Complex complex10 = complex3.divide((-5.373403325265804));
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex2.log();
      complex2.readResolve();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex5.sqrt1z();
      complex2.subtract(complex14);
      complex6.INF.negate();
      complex6.pow(complex3);
      complex12.tanh();
      Complex complex15 = complex2.createComplex(0.0, (-2746.158225));
      complex6.subtract((-2746.158225));
      complex8.sin();
      complex13.reciprocal();
      complex10.exp();
      complex11.readResolve();
      complex3.sqrt();
      complex15.abs();
      Complex complex16 = Complex.valueOf((-2746.158225));
      complex10.multiply(complex16);
      complex3.abs();
      complex9.acos();
      complex3.createComplex(437.9607, 1.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), 1522.98844357626);
      Complex complex2 = complex1.tanh();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1332.03425994741, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(complex0);
      complex0.acos();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(1212.43846, 4.471273900208441E233);
      Complex complex5 = Complex.INF;
      complex4.getArgument();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex2.tan();
      Complex.valueOf((-942.03295169315));
      Complex complex8 = Complex.valueOf(0.0, 1.5707963267948966);
      complex8.log();
      complex6.pow(complex7);
      Complex complex9 = Complex.INF;
      complex9.divide(Double.POSITIVE_INFINITY);
      complex7.multiply((-2596.86399654794));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.5657084775121975E-8, (-20.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(5.5657084775121975E-8, 168.60409847066);
      complex2.isInfinite();
      Complex complex3 = complex0.add(168.60409847066);
      complex2.multiply(complex3);
      complex1.acos();
      complex3.getArgument();
      Complex complex4 = Complex.valueOf(1.0);
      complex4.sin();
      complex3.tan();
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(4.923458004084836E41, 4.923458004084836E41);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      complex1.subtract(0.0);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex2.multiply(498);
      Complex complex5 = Complex.valueOf(0.0, (-2.0961068531216087E-7));
      Complex complex6 = Complex.valueOf(63.33503378183245);
      Complex complex7 = complex6.pow((-204.81));
      complex7.ONE.add(complex4);
      Complex complex8 = complex6.acos();
      complex2.divide(complex8);
      Complex complex9 = new Complex(63.33503378183245, 1.7071067811865475);
      Complex complex10 = Complex.INF;
      complex10.getArgument();
      Complex complex11 = Complex.NaN;
      complex5.tan();
      complex3.multiply(498);
      complex4.asin();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.cos();
      complex4.log();
      Complex complex5 = Complex.valueOf((-0.418), 2672.643989);
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.ZERO;
      complex7.acos();
      complex2.divide(complex5);
      Complex complex8 = new Complex(1.8019459247589111, (-1866.6));
      Complex complex9 = Complex.INF;
      Complex complex10 = new Complex(0.004728729440419569);
      complex10.getArgument();
      Complex complex11 = Complex.NaN;
      complex1.tan();
      Complex complex12 = Complex.NaN;
      complex11.log();
      complex2.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.INF.atan();
      complex2.cos();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(498);
      Complex complex1 = Complex.valueOf((-3.609949022969024E295));
      complex1.acos();
      Complex complex2 = Complex.INF;
      complex1.INF.conjugate();
      complex0.getArgument();
      Complex complex3 = Complex.NaN;
      complex1.sin();
      Complex complex4 = Complex.valueOf((double) 498, (double) 2588);
      complex4.tan();
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      Complex complex1 = complex0.sqrt();
      complex0.I.sinh();
      Complex complex2 = complex1.add(complex0);
      complex2.ZERO.cosh();
      Complex complex3 = complex1.INF.negate();
      complex2.exp();
      complex1.ZERO.atan();
      Complex complex4 = complex2.asin();
      complex4.NaN.divide(1.0);
      Complex complex5 = complex4.ONE.multiply(complex2);
      complex5.I.hashCode();
      complex0.ONE.sinh();
      complex4.toString();
      complex3.subtract(complex2);
      complex2.abs();
      complex4.conjugate();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(20.0);
      Complex complex3 = complex2.tanh();
      complex3.INF.toString();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(740.66608596, 740.66608596);
      Complex complex1 = complex0.ONE.tanh();
      complex0.INF.abs();
      complex0.ZERO.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.NaN;
      complex2.acos();
      Complex complex5 = complex4.NaN.sqrt1z();
      complex5.ZERO.hashCode();
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = complex1.INF.atan();
      complex4.abs();
      Complex complex8 = complex4.NaN.asin();
      complex8.nthRoot(280);
      Complex complex9 = complex3.multiply((-2117657486));
      complex9.ZERO.abs();
      complex6.nthRoot(813);
      complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3.1660099222737955E-7);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.multiply((-3165));
      complex1.getField();
      complex3.multiply(Double.NaN);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-58));
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(168.60409847066, (double) (-58));
      Complex complex4 = Complex.valueOf(168.60409847066, 168.60409847066);
      complex1.isInfinite();
      complex2.sqrt();
      Complex complex5 = complex4.add(7143.13499871);
      complex5.multiply(complex0);
      complex3.subtract(7143.13499871);
      complex5.multiply(498);
      Complex complex6 = Complex.valueOf((double) (-58), (double) (-58));
      Complex.valueOf(0.5000000000042687);
      Complex complex7 = complex5.acos();
      complex1.divide(complex6);
      complex1.getArgument();
      complex5.toString();
      Complex complex8 = Complex.NaN;
      complex0.sin();
      Complex complex9 = complex7.tan();
      Complex complex10 = Complex.NaN;
      complex9.abs();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = complex0.tanh();
      complex1.ZERO.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.INF;
      complex3.ONE.hashCode();
      complex3.I.cos();
      Complex complex4 = Complex.valueOf((-0.418), 2672.643989);
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.tanh();
      complex4.pow(complex7);
      complex4.cosh();
      Complex.valueOf((-0.418));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-58));
      complex0.atan();
      Complex complex2 = Complex.valueOf(168.60409847066, (double) (-58));
      complex2.isInfinite();
      complex1.sqrt();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.multiply(complex2);
      complex0.subtract(168.60409847066);
      Complex complex5 = complex1.multiply(4953);
      Complex.valueOf(Double.NaN, (double) (-58));
      Complex complex6 = Complex.valueOf(545.5297670325);
      complex6.acos();
      complex4.divide(complex6);
      complex5.getArgument();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-58));
      complex0.atan();
      Complex complex2 = Complex.valueOf(168.60409847066, (double) (-58));
      complex2.isInfinite();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.multiply(complex2);
      Complex complex6 = complex0.subtract(168.60409847066);
      Complex complex7 = complex1.multiply(4953);
      Complex complex8 = Complex.valueOf(Double.NaN, (double) (-58));
      Complex complex9 = Complex.valueOf(545.5297670325);
      complex9.acos();
      Complex complex10 = complex5.divide(complex9);
      complex7.getArgument();
      complex10.toString();
      Complex complex11 = Complex.NaN;
      complex3.NaN.log();
      complex2.sin();
      Complex complex12 = Complex.I;
      complex3.tanh();
      complex8.pow(complex0);
      complex9.getField();
      complex8.asin();
      complex6.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.05786345899105072, 0.42161011695861816);
      Complex complex2 = complex0.subtract(1.0);
      Complex complex3 = complex0.createComplex(0.05786345899105072, 0.05786345899105072);
      complex2.readResolve();
      complex1.equals(complex3);
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2814.0229095), (-2814.0229095));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.subtract((-2814.0229095));
      Complex complex4 = complex3.createComplex(29.53105118431993, (-2814.0229095));
      complex3.readResolve();
      complex3.equals(complex0);
      complex4.subtract((-4.800180493433863E-9));
      complex0.multiply(2.4154952E7);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(167.93935831927973, 167.93935831927973);
      Complex complex1 = Complex.I;
      complex1.sqrt();
      complex0.multiply((-3165));
      complex1.getField();
      Complex complex2 = Complex.valueOf(167.93935831927973, (double) (-3165));
      Complex.valueOf((-812.6869), (-1272.1259433));
      complex2.acos();
      complex0.tan();
      complex1.tanh();
      Complex complex3 = new Complex(932.0, (-3165));
      Complex complex4 = Complex.valueOf((-2586.47238), (double) (-3165));
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(3.141592653589793, 0.0);
      complex0.isInfinite();
      complex0.sqrt();
      complex0.add(9.396000024637834E-209);
      Complex complex1 = new Complex(168.60409847066);
      Complex complex2 = complex1.multiply(complex0);
      complex2.subtract(0.0);
      Complex complex3 = complex0.multiply(2358);
      Complex complex4 = Complex.NaN;
      complex3.getField();
      Complex complex5 = Complex.ONE;
      complex5.toString();
      Complex complex6 = Complex.valueOf(0.0, (-308.0));
      Complex complex7 = Complex.valueOf(2091.1436354863);
      Complex complex8 = complex7.acos();
      complex1.divide(complex6);
      complex4.getArgument();
      complex5.toString();
      Complex complex9 = Complex.NaN;
      complex5.sin();
      complex1.tan();
      Complex complex10 = Complex.INF;
      complex10.tanh();
      complex8.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-71));
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(168.60409847066, (double) (-71));
      complex1.isNaN();
      Complex complex4 = complex1.sqrt();
      complex1.add(7143.1);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex0.subtract(168.60409847066);
      Complex complex7 = complex5.multiply(2358);
      Complex complex8 = Complex.NaN;
      complex8.getField();
      complex4.toString();
      Complex.valueOf(168.60409847066, (-20.0));
      Complex complex9 = Complex.I;
      Complex complex10 = new Complex(0.0);
      complex2.tanh();
      Complex complex11 = Complex.valueOf(7143.1, (double) (-71));
      complex6.pow(complex11);
      Complex complex12 = complex10.multiply((-71));
      complex12.INF.tanh();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
      complex0.subtract(Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex2 = new Complex(2400.09740567247);
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.negate();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(168.60409847066, 2768.9942602192473);
      complex0.isNaN();
      Complex complex3 = Complex.I;
      complex0.sqrt();
      complex2.add(20.0);
      complex3.multiply(complex2);
      Complex complex4 = complex1.subtract((-1934.5292734884));
      Complex complex5 = Complex.I;
      complex5.getField();
      complex5.toString();
      Complex.valueOf(545.5297670325, 545.5297670325);
      Complex.valueOf((-1531.5064841405426), Double.NaN);
      complex5.acos();
      complex3.divide(complex0);
      Complex complex6 = new Complex(Double.NaN, 932.0);
      complex4.toString();
      complex3.conjugate();
      complex1.tan();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(168.60409847066, 168.60409847066);
      complex0.isNaN();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt();
      complex2.add((-1272.1259433));
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex2.subtract(932.0);
      complex4.getField();
      complex3.toString();
      Complex.valueOf(168.60409847066, (double) (-3165));
      Complex complex8 = Complex.valueOf((-1272.1259433), (-812.6869));
      Complex complex9 = complex8.acos();
      complex9.divide(complex3);
      Complex complex10 = new Complex(168.60409847066, (-923.4142816));
      complex7.toString();
      complex6.tanh();
      complex5.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.sqrt1z();
      complex3.toString();
      Complex complex6 = complex4.NaN.conjugate();
      Complex complex7 = complex1.divide(0.41421356237309515);
      complex4.cosh();
      Complex complex8 = complex5.atan();
      complex8.INF.getArgument();
      complex1.toString();
      complex1.I.abs();
      Complex complex9 = new Complex(1067263.9433192778);
      complex7.exp();
      complex4.equals(complex9);
      Complex complex10 = complex9.log();
      complex10.INF.add(complex7);
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex11.ONE.sinh();
      complex12.NaN.add(complex6);
      complex12.I.multiply(0.0842406153678894);
      complex10.multiply(259);
      complex2.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.multiply(0.0);
      complex2.ONE.toString();
      complex4.ZERO.sqrt();
      complex1.getImaginary();
      complex3.conjugate();
      complex0.sin();
      Complex complex5 = complex4.tan();
      complex2.sqrt();
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-71));
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.ONE;
      complex0.isNaN();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = Complex.ZERO;
      complex1.sqrt();
      complex4.divide(168.60409847066);
      Complex complex6 = new Complex((-71));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(168.60409847066, 168.60409847066);
      complex0.isNaN();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt();
      complex2.add((-1272.1259433));
      complex1.multiply(complex5);
      Complex complex6 = complex2.subtract(932.0);
      Complex complex7 = complex3.multiply((-3165));
      complex4.getField();
      complex3.toString();
      Complex.valueOf(932.0, 7.0542365522414836E-65);
      Complex.valueOf((-1272.1259433), (-3455.52));
      complex4.acos();
      complex6.divide(complex7);
      Complex complex8 = new Complex(7.0542365522414836E-65, Double.POSITIVE_INFINITY);
      complex6.getArgument();
      complex7.toString();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.conjugate();
      complex2.tan();
      Complex complex11 = new Complex(4515626.0, (-2124.0));
      complex11.sqrt();
      complex10.subtract((-1272.1259433));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-352.370883007881), 1516.2);
      Complex complex1 = new Complex(1516.2, Double.NaN);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      complex2.getReal();
      Complex complex3 = complex1.asin();
      complex3.add(complex0);
      Complex complex4 = Complex.valueOf(1554.4422807230194);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex3.multiply(2.0);
      complex4.pow(Double.POSITIVE_INFINITY);
      complex6.reciprocal();
      Object object0 = new Object();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-1.0), 2125.0);
      Complex complex3 = complex2.add(complex1);
      complex1.getReal();
      Complex complex4 = complex3.asin();
      Complex.valueOf(2125.0);
      complex3.conjugate();
      complex4.multiply(1373.139);
      Complex complex5 = complex3.pow((-1.0));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      complex0.add((-1272.1259433));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.subtract((-168.916));
      Complex complex5 = complex4.multiply(2147483239);
      complex1.getField();
      complex0.toString();
      Complex complex6 = complex5.acos();
      complex3.getArgument();
      complex5.toString();
      complex3.conjugate();
      Complex complex7 = complex2.sin();
      complex7.I.conjugate();
      complex0.tan();
      Complex complex8 = complex6.sqrt();
      complex8.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.NaN.atan();
      complex5.ONE.atan();
      Complex complex6 = complex4.I.subtract(complex0);
      complex6.NaN.cosh();
      Complex complex7 = complex1.createComplex(1810.90144649, 1810.90144649);
      complex7.asin();
      Complex complex8 = complex2.multiply((-1058.766114));
      Complex complex9 = complex2.negate();
      complex8.getField();
      Complex complex10 = complex8.divide(complex0);
      Complex complex11 = complex9.tanh();
      complex11.ONE.hashCode();
      complex2.I.sinh();
      Complex.valueOf((-1058.766114), (-1058.766114));
      Complex complex12 = complex8.sin();
      complex12.ZERO.asin();
      Complex complex13 = new Complex(5.637945686485334E-229);
      complex10.multiply(complex13);
      complex6.sqrt();
      complex9.isInfinite();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.nthRoot(2292);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(20.0, (double) 2292);
      Complex complex2 = complex0.add(complex1);
      complex2.getReal();
      complex1.asin();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.conjugate();
      Complex complex4 = complex1.multiply(2.0);
      Complex complex5 = complex4.pow((-2749.83605));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3.4454766202661184E267, 3.4454766202661184E267);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.cos();
      complex0.nthRoot(2292);
      complex0.getArgument();
      double double0 = 2057.33406201333;
      Complex.valueOf(2057.33406201333, 3.4454766202661184E267);
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(168.60409847066, 168.60409847066);
      complex0.isNaN();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt();
      complex2.add((-1272.1259433));
      complex1.multiply(complex5);
      complex2.subtract(932.0);
      complex3.multiply((-3165));
      complex4.getField();
      complex3.toString();
      Complex complex6 = Complex.valueOf(Double.NaN, (double) (-3165));
      Complex complex7 = Complex.valueOf(6.283185307179586, (-2124.0));
      complex7.acos();
      complex3.divide(complex2);
      Complex complex8 = new Complex((-1272.1259433), 904.0750469417557);
      complex8.getArgument();
      Complex complex9 = Complex.valueOf(168.60409847066, (double) (-3165));
      complex9.toString();
      complex0.conjugate();
      complex6.sin();
      complex4.tan();
      Complex complex10 = Complex.INF;
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5874010519681994);
      Complex complex1 = new Complex(1.5874010519681994, (-6.655106680680314E-8));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.multiply((-6.655106680680314E-8));
      complex3.getImaginary();
      complex1.sinh();
      Complex.valueOf(0.0);
      complex4.sin();
      complex0.cosh();
      Complex complex5 = complex1.tan();
      Complex.valueOf((-2709.5825304));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.multiply(complex1);
      complex3.pow(1931.091519);
      Complex complex4 = complex1.log();
      complex4.nthRoot(2292);
      complex2.getArgument();
      Complex complex5 = Complex.valueOf(877.03431106419, 0.5069117546081543);
      complex5.add(complex1);
      complex3.getReal();
      complex5.asin();
      Complex.valueOf(Double.NaN);
      complex1.conjugate();
      complex4.multiply((-1.0672213971363184E-7));
      Complex complex6 = Complex.valueOf((double) 2292, Double.NaN);
      complex6.pow((-629.1601829));
      Complex complex7 = Complex.INF;
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = Complex.I;
      complex1.add(complex0);
      Complex complex3 = complex2.sqrt1z();
      complex3.divide(complex0);
      Complex.valueOf(1053.2548478391666);
      Complex complex4 = complex1.cosh();
      complex4.I.reciprocal();
      Complex.valueOf(1053.2548478391666);
      Complex.valueOf((-1510.03509), 1053.2548478391666);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.ZERO;
      complex0.ZERO.add(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      complex0.divide(complex2);
      Complex complex4 = Complex.valueOf(1053.2548478391666);
      Complex complex5 = complex4.I.cosh();
      Complex.valueOf(0.0);
      complex3.getArgument();
      complex3.toString();
      Complex complex6 = Complex.ONE;
      complex6.conjugate();
      complex4.sin();
      complex1.tan();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(20.0);
      complex1.getArgument();
      complex0.toString();
      complex1.conjugate();
      Complex complex2 = new Complex(1284.883715052, 1284.883715052);
      complex2.sin();
      complex0.tan();
      Complex complex3 = Complex.INF;
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-71));
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(168.60409847066, (double) (-71));
      complex0.isNaN();
      complex2.add((-1272.1259433));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex2.multiply((-71));
      complex1.ONE.getField();
      complex4.ONE.toString();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      complex1.acos();
      complex7.NaN.divide(complex6);
      complex5.pow(2.0);
      complex3.tanh();
      Complex complex8 = Complex.ONE;
      complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-71));
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(168.60409847066, (double) (-71));
      complex0.isNaN();
      Complex complex4 = complex2.ZERO.sqrt();
      complex4.add((-1272.1259433));
      Complex complex5 = complex4.multiply(complex0);
      complex0.subtract(0.0);
      Complex complex6 = complex2.multiply((-71));
      complex1.ONE.getField();
      complex5.ONE.toString();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex1.acos();
      complex7.NaN.divide(complex6);
      complex8.INF.getArgument();
      complex3.pow(168.60409847066);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.ZERO.add(complex1);
      complex2.NaN.sqrt1z();
      Complex complex4 = complex0.divide(complex2);
      complex3.divide(0.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.sqrt1z();
      complex1.divide(complex5);
      Complex complex7 = Complex.valueOf(1181.0736527302251);
      Complex.valueOf(0.0);
      Complex complex8 = new Complex(0.0);
      complex8.multiply(complex6);
      complex7.add(complex8);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cos();
      complex0.nthRoot(2292);
      complex1.getArgument();
      Complex complex3 = Complex.valueOf((-2756.138268), (double) 2292);
      Complex complex4 = complex3.add(complex2);
      complex4.getReal();
      Complex complex5 = complex4.asin();
      Complex.valueOf(Double.NaN);
      complex5.conjugate();
      complex0.multiply((-2756.138268));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-236.2104253424));
      complex0.toString();
      Complex complex1 = complex0.tanh();
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.INF.add(185.0);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex1.ZERO.atan();
      complex3.ZERO.cos();
      complex1.equals(complex0);
      complex5.negate();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex1.pow(complex5);
      Complex complex8 = complex7.INF.add((-236.2104253424));
      Complex complex9 = complex3.subtract((-236.2104253424));
      complex8.ONE.log();
      complex0.reciprocal();
      complex0.cosh();
      Complex.valueOf(20.0, (-3031.6041005296993));
      complex9.equals((Object) null);
      complex0.divide(complex8);
      complex6.cosh();
      Complex.valueOf(0.0, (-236.2104253424));
      complex9.readResolve();
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.asin();
      complex2.ZERO.reciprocal();
      Complex.valueOf(675.9997753030549);
      complex2.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(0.5874010519681994, 0.5874010519681994);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.cos();
      complex1.NaN.cos();
      Complex complex6 = complex5.ZERO.subtract(complex3);
      complex6.createComplex((-413.484918), 20.0);
      Complex complex7 = complex0.tan();
      complex5.subtract(0.5874010519681994);
      Complex complex8 = complex1.asin();
      complex8.I.abs();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex9.NaN.divide(complex4);
      complex11.I.tan();
      Complex complex12 = complex7.cosh();
      complex12.exp();
      complex8.multiply(complex10);
      complex11.pow(complex9);
      complex7.pow(complex5);
      complex8.multiply(675.9997753030549);
      complex6.multiply(0.007041904306930746);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex1.hashCode();
      complex1.multiply(185);
      Complex complex2 = Complex.valueOf(1166.3281, 20.0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.createComplex(1329.2, 1623.0);
      complex2.add(1623.0);
      Complex.valueOf(1166.3281, 20.0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.log();
      complex5.hashCode();
      complex6.reciprocal();
      complex7.hashCode();
      Complex complex8 = new Complex(1331.44306797506);
      Complex complex9 = new Complex(1.6985075903314236E-173, 1623.0);
      complex9.multiply(185);
      Complex complex10 = Complex.valueOf(3724.430409889, 20.0);
      complex10.tanh();
      complex10.divide(complex7);
      Complex complex11 = Complex.NaN;
      complex11.abs();
      Complex complex12 = Complex.ONE;
      complex12.nthRoot(900);
      complex4.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex1.ONE.subtract((-1.0672213971363184E-7));
      complex0.getReal();
      Complex.valueOf(1053.2548478391666);
      Complex complex2 = Complex.NaN;
      complex2.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(1703.549599, 1491.8);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex1.divide((double) 1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.tan();
      complex2.readResolve();
      complex5.readResolve();
      Complex complex7 = new Complex(246.8193);
      complex7.equals(complex0);
      complex2.add(complex6);
      complex3.toString();
      Complex.valueOf(0.0, 1084.733);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.multiply(4994);
      Complex complex4 = complex0.asin();
      complex3.toString();
      complex1.sqrt();
      complex0.getField();
      complex4.isNaN();
      Complex complex5 = complex1.divide(complex3);
      complex0.reciprocal();
      complex5.hashCode();
      complex4.add(3669.55446878751);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex.valueOf(3224.32, 3224.32);
      Complex complex2 = complex1.multiply(4966);
      Complex complex3 = complex2.cos();
      Complex.valueOf((double) 4966, (double) 4966);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.divide((-4.794765976694151E-8));
      Complex complex6 = Complex.ZERO;
      complex6.sqrt1z();
      complex4.divide(complex5);
      Complex.valueOf((-163.75862));
      Complex complex7 = Complex.valueOf(4.32092015744956E-8);
      complex1.multiply(complex0);
      complex7.add(complex5);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-0.05511877791626049));
      Complex complex1 = complex0.reciprocal();
      complex0.acos();
      Complex complex2 = Complex.valueOf(1.3986721474680266E-7, 0.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf(1.3986721474680266E-7);
      complex4.multiply((-0.05511877791626049));
      complex3.getImaginary();
      complex4.sinh();
      Complex.valueOf(0.0);
      complex1.tan();
      Complex.valueOf((-63.16527686736));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf((double) 0, 20.0);
      complex2.isNaN();
      complex3.sqrt();
      Complex complex5 = complex2.add(20.0);
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex3.createComplex(1770.93, 1.3986721474680266E-7);
      complex5.subtract(174.58799063);
      Complex complex8 = Complex.ONE;
      complex6.add(complex8);
      complex7.multiply(4955);
      complex6.getField();
      complex0.toString();
      Complex complex9 = Complex.valueOf(20.0, (-2403.406));
      complex1.acos();
      Complex complex10 = complex8.divide(complex4);
      complex9.getArgument();
      complex0.toString();
      complex10.conjugate();
      complex8.sin();
      complex5.tan();
      complex0.sqrt();
      complex5.cosh();
      complex7.multiply(7);
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = (-1225.19044);
      Complex complex0 = new Complex(2304.0, (-1225.19044));
      Complex complex1 = Complex.valueOf((-267.241938330912), (-267.241938330912));
      Complex complex2 = complex1.INF.cos();
      // Undeclared exception!
      complex2.ONE.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sinh();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(168.60409847066, (-1859.261));
      complex0.isNaN();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.add(168.60409847066);
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.createComplex((-3485.7), (-538.492582107739));
      complex1.subtract((-326.57463441894794));
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.add(complex2);
      complex7.multiply(166);
      complex0.getField();
      complex0.toString();
      Complex complex10 = Complex.valueOf((-1859.261), 219.0038);
      complex5.acos();
      complex9.divide(complex7);
      complex4.getArgument();
      complex3.toString();
      Complex complex11 = Complex.NaN;
      complex11.conjugate();
      Complex complex12 = complex9.sin();
      complex12.tan();
      complex10.sqrt();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0, (-3395.0));
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf((-1993.1), (-3395.0));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.pow((-6.655106680680314E-8));
      Complex complex6 = complex5.log();
      complex4.nthRoot(2292);
      complex2.getArgument();
      Complex complex7 = complex4.pow(complex0);
      Complex complex8 = Complex.INF;
      complex8.toString();
      complex6.conjugate();
      complex7.abs();
      complex3.abs();
      complex3.sqrt1z();
      complex1.hashCode();
      Complex complex9 = complex0.negate();
      complex3.getField();
      Complex complex10 = new Complex(1566.0);
      complex10.sqrt();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1204.561802478601);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex1.divide(1204.561802478601);
      complex2.NaN.abs();
      complex3.NaN.nthRoot(1);
      complex3.ZERO.getField();
      Complex complex4 = new Complex(230.08597709);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      complex1.cos();
      complex1.equals("aj9;#K?TrV5");
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.tan();
      complex0.readResolve();
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
      complex2.add(complex3);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      complex1.log();
      complex0.hashCode();
      Complex complex2 = complex0.ONE.multiply((-2796));
      Complex complex3 = Complex.valueOf((double) (-2796), 20.0);
      complex3.ONE.sqrt1z();
      complex2.ONE.createComplex((-2305.651988063), 20.0);
      Complex complex4 = complex0.add(20.0);
      Complex.valueOf((-0.2894163089752007), (-0.2894163089752007));
      complex4.ZERO.log();
      complex4.NaN.hashCode();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ZERO.hashCode();
      Complex complex6 = new Complex((-2796));
      complex6.I.multiply(1420);
      Complex complex7 = complex6.tanh();
      complex7.INF.divide(complex6);
      complex6.abs();
      try { 
        complex0.nthRoot((-2796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,796
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.divide(complex3);
      complex5.ONE.pow(complex0);
      Complex complex6 = complex0.multiply(complex4);
      complex4.I.abs();
      Complex complex7 = complex0.sqrt();
      complex4.NaN.sinh();
      complex7.INF.abs();
      Complex complex8 = complex0.NaN.negate();
      complex8.INF.reciprocal();
      complex6.readResolve();
      Complex complex9 = complex7.pow((-1.6249994723583725));
      Complex complex10 = complex9.tanh();
      complex1.ONE.sinh();
      Complex complex11 = complex10.atan();
      complex9.NaN.asin();
      complex3.nthRoot(228);
      Complex complex12 = complex9.cos();
      complex2.conjugate();
      complex9.conjugate();
      complex11.toString();
      Complex complex13 = new Complex((-1.6249994723583725));
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, (-4796.722350496));
      complex14.ONE.getField();
      complex10.readResolve();
      complex7.cos();
      complex13.equals(complex12);
      complex9.subtract((-4796.722350496));
      complex1.tan();
      complex7.readResolve();
      complex14.isNaN();
      complex5.add(complex1);
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.divide(complex3);
      complex5.ONE.pow(complex0);
      Complex complex6 = complex0.multiply(complex4);
      complex4.I.abs();
      Complex complex7 = complex0.sqrt();
      complex4.NaN.sinh();
      complex7.INF.abs();
      Complex complex8 = complex0.NaN.negate();
      complex8.INF.reciprocal();
      complex6.readResolve();
      Complex complex9 = complex7.pow(0.0);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.atan();
      complex9.NaN.asin();
      complex3.nthRoot(228);
      Complex complex12 = complex9.cos();
      complex2.conjugate();
      complex9.conjugate();
      complex11.toString();
      Complex complex13 = complex1.tanh();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, (-4796.722350496));
      complex14.ONE.getField();
      complex10.readResolve();
      complex7.cos();
      complex13.equals(complex12);
      complex9.subtract((-4796.722350496));
      complex1.tan();
      Object object0 = complex7.readResolve();
      complex2.equals(object0);
      complex5.add(complex1);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1204.561802478601);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex1.divide(1204.561802478601);
      complex2.NaN.abs();
      complex3.NaN.nthRoot(1);
      complex3.ZERO.getField();
      Complex complex4 = Complex.ONE;
      complex4.ZERO.exp();
      complex2.ZERO.hashCode();
      complex0.add(complex4);
      Complex complex5 = complex4.ZERO.multiply(1);
      Complex complex6 = complex0.acos();
      complex6.ONE.toString();
      Complex complex7 = Complex.ONE;
      complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1772.6644136266093));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ONE.add((-1772.6644136266093));
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex3.cos();
      complex5.INF.reciprocal();
      complex5.ONE.asin();
      Complex complex6 = complex0.createComplex(0.0, 0.0);
      complex1.I.hashCode();
      Complex complex7 = complex1.NaN.asin();
      complex4.INF.hashCode();
      complex7.INF.exp();
      complex0.INF.getArgument();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.I.sinh();
      complex9.INF.readResolve();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex1.ONE.sinh();
      Complex complex12 = complex1.cos();
      complex12.NaN.readResolve();
      Complex complex13 = complex0.add(0.0);
      complex13.getReal();
      complex6.abs();
      complex4.multiply((-1519));
      Complex complex14 = complex13.sin();
      complex14.divide(complex1);
      complex2.getReal();
      complex1.log();
      complex11.add(complex10);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.218596935272217, 2.218596935272217);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.createComplex(2.218596935272217, 2.218596935272217);
      complex2.NaN.pow(complex1);
      complex2.pow(8.074507236705857E-73);
      try { 
        complex2.nthRoot((-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -115
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 219.04;
      Complex complex0 = Complex.valueOf(219.04);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex0.I.conjugate();
      complex2.INF.getArgument();
      Complex complex3 = Complex.valueOf(219.04);
      Complex complex4 = complex0.add(complex3);
      complex4.NaN.readResolve();
      Complex complex5 = complex2.subtract(complex4);
      complex5.ZERO.getArgument();
      Complex complex6 = complex3.log();
      complex6.NaN.multiply(complex3);
      complex5.abs();
      complex5.INF.toString();
      complex6.toString();
      complex5.log();
      Complex complex7 = complex3.tanh();
      complex3.cos();
      try { 
        complex7.I.nthRoot((-581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -581
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.NaN.cos();
      complex2.ZERO.subtract(0.0);
      Complex complex4 = Complex.valueOf((-1214.283178412316), 0.0);
      complex3.ZERO.getArgument();
      complex4.I.readResolve();
      Complex complex5 = complex4.INF.reciprocal();
      complex1.getReal();
      complex4.getReal();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex7.I.pow(complex1);
      complex4.getImaginary();
      Complex complex9 = complex3.divide(328.35835345028);
      Complex complex10 = complex9.pow(complex6);
      complex10.NaN.divide(complex0);
      complex10.NaN.subtract(complex1);
      complex4.getArgument();
      complex7.I.sinh();
      complex0.isInfinite();
      Complex complex11 = Complex.NaN;
      complex4.divide(complex11);
      complex0.I.multiply(0.148555092);
      complex8.isInfinite();
      complex8.isNaN();
      complex0.getImaginary();
      try { 
        complex11.nthRoot((-2969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,969
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.I.abs();
      Complex complex1 = complex0.ONE.createComplex((-20.0), (-20.0));
      Complex complex2 = complex1.ONE.sinh();
      complex0.cosh();
      complex2.I.sqrt();
      complex1.equals((Object) null);
      Complex complex3 = complex0.log();
      complex3.INF.sinh();
      Complex complex4 = complex3.ZERO.subtract((-20.0));
      complex4.NaN.reciprocal();
      complex1.sinh();
      Complex.valueOf(0.0, 1.3775582313537598);
      complex4.INF.hashCode();
      complex1.hashCode();
      Complex complex5 = complex0.multiply((-1224.0));
      complex5.INF.divide((-416.0));
      complex2.add((-20.0));
      complex2.getImaginary();
      Complex complex6 = complex4.add(0.0);
      complex6.pow(85.86437909108);
      complex0.subtract(404.692006);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.sin();
      complex2.I.add(complex0);
      complex0.ONE.add(complex1);
      complex1.INF.acos();
      Complex complex3 = complex0.NaN.cos();
      complex3.ZERO.add(complex1);
      int int0 = (-1804);
      Complex.valueOf((double) (-1804));
      complex1.I.pow((double) (-1804));
      try { 
        complex0.nthRoot((-1804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,804
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.NaN.multiply((-2919));
      Complex complex3 = complex1.asin();
      complex3.ZERO.toString();
      Complex complex4 = complex0.sqrt();
      complex4.ZERO.getField();
      complex2.isNaN();
      Complex complex5 = complex4.divide(complex2);
      complex5.ZERO.reciprocal();
      complex5.ONE.hashCode();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-2821.3362));
      Complex complex1 = complex0.negate();
      complex0.NaN.add(complex1);
      complex1.INF.nthRoot(706);
      Complex complex2 = complex1.divide(2054.47963600808);
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.I.pow(complex1);
      complex4.ONE.multiply((double) 706);
      Complex complex5 = Complex.valueOf(0.0, (-2207.139426471413));
      Complex complex6 = complex0.sqrt1z();
      complex0.getField();
      complex1.abs();
      complex6.readResolve();
      complex5.getImaginary();
      complex5.readResolve();
      complex2.cosh();
      complex1.sinh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.reciprocal();
      complex0.acos();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.ZERO.multiply(0.0);
      complex3.ZERO.getArgument();
      complex0.getImaginary();
      complex2.sinh();
      Complex.valueOf(0.0);
      complex2.getField();
      complex2.isNaN();
      complex1.multiply((-2058));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.NaN.multiply(81);
      Complex complex7 = complex6.ZERO.subtract(complex2);
      complex7.NaN.sqrt();
      complex0.getArgument();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.NaN.subtract(complex2);
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex0.NaN.add(complex1);
      complex0.equals(complex8);
      Complex complex12 = complex5.pow(1.1406713393562271E-7);
      Complex complex13 = complex1.log();
      complex13.ZERO.hashCode();
      Complex complex14 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex14.INF.conjugate();
      complex12.asin();
      complex1.sin();
      complex10.reciprocal();
      complex14.negate();
      complex2.reciprocal();
      Complex complex15 = complex12.cos();
      complex1.divide(complex9);
      complex15.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(149.497183423736, 149.497183423736);
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.getArgument();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.multiply((-240));
      complex3.INF.multiply((-240));
      complex3.getField();
      complex1.divide(complex3);
      Complex.valueOf((-416.3));
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.I.sin();
      complex2.hashCode();
      Complex complex6 = complex1.tanh();
      complex5.log();
      complex6.atan();
      Complex complex7 = complex3.asin();
      complex1.tan();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex1.ONE.subtract(1.0);
      complex0.ZERO.subtract(complex1);
      complex0.INF.readResolve();
      int int0 = 0;
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex1.ONE.subtract((-1.0672213971363184E-7));
      complex0.getReal();
      Complex complex2 = complex0.createComplex((-1.0), (-1.0));
      Complex complex3 = complex0.add(complex2);
      complex0.getReal();
      complex0.asin();
      complex2.ONE.conjugate();
      complex3.multiply(1436.384378);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = 1;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.I.cos();
      complex2.NaN.sqrt1z();
      Complex complex3 = complex1.divide((double) 1);
      Complex complex4 = complex2.createComplex(0.0, 1267.79054930725);
      complex4.INF.nthRoot(1);
      complex4.NaN.hashCode();
      double double1 = (-313.2);
      Complex complex5 = new Complex(1267.79054930725, (-313.2));
      complex3.ZERO.abs();
      Complex complex6 = complex0.createComplex((-2324.1918446), 1267.79054930725);
      complex0.subtract(complex5);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.ZERO.log();
      complex8.NaN.add((-590.3));
      complex8.ONE.subtract(complex6);
      complex3.isInfinite();
      Complex complex9 = complex5.subtract(complex7);
      try { 
        complex9.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.log();
      complex0.hashCode();
      int int0 = (-2796);
      Complex complex3 = complex0.ONE.multiply((-2796));
      complex3.sqrt1z();
      complex3.ONE.createComplex((-2305.651988063), 20.0);
      Complex complex4 = complex0.add(20.0);
      Complex.valueOf(0.0, 0.0);
      complex4.NaN.hashCode();
      complex3.ZERO.sqrt();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ZERO.hashCode();
      Complex complex6 = complex0.sqrt();
      complex6.I.multiply(1420);
      Complex complex7 = complex6.tanh();
      complex7.INF.divide(complex6);
      complex6.abs();
      try { 
        complex0.nthRoot((-2796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,796
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.divide(complex3);
      complex5.ONE.pow(complex0);
      Complex complex6 = complex0.multiply(complex4);
      complex4.I.abs();
      Complex complex7 = complex0.sqrt();
      complex4.NaN.sinh();
      complex7.INF.abs();
      Complex complex8 = complex0.NaN.negate();
      complex8.INF.reciprocal();
      complex6.readResolve();
      Complex complex9 = complex7.pow(0.0);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.atan();
      complex9.NaN.asin();
      complex3.nthRoot(228);
      Complex complex12 = complex9.cos();
      complex2.conjugate();
      complex9.conjugate();
      complex11.toString();
      Complex complex13 = complex1.tanh();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, (-4796.722350496));
      complex14.ONE.getField();
      complex10.readResolve();
      complex7.cos();
      complex13.equals(complex12);
      complex9.subtract((-4796.722350496));
      complex1.tan();
      Object object0 = complex7.readResolve();
      complex2.equals(object0);
      complex5.add(complex1);
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-71));
      Complex complex2 = complex0.atan();
      Complex.valueOf(168.60409847066, (double) (-71));
      complex0.isNaN();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.add((-1272.1259433));
      complex3.multiply(complex0);
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex2.multiply((-71));
      complex6.ONE.getField();
      complex6.ONE.toString();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex9 = complex1.acos();
      complex8.NaN.divide(complex7);
      complex9.INF.getArgument();
      complex5.toString();
      Complex complex10 = complex4.conjugate();
      complex10.INF.sin();
      complex9.tan();
      complex8.sqrt();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      complex1.I.negate();
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.I.toString();
      int int0 = (-3417);
      Complex complex3 = complex0.multiply((-3417));
      complex3.INF.cos();
      try { 
        complex3.ZERO.nthRoot((-3417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,417
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      complex1.I.abs();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.I.createComplex((-940.3328024281918), 1.0);
      complex2.NaN.readResolve();
      complex1.ZERO.toString();
      complex0.getField();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.sin();
      complex3.INF.sqrt();
      Complex complex7 = Complex.valueOf(1.227621078491211);
      complex7.I.getArgument();
      complex1.cosh();
      Complex complex8 = complex5.sqrt1z();
      complex8.NaN.sqrt1z();
      complex3.NaN.abs();
      complex8.ZERO.toString();
      complex1.getArgument();
      complex4.readResolve();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex3.exp();
      complex10.ONE.getField();
      complex9.pow(1.227621078491211);
      complex1.add(complex5);
      complex6.conjugate();
      complex5.multiply((-3753.48));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isInfinite();
      complex0.getField();
      Complex complex1 = complex0.acos();
      complex0.isNaN();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.INF.multiply(0.01454218477010727);
      complex3.ONE.hashCode();
      Complex complex4 = complex1.ZERO.multiply((-680));
      Complex complex5 = complex4.I.subtract(complex2);
      complex1.isNaN();
      Complex complex6 = complex1.asin();
      Complex complex7 = Complex.valueOf((double) (-680));
      Complex complex8 = complex7.divide(Double.NaN);
      complex8.log();
      Complex complex9 = complex1.acos();
      complex9.sin();
      complex6.NaN.add(Double.NaN);
      complex5.tanh();
      Complex complex10 = new Complex((-2684.273854433), 989.70392071);
      Complex complex11 = complex6.pow(complex10);
      complex11.NaN.getArgument();
      Complex complex12 = complex9.pow(Double.NaN);
      complex12.I.hashCode();
      Complex complex13 = complex10.subtract(0.0);
      complex13.cosh();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5874010519681994);
      Complex complex1 = new Complex(1.5874010519681994, (-6.655106680680314E-8));
      complex1.INF.cosh();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.ONE.pow((-138.226996561699));
      Complex complex4 = complex3.INF.log();
      complex3.I.nthRoot(2292);
      complex0.getArgument();
      Complex complex5 = complex3.pow(complex0);
      complex4.ZERO.toString();
      complex4.ONE.conjugate();
      complex5.ONE.abs();
      complex5.INF.abs();
      complex5.hashCode();
      complex2.negate();
      complex4.getField();
      Complex complex6 = complex1.sqrt();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1204.561802478601);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex1.divide(1204.561802478601);
      complex2.NaN.abs();
      complex3.NaN.nthRoot(1);
      complex3.ZERO.getField();
      Complex complex4 = Complex.ONE;
      complex4.ZERO.exp();
      complex2.ZERO.hashCode();
      Complex complex5 = complex0.add(complex4);
      complex4.ZERO.multiply(1);
      Complex complex6 = complex0.acos();
      complex6.ONE.toString();
      Complex complex7 = complex4.NaN.sinh();
      Complex complex8 = complex4.NaN.sqrt1z();
      Complex complex9 = complex8.INF.tan();
      complex9.divide(complex3);
      complex2.readResolve();
      complex1.getField();
      Complex complex10 = complex3.I.atan();
      Complex complex11 = complex4.sinh();
      complex11.ZERO.sinh();
      Complex complex12 = complex0.negate();
      complex3.divide((-1821.0));
      Complex complex13 = complex12.acos();
      complex13.NaN.acos();
      complex5.log();
      complex12.isInfinite();
      complex12.getField();
      complex0.getReal();
      Complex complex14 = complex7.subtract(complex11);
      complex14.subtract(complex1);
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-952.586128835664), (-952.586128835664));
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.ZERO.atan();
      complex1.INF.abs();
      Complex complex2 = complex0.atan();
      Complex.valueOf(0.0);
      complex2.I.add((-256.0));
      complex1.conjugate();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.subtract((-2441.89));
      complex0.tan();
      complex4.sqrt1z();
      Complex.valueOf((-952.586128835664));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex2.pow(0.0);
      complex1.ONE.abs();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex2.INF.divide(complex4);
      complex8.INF.toString();
      complex7.add(2015.0);
      complex6.cos();
      Complex complex9 = complex3.pow(2015.0);
      complex9.cosh();
      complex3.readResolve();
      complex1.toString();
      complex0.log();
      complex2.hashCode();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1686.27007771966);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.subtract(1686.27007771966);
      complex3.add(complex1);
      Complex complex4 = complex3.sinh();
      complex2.add(complex4);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1662.611, (-20.0));
      complex0.I.createComplex((-20.0), 1662.611);
      complex0.negate();
      complex0.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.073186581170719E-8, 220.67766);
      complex0.toString();
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.negate();
      complex0.getField();
      Complex complex1 = complex0.subtract((-20.0));
      complex0.divide(complex1);
      Complex complex2 = complex1.exp();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.1694117899971836E-201);
      Complex complex1 = complex0.ONE.divide(1283.565434318248);
      complex0.NaN.divide(0.0);
      Complex complex2 = complex0.sqrt1z();
      complex2.sqrt1z();
      Complex complex3 = complex0.ZERO.pow(0.0);
      complex3.ONE.multiply(complex1);
      complex2.ZERO.pow(1283.565434318248);
      Complex complex4 = complex0.multiply(341.0);
      complex4.INF.abs();
      complex1.sin();
      Complex complex5 = complex2.I.negate();
      complex5.ZERO.reciprocal();
      complex0.abs();
      complex2.negate();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.I.sin();
      complex1.INF.multiply(0.0);
      complex0.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.NaN.exp();
      complex4.I.abs();
      Complex complex6 = Complex.valueOf(0.0);
      complex4.I.subtract(complex6);
      Complex complex7 = complex3.INF.subtract(complex1);
      complex7.ONE.nthRoot(4926);
      Complex complex8 = complex0.INF.log();
      complex3.nthRoot(1);
      complex0.getArgument();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.I.asin();
      complex10.ZERO.tan();
      complex0.isInfinite();
      Complex complex11 = complex8.add(0.0);
      complex11.I.divide(complex5);
      complex11.INF.toString();
      complex8.atan();
      Complex complex12 = complex9.sinh();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(850.0430584);
      Complex complex1 = Complex.I;
      complex0.NaN.add(complex1);
      complex0.getField();
      Complex complex2 = complex0.INF.subtract((-1.0));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.valueOf((-1.0), 850.0430584);
      assertEquals((-1.0), complex8.getReal(), 0.01);
      
      Complex complex9 = complex7.I.pow(complex5);
      complex4.conjugate();
      complex3.getArgument();
      complex4.isNaN();
      Complex complex10 = complex2.INF.negate();
      double double0 = complex5.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex11 = complex2.cosh();
      complex11.INF.abs();
      Complex complex12 = complex11.I.acos();
      complex5.asin();
      Complex complex13 = complex10.acos();
      double double1 = complex12.abs();
      assertEquals(1.8011719796199461, double1, 0.01);
      
      complex2.isNaN();
      complex10.subtract(complex9);
      assertEquals((-2.0754908135810948), complex7.getImaginary(), 0.01);
      assertEquals(0.07372226933190774, complex9.getImaginary(), 0.01);
      
      Complex complex14 = complex11.pow(0.0);
      Complex complex15 = complex14.sinh();
      assertTrue(complex2.isInfinite());
      assertSame(complex15, complex13);
  }
}
