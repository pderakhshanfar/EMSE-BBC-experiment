/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:14:11 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(450.34865);
      Complex complex1 = complex0.sinh();
      complex1.multiply(complex0);
      Complex.valueOf(450.34865);
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.sqrt1z();
      complex3.ZERO.sin();
      complex1.NaN.readResolve();
      Complex complex4 = complex3.INF.negate();
      complex4.NaN.readResolve();
      complex1.getField();
      complex1.subtract(450.34865);
      complex4.subtract(450.34865);
      complex0.abs();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex2.sqrt();
      complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex3.NaN.pow(0.0);
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = Complex.valueOf((-3612.5369520512713));
      complex3.hashCode();
      Complex complex6 = new Complex((-3612.5369520512713), Double.POSITIVE_INFINITY);
      complex6.multiply(1546.1722);
      Complex complex7 = complex1.add(Double.POSITIVE_INFINITY);
      complex7.add(complex4);
      Complex complex8 = complex5.add(0.0);
      complex8.subtract(1546.1722);
      complex2.pow(175.1326);
      complex5.asin();
      complex8.hashCode();
      Complex complex9 = complex1.pow(complex5);
      try { 
        complex9.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2142.3979482811874, 2142.3979482811874);
      complex0.INF.atan();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(2142.3979482811874, Double.POSITIVE_INFINITY);
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(2142.3979482811874, 2142.3979482811874);
      Complex complex1 = Complex.valueOf(2142.3979482811874, Double.POSITIVE_INFINITY);
      complex1.readResolve();
      complex1.tan();
      complex1.multiply((-1919));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2142.3979482811874, 2142.3979482811874);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ONE;
      complex1.conjugate();
      Complex.valueOf(2142.3979482811874, 2142.3979482811874);
      Complex complex3 = Complex.valueOf(2142.3979482811874, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.ONE;
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1723.993612);
      complex1.pow(2284.37);
      complex0.sqrt();
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf(2856.1, (-20.0));
      complex0.sqrt();
      complex2.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt();
      complex1.reciprocal();
      complex2.divide(complex0);
      complex1.exp();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 0.9060366684050755);
      Complex complex4 = complex3.atan();
      complex1.cos();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex2.acos();
      complex3.divide(complex7);
      Complex complex8 = Complex.ONE;
      complex8.divide((-0.9060366684050755));
      complex0.log();
      complex5.tanh();
      complex6.acos();
      Complex complex9 = complex4.sqrt1z();
      complex9.multiply(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2505.2927), (-1527.3890647));
      complex0.I.getArgument();
      Complex complex1 = complex0.NaN.sin();
      complex1.ZERO.add(0.625);
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.ONE.multiply(7);
      Complex complex5 = complex3.sin();
      complex0.cos();
      Complex complex6 = new Complex(1646.698);
      complex4.asin();
      complex5.tan();
      Complex.valueOf((-636.0), 0.625);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex.valueOf(1.5707962101149546);
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf((-282.4));
      complex2.multiply(complex3);
      Complex complex4 = Complex.valueOf(20.0, 3218.638523345396);
      complex1.cosh();
      complex4.tanh();
      complex1.pow((-1288.07));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.4101104260697488);
      complex0.I.add(0.0);
      Complex complex1 = (Complex)complex0.I.readResolve();
      complex1.I.sinh();
      complex1.nthRoot(2518);
      complex1.pow((-1641.0));
      Complex.valueOf((-1641.0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      double double0 = 471.06547433061;
      Complex complex2 = complex1.pow(471.06547433061);
      complex0.log();
      complex1.tan();
      Complex complex3 = null;
      complex2.I.negate();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract((-4903.21309299));
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.sinh();
      complex1.nthRoot(1);
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex5.multiply(628983398);
      Complex complex7 = complex2.acos();
      complex7.add((double) 1);
      complex7.readResolve();
      complex7.equals(complex0);
      complex0.toString();
      complex0.add((-2208.10103487));
      Complex complex8 = complex5.atan();
      Complex complex9 = complex6.subtract(complex5);
      complex9.acos();
      complex3.asin();
      complex3.divide(complex7);
      complex8.pow((double) 628983398);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      complex4.ONE.subtract(complex3);
      Complex complex5 = complex1.NaN.conjugate();
      complex0.toString();
      Complex complex6 = complex5.ONE.sinh();
      complex5.ZERO.abs();
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.I.sin();
      complex9.I.tan();
      complex7.INF.nthRoot(1);
      Complex complex10 = complex7.multiply(complex5);
      Complex complex11 = complex3.subtract(complex2);
      Complex complex12 = Complex.valueOf(1453.2, 2896.258);
      Complex complex13 = complex11.exp();
      complex13.nthRoot(674);
      complex6.atan();
      complex2.asin();
      complex3.sinh();
      Complex complex14 = Complex.valueOf(0.0, (-0.5679514408111572));
      complex10.subtract((double) 1);
      complex0.add((-0.5679514408111572));
      complex12.exp();
      complex14.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex2.NaN.pow(0.0);
      complex0.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ZERO;
      complex3.divide(complex0);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.tanh();
      Complex complex6 = Complex.I;
      complex6.sinh();
      complex2.createComplex(0.0, 353.28487632066);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-5.0541412403312774E-8), 1.2404808760475619);
      complex0.abs();
      Complex complex1 = new Complex(1.2404808760475627);
      Complex complex2 = complex0.subtract(complex1);
      complex1.INF.atan();
      complex2.NaN.multiply(2049341562);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = Complex.valueOf(16.21874207002729);
      Complex complex6 = complex4.ZERO.acos();
      complex3.hashCode();
      complex2.tan();
      Complex complex7 = complex3.log();
      complex7.exp();
      Complex complex8 = complex1.atan();
      complex8.readResolve();
      complex6.tanh();
      complex5.pow(4.724121383150136);
      Complex complex9 = complex3.pow(1.2404808760475619);
      complex9.multiply(1.2404808760475619);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 385.7;
      Complex complex0 = Complex.valueOf(385.7, 385.7);
      Complex complex1 = complex0.ONE.atan();
      complex1.ONE.negate();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.ZERO.multiply(385.7);
      complex0.cos();
      Complex complex4 = complex2.subtract(complex0);
      complex2.tan();
      complex4.divide(complex3);
      int int0 = 1518500250;
      // Undeclared exception!
      complex1.nthRoot(1518500250);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, (-214.33692));
      complex0.I.asin();
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex((-704.01244357));
      Complex complex3 = complex0.subtract(complex2);
      complex3.atan();
      Complex complex4 = complex3.multiply(1);
      complex1.sinh();
      complex1.acos();
      Complex.valueOf(6.283185307179586);
      Complex complex5 = complex0.acos();
      complex3.hashCode();
      complex4.tan();
      Complex complex6 = Complex.INF;
      complex6.log();
      complex5.atan();
      complex5.readResolve();
      complex3.createComplex((-0.9772210431441517), (-0.9772210431441517));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.multiply(complex1);
      complex1.multiply(2147483483);
      Complex complex3 = complex2.tanh();
      complex3.NaN.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 2.0810681643102672E-8;
      Complex complex1 = new Complex(2.0810681643102672E-8);
      complex0.asin();
      Complex complex2 = Complex.ONE;
      complex2.tan();
      Complex complex3 = Complex.valueOf(2.0810681643102672E-8, (-140.01503624));
      Complex complex4 = Complex.ZERO;
      complex3.multiply(complex4);
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      complex2.nthRoot(2037);
      complex1.nthRoot(2037);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.divide((-1576.99652));
      Complex complex6 = complex0.multiply(complex1);
      complex6.multiply(1);
      Complex complex7 = complex0.log();
      complex4.acos();
      Complex complex8 = Complex.ONE;
      complex8.readResolve();
      complex5.equals(complex1);
      complex7.abs();
      complex3.toString();
      Complex complex9 = complex8.add(0.0);
      Complex complex10 = Complex.INF;
      complex10.atan();
      complex9.subtract(complex4);
      complex6.acos();
      Complex complex11 = complex9.asin();
      complex8.abs();
      Complex complex12 = complex2.tan();
      complex11.sqrt1z();
      complex5.acos();
      complex12.cos();
      complex3.getField();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = Complex.I;
      complex0.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ZERO;
      complex5.divide(complex6);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex0.sinh();
      complex4.readResolve();
      Complex complex7 = new Complex((-1047.729892), Double.POSITIVE_INFINITY);
      complex7.equals("");
      complex2.multiply((-265.27719864568746));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = Complex.I;
      complex1.sqrt();
      Complex complex3 = complex2.subtract(7416.310323505147);
      complex1.pow(1.7768193998956956);
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex0.acos();
      Complex.valueOf((-73.609314));
      Complex.valueOf(1.0);
      complex3.multiply(complex5);
      Complex complex6 = Complex.valueOf((-3576.794982461), (-3015.91));
      Complex complex7 = Complex.ONE;
      complex6.tanh();
      complex7.createComplex((-73.609314), 1978.578);
      Complex.valueOf(0.24631062150001526, 180.44786);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = new Complex((-3612.5369520512713));
      Complex complex4 = complex3.asin();
      Complex.valueOf((-3612.5369520512713));
      complex0.acos();
      Complex.valueOf(0.24631062150001526);
      Complex.valueOf((-938.2767563906));
      Complex.valueOf(826.860173, (-4460.0579642629));
      Complex complex5 = complex4.cosh();
      complex2.tanh();
      Complex complex6 = complex5.createComplex(140.771848836102, (-938.2767563906));
      Complex.valueOf((-408.06), 194.5315);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(0.38574057817459106);
      Complex complex3 = complex2.pow(2426.5109719875);
      Complex complex4 = new Complex((-3612.5369520512713));
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.ZERO;
      complex6.acos();
      complex4.hashCode();
      Complex complex7 = complex1.subtract(complex2);
      complex7.sqrt1z();
      Complex complex8 = complex2.multiply(1081.3965655102);
      complex5.getReal();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.add(complex3);
      Complex complex11 = complex5.add(2422.136249198854);
      Complex complex12 = Complex.I;
      complex12.subtract(0.0);
      complex11.pow((-3612.5369520512713));
      complex7.asin();
      complex9.hashCode();
      complex7.equals(complex8);
      complex10.atan();
      Complex complex13 = complex2.cos();
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      complex0.nthRoot(1494);
      complex0.getImaginary();
      complex0.reciprocal();
      Complex complex2 = complex0.conjugate();
      complex2.tanh();
      Complex complex3 = complex1.createComplex(2.0000003838536373, (-828.53461017));
      Complex.valueOf(355.0496813488135, 2.0000003838536373);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1113.687828394);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex0.pow(complex1);
      complex5.readResolve();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.ZERO;
      complex8.sqrt1z();
      complex4.NaN.add(complex7);
      complex1.equals(complex8);
      complex2.pow(1113.687828394);
      complex8.reciprocal();
      complex7.divide(complex3);
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex3.NaN.pow(0.0);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = Complex.valueOf((-3612.5369520512713));
      Complex complex7 = complex1.I.acos();
      complex3.hashCode();
      Complex complex8 = complex1.subtract(complex6);
      complex8.ZERO.sqrt1z();
      complex8.multiply(1546.1722);
      complex4.getReal();
      Complex complex9 = Complex.NaN;
      complex9.add(complex5);
      Complex complex10 = complex6.add(3231.1);
      Complex.valueOf((-3612.5369520512713));
      complex2.pow(175.1326);
      complex6.asin();
      complex10.hashCode();
      Complex.valueOf(1546.1722, Double.POSITIVE_INFINITY);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1614.051);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.tan();
      complex1.NaN.multiply(complex3);
      Complex complex4 = new Complex(1.9655680656433105, 1.9655680656433105);
      complex0.getArgument();
      complex3.readResolve();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.NaN.createComplex((-3245.7137401102245), (-3245.7137401102245));
      Complex complex4 = complex3.asin();
      complex2.ZERO.toString();
      complex0.toString();
      complex1.acos();
      complex4.subtract(3797.5158336);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(2.9885336757136527E-9, 2.9885336757136527E-9);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sinh();
      complex3.NaN.createComplex(2.9885336757136527E-9, (-3105.3593941841));
      complex3.ZERO.divide(complex0);
      Complex complex4 = complex2.divide(2.9885336757136527E-9);
      Complex complex5 = complex4.ONE.multiply((-2069.4401368161));
      complex0.isNaN();
      complex1.pow(complex3);
      complex5.equals((Object) null);
      complex1.pow((-1210.20711));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(2.9885336757136527E-9, 2.9885336757136527E-9);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sinh();
      complex3.ZERO.divide(complex0);
      Complex complex4 = complex2.divide(2.9885336757136527E-9);
      complex4.sinh();
      complex4.pow((-267.1850487));
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex4.multiply((-2292.9));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sqrt();
      complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex3.NaN.pow(0.0);
      complex0.ONE.asin();
      Complex.valueOf((-3612.5369520512713));
      complex1.I.acos();
      Complex complex4 = Complex.valueOf(0.24631062150001526);
      Complex.valueOf(0.0);
      Complex.valueOf(0.24631062150001526, 140.771848836102);
      complex1.conjugate();
      Complex.valueOf(140.771848836102, Double.NaN);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.tan();
      complex0.nthRoot(1494);
      complex1.getImaginary();
      Complex complex3 = complex0.reciprocal();
      complex1.conjugate();
      Complex complex4 = complex2.tan();
      complex4.pow(1863.467429332445);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.subtract(20.0);
      Complex complex5 = complex0.pow(Double.NaN);
      complex5.INF.sqrt1z();
      complex0.asin();
      Complex complex6 = complex2.acos();
      complex5.hashCode();
      complex0.subtract(complex5);
      complex0.multiply((-495.9274));
      complex6.getReal();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex4.add(complex0);
      complex4.add((-444.506));
      complex3.subtract(Double.NaN);
      complex2.pow((-1275.620860308));
      complex1.asin();
      complex8.hashCode();
      Complex complex9 = new Complex((-1275.620860308));
      complex9.pow((-3612.5369520512713));
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-520.2644678646), (-520.2644678646));
      Complex complex1 = complex0.NaN.tan();
      complex0.equals(complex0);
      complex0.add((-1577.773));
      complex0.getImaginary();
      complex1.reciprocal();
      Complex complex2 = complex0.conjugate();
      complex2.sin();
      Complex.valueOf(0.07068414986133575, (-520.2644678646));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.log();
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex(2403.865165, 2403.865165);
      Complex complex4 = complex1.sin();
      complex4.subtract((-816.689435143949));
      Complex complex5 = Complex.INF;
      complex1.divide(complex5);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.add((-816.689435143949));
      complex1.subtract(complex0);
      Complex complex8 = complex2.sinh();
      complex8.abs();
      complex7.cos();
      Complex complex9 = Complex.ONE;
      complex9.sqrt1z();
      Complex complex10 = Complex.ZERO;
      complex10.add((-4.135185828158998E96));
      complex6.reciprocal();
      Complex.valueOf(5.536275125470029E-4);
      complex9.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = Complex.NaN;
      complex2.createComplex((-1.7598351175286083E-10), 8.042275310036546E-198);
      Complex complex3 = Complex.ONE;
      complex3.cos();
      Complex complex4 = complex1.sinh();
      Complex complex5 = Complex.INF;
      complex1.divide(complex5);
      complex4.divide(8.042275310036546E-198);
      complex4.sinh();
      Complex complex6 = Complex.valueOf((-1.7598351175286083E-10), (-2069.4401368161));
      complex6.pow(0.2470736801624298);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(2.9885336757136527E-9);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(2098.0374678646, 2.9885336757136527E-9);
      complex3.subtract(2.9885336757136527E-9);
      complex0.pow(2.9885336757136527E-9);
      Complex complex4 = Complex.valueOf(1.3106793690343815E8, 2.9885336757136527E-9);
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.valueOf(298.318939168047);
      Complex complex7 = complex5.acos();
      complex6.hashCode();
      Complex complex8 = Complex.ONE;
      complex7.subtract(complex8);
      complex5.multiply((-3612.5369520512713));
      complex8.getReal();
      Complex complex9 = Complex.NaN;
      complex5.add(complex1);
      Complex complex10 = complex8.add(4.454584224946555E-9);
      Complex complex11 = complex10.subtract(20.0);
      complex7.pow(298.318939168047);
      complex3.asin();
      complex11.hashCode();
      complex9.equals("");
      complex2.pow(175.1326);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = Complex.I;
      complex0.I.multiply((-494));
      Complex complex3 = complex2.sqrt();
      complex0.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.NaN.pow(0.0);
      complex0.ONE.asin();
      Complex complex5 = Complex.valueOf((-3612.5369520512713));
      complex1.I.acos();
      complex0.I.add(complex5);
      Complex.valueOf(0.24631062150001526);
      Complex complex6 = new Complex(0.24631062150001526, 0.0);
      complex6.readResolve();
      complex0.tan();
      complex4.equals("");
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(2.9885336757136527E-9, 2.9885336757136527E-9);
      Complex complex2 = complex0.log();
      complex1.cosh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex0.log();
      complex2.tanh();
      Complex complex4 = new Complex((-3601.85448078795), Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.sin();
      complex2.subtract(0.8652724732978613);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.divide(complex3);
      complex7.negate();
      complex2.add(0.8652724732978613);
      complex3.subtract(complex6);
      complex1.sinh();
      complex1.abs();
      complex5.sqrt1z();
      complex7.add(20.0);
      complex3.reciprocal();
      Complex.valueOf((-1.5843229740595697E205));
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6202404499053955, 0.6202404499053955);
      Complex complex1 = complex0.negate();
      complex0.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.sqrt();
      complex0.subtract(0.8771524561886006);
      Complex complex4 = complex3.pow(0.8771524561886006);
      Complex complex5 = new Complex(0.6202404499053955, (-3612.5369520512713));
      complex5.asin();
      Complex.valueOf(0.8771524561886006);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.acos();
      Complex.valueOf((-3612.5369520512713));
      Complex.valueOf(0.8771524561886006);
      Complex complex8 = Complex.valueOf(2393.758470088, 2393.758470088);
      complex2.cosh();
      complex7.cosh();
      complex8.tanh();
      complex4.createComplex(140.771848836102, 4.805250615618206E-4);
      complex7.tan();
      complex6.pow((-3017.80772));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(2.9885336757136527E-9, 2.9885336757136527E-9);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sinh();
      complex2.log();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.sin();
      complex5.nthRoot(3481);
      complex4.getImaginary();
      complex1.reciprocal();
      complex5.conjugate();
      Complex.valueOf(2.9885336757136527E-9, (double) 3481);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1729.03));
      complex0.NaN.abs();
      complex0.getArgument();
      complex0.toString();
      Complex complex1 = new Complex(3.141592653589793, (-1729.03));
      complex1.divide(complex0);
      Complex complex2 = Complex.INF;
      complex2.ONE.getField();
      complex2.divide(3.141592653589793);
      Complex complex3 = complex1.multiply((-946.4534723554577));
      complex3.sqrt();
      complex1.sinh();
      Complex complex4 = new Complex(Double.NaN);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.divide((-612.8979509978));
      Complex complex3 = complex0.multiply(complex1);
      complex3.INF.atan();
      Complex complex4 = complex0.reciprocal();
      Complex.valueOf(0.48850810527801514);
      Complex.valueOf(0.48850810527801514, 0.24631062150001526);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.NaN.cosh();
      complex6.ONE.tanh();
      complex6.I.createComplex((-71.0), (-1593.0758866));
      complex2.tan();
      complex4.pow(0.48850810527801514);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.add((-8.757272519238786E-9));
      complex0.getImaginary();
      Complex complex2 = complex1.reciprocal();
      complex2.toString();
      Complex complex3 = Complex.valueOf(0.0);
      Complex.valueOf(0.0);
      Complex complex4 = Complex.valueOf(0.24631062150001526, 0.48850810527801514);
      complex4.cosh();
      complex0.cosh();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.createComplex(Double.NaN, 0.24631062150001526);
      complex6.tan();
      Complex complex7 = complex3.pow(5.070274654122399E107);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.subtract(complex1);
      complex4.I.atan();
      Complex complex5 = complex2.NaN.divide(complex3);
      Complex complex6 = complex5.divide(complex4);
      complex0.toString();
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.getImaginary();
      complex7.reciprocal();
      complex6.conjugate();
      complex5.add((-2.5466223330961086E154));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1729.03));
      complex0.NaN.abs();
      complex0.getArgument();
      complex0.toString();
      Complex.valueOf(0.48850810527801514);
      Complex complex1 = Complex.valueOf(249.62246284);
      Complex complex2 = Complex.valueOf((-2425.2640145249), 0.48850810527801514);
      Complex complex3 = complex1.cosh();
      complex2.cosh();
      complex1.tanh();
      Complex complex4 = complex3.createComplex((-2641.3743), 249.62246284);
      Complex complex5 = new Complex(2.0, 473.796);
      Complex complex6 = complex5.tan();
      complex6.pow(3353.75145);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex3.NaN.pow(0.0);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = Complex.valueOf((-3612.5369520512713));
      Complex complex7 = complex1.I.acos();
      Complex.valueOf(0.24631062150001526);
      Complex.valueOf(0.0);
      Complex complex8 = Complex.valueOf(0.24631062150001526, 140.771848836102);
      complex5.cosh();
      Complex complex9 = complex6.cosh();
      complex4.tanh();
      complex7.createComplex((-3017.80772), Double.POSITIVE_INFINITY);
      complex6.tan();
      complex9.pow(0.0);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.negate();
      complex4.multiply(complex3);
      Complex complex5 = new Complex(1.0);
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = Complex.ONE;
      complex1.equals(complex7);
      complex5.multiply(1.0);
      Complex.valueOf(2.0);
      complex3.multiply((-3172.917215598307));
      complex5.cosh();
      complex6.readResolve();
      complex6.pow((-2221.252235143));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.toString();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.valueOf(252.5, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      complex3.multiply(6.283185307179586);
      Complex complex6 = new Complex(859.0);
      complex6.getReal();
      Complex complex7 = complex6.add(4.1781076667923185E-8);
      Complex complex8 = complex0.add(complex5);
      complex6.add(5156.88854934877);
      complex4.subtract(0.4033359894180144);
      complex7.pow(3352.811439251);
      complex3.asin();
      complex7.hashCode();
      Complex complex9 = Complex.valueOf(3352.811439251, (-9.0));
      complex6.pow(complex9);
      complex8.nthRoot(950);
      complex1.isInfinite();
      complex2.readResolve();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex2.sqrt();
      complex0.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.NaN.pow(0.0);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = Complex.valueOf((-3612.5378903804776));
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex2.negate();
      complex7.multiply(complex0);
      complex2.multiply(complex6);
      Complex complex9 = Complex.ZERO;
      complex0.equals(complex9);
      complex4.multiply(774.531508);
      Complex.valueOf(774.531508);
      Complex complex10 = new Complex((-3172.917215598307));
      complex10.multiply((-3172.917215598307));
      complex1.cosh();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.toString();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.valueOf(252.5, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.acos();
      complex0.hashCode();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex3.getReal();
      Complex complex6 = complex1.add((-7.752519943329177E-294));
      Complex complex7 = complex4.add(complex2);
      complex5.add(4.66149719271323E-286);
      complex4.subtract(1.5707963267948966);
      complex2.pow(1546.1722);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.asin();
      complex5.hashCode();
      complex7.pow(complex1);
      complex6.nthRoot(407);
      complex9.isInfinite();
      Complex complex10 = Complex.I;
      complex10.readResolve();
      Complex complex11 = Complex.NaN;
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-520.2644678646), (-520.2644678646));
      complex0.NaN.tan();
      complex0.equals(complex0);
      complex0.add((-1577.773));
      complex0.reciprocal();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4960.693541951);
      Complex complex1 = Complex.valueOf((-8.757272519238786E-9));
      Complex.valueOf((-8.757272519238786E-9), 0.48850810527801514);
      complex1.cosh();
      Complex complex2 = complex0.cosh();
      complex0.tanh();
      complex2.createComplex((-1593.0758866), 0.48850810527801514);
      Complex complex3 = new Complex((-2103.18));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.pow(243.686774858419);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.valueOf(0.9999830462588387);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex3.pow(complex2);
      complex2.readResolve();
      complex0.tan();
      complex4.equals(complex2);
      complex5.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.add((-8.757272519238786E-9));
      complex0.getImaginary();
      complex1.ZERO.tanh();
      complex0.NaN.toString();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(6062.022174279691, Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.NaN, 2.3375763256988976E-7);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.tanh();
      complex5.createComplex(Double.POSITIVE_INFINITY, 0.24631062150001526);
      complex6.tan();
      complex5.pow(687.0);
      complex2.atan();
      Complex complex8 = complex6.subtract(0.9092974268256818);
      complex8.NaN.reciprocal();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ONE.pow((-3031.0111696205736));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.multiply((-3031.0111696205736));
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex4.ONE.pow(complex5);
      Complex complex7 = complex1.multiply((-3031.0111696205736));
      complex5.I.negate();
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex2.subtract((-3031.0111696205736));
      complex6.sin();
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = complex5.multiply(1);
      complex11.add(complex9);
      complex5.I.divide(0.0);
      complex5.INF.cosh();
      complex5.NaN.nthRoot(3754);
      complex3.asin();
      complex6.getReal();
      complex7.createComplex(2382.6, (-3031.0111696205736));
      Complex complex12 = complex7.acos();
      complex12.I.sqrt1z();
      complex2.sqrt();
      complex6.getField();
      complex10.nthRoot(1);
      Complex complex13 = complex1.conjugate();
      complex13.sinh();
      complex8.pow(complex7);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(415.76441);
      complex0.ONE.cosh();
      Complex complex4 = complex0.INF.add(complex3);
      complex0.getField();
      complex3.INF.divide(Double.NaN);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex0.divide((-1.0));
      Complex complex7 = complex6.ZERO.cos();
      complex6.divide(complex1);
      Complex complex8 = complex4.add(0.0);
      Complex complex9 = complex8.add(415.76441);
      complex9.add(0.0);
      Complex complex10 = complex5.divide(complex3);
      complex2.sin();
      Complex.valueOf((-3104.2121));
      complex10.abs();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = new Complex(2168.124289, 0.0);
      Complex complex5 = complex0.I.subtract((-507.922));
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.divide(complex6);
      complex7.negate();
      Complex complex8 = complex5.INF.add((-507.922));
      complex8.NaN.subtract(complex2);
      complex8.INF.sinh();
      complex5.abs();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex4.I.sqrt1z();
      complex10.INF.acos();
      complex4.INF.readResolve();
      complex0.ZERO.log();
      Complex complex11 = complex0.subtract(complex4);
      Complex complex12 = complex0.ZERO.negate();
      Complex complex13 = complex12.ZERO.divide(complex2);
      complex4.hashCode();
      Complex complex14 = complex3.pow(complex11);
      Complex complex15 = Complex.valueOf(4306.216139511323);
      complex15.NaN.reciprocal();
      complex9.cosh();
      complex14.add(2168.124289);
      complex3.exp();
      complex9.nthRoot(37);
      complex11.subtract((-1.0));
      complex13.abs();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.subtract(complex1);
      complex4.I.atan();
      Complex complex5 = complex2.NaN.divide(complex3);
      complex5.divide(complex4);
      complex0.toString();
      Complex complex6 = complex1.sin();
      complex2.isNaN();
      complex6.subtract(20.0);
      complex0.multiply(1292);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2393.0, Double.NaN);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.INF.multiply(0.0);
      Complex complex5 = complex0.cosh();
      complex5.readResolve();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.asin();
      complex1.ZERO.negate();
      Complex complex8 = complex2.pow((-146.0));
      complex8.tan();
      complex5.getArgument();
      Complex complex9 = complex4.add(complex8);
      complex7.log();
      complex7.equals(complex9);
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.divide(1893.8572497);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex0.multiply(complex1);
      complex0.INF.toString();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = complex0.pow((-872.0));
      complex4.sin();
      complex5.sqrt();
      complex4.cos();
      complex0.reciprocal();
      complex2.conjugate();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex((-613.52), (-613.52));
      Complex complex2 = complex1.ONE.pow(complex0);
      complex1.INF.hashCode();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.NaN.multiply(1);
      Complex complex5 = complex4.INF.add(complex3);
      Complex complex6 = complex4.INF.acos();
      complex1.getField();
      Complex complex7 = complex2.ONE.exp();
      complex0.getArgument();
      Complex complex8 = complex0.sin();
      complex2.readResolve();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex7.I.asin();
      complex10.INF.nthRoot(1);
      Complex complex11 = complex7.multiply(0);
      complex11.atan();
      Complex complex12 = complex2.add((-613.52));
      complex3.tanh();
      complex12.atan();
      Complex complex13 = complex0.tanh();
      complex13.NaN.tanh();
      complex12.isInfinite();
      complex8.negate();
      complex9.acos();
      complex6.divide(complex8);
      complex5.toString();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(2.9885336757136527E-9, 2.9885336757136527E-9);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sinh();
      complex3.ZERO.divide(complex0);
      Complex complex4 = complex2.divide(2.9885336757136527E-9);
      Complex complex5 = complex4.ONE.multiply((-2069.4401368161));
      complex0.sqrt();
      complex5.sinh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.reciprocal();
      complex1.ONE.cos();
      complex2.ZERO.divide(complex1);
      try { 
        complex1.ONE.nthRoot((-933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -933
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1729.03));
      complex0.NaN.abs();
      complex0.getArgument();
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.log();
      complex2.INF.cosh();
      Complex complex3 = complex2.ONE.sin();
      complex1.NaN.nthRoot(3481);
      complex1.getImaginary();
      Complex complex4 = complex0.reciprocal();
      complex4.conjugate();
      complex3.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(314.25338, 3923.0256);
      complex0.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.log();
      complex3.INF.divide(0.0);
      Complex complex4 = Complex.valueOf(3923.0256, 314.25338);
      complex2.isNaN();
      Complex complex5 = Complex.valueOf(314.25338);
      complex2.readResolve();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex2.exp();
      complex1.NaN.multiply((-2649));
      complex7.sin();
      complex7.divide(complex4);
      complex6.conjugate();
      complex2.pow(0.0);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.toString();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.valueOf(252.5, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex2.ZERO.negate();
      complex4.ZERO.multiply(complex1);
      complex0.multiply(complex2);
      complex2.equals("(0.0, 0.0)");
      complex0.multiply(365.24034832576);
      Complex.valueOf((-3172.917215598307));
      complex3.multiply((-1.779945804977441E239));
      complex3.cosh();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-1508.45339707611), 1626.3927476);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ZERO.divide((-1466.08189205514));
      Complex complex3 = complex2.INF.sqrt();
      complex0.getArgument();
      Complex complex4 = complex0.acos();
      complex4.ONE.sqrt();
      complex4.getArgument();
      complex2.cosh();
      Complex complex5 = complex0.cosh();
      complex5.ZERO.toString();
      complex1.cosh();
      Complex complex6 = complex0.ZERO.tanh();
      complex1.ONE.multiply((-1472.711169514));
      Complex.valueOf(Double.NaN, (-1387.42739039));
      Complex.valueOf((-2600.8));
      complex1.tanh();
      Complex complex7 = complex3.sqrt();
      complex7.I.createComplex((-1387.42739039), 0.0);
      complex6.acos();
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.pow(363.5562);
      complex4.INF.conjugate();
      Complex complex5 = complex1.INF.log();
      complex5.I.subtract(Double.POSITIVE_INFINITY);
      complex3.ZERO.acos();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex6.conjugate();
      complex8.createComplex(1893.253671, (-1592.31));
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.multiply(complex1);
      complex2.conjugate();
      complex9.getReal();
      complex5.abs();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.ZERO.pow((-1703.507114));
      complex2.toString();
      complex5.atan();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = (-8.757272519238786E-9);
      Complex complex1 = complex0.INF.add((-8.757272519238786E-9));
      complex0.getImaginary();
      complex1.ZERO.tanh();
      complex0.NaN.toString();
      complex0.ONE.exp();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.INF.add(0.0);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.multiply(Double.NaN);
      Complex complex1 = complex0.asin();
      complex0.isNaN();
      complex1.negate();
      try { 
        complex0.ONE.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt();
      complex0.ZERO.hashCode();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex2.INF.pow(0.0);
      Complex complex4 = complex3.NaN.createComplex(1619.9394, 1619.9394);
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex5.NaN.add(0.0);
      Complex complex7 = complex0.pow((-3470.2454601354866));
      complex7.ZERO.pow(1619.9394);
      complex7.I.add(complex2);
      Complex complex8 = complex2.reciprocal();
      complex3.subtract(complex1);
      Complex complex9 = complex1.negate();
      complex9.ZERO.sin();
      complex3.isInfinite();
      Complex complex10 = complex8.exp();
      Complex complex11 = complex10.ONE.multiply((-3110));
      complex11.ONE.cos();
      complex0.tan();
      complex1.getField();
      complex8.equals(complex6);
      complex9.atan();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex3.I.sinh();
      complex4.I.add(complex1);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.INF.pow((-401.606152722));
      complex6.ZERO.multiply(272);
      complex6.NaN.reciprocal();
      Complex complex7 = complex0.INF.divide(complex5);
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex3.divide(0.0);
      Complex complex10 = complex7.subtract(complex0);
      complex10.atan();
      complex9.negate();
      complex2.cos();
      complex10.INF.subtract(7.674361647125109E-9);
      complex4.multiply(0.0);
      complex2.getReal();
      complex8.multiply(complex4);
      Complex complex11 = complex7.add(complex8);
      complex11.sqrt();
      Complex complex12 = complex0.tanh();
      complex12.sinh();
      complex3.divide((-1021.529174294608));
      complex3.cos();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(1.7407497662694827E-295, (-4666.6743));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.atan();
      complex1.I.getField();
      Complex complex3 = complex0.I.subtract(0.0);
      complex3.I.readResolve();
      Complex complex4 = Complex.valueOf((-4666.6743), 1.7407497662694827E-295);
      complex1.ZERO.atan();
      Complex complex5 = complex2.multiply(complex4);
      complex5.NaN.pow(complex1);
      complex1.NaN.abs();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.pow((-4666.6743));
      Complex complex8 = complex0.sin();
      complex8.INF.log();
      Complex complex9 = complex2.pow(complex8);
      complex7.getField();
      Complex.valueOf(74.5370383383);
      complex9.equals((Object) null);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.readResolve();
      complex2.I.toString();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.NaN.acos();
      complex6.I.multiply(complex5);
      complex4.ZERO.abs();
      Complex complex7 = complex6.ZERO.reciprocal();
      complex7.ONE.getField();
      complex4.readResolve();
      complex0.INF.readResolve();
      Complex complex8 = complex4.divide(complex3);
      Complex complex9 = complex3.NaN.add(complex8);
      complex9.ONE.log();
      complex0.conjugate();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex10.ONE.acos();
      complex11.exp();
      complex3.getField();
      Complex complex12 = complex10.exp();
      complex3.NaN.add(1.0);
      complex12.ONE.divide(complex10);
      complex12.getImaginary();
      complex2.exp();
      complex8.add(0.0);
      complex11.getField();
      complex4.isInfinite();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-2603.38895722), (-2603.38895722));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ZERO.divide((-2603.38895722));
      Complex complex3 = complex1.add((-2603.38895722));
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex4.I.conjugate();
      complex1.INF.hashCode();
      complex0.I.negate();
      complex4.readResolve();
      Complex complex6 = complex5.NaN.sin();
      Complex.valueOf((double) 1431, 0.0);
      complex5.NaN.multiply(1431);
      Complex.valueOf(6.283185307179586);
      Complex complex7 = complex0.divide(0.0);
      complex7.ONE.subtract(complex5);
      Complex complex8 = complex0.pow((-1709.597600909));
      complex8.INF.reciprocal();
      complex1.subtract(2914.856);
      complex2.equals(complex6);
      Complex complex9 = complex1.divide(0.0);
      complex8.multiply(0.0);
      complex5.readResolve();
      Complex complex10 = complex3.multiply(1431);
      complex10.pow(0.0);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.subtract((-1521.5889122852523));
      Complex complex3 = Complex.valueOf((-1521.5889122852523), (-1521.5889122852523));
      Complex complex4 = complex0.divide(2665.263865);
      complex4.hashCode();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.ONE.createComplex((-1521.5889122852523), 2665.263865);
      Complex complex7 = complex0.divide(2282.83613309792);
      complex7.ZERO.getArgument();
      complex6.NaN.toString();
      Complex complex8 = complex2.cosh();
      complex6.abs();
      complex3.exp();
      complex6.abs();
      complex8.negate();
      complex0.abs();
      complex6.sin();
      Complex complex9 = complex8.conjugate();
      complex9.atan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-923.944));
      Complex complex2 = complex1.divide(2137.1173579824067);
      Complex complex3 = complex1.NaN.reciprocal();
      complex1.ZERO.cosh();
      complex3.ZERO.divide(0.0);
      Complex complex4 = Complex.valueOf(2137.1173579824067, 8.66419234315257E-255);
      complex4.NaN.asin();
      Complex.valueOf(0.0, 2137.1173579824067);
      complex0.equals(complex1);
      Complex complex5 = complex2.I.multiply(37);
      complex5.I.divide(4.999126524757713E-197);
      complex1.toString();
      complex2.getField();
      Complex complex6 = complex3.tan();
      complex6.NaN.pow(1593.858);
      complex3.NaN.readResolve();
      Complex complex7 = new Complex(8.66419234315257E-255);
      Complex complex8 = complex3.pow(complex7);
      complex7.cosh();
      complex8.subtract(0.0);
      Complex.valueOf((-356.00096073));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.abs();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex2.sqrt();
      complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex3.NaN.pow(0.0);
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = Complex.valueOf((-3612.5369520512713));
      Complex complex6 = complex1.I.acos();
      complex3.hashCode();
      Complex complex7 = complex1.subtract(complex5);
      complex7.multiply(1546.1722);
      complex0.getReal();
      Complex complex8 = complex1.add(Double.POSITIVE_INFINITY);
      complex8.add(complex4);
      Complex complex9 = complex5.add(3231.1);
      complex9.subtract(3231.1);
      complex2.pow(175.1326);
      complex5.asin();
      complex9.hashCode();
      Complex complex10 = complex1.pow(complex6);
      try { 
        complex10.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ONE.subtract(2575.073);
      complex2.I.tanh();
      complex2.ZERO.pow(complex0);
      complex0.ONE.toString();
      complex0.ZERO.multiply(2436.2374326);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.NaN.tan();
      complex4.INF.multiply(0);
      Complex complex5 = complex3.ZERO.tan();
      complex5.NaN.exp();
      Complex complex6 = complex3.pow(0.0);
      Complex complex7 = complex0.pow(0.0);
      Complex complex8 = complex7.reciprocal();
      complex5.sin();
      Complex complex9 = complex8.acos();
      complex9.isNaN();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex6.pow(complex10);
      complex0.tan();
      complex11.createComplex(0.0, 2436.2374326);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      complex1.INF.cosh();
      complex0.equals("CN");
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-520.2644678646), (-520.2644678646));
      Complex complex1 = Complex.I;
      complex1.NaN.tan();
      complex0.equals(complex1);
      complex0.add((-1577.773));
      complex1.reciprocal();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(1);
      complex1.I.exp();
      complex1.NaN.negate();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.ZERO.createComplex(1, 1);
      complex3.ONE.tanh();
      Complex complex4 = complex2.INF.divide(1.0);
      complex0.hashCode();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex2.ONE.reciprocal();
      complex7.INF.divide(0.0);
      complex6.ONE.conjugate();
      complex4.ONE.conjugate();
      complex6.ZERO.multiply(1665.76028);
      complex2.ONE.log();
      complex4.equals(complex6);
      Complex complex8 = complex5.sinh();
      complex2.toString();
      complex2.multiply(1);
      complex8.isNaN();
      Complex complex9 = complex8.divide(1665.76028);
      complex5.NaN.createComplex(1665.76028, 1);
      complex8.add(Double.POSITIVE_INFINITY);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 928.1493929420155;
      complex0.divide(928.1493929420155);
      complex0.abs();
      complex0.getField();
      complex0.ZERO.multiply((-2287.966884894454));
      complex0.isNaN();
      complex0.ONE.add(1917.2135224207534);
      try { 
        complex0.nthRoot((-906));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -906
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(complex0);
      complex2.NaN.log();
      complex2.ZERO.conjugate();
      complex0.getField();
      complex0.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.multiply(1642);
      Complex complex5 = complex0.subtract(945.705742251);
      Complex complex6 = Complex.valueOf(241.25152366, 945.705742251);
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex0.ONE.log();
      complex6.NaN.nthRoot(102);
      complex5.isNaN();
      complex0.toString();
      complex6.NaN.hashCode();
      Complex complex9 = complex6.ONE.log();
      complex9.I.readResolve();
      complex4.abs();
      complex8.tanh();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex10.ONE.multiply(472);
      complex11.cos();
      complex8.add(945.705742251);
      Complex complex12 = complex10.multiply(1);
      complex6.acos();
      complex12.atan();
      Complex complex13 = complex10.sqrt();
      complex13.INF.createComplex(1642, (-4302.576275));
      complex7.multiply((-3196));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.301386276260592E-111), 0.0);
      Complex complex1 = complex0.negate();
      complex0.NaN.abs();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex2.NaN.sqrt();
      complex3.INF.log();
      Complex complex4 = complex0.add(complex1);
      complex4.ZERO.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.I.multiply(complex1);
      Complex complex6 = complex5.INF.pow(complex4);
      Complex complex7 = complex5.divide((-1600.55930295));
      complex7.ZERO.reciprocal();
      complex6.sinh();
      Complex complex8 = complex5.ZERO.add((-5.301386276260592E-111));
      complex8.getArgument();
      complex2.equals(object0);
      Complex complex9 = complex0.add(complex1);
      complex9.INF.abs();
      complex9.ONE.sin();
      complex2.isInfinite();
      Complex complex10 = complex9.multiply(complex4);
      complex10.ONE.atan();
      Complex complex11 = Complex.valueOf(0.0);
      complex1.exp();
      complex0.log();
      complex11.abs();
      complex8.atan();
      complex3.sqrt();
      complex3.sinh();
      complex5.sqrt1z();
      Complex complex12 = Complex.valueOf((-5.301386276260592E-111));
      complex12.readResolve();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.atan();
      Complex complex1 = Complex.valueOf((-1626.1978));
      complex1.ZERO.atan();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.subtract(complex2);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = new Complex((-1626.1978), 2.0);
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex4.ONE.multiply(37);
      complex4.cos();
      complex1.equals(complex5);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.ZERO.divide((-612.8979509978));
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.atan();
      Complex complex3 = complex0.reciprocal();
      complex3.INF.toString();
      Complex.valueOf(0.48850810527801514);
      Complex complex4 = Complex.valueOf(0.48850810527801514);
      Complex.valueOf(0.48850810527801514, 0.24631062150001526);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.NaN.cosh();
      complex6.ONE.tanh();
      complex6.I.createComplex((-71.0), (-1593.0758866));
      complex4.tan();
      complex3.pow(0.48850810527801514);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      complex1.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.cos();
      complex2.ONE.getField();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.divide(0.0);
      Complex complex5 = complex4.INF.cosh();
      complex5.ZERO.sqrt1z();
      complex0.getReal();
      Complex complex6 = complex3.cosh();
      complex3.ONE.atan();
      complex2.INF.conjugate();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.multiply(0);
      complex7.ZERO.abs();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2881.4784), 20.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.I.conjugate();
      Complex complex3 = complex0.ZERO.exp();
      complex1.NaN.pow(complex2);
      Complex complex4 = complex0.atan();
      complex0.I.atan();
      complex4.divide(complex3);
      complex4.exp();
      Complex complex5 = complex0.subtract(complex2);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-5.0706081370522526E85));
      complex1.I.getArgument();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.multiply((-5.0706081370522526E85));
      complex4.ZERO.hashCode();
      Complex complex5 = complex0.pow(0.0);
      complex0.I.getField();
      Complex complex6 = complex3.asin();
      Complex.valueOf(4.194022929828008E-9, 0.0);
      complex6.ONE.readResolve();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex2.ZERO.add(306.44);
      Complex complex8 = complex5.reciprocal();
      complex3.readResolve();
      Complex complex9 = complex3.sin();
      Complex complex10 = complex2.multiply(complex0);
      complex9.I.pow(complex2);
      Complex complex11 = complex1.sqrt1z();
      complex1.I.sin();
      Complex complex12 = complex7.add(complex10);
      Complex complex13 = complex12.multiply(complex1);
      complex12.INF.sin();
      Complex complex14 = complex9.atan();
      Complex complex15 = Complex.valueOf((-1987.9394), 0.0);
      assertEquals((-1987.9394), complex15.getReal(), 0.01);
      
      Complex complex16 = complex14.negate();
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex16.getReal(), 0.01);
      
      complex13.isNaN();
      assertEquals((-1.9721500320498834E-86), complex1.getReal(), 0.01);
      
      Complex complex17 = complex2.pow(complex8);
      assertSame(complex17, complex12);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex8.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(3611.51123, (-1.0));
      double double0 = complex0.getArgument();
      assertEquals((-2.7689238957275366E-4), double0, 0.01);
      
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }
}
