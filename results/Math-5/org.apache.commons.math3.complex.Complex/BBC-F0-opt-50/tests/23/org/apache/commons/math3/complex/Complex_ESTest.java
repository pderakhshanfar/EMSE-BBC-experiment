/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:58:46 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(3638.8033125040038, Double.POSITIVE_INFINITY);
      complex0.NaN.getArgument();
      Complex complex1 = new Complex(68.3989735, 917.178109096);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ZERO.atan();
      complex3.NaN.readResolve();
      Complex complex4 = complex0.negate();
      complex2.multiply(2117);
      Complex complex5 = complex4.I.pow(complex2);
      complex4.nthRoot(36);
      Complex complex6 = complex5.ZERO.acos();
      complex6.acos();
      Complex complex7 = complex5.createComplex(3638.8033125040038, (-1732.5204811837853));
      complex5.reciprocal();
      complex3.add(Double.POSITIVE_INFINITY);
      Complex.valueOf((double) 36, Double.NaN);
      complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((double) 2502, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.add((double) 2502);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.getField();
      Complex complex1 = Complex.valueOf(5.99546349438793E-250);
      Complex complex2 = complex0.I.subtract(complex1);
      complex1.reciprocal();
      complex2.INF.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex0.multiply(9.817362835802648E-176);
      complex5.ONE.readResolve();
      Complex complex6 = complex2.add(complex4);
      complex2.subtract(9.817362835802648E-176);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex6.tan();
      complex2.sqrt();
      Complex complex9 = complex1.divide(complex3);
      complex8.add(complex9);
      complex4.sqrt1z();
      complex7.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.reciprocal();
      complex1.nthRoot(1209);
      Complex complex3 = complex0.sinh();
      complex2.I.asin();
      Complex complex4 = complex2.NaN.cosh();
      complex4.ZERO.divide(complex2);
      complex3.I.hashCode();
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex3.I.log();
      complex6.INF.getField();
      complex0.toString();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.INF.multiply(20.0);
      complex0.INF.subtract(3722.219538777);
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.sqrt();
      complex10.reciprocal();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex11.ONE.pow(complex3);
      Complex complex13 = Complex.valueOf(1.75879225876483E-25, 1.75879225876483E-25);
      complex7.tanh();
      complex13.INF.sqrt1z();
      complex5.cosh();
      complex13.add(complex7);
      complex1.getField();
      Complex complex14 = complex8.multiply((-3.0));
      complex14.INF.conjugate();
      complex12.acos();
      complex3.subtract(0.0018831883062215902);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1984.85417009), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex.valueOf((-1508.59350584), (-1581.08));
      Complex complex3 = complex0.createComplex((-229.6), (-1508.59350584));
      complex2.I.hashCode();
      Complex complex4 = complex2.createComplex((-229.6), 2.1540322390343345E90);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex2.subtract(complex4);
      complex3.NaN.getArgument();
      complex0.I.multiply(694321.6840983344);
      Complex complex7 = complex6.createComplex(5.022188652837274E-9, 2.1540322390343345E90);
      Complex.valueOf((-229.6), (-1508.59350584));
      Complex complex8 = complex5.sqrt1z();
      complex8.I.exp();
      Complex complex9 = complex0.multiply(complex3);
      complex5.INF.sin();
      complex9.ZERO.sinh();
      complex9.tan();
      complex9.conjugate();
      complex2.tan();
      complex9.multiply(complex5);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      Complex complex1 = complex0.tanh();
      complex0.sqrt();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.cos();
      complex1.getField();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.pow((-579.1159057526652));
      Complex complex7 = complex2.reciprocal();
      Complex.valueOf((-579.1159057526652));
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.subtract(complex8);
      Complex.valueOf((-579.1159057526652));
      Complex complex10 = complex7.sqrt();
      complex4.log();
      complex6.nthRoot(1438);
      complex5.readResolve();
      complex10.tanh();
      complex5.acos();
      Complex complex11 = Complex.ZERO;
      complex4.divide((double) 1438);
      complex9.pow(complex11);
      complex10.sqrt1z();
      Complex complex12 = Complex.valueOf((double) 79);
      complex12.tan();
      Complex.valueOf(2.6991427376823027E-152);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.asin();
      complex2.INF.subtract(complex3);
      Complex complex5 = complex4.I.pow(0.3333333333332802);
      Complex complex6 = complex5.ONE.divide(complex4);
      complex4.pow(complex2);
      complex1.subtract(complex2);
      Complex complex7 = complex2.sqrt();
      complex7.multiply(92.6129);
      Complex complex8 = Complex.valueOf(0.3333333333332802, 8.738625278484571E-8);
      Complex complex9 = complex6.add(complex8);
      Complex complex10 = complex9.ZERO.add(Double.NaN);
      complex10.ONE.readResolve();
      Complex complex11 = complex9.NaN.sqrt1z();
      Complex complex12 = Complex.valueOf(92.6129, (-1439.05848));
      complex12.NaN.sin();
      Complex complex13 = complex7.divide(0.3333333333332802);
      Complex complex14 = complex13.ZERO.sqrt();
      Complex complex15 = complex0.sin();
      complex0.abs();
      complex15.add((-504.802));
      complex11.sqrt();
      complex6.negate();
      complex8.multiply(2.626941680908203);
      complex14.tan();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-6584.8566));
      Complex complex1 = complex0.subtract(Double.NaN);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3152074173459994E-8, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1367.8377671257647, Double.NaN);
      complex0.INF.readResolve();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.multiply((-702706747));
      complex1.sin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.divide(complex0);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.asin();
      complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.INF.divide(0.0);
      Complex complex6 = complex4.NaN.exp();
      Complex complex7 = complex5.ZERO.sinh();
      Complex complex8 = complex3.I.pow(2.0);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = Complex.valueOf(2.0);
      Complex complex11 = complex10.subtract(complex7);
      Complex.valueOf(1257.4443961);
      Complex complex12 = complex9.log();
      Complex complex13 = Complex.INF;
      complex13.readResolve();
      complex6.acos();
      complex12.getArgument();
      Complex complex14 = Complex.ZERO;
      complex13.divide(1632.56847768232);
      complex0.pow(complex2);
      complex9.sqrt1z();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.600019262868957E7, 20.0);
      complex0.getArgument();
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.INF.subtract(complex1);
      complex3.divide(0.6598852872848511);
      complex3.NaN.nthRoot(2045222521);
      complex3.ZERO.getArgument();
      Complex complex5 = complex3.INF.multiply(complex2);
      complex5.INF.createComplex(5170.191486, 3.2330960700986594E-292);
      complex2.NaN.pow(complex0);
      Complex complex6 = complex0.exp();
      complex6.ONE.subtract(complex0);
      Complex complex7 = Complex.valueOf(1.2499849510641547E-6);
      complex7.INF.divide(complex4);
      complex6.NaN.asin();
      complex6.abs();
      complex0.NaN.readResolve();
      complex6.I.sinh();
      Complex complex8 = complex1.cosh();
      complex8.multiply(complex2);
      Complex complex9 = complex8.cos();
      complex9.I.sqrt1z();
      complex8.atan();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      double double0 = 2.2945759860262;
      double double1 = 1.6390888071605646E157;
      Complex complex1 = complex0.createComplex(2.2945759860262, 1.6390888071605646E157);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex1.subtract(2.2945759860262);
      complex4.INF.hashCode();
      complex4.abs();
      complex4.tanh();
      Complex complex5 = complex3.log();
      complex5.sqrt();
      int int0 = (-512);
      try { 
        complex3.nthRoot((-512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -512
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.402252865260326E-227, 5.402252865260326E-227);
      Complex complex1 = complex0.multiply(5.402252865260326E-227);
      Complex complex2 = Complex.I;
      complex1.equals(complex2);
      Complex complex3 = Complex.ZERO;
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.add(0.6173863634761559);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.subtract(complex0);
      complex4.sqrt1z();
      complex2.divide((-20.0));
      double double1 = 2.0;
      complex3.exp();
      complex2.sinh();
      Complex complex5 = complex0.pow((-20.0));
      complex3.reciprocal();
      Complex.valueOf(0.6173863634761559);
      try { 
        complex5.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt();
      complex0.acos();
      complex0.cos();
      complex1.getField();
      complex2.atan();
      complex1.createComplex((-4534.449152), (-4534.449152));
      Complex complex3 = Complex.I;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ZERO.atan();
      complex4.I.toString();
      complex1.add(complex3);
      Complex complex5 = complex2.tan();
      complex5.pow(complex1);
      complex5.ONE.readResolve();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.I.multiply(complex2);
      Complex complex8 = complex2.acos();
      complex6.log();
      complex7.multiply(85);
      complex0.acos();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide((-579.1159057526652));
      complex1.ZERO.hashCode();
      complex0.nthRoot(87);
      Complex complex2 = Complex.valueOf((double) 87, (-1158.230948119663));
      Complex complex3 = complex0.createComplex(1926.31153534, 87);
      complex3.ZERO.tan();
      complex2.asin();
      complex3.multiply((-579.1159057526652));
      Complex complex4 = Complex.valueOf((-579.1159057526652), 1926.31153534);
      complex4.INF.multiply((-1158.230948119663));
      Complex complex5 = complex3.createComplex(2370.7, Double.POSITIVE_INFINITY);
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      Complex complex6 = complex5.sinh();
      complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      complex0.tanh();
      Complex complex1 = Complex.valueOf((-579.1159057526652), (-6.364563771711373E-8));
      complex1.readResolve();
      complex0.equals(complex1);
      complex1.subtract(227.022362442);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(5.402252865260326E-227, 673813.855138012);
      complex0.ZERO.sinh();
      Complex complex1 = complex0.pow(673813.855138012);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex((-20.0), 0.0);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex0.divide(complex3);
      complex0.asin();
      Complex complex5 = complex1.subtract(complex0);
      complex2.sqrt1z();
      Complex complex6 = complex4.divide(782.0);
      complex1.exp();
      Complex complex7 = Complex.valueOf(1154.188);
      complex7.sinh();
      Complex complex8 = complex6.pow(0.0);
      Complex complex9 = Complex.I;
      complex9.reciprocal();
      Complex complex10 = Complex.valueOf(2900.85);
      complex0.subtract(complex5);
      complex4.NaN.createComplex(782.0, (-2635.0));
      Complex complex11 = Complex.valueOf((-336906.927569748));
      complex10.sqrt();
      Complex complex12 = complex0.log();
      complex12.readResolve();
      complex8.tanh();
      complex11.acos();
      Complex complex13 = new Complex((-20.0), 1154.188);
      complex13.getArgument();
      Complex complex14 = Complex.ZERO;
      complex0.divide(1.5881227923134211);
      Complex complex15 = complex6.pow(complex4);
      complex15.sqrt1z();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1153.130566099));
      Complex complex1 = Complex.I;
      complex1.createComplex((-1153.130566099), 1.0618494853096868E-7);
      complex1.divide((-1153.130566099));
      Complex complex2 = complex0.atan();
      complex2.conjugate();
      complex0.createComplex(627334.3678499132, 627334.3678499132);
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ONE;
      complex1.divide((-1793.749663454833));
      Complex complex3 = Complex.ZERO;
      complex1.hashCode();
      complex0.nthRoot(1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex((-579.1159057526652));
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex0.pow(complex1);
      complex7.multiply(complex6);
      complex4.tanh();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.8569463298482503), (-1.8569463298482503));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.divide(335374.2322957298);
      complex3.exp();
      Complex complex5 = complex0.sinh();
      complex5.pow(1.862334941896283E-5);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.subtract(complex8);
      Complex.valueOf(335374.2322957298);
      Complex complex10 = Complex.I;
      complex10.sqrt();
      Complex complex11 = new Complex(2.0, 688.65443961);
      Complex complex12 = complex11.log();
      complex6.readResolve();
      complex9.tanh();
      Complex complex13 = complex2.acos();
      complex13.getArgument();
      Complex complex14 = Complex.ZERO;
      complex10.divide((-1.0518628541692314));
      complex4.pow(complex8);
      complex8.sqrt1z();
      complex12.tan();
      complex9.nthRoot(1241);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      Complex complex1 = complex0.I.multiply(37);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.INF;
      complex3.hashCode();
      complex3.nthRoot(7);
      Complex complex4 = complex1.tanh();
      complex2.conjugate();
      complex4.reciprocal();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.ONE.sqrt1z();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = new Complex((-20.0), (-20.0));
      Complex complex3 = complex1.subtract((-20.0));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = (-2448.233121);
      Complex complex0 = new Complex((-3271.32175), (-2448.233121));
      complex0.I.hashCode();
      double double1 = (-439.8);
      Complex complex1 = complex0.divide((-439.8));
      complex1.INF.multiply(complex0);
      complex1.negate();
      Complex complex2 = complex0.I.sinh();
      complex2.log();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.log();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.cosh();
      // Undeclared exception!
      complex2.ONE.nthRoot(2040109465);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.equals(complex0);
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.acos();
      complex0.cos();
      complex1.getField();
      complex1.divide((-1793.749663454833));
      complex3.negate();
      complex0.hashCode();
      complex3.nthRoot(1);
      complex3.tanh();
      complex3.conjugate();
      complex1.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(36.0, (-1858.9));
      Complex complex2 = complex0.pow(complex1);
      complex2.multiply(728);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1148.37898889808));
      complex0.I.subtract((-1148.37898889808));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.I.sin();
      Complex complex6 = Complex.ZERO;
      Complex.valueOf((-1793.749663454833));
      complex4.equals(complex6);
      complex2.sinh();
      Complex complex7 = complex2.subtract(complex3);
      complex7.INF.tanh();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex5.I.asin();
      complex8.ONE.multiply(complex0);
      complex8.cos();
      complex3.ONE.conjugate();
      complex8.I.divide((-2069.108307578612));
      complex5.equals((Object) null);
      complex9.I.atan();
      complex7.createComplex(6.283185307179586, (-354.16244560451));
      complex2.reciprocal();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      complex1.toString();
      Complex complex2 = Complex.valueOf(1076.85165);
      Complex complex3 = complex2.I.sqrt1z();
      complex3.NaN.negate();
      complex2.INF.sqrt1z();
      Complex complex4 = complex2.ZERO.createComplex(291.1835, 1);
      Complex complex5 = complex0.INF.divide(complex1);
      Complex complex6 = complex5.I.asin();
      complex1.ONE.nthRoot(1);
      complex0.nthRoot(905);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex6.sinh();
      complex8.NaN.pow(1076.85165);
      Complex complex9 = Complex.valueOf((double) 905);
      complex9.NaN.divide(1076.85165);
      complex9.tanh();
      complex7.sinh();
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(0.0, (-684.6415));
      complex0.subtract(complex2);
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex3.createComplex(0.0, 0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      Complex complex1 = complex0.tanh();
      complex0.sqrt();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.cos();
      complex1.getField();
      complex1.divide((-1793.749663454833));
      Complex complex4 = complex2.negate();
      complex0.hashCode();
      complex2.nthRoot(1);
      complex2.tanh();
      Complex complex5 = complex2.conjugate();
      complex3.tanh();
      Complex complex6 = complex2.pow(complex4);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-579.1159057526652));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.divide((-579.1159057526652));
      Complex complex3 = complex1.createComplex((-579.1159057526652), 1245.2613312134945);
      complex3.cos();
      complex3.pow(complex0);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex3.INF.atan();
      complex4.INF.divide(complex3);
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex1.I.sqrt();
      Complex complex7 = complex6.ZERO.acos();
      complex0.ZERO.cos();
      complex0.NaN.getField();
      Complex complex8 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.negate();
      complex8.INF.hashCode();
      complex5.nthRoot(36);
      complex0.tanh();
      Complex complex9 = complex7.conjugate();
      complex9.ONE.tanh();
      complex4.pow(complex8);
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(complex0);
      Complex complex2 = Complex.valueOf((-792.0450541793144));
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex0.ONE.add(0.0);
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = complex0.asin();
      complex0.subtract(complex4);
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex7.INF.divide(0.0);
      Complex complex9 = complex7.NaN.exp();
      complex2.exp();
      complex5.sinh();
      complex8.pow(2.0);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.subtract(complex4);
      Complex.valueOf(2.0);
      complex10.sqrt();
      complex3.log();
      complex9.readResolve();
      complex13.tanh();
      try { 
        complex7.nthRoot((-2182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,182
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(complex0);
      Complex complex2 = Complex.valueOf((-8.254443919468538E-9));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex0.divide(complex2);
      complex2.asin();
      Complex complex6 = Complex.INF;
      complex6.subtract(complex1);
      complex6.sqrt1z();
      Complex complex7 = complex3.divide(0.0);
      complex7.exp();
      complex6.sinh();
      Complex complex8 = complex2.pow((-8.254443919468538E-9));
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = Complex.ONE;
      complex8.subtract(complex1);
      Complex.valueOf((-8.254443919468538E-9));
      Complex complex11 = complex1.sqrt();
      complex1.log();
      complex1.readResolve();
      complex9.tanh();
      complex7.acos();
      complex1.getArgument();
      complex4.sinh();
      complex5.divide(2.0);
      Complex complex12 = Complex.valueOf((-207.035), 1.0);
      complex12.sqrt1z();
      Complex complex13 = Complex.ZERO;
      complex6.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-570.4299416202217));
      Complex complex1 = complex0.multiply(672);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.add(complex2);
      complex1.cosh();
      complex0.nthRoot(840);
      Complex complex4 = Complex.INF;
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(complex0);
      Complex.valueOf((-792.0450541793144));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.ONE.add(0.0);
      complex3.NaN.divide(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex6.INF.divide(0.0);
      Complex complex8 = complex6.exp();
      complex8.sinh();
      Complex complex9 = complex5.pow(1363.782);
      complex5.reciprocal();
      Complex complex10 = Complex.ONE;
      complex5.subtract(complex3);
      Complex.valueOf((-792.0450541793144));
      complex6.sqrt();
      complex5.log();
      complex8.readResolve();
      complex2.tanh();
      complex6.acos();
      complex7.getArgument();
      Complex complex11 = complex10.sinh();
      Complex complex12 = Complex.ZERO;
      complex12.divide(Double.NaN);
      complex9.pow(complex0);
      complex11.sqrt1z();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = Complex.ONE;
      complex0.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-574.7007071944513));
      Complex complex1 = complex0.I.multiply(37);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.acos();
      complex3.getArgument();
      complex3.sinh();
      Complex complex4 = complex1.divide((-574.7007071944513));
      complex3.pow(complex4);
      complex4.sqrt1z();
      Complex complex5 = Complex.INF;
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-570.4299416202217));
      Complex complex1 = Complex.valueOf((double) 37, (double) 37);
      complex1.INF.sqrt();
      complex0.INF.add(complex1);
      Complex complex2 = complex1.cosh();
      complex0.nthRoot(37);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex2.INF.cosh();
      complex2.nthRoot(1079);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-3036.252), (-3036.252));
      Complex complex1 = Complex.I;
      complex0.I.divide(complex1);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.8346392806392));
      Complex complex1 = complex0.add((-3409.922356));
      Complex complex2 = complex1.ONE.sqrt1z();
      complex1.pow((-2227.284292444075));
      Complex complex3 = complex0.ZERO.pow(2.0);
      Object object0 = new Object();
      complex0.INF.getArgument();
      complex2.equals(object0);
      Complex complex4 = complex1.divide((-2227.284292444075));
      complex0.negate();
      complex4.getField();
      complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      complex1.I.pow(complex0);
      Complex complex2 = complex0.I.createComplex(Double.NaN, 2.2645654678344727);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = Complex.valueOf(2.2645654678344727, Double.NaN);
      Complex complex5 = complex3.NaN.divide(complex4);
      Complex complex6 = complex3.divide(complex2);
      complex6.INF.toString();
      complex0.multiply((-968));
      complex2.INF.getField();
      Complex complex7 = complex3.subtract(2.2146463048385474E8);
      complex7.INF.getField();
      complex4.abs();
      Complex complex8 = complex2.pow(20.0);
      Complex complex9 = complex8.cos();
      complex8.NaN.getField();
      complex5.reciprocal();
      complex9.asin();
      complex9.asin();
      complex8.exp();
      complex9.pow(complex7);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-2060.151504711278), (-3409.922356));
      complex0.tan();
      Complex complex1 = complex0.I.tanh();
      complex1.multiply(713.4008281852);
      Complex complex2 = complex0.reciprocal();
      complex0.getArgument();
      Complex complex3 = Complex.ZERO;
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex((-3053.10985423884), 2.718281828459045);
      Complex complex4 = complex3.conjugate();
      complex4.subtract((-3053.10985423884));
      complex3.toString();
      Complex complex5 = complex2.cos();
      complex0.add(5943.90651514);
      complex3.multiply(2045222521);
      Complex complex6 = Complex.ZERO;
      complex6.reciprocal();
      Object object0 = new Object();
      complex5.equals(object0);
      complex1.log();
      complex3.hashCode();
      Complex complex7 = complex2.log();
      complex0.isInfinite();
      complex2.tan();
      complex7.readResolve();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      complex1.subtract(0.0);
      try { 
        complex1.nthRoot((-1763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,763
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex2.ONE.sin();
      complex3.I.divide(0.0);
      complex1.INF.sqrt();
      Complex complex5 = complex3.ONE.add(0.0);
      complex0.readResolve();
      complex5.tanh();
      Complex complex6 = complex0.acos();
      complex3.getArgument();
      Complex complex7 = complex6.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.divide(0.6335183732081835);
      Complex complex10 = new Complex(0.6335183732081835, Double.POSITIVE_INFINITY);
      complex10.ONE.subtract(complex9);
      complex7.pow(complex10);
      Complex complex11 = complex2.exp();
      complex11.sqrt1z();
      complex1.exp();
      complex7.isInfinite();
      complex8.getImaginary();
      complex4.multiply(120);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.readResolve();
      Complex complex1 = complex0.cosh();
      complex1.nthRoot(757);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.tanh();
      complex2.ONE.abs();
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.nthRoot(886036396);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0157401811738964E-4));
      Complex complex1 = Complex.valueOf((-1.0157401811738964E-4), (-1.0157401811738964E-4));
      Object object0 = complex0.readResolve();
      complex0.ONE.createComplex((-1.0157401811738964E-4), 6.317463237641817E-9);
      Complex complex2 = complex1.sqrt1z();
      complex2.equals(object0);
      Complex complex3 = complex1.multiply(complex2);
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.ONE.sinh();
      complex0.sinh();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex3.ZERO.cosh();
      complex4.add(0.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.divide(complex5);
      complex2.hashCode();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex7.cosh();
      complex8.INF.sqrt();
      Complex complex9 = complex4.multiply(0.0);
      complex9.hashCode();
      complex9.sqrt();
      complex4.divide(complex5);
      Complex complex10 = complex4.conjugate();
      complex6.getImaginary();
      complex3.subtract(complex2);
      complex3.divide(complex5);
      complex10.sqrt();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.INF.tanh();
      Complex complex3 = complex2.ONE.sin();
      complex1.INF.sqrt();
      complex3.cosh();
      Complex complex4 = new Complex((-4671.99309841));
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.valueOf((-193.69264));
      complex6.tan();
      Complex.valueOf(2.0, 1213.8577999850331);
      Complex.valueOf(9.710435805122717E-67, (-4671.99309841));
      Complex complex7 = Complex.ONE;
      complex7.ONE.getField();
      complex7.negate();
      complex1.getArgument();
      complex4.getField();
      complex6.cosh();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.asin();
      complex2.asin();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.conjugate();
      Complex complex4 = complex2.add((-1.0157401811738964E-4));
      Complex complex5 = complex3.multiply((-7.522074418324674E-8));
      complex5.add(0.0);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex0.sinh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.log();
      complex3.cosh();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.conjugate();
      complex0.tan();
      Complex complex6 = Complex.valueOf(1494.8790875, (-3861.720855116158));
      Complex.valueOf(Double.NaN, 3.115616594184543E-9);
      Complex complex7 = Complex.INF;
      complex7.negate();
      complex4.getArgument();
      complex6.getField();
      complex5.cosh();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex2.ONE.sin();
      complex1.INF.sqrt();
      Complex complex5 = complex3.ONE.add(808.0);
      complex4.cosh();
      complex2.conjugate();
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.valueOf(808.0, (-1921.95024));
      Complex complex8 = Complex.valueOf(2.3825325965881348, (-1921.95024));
      complex5.getArgument();
      complex5.getField();
      complex8.cosh();
      complex6.toString();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.createComplex(Double.NaN, 2.3169578969248166);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.sin();
      complex4.abs();
      Complex complex6 = complex0.negate();
      complex5.conjugate();
      complex0.readResolve();
      Complex complex7 = complex6.atan();
      complex6.createComplex((-1468.81467536), 1.9106833934783936);
      Complex.valueOf(2.3169578969248166, (-1468.81467536));
      complex3.nthRoot(1);
      complex3.getArgument();
      Object object0 = new Object();
      complex4.equals(object0);
      complex2.isInfinite();
      complex4.add((-2060.151504711278));
      complex1.conjugate();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.40093350430757135, (-1406.7516751953));
      complex0.tan();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract((-9.84208));
      complex2.reciprocal();
      Complex complex3 = complex0.log();
      try { 
        complex3.nthRoot((-819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -819
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3.115616594184543E-9);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.tan();
      complex3.abs();
      Complex complex4 = complex0.negate();
      complex3.add(complex1);
      complex4.sqrt();
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = Complex.valueOf((-4922.51870255152));
      complex5.subtract((-2356.5660495348));
      complex3.sinh();
      complex4.asin();
      complex4.readResolve();
      Complex complex7 = complex6.asin();
      complex7.multiply((-1));
      Complex complex8 = Complex.INF;
      complex8.pow((-70.83443));
      Complex.valueOf(3.115616594184543E-9, 3.115616594184543E-9);
      complex2.abs();
      Complex complex9 = complex1.log();
      complex9.exp();
      Complex.valueOf(2.415329933166504);
      complex6.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(636.323649, 146.28915320820747);
      complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex(146.28915320820747, (-964.67894));
      complex3.abs();
      Complex complex4 = new Complex(146.28915320820747, (-267.04364195407));
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.conjugate();
      complex4.readResolve();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.createComplex(636.323649, (-267.04364195407));
      Complex.valueOf((-267.04364195407), 3.115616594184543E-9);
      complex5.sqrt();
      complex7.nthRoot(1);
      complex6.getArgument();
      complex1.equals(complex2);
      complex8.isInfinite();
      complex8.add(0.0);
      complex8.conjugate();
      complex0.asin();
      complex3.multiply(514.3649860724554);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.NaN.pow(0.0);
      complex3.ONE.multiply(complex1);
      complex2.ZERO.exp();
      complex3.I.hashCode();
      complex3.NaN.abs();
      Complex complex4 = complex2.I.add(complex0);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex0.pow(0.0);
      complex0.multiply((-649.20696517461));
      Complex complex7 = complex5.sqrt();
      complex2.nthRoot(1151);
      Complex complex8 = Complex.INF;
      complex8.getArgument();
      Complex complex9 = Complex.valueOf(3250.7733711, 3250.7733711);
      complex9.equals(complex6);
      complex7.isInfinite();
      Complex complex10 = complex2.add(Double.NaN);
      complex1.conjugate();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex0.NaN.sin();
      complex4.ZERO.abs();
      Complex complex6 = complex1.negate();
      complex6.INF.conjugate();
      complex0.readResolve();
      complex1.atan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.valueOf(0.0);
      complex8.divide(0.0);
      Complex complex9 = complex1.atan();
      complex8.getArgument();
      complex3.nthRoot(987);
      complex5.multiply(complex2);
      complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.tan();
      complex3.getField();
      Complex complex4 = complex0.INF.divide(0.0);
      complex4.NaN.hashCode();
      Complex complex5 = complex4.INF.add(0.0);
      Complex.valueOf(1658.90360767, 1658.90360767);
      Complex complex6 = complex1.INF.pow(complex3);
      complex3.INF.getArgument();
      Complex complex7 = complex0.createComplex(445.02324482234, 445.02324482234);
      Complex complex8 = complex7.ONE.tanh();
      complex8.INF.add(complex3);
      Complex.valueOf(3791.6184899);
      complex6.sqrt();
      Complex complex9 = complex2.log();
      complex8.readResolve();
      complex0.tanh();
      complex5.acos();
      complex9.getArgument();
      complex7.sinh();
      Complex complex10 = complex6.divide((-1258.038891845385));
      complex6.pow(complex10);
      complex4.exp();
      complex10.sqrt1z();
      complex7.exp();
      complex5.isInfinite();
      Complex complex11 = new Complex(0.7853981633974483, 0.0);
      complex11.getImaginary();
      complex2.acos();
      complex0.multiply(120);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.createComplex(1136.119281942334, 0.0);
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.ONE;
      complex3.sin();
      complex0.abs();
      complex2.negate();
      Complex complex4 = complex0.conjugate();
      complex3.readResolve();
      Complex complex5 = complex0.atan();
      complex3.createComplex(0.0, 1136.119281942334);
      complex0.INF.sin();
      Complex.valueOf(3087.304271, 337.7);
      Complex complex6 = complex0.sqrt();
      complex4.nthRoot(7);
      complex2.getArgument();
      Complex complex7 = Complex.INF;
      complex7.equals(")");
      complex6.isInfinite();
      complex4.add(645.0075780196);
      complex7.conjugate();
      Complex complex8 = Complex.NaN;
      complex8.asin();
      Complex complex9 = Complex.valueOf(0.0, (-255.4804));
      complex5.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = Complex.valueOf((-1840.35235), (-1840.35235));
      complex4.subtract(complex1);
      Complex complex5 = new Complex(473.0021259);
      complex5.multiply((-183.203947228));
      complex5.getArgument();
      Complex complex6 = complex2.tanh();
      Complex complex7 = new Complex(0.0, (-183.203947228));
      complex3.sqrt1z();
      complex2.getImaginary();
      Complex complex8 = complex4.createComplex(0.0, 0.0);
      complex8.INF.log();
      complex2.pow(complex6);
      Complex complex9 = Complex.ONE;
      complex9.getReal();
      complex7.acos();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-290.9886093225429), (-290.9886093225429));
      complex0.multiply(0.0);
      complex0.reciprocal();
      Complex.valueOf(744.786887592611, 0.5162794589996338);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
      complex0.ONE.createComplex((-853.1670979443746), (-1439.838037));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.INF.sinh();
      complex3.NaN.conjugate();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.cos();
      complex4.isNaN();
      complex4.getArgument();
      complex2.tan();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex1.divide(3192.0);
      Complex complex10 = complex1.INF.add((-853.1670979443746));
      complex9.I.nthRoot(1);
      complex6.pow(0.0);
      Complex complex11 = complex1.sqrt();
      complex11.ONE.toString();
      Complex complex12 = complex1.pow(0.0);
      complex12.ZERO.toString();
      complex3.getReal();
      Complex complex13 = complex6.tanh();
      Complex.valueOf(0.0);
      complex10.multiply(1);
      complex0.exp();
      complex0.log();
      complex13.createComplex((-853.1670979443746), 2.2590636576955473E265);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.INF.sin();
      complex0.ZERO.sqrt();
      Complex complex4 = complex3.NaN.sqrt();
      complex4.NaN.createComplex(1.8939170679975288E-131, 1.8939170679975288E-131);
      complex3.NaN.getField();
      complex0.getReal();
      complex0.hashCode();
      Complex complex5 = complex3.add(complex0);
      complex3.NaN.add(complex1);
      Complex complex6 = complex3.INF.multiply(0);
      Complex complex7 = complex5.INF.createComplex(0.0, 0.0);
      complex0.INF.log();
      Complex complex8 = complex7.NaN.multiply((-336.1878537608));
      Complex complex9 = complex5.sqrt();
      complex9.conjugate();
      complex7.NaN.subtract((-261.994));
      complex1.toString();
      Complex complex10 = complex1.cos();
      complex10.add(0.0);
      Complex complex11 = complex8.NaN.multiply(0);
      complex1.reciprocal();
      complex2.equals(complex8);
      complex3.log();
      complex0.hashCode();
      complex8.log();
      complex11.isInfinite();
      complex8.tan();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.sin();
      complex2.ZERO.asin();
      complex2.NaN.asin();
      complex2.I.conjugate();
      complex2.ONE.add(0.0);
      complex2.multiply(0.0);
      complex1.add(0.0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 2.680137967689915E-304;
      Complex complex1 = complex0.INF.multiply(2.680137967689915E-304);
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.ZERO.divide(complex1);
      int int0 = 0;
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = 410.01449;
      Complex complex0 = Complex.valueOf(410.01449);
      Complex complex1 = complex0.ONE.asin();
      complex1.ONE.negate();
      Complex complex2 = complex0.ONE.sin();
      complex2.INF.acos();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex2.sin();
      complex0.NaN.sin();
      complex4.ZERO.abs();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.INF.conjugate();
      complex0.readResolve();
      Complex complex7 = complex1.atan();
      complex5.createComplex((-1468.81467536), 0.0);
      Complex.valueOf(0.0, 0.0);
      complex1.I.sqrt();
      complex4.nthRoot(1);
      complex6.getArgument();
      complex3.equals(complex7);
      complex1.isInfinite();
      complex4.add(0.0);
      complex0.conjugate();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2721.86398));
      Complex complex2 = Complex.valueOf(2593.56314445975, 2593.56314445975);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.add((-2721.86398));
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex0.I.tanh();
      complex6.NaN.asin();
      complex1.isNaN();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex1.ZERO.pow((-2721.86398));
      complex8.NaN.pow((-20.0));
      complex3.multiply(complex1);
      complex4.getImaginary();
      complex0.abs();
      complex8.NaN.getArgument();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex8.multiply(complex7);
      complex11.INF.exp();
      Complex complex12 = complex11.NaN.add(complex2);
      complex9.acos();
      complex5.subtract(complex0);
      complex1.sinh();
      complex9.toString();
      complex5.getReal();
      complex10.acos();
      complex4.tan();
      Complex.valueOf(2593.56314445975, (-2721.86398));
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.tanh();
      complex3.divide(0.0);
      Complex complex4 = Complex.valueOf(2.0, 2.0);
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.NaN.exp();
      complex7.ZERO.subtract(complex4);
      complex6.INF.createComplex(0.0, 2.0);
      Complex complex8 = complex4.multiply(421);
      complex1.log();
      Complex complex9 = complex0.subtract(complex8);
      complex9.divide(complex0);
      Complex.valueOf(0.0, 0.0);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.ONE.getArgument();
      complex0.equals((Object) null);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract((-1954.0));
      complex2.INF.readResolve();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = Complex.valueOf(3067.304271, 1.0);
      complex4.NaN.createComplex(0.0, (-1150.780664));
      Complex complex5 = complex0.subtract(3067.304271);
      complex0.getArgument();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex3.multiply(138);
      complex7.INF.subtract(complex4);
      complex5.getReal();
      complex0.ONE.log();
      complex0.acos();
      Complex complex8 = complex3.createComplex(138, (-3087.304271));
      complex6.I.cosh();
      complex8.NaN.log();
      Complex complex9 = complex0.createComplex(3.141592653589793, 153.98718622);
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.cos();
      complex9.isInfinite();
      complex11.negate();
      complex5.abs();
      complex1.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(713.4008281852);
      complex1.reciprocal();
      complex0.getArgument();
      Complex complex2 = Complex.ZERO;
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-2060.151504711278);
      Complex complex0 = new Complex((-2060.151504711278), (-3409.922356));
      Complex complex1 = complex0.tan();
      complex0.I.tanh();
      complex1.INF.subtract((-9.84208));
      complex0.I.reciprocal();
      complex0.INF.log();
      int int0 = (-819);
      try { 
        complex1.nthRoot((-819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -819
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.ONE.sinh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.INF.log();
      complex4.ZERO.cosh();
      complex0.cosh();
      Complex complex5 = complex0.conjugate();
      complex5.tan();
      Complex complex6 = Complex.valueOf((-1921.95024), 0.0);
      Complex complex7 = Complex.valueOf(0.0, 2.3825325965881348);
      complex7.ONE.negate();
      complex0.getArgument();
      complex6.getField();
      complex7.cosh();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.tanh();
      Complex complex1 = complex0.exp();
      complex1.getReal();
      Complex complex2 = complex1.sqrt();
      complex2.NaN.reciprocal();
      Complex complex3 = complex2.multiply((-2856.168339696));
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-610.0251161988135));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.ZERO.getField();
      complex1.INF.hashCode();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex3.INF.multiply((-1009));
      Complex complex5 = complex3.ZERO.multiply(complex4);
      complex5.multiply((-1155.51925194346));
      Complex complex6 = complex4.add((-7.897146442236022E215));
      complex1.asin();
      complex3.conjugate();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2091.790759007683);
      Complex complex1 = complex0.sinh();
      complex1.NaN.cos();
      Complex complex2 = complex0.tan();
      complex2.NaN.tanh();
      complex1.I.createComplex(2091.790759007683, 2091.790759007683);
      Complex complex3 = complex2.negate();
      complex1.ZERO.sqrt();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.add(complex1);
      complex5.ZERO.hashCode();
      complex3.multiply(336);
      Complex.valueOf(1139.2928792929988, (double) 336);
      complex0.acos();
      complex4.sin();
      complex1.createComplex(0.0, 1.0577249492414076E-176);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1436.1896165206429, 1436.1896165206429);
      Complex complex1 = complex0.ZERO.exp();
      Complex.valueOf((-2926.1643));
      Complex complex2 = complex0.NaN.pow(0.0);
      int int0 = (-369);
      Complex complex3 = complex1.I.multiply((-369));
      complex3.I.asin();
      complex3.I.atan();
      Complex complex4 = complex0.subtract((-1399.275015783267));
      Complex complex5 = complex1.add((double) (-369));
      complex5.ONE.getField();
      complex4.getReal();
      complex4.multiply(331.5176);
      complex2.readResolve();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.tan();
      complex3.getField();
      Complex complex4 = complex0.INF.divide(0.0);
      complex4.NaN.hashCode();
      complex4.INF.add(0.0);
      Complex.valueOf(1658.90360767, 1658.90360767);
      complex1.INF.pow(complex3);
      complex3.INF.getArgument();
      Complex complex5 = complex0.createComplex(445.02324482234, 445.02324482234);
      Complex complex6 = complex5.ONE.tanh();
      complex6.INF.add(complex3);
      complex6.ZERO.tanh();
      complex6.sqrt();
      Complex complex7 = Complex.valueOf(9.054612259832416E-156);
      complex1.sin();
      complex6.NaN.cos();
      complex0.ONE.toString();
      complex1.equals(complex5);
      Complex complex8 = complex6.multiply((-1514));
      complex5.divide(1598.45362604819);
      complex8.hashCode();
      Complex complex9 = Complex.NaN;
      complex7.divide(complex9);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.divide(0.0);
      complex1.sin();
      Complex complex3 = complex2.NaN.tanh();
      complex3.I.getField();
      complex1.ONE.getArgument();
      Complex complex4 = complex0.createComplex((-139.9), (-1.605251622332555E-8));
      complex4.ONE.acos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex6.ONE.acos();
      complex9.I.tanh();
      complex5.getField();
      complex6.hashCode();
      complex3.tan();
      complex2.ZERO.conjugate();
      complex8.multiply(1197);
      complex6.sqrt1z();
      complex5.cos();
      complex0.I.cos();
      complex1.add(1.0);
      complex2.divide(complex6);
      Complex.valueOf(2361.710215886, 0.0);
      complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.NaN.pow(0.0);
      Complex complex4 = complex3.ONE.multiply(complex1);
      Complex complex5 = complex2.ZERO.exp();
      complex3.I.hashCode();
      complex3.NaN.abs();
      Complex complex6 = complex2.I.add(complex0);
      complex6.INF.cos();
      complex0.pow(0.0);
      Complex complex7 = complex0.multiply((-649.20696517461));
      complex7.INF.divide((-649.20696517461));
      complex3.atan();
      complex5.getArgument();
      complex7.nthRoot(1);
      complex2.multiply(complex4);
      complex1.divide((-649.20696517461));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-795.9587236283), 0.0);
      Complex complex1 = complex0.INF.sqrt();
      complex0.getField();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.NaN.pow((-795.9587236283));
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.ONE.sinh();
      complex1.I.multiply(complex3);
      complex1.getArgument();
      Complex complex6 = complex1.NaN.add((-707.586833818289));
      Complex complex7 = complex1.reciprocal();
      complex7.abs();
      Complex complex8 = complex7.acos();
      complex8.ONE.subtract((-1353.5844290305));
      complex8.NaN.tanh();
      complex6.getArgument();
      Complex complex9 = complex2.asin();
      complex3.subtract(2717.87158398228);
      complex9.abs();
      Complex complex10 = complex7.tan();
      Complex.valueOf((-707.586833818289), 2545.01303910466);
      complex2.multiply(1994);
      complex5.getImaginary();
      complex10.sqrt();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-792.0450541793144));
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = Complex.valueOf((-792.0450541793144));
      Complex complex4 = complex2.INF.atan();
      complex4.I.tanh();
      Complex complex5 = complex0.ONE.add(0.0);
      Complex complex6 = complex5.NaN.divide(complex0);
      Complex complex7 = complex0.asin();
      complex0.subtract(complex5);
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex8.INF.divide(0.0);
      complex8.NaN.exp();
      complex9.ZERO.sinh();
      Complex complex10 = complex7.I.pow(2.0);
      complex10.reciprocal();
      Complex complex11 = complex9.ZERO.add(2.0);
      complex11.NaN.subtract(complex1);
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex6.sqrt();
      complex13.ZERO.log();
      complex13.NaN.readResolve();
      complex7.tanh();
      Complex complex14 = complex12.acos();
      complex12.NaN.getArgument();
      Complex complex15 = complex14.sinh();
      complex10.divide(2.0);
      complex9.pow(complex15);
      complex8.exp();
      Complex complex16 = complex10.sqrt1z();
      complex16.exp();
      complex8.isInfinite();
      complex7.getImaginary();
      complex3.acos();
      complex13.multiply(120);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-445.1733628288), (-3790.125));
      complex0.hashCode();
      complex0.atan();
      complex0.getField();
      Complex complex1 = complex0.sinh();
      complex1.NaN.negate();
      Complex complex2 = Complex.valueOf((-445.1733628288), (-3790.125));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex1.multiply((-1673));
      complex5.I.tanh();
      Complex.valueOf(3.047601928063002E193);
      complex4.atan();
      complex2.readResolve();
      complex5.createComplex(3.047601928063002E193, 0.0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.subtract(289.65);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.pow((-2220.53879));
      Complex complex5 = Complex.I;
      complex3.sinh();
      complex4.NaN.multiply(complex5);
      complex4.getField();
      complex2.isNaN();
      complex1.atan();
      Complex complex6 = new Complex(289.65);
      complex1.subtract(complex6);
      complex6.sqrt1z();
      complex3.isInfinite();
      Complex complex7 = complex1.sinh();
      Complex.valueOf(2922.746292, 2922.746292);
      complex7.cos();
      complex0.createComplex(1.0010529668998112E38, 2922.746292);
      complex4.toString();
      Object object0 = new Object();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2386.403321955914));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.sin();
      complex2.NaN.subtract(complex0);
      complex2.ONE.asin();
      Complex complex3 = complex0.tanh();
      double double0 = (-3437.01064649771);
      complex0.ONE.subtract((-3437.01064649771));
      Complex complex4 = complex3.ZERO.exp();
      complex4.NaN.sin();
      double double1 = 0.0;
      try { 
        complex0.ONE.nthRoot((-746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -746
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-570.4299416202217));
      Complex complex1 = complex0.I.multiply(37);
      Complex complex2 = complex0.INF.add(complex1);
      complex2.ONE.multiply(1.0);
      Complex complex3 = complex0.divide((-570.4299416202217));
      complex3.ONE.createComplex(0.0, 0.0);
      complex3.add((double) 37);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.createComplex(0.0, 20.0);
      complex0.NaN.getArgument();
      Complex complex2 = complex0.asin();
      complex2.INF.tanh();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex4.I.sinh();
      complex0.I.conjugate();
      complex1.subtract(complex0);
      complex3.toString();
      try { 
        complex5.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.pow(Double.NaN);
      complex2.I.hashCode();
      Complex complex3 = complex2.subtract(0.47402387857437134);
      complex0.NaN.divide(complex1);
      complex3.toString();
      Complex complex4 = complex3.ZERO.subtract(complex2);
      complex4.NaN.cos();
      Complex complex5 = complex3.createComplex(0.47402387857437134, (-218.3850721878748));
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      complex1.ONE.conjugate();
      complex0.ZERO.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      complex3.ZERO.getField();
      complex1.hashCode();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.ONE.subtract(complex2);
      Complex complex4 = complex0.multiply(0.0);
      complex4.getArgument();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex5.I.sqrt1z();
      complex4.getImaginary();
      Complex complex8 = complex7.createComplex(2040.1, 2040.1);
      complex8.pow(complex4);
      complex0.getReal();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.conjugate();
      complex1.I.tan();
      complex1.INF.subtract(20.0);
      Complex complex2 = complex1.ZERO.atan();
      complex1.negate();
      Complex complex3 = complex2.ONE.subtract(20.0);
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = complex0.sin();
      complex5.ZERO.getField();
      Complex complex6 = complex0.ONE.sqrt();
      complex6.I.sin();
      complex1.divide((-2704.8794933));
      complex6.readResolve();
      Complex complex7 = complex5.I.createComplex(0.0, 0.0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex0.multiply(complex8);
      Complex complex9 = complex0.tanh();
      complex9.INF.cos();
      Complex complex10 = complex0.add(complex2);
      complex10.tan();
      complex7.getReal();
      complex3.multiply(complex4);
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.I.conjugate();
      complex2.ONE.toString();
      double double1 = 20.0;
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex3.INF.sin();
      complex4.I.sinh();
      Complex complex5 = complex1.INF.createComplex(20.0, (-20.0));
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.I.negate();
      complex6.INF.add(complex5);
      int int0 = (-5672);
      try { 
        complex7.I.nthRoot((-5672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,672
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.341336085949317E-7));
      Complex complex1 = complex0.NaN.createComplex((-9.944393412663547E-8), (-1.341336085949317E-7));
      complex0.INF.getArgument();
      complex0.readResolve();
      complex0.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.divide((-1.341336085949317E-7));
      complex2.INF.reciprocal();
      complex0.getImaginary();
      complex0.isNaN();
      Complex complex4 = complex2.ZERO.sqrt1z();
      complex4.NaN.sqrt1z();
      complex4.INF.exp();
      complex4.cosh();
      Complex complex5 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.tan();
      complex6.I.pow(621.0461757);
      Complex complex7 = complex2.divide(0.0);
      complex7.I.log();
      complex7.hashCode();
      complex5.multiply(complex1);
      complex7.hashCode();
      Complex complex8 = Complex.ZERO;
      complex0.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(4342.848, 0.0);
      Complex complex2 = complex0.asin();
      complex2.multiply(0.0);
      Complex complex3 = complex2.I.conjugate();
      complex3.I.log();
      Complex.valueOf(0.0);
      complex0.ONE.getArgument();
      Complex complex4 = complex0.subtract(9.252840189663807E-148);
      Complex complex5 = complex4.multiply(0.0);
      complex4.pow(3137.8688485);
      Complex complex6 = complex0.log();
      complex6.log();
      Complex complex7 = complex0.log();
      complex6.subtract(complex3);
      complex5.acos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.INF.tanh();
      complex9.ZERO.abs();
      complex8.sin();
      complex0.multiply(complex1);
      Complex complex10 = complex8.multiply((-887));
      complex10.getArgument();
      Complex.valueOf(0.5936288833618164, (-3070.4861029058));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(691.94906329);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      complex0.I.sin();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.toString();
      complex0.getField();
      complex0.I.getField();
      Complex complex1 = complex0.cosh();
      complex1.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf((-1322.291));
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.ONE;
      complex6.I.multiply(complex7);
      Complex complex8 = complex1.asin();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex2.NaN.atan();
      complex0.getImaginary();
      complex2.readResolve();
      Complex complex10 = complex9.multiply(Double.NaN);
      Complex complex11 = complex10.INF.atan();
      assertSame(complex11, complex6);
      
      Complex complex12 = complex5.log();
      Complex complex13 = complex12.ZERO.divide(5954.69264691);
      complex13.I.conjugate();
      Complex complex14 = complex1.multiply(Double.NaN);
      Complex complex15 = complex13.conjugate();
      Complex complex16 = complex15.tan();
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      
      complex9.multiply(Double.NaN);
      Complex complex17 = complex4.asin();
      complex9.negate();
      assertSame(complex9, complex14);
      assertEquals((-1322.291), complex2.getReal(), 0.01);
      
      complex12.log();
      double double0 = complex17.getReal();
      assertEquals(1.5707963267948966, double0, 0.01);
      assertEquals(0.9534903170187385, complex3.getReal(), 0.01);
      
      double double1 = complex1.getArgument();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }
}
