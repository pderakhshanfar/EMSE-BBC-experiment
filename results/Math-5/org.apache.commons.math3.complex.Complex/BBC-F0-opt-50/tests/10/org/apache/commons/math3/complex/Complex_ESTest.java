/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:03:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((double) 236, Double.POSITIVE_INFINITY);
      complex1.multiply(236);
      Complex complex2 = complex1.cosh();
      complex2.INF.nthRoot(1847);
      Complex.valueOf((double) 236, 1.0);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(12.486282727368748, 12.486282727368748);
      Complex complex1 = complex0.subtract(2.24669039465627E188);
      complex0.divide(12.486282727368748);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 20.0;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      double double1 = 20.0;
      Complex complex2 = Complex.valueOf(3797.456157904066, 20.0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = Complex.ZERO;
      complex3.log();
      complex1.tanh();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.237894048535414E-172, 20.0);
      Complex complex2 = Complex.NaN;
      complex2.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-4572.101663463032), (-2105.966225));
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-4572.101663463032), Double.POSITIVE_INFINITY);
      complex2.multiply((-2105.966225));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.INF.subtract(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(704.24, 704.24);
      complex0.tan();
      Complex complex1 = Complex.valueOf(704.24, Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      Complex.valueOf(704.24, 704.24);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract((-2402.0));
      Complex complex1 = new Complex(1.800187110900879, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1487.667070963573));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.conjugate();
      complex2.ONE.toString();
      Complex complex3 = complex1.add(2449.398723357724);
      Complex complex4 = complex1.divide(2449.398723357724);
      complex0.ONE.conjugate();
      Complex complex5 = complex2.log();
      Complex complex6 = complex3.INF.sin();
      complex6.ONE.negate();
      Complex.valueOf(0.06337818503379822, 2.78157486181875);
      Complex complex7 = complex5.acos();
      complex1.ONE.toString();
      complex7.NaN.conjugate();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.tanh();
      complex5.ONE.tan();
      Complex complex11 = complex10.I.pow(Double.POSITIVE_INFINITY);
      complex10.ONE.negate();
      Complex complex12 = complex3.sqrt1z();
      complex12.I.add(complex4);
      complex7.NaN.add(311.80523);
      complex8.nthRoot(1277);
      complex4.asin();
      complex0.tan();
      complex11.cosh();
      complex8.multiply((-2931.75008));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(704.24, 704.24);
      Complex complex1 = complex0.tan();
      complex1.I.abs();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf(1888.078351703, 0.5403023058681398);
      complex5.negate();
      complex2.sqrt1z();
      Complex complex6 = complex3.subtract(5.2614409704305464E54);
      complex4.divide(Double.POSITIVE_INFINITY);
      complex6.acos();
      complex5.subtract(Double.POSITIVE_INFINITY);
      complex3.multiply(848);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.I.getArgument();
      Complex complex2 = complex0.I.log();
      Complex complex3 = new Complex((-944.3276031242816), (-944.3276031242816));
      Complex complex4 = complex3.ZERO.log();
      complex2.abs();
      Complex complex5 = Complex.ONE;
      complex2.multiply(1.5707963267948966);
      complex1.multiply((-556.9998282665475));
      complex4.sqrt();
      Complex complex6 = Complex.INF;
      complex6.reciprocal();
      complex5.multiply((-944.3276031242816));
      complex5.sin();
      Complex complex7 = Complex.INF;
      complex7.tanh();
      Complex.valueOf((-4613.351329216186));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-15.53124448), (-15.53124448));
      Complex complex1 = complex0.tan();
      complex1.abs();
      complex1.atan();
      complex1.negate();
      Complex complex2 = complex1.sqrt1z();
      complex2.subtract(5.2614409704305464E54);
      complex1.divide(827.6327315189);
      complex2.acos();
      Complex complex3 = Complex.valueOf((-15.53124448));
      complex3.NaN.sin();
      complex1.subtract(Double.NaN);
      complex2.sqrt1z();
      Complex complex4 = Complex.NaN;
      complex4.multiply(2.0);
      Complex complex5 = complex2.sqrt();
      complex5.ONE.abs();
      Complex complex6 = complex5.reciprocal();
      complex6.multiply((-2975.4209371373145));
      Complex complex7 = Complex.INF;
      Complex complex8 = new Complex((-15.53124448), (-2975.4209371373145));
      complex8.tanh();
      Complex.valueOf((-965.7110743901691));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
      Complex complex1 = Complex.NaN;
      complex0.getField();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.subtract(3.023383151402969E307);
      Complex complex6 = new Complex((-6258.89), 3.023383151402969E307);
      Complex complex7 = complex1.cos();
      complex7.sqrt1z();
      Complex complex8 = complex1.atan();
      Complex complex9 = Complex.NaN;
      complex4.conjugate();
      Complex complex10 = Complex.INF;
      complex8.sinh();
      complex8.log();
      complex1.add(3.023383151402969E307);
      complex1.getArgument();
      complex3.conjugate();
      complex8.add(154.0630395712);
      complex6.atan();
      complex5.asin();
      Complex complex11 = Complex.NaN;
      complex6.hashCode();
      Complex complex12 = Complex.valueOf(1530.354);
      complex12.multiply(949.47659516);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.pow(complex0);
      complex3.reciprocal();
      Complex.valueOf(0.0);
      complex3.log();
      complex4.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.9485332059991), (-841.9485332059991));
      complex0.log();
      Complex complex1 = complex0.add(Double.NaN);
      complex0.getArgument();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.add(Double.NaN);
      Complex complex4 = new Complex(154.0630395712, (-1.0));
      Complex complex5 = complex4.atan();
      complex5.asin();
      Complex complex6 = Complex.NaN;
      complex2.hashCode();
      complex3.multiply(257.635720745944);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(307.2, (-1793.0));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.multiply(17);
      Complex complex4 = complex3.NaN.multiply(749);
      complex4.multiply((-3408.0869));
      Complex complex5 = complex4.I.createComplex((-1166.4135), (-1793.0));
      Complex complex6 = complex5.ONE.negate();
      complex6.I.sqrt();
      Complex complex7 = complex4.INF.sinh();
      Complex complex8 = complex0.multiply((-2170.82));
      complex6.ZERO.toString();
      complex8.pow(1985.7727081430228);
      Complex complex9 = complex2.atan();
      Complex complex10 = complex8.subtract(complex7);
      complex3.getField();
      Complex complex11 = complex7.asin();
      complex10.getField();
      complex10.reciprocal();
      complex11.reciprocal();
      complex9.pow(complex6);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1985.7727081430228, 1985.7727081430228);
      Complex complex1 = complex0.NaN.reciprocal();
      complex0.readResolve();
      complex0.getField();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.NaN.pow(complex1);
      complex2.subtract(1985.7727081430228);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex2.ONE.cos();
      Complex complex6 = complex0.atan();
      complex5.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.sinh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.ONE;
      complex10.multiply(1985.7727081430228);
      Complex complex11 = complex6.multiply(Double.NaN);
      complex11.tan();
      complex8.add((-2.0));
      Complex.valueOf((-2.0), 1.557407724654902);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.INF.tan();
      complex1.getReal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.negate();
      complex3.I.pow(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.log();
      complex5.tanh();
      complex3.toString();
      complex4.reciprocal();
      Complex complex6 = new Complex(0.0);
      complex6.hashCode();
      complex5.getArgument();
      Complex complex7 = complex6.conjugate();
      complex7.add(Double.POSITIVE_INFINITY);
      complex4.atan();
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex5.asin();
      complex1.hashCode();
      Complex.valueOf(0.0, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.reciprocal();
      complex1.abs();
      complex0.hashCode();
      complex2.getArgument();
      Complex complex3 = complex2.conjugate();
      complex0.add(614.100086);
      Complex complex4 = complex2.atan();
      Complex.valueOf((-1.6166170913368169E-12), 0.0);
      Complex complex5 = complex2.multiply((-1031.906374216));
      complex3.asin();
      complex2.hashCode();
      Complex complex6 = complex5.pow(5.942970525427603E-4);
      complex4.sqrt();
      Complex complex7 = complex2.sqrt1z();
      complex4.divide(complex7);
      Complex complex8 = Complex.valueOf((-1031.906374216), Double.POSITIVE_INFINITY);
      complex5.multiply(complex8);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      complex0.divide((-2.552517201762272E-128));
      Complex complex1 = new Complex(Double.NaN, 0.7853981633974483);
      complex1.divide(5169.949);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(5169.949);
      Complex complex1 = new Complex(8.807317972703288E-7, 5169.949);
      complex1.tan();
      Complex complex2 = complex0.asin();
      complex2.isNaN();
      complex2.reciprocal();
      Complex.valueOf(8.807317972703288E-7, (-20.0));
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex(5169.949);
      Complex complex3 = complex2.tan();
      complex3.getReal();
      complex0.pow(complex2);
      Complex complex4 = complex1.negate();
      complex3.pow(complex2);
      Complex.valueOf((-2.0270860273032123));
      Complex complex5 = complex3.log();
      complex5.cosh();
      Complex complex6 = complex0.tanh();
      complex1.toString();
      complex6.pow(complex1);
      complex2.abs();
      complex4.multiply((-475.255463189));
      complex2.tanh();
      complex2.acos();
      complex5.multiply(0);
      Complex complex7 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      complex0.ONE.multiply((-391));
      Complex complex3 = complex1.negate();
      complex3.pow(complex2);
      Complex complex4 = Complex.valueOf(0.5301685333251953);
      complex4.INF.createComplex(Double.POSITIVE_INFINITY, 37.0);
      Complex complex5 = complex4.log();
      complex0.tanh();
      complex1.toString();
      complex5.pow(complex3);
      complex2.abs();
      Complex complex6 = new Complex((-20.0), 1237.3183);
      complex6.NaN.exp();
      complex6.multiply((-20.0));
      complex0.acos();
      Complex complex7 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals((Object) null);
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(0.4161468365471423, Double.POSITIVE_INFINITY);
      complex0.toString();
      complex2.readResolve();
      Complex.valueOf(0.0019047601770882747);
      complex1.pow(complex0);
      Complex complex3 = Complex.ZERO;
      complex3.atan();
      try { 
        complex0.nthRoot((-1312145731));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,312,145,731
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1654.6);
      complex0.ZERO.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(0.0, (-2511.0));
      complex2.isInfinite();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.asin();
      complex3.isNaN();
      complex5.reciprocal();
      Complex complex6 = Complex.valueOf((-1147.7578974));
      complex5.multiply(complex6);
      complex4.divide(1654.6);
      Complex.valueOf(1654.6, 0.18654438853263855);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.3299041828502), (-841.3299041828502));
      Complex complex1 = complex0.INF.subtract((-841.3299041828502));
      complex0.INF.nthRoot(1);
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.pow((double) 1);
      Complex complex4 = complex2.pow((-841.3299041828502));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.multiply(1);
      complex3.equals(complex6);
      Complex complex7 = complex5.cos();
      complex1.isInfinite();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex0.asin();
      complex9.isNaN();
      complex7.reciprocal();
      Complex complex10 = complex2.multiply(complex3);
      complex8.divide((-317.0));
      Complex.valueOf((double) (-1), (-20.0));
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-271.7823953129));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.conjugate();
      complex2.abs();
      complex2.NaN.tan();
      complex3.nthRoot(1);
      complex3.getArgument();
      complex0.sin();
      complex5.nthRoot(2309);
      complex4.getImaginary();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-0.9999996900347643));
      complex1.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals((Object) null);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.multiply(1050);
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex4 = complex2.cos();
      Complex complex5 = Complex.valueOf(0.18654438853263855, (double) 1050);
      complex5.isInfinite();
      Complex complex6 = complex0.tan();
      complex0.asin();
      complex2.isNaN();
      complex1.reciprocal();
      complex3.multiply(complex4);
      complex6.divide((double) 1050);
      Complex.valueOf((-4315.3498), 0.18654438853263855);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex1.pow(complex2);
      complex4.abs();
      Complex complex5 = complex0.multiply(2816.2922224912686);
      Complex complex6 = complex5.tan();
      complex3.hashCode();
      complex0.conjugate();
      complex3.sqrt();
      complex6.atan();
      complex6.getReal();
      complex4.tan();
      complex6.isInfinite();
      Complex.valueOf(3427.63, 0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.3299041828502), (-841.3299041828502));
      Complex complex1 = Complex.valueOf((-841.3299041828502));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.negate();
      complex1.pow(complex0);
      Complex.valueOf(401.244332870441);
      Complex complex4 = complex3.log();
      complex4.toString();
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex4.multiply((-384.2851));
      complex2.tan();
      complex0.hashCode();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex7.atan();
      complex6.getReal();
      complex8.tan();
      complex9.isInfinite();
      Complex.valueOf((-1584.1243173), (-2721.337012603137));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tan();
      complex1.getReal();
      Complex complex3 = complex2.subtract(1.0);
      complex1.nthRoot(1);
      Complex complex4 = Complex.valueOf(Double.NaN, 1.0);
      complex4.getArgument();
      complex4.sin();
      complex1.nthRoot(971);
      complex0.getImaginary();
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1654.6);
      complex0.ZERO.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.valueOf(1654.6);
      complex0.pow(complex2);
      Complex complex3 = new Complex(20.0, 1654.6);
      complex3.sqrt();
      complex2.equals("(0.0, 0.0)");
      Complex complex4 = Complex.NaN;
      complex2.divide(complex4);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tan();
      complex1.getReal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.negate();
      complex4.I.pow(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.tanh();
      complex4.toString();
      complex1.pow(complex3);
      complex7.abs();
      complex2.multiply((-475.255463189));
      complex1.tan();
      complex1.hashCode();
      complex5.conjugate();
      complex0.sqrt();
      complex7.atan();
      complex7.getReal();
      complex2.tan();
      complex4.isInfinite();
      Complex.valueOf(0.0, (-1230.0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(5169.949);
      complex0.negate();
      Complex complex1 = Complex.valueOf(5169.949, 5169.949);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1654.6);
      complex0.ZERO.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.valueOf(1654.6);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.atan();
      complex2.divide(complex1);
      complex4.tan();
      complex3.add((-615.7627569));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isNaN();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.subtract(complex1);
      complex3.sqrt();
      complex0.equals(complex2);
      complex0.divide(complex2);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.add(6.3);
      complex0.INF.acos();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.conjugate();
      complex0.ONE.readResolve();
      complex0.divide(6.3);
      Complex complex3 = new Complex((-20.0), 6.3);
      complex3.getArgument();
      Complex complex4 = complex3.divide(complex2);
      complex4.divide((-1948.3209359622574));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.exp();
      complex2.NaN.add(0.0);
      complex0.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.multiply(0);
      complex4.multiply((-2863.2));
      Complex complex5 = Complex.INF;
      complex5.cos();
      Complex complex6 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.3299041828502), (-841.3299041828502));
      Complex complex1 = complex0.INF.subtract((-841.3299041828502));
      complex0.INF.nthRoot(1);
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.divide((-841.3299041828502));
      complex1.getArgument();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.divide((-2523.425016892301));
      complex4.multiply(complex3);
      complex4.NaN.reciprocal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.4926934838294983, 0.4926934838294983);
      complex0.toString();
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(1654.6);
      Complex complex2 = complex0.pow(complex1);
      complex2.atan();
      // Undeclared exception!
      complex1.nthRoot(1073697086);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1408.12, 1408.12);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      complex0.add(1408.12);
      Complex complex3 = Complex.I;
      complex3.createComplex((-20.0), Double.NaN);
      complex2.tanh();
      complex0.acos();
      Complex.valueOf(1408.12);
      complex1.multiply((-382));
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      complex0.add((-1.426262681506497E-7));
      Complex complex3 = complex1.createComplex(0.0, 20.0);
      complex2.tanh();
      complex2.acos();
      Complex.valueOf(2250.0);
      complex3.multiply(690);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.exp();
      complex2.ZERO.multiply(complex0);
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex0.pow(complex2);
      complex2.abs();
      Complex complex5 = complex2.multiply((-20.0));
      complex5.tan();
      complex5.hashCode();
      complex4.conjugate();
      complex3.sqrt();
      Complex complex6 = new Complex((-3097.0), 2448.7617515235);
      complex6.atan();
      complex1.getReal();
      complex0.tan();
      complex0.isInfinite();
      Complex.valueOf(154.68387827979, (-20.0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tan();
      complex1.getReal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.add(complex2);
      complex4.pow(0.0);
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex6 = complex1.sqrt();
      complex0.sqrt1z();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.log();
      Complex complex9 = complex7.acos();
      complex3.add(complex0);
      complex5.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex6.multiply(1260);
      Complex complex10 = complex6.cos();
      Complex complex11 = Complex.valueOf((-1753.8897074511415), (double) 1260);
      complex10.sqrt();
      complex4.cosh();
      complex9.sqrt();
      Complex complex12 = complex5.negate();
      complex12.sqrt();
      complex11.pow(complex8);
      Complex complex13 = Complex.valueOf(0.0);
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 1.9636495113372803);
      Complex complex1 = complex0.acos();
      complex1.ZERO.asin();
      complex1.ONE.createComplex(1.9636495113372803, 2241.95905131);
      complex1.I.abs();
      Complex complex2 = complex1.tan();
      complex2.NaN.multiply(2185.342599);
      complex0.multiply((-2.327375671320742E-9));
      Complex complex3 = Complex.ZERO;
      complex3.pow(complex1);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-271.7823953129));
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply((-1357));
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.pow((double) (-1357));
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.acos();
      Complex complex9 = Complex.I;
      Complex complex10 = complex5.add(complex9);
      complex7.readResolve();
      complex1.sin();
      complex8.multiply((-2266));
      complex8.cos();
      Complex.valueOf(0.0, (-271.7823953129));
      complex4.sqrt();
      complex3.cosh();
      complex7.sqrt();
      complex2.negate();
      complex4.pow(complex10);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.3299041828502), (-841.3299041828502));
      complex0.INF.subtract((-841.3299041828502));
      complex0.INF.nthRoot(1);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.divide((-841.3299041828502));
      complex0.getArgument();
      complex1.divide(complex0);
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1556.95, 1556.95);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.pow((-359.4675557586));
      Complex complex3 = complex0.NaN.reciprocal();
      complex0.abs();
      Complex complex4 = Complex.valueOf(0.0, 857.1569612907599);
      Complex complex5 = complex4.NaN.add(0.0);
      complex5.ONE.sinh();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.sqrt();
      complex6.toString();
      complex5.divide(complex7);
      complex7.equals(complex5);
      complex6.isInfinite();
      complex2.multiply(1274);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1762.981), (-1762.981));
      Complex complex1 = Complex.valueOf(2031.7268084, 2031.7268084);
      complex0.toString();
      Complex complex2 = complex1.negate();
      complex2.NaN.subtract((-1762.981));
      Complex complex3 = complex2.NaN.sqrt();
      complex0.nthRoot(1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.subtract((-1762.981));
      complex5.equals(complex0);
      complex5.tan();
      complex5.isNaN();
      complex3.tan();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.reciprocal();
      complex0.getArgument();
      complex0.abs();
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = complex0.createComplex(1.2204032949639917E39, 1.2204032949639917E39);
      complex5.hashCode();
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.log();
      complex7.ZERO.subtract(0.0);
      Complex.valueOf(0.0, 6.283185307179586);
      Complex complex8 = complex5.pow(0.5635144710540771);
      Complex complex9 = complex8.ZERO.add(complex3);
      complex9.INF.divide(complex2);
      complex0.getField();
      complex2.createComplex(0.2881702184677124, 1.2204032949639917E39);
      Complex complex10 = complex1.negate();
      complex2.negate();
      complex8.divide(complex5);
      complex10.isInfinite();
      complex6.isNaN();
      complex8.cosh();
      complex4.sinh();
      complex0.getField();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = (-2708.9651);
      Complex complex0 = new Complex((-2708.9651), (-2708.9651));
      Complex.valueOf((-2708.9651));
      Complex complex1 = complex0.pow((-2708.9651));
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4352343082427979, 1.4352343082427979);
      complex0.reciprocal();
      Complex complex1 = complex0.I.pow(1.4352343082427979);
      Complex complex2 = complex0.ZERO.log();
      complex2.I.sqrt1z();
      Complex complex3 = complex1.I.sqrt();
      complex0.sinh();
      complex0.equals(complex1);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1654.6);
      complex0.ZERO.toString();
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(1654.6);
      Complex complex2 = complex0.pow(complex1);
      complex2.atan();
      complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2991.0), (-2991.0));
      Complex complex1 = complex0.exp();
      complex0.createComplex((-2991.0), (-2991.0));
      complex1.INF.exp();
      complex0.getReal();
      complex1.asin();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3153.921275));
      Complex complex1 = complex0.subtract(0.0);
      complex1.equals(complex0);
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex0.ONE.asin();
      complex4.INF.tan();
      complex1.multiply((-2400));
      Complex complex5 = complex0.sin();
      complex5.I.tan();
      complex2.createComplex(0.0, 1257.2);
      Complex complex6 = complex2.ONE.subtract(1687.8071);
      Complex complex7 = complex6.ZERO.cosh();
      complex7.conjugate();
      complex2.nthRoot(3354);
      complex6.I.subtract(complex0);
      Complex complex8 = complex1.multiply(complex3);
      complex8.INF.getArgument();
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex9.ONE.atan();
      complex0.divide(0.0);
      complex6.subtract(complex1);
      complex0.sqrt1z();
      complex6.getArgument();
      Complex.valueOf(1257.2, (double) 3354);
      complex10.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.log();
      complex2.ONE.getArgument();
      complex2.toString();
      Complex complex3 = complex2.pow(271.018295710991);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.I.multiply((-2809.69458268));
      complex4.equals(complex3);
      complex3.log();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex4.INF.divide((-2809.69458268));
      complex7.INF.multiply(complex2);
      complex6.abs();
      complex6.divide(0.0);
      Complex.valueOf((-2809.69458268));
      complex2.log();
      complex3.sqrt1z();
      complex7.multiply((-1.0681886149151956E-7));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.pow(3055.13878);
      complex1.NaN.reciprocal();
      Complex complex3 = complex0.I.pow(3055.13878);
      complex3.ZERO.cos();
      Complex complex4 = complex2.I.subtract(complex0);
      complex1.INF.tan();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ZERO.pow(complex1);
      complex6.tanh();
      complex1.isNaN();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex0.asin();
      complex5.ZERO.negate();
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.INF.asin();
      complex8.cos();
      complex5.hashCode();
      Complex complex11 = complex7.sin();
      complex0.NaN.sinh();
      complex11.NaN.multiply(1316.796480082611);
      complex4.pow(0.0);
      complex10.ONE.sqrt();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      complex1.getArgument();
      complex12.exp();
      complex10.cosh();
      complex2.getArgument();
      complex9.add(complex6);
      Complex complex13 = complex11.cosh();
      complex13.add(complex5);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.exp();
      complex2.NaN.add(0.0);
      Complex complex3 = complex0.createComplex(2250.0, 6.283185307179586);
      Complex complex4 = complex0.tanh();
      complex4.INF.acos();
      Complex.valueOf(6.283185307179586);
      complex3.multiply(381);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.I.exp();
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.ZERO.sqrt();
      Complex.valueOf(1319.0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.multiply(1319.0);
      complex0.ONE.nthRoot(1316);
      Complex complex5 = complex0.multiply(1032);
      Complex complex6 = complex1.tanh();
      complex6.ZERO.abs();
      complex5.INF.sqrt();
      complex2.ZERO.sinh();
      complex4.INF.createComplex(0.0, (-2423.4954971497727));
      Complex complex7 = Complex.valueOf(1319.0, Double.NaN);
      Complex complex8 = complex3.divide(0.0);
      complex7.ONE.multiply(complex8);
      complex8.ONE.nthRoot(1032);
      Complex complex9 = complex5.INF.negate();
      Complex complex10 = complex3.add(0.0);
      Complex complex11 = complex2.atan();
      complex3.NaN.add(0.0);
      complex11.readResolve();
      complex5.toString();
      complex4.abs();
      complex5.ONE.log();
      complex1.readResolve();
      complex10.toString();
      complex9.multiply(969);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(767.9069116151451, 1974.7773);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1.2574995962791943E-166, 20.0);
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.tanh();
      Complex complex4 = complex2.INF.divide(2.0);
      Complex complex5 = complex4.I.pow(767.9069116151451);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.sqrt1z();
      complex4.ZERO.divide(6.283185307179586);
      complex2.nthRoot(213);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.I.divide(0.0);
      Complex complex10 = complex8.sqrt();
      complex10.asin();
      Complex complex11 = complex10.ONE.divide(2077.0334843729015);
      complex11.INF.getField();
      Complex.valueOf(767.9069116151451, 1974.7773);
      Complex complex12 = complex9.subtract(complex7);
      complex3.getReal();
      Complex complex13 = complex3.createComplex(0.0, 0.0);
      complex13.NaN.subtract(complex1);
      complex13.getImaginary();
      complex12.subtract(0.0);
      complex8.toString();
      complex5.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-271.7823953129));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.conjugate();
      complex2.abs();
      complex2.NaN.tan();
      Complex complex6 = Complex.valueOf(2.914906573537692E-8);
      Complex complex7 = complex6.divide(complex4);
      complex7.I.toString();
      complex3.ZERO.getField();
      complex6.log();
      complex2.I.divide(568.6);
      Complex.valueOf((-271.7823953129), 0.0);
      Complex.valueOf(2.914906573537692E-8);
      Object object0 = complex5.readResolve();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex9.pow(1.0);
      complex9.ONE.pow((-1370.4));
      complex2.NaN.sqrt1z();
      complex10.multiply((-1));
      complex8.equals(object0);
      complex9.cos();
      complex9.isInfinite();
      complex6.tan();
      Complex complex11 = complex5.asin();
      complex6.isNaN();
      complex6.reciprocal();
      complex11.multiply(complex3);
      complex3.divide(1.0);
      Complex.valueOf(1.0, (-4315.3498));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.NaN.createComplex(0.0, 0.1994270384311676);
      complex3.NaN.conjugate();
      complex1.ZERO.readResolve();
      Complex complex4 = complex0.subtract(1963.3);
      Complex complex5 = complex4.ONE.cos();
      complex5.ZERO.log();
      Complex complex6 = complex5.ONE.negate();
      complex5.ONE.acos();
      Complex complex7 = complex5.ZERO.conjugate();
      complex7.I.readResolve();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.INF.pow(0.1994270384311676);
      complex9.INF.nthRoot(2717);
      Complex complex10 = complex1.createComplex(1963.3, 1963.3);
      Complex complex11 = complex10.subtract(0.1994270384311676);
      Complex complex12 = complex11.log();
      complex12.sin();
      Complex.valueOf(0.1994270384311676, Double.POSITIVE_INFINITY);
      complex2.getField();
      complex8.isInfinite();
      complex12.add(0.0);
      complex10.equals("");
      complex0.getReal();
      complex1.isNaN();
      complex12.asin();
      complex0.multiply(complex8);
      complex6.reciprocal();
      complex8.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1832.0673);
      complex0.isNaN();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.subtract(complex1);
      complex3.sqrt();
      complex0.equals(complex2);
      complex0.divide(complex2);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex2.NaN.subtract(complex0);
      Complex complex6 = complex5.ONE.multiply(complex4);
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex0.divide(complex1);
      complex3.ZERO.subtract(complex7);
      complex3.ONE.divide((-1839.25));
      complex8.toString();
      complex8.ONE.abs();
      complex2.NaN.abs();
      complex6.ONE.getField();
      complex2.NaN.abs();
      complex1.add(complex8);
      complex3.toString();
      complex1.cos();
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex8.acos();
      Complex complex10 = complex3.subtract(complex8);
      complex10.NaN.sqrt();
      complex7.getReal();
      Complex complex11 = complex10.conjugate();
      complex8.log();
      complex11.getArgument();
      complex9.equals("(NaN, NaN)");
      complex9.createComplex(0.0, 213.92544963044);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2595.594), 2056.09516);
      Complex complex1 = complex0.INF.asin();
      complex1.ONE.nthRoot(132);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-2167.5805864751), 0.0);
      complex2.NaN.multiply(1.0692462289051038E-258);
      Complex complex3 = complex0.divide((-2848.2757134138));
      complex0.cosh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf((-1428.37627935), 2056.09516);
      complex6.readResolve();
      complex6.asin();
      complex6.createComplex((-89.0), 1396.5044359610831);
      Complex complex7 = complex5.add(complex3);
      Complex complex8 = complex7.pow(1.139367970944884E-8);
      complex4.atan();
      complex1.log();
      Complex complex9 = new Complex((-2366.736586497576), (-2366.736586497576));
      complex2.multiply(complex9);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(2153.3891);
      Complex complex2 = complex1.multiply(7);
      Complex complex3 = complex2.ONE.pow(complex0);
      complex3.ONE.subtract(2153.3891);
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex5 = Complex.valueOf(0.0);
      complex0.isInfinite();
      Complex complex6 = complex5.multiply((double) 7);
      complex6.getImaginary();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex8.ONE.sinh();
      complex7.I.exp();
      complex9.INF.getArgument();
      Complex complex10 = complex5.ZERO.pow(complex7);
      complex4.hashCode();
      complex3.nthRoot(21);
      complex1.divide(0.0);
      complex4.getReal();
      complex1.divide(0.0);
      complex10.sqrt();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-1296.6023936317013), (-7.944341754299148E24));
      complex0.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.add(complex0);
      complex3.readResolve();
      complex3.ZERO.readResolve();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex2.pow(complex4);
      Complex complex8 = complex3.sqrt1z();
      complex8.INF.subtract(complex3);
      Complex complex9 = Complex.valueOf((-601.6649460798387), 703.062746);
      complex5.tan();
      complex6.subtract((-1.0));
      complex7.exp();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-383.961), (-383.961));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.I.sqrt1z();
      complex0.readResolve();
      complex2.ZERO.pow(0.6724261045455933);
      Complex complex3 = Complex.valueOf((-383.961), 0.0);
      Complex complex4 = Complex.valueOf((-383.961));
      Complex complex5 = complex3.ZERO.asin();
      complex4.negate();
      complex3.INF.sqrt1z();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.ONE.sin();
      complex7.subtract(1405.8932636943);
      complex6.tan();
      Complex complex8 = complex6.ZERO.reciprocal();
      complex0.isInfinite();
      Complex.valueOf(0.6724261045455933, (-383.961));
      complex1.getImaginary();
      complex6.acos();
      Complex complex9 = complex2.createComplex((-1664.35285597033), (-1270.1973));
      Complex.valueOf(0.0, 0.0);
      complex3.sqrt1z();
      complex9.log();
      complex6.conjugate();
      complex9.readResolve();
      complex5.sqrt();
      Object object0 = complex0.readResolve();
      complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-3643.42243861816));
      complex1.INF.abs();
      complex1.I.readResolve();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.valueOf((-3643.42243861816), (-1248.5398982));
      complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.tan();
      complex4.ONE.atan();
      Complex complex5 = complex4.pow(complex2);
      complex3.multiply(0);
      complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.INF.tan();
      complex1.getReal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.negate();
      complex3.I.pow(complex2);
      Complex.valueOf(0.0);
      complex3.log();
      complex2.tanh();
      complex0.toString();
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex0.INF.pow(complex1);
      Complex complex2 = complex1.NaN.sin();
      complex2.ONE.divide((-1365.21104301));
      complex0.NaN.pow((-1365.21104301));
      complex1.divide((-3.1085734725176E52));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.toString();
      Complex complex5 = complex1.sinh();
      complex5.divide(complex4);
      complex5.abs();
      complex3.nthRoot(594);
      complex0.subtract(complex4);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.add(6.283185307179586);
      complex0.INF.acos();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.conjugate();
      complex0.ONE.readResolve();
      complex1.I.sin();
      complex1.nthRoot(291);
      complex1.getImaginary();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-196.8252161));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex1.INF.createComplex((-196.8252161), 1.0407926842436056E294);
      complex2.I.getArgument();
      complex4.NaN.createComplex(0.0, 1.0407926842436056E294);
      complex3.ZERO.nthRoot(1250);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ONE.add((-196.8252161));
      complex4.ONE.negate();
      Complex complex7 = complex6.INF.log();
      complex7.ONE.add(complex4);
      complex5.ONE.atan();
      complex0.ONE.abs();
      complex0.getReal();
      complex0.createComplex((-3506.89317531293), (-3506.89317531293));
      complex5.getImaginary();
      complex6.tan();
      Complex complex8 = complex5.negate();
      complex1.divide(0.0);
      complex4.getImaginary();
      Complex complex9 = complex6.divide(Double.NaN);
      complex1.getField();
      complex8.add(complex5);
      complex8.sqrt();
      complex9.readResolve();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      complex1.INF.getArgument();
      Complex complex2 = complex0.sin();
      complex0.getImaginary();
      complex2.ONE.hashCode();
      complex2.ONE.sqrt1z();
      Complex complex3 = complex1.cosh();
      complex1.atan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex6.negate();
      complex7.ONE.getField();
      Complex complex8 = complex0.acos();
      Complex complex9 = Complex.valueOf((-1502.058200052), 1095.033919983);
      Complex complex10 = Complex.valueOf(1136.34707, 4.923458004084836E41);
      complex1.atan();
      complex6.hashCode();
      complex10.getImaginary();
      complex6.sinh();
      complex2.multiply(complex4);
      Complex complex11 = complex5.negate();
      complex3.ONE.subtract(complex0);
      Complex complex12 = complex11.ONE.divide(0.0);
      complex11.INF.add(complex9);
      complex3.equals(complex11);
      complex4.add(complex12);
      complex11.getImaginary();
      complex8.isInfinite();
      complex11.atan();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(566.265887418, 566.265887418);
      complex0.INF.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.I.multiply(complex2);
      complex2.ONE.multiply(566.265887418);
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = complex2.ONE.exp();
      complex5.I.negate();
      Complex complex6 = complex1.multiply(0);
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.I.cos();
      Complex complex8 = complex2.ONE.cosh();
      Complex complex9 = complex8.ONE.tan();
      complex9.I.tanh();
      Complex complex10 = new Complex(0.0);
      complex7.atan();
      complex10.I.log();
      Complex complex11 = complex2.subtract(complex10);
      complex10.I.conjugate();
      complex11.INF.sinh();
      complex4.isNaN();
      complex7.equals("(Infinity, Infinity)");
      complex9.atan();
      complex6.getField();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.multiply(0);
      complex0.ONE.abs();
      complex0.nthRoot(1);
      complex0.INF.getField();
      try { 
        complex0.INF.nthRoot((-1305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,305
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex1.NaN.multiply(1.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.add(complex3);
      complex4.subtract(complex2);
      complex1.subtract(1.9713349342346191);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.sqrt();
      complex0.abs();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex0.INF.tan();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.INF.divide(complex1);
      complex2.I.sqrt();
      complex1.abs();
      complex0.sin();
      complex0.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-1886.0));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.multiply((-1886.0));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex4.ONE.multiply(complex3);
      complex5.cosh();
      Complex complex6 = complex0.add(complex3);
      Complex complex7 = complex2.add((-1886.0));
      complex4.ONE.exp();
      Complex complex8 = complex5.INF.tanh();
      Complex complex9 = complex1.atan();
      complex5.pow(complex7);
      assertEquals((-3772.0), complex7.getReal(), 0.01);
      
      complex4.isNaN();
      Complex complex10 = complex3.I.sinh();
      complex10.ZERO.negate();
      Complex complex11 = complex6.ONE.tanh();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex11.getReal(), 0.01);
      
      complex0.I.negate();
      Complex complex12 = complex9.subtract((-2112.0));
      assertEquals((-5.551115123125783E-17), complex12.getImaginary(), 0.01);
      assertEquals((-5.30222643843044E-4), complex9.getReal(), 0.01);
      
      Complex complex13 = complex6.add(complex1);
      Complex complex14 = complex6.INF.reciprocal();
      Complex complex15 = complex13.conjugate();
      complex1.negate();
      String string0 = complex0.toString();
      assertEquals("(-1886.0, 0.0)", string0);
      
      complex2.readResolve();
      complex8.toString();
      complex13.hashCode();
      Complex complex16 = complex2.sin();
      assertEquals((-0.8646271831579789), complex16.getReal(), 0.01);
      
      Complex complex17 = complex14.log();
      Complex complex18 = complex6.pow(0.0);
      assertFalse(complex18.equals((Object)complex17));
      
      double double0 = complex15.abs();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1881.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.INF.multiply(1881.0);
      complex2.INF.subtract(1881.0);
      Complex complex3 = complex0.ONE.add(1881.0);
      complex3.ZERO.createComplex(2245.251687, 3362.4582711);
      complex0.getImaginary();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.I.createComplex(0.0, 0.0);
      complex4.ZERO.atan();
      Complex complex6 = complex1.add(0.0);
      complex6.INF.acos();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex5.INF.sinh();
      Complex complex9 = complex7.ONE.pow(6.308649765138419E-287);
      Complex complex10 = complex4.atan();
      complex5.getField();
      complex9.sin();
      complex10.exp();
      complex8.acos();
      try { 
        complex9.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-2975.4209371373145), (-2975.4209371373145));
      Complex complex1 = complex0.multiply((-2975.4209371373145));
      assertEquals(8853129.753155096, complex1.getReal(), 0.01);
      assertEquals((-2975.4209371373145), complex0.getReal(), 0.01);
      assertEquals(8853129.753155096, complex1.getImaginary(), 0.01);
      assertEquals((-2975.4209371373145), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.NaN.add(complex5);
      complex6.ZERO.divide((-5029.0));
      Complex complex7 = complex4.multiply(1721.0032988);
      Complex complex8 = complex7.I.tan();
      complex8.INF.reciprocal();
      Complex complex9 = complex4.log();
      complex9.readResolve();
      complex1.getArgument();
      complex0.I.subtract(complex3);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
