/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:45:36 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.tan();
      complex2.cosh();
      complex1.tanh();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex3.pow(1203.6509226457);
      Complex complex7 = Complex.NaN;
      complex7.exp();
      Complex complex8 = complex7.asin();
      complex1.exp();
      complex4.atan();
      complex0.add(1203.6509226457);
      complex6.sinh();
      complex3.asin();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.ZERO;
      complex8.pow(complex10);
      Complex.valueOf(Double.POSITIVE_INFINITY, 5870.440711);
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-23.706464450640638), (-23.706464450640638));
      Complex complex1 = complex0.createComplex((-23.706464450640638), (-23.706464450640638));
      Complex complex2 = new Complex((-20.0));
      complex2.asin();
      Complex complex3 = Complex.valueOf((-0.01982786953994875), (-23.706464450640638));
      Complex complex4 = complex3.atan();
      complex2.tanh();
      complex0.subtract(1773.2);
      complex4.createComplex((-23.706464450640638), 1773.2);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = new Complex(4.63985600437427E180);
      Complex complex3 = complex2.sqrt1z();
      complex3.INF.toString();
      Complex complex4 = complex0.multiply(complex2);
      complex4.getField();
      Complex complex5 = complex2.ZERO.asin();
      complex5.ZERO.getField();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex4.I.pow(complex6);
      Complex complex8 = complex4.multiply((-1701));
      complex6.INF.readResolve();
      complex6.negate();
      Complex complex9 = complex6.pow(2.0);
      complex9.ZERO.getArgument();
      Complex complex10 = Complex.valueOf((-20.0), 4.63985600437427E180);
      complex8.tan();
      complex7.abs();
      complex8.tan();
      complex8.asin();
      Complex complex11 = complex3.multiply(1073741824);
      complex11.I.negate();
      complex5.toString();
      Complex complex12 = complex7.reciprocal();
      complex12.ZERO.add(complex10);
      complex3.getField();
      Complex.valueOf(1.2773080633674971E271, 2.0);
      complex1.add((-0.6332556513148192));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1.0);
      complex1.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 2241.71);
      Complex complex4 = complex3.pow(complex1);
      complex4.tanh();
      complex2.atan();
      complex4.toString();
      int int0 = 178;
      try { 
        complex2.nthRoot((-806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -806
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-13.9282032));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(4.544122762558404E223, Double.POSITIVE_INFINITY);
      complex0.ZERO.log();
      Complex complex1 = complex0.tan();
      complex0.tanh();
      complex1.atan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex.valueOf(4.544122762558404E223, 4.544122762558404E223);
      Complex complex0 = new Complex(4.544122762558404E223, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      complex2.I.pow(complex1);
      complex1.tanh();
      complex0.multiply(542.265124284);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(4.544122762558404E223, 4.544122762558404E223);
      Complex complex1 = new Complex(4.544122762558404E223, Double.POSITIVE_INFINITY);
      complex1.multiply((-3306));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1471.873), (-20.0));
      complex0.abs();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.tan();
      complex3.log();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0, (-1228.53));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.multiply(0.2667117714881897);
      Complex complex6 = complex1.tanh();
      complex6.ONE.toString();
      Complex complex7 = complex0.sinh();
      complex7.ZERO.readResolve();
      complex7.ONE.subtract((-1228.53));
      Complex complex8 = complex5.createComplex(0.0, (-3958.2704754));
      Complex complex9 = complex8.I.sinh();
      complex8.reciprocal();
      Complex complex10 = complex8.divide(complex0);
      complex10.ZERO.asin();
      Complex complex11 = complex3.subtract(0.0);
      complex5.toString();
      Complex complex12 = complex11.tan();
      complex12.INF.tanh();
      Complex complex13 = complex1.multiply(700);
      complex13.INF.conjugate();
      complex4.getField();
      Complex complex14 = Complex.valueOf(4305.29, (-838.479718578616));
      complex14.nthRoot(700);
      complex11.atan();
      complex9.toString();
      complex11.sqrt();
      complex2.getField();
      complex6.nthRoot(7);
      complex7.nthRoot(722335499);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.exp();
      complex1.sqrt1z();
      complex1.ONE.exp();
      complex1.NaN.cos();
      complex0.abs();
      Complex complex2 = complex0.createComplex((-2783.70898805465), Double.POSITIVE_INFINITY);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((-814.3091348));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.ZERO;
      complex2.sin();
      complex1.getArgument();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.INF;
      complex5.pow(complex4);
      Complex complex6 = complex1.tan();
      Complex complex7 = new Complex((-814.3091348), Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex0.add(3711.0189537859);
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(539.782943706344, (-2496.43193516208));
      complex0.equals(complex4);
      complex0.exp();
      complex0.pow(complex3);
      Complex complex5 = Complex.valueOf(383.9, 0.7853981633974483);
      complex5.reciprocal();
      complex5.divide(Double.NaN);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-941.6559999943624));
      Complex complex1 = Complex.valueOf((-941.6559999943624), (-4373.58));
      Complex complex2 = Complex.ONE;
      complex1.NaN.readResolve();
      Complex complex3 = complex2.pow((-1611.0));
      Complex complex4 = Complex.valueOf(1917.652752562, 13.928203230275509);
      complex4.pow(complex0);
      complex1.tan();
      Complex complex5 = complex4.multiply(2298.5);
      Complex complex6 = complex5.pow(complex3);
      complex2.getField();
      complex1.tan();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.toString();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ZERO.sinh();
      complex0.INF.cosh();
      complex2.I.sin();
      Complex complex3 = complex0.ONE.add(Double.NaN);
      Complex complex4 = complex3.NaN.sin();
      complex0.abs();
      Complex complex5 = complex1.sqrt1z();
      complex0.ONE.createComplex(Double.NaN, -0.0);
      complex5.INF.pow(complex4);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.INF.sqrt();
      complex3.getField();
      complex5.add((-518.4));
      Complex complex8 = complex2.sqrt1z();
      complex6.multiply((-2143349101));
      Complex complex9 = complex2.sqrt();
      complex8.getField();
      Complex complex10 = complex9.subtract(Double.NaN);
      complex0.add(complex7);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1706.865697031, 1706.865697031);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex(3.3894811576571423E179, 3.3894811576571423E179);
      complex2.equals(complex5);
      complex3.getField();
      complex1.exp();
      complex0.pow(complex2);
      complex4.divide((-2246.5704772836));
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 897.8);
      complex3.tanh();
      Complex complex7 = Complex.NaN;
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.718281828459045);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.acos();
      complex3.multiply(2144535323);
      complex2.ONE.abs();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.I.add(complex1);
      complex4.getField();
      complex2.pow(complex0);
      complex4.multiply(2.718281828459045);
      Complex complex7 = complex5.atan();
      complex6.sqrt();
      complex7.pow(6.651345415954053E211);
      Complex.valueOf((double) 2144535323);
      Complex complex8 = complex0.createComplex(309.5395013859902, 1.0);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1784.0), (-1784.0));
      Complex complex1 = new Complex((-1784.0), 2942.7060866);
      complex0.add(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1.08231425285, 1.08231425285);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.ONE;
      complex3.equals(complex1);
      complex2.getField();
      Complex complex4 = complex3.exp();
      complex4.pow(complex1);
      Complex complex5 = complex0.tan();
      complex1.pow(complex5);
      complex0.acos();
      complex3.pow(complex2);
      complex0.multiply(Double.NaN);
      try { 
        complex5.nthRoot((-296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -296
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.isNaN();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((double) 0, (double) 0);
      Complex complex3 = Complex.ZERO;
      Object object0 = complex1.readResolve();
      Complex complex4 = ((Complex) object0).ONE.log();
      complex4.add(0.0);
      Complex complex5 = Complex.valueOf(0.0, 992.004619843306);
      complex0.acos();
      complex2.equals(complex5);
      Complex complex6 = Complex.I;
      complex6.getField();
      complex6.exp();
      complex4.pow(complex0);
      complex1.divide((double) 0);
      complex5.abs();
      Complex complex7 = Complex.ZERO;
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(334.198, 334.198);
      complex0.I.multiply(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex(334.198);
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex4.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      Complex complex7 = complex6.pow(complex1);
      complex0.getArgument();
      Complex complex8 = complex3.I.divide(complex2);
      complex1.INF.conjugate();
      complex4.getArgument();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex7.add(1.999240777687192E-8);
      Complex complex9 = complex5.acos();
      Complex complex10 = Complex.ONE;
      complex5.equals(complex2);
      complex5.getField();
      complex3.exp();
      complex2.pow(complex7);
      complex9.divide(1.999240777687192E-8);
      Complex complex11 = new Complex(Double.NaN, 334.198);
      complex11.tanh();
      complex8.abs();
      complex10.reciprocal();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.pow(3311.224532987326);
      try { 
        complex1.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-3877.66));
      complex0.isNaN();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.valueOf((-3877.66), (-1204.0411));
      Complex complex3 = Complex.ZERO;
      complex1.readResolve();
      Complex complex4 = Complex.valueOf((-1.0));
      complex1.equals(complex4);
      Complex complex5 = complex3.log();
      complex5.isInfinite();
      complex0.isInfinite();
      complex0.toString();
      complex1.isNaN();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-518.4));
      Complex complex1 = complex0.multiply(1050);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.pow(complex1);
      complex1.multiply(658);
      complex2.getField();
      Complex complex4 = complex3.sqrt1z();
      complex4.INF.multiply(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.reciprocal();
      complex6.reciprocal();
      Complex complex7 = Complex.ZERO;
      // Undeclared exception!
      complex7.nthRoot(1354490506);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(13.928203230275509, 0.9999998669880951);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.pow(13.928203230275509);
      Complex complex5 = complex1.reciprocal();
      complex4.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.pow(complex4);
      Complex complex8 = complex4.tan();
      complex7.pow(complex5);
      complex4.acos();
      Complex complex9 = Complex.valueOf(0.9999998669880951);
      complex9.asin();
      Complex.valueOf(13.928203230275509);
      complex2.acos();
      complex8.toString();
      complex1.cosh();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.I;
      complex1.isNaN();
      Complex complex2 = complex1.pow(complex0);
      complex1.getArgument();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex0.conjugate();
      complex4.abs();
      Complex complex6 = Complex.I;
      complex6.readResolve();
      Complex complex7 = Complex.INF;
      complex7.sin();
      complex0.getArgument();
      complex6.add(0.0);
      Complex complex8 = Complex.valueOf((-837.0460195454525), 1.708073152249779);
      complex8.acos();
      complex2.equals("array size cannot be greater than {0}");
      complex4.getField();
      Complex complex9 = complex5.exp();
      Complex complex10 = Complex.INF;
      complex9.pow(complex10);
      complex7.divide(Double.POSITIVE_INFINITY);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.isNaN();
      Complex complex2 = complex1.acos();
      complex1.toString();
      complex2.isNaN();
      Complex complex3 = complex1.pow(complex2);
      complex1.getArgument();
      Complex complex4 = Complex.valueOf(1.5707963267948966);
      complex4.divide(complex0);
      Complex complex5 = complex4.conjugate();
      complex0.abs();
      Complex complex6 = complex5.sin();
      complex4.pow(complex3);
      complex1.tan();
      Complex complex7 = new Complex(1.5707963267948966, 1.0);
      complex7.acos();
      Complex complex8 = complex6.asin();
      Complex complex9 = Complex.valueOf(1.0);
      complex9.NaN.getArgument();
      complex9.acos();
      complex1.toString();
      complex3.cosh();
      Complex complex10 = complex8.reciprocal();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.cos();
      Complex complex4 = (Complex)complex1.readResolve();
      complex2.equals(complex0);
      complex3.readResolve();
      complex2.readResolve();
      Complex complex5 = new Complex(25.122930969099002);
      Complex complex6 = complex4.divide(2308.110792187);
      complex6.pow(complex2);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.nthRoot(316);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-518.4));
      Complex complex1 = Complex.valueOf(13.928203230275509, 1413.51);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.ZERO;
      complex3.pow((-401.86899698));
      complex2.reciprocal();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.INF;
      complex0.pow(complex4);
      complex4.tan();
      Complex complex6 = Complex.valueOf((-154.769748453898));
      complex6.tan();
      complex5.multiply(673);
      complex2.sqrt();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(334.198, 334.198);
      complex0.I.multiply(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex(334.198);
      Complex complex4 = complex0.NaN.asin();
      complex4.INF.tanh();
      Complex complex5 = complex4.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      complex5.pow(complex1);
      complex0.getArgument();
      complex3.I.divide(complex2);
      Complex complex6 = complex1.INF.conjugate();
      complex4.ONE.abs();
      complex0.readResolve();
      complex4.sin();
      complex0.getArgument();
      complex3.I.add(0.7853981633974483);
      complex6.multiply(0.17140414192225384);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.ONE.cos();
      complex1.ZERO.nthRoot(149);
      Complex complex4 = complex1.I.subtract((-943.62));
      Complex complex5 = complex0.ZERO.multiply(complex1);
      complex5.ONE.add((-1031.58));
      complex5.INF.readResolve();
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = new Complex(3983.9761442740246);
      complex7.divide(Double.POSITIVE_INFINITY);
      complex6.pow(complex3);
      complex3.multiply((double) 149);
      complex4.nthRoot(149);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sinh();
      complex2.isNaN();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.negate();
      complex4.divide(complex2);
      Complex complex5 = complex3.multiply(0);
      complex5.sqrt();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-518.4));
      Complex complex1 = Complex.valueOf(13.928203230275509, 1413.51);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.pow((-401.86899698));
      Complex complex5 = complex1.conjugate();
      complex4.abs();
      complex4.readResolve();
      complex5.sin();
      complex3.getArgument();
      Complex complex6 = Complex.valueOf(4152.405083535434, (-154.769748453898));
      complex6.add(0.0);
      Complex complex7 = complex2.acos();
      Complex complex8 = Complex.ONE;
      complex1.equals(complex7);
      complex2.getField();
      complex5.exp();
      complex7.pow(complex0);
      complex6.divide((-154.769748453898));
      Complex complex9 = complex1.tanh();
      complex9.abs();
      complex4.reciprocal();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.pow(6.283185307179586);
      complex0.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex1.asin();
      Complex.valueOf(6.283185307179586);
      complex4.acos();
      complex5.toString();
      complex6.cosh();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(334.198, 334.198);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex(334.198);
      Complex complex5 = complex0.NaN.asin();
      complex5.INF.tanh();
      Complex complex6 = complex5.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      Complex complex7 = complex6.pow(complex1);
      complex0.getArgument();
      complex4.I.divide(complex3);
      complex1.INF.conjugate();
      complex5.ONE.abs();
      complex0.readResolve();
      complex5.sin();
      complex0.getArgument();
      complex4.I.add(Double.NaN);
      Complex complex8 = Complex.valueOf(334.198, 0.0);
      complex8.ONE.acos();
      complex7.equals(complex0);
      complex1.INF.getField();
      Complex complex9 = complex2.exp();
      complex6.pow(complex4);
      complex0.divide(383.9);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.cos();
      complex2.ONE.cos();
      complex1.ZERO.nthRoot(149);
      Complex complex3 = complex1.I.subtract((-943.62));
      Complex complex4 = complex0.ZERO.multiply(complex1);
      complex4.INF.readResolve();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex3.log();
      complex3.isInfinite();
      complex1.isInfinite();
      complex3.ZERO.pow(complex5);
      complex3.divide((-758.5099));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(complex0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.NaN.asin();
      complex4.INF.tanh();
      Complex complex5 = complex4.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      Complex complex6 = complex5.pow(complex0);
      complex0.getArgument();
      complex3.I.divide(complex2);
      complex0.INF.conjugate();
      complex4.ONE.abs();
      complex0.readResolve();
      Complex complex7 = complex4.sin();
      complex7.getArgument();
      complex3.I.add(0.7853981633974483);
      Complex.valueOf(334.198, 0.0);
      complex6.equals(complex0);
      complex0.INF.getField();
      Complex complex8 = complex1.exp();
      complex5.pow(complex3);
      complex0.divide(383.9);
      Complex complex9 = complex8.tanh();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2.44242319E-315));
      complex0.ONE.subtract(Double.NaN);
      Complex complex1 = new Complex((-2.44242319E-315), Double.NaN);
      Complex.valueOf(Double.NaN, (-2.44242319E-315));
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.8477759656842807E-8, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex(1002.2);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex0.acos();
      complex3.toString();
      complex0.isNaN();
      Complex complex7 = complex2.pow(complex6);
      complex1.getArgument();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex0.conjugate();
      complex1.abs();
      complex8.readResolve();
      complex6.sin();
      Complex complex10 = new Complex(1.8477759656842807E-8, 334.198);
      complex10.getArgument();
      complex7.add((-2775.39172959));
      Complex.valueOf(0.0, 334.198);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.acos();
      complex7.equals(complex4);
      complex9.getField();
      complex7.exp();
      complex5.pow(complex12);
      Complex complex13 = Complex.ONE;
      complex13.divide(268.28);
      Complex complex14 = new Complex(334.198, 0.0);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.44242319E-315), (-2.44242319E-315));
      Complex complex1 = Complex.valueOf((-2.44242319E-315), (-1.3289231465997192E-9));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = new Complex((-2.44242319E-315));
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex3.acos();
      complex0.toString();
      complex4.isNaN();
      Complex complex8 = complex0.pow(complex6);
      complex6.getArgument();
      Complex complex9 = new Complex(0.0014961190671398394, (-2.44242319E-315));
      complex9.divide(complex2);
      complex8.conjugate();
      complex1.abs();
      complex5.readResolve();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.sin();
      complex8.getArgument();
      complex0.add(1589.8345273695);
      Complex.valueOf(0.0, 9.196108454599933E-18);
      complex5.acos();
      complex11.equals(complex8);
      complex0.getField();
      complex10.exp();
      complex9.pow(complex2);
      complex6.divide(0.0014961190671398394);
      Complex complex12 = complex7.tanh();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(334.198);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex0.NaN.asin();
      complex5.ZERO.divide(complex2);
      complex5.INF.tanh();
      Complex complex6 = complex5.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      Complex complex7 = complex6.pow(complex1);
      complex0.getArgument();
      complex4.I.divide(complex3);
      complex0.sqrt1z();
      complex3.reciprocal();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.reciprocal();
      complex2.nthRoot(1030);
      complex3.hashCode();
      complex7.sin();
      complex9.tan();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(334.198);
      complex0.I.multiply(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = Complex.valueOf(334.198);
      complex4.INF.tanh();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex3.pow(334.198);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = new Complex(334.198, 334.198);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex5.pow(complex2);
      complex9.tan();
      Complex complex12 = Complex.valueOf(334.198);
      Complex complex13 = complex1.tan();
      Complex complex14 = complex11.acos();
      complex13.asin();
      Complex.valueOf(334.198);
      complex7.acos();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex8.createComplex((-1917.3), 9.119538242455128E-8);
      complex14.asin();
      Complex complex17 = Complex.INF;
      complex17.getReal();
      complex6.cosh();
      complex15.sinh();
      Complex complex18 = new Complex((-0.9999999999999999));
      Complex complex19 = complex18.exp();
      complex19.conjugate();
      complex12.multiply((-1917.3));
      complex16.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.329825775465912, 1.329825775465912);
      // Undeclared exception!
      complex0.nthRoot(2146683929);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-2684.3));
      Complex complex1 = new Complex(0.0, (-2684.3));
      Complex complex2 = Complex.ONE;
      complex0.pow((-2169.425645876));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2684.3));
      complex0.multiply(1029);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(2644.448969787075, (-52.69616865204));
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = new Complex(1029, 2644.448969787075);
      complex5.getField();
      complex0.exp();
      complex3.pow(complex2);
      Complex complex6 = complex1.divide((-333.198));
      complex3.tanh();
      complex4.abs();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-2684.3));
      Complex complex1 = complex0.multiply(1029);
      Complex complex2 = new Complex((-2684.3));
      Complex complex3 = complex0.sin();
      complex2.getArgument();
      Complex complex4 = new Complex((-1081.726178), 1.5430806348152437);
      Complex complex5 = complex4.add((-1081.726178));
      Complex complex6 = Complex.valueOf(1413.51, Double.NaN);
      complex5.equals(complex4);
      complex6.getField();
      Complex complex7 = complex3.exp();
      complex7.asin();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.pow(complex4);
      complex9.divide(2431.0069836695384);
      complex1.tanh();
      complex8.abs();
      complex6.multiply(1.5430806348152437);
      complex3.pow(9.523809523809524E-4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-8.629042891789934E-9));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.acos();
      complex0.toString();
      Complex complex5 = new Complex((-8.629042891789934E-9));
      complex5.isNaN();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.pow(complex1);
      complex3.getArgument();
      Complex complex8 = complex4.divide(complex3);
      Complex complex9 = complex8.conjugate();
      complex6.abs();
      complex6.readResolve();
      complex1.sin();
      complex0.getArgument();
      complex0.add(4.4422779589171113E-190);
      Complex complex10 = Complex.valueOf(2.0, 3.141592653589793);
      complex8.acos();
      complex2.equals(complex7);
      complex10.getField();
      complex3.exp();
      complex4.pow(complex1);
      complex3.divide((-1070.752922948));
      complex9.tanh();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(334.198, 334.198);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex(334.198);
      Complex complex5 = complex2.multiply(1518500250);
      Complex complex6 = Complex.valueOf((-1.5529608026276525E-8));
      Complex complex7 = complex0.pow(complex6);
      complex3.multiply(1028);
      complex5.getField();
      complex2.sqrt1z();
      complex1.reciprocal();
      complex7.reciprocal();
      complex4.nthRoot(1028);
      Complex complex8 = Complex.INF;
      complex8.hashCode();
      complex8.sin();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(334.198);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      complex3.I.sin();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex4.NaN.acos();
      Complex.valueOf(334.198);
      Complex complex7 = complex5.log();
      complex3.cos();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = Complex.ONE;
      complex9.log();
      complex8.getImaginary();
      Complex complex10 = complex6.cos();
      Complex.valueOf(Double.NaN);
      complex2.getImaginary();
      Complex complex11 = complex7.divide(3490.947649474);
      complex10.negate();
      complex11.reciprocal();
      complex7.createComplex(1399.16657, 2.414213562373095);
      Complex complex12 = new Complex(1399.16657);
      complex4.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(334.198, 334.198);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex(334.198);
      Complex complex5 = complex0.NaN.asin();
      complex5.INF.tanh();
      Complex complex6 = complex5.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      Complex complex7 = complex6.pow(complex1);
      complex0.getArgument();
      complex4.I.divide(complex3);
      complex1.INF.conjugate();
      complex5.ONE.abs();
      complex0.readResolve();
      complex5.sin();
      complex0.getArgument();
      complex4.I.add(0.7853981633974483);
      Complex complex8 = Complex.valueOf(334.198, 0.0);
      complex8.ONE.acos();
      complex7.equals(complex0);
      complex1.INF.getField();
      Complex complex9 = complex2.exp();
      complex6.pow(complex4);
      complex0.divide(383.9);
      Complex complex10 = complex9.tanh();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(334.198);
      complex0.I.multiply(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex4.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      Complex complex7 = complex6.pow(complex1);
      complex0.getArgument();
      complex3.I.divide(complex2);
      Complex complex8 = complex1.INF.conjugate();
      complex4.ONE.abs();
      complex0.readResolve();
      Complex complex9 = complex0.cos();
      complex8.divide(356.460734866763);
      complex9.add(complex2);
      complex5.equals(complex7);
      complex3.toString();
      Complex complex10 = Complex.ZERO;
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(1195);
      complex0.I.add(3659.48890682);
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.divide(6.283185307179586);
      Complex complex2 = new Complex((-20.0), 6.283185307179586);
      complex2.negate();
      Complex complex3 = complex2.reciprocal();
      complex3.createComplex(2013.33530090772, (-20.0));
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-635.0586));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.pow((-154.769748453898));
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.pow(complex3);
      complex2.tan();
      complex2.tan();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex3.asin();
      complex4.ZERO.createComplex((-2739.8930293487833), (-2739.8930293487833));
      complex3.subtract(0.5784112215042114);
      complex3.acos();
      Complex complex9 = Complex.I;
      complex6.asin();
      complex3.getReal();
      complex2.cosh();
      complex7.sinh();
      complex3.exp();
      complex8.conjugate();
      complex3.multiply(0.0);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-635.0586));
      Complex complex1 = complex0.INF.negate();
      complex1.INF.pow((-154.769748453898));
      Complex complex2 = complex0.I.reciprocal();
      complex1.I.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.pow(complex3);
      complex4.NaN.tan();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.INF.acos();
      complex6.ONE.cos();
      Complex complex7 = complex1.asin();
      complex7.subtract((-327.6));
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.ONE.createComplex((-327.6), (-635.0586));
      complex0.asin();
      complex2.getReal();
      complex9.reciprocal();
      complex1.createComplex((-635.0586), (-284.333391));
      complex0.divide(complex9);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.NaN.sqrt1z();
      Complex.valueOf((-1.0), (-1436.0482877246));
      Complex complex2 = complex1.add(complex0);
      complex2.getArgument();
      Complex.valueOf((-1720.1056964921), (-1720.1056964921));
      Complex complex3 = complex1.pow((-1.0));
      Complex complex4 = new Complex((-1.0), (-1345.9190069831));
      complex4.multiply((double) 663);
      Complex complex5 = complex3.cos();
      complex5.isInfinite();
      complex0.isInfinite();
      Complex complex6 = Complex.ONE;
      complex6.pow(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-635.0586));
      Complex complex1 = complex0.INF.negate();
      complex1.INF.pow((-154.769748453898));
      complex0.I.reciprocal();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.multiply(623);
      Complex complex5 = new Complex((-635.0586));
      Complex complex6 = complex3.cos();
      complex6.divide((-2261.2));
      complex5.add(complex0);
      complex0.equals(complex4);
      complex1.toString();
      Complex complex7 = Complex.INF;
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.isNaN();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.tan();
      complex1.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.subtract(20.0);
      Complex complex7 = complex3.acos();
      Complex complex8 = complex2.createComplex(3466.0, 20.0);
      complex8.asin();
      complex6.getReal();
      complex5.cosh();
      complex8.sinh();
      complex7.exp();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(988.553, 988.553);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.ONE.sqrt1z();
      complex0.add((-990.54485872));
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf(1.8518977165222168);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex5.ONE.sin();
      Complex complex8 = complex1.ZERO.multiply(complex0);
      Complex complex9 = complex1.pow(1.8518977165222168);
      complex2.abs();
      Complex complex10 = complex4.add((-1941.128571953898));
      Complex complex11 = complex5.ZERO.reciprocal();
      complex11.pow(complex8);
      Complex complex12 = complex10.INF.acos();
      complex12.ONE.reciprocal();
      complex10.I.toString();
      complex0.acos();
      complex2.equals(complex3);
      complex7.getArgument();
      Complex complex13 = complex4.sinh();
      complex13.ZERO.sqrt1z();
      complex5.multiply(complex4);
      complex4.cos();
      complex5.negate();
      complex6.subtract((-1941.128571953898));
      complex3.readResolve();
      complex9.exp();
      complex1.createComplex(0.0, 1364.1530527);
      complex0.asin();
      complex11.add(complex10);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1.2210872189854344E-232);
      Complex complex2 = complex1.tanh();
      complex2.abs();
      complex2.INF.getArgument();
      complex2.isNaN();
      complex2.I.atan();
      try { 
        complex1.I.nthRoot((-1702));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,702
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.INF.multiply(3466);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.cosh();
      complex4.ZERO.getArgument();
      complex1.readResolve();
      Complex complex5 = complex4.atan();
      complex4.divide((double) 3466);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1345.9190069831));
      Complex complex2 = complex1.ONE.subtract((-1345.9190069831));
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex1.I.add(complex3);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.I.asin();
      complex0.ONE.hashCode();
      Complex complex7 = complex3.ONE.cosh();
      Complex complex8 = complex3.ZERO.cosh();
      complex7.INF.pow((-477.964037839));
      Complex complex9 = Complex.valueOf(3718.9090960848);
      Complex complex10 = Complex.valueOf((-1345.9190069831));
      complex7.NaN.getField();
      complex1.INF.sqrt1z();
      complex0.subtract(complex1);
      Complex complex11 = Complex.valueOf((-1345.9190069831), 0.0);
      Complex complex12 = complex9.sinh();
      Complex.valueOf((-1345.9190069831), 3718.9090960848);
      complex9.nthRoot(1026);
      complex6.negate();
      complex8.exp();
      Complex complex13 = complex2.cos();
      Complex complex14 = complex9.add(complex3);
      Complex complex15 = Complex.ZERO;
      complex13.I.subtract(complex15);
      Complex.valueOf((-1653.3207));
      complex13.tan();
      complex10.isNaN();
      complex14.log();
      complex12.exp();
      complex5.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1295.005083214739));
      Complex complex1 = Complex.INF;
      complex1.ONE.hashCode();
      Complex complex2 = complex0.multiply(926);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.NaN.add(complex3);
      complex0.ONE.getArgument();
      complex0.getArgument();
      complex0.subtract(complex1);
      complex4.INF.add(complex0);
      complex0.abs();
      Complex.valueOf(1295.005083214739, 1295.005083214739);
      complex1.getField();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.NaN.subtract(complex3);
      complex2.readResolve();
      complex4.multiply((-1040.157768054));
      complex6.sinh();
      complex1.conjugate();
      complex8.subtract(1189.842286);
      Complex.valueOf((-1520.340665503));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.conjugate();
      complex3.ONE.multiply((double) 17);
      complex1.isNaN();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.NaN.asin();
      complex5.add(0.0);
      complex0.pow(complex3);
      Complex complex6 = complex3.divide(complex0);
      complex6.ONE.readResolve();
      complex4.divide((double) 17);
      Complex.valueOf(0.0, (double) 17);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      complex3.acos();
      Complex.valueOf(0.0, 5050.7334773);
      double double0 = (-968.0);
      Complex complex4 = complex1.pow((-968.0));
      complex4.acos();
      Complex complex5 = complex4.ONE.conjugate();
      complex3.ONE.toString();
      complex5.INF.tan();
      complex0.isNaN();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.atan();
      complex6.sqrt1z();
      complex1.toString();
      complex6.INF.asin();
      complex6.createComplex(6.283185307179586, 0.0);
      complex3.hashCode();
      Complex complex8 = complex7.add(6.283185307179586);
      complex0.negate();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex8.divide(complex9);
      try { 
        complex10.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.tan();
      complex2.divide(complex1);
      Complex complex5 = complex0.atan();
      complex4.ONE.sqrt();
      Complex complex6 = complex5.NaN.add(0.0);
      complex6.INF.acos();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex6.reciprocal();
      complex7.NaN.log();
      complex4.ZERO.sqrt();
      Complex complex9 = complex7.ONE.multiply(0);
      complex7.ONE.atan();
      Complex complex10 = Complex.valueOf((-1900.07319005), (-1900.07319005));
      complex8.ZERO.abs();
      complex7.isInfinite();
      complex0.tan();
      complex6.sinh();
      Complex complex11 = Complex.I;
      complex1.I.sin();
      Complex complex12 = complex11.INF.asin();
      complex5.subtract(complex11);
      complex8.INF.abs();
      complex3.negate();
      complex4.readResolve();
      complex2.getField();
      Complex complex13 = complex9.acos();
      complex0.asin();
      complex0.createComplex(0.0, (-2.047124671392676E-8));
      complex10.tan();
      complex13.subtract(complex6);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.asin();
      complex0.divide((double) 1);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex3.ONE.log();
      complex6.NaN.cos();
      complex6.ONE.sqrt1z();
      complex3.INF.log();
      complex4.getImaginary();
      complex3.cos();
      Complex.valueOf(0.0);
      complex3.getImaginary();
      complex5.divide(1399.16657);
      Complex complex7 = complex5.negate();
      complex3.reciprocal();
      complex1.createComplex(2013.33530090772, 1);
      complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      try { 
        complex1.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1.0823142528533936, 4.24835413113866E-18);
      Complex complex1 = Complex.valueOf(1.0823142528533936);
      Complex complex2 = complex0.divide(1236.4189831089);
      Complex complex3 = complex0.pow(complex2);
      complex3.multiply(complex2);
      complex1.multiply(1181.891);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf((-288.27753088473), (-264.004));
      Complex complex3 = complex2.NaN.subtract((-2143.0216042));
      Complex complex4 = complex3.ZERO.add(3077.34333518);
      Complex complex5 = complex1.INF.reciprocal();
      complex5.ZERO.log();
      complex2.tanh();
      complex5.ONE.sqrt1z();
      Complex complex6 = complex3.NaN.pow(3077.34333518);
      complex6.I.sqrt1z();
      complex0.equals(complex2);
      complex2.INF.sqrt();
      Complex complex7 = complex3.NaN.add((-3192.3));
      complex7.I.negate();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.ZERO.cosh();
      complex9.NaN.sqrt1z();
      Complex complex10 = new Complex(0.0, 2187.2961186279);
      complex0.divide(complex10);
      complex3.hashCode();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex1.multiply(complex11);
      complex12.INF.pow((-264.004));
      complex6.pow(complex1);
      complex4.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-2.2728753031387152E-10));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.tan();
      complex2.NaN.tanh();
      complex2.isInfinite();
      complex1.readResolve();
      complex0.add((-2.2728753031387152E-10));
      Complex complex3 = complex2.sqrt();
      complex3.INF.asin();
      complex1.hashCode();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ZERO.multiply(complex2);
      complex5.I.add(complex4);
      Complex complex6 = complex4.asin();
      complex6.cosh();
      Complex.valueOf((-2.2728753031387152E-10), 0.0);
      complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(154.0889686545);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex.valueOf(154.0889686545);
      complex1.INF.getArgument();
      complex0.createComplex(5861.7734758314, 852.0);
      complex1.getField();
      complex2.divide(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.multiply(1969);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.tan();
      complex1.I.pow(2441.0);
      Complex complex5 = Complex.valueOf(0.0, (-666.10696226));
      Complex complex6 = complex5.I.cosh();
      complex6.ZERO.divide((-666.10696226));
      complex6.ZERO.log();
      complex5.ZERO.sinh();
      Complex complex7 = complex1.cos();
      complex0.sinh();
      Complex complex8 = complex6.reciprocal();
      complex8.INF.getArgument();
      complex7.reciprocal();
      complex1.multiply(0.0);
      complex1.getField();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-764.2), (-764.2));
      Complex complex1 = Complex.valueOf((-764.2));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.atan();
      complex2.readResolve();
      Complex complex4 = complex0.add(3475.675);
      Complex complex5 = complex4.ZERO.cosh();
      complex0.isInfinite();
      Complex complex6 = complex4.reciprocal();
      complex4.ZERO.cos();
      complex6.I.reciprocal();
      complex6.getImaginary();
      Complex complex7 = complex1.pow(3475.675);
      Complex complex8 = Complex.valueOf(3475.675, (-2091.11761));
      Complex complex9 = complex8.I.add(complex1);
      complex8.toString();
      complex4.hashCode();
      complex2.nthRoot(917);
      complex9.I.divide(0.0);
      complex8.isNaN();
      complex3.pow(complex9);
      complex1.tanh();
      Complex complex10 = complex7.sqrt1z();
      complex10.ZERO.multiply(complex5);
      Complex.valueOf((double) 917, (-764.2));
      Complex.valueOf(9.629416995696783E-5, (double) 917);
      complex6.subtract((-2091.11761));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.854801270322);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex1.ZERO.atan();
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex4.asin();
      complex7.I.tanh();
      complex5.NaN.add(complex2);
      complex3.nthRoot(1);
      complex6.getArgument();
      Complex complex8 = Complex.valueOf(1.5707963267948966, (double) 1);
      Complex complex9 = complex8.ONE.sinh();
      complex8.sqrt();
      complex5.hashCode();
      Complex.valueOf(119.854801270322, 119.854801270322);
      complex6.multiply(complex2);
      Complex complex10 = Complex.valueOf(1.5707963267948966);
      Complex complex11 = complex10.INF.negate();
      complex11.ZERO.hashCode();
      complex2.getArgument();
      complex4.reciprocal();
      complex2.add(complex9);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-2684.3));
      Complex complex1 = complex0.multiply(1029);
      Complex complex2 = complex0.sinh();
      complex0.negate();
      Complex complex3 = Complex.valueOf(2644.448969787075, (-52.69616865204));
      complex3.I.divide(complex2);
      complex1.multiply((-170));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-891.4090890537085));
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf((-503.755929391686), (-503.755929391686));
      Complex complex3 = complex0.add(complex2);
      complex3.ZERO.tan();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex5.INF.sqrt1z();
      complex0.getArgument();
      complex2.NaN.multiply(complex0);
      Complex complex7 = complex2.multiply(0.0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex7.multiply(complex8);
      complex10.reciprocal();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex11.sinh();
      complex12.ZERO.tanh();
      complex8.INF.createComplex(0.0, 1434.094);
      Complex complex13 = Complex.valueOf((-6269.92693094), 1946.7);
      Complex complex14 = complex4.conjugate();
      complex13.getReal();
      complex9.multiply((-503.755929391686));
      complex6.log();
      complex2.tan();
      complex14.subtract(1213.8075);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1413.51);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1754.0));
      complex0.subtract(1.7008878437355237E104);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.sqrt();
      complex0.toString();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.log();
      complex2.INF.subtract(0.0);
      Complex complex6 = complex5.NaN.createComplex(0.0, 0.0);
      Complex complex7 = complex6.add(0.0);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex7.I.reciprocal();
      Complex complex10 = complex9.I.createComplex(1364.9, 1364.9);
      complex8.toString();
      complex2.getField();
      complex7.ZERO.exp();
      complex0.atan();
      Complex complex11 = complex7.add(0.902267575263977);
      complex4.exp();
      complex0.reciprocal();
      complex8.acos();
      complex8.add(0.0);
      complex10.getImaginary();
      Complex.valueOf(1601.639);
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(334.198);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex0.NaN.asin();
      complex5.INF.tanh();
      Complex complex6 = complex5.NaN.acos();
      complex0.toString();
      complex0.isNaN();
      Complex complex7 = complex6.pow(complex1);
      complex0.getArgument();
      complex4.I.divide(complex3);
      complex1.INF.conjugate();
      complex5.ONE.abs();
      complex0.readResolve();
      Complex complex8 = complex5.sin();
      complex8.getArgument();
      complex4.I.add(0.7853981633974483);
      Complex.valueOf(334.198, 0.0);
      complex7.equals(complex0);
      complex1.INF.getField();
      Complex complex9 = complex2.exp();
      complex6.pow(complex4);
      complex0.divide(383.9);
      Complex complex10 = complex9.tanh();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      complex1.add(complex0);
      complex1.INF.getField();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.divide(0.0);
      complex3.getArgument();
      Complex.valueOf((-4249.1827728294), 1.0972476870931676E-268);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.NaN.hashCode();
      complex0.NaN.acos();
      try { 
        complex0.NaN.nthRoot((-431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -431
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex1.isNaN();
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex0.sqrt1z();
      complex0.equals((Object) null);
      complex0.getArgument();
      complex1.ZERO.log();
      Complex complex5 = complex2.ONE.tan();
      complex5.cosh();
      complex3.getArgument();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex3.tan();
      complex3.INF.add(0.0);
      complex2.nthRoot(17);
      complex4.subtract(complex2);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.INF.add(0.0);
      complex0.getField();
      complex7.nthRoot(552);
      Complex complex10 = complex2.negate();
      complex1.I.divide((double) 17);
      complex8.I.add(0.0);
      Complex complex11 = complex10.ONE.add((double) 17);
      complex0.multiply(complex8);
      Complex.valueOf(1.3548774719238281);
      complex0.divide(complex11);
      complex0.getReal();
      complex1.subtract(1696.572704815);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-635.0586));
      Complex complex1 = complex0.INF.negate();
      complex1.INF.pow((-154.769748453898));
      Complex complex2 = complex0.I.reciprocal();
      complex1.I.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex3.tan();
      complex6.INF.acos();
      Complex complex7 = complex1.asin();
      complex7.subtract((-327.6));
      Complex complex8 = complex7.acos();
      complex8.ONE.createComplex((-327.6), (-635.0586));
      Complex complex9 = complex0.asin();
      complex2.getReal();
      complex9.NaN.cosh();
      complex5.sinh();
      complex3.exp();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1039.0), (-130.702));
      complex0.ZERO.multiply((-130.702));
      complex0.NaN.acos();
      complex0.subtract(2671.0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex1.INF.getArgument();
      Complex complex2 = complex1.sin();
      complex2.NaN.subtract(complex1);
      complex2.ZERO.readResolve();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      complex1.I.tanh();
      complex3.ZERO.cosh();
      Complex complex4 = complex0.log();
      complex4.subtract(complex1);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = Complex.valueOf(150.8, 0.7853981633974483);
      complex6.NaN.abs();
      Complex complex7 = complex0.subtract(0.7853981633974483);
      complex4.ZERO.cos();
      complex7.ONE.hashCode();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.ONE.multiply(complex4);
      Complex complex10 = complex4.cos();
      complex10.I.cos();
      complex6.multiply(complex9);
      Complex.valueOf(0.0, 3327.165075);
      Complex complex11 = complex10.I.atan();
      complex11.ZERO.add(0.0);
      complex11.ZERO.sqrt();
      complex6.equals("T%\"9T!Obl|ldkL0~");
      complex1.cosh();
      complex3.isNaN();
      complex4.subtract(complex5);
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.isNaN();
      Complex complex2 = complex0.ONE.multiply(0);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.divide(0.0);
      complex5.ONE.add(complex2);
      complex1.equals(complex3);
      complex4.toString();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-1.4691239161932232E190));
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf((-1.4691239161932232E190));
      complex1.INF.getField();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex0.INF.asin();
      Complex complex6 = complex0.asin();
      complex1.NaN.divide(0.0);
      complex6.I.nthRoot(215);
      Complex complex7 = complex5.log();
      Complex complex8 = complex0.asin();
      complex8.ONE.divide(complex4);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex9.cosh();
      complex10.ONE.multiply((-4010));
      complex10.ONE.tan();
      complex9.multiply(0);
      Complex complex11 = complex5.exp();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex11.tan();
      complex13.asin();
      complex12.tan();
      complex7.sin();
      complex2.add((double) 215);
      Complex.valueOf(4163.634268561, 0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.NaN.sqrt1z();
      Complex.valueOf((-1.0), (-1436.0482877246));
      complex0.INF.nthRoot(663);
      Complex complex2 = complex1.ONE.subtract((-184.93876305978097));
      complex2.INF.cos();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1903.287272));
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = Complex.valueOf(768.98177077018);
      Complex complex5 = complex3.multiply(3129);
      complex5.nthRoot(3129);
      complex3.ONE.nthRoot(1);
      complex1.NaN.acos();
      Complex complex6 = complex5.NaN.multiply(complex3);
      Complex complex7 = complex6.ZERO.cos();
      complex7.ONE.add(768.98177077018);
      Complex complex8 = complex5.ONE.sqrt();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.ZERO.sqrt();
      complex9.acos();
      Complex complex11 = complex0.sqrt();
      complex11.cos();
      Complex complex12 = complex4.conjugate();
      complex12.pow(complex5);
      Complex complex13 = complex6.tan();
      complex13.conjugate();
      complex8.abs();
      complex2.sinh();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.divide(1047.24513154183);
      complex1.abs();
      complex0.add(0.0);
      Complex complex4 = complex3.multiply(1184);
      complex4.I.negate();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt1z();
      Complex complex1 = complex0.sqrt1z();
      complex1.hashCode();
      Complex complex2 = complex1.INF.divide(1.908818244934082);
      complex2.pow(1.908818244934082);
      complex1.NaN.log();
      complex0.abs();
      complex0.getImaginary();
      int int0 = 0;
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(2168.0);
      Complex complex1 = complex0.NaN.multiply(3507.493069043358);
      Complex complex2 = complex0.INF.multiply(0);
      complex2.INF.multiply(complex1);
      complex0.NaN.readResolve();
      complex0.isNaN();
      Complex complex3 = Complex.valueOf((-1304.609), 2.5193525310038174E-8);
      complex0.add(complex3);
      complex3.isInfinite();
      Complex complex4 = complex0.atan();
      complex0.getField();
      Complex complex5 = complex4.tan();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.INF.tanh();
      complex2.cos();
      Complex complex3 = complex2.divide(221.89563694);
      Complex complex4 = Complex.INF;
      complex0.ZERO.atan();
      complex4.nthRoot(1563);
      complex3.ONE.pow(complex4);
      Complex complex5 = complex3.add(221.89563694);
      Complex complex6 = complex5.ONE.multiply(complex3);
      Complex complex7 = complex6.I.acos();
      Complex.valueOf((-1141.0658184093527), 0.0);
      complex0.subtract(0.0);
      Complex complex8 = complex0.add(0.0);
      Complex complex9 = complex0.sin();
      complex9.ONE.sqrt();
      complex9.NaN.toString();
      Complex complex10 = Complex.valueOf((-794.4181494078808));
      Complex complex11 = Complex.valueOf(0.0, (-794.4181494078808));
      complex11.INF.negate();
      complex10.INF.tanh();
      Complex complex12 = complex9.cosh();
      complex12.ONE.multiply(1563);
      complex8.add((-794.4181494078808));
      complex2.hashCode();
      complex8.add((-2161.818913));
      complex1.readResolve();
      complex2.multiply((-1.0));
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-2.44242319E-315));
      complex0.ONE.subtract(0.0);
      Complex complex1 = complex0.I.tan();
      complex1.ZERO.asin();
      complex0.toString();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.pow(Double.NaN);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.INF.multiply((-1777));
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex2.log();
      Complex complex6 = complex3.INF.sqrt();
      complex2.exp();
      complex0.getField();
      Complex complex7 = complex3.divide((-3.4893601256685762E283));
      complex3.log();
      Complex complex8 = complex7.tan();
      complex2.getImaginary();
      Complex complex9 = complex7.multiply(complex8);
      complex9.ONE.createComplex(0.0, 0.0);
      complex7.add(0.0);
      complex1.isNaN();
      complex6.acos();
      complex0.log();
      complex2.divide(complex0);
      complex4.pow(0.0);
      Complex.valueOf((double) (-1777), 0.0);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5424.4042328));
      double double0 = complex0.abs();
      assertEquals(5424.4042328, double0, 0.01);
      
      Complex complex1 = complex0.INF.reciprocal();
      complex0.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.subtract(complex1);
      complex3.getArgument();
      complex3.NaN.hashCode();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex0.INF.subtract(complex1);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = Complex.NaN;
      complex7.INF.subtract(complex8);
      Complex complex9 = complex0.ZERO.cosh();
      double double1 = complex4.getArgument();
      assertEquals(0.0, double1, 0.01);
      
      Complex complex10 = complex9.ZERO.multiply(complex0);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex1.createComplex(0.6848117113113403, 5424.4042328);
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex12 = complex5.add(254.84238292);
      Complex complex13 = complex4.pow((-5424.4042328));
      Complex.valueOf(2.0, 2918.5336404268);
      Complex complex14 = complex1.createComplex(0.0, 0.0);
      complex14.ZERO.conjugate();
      Complex complex15 = complex2.multiply(0.6848117113113403);
      assertEquals(3714.6955455082457, complex15.getReal(), 0.01);
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      
      complex7.acos();
      Complex complex16 = complex11.tanh();
      assertEquals((-0.5304168186585175), complex16.getImaginary(), 0.01);
      assertEquals(1.2568261141176358, complex16.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex4));
      
      Complex complex17 = Complex.valueOf(254.84238292);
      complex17.NaN.hashCode();
      Complex.valueOf(0.0);
      complex12.equals("(-5424.4042328, 0.0)");
      assertEquals(5679.24661572, complex12.getReal(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex18 = complex8.exp();
      assertFalse(complex8.equals((Object)complex6));
      assertSame(complex18, complex7);
      assertNotSame(complex8, complex13);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3030.03774, 3030.03774);
      Complex complex1 = complex0.INF.sinh();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.add(3030.03774);
      assertEquals(3030.03774, complex2.getImaginary(), 0.01);
      assertEquals(6060.07548, complex2.getReal(), 0.01);
      assertEquals(3030.03774, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }
}
