/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:56:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.exp();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(457.5114);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.INF.createComplex(1749.257776545616, 1248.39642053359);
      complex0.createComplex((-713.7178405), 2636.0377);
      Complex complex3 = complex0.subtract(457.5114);
      Complex complex4 = complex0.cos();
      complex4.reciprocal();
      complex3.I.hashCode();
      complex0.toString();
      Complex complex5 = Complex.valueOf((-713.7178405));
      Complex complex6 = complex5.ZERO.tan();
      complex6.INF.subtract(2636.0377);
      complex6.ZERO.tan();
      complex5.ZERO.cosh();
      Complex.valueOf(245.261, 2636.0377);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex3.asin();
      complex8.INF.divide(complex5);
      Complex complex9 = complex7.sqrt();
      complex4.tan();
      complex9.sqrt();
      complex5.pow(complex7);
      complex0.getField();
      complex1.acos();
      Complex.valueOf(457.5114, (-2308.05077));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(457.49, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-883.7561978));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1313.563095529417), 0.993103448275862);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.exp();
      complex2.ONE.tanh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.add((-2082.1));
      Complex complex6 = complex5.ZERO.divide(0.993103448275862);
      complex6.ZERO.exp();
      Complex complex7 = complex5.INF.tanh();
      Complex complex8 = complex7.ZERO.pow((-1313.563095529417));
      complex4.NaN.createComplex(0.993103448275862, 0.993103448275862);
      Complex complex9 = complex0.I.conjugate();
      Complex complex10 = complex9.INF.pow(complex4);
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex3.I.tanh();
      complex12.ZERO.multiply(0.993103448275862);
      complex0.ONE.readResolve();
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex3.sinh();
      complex13.sqrt();
      complex4.sqrt1z();
      complex1.ONE.toString();
      complex3.createComplex(0.993103448275862, (-1313.563095529417));
      Complex complex15 = Complex.valueOf((-100.9813), Double.POSITIVE_INFINITY);
      complex14.toString();
      complex4.ONE.negate();
      complex11.readResolve();
      complex13.getField();
      Complex complex16 = complex15.multiply(1423);
      complex7.multiply(complex14);
      complex16.asin();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.10072895576308591, Double.NaN);
      Complex complex2 = Complex.ONE;
      complex2.nthRoot(1076);
      Complex complex3 = Complex.NaN;
      complex3.ONE.multiply(complex2);
      Complex complex4 = Complex.I;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(867.9727077971188, Double.POSITIVE_INFINITY);
      complex1.sin();
      complex1.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt();
      complex0.tanh();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.9919903587080315E-56, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(2411.8549289929, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.abs();
      complex0.getField();
      Complex complex1 = complex0.INF.createComplex(1.0, 1.0);
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.conjugate();
      complex2.tan();
      complex0.readResolve();
      Complex complex4 = complex3.atan();
      complex4.NaN.hashCode();
      Complex complex5 = complex3.subtract(989.153318);
      complex5.getField();
      Complex.valueOf(2719.4435175);
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(3164.7);
      Complex complex1 = Complex.valueOf(1233.104422349884, (-228.549680615));
      Complex complex2 = Complex.valueOf((-228.549680615), Double.POSITIVE_INFINITY);
      complex2.divide(Double.POSITIVE_INFINITY);
      complex1.divide((-353.304));
      Complex complex3 = Complex.valueOf((-353.304));
      Complex complex4 = Complex.INF;
      Complex.valueOf(1233.104422349884);
      Complex complex5 = complex3.sqrt();
      complex5.multiply((-1160226168));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex complex1 = Complex.valueOf((-24.246));
      Complex.valueOf((-24.246), (-24.246));
      Complex complex2 = Complex.INF;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex.valueOf((-24.246));
      Complex complex1 = Complex.valueOf((-24.246), (-24.246));
      Complex complex2 = complex1.divide((-24.246));
      complex0.sin();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.tan();
      Complex complex4 = new Complex((-24.246), (-24.246));
      complex0.tan();
      complex2.sqrt();
      Complex.valueOf((-1142.51), 344415.65507204214);
      complex3.sqrt();
      Complex complex5 = Complex.valueOf(344415.65507204214);
      complex5.getArgument();
      Complex.valueOf(0.0019983470489046196, 0.7750165152324895);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1972.895005340114));
      Complex complex1 = Complex.valueOf(1366.729, 1366.729);
      complex1.ZERO.add(complex0);
      Complex complex2 = complex0.add(complex1);
      complex1.asin();
      Complex complex3 = complex2.acos();
      complex1.ONE.getArgument();
      complex1.ZERO.log();
      Complex complex4 = complex1.add(8.900913084919285E85);
      Complex complex5 = complex4.multiply(complex3);
      complex1.I.getField();
      complex3.ONE.divide(complex1);
      Complex complex6 = complex5.ZERO.subtract((-1972.895005340114));
      complex5.conjugate();
      complex5.exp();
      complex5.pow(1366.729);
      complex0.pow(complex5);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex complex1 = Complex.valueOf((-24.246));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex4 = Complex.ONE;
      complex2.toString();
      complex2.tanh();
      complex1.reciprocal();
      complex4.readResolve();
      complex1.readResolve();
      Object object0 = new Object();
      complex3.ZERO.atan();
      complex4.sqrt1z();
      complex3.createComplex((-0.8902980835075466), Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex complex1 = Complex.valueOf((-24.246));
      Complex complex2 = complex0.divide((-24.246));
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf((-24.246));
      Complex complex4 = complex0.sin();
      complex0.equals(complex1);
      Complex complex5 = complex3.tan();
      Complex complex6 = new Complex((-24.246), (-3001.0));
      complex6.tan();
      complex4.sqrt();
      Complex.valueOf((-6.22836197265283E-8), (-24.246));
      complex2.sqrt();
      complex5.getArgument();
      Complex.valueOf((-24.246), (-0.0010858102411822476));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.sqrt();
      complex2.NaN.acos();
      complex2.getArgument();
      Complex complex3 = Complex.valueOf((double) 1756, 1836.4);
      complex3.ONE.pow((double) 1756);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.996603656086786);
      Complex complex1 = new Complex((-2774.57), 2309.703078352969);
      Complex complex2 = complex0.I.pow(complex1);
      complex1.INF.divide(2309.703078352969);
      complex0.NaN.hashCode();
      complex2.I.multiply(complex1);
      Complex complex3 = complex2.ZERO.createComplex(2309.703078352969, 2309.703078352969);
      complex2.hashCode();
      complex0.cosh();
      complex1.divide(complex3);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.getField();
      Complex complex2 = complex0.NaN.exp();
      complex2.multiply(47.16030491566);
      complex0.getArgument();
      Complex complex3 = complex2.add(complex1);
      complex0.toString();
      complex3.I.divide(complex1);
      Complex complex4 = complex0.tanh();
      complex3.reciprocal();
      complex4.readResolve();
      Complex complex5 = Complex.valueOf((-1080.0), (-24.246));
      complex5.readResolve();
      Object object0 = new Object();
      Complex complex6 = Complex.ONE;
      complex6.equals((Object) null);
      complex0.abs();
      complex1.createComplex(1745.3420923, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.I.toString();
      Complex complex4 = Complex.valueOf(1222.43002);
      complex4.readResolve();
      Complex complex5 = new Complex(1222.43002, 1222.43002);
      complex5.equals(complex0);
      complex1.add(1222.43002);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex complex1 = Complex.valueOf((-24.246));
      Complex complex2 = complex1.acos();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex3 = complex0.divide((-1220.114));
      Complex complex4 = Complex.I;
      complex4.pow(complex0);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex0.divide(2.0);
      complex3.equals(complex2);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.tan();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, (-24.246));
      Complex complex10 = complex1.tan();
      complex10.sqrt();
      Complex.valueOf(1.5430806348152437, (-1220.114));
      complex10.sqrt();
      complex0.getArgument();
      complex5.asin();
      Complex complex11 = Complex.valueOf(2.0);
      Complex complex12 = complex11.conjugate();
      complex5.nthRoot(320);
      complex8.pow(complex7);
      Complex complex13 = Complex.ZERO;
      complex13.multiply(320);
      complex6.subtract(complex12);
      complex2.readResolve();
      complex2.multiply(1.3810978455418157);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.sqrt1z();
      complex1.toString();
      complex0.isNaN();
      complex0.nthRoot(449);
      Complex complex2 = complex0.tanh();
      complex2.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex complex1 = Complex.valueOf((-24.246));
      Complex complex2 = complex1.acos();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex3 = complex2.add(complex1);
      complex2.toString();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex1.reciprocal();
      complex3.readResolve();
      complex4.tan();
      complex2.cosh();
      complex0.toString();
      Complex complex6 = Complex.NaN;
      complex6.sinh();
      complex4.tanh();
      complex3.toString();
      complex5.sin();
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(0.02412080392241478);
      complex8.multiply(3050);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-5.235397688850367E180));
      complex0.tan();
      Complex complex1 = new Complex(2088.928708715, 1685.6);
      complex1.sqrt();
      Complex.valueOf((-1.1211083853006645E-156), 164.34);
      Complex complex2 = complex1.sqrt();
      complex0.getArgument();
      Complex complex3 = complex0.asin();
      complex3.conjugate();
      try { 
        complex2.nthRoot((-2146791114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,146,791,114
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.246), (-20.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply((-24.246));
      complex2.getArgument();
      Complex complex3 = Complex.valueOf((-2.1053518953497585));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.add(complex2);
      complex3.toString();
      complex0.readResolve();
      complex0.tan();
      Complex complex6 = complex0.cosh();
      Complex complex7 = Complex.valueOf((-2.1053518953497585));
      Complex complex8 = new Complex((-55.448684172));
      complex3.toString();
      complex1.sinh();
      complex8.tanh();
      complex7.toString();
      complex6.conjugate();
      complex3.divide((-55.448684172));
      complex8.divide(1967.177);
      Complex.valueOf(522.5751714360135, (-24.246));
      complex5.nthRoot(3527);
      Complex complex9 = Complex.NaN;
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.multiply(1222.43002);
      complex3.abs();
      Complex complex6 = Complex.I;
      complex6.reciprocal();
      Complex complex7 = Complex.I;
      complex7.createComplex(1.0, 1728.777113336014);
      complex4.tanh();
      Complex.valueOf(1222.43002);
      Complex complex8 = complex3.sqrt();
      complex5.asin();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex1.multiply(complex10);
      complex1.exp();
      complex11.toString();
      Complex complex12 = complex3.reciprocal();
      complex8.readResolve();
      complex12.tanh();
      complex3.subtract((double) 1522);
      Complex complex13 = complex9.cos();
      complex13.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      complex3.nthRoot(604);
      Complex complex6 = complex5.atan();
      Complex complex7 = new Complex(1522, 1.0);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex5.multiply(1222.43002);
      complex6.getArgument();
      Complex complex11 = Complex.valueOf(734.7003334896928);
      complex1.add(complex8);
      Complex.valueOf(734.7003334896928, 1929.92613048);
      Complex complex12 = Complex.INF;
      complex12.toString();
      complex10.readResolve();
      complex11.tan();
      complex6.readResolve();
      Object object0 = new Object();
      complex5.equals(object0);
      complex10.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.acos();
      complex0.createComplex(1522, (-2017.091));
      Complex complex7 = complex0.tanh();
      Complex.valueOf(1222.43002);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = Complex.NaN;
      complex9.asin();
      complex7.sqrt();
      complex9.cosh();
      complex2.multiply(complex5);
      complex8.exp();
      complex3.toString();
      complex3.reciprocal();
      Complex complex10 = Complex.I;
      complex10.readResolve();
      complex0.tanh();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.subtract((-2017.091));
      Complex complex12 = complex9.cos();
      complex6.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(3581.0, 3581.0);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.valueOf(3581.0, 0.0);
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex0.INF.createComplex(3581.0, (-306.36128904964));
      complex4.I.add(complex1);
      Complex complex5 = complex4.ZERO.add(3581.0);
      complex5.pow(complex3);
      complex5.subtract(complex4);
      complex0.tan();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.ONE.asin();
      complex7.log();
      complex2.createComplex((-1.0), (-306.36128904964));
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex8.asin();
      complex10.multiply((-1413));
      Complex complex11 = complex3.divide(complex1);
      complex11.abs();
      complex9.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex5.multiply(1222.43002);
      complex5.getArgument();
      Complex complex8 = Complex.valueOf((double) 1522);
      Complex complex9 = complex8.add(complex7);
      complex2.toString();
      complex7.readResolve();
      Complex complex10 = complex6.tan();
      complex5.readResolve();
      complex10.equals(complex3);
      complex9.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.multiply(1222.43002);
      Complex complex7 = complex5.add(complex3);
      complex3.abs();
      Complex complex8 = Complex.I;
      complex8.reciprocal();
      Complex complex9 = Complex.I;
      complex9.createComplex(1.0, 1728.777113336014);
      complex4.tanh();
      Complex.valueOf(0.41421356237309515);
      Complex complex10 = complex5.sqrt();
      complex6.asin();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex1.multiply(complex12);
      complex7.exp();
      complex13.toString();
      Complex complex14 = complex3.reciprocal();
      complex10.readResolve();
      complex14.tanh();
      complex3.subtract((double) 1522);
      Complex complex15 = complex11.cos();
      complex15.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      complex0.readResolve();
      complex1.nthRoot(1476);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.reciprocal();
      complex0.atan();
      Complex complex4 = complex3.multiply(complex1);
      complex4.INF.divide(complex3);
      complex2.equals("f;3r7*j!Jl&7");
      Complex complex5 = complex0.subtract((-111.38508670261));
      complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex0.divide((double) 1522);
      Complex complex5 = complex1.divide(1418.155256);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.divide(1222.43002);
      Complex complex10 = Complex.valueOf(1365.0, 922.0971);
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      complex0.readResolve();
      complex4.tan();
      complex9.tanh();
      complex10.tan();
      complex2.sqrt();
      Complex.valueOf(1365.0, 922.0971);
      complex4.sqrt();
      complex5.getArgument();
      complex7.asin();
      complex5.conjugate();
      Complex complex11 = new Complex(24.246);
      complex11.nthRoot(37);
      complex6.multiply(2761);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.ONE.tan();
      complex0.sqrt();
      complex0.ONE.hashCode();
      complex0.isInfinite();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex5.multiply(1222.43002);
      complex5.getArgument();
      Complex complex8 = Complex.valueOf((-2.782159838013853));
      Complex complex9 = complex8.add(complex7);
      complex2.toString();
      complex7.readResolve();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex10.cosh();
      complex10.toString();
      complex5.sinh();
      Complex complex12 = complex11.tanh();
      complex12.toString();
      Complex complex13 = Complex.NaN;
      complex13.conjugate();
      Complex complex14 = Complex.ZERO;
      complex14.divide((-20.0));
      complex9.divide(Double.NaN);
      Complex.valueOf(4396.88619, 1491.13854);
      complex3.nthRoot(1522);
      Complex complex15 = Complex.I;
      complex15.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getField();
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.pow(1457.68);
      Complex complex4 = complex3.I.divide(1457.68);
      complex4.I.toString();
      complex1.INF.readResolve();
      Complex complex5 = complex1.ONE.tan();
      Complex complex6 = complex0.cosh();
      complex1.ONE.toString();
      Complex complex7 = complex0.sinh();
      complex7.I.tanh();
      complex2.toString();
      Complex complex8 = complex5.ZERO.conjugate();
      complex0.divide(1834.0);
      complex1.exp();
      complex6.toString();
      Complex complex9 = complex4.reciprocal();
      complex8.readResolve();
      complex1.tanh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getField();
      Complex complex1 = new Complex(2335.0);
      Complex complex2 = Complex.ZERO;
      complex1.readResolve();
      complex2.nthRoot(1476);
      Complex complex3 = complex2.reciprocal();
      complex1.atan();
      Complex complex4 = Complex.I;
      complex4.multiply(complex3);
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 20.0);
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sin();
      complex0.pow((-1866.581961132));
      Complex complex3 = complex0.divide(1.0);
      complex3.toString();
      complex2.readResolve();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.cosh();
      complex4.toString();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.tanh();
      complex1.toString();
      complex7.conjugate();
      complex5.divide(1834.0);
      Complex complex8 = complex7.exp();
      complex5.toString();
      Complex complex9 = complex8.reciprocal();
      complex9.readResolve();
      complex8.tanh();
      complex2.subtract((-24.246));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex2.I.add(complex1);
      complex0.conjugate();
      complex1.nthRoot(4);
      Complex complex3 = complex0.multiply(126);
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.getField();
      complex0.NaN.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex2.I.divide(3.3903703993793316E224);
      Complex complex5 = complex0.NaN.pow(complex4);
      complex5.ZERO.negate();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex2.sin();
      complex1.NaN.divide(0.0);
      Complex complex8 = complex1.ZERO.atan();
      complex4.equals(complex0);
      complex7.readResolve();
      Complex complex9 = complex2.tan();
      complex9.INF.tanh();
      complex6.ZERO.tan();
      complex3.sqrt();
      Complex.valueOf(3.3903703993793316E224, (-1142.51));
      Complex complex10 = complex4.sqrt();
      complex10.ONE.getArgument();
      Complex complex11 = complex1.I.asin();
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = Complex.valueOf(Double.NaN);
      complex12.add(complex13);
      complex8.asin();
      complex4.sinh();
      complex3.isNaN();
      complex5.equals("");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.multiply(1222.43002);
      complex6.getArgument();
      Complex complex7 = complex1.ZERO.add(complex3);
      complex7.abs();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex4.createComplex((-1.0), 0.41421356237309515);
      complex9.ONE.tanh();
      Complex.valueOf(1048.143);
      Complex complex10 = complex1.sqrt();
      complex8.asin();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex3.cosh();
      complex1.multiply(complex11);
      complex12.exp();
      complex12.toString();
      complex6.reciprocal();
      complex10.readResolve();
      complex5.tanh();
      complex12.subtract(3082.78026);
      complex5.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ONE;
      complex2.nthRoot(113);
      Complex complex3 = new Complex((-2.782159838013853));
      complex1.divide(complex3);
      complex3.I.divide(0.9999996654029838);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.subtract(complex4);
      complex4.getField();
      complex0.nthRoot(981);
      complex4.multiply((-2158));
      Complex.valueOf(40367.28306549849, 0.0);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.add(0.0);
      complex7.acos();
      Complex.valueOf((-533.623916994034), 0.0);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(200.9185981075383, 3273.6003321644243);
      complex0.getField();
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.pow(24.246);
      Complex complex4 = complex2.divide(1.676081191364984E71);
      complex2.toString();
      complex0.readResolve();
      complex4.tan();
      Complex complex5 = complex3.cosh();
      complex5.toString();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.tanh();
      complex7.toString();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.conjugate();
      complex8.divide(200.9185981075383);
      complex9.divide(1457.68);
      Complex.valueOf(1834.0, 1834.0);
      Complex complex10 = new Complex(24.246, 1249.98378588);
      complex10.nthRoot(982);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2.9495302347586214E-225, 2.9495302347586214E-225);
      Complex complex2 = complex0.multiply(0.6242659526396992);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.tanh();
      complex5.reciprocal();
      Complex.valueOf(2.9495302347586214E-225);
      Complex complex6 = Complex.valueOf((-2431.772189853422));
      complex6.readResolve();
      complex0.multiply(0);
      Complex complex7 = complex3.sqrt();
      complex3.cos();
      complex4.getReal();
      complex0.cos();
      complex1.isNaN();
      Complex complex8 = Complex.ONE;
      complex8.isInfinite();
      complex7.pow(0.6242659526396992);
      complex8.atan();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.multiply(1222.43002);
      complex6.getArgument();
      Complex complex7 = complex1.ZERO.add(complex3);
      complex3.toString();
      complex3.readResolve();
      Complex complex8 = complex7.tan();
      complex6.cosh();
      complex5.toString();
      Complex complex9 = complex5.sinh();
      complex4.tanh();
      complex2.toString();
      complex4.conjugate();
      complex3.divide(1222.43002);
      complex9.divide(Double.NaN);
      Complex.valueOf(2.053884626293416E-85, 1491.13854);
      // Undeclared exception!
      complex8.nthRoot(2145223091);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = (Complex)complex1.readResolve();
      List<Complex> list0 = complex0.nthRoot(1476);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.atan();
      complex4.multiply(complex3);
      complex4.equals(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      complex4.acos();
      Complex complex5 = complex0.multiply(1222.43002);
      complex5.getArgument();
      Complex complex6 = complex1.ZERO.add(complex3);
      complex0.ONE.createComplex(0.0, 1522);
      Complex complex7 = complex5.pow(Double.NaN);
      Complex complex8 = complex2.pow(1885.8124);
      Complex complex9 = complex8.I.subtract(complex1);
      Complex complex10 = complex9.ZERO.divide(716.0);
      Complex complex11 = complex10.multiply(complex2);
      complex10.ZERO.multiply(1522);
      complex10.NaN.sqrt1z();
      complex5.tanh();
      Complex complex12 = Complex.valueOf(716.0, Double.NaN);
      Complex complex13 = complex7.sqrt();
      complex12.getArgument();
      complex11.asin();
      complex6.conjugate();
      complex0.nthRoot(1522);
      complex7.multiply((-10));
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.getField();
      complex0.NaN.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex2.I.divide(3.3903703993793316E224);
      complex0.NaN.pow(complex4);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex2.sin();
      complex1.NaN.divide(0.0);
      complex1.ZERO.atan();
      complex3.isInfinite();
      Complex complex7 = (Complex)complex6.readResolve();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex9.NaN.atan();
      Complex complex11 = complex10.ZERO.tan();
      complex3.sqrt();
      complex11.add(0.0);
      complex4.pow(0.0);
      Complex complex12 = complex3.tan();
      complex4.sin();
      Complex complex13 = complex12.divide(0.0014253073084356175);
      Complex complex14 = new Complex(0.0);
      complex14.multiply(322.77919);
      complex5.equals(complex10);
      complex13.cosh();
      Complex complex15 = Complex.I;
      complex15.conjugate();
      complex7.sinh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex0.equals((Object) null);
      Complex complex2 = Complex.valueOf(8.869266069401045E-8);
      complex2.ONE.toString();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.sqrt();
      complex0.subtract(complex3);
      Complex complex5 = complex4.tanh();
      complex5.ZERO.abs();
      Complex complex6 = complex3.reciprocal();
      complex1.I.createComplex(464.9145552112, 661.4736374);
      Complex.valueOf(464.9145552112);
      Complex complex7 = complex6.ZERO.sqrt();
      complex0.NaN.asin();
      complex4.ONE.sqrt();
      complex6.NaN.cosh();
      complex6.multiply(complex5);
      complex3.I.exp();
      complex7.I.toString();
      complex5.reciprocal();
      complex7.readResolve();
      Complex complex8 = complex1.tanh();
      complex8.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.getField();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.I.divide(3.3903703993793316E224);
      complex2.subtract(complex5);
      Complex complex6 = complex3.tanh();
      complex0.abs();
      complex6.reciprocal();
      complex1.createComplex(3.3903703993793316E224, 508.4331769);
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex1.asin();
      Complex complex10 = Complex.I;
      complex10.sqrt();
      complex8.cosh();
      Complex complex11 = new Complex(728.49);
      complex7.multiply(complex11);
      complex4.exp();
      complex9.toString();
      Complex complex12 = Complex.I;
      complex12.reciprocal();
      Complex complex13 = Complex.ZERO;
      complex13.readResolve();
      complex0.tanh();
      Complex complex14 = Complex.ZERO;
      complex14.subtract(728.49);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex0.equals((Object) null);
      Complex.valueOf(8.869266069401045E-8);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.add(complex1);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.sin();
      complex7.divide(8.869266069401045E-8);
      complex4.atan();
      Complex complex10 = Complex.NaN;
      complex2.equals(complex10);
      complex8.readResolve();
      complex0.tan();
      complex0.tanh();
      complex9.atan();
      complex5.tan();
      complex6.sqrt();
      Complex complex11 = Complex.valueOf(8.869266069401045E-8, (-1142.51));
      complex4.sqrt();
      complex11.getArgument();
      complex3.asin();
      complex8.conjugate();
      try { 
        complex2.nthRoot((-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -10
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(200.9185981075383, 200.9185981075383);
      Complex complex1 = complex0.multiply(200.9185981075383);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.reciprocal();
      Complex.valueOf(200.9185981075383);
      Complex.valueOf(4798.7852052186);
      complex5.ZERO.readResolve();
      complex5.multiply(0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.I.cos();
      complex1.getReal();
      complex4.sqrt();
      complex1.cosh();
      Complex complex8 = complex7.multiply(complex2);
      complex2.exp();
      complex4.toString();
      complex3.reciprocal();
      complex8.readResolve();
      complex8.tanh();
      complex5.subtract(200.9185981075383);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getField();
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(3.3903703993793316E224);
      Complex complex3 = complex1.divide(3.3903703993793316E224);
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex0.add(complex2);
      complex1.sin();
      Complex complex6 = complex1.divide((-315.0));
      Complex complex7 = complex5.atan();
      complex1.equals(complex6);
      complex7.readResolve();
      complex3.tan();
      Complex complex8 = Complex.valueOf(2.718281828459045);
      complex8.tanh();
      complex4.atan();
      Complex complex9 = Complex.valueOf((-524.466));
      Complex complex10 = complex9.tan();
      complex10.sqrt();
      Complex.valueOf(3561.448870122683, 2.718281828459045);
      Complex complex11 = Complex.INF;
      complex11.sqrt();
      complex0.getArgument();
      Complex complex12 = new Complex(0.0);
      complex12.asin();
      complex8.conjugate();
      complex2.nthRoot(1177);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-3895.88066));
      complex0.getField();
      Complex complex1 = complex0.multiply((-3895.88066));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex1.INF.cosh();
      complex5.ONE.tanh();
      Complex complex6 = complex4.divide(1968.237461);
      complex1.ZERO.readResolve();
      complex6.add(complex5);
      complex1.getImaginary();
      complex3.subtract(complex4);
      complex3.sin();
      complex2.multiply(complex6);
      complex5.cosh();
      complex1.sqrt1z();
      complex4.add((-1772.239100508));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-655.760987));
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      complex1.INF.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex4.ONE.divide(complex1);
      Complex complex7 = complex5.subtract(complex0);
      complex7.INF.subtract(20.0);
      complex5.hashCode();
      Complex complex8 = complex4.divide(complex5);
      Complex complex9 = complex8.atan();
      Complex complex10 = complex9.NaN.sqrt();
      complex8.ONE.cosh();
      complex0.hashCode();
      complex10.multiply(complex9);
      Complex complex11 = complex10.I.createComplex(0.0, 1.304245948791504);
      complex5.getArgument();
      Complex complex12 = complex8.subtract(6.283185307179586);
      complex12.ZERO.negate();
      complex2.getReal();
      complex6.getField();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex9.multiply(3491);
      complex8.multiply(complex14);
      Complex.valueOf(Double.NaN, 2989.0215256);
      complex13.sinh();
      complex9.exp();
      complex0.isNaN();
      complex11.divide((double) 3491);
      complex1.getImaginary();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.NaN.add(244.19);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex1.ONE.pow(complex0);
      complex0.pow((-9.340259278913173E-8));
      Complex complex5 = complex1.ONE.pow((-9.340259278913173E-8));
      Complex.valueOf(0.0, (-9.340259278913173E-8));
      complex4.isNaN();
      complex5.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(413.6872);
      complex0.I.toString();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.ZERO.subtract(413.6872);
      Complex complex4 = complex3.NaN.divide(1.1521174907684326);
      complex0.getReal();
      Complex complex5 = complex0.multiply(413.6872);
      complex1.INF.log();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.cosh();
      complex5.ONE.getField();
      complex0.toString();
      complex5.INF.sqrt();
      complex5.isNaN();
      complex2.I.hashCode();
      complex5.isNaN();
      complex4.getArgument();
      complex2.atan();
      complex2.getImaginary();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex7.divide((-18.430862426757812));
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(9.563454814394247E171, 9.563454814394247E171);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.ONE.sin();
      complex0.ZERO.readResolve();
      Complex complex5 = complex4.divide(Double.NaN);
      complex5.ZERO.sqrt();
      Complex complex6 = complex0.negate();
      complex6.ONE.toString();
      Complex complex7 = complex2.negate();
      complex7.subtract(complex6);
      Complex complex8 = complex0.sqrt();
      complex1.getReal();
      Complex complex9 = complex8.cosh();
      complex9.INF.multiply(2118.6571701421);
      complex9.I.pow(9.563454814394247E171);
      Complex complex10 = Complex.valueOf(9.563454814394247E171);
      complex8.ZERO.subtract(complex10);
      Complex complex11 = complex8.reciprocal();
      complex11.ZERO.divide(complex2);
      complex4.readResolve();
      complex1.readResolve();
      complex10.multiply(9.563454814394247E171);
      Complex complex12 = complex1.sqrt();
      complex3.add(complex12);
      complex10.sqrt();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tan();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-948.98));
      complex2.I.sqrt();
      Complex complex3 = complex2.INF.negate();
      complex2.I.pow(complex0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.INF.sqrt();
      complex5.INF.tan();
      complex1.multiply(Double.NaN);
      complex3.hashCode();
      complex2.hashCode();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.log();
      complex1.I.add((-5996.565730471));
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.INF.cos();
      complex1.ONE.pow(6.283185307179586);
      complex3.INF.multiply(1);
      complex1.isNaN();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex5.createComplex((-20.0), 6.283185307179586);
      complex8.divide(complex3);
      complex8.INF.acos();
      complex4.getReal();
      complex0.NaN.getField();
      complex6.getImaginary();
      Complex complex9 = complex2.asin();
      complex9.ONE.log();
      Complex complex10 = complex8.sqrt1z();
      complex10.I.tan();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex5.asin();
      complex12.ONE.atan();
      complex6.divide(complex9);
      complex2.add(185.0);
      Complex.valueOf(-0.0, 0.3248254060745239);
      complex11.tan();
      complex7.divide(-0.0);
      complex9.getReal();
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3079.91), 0.0);
      complex0.ONE.hashCode();
      Complex complex1 = Complex.INF;
      complex1.INF.nthRoot(113);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.subtract(complex0);
      complex4.getField();
      complex2.nthRoot(113);
      complex2.multiply(113);
      Complex complex5 = Complex.valueOf(1.5060972626944096E35, 0.0);
      complex5.INF.add(0.0);
      complex3.INF.acos();
      Complex.valueOf(0.0, 20.0);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(1222.43002);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(1222.43002);
      Complex complex3 = complex2.ONE.createComplex(1222.43002, 1222.43002);
      complex3.NaN.nthRoot(1522);
      Complex complex4 = complex1.atan();
      complex4.acos();
      Complex complex5 = complex0.multiply(1222.43002);
      complex5.getArgument();
      complex1.ZERO.add(complex3);
      Complex complex6 = complex0.ONE.createComplex(0.0, 1522);
      Complex complex7 = complex5.pow(Double.NaN);
      Complex complex8 = complex2.pow(1885.8124);
      Complex complex9 = complex8.I.subtract(complex1);
      Complex complex10 = complex9.ZERO.divide(716.0);
      complex10.multiply(complex2);
      complex10.ZERO.multiply(1522);
      complex10.NaN.sqrt1z();
      Complex complex11 = complex5.tanh();
      complex0.add((-6.456588023278983E-253));
      complex7.pow((double) 1522);
      complex1.tan();
      Complex complex12 = complex11.sin();
      complex12.ZERO.divide(322.77919);
      complex12.multiply(1222.43002);
      complex1.equals(complex6);
      complex6.cosh();
      complex12.conjugate();
      complex3.sinh();
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.INF.reciprocal();
      complex3.getField();
      Complex complex5 = complex3.INF.divide(complex1);
      Complex complex6 = complex1.pow(complex2);
      complex3.add(0.0);
      Complex complex7 = complex0.multiply(1);
      complex6.abs();
      Complex complex8 = complex3.ONE.reciprocal();
      Complex complex9 = complex5.pow(0.0);
      Complex complex10 = complex9.sqrt1z();
      complex4.toString();
      Complex complex11 = complex1.sqrt();
      complex11.toString();
      complex8.getReal();
      complex0.readResolve();
      complex7.nthRoot(1);
      complex1.getField();
      Complex.valueOf(0.0);
      complex10.reciprocal();
      complex1.add((-7.756800301729815E-9));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.getField();
      complex0.NaN.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex2.I.divide(3.3903703993793316E224);
      complex0.NaN.pow(complex4);
      complex0.add(complex1);
      Complex complex5 = complex2.sin();
      complex1.NaN.divide(0.0);
      complex1.ZERO.atan();
      complex4.equals(complex0);
      complex5.readResolve();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.NaN.atan();
      complex8.ZERO.tan();
      complex3.sqrt();
      Complex.valueOf(3.3903703993793316E224, (-1142.51));
      Complex complex9 = complex4.sqrt();
      complex9.ONE.getArgument();
      Complex complex10 = complex1.I.asin();
      complex10.INF.conjugate();
      try { 
        complex6.nthRoot((-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -10
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.sqrt1z();
      double double1 = (-1225.7430203);
      Complex complex2 = Complex.valueOf((-1225.7430203), (-1225.7430203));
      Complex complex3 = complex1.cos();
      Complex complex4 = null;
      complex2.ONE.cos();
      try { 
        complex3.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-720.107572316658), (-720.107572316658));
      complex0.ZERO.negate();
      complex0.NaN.cosh();
      Complex complex1 = complex0.createComplex(504.610206243685, (-338.09));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.negate();
      complex4.ONE.getArgument();
      Complex.valueOf((-720.107572316658), (-338.09));
      complex0.tanh();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.pow(0.0);
      complex0.toString();
      Complex complex2 = complex0.sinh();
      complex2.ONE.getField();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex0.NaN.exp();
      complex4.ZERO.divide((-989.41));
      Complex complex5 = complex0.cosh();
      complex5.I.negate();
      Complex complex6 = complex3.ONE.subtract(0.0);
      complex6.INF.toString();
      Complex.valueOf(137.2959621);
      Complex complex7 = complex2.ZERO.multiply(complex0);
      Complex complex8 = complex3.negate();
      complex8.INF.negate();
      complex2.INF.exp();
      complex2.ONE.abs();
      Complex complex9 = complex3.divide(0.0);
      Complex complex10 = complex1.acos();
      Complex complex11 = complex2.sqrt();
      complex3.multiply(complex1);
      complex10.ONE.divide(complex9);
      complex11.getArgument();
      complex10.ONE.sqrt1z();
      complex3.getField();
      complex10.sqrt1z();
      complex10.toString();
      complex2.subtract(0.0);
      complex7.getArgument();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex0.equals((Object) null);
      Complex.valueOf(8.869266069401045E-8);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ZERO.sqrt();
      complex0.subtract(complex2);
      Complex complex4 = complex3.tanh();
      complex4.ZERO.abs();
      Complex complex5 = complex2.reciprocal();
      complex1.I.createComplex(464.9145552112, 661.4736374);
      Complex.valueOf(464.9145552112);
      Complex complex6 = complex5.ZERO.sqrt();
      complex0.NaN.asin();
      complex3.ONE.sqrt();
      complex5.NaN.cosh();
      complex5.multiply(complex4);
      complex2.I.exp();
      complex6.I.toString();
      complex4.reciprocal();
      complex6.readResolve();
      Complex complex7 = complex1.tanh();
      complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.negate();
      Complex complex2 = complex1.ONE.createComplex((-1367.6306119), (-1367.6306119));
      complex2.NaN.sin();
      complex2.ZERO.divide((-1367.6306119));
      complex1.ONE.multiply((-1367.6306119));
      complex1.ONE.readResolve();
      complex0.pow(complex1);
      Complex complex3 = complex0.negate();
      complex2.exp();
      Complex complex4 = complex3.add((-1367.6306119));
      complex4.multiply((-1163.850438));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add((-189.406108989));
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex0.ONE.pow(complex1);
      complex1.INF.atan();
      complex0.abs();
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex4.ZERO.log();
      Complex complex7 = complex3.ONE.atan();
      complex1.ZERO.multiply(0);
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex3.cos();
      complex9.ONE.add(6.283185307179586);
      complex4.getReal();
      Complex.valueOf(0.0, 20.0);
      complex4.NaN.sin();
      complex0.isNaN();
      complex5.abs();
      complex6.divide(Double.NaN);
      complex6.cos();
      complex1.multiply(complex7);
      complex8.hashCode();
      complex3.add((-390.446345697676));
      complex6.createComplex((-543.296915), 1.8112388823726723E41);
      complex3.getField();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1411.908));
      complex0.toString();
      complex0.NaN.readResolve();
      Complex complex1 = new Complex((-1411.908), (-1271.3));
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.multiply((-1271.3));
      Complex complex3 = complex2.pow((-1411.908));
      complex0.I.cosh();
      Complex complex4 = complex0.divide((-1411.908));
      complex4.I.asin();
      Complex complex5 = complex4.tan();
      complex3.subtract(724.181065907599);
      complex5.log();
      Complex.valueOf(724.181065907599, (-1411.908));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3737.0), (-3737.0));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.ZERO.exp();
      complex0.isInfinite();
      Complex complex4 = complex1.sqrt();
      complex3.NaN.exp();
      complex2.INF.getArgument();
      complex4.subtract(complex1);
      Complex complex5 = complex4.INF.divide((-3737.0));
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.sqrt1z();
      complex5.INF.getField();
      Complex complex8 = complex7.INF.exp();
      complex2.subtract((-3737.0));
      complex3.I.conjugate();
      Complex complex9 = complex2.createComplex((-3737.0), 1742.3);
      complex5.ZERO.divide(complex8);
      complex6.isNaN();
      complex4.abs();
      complex9.sqrt1z();
      complex9.add(0.7853981633974483);
      complex5.log();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-451.1));
      Complex complex1 = complex0.add((-451.1));
      Complex complex2 = complex1.NaN.exp();
      complex2.INF.subtract(0.0);
      complex1.I.abs();
      Complex complex3 = complex1.log();
      complex3.NaN.add(complex1);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-24.246));
      Complex complex1 = complex0.atan();
      complex1.readResolve();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(519.0, 20.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.ONE.createComplex(519.0, 20.0);
      complex2.INF.add(complex1);
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex1.INF.cos();
      complex0.equals((Object) null);
      complex4.getArgument();
      Complex complex5 = complex0.sin();
      Complex complex6 = Complex.valueOf(20.0);
      complex6.ONE.getField();
      Complex complex7 = complex0.subtract(519.0);
      Complex complex8 = complex1.negate();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex7.asin();
      complex11.I.sqrt();
      complex5.ONE.sin();
      Complex complex12 = complex11.divide((-465.75));
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex8.multiply(complex4);
      complex14.INF.readResolve();
      complex5.getReal();
      complex0.hashCode();
      complex7.subtract(complex12);
      Complex complex15 = complex1.subtract(776.9513959272);
      complex10.readResolve();
      complex13.sin();
      complex15.getImaginary();
      complex10.acos();
      Complex complex16 = complex1.reciprocal();
      complex16.readResolve();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(200.9185981075383, 200.9185981075383);
      Complex complex1 = complex0.multiply(200.9185981075383);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.ZERO.sinh();
      complex3.ONE.tanh();
      Complex complex4 = complex1.reciprocal();
      Complex.valueOf(200.9185981075383);
      Complex complex5 = Complex.valueOf(4798.7852052186);
      complex4.ZERO.readResolve();
      complex4.multiply(0);
      complex4.sqrt();
      Complex complex6 = complex2.I.cos();
      complex1.getReal();
      complex2.cos();
      complex6.isNaN();
      complex6.isInfinite();
      complex1.pow(3199.8949);
      complex1.atan();
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.sqrt();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getArgument();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.acos();
      complex1.I.atan();
      Complex complex2 = complex0.acos();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-463.2225789997886);
      complex0.ONE.divide((-463.2225789997886));
      complex0.I.tan();
      Complex complex1 = complex0.cos();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-821.4146580301705));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow((-821.4146580301705));
      complex2.subtract((-821.4146580301705));
      complex0.ZERO.conjugate();
      Complex complex3 = complex0.exp();
      complex0.getImaginary();
      complex3.pow(complex0);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1590);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.exp();
      complex1.ONE.abs();
      Complex complex4 = complex3.ZERO.add(complex0);
      complex1.getReal();
      complex3.NaN.cos();
      complex1.asin();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex0.cos();
      complex1.getImaginary();
      Complex complex7 = complex5.conjugate();
      complex7.I.add(653.92147607252);
      Complex complex8 = complex0.ONE.tanh();
      complex8.NaN.atan();
      complex7.divide(complex6);
      complex2.cosh();
      Complex.valueOf(0.0);
      complex2.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-20.0));
      complex1.add((-488.35511));
      complex1.reciprocal();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1778.17066053065);
      complex0.ONE.toString();
      complex0.INF.abs();
      complex0.INF.toString();
      Complex complex1 = complex0.INF.subtract(1778.17066053065);
      complex0.I.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.I.subtract((-1969.9));
      complex0.NaN.pow(complex1);
      complex2.ZERO.add(complex0);
      complex2.ONE.toString();
      Complex complex6 = complex1.log();
      complex0.toString();
      complex1.readResolve();
      Complex complex7 = complex1.subtract(complex6);
      complex7.NaN.sinh();
      complex0.ZERO.exp();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.conjugate();
      complex8.abs();
      complex1.getArgument();
      complex0.NaN.cos();
      complex9.multiply(0.7853981633974483);
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.7853981633974483, Double.POSITIVE_INFINITY);
      complex2.sqrt();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.createComplex((-767.9693), (-767.9693));
      complex1.ONE.readResolve();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex2.ZERO.divide(355.1060515275);
      Complex complex7 = complex2.I.divide(complex0);
      complex7.INF.conjugate();
      complex6.getField();
      complex1.INF.divide(complex2);
      Complex.valueOf(0.0);
      complex1.toString();
      complex2.getField();
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex8.NaN.sinh();
      complex9.I.getField();
      Complex complex10 = complex6.asin();
      complex2.toString();
      complex0.acos();
      complex6.tan();
      Complex complex11 = complex1.cosh();
      complex2.exp();
      Complex complex12 = complex10.multiply((-507.04418083374446));
      complex5.pow(complex12);
      complex6.getReal();
      complex0.add((-767.9693));
      complex2.getArgument();
      complex7.readResolve();
      complex0.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex.valueOf((-234.5318));
      complex0.ZERO.sqrt();
      complex1.hashCode();
      Complex complex2 = complex1.sin();
      complex2.asin();
      Complex.valueOf(5.006436936098099E-8, 0.0);
      complex0.equals("Cannot normalize to an infinite value");
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = complex0.NaN.cos();
      complex1.ZERO.divide(1256.4369);
      complex0.equals("Cqz9c3oRfvKS");
      Complex complex2 = complex1.multiply(complex0);
      complex2.createComplex(2.0902045062932175E102, 0.0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.pow(1513.0);
      try { 
        complex1.INF.nthRoot((-365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -365
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1946.3));
      Complex complex1 = Complex.valueOf(913.0);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(203.979348067);
      Complex complex2 = Complex.valueOf(203.979348067, 0.0);
      complex2.I.asin();
      Complex complex3 = complex1.tanh();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2380.89095234, (-1655.9705192353274));
      Complex complex1 = complex0.INF.add((-4154.542412307123));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.subtract(complex0);
      complex3.I.getField();
      complex0.ONE.getField();
      Complex complex4 = complex2.INF.multiply(complex0);
      complex4.I.getField();
      complex4.I.add(complex2);
      complex0.getReal();
      Complex complex5 = Complex.valueOf(2380.89095234, 0.0);
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex4.INF.subtract(complex1);
      Complex.valueOf((-4154.542412307123));
      complex8.INF.atan();
      complex0.hashCode();
      complex0.NaN.createComplex((-1655.9705192353274), 0.0);
      complex4.sinh();
      complex7.abs();
      complex6.subtract(0.0);
      complex4.tanh();
      complex1.getImaginary();
      complex6.acos();
      Complex complex9 = complex3.tan();
      complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex5.I.multiply(complex4);
      complex0.getField();
      Complex complex7 = new Complex(3148.928, 1004.879887206843);
      Complex complex8 = complex3.ZERO.divide(complex7);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex1.ONE.acos();
      Complex complex11 = complex10.INF.pow(Double.POSITIVE_INFINITY);
      complex10.INF.readResolve();
      List<Complex> list0 = complex2.nthRoot(35);
      assertTrue(list0.contains(complex2));
      
      complex4.getArgument();
      complex2.getImaginary();
      Complex complex12 = complex1.ONE.exp();
      Complex complex13 = complex0.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex9.asin();
      complex1.isInfinite();
      Complex complex15 = complex6.cosh();
      assertNotSame(complex6, complex11);
      assertTrue(complex6.equals((Object)complex13));
      assertTrue(complex15.equals((Object)complex11));
      
      double double0 = complex2.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      complex0.toString();
      complex8.isNaN();
      Complex complex16 = complex3.I.divide(complex2);
      assertEquals(0.0, complex16.getReal(), 0.01);
      
      Complex complex17 = complex1.tanh();
      Object object0 = complex8.readResolve();
      boolean boolean0 = complex14.equals(object0);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertTrue(object0.equals((Object)complex17));
      assertFalse(boolean0);
      
      complex12.getReal();
      Complex complex18 = complex12.sinh();
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      complex0.cos();
      assertNotSame(complex0, complex14);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getField();
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.pow(1457.68);
      Complex complex4 = complex3.I.divide(1457.68);
      complex4.I.toString();
      complex1.INF.readResolve();
      Complex complex5 = complex1.ONE.tan();
      Complex complex6 = complex0.cosh();
      complex1.ONE.toString();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.I.tanh();
      assertEquals(1.557407724654902, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      complex2.toString();
      complex5.ZERO.conjugate();
      complex0.divide(1834.0);
      Complex complex9 = complex6.divide(1834.0);
      Complex.valueOf(1457.68, 20.0);
      List<Complex> list0 = complex5.nthRoot(494);
      assertEquals(494, list0.size());
      assertEquals(1.557407724654902, complex5.getReal(), 0.01);
      
      Complex complex10 = complex4.acos();
      assertSame(complex2, complex9);
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals((-6.860215695915205E-4), complex10.getImaginary(), 0.01);
      assertSame(complex0, complex7);
      assertEquals(0.4817536741017505, complex3.getImaginary(), 0.01);
  }
}
