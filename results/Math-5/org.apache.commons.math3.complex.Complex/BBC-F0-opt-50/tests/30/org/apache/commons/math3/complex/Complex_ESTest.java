/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:21:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 1.9792597720953414E-32);
      complex0.getArgument();
      Complex complex1 = new Complex(0.0, 3.141592653589793);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex0.tanh();
      complex5.acos();
      Complex complex7 = complex6.asin();
      complex7.I.exp();
      complex0.nthRoot(565);
      complex5.multiply(197);
      Complex complex8 = Complex.valueOf(2801.76, Double.POSITIVE_INFINITY);
      complex8.multiply(1.9792597720953414E-32);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2080.58, 2080.58);
      complex0.getArgument();
      Complex complex2 = new Complex(6.726877340086963E-49, 0.7071067811865476);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(6.726877340086963E-49, Double.POSITIVE_INFINITY);
      complex3.subtract(complex4);
      complex4.tan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex3.subtract(complex5);
      complex1.tanh();
      complex2.asin();
      complex6.nthRoot(565);
      complex3.ZERO.multiply(complex0);
      Complex.valueOf(1.8107659816741943);
      Complex complex7 = complex5.multiply(197);
      Complex complex8 = complex7.multiply((-3686));
      complex8.multiply((double) 2190);
      complex6.multiply((-3686));
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-7.126913872617518E298), (-7.126913872617518E298));
      complex1.cosh();
      Complex complex2 = new Complex((-7.126913872617518E298));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5707963267948966, (-1.0));
      Complex complex1 = complex0.divide((-3437.08537309411));
      Complex.valueOf((-3437.08537309411), 1.0);
      complex1.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = new Complex(20.0);
      complex4.subtract(complex2);
      complex4.tanh();
      Complex complex5 = complex1.asin();
      complex4.nthRoot(565);
      complex5.multiply(565);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(Double.NaN, 3064.5);
      Complex complex2 = complex1.multiply((-1.8807372872519646E7));
      complex2.hashCode();
      complex1.multiply(3177);
      complex1.nthRoot(3177);
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 20.0);
      Complex complex1 = complex0.divide((-1601.722917));
      Complex.valueOf((-1.0), 1838.610082);
      complex0.getArgument();
      complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.subtract(complex2);
      complex4.tanh();
      complex3.asin();
      Complex complex5 = Complex.ONE;
      try { 
        complex5.nthRoot((-1256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,256
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3064.5);
      complex0.getArgument();
      Complex complex1 = new Complex(3064.5, Double.NaN);
      complex1.cos();
      Complex complex2 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ZERO;
      complex3.toString();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex2.subtract((-1246.5225328730498));
      complex6.asin();
      complex2.reciprocal();
      Complex.valueOf((-1246.5225328730498), 3.028030241578533E-8);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      complex1.subtract((-2693.0919477828));
      Complex complex3 = Complex.I;
      complex3.asin();
      Complex.valueOf((-2693.0919477828));
      complex2.equals(complex3);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf((-20.0), (-20.0));
      complex0.pow(complex3);
      complex3.tan();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-347.1851251082726));
      Complex complex2 = complex1.pow(3736.081);
      complex2.hashCode();
      Complex complex3 = new Complex((-347.1851251082726), (-1055158238));
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex((-347.1851251082726));
      Complex complex6 = complex4.log();
      complex0.tan();
      complex6.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1424.318029));
      Complex complex2 = complex1.divide(490.06977512289);
      complex2.toString();
      Complex complex3 = complex2.sqrt();
      complex2.subtract(1139.8640217948252);
      complex3.asin();
      Complex.valueOf(255.224972);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1170808.9881188704);
      Complex complex2 = new Complex((-319.79), 5270.449996747);
      Complex complex3 = complex2.pow(1063.9179);
      complex1.hashCode();
      Complex complex4 = new Complex(2262.722907, 1170808.9881188704);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.negate();
      complex1.log();
      complex4.tan();
      complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-3056.4528356394558), (-3056.4528356394558));
      Complex complex1 = Complex.valueOf((-698.8517848056));
      complex1.multiply((-2147483034));
      Complex complex2 = Complex.valueOf((double) (-2147483034), (-662.367));
      Complex complex3 = complex2.atan();
      complex1.sinh();
      Complex complex4 = complex3.cosh();
      complex1.negate();
      Complex complex5 = new Complex(487.36, (-2147483034));
      Complex complex6 = complex2.acos();
      complex2.negate();
      Complex complex7 = new Complex(2324.9835, 1871.5726126763068);
      complex7.log();
      complex2.divide((-662.367));
      complex1.tan();
      complex3.subtract(complex2);
      complex4.multiply(complex6);
      complex5.tanh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.NaN);
      complex1.I.multiply((-1849));
      Complex.valueOf(Double.NaN);
      try { 
        complex1.nthRoot((-1849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,849
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2114.476459024));
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.multiply(Double.NaN);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.multiply(complex5);
      complex4.tanh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9696846.649607394), (-9696846.649607394));
      Complex complex1 = complex0.multiply((-9696846.649607394));
      Complex complex2 = complex1.NaN.log();
      complex1.ONE.multiply(2046);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex2.add((-9696846.649607394));
      complex5.I.hashCode();
      complex1.INF.createComplex(2046, (-901.43288705729));
      Complex complex6 = complex1.ONE.log();
      Complex complex7 = complex1.conjugate();
      Complex.valueOf((double) 2046);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex0.sqrt();
      complex10.subtract(complex3);
      Complex.valueOf((double) 2046, 3.296104292035678E-8);
      complex7.divide(complex8);
      complex1.asin();
      complex6.reciprocal();
      complex9.cos();
      complex1.nthRoot(37);
      complex1.cosh();
      complex1.sinh();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.isNaN();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex4.multiply(262);
      Complex complex6 = new Complex(1121, 1121);
      Complex complex7 = complex3.multiply((-980.5926058012884));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex1.divide((-0.8364288087425561));
      complex9.atan();
      complex7.abs();
      Complex complex10 = Complex.valueOf((double) 262, (-0.8364288087425561));
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.I;
      complex12.subtract(complex10);
      complex3.atan();
      Complex complex13 = Complex.I;
      complex13.toString();
      complex9.toString();
      complex5.pow(complex8);
      complex10.reciprocal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(Double.POSITIVE_INFINITY, (-2117.2178196251107));
      Complex complex1 = Complex.INF;
      complex1.getArgument();
      complex1.hashCode();
      Complex complex2 = Complex.ONE;
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      complex3.pow(complex2);
      Complex complex4 = new Complex(1121);
      Complex complex5 = complex4.createComplex(1121, 1121);
      Complex complex6 = complex0.multiply(3072.928741);
      complex4.cos();
      complex4.divide(3317.9358);
      Complex complex7 = complex2.atan();
      complex6.abs();
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.subtract(complex7);
      complex4.atan();
      complex6.toString();
      complex5.toString();
      complex7.pow(complex10);
      complex9.reciprocal();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1415);
      Complex complex2 = new Complex(8.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.multiply(complex3);
      complex0.readResolve();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex4.exp();
      complex7.getField();
      Complex complex8 = complex0.multiply(1);
      complex3.pow(complex7);
      complex8.subtract(complex2);
      Complex complex9 = Complex.ZERO;
      complex0.tan();
      complex6.sin();
      Complex complex10 = Complex.valueOf(8.0);
      complex10.getField();
      complex3.cosh();
      complex5.add(0.8538011695906433);
      complex9.readResolve();
      complex8.add(8.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.atan();
      complex0.toString();
      complex2.toString();
      Complex complex4 = complex3.pow(complex1);
      complex0.reciprocal();
      complex4.sqrt();
      complex2.NaN.log();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1082.039735, 1082.039735);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.exp();
      Complex complex7 = complex4.divide(complex5);
      Complex.valueOf((double) (-3109));
      Complex complex8 = complex4.multiply(981);
      complex3.tanh();
      complex2.cosh();
      Complex complex9 = new Complex(1082.039735);
      complex5.tan();
      Complex complex10 = complex1.asin();
      Complex complex11 = Complex.ONE;
      complex11.add(complex9);
      complex10.getField();
      complex6.conjugate();
      Complex complex12 = complex8.createComplex((-2348.408678020969), 1.014756202697754);
      Complex.valueOf(1.014756202697754, (double) (-3109));
      complex7.hashCode();
      complex12.sin();
      complex10.getArgument();
      complex7.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(1121);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tan();
      complex2.pow(complex1);
      Complex complex3 = new Complex(1121, 1121);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.multiply(complex0);
      complex0.readResolve();
      complex3.exp();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex5.exp();
      complex3.getField();
      Complex complex8 = complex0.multiply(1943);
      complex4.pow(complex7);
      Complex complex9 = complex3.subtract(complex6);
      complex3.pow((-881.56179544714));
      complex8.tan();
      Complex complex10 = Complex.I;
      complex10.sin();
      complex7.getField();
      Complex complex11 = complex6.multiply(572);
      complex10.getReal();
      complex9.getReal();
      complex0.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2278.98491093));
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(2.0);
      complex2.readResolve();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.exp();
      complex0.getField();
      Complex complex6 = complex1.multiply(178);
      Complex complex7 = complex2.pow(complex1);
      complex7.subtract(complex4);
      complex6.pow((-3334.6970437869));
      complex1.tan();
      complex6.sin();
      complex2.multiply(4967);
      complex4.getReal();
      complex3.getReal();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1121);
      complex0.negate();
      complex0.tan();
      int int0 = 2054114793;
      // Undeclared exception!
      complex1.nthRoot(2054114793);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-308.88084571293587));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.I.tan();
      complex2.ONE.exp();
      Complex complex5 = complex0.divide(complex1);
      complex4.pow(complex5);
      Complex complex6 = new Complex(1878.0012, (-3109.0));
      complex6.createComplex((-3109.0), 0.0);
      complex1.getArgument();
      complex0.hashCode();
      Complex complex7 = Complex.ONE;
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-463.73));
      Complex complex1 = complex0.I.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.I.divide((-20.0));
      complex0.NaN.log();
      Complex complex4 = complex0.ONE.reciprocal();
      complex3.ONE.divide(1306.547811649933);
      Complex complex5 = Complex.valueOf(0.0, (-1089.0));
      Complex complex6 = complex3.INF.subtract((-20.0));
      complex6.INF.subtract(complex2);
      Complex complex7 = Complex.valueOf((-20.0));
      complex0.negate();
      Complex complex8 = complex0.negate();
      complex8.cos();
      complex8.ZERO.toString();
      complex2.sqrt();
      Complex complex9 = complex4.sqrt();
      complex9.NaN.tanh();
      Complex complex10 = complex2.sin();
      complex10.cosh();
      complex8.cosh();
      complex9.abs();
      complex4.pow(complex2);
      complex0.tan();
      complex5.subtract((-1089.0));
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1121);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex2.tan();
      complex5.multiply(262);
      Complex complex6 = new Complex(1121, 0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex3.multiply(complex4);
      complex1.readResolve();
      complex0.I.readResolve();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex0.exp();
      complex11.getField();
      complex3.multiply(178);
      complex0.pow(complex11);
      complex11.subtract(complex3);
      Complex complex12 = complex6.pow((-3735.0944));
      complex8.tan();
      complex7.sin();
      complex3.getField();
      complex8.multiply((-306));
      complex10.getReal();
      complex6.add((double) 1121);
      try { 
        complex12.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.5463381751770173);
      complex0.multiply(2278);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.negate();
      complex2.tan();
      Complex complex3 = Complex.valueOf((double) 1121, (-213.7));
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex3.tan();
      complex1.multiply(1187);
      Complex complex6 = new Complex(6, (-213.7));
      complex4.nthRoot(3879);
      Complex.valueOf(1256640.0, 1645.7);
      Complex complex7 = Complex.ZERO;
      complex7.pow(complex0);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex5.createComplex((-2824.935734669), 1.4121832499681681);
      Complex complex10 = Complex.NaN;
      complex1.subtract(0.5191890001296997);
      complex2.getArgument();
      Complex complex11 = new Complex(6550.692752, 1.4121832499681681);
      complex11.hashCode();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1121);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = Complex.valueOf((double) 0);
      Complex complex8 = complex6.multiply(24);
      Complex complex9 = complex8.tanh();
      complex5.cosh();
      Complex complex10 = new Complex(0.7982351826521868);
      complex10.tan();
      Complex complex11 = complex10.asin();
      complex9.add(complex1);
      complex7.getField();
      complex11.conjugate();
      Complex complex12 = complex3.createComplex(0, 151.238635);
      Complex.valueOf(Double.NaN, (double) 0);
      complex3.hashCode();
      complex7.sin();
      complex12.getArgument();
      Complex complex13 = new Complex((-20.0));
      Object object0 = new Object();
      complex13.equals(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3072.928741);
      Complex complex1 = complex0.ONE.createComplex((-2618.8188471205453), 3072.928741);
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.I.log();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex2.atan();
      complex2.abs();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(complex0);
      complex3.atan();
      complex5.toString();
      Complex complex6 = Complex.ONE;
      complex6.toString();
      complex5.pow(complex0);
      complex2.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(638.7314863, 1256640.0);
      Complex complex2 = complex1.multiply(2624.22356515);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.divide((-3576.7339233562));
      Complex complex5 = complex1.atan();
      complex0.abs();
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex0.subtract(complex8);
      complex6.atan();
      complex0.toString();
      complex0.toString();
      complex4.ZERO.toString();
      complex9.pow(complex5);
      complex2.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(complex0);
      complex0.nthRoot(29);
      Complex complex2 = complex1.pow(complex0);
      complex2.tan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf((double) 29);
      complex6.getField();
      Complex complex7 = complex1.multiply(178);
      Complex complex8 = complex4.pow(complex1);
      Complex complex9 = complex5.subtract(complex0);
      complex9.NaN.toString();
      complex4.pow(2763.14056);
      Complex complex10 = complex8.tan();
      complex8.sin();
      complex5.getField();
      Complex complex11 = complex0.multiply((-1));
      complex11.I.multiply(4348);
      complex1.getReal();
      complex7.getReal();
      Complex complex12 = Complex.INF;
      complex12.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.tan();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.negate();
      complex2.ONE.sqrt1z();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = Complex.NaN;
      complex4.NaN.cosh();
      complex1.equals(complex4);
      complex4.cosh();
      complex0.sqrt();
      Complex.valueOf((-1289.96));
      complex1.isNaN();
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.ZERO.nthRoot(42);
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex3.ZERO.createComplex(0.0, 675.08);
      Complex complex5 = complex2.multiply(complex0);
      complex5.tanh();
      Complex complex6 = new Complex(0.0);
      complex3.getReal();
      complex6.divide((-204.9972905));
      Complex.valueOf(0.0);
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.NaN;
      complex3.toString();
      Complex complex4 = complex1.multiply((-346));
      Complex complex5 = complex1.createComplex((-195.0), 0);
      Complex complex6 = complex5.sin();
      complex0.hashCode();
      Complex complex7 = complex1.multiply(complex4);
      complex1.abs();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex4.cos();
      complex4.hashCode();
      complex3.hashCode();
      Complex complex11 = complex1.asin();
      complex6.log();
      Complex complex12 = Complex.ZERO;
      complex12.divide(complex9);
      complex7.readResolve();
      complex2.abs();
      Complex complex13 = complex8.tanh();
      complex4.isInfinite();
      complex11.sin();
      complex10.cos();
      complex13.multiply(1121);
      complex3.subtract((double) (-346));
      complex9.abs();
      complex7.pow(8.002105232210514);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex0.toString();
      complex0.sqrt();
      Complex complex2 = complex0.I.multiply((-900.9));
      complex0.I.getField();
      complex0.isNaN();
      complex1.hashCode();
      Complex complex3 = Complex.NaN;
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-308.88084571293587));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tan();
      complex3.I.tan();
      complex2.ONE.exp();
      Complex complex4 = complex0.divide(complex1);
      Complex.valueOf((double) (-3109));
      complex4.multiply((-3109));
      Complex complex5 = complex3.tanh();
      complex5.NaN.cosh();
      Complex complex6 = new Complex(0.0);
      complex1.ONE.tan();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex3.add(complex6);
      complex1.I.getField();
      complex6.NaN.conjugate();
      complex7.createComplex(0, (-308.88084571293587));
      Complex complex9 = Complex.valueOf(0.0, (double) (-3109));
      complex9.hashCode();
      complex1.sin();
      complex8.getArgument();
      complex6.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.createComplex(2624.22356515, 638.7314863);
      Complex complex4 = complex2.multiply((-1347.4));
      Complex complex5 = complex2.cos();
      complex5.I.divide((-1799.861522172));
      complex5.atan();
      complex2.abs();
      complex2.atan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.valueOf((-163.582));
      Complex complex8 = complex7.subtract(complex2);
      complex5.atan();
      complex4.toString();
      complex8.toString();
      complex3.pow(complex7);
      Complex complex9 = Complex.INF;
      complex9.reciprocal();
      Complex complex10 = new Complex((-163.582), 152.62);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.830278273495162E-8, (-925.0128));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.pow(1.830278273495162E-8);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.multiply(2050478507);
      complex1.reciprocal();
      complex5.toString();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5191890001296997);
      Complex complex1 = Complex.valueOf(2709.1);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.tan();
      complex5.exp();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.divide(complex6);
      Complex complex8 = complex7.subtract(complex3);
      Complex complex9 = complex2.multiply(1435);
      Complex complex10 = Complex.valueOf((-20.0));
      Complex complex11 = complex10.tanh();
      complex11.cosh();
      Complex complex12 = new Complex((-20.0));
      Complex complex13 = Complex.I;
      Complex complex14 = complex13.tan();
      complex8.asin();
      complex9.add(complex3);
      Complex complex15 = Complex.ONE;
      complex15.getField();
      complex11.conjugate();
      try { 
        complex14.nthRoot((-2146785035));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,146,785,035
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(1121);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(complex1);
      complex1.tan();
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex2.subtract(complex1);
      Complex complex8 = complex2.multiply(843);
      complex7.tanh();
      complex8.cosh();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex9.tan();
      complex9.asin();
      complex4.add(complex6);
      complex5.getField();
      complex4.conjugate();
      Complex complex10 = Complex.INF;
      complex10.nthRoot(1121);
      complex9.acos();
      complex0.sinh();
      Complex.valueOf((double) 843, (double) (-3109));
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.pow(0.4343410134315491);
      complex4.I.negate();
      Complex complex5 = Complex.NaN;
      complex3.ZERO.asin();
      complex2.INF.pow(complex5);
      Complex complex6 = complex4.sqrt();
      complex6.atan();
      Complex complex7 = complex3.add(Double.NaN);
      complex7.multiply((-2146665628));
      complex2.I.toString();
      Complex complex8 = complex2.I.cos();
      complex8.I.pow((double) (-2146665628));
      Complex complex9 = complex7.multiply(complex2);
      complex9.INF.conjugate();
      complex3.abs();
      complex1.pow(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.createComplex(2624.22356515, 638.7314863);
      complex2.multiply((-1347.4));
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.I.divide((-1799.861522172));
      complex4.atan();
      complex2.abs();
      Complex complex6 = complex3.atan();
      Complex complex7 = Complex.ONE;
      complex6.I.subtract(complex7);
      complex1.ONE.atan();
      complex1.toString();
      complex2.toString();
      complex1.pow(complex3);
      complex5.reciprocal();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-3176.79013712));
      Complex complex1 = complex0.I.add((-1.8981247089866317E-7));
      Complex complex2 = complex0.cosh();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf((-3176.79013712));
      Complex complex4 = complex3.subtract(Double.NaN);
      Complex.valueOf(1.0);
      complex3.add(complex1);
      Complex complex5 = new Complex(Double.NaN);
      complex5.multiply((-2664));
      complex0.subtract((-959.5229901899));
      complex4.abs();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.ZERO.nthRoot(29);
      Complex complex3 = complex1.tanh();
      complex1.sinh();
      complex3.sinh();
      Complex complex4 = Complex.valueOf(430.0, 401.0095781530389);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-3176.79013712));
      complex0.I.add((-1.8981247089866317E-7));
      Complex complex1 = complex0.cosh();
      complex1.NaN.getArgument();
      Complex complex2 = Complex.valueOf((-3176.79013712));
      Complex complex3 = complex2.subtract(Double.NaN);
      Complex.valueOf(1.0);
      Complex complex4 = complex1.atan();
      complex3.cos();
      complex1.subtract(complex4);
      Complex complex5 = Complex.valueOf((-1488.301316517821));
      complex5.subtract(5.5594785572443636E-8);
      Complex.valueOf(5.5594785572443636E-8, Double.NaN);
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.multiply(1156);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.divide((-1204.0));
      complex0.getImaginary();
      complex3.ONE.multiply(complex0);
      Complex complex4 = Complex.valueOf((double) 1156);
      complex2.ONE.divide(complex3);
      Complex complex5 = complex0.NaN.add(complex4);
      complex0.multiply(1.0);
      complex1.getField();
      Complex complex6 = complex2.multiply(1.0);
      Complex complex7 = complex1.exp();
      Complex complex8 = new Complex(1.0);
      Complex complex9 = complex7.pow(complex8);
      complex9.ZERO.getArgument();
      Complex complex10 = complex9.ONE.divide(complex6);
      complex10.negate();
      Complex complex11 = complex6.pow((-1570.76));
      complex5.equals(complex11);
      Complex complex12 = complex0.sin();
      Complex complex13 = Complex.valueOf((-2204.516));
      complex13.INF.nthRoot(1156);
      complex12.toString();
      Complex.valueOf((double) 1156);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.acos();
      complex2.ONE.atan();
      complex1.ZERO.toString();
      complex0.INF.multiply(0);
      Complex complex3 = complex0.NaN.createComplex(0.0, (-1996.8252));
      Complex complex4 = complex1.ONE.sin();
      complex0.hashCode();
      Complex complex5 = complex4.multiply(complex1);
      complex5.ZERO.abs();
      complex1.subtract(complex3);
      complex3.sqrt1z();
      Complex complex6 = complex4.acos();
      complex6.ONE.cos();
      complex6.INF.hashCode();
      complex6.hashCode();
      Complex complex7 = complex4.asin();
      complex4.ONE.log();
      Complex complex8 = complex4.divide(complex3);
      complex8.I.readResolve();
      complex7.abs();
      complex4.tanh();
      Complex.valueOf(Double.NaN, 0.0);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.atan();
      complex1.ONE.tan();
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex2.NaN.multiply(0);
      complex5.sqrt1z();
      Complex complex6 = complex5.NaN.multiply(complex4);
      complex6.NaN.readResolve();
      Complex complex7 = complex6.exp();
      complex6.NaN.tan();
      Complex complex8 = complex0.ONE.exp();
      complex8.ZERO.getField();
      Complex complex9 = complex2.I.multiply(17);
      Complex complex10 = complex9.ZERO.pow(complex5);
      complex10.ONE.subtract(complex1);
      complex0.pow(0.0);
      complex7.negate();
      complex1.pow(2500.615245);
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.valueOf(0.0, 0.7853981633974483);
      complex11.equals(complex12);
      complex12.sin();
      Complex.valueOf(1780.42031001);
      complex3.toString();
      Complex.valueOf(2500.615245);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.ZERO.multiply(1156);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.divide((-1204.0));
      complex0.getImaginary();
      complex4.ONE.multiply(complex0);
      Complex complex5 = Complex.valueOf((double) 1156);
      Complex complex6 = complex3.ONE.divide(complex4);
      complex0.NaN.add(complex5);
      complex0.multiply(1.0);
      complex2.getField();
      Complex complex7 = complex3.multiply(1.0);
      Complex complex8 = complex2.exp();
      Complex complex9 = new Complex(1.0);
      Complex complex10 = complex8.pow(complex9);
      complex10.ZERO.getArgument();
      complex10.ONE.divide(complex7);
      complex1.tan();
      complex7.sin();
      complex8.getField();
      Complex complex11 = complex8.cosh();
      Complex complex12 = Complex.valueOf((-353.29599), (-1204.0));
      complex8.toString();
      complex1.multiply(complex6);
      complex12.tanh();
      complex11.getReal();
      complex4.multiply(1731.92);
      complex8.isNaN();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.negate();
      complex0.getImaginary();
      Complex complex2 = complex0.ONE.multiply(complex0);
      complex2.NaN.tanh();
      Complex complex3 = complex1.ONE.divide(complex1);
      complex0.multiply(1.0);
      complex1.multiply(1.0);
      Complex complex4 = new Complex(1.0);
      Complex.valueOf((-1.0));
      complex3.add(1.0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(320.678214, (-1528.5684745162207));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1121);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.multiply(262);
      Complex complex7 = new Complex(1121, 0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex3.multiply(complex4);
      complex1.readResolve();
      Complex complex10 = complex4.exp();
      complex10.tan();
      Complex complex11 = complex0.exp();
      complex11.getField();
      complex3.multiply(178);
      complex0.pow(complex11);
      complex11.subtract(complex3);
      Complex complex12 = complex7.pow((-3735.0944));
      Complex complex13 = complex9.tan();
      Complex complex14 = complex8.sin();
      complex3.getField();
      Complex complex15 = new Complex((-3735.0944), 0);
      Complex.valueOf((double) 1121, 400.0);
      complex7.toString();
      complex12.multiply(complex14);
      complex13.tanh();
      Complex complex16 = new Complex((-353.29599));
      complex16.getReal();
      complex6.divide((-353.29599));
      Complex complex17 = Complex.valueOf((-3735.0944));
      complex5.subtract(complex17);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.divide(0.0);
      complex3.getImaginary();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = Complex.valueOf((-1204.0));
      Complex complex6 = complex1.divide(complex5);
      complex4.add(complex2);
      Complex complex7 = complex3.multiply(Double.NaN);
      complex2.getField();
      Complex complex8 = complex4.multiply(0.7853981633974483);
      complex6.exp();
      Complex complex9 = new Complex(633.9281147);
      complex7.pow(complex9);
      complex1.I.divide(complex8);
      complex5.getArgument();
      Complex complex10 = complex4.divide(complex2);
      complex10.tanh();
      complex9.negate();
      Complex complex11 = complex6.pow(1895.38);
      complex11.equals(complex3);
      complex8.sin();
      Complex.valueOf(2.33207344263204E-8);
      complex11.toString();
      Complex.valueOf((-3261.13502277139));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.sqrt();
      complex1.INF.abs();
      Complex complex2 = complex1.sinh();
      complex2.INF.conjugate();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.subtract((-369.295631433431));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5191890001296997);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.divide(complex0);
      complex2.cosh();
      Complex complex3 = complex0.tanh();
      complex3.sinh();
      Complex complex4 = new Complex((-1.0));
      complex4.sinh();
      Complex.valueOf(0.05694137513637543, 0.5191890001296997);
      Complex.valueOf(0.5191890001296997, 0.5191890001296997);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.956744351476403E-106);
      Complex complex1 = complex0.INF.sqrt();
      complex1.I.add(7.956744351476403E-106);
      complex0.abs();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.subtract(7.956744351476403E-106);
      complex1.conjugate();
      Complex complex5 = complex4.subtract(7.956744351476403E-106);
      complex4.ZERO.log();
      complex4.getReal();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex6.INF.tan();
      Complex complex9 = complex8.ZERO.sin();
      complex6.INF.getArgument();
      complex6.divide(complex5);
      Complex complex10 = Complex.valueOf(7.956744351476403E-106);
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex2.equals(complex10);
      complex0.tan();
      Complex complex12 = Complex.valueOf((-3208.7628238), 7.956744351476403E-106);
      complex9.pow(complex12);
      complex7.acos();
      complex11.getReal();
      Complex complex13 = complex4.atan();
      complex13.ONE.tanh();
      complex6.getReal();
      complex1.pow(complex12);
      complex3.toString();
      complex11.tanh();
      complex0.add(0.0);
      complex9.sqrt1z();
      complex8.getReal();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-925.0128));
      complex0.NaN.log();
      Complex complex1 = complex0.ZERO.pow((-925.0128));
      complex1.I.multiply((-1375));
      Complex complex2 = complex1.I.reciprocal();
      complex2.toString();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(350.5850637511);
      complex0.I.readResolve();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.multiply(1589);
      Complex complex4 = complex1.INF.atan();
      complex2.INF.subtract(1063.700108);
      complex0.nthRoot(7);
      complex1.INF.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY, (double) 1589);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.add(Double.POSITIVE_INFINITY);
      complex6.ZERO.sin();
      Complex complex7 = complex1.divide(complex2);
      complex7.NaN.conjugate();
      complex5.ONE.exp();
      complex6.isNaN();
      complex2.NaN.sinh();
      Complex complex8 = complex5.divide(complex2);
      complex8.NaN.multiply(3.337143177933685E-8);
      complex8.sqrt1z();
      complex4.isInfinite();
      complex7.abs();
      complex7.cos();
      complex3.reciprocal();
      complex2.add(3.337143177933685E-8);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.multiply(1156);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.divide((-1204.0));
      complex0.getImaginary();
      complex3.ONE.multiply(complex0);
      Complex complex4 = Complex.valueOf((double) 1156);
      complex2.ONE.divide(complex3);
      Complex complex5 = complex0.NaN.add(complex4);
      complex0.multiply(1.0);
      complex1.getField();
      Complex complex6 = complex2.multiply(1.0);
      Complex complex7 = complex1.exp();
      Complex complex8 = new Complex(1.0);
      Complex complex9 = complex7.pow(complex8);
      complex9.ZERO.getArgument();
      Complex complex10 = complex9.ONE.divide(complex6);
      complex10.negate();
      Complex complex11 = complex6.pow((-1570.76));
      complex5.equals(complex11);
      Complex complex12 = complex0.sin();
      Complex.valueOf((-2204.516));
      complex12.toString();
      Complex.valueOf((double) 1156);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex0.tan();
      complex3.multiply(613);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.I.conjugate();
      complex5.I.atan();
      complex0.getReal();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-176.140814), 2.016791373353671E-194);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.ZERO.pow(2.016791373353671E-194);
      complex3.ONE.sqrt1z();
      Complex complex4 = complex1.ONE.multiply(complex0);
      Complex complex5 = Complex.valueOf(3171.486);
      complex5.getArgument();
      Complex complex6 = complex1.INF.sin();
      Complex complex7 = complex1.NaN.divide(complex0);
      complex0.toString();
      Complex complex8 = complex1.sqrt();
      complex8.ONE.conjugate();
      Complex complex9 = complex8.ZERO.add(complex6);
      complex8.reciprocal();
      Complex complex10 = complex7.ONE.tanh();
      complex10.INF.subtract(1756.558820641);
      Complex complex11 = complex1.subtract(2.016791373353671E-194);
      complex11.ONE.pow((-7.839574072711142E-8));
      complex11.INF.multiply(complex6);
      complex7.getImaginary();
      complex11.sqrt1z();
      complex0.sqrt();
      Complex complex12 = complex4.atan();
      complex1.toString();
      complex8.getImaginary();
      complex9.createComplex(0.0, 2299.127);
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.I.multiply((-1.0));
      complex1.INF.hashCode();
      complex0.getReal();
      Complex complex2 = complex1.add(1.8428773880004883);
      Complex complex3 = Complex.NaN;
      complex0.NaN.createComplex((-1.0), (-1.0));
      Complex complex4 = complex2.I.subtract(complex3);
      complex4.atan();
      complex4.NaN.acos();
      Complex complex5 = complex0.sqrt();
      complex1.add(complex3);
      complex0.I.acos();
      complex3.getField();
      Complex complex6 = complex1.sqrt();
      complex6.cosh();
      complex5.pow(1.8428773880004883);
      try { 
        complex0.nthRoot((-1718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,718
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.INF;
      complex1.I.add(complex0);
      complex0.ONE.reciprocal();
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.I.hashCode();
      Complex complex3 = complex2.NaN.add(2142.6153201179);
      Complex complex4 = complex0.createComplex(2142.6153201179, 2142.6153201179);
      complex0.ZERO.sinh();
      Complex complex5 = complex4.ONE.asin();
      complex0.atan();
      Complex complex6 = complex4.sqrt();
      complex6.I.exp();
      Complex complex7 = complex4.ZERO.divide(1.0);
      complex6.I.nthRoot(603);
      Complex complex8 = complex4.sin();
      complex7.getField();
      Complex complex9 = complex8.INF.add(2650.6);
      complex7.getField();
      complex8.cosh();
      Complex complex10 = complex9.ZERO.exp();
      complex10.INF.acos();
      Complex complex11 = complex3.add(2142.6153201179);
      complex9.atan();
      complex0.multiply(complex5);
      Complex complex12 = Complex.NaN;
      complex12.ONE.abs();
      complex7.subtract(complex12);
      complex6.hashCode();
      Complex.valueOf(2557.831775443, 1.0);
      Complex complex13 = complex3.cosh();
      complex13.ZERO.hashCode();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1.1660367213160203E-8);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.INF.multiply(1);
      complex1.asin();
      Complex complex3 = complex0.atan();
      Complex.valueOf(0.0);
      Complex complex4 = complex1.divide(1.1660367213160203E-8);
      Complex complex5 = complex4.I.divide(complex0);
      complex1.nthRoot(869);
      complex4.isInfinite();
      Complex complex6 = Complex.valueOf((double) 869, (-1044.1));
      complex6.NaN.multiply(1);
      Complex complex7 = complex1.divide(complex6);
      complex7.reciprocal();
      Complex complex8 = complex4.atan();
      complex1.getReal();
      Complex complex9 = complex4.add(complex1);
      complex9.toString();
      Complex complex10 = complex9.log();
      complex2.getReal();
      complex8.getField();
      complex9.cosh();
      complex8.subtract(complex10);
      complex3.pow(complex1);
      complex6.divide(complex5);
      complex6.sinh();
      complex9.isInfinite();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1478.83336667), (-1478.83336667));
      Complex complex1 = complex0.atan();
      complex1.INF.negate();
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex2.multiply((-465));
      Complex complex4 = complex3.ZERO.subtract(0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.add(complex5);
      complex6.getField();
      complex3.I.add(0.0);
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ONE.subtract(complex3);
      Complex complex8 = complex6.ONE.createComplex(0.0, 0.0);
      complex5.isInfinite();
      Complex complex9 = complex8.createComplex(0.0, 0.0);
      complex0.ZERO.getField();
      complex9.I.exp();
      Complex complex10 = complex8.pow(0.0);
      Complex complex11 = complex10.NaN.sinh();
      complex11.INF.sin();
      complex10.reciprocal();
      Complex complex12 = complex5.createComplex((-465), (-1.0));
      complex2.toString();
      complex1.log();
      complex4.getReal();
      complex12.sqrt1z();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-363.575700628));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex3.NaN.add(complex0);
      Complex complex4 = complex0.subtract(complex2);
      complex4.ONE.pow(complex1);
      Complex complex5 = complex2.pow(complex4);
      complex2.divide(complex0);
      complex0.cos();
      complex1.log();
      complex0.subtract(complex4);
      complex5.getArgument();
      Complex complex6 = complex4.cos();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = (-308.88084571293587);
      Complex complex0 = Complex.valueOf((-308.88084571293587));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tan();
      complex3.I.tan();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex0.divide(complex1);
      complex2.ONE.subtract(complex1);
      complex5.multiply((-3109));
      Complex complex6 = complex3.tanh();
      complex6.NaN.cosh();
      Complex complex7 = new Complex(0.0);
      complex1.ONE.tan();
      complex7.asin();
      complex3.add(complex7);
      complex1.I.getField();
      complex7.NaN.conjugate();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex.valueOf(2710.8419533);
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.tanh();
      complex0.ZERO.multiply(0.0);
      Complex complex1 = complex0.pow((-3387.2604701));
      complex1.I.readResolve();
      Complex complex2 = Complex.valueOf((-3387.2604701), (-804.414054));
      Complex complex3 = complex1.ONE.pow(0.0);
      complex3.ONE.abs();
      Complex complex4 = complex0.createComplex((-804.414054), (-3387.2604701));
      complex0.multiply(complex4);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.NaN.log();
      complex7.INF.atan();
      complex6.multiply(0.0);
      Complex complex8 = complex6.ZERO.add(complex4);
      complex0.atan();
      Complex complex9 = complex4.sqrt();
      complex9.ONE.acos();
      Complex complex10 = complex6.multiply(complex3);
      complex10.I.getArgument();
      complex10.NaN.reciprocal();
      complex3.subtract(complex6);
      complex10.asin();
      complex8.conjugate();
      complex9.getImaginary();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.484237749027735E-8);
      complex0.cos();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.negate();
      complex3.toString();
      Complex complex4 = complex1.asin();
      complex2.ONE.multiply(2.484237749027735E-8);
      complex4.INF.getArgument();
      complex4.ONE.exp();
      Complex complex5 = complex2.tanh();
      complex5.I.negate();
      Complex complex6 = complex3.conjugate();
      complex6.NaN.pow(complex3);
      Complex.valueOf(0.7853981633974483);
      complex6.tanh();
      complex0.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.abs();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.I.abs();
      complex1.ZERO.divide(complex0);
      complex2.negate();
      complex3.NaN.sqrt1z();
      complex3.I.cos();
      Complex complex4 = complex2.ZERO.add(complex0);
      complex4.INF.pow(complex2);
      try { 
        complex1.nthRoot((-457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -457
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2210.0, 2210.0);
      Complex complex2 = complex0.subtract((-1409.37));
      complex0.ZERO.hashCode();
      Complex complex3 = complex2.sinh();
      complex3.I.tan();
      complex2.ONE.getField();
      complex3.NaN.getArgument();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.ONE.divide((-1409.37));
      complex5.I.toString();
      Complex complex6 = complex2.atan();
      complex4.cos();
      complex1.subtract(complex0);
      complex4.subtract(Double.NaN);
      Complex complex7 = Complex.valueOf(2210.0, (-2297.88177307672));
      complex6.add(complex7);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.nthRoot(1951);
      Complex complex1 = complex0.sin();
      complex1.I.nthRoot(1951);
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.INF.multiply(0.0);
      complex2.NaN.hashCode();
      complex1.hashCode();
      complex4.NaN.getField();
      Complex complex5 = complex2.cosh();
      complex5.ONE.toString();
      complex2.pow(complex3);
      Complex complex6 = complex1.multiply((-437));
      Complex complex7 = complex6.divide(0.0);
      complex7.I.toString();
      complex7.I.abs();
      complex2.isInfinite();
      Complex complex8 = complex0.tanh();
      complex6.NaN.sinh();
      Complex complex9 = complex8.INF.divide(complex4);
      complex2.ZERO.abs();
      complex4.toString();
      complex0.NaN.getArgument();
      complex8.I.multiply(1951);
      complex3.getField();
      complex2.cos();
      complex4.getReal();
      Complex complex10 = complex6.sin();
      complex9.abs();
      complex10.readResolve();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.atan();
      complex1.ONE.tan();
      complex2.NaN.pow(complex1);
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex2.NaN.multiply(0);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.NaN.multiply(complex3);
      complex6.NaN.readResolve();
      Complex complex7 = complex6.exp();
      complex6.NaN.tan();
      Complex complex8 = complex0.ONE.exp();
      complex8.ZERO.getField();
      Complex complex9 = complex2.I.multiply(17);
      Complex complex10 = complex9.ZERO.pow(complex4);
      Complex complex11 = complex10.ONE.subtract(complex1);
      complex0.pow(0.0);
      complex1.tan();
      Complex complex12 = complex1.sin();
      complex5.getField();
      Complex complex13 = complex8.cosh();
      Complex.valueOf(0.0, (-353.29599));
      complex7.toString();
      complex2.multiply(complex12);
      complex11.tanh();
      complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.INF.divide(complex0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.cosh();
      Complex complex3 = Complex.I;
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.tanh();
      complex0.hashCode();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex3.NaN.pow(complex4);
      complex5.NaN.cosh();
      complex2.NaN.atan();
      Complex complex6 = complex4.subtract(complex0);
      complex6.toString();
      int int0 = (-1857);
      try { 
        complex6.nthRoot((-1857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,857
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex0.toString();
      complex0.sqrt();
      complex0.I.multiply((-900.9));
      complex0.I.getField();
      complex0.isNaN();
      complex1.hashCode();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.ZERO.nthRoot(29);
      Complex complex3 = complex0.I.pow(complex2);
      complex3.ZERO.createComplex(0.0, 675.08);
      complex1.getArgument();
      complex0.hashCode();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.acos();
      complex2.ONE.atan();
      complex1.ZERO.toString();
      Complex complex3 = complex0.INF.multiply(0);
      Complex complex4 = complex0.NaN.createComplex(0.0, (-1996.8252));
      Complex complex5 = complex1.ONE.sin();
      complex0.hashCode();
      Complex complex6 = complex5.multiply(complex1);
      complex6.ZERO.abs();
      Complex complex7 = complex1.subtract(complex4);
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex5.acos();
      complex9.ONE.cos();
      complex9.INF.hashCode();
      complex9.hashCode();
      Complex complex10 = complex5.asin();
      complex5.ONE.log();
      Complex complex11 = complex5.divide(complex4);
      complex11.I.readResolve();
      complex10.abs();
      complex5.tanh();
      complex3.isInfinite();
      complex5.sin();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex12.INF.multiply(0);
      complex13.I.subtract(2.5187968110874885E-38);
      complex7.abs();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      complex0.I.getArgument();
      Complex complex2 = complex0.multiply(0);
      complex2.I.toString();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.INF.pow((double) 0);
      complex4.ZERO.getArgument();
      Complex complex5 = complex0.reciprocal();
      complex5.getField();
      complex4.I.tanh();
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex2.ONE.log();
      Complex complex7 = complex5.ONE.reciprocal();
      Complex complex8 = Complex.valueOf(1.5707963267948966);
      complex7.pow(1562.031103);
      complex7.INF.subtract(4998.29507763);
      Complex.valueOf(1254.97343642, 2.6683101654052734);
      complex8.NaN.pow(1.5707963267948966);
      Complex complex9 = complex4.sin();
      complex2.readResolve();
      Complex complex10 = complex7.add(complex9);
      complex7.sin();
      Complex complex11 = complex1.multiply(0);
      Complex complex12 = complex6.createComplex(1306.48332799815, 1306.48332799815);
      complex12.exp();
      complex10.subtract(complex11);
      complex10.sqrt();
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.636179075087608E73);
      Complex complex1 = Complex.INF;
      complex1.I.sinh();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.I.cosh();
      complex4.ONE.abs();
      complex0.divide(complex1);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.sqrt();
      complex1.INF.abs();
      Complex complex2 = complex1.sinh();
      complex2.INF.conjugate();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex3 = complex0.asin();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.tan();
      complex0.ZERO.tan();
      double double0 = (-109.21);
      Complex.valueOf((-109.21), (-109.21));
      complex0.getImaginary();
      Complex complex1 = complex0.conjugate();
      try { 
        complex1.I.nthRoot((-1001));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,001
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-3176.79013712));
      Complex complex1 = complex0.I.add((-1.8981247089866317E-7));
      Complex complex2 = complex0.cosh();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf((-3176.79013712));
      complex3.subtract(Double.NaN);
      Complex.valueOf(1.0);
      complex3.add(complex1);
      Complex.valueOf((-192.78408478425146));
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.multiply(3694);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.negate();
      complex5.ZERO.divide(complex3);
      Complex complex6 = complex5.ONE.cosh();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex2.NaN.negate();
      Complex complex8 = complex3.exp();
      complex0.getReal();
      Complex complex9 = complex3.INF.divide((-273.3536594312));
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getReal(), 0.01);
      
      complex0.ZERO.getArgument();
      complex2.isInfinite();
      Complex complex10 = complex3.divide(complex1);
      Complex complex11 = complex1.atan();
      assertEquals(0.7853981633974483, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.ZERO.multiply(1462);
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex3.ONE.multiply(complex13);
      complex8.getArgument();
      complex3.multiply(1462);
      Complex complex15 = Complex.valueOf(0.0);
      complex15.getArgument();
      complex10.getImaginary();
      assertSame(complex10, complex7);
      
      Complex complex16 = complex3.add(complex14);
      Complex complex17 = complex16.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertSame(complex17, complex8);
      assertFalse(complex13.equals((Object)complex4));
      assertTrue(complex13.equals((Object)complex12));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double double0 = (-2499.59201020084);
      Complex complex0 = new Complex((-2499.59201020084));
      int int0 = 0;
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3072.928741);
      Complex complex1 = complex0.ONE.createComplex((-2618.8188471205453), 3072.928741);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.ZERO.divide(complex3);
      Complex complex5 = complex4.NaN.multiply(1);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex3.getReal();
      complex2.getReal();
      assertNotSame(complex2, complex5);
      assertTrue(complex2.equals((Object)complex5));
      
      Complex complex6 = complex0.multiply(complex3);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-3072.928741), complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.add(complex1);
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex0.ZERO.exp();
      complex5.NaN.tan();
      assertEquals(1.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.NaN.conjugate();
      Complex complex7 = complex3.ZERO.multiply(complex2);
      assertTrue(complex7.equals((Object)complex2));
      
      Complex complex8 = complex6.NaN.sin();
      complex0.tan();
      Complex complex9 = complex1.asin();
      assertEquals((-1.0232274785475506), complex9.getImaginary(), 0.01);
      
      complex4.hashCode();
      complex1.hashCode();
      Complex complex10 = complex6.cosh();
      complex1.negate();
      Object object0 = complex8.readResolve();
      assertTrue(complex3.isNaN());
      assertSame(complex4, complex10);
      assertFalse(object0.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      complex0.toString();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.reciprocal();
      complex3.NaN.multiply(6.283185307179586);
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex4.NaN.sinh();
      assertTrue(complex5.isNaN());
      
      double double0 = complex4.getReal();
      assertEquals(1.0, double0, 0.01);
      
      String string0 = complex3.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex6 = complex2.asin();
      double double1 = complex6.abs();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.conjugate();
      int int0 = (-1124);
      try { 
        complex0.nthRoot((-1124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,124
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
