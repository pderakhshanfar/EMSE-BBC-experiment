/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:19:40 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-2762.9091854418), (-4034.338589595));
      try { 
        complex0.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-34.40853840111656));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1537.9484);
      Complex complex1 = complex0.I.negate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.sinh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-823.344684890591));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-427.00104));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, (-441.57));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-2027.1080531789812), (-2027.1080531789812));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(749.1167128, 749.1167128);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.I;
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(20.0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(9.79139811373348E260, (-27.4841668837));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(9.79139811373348E260, (-27.48416688367828));
      Complex complex1 = complex0.multiply(9.79139811373348E260);
      Complex complex2 = complex1.negate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1937.0));
      Complex complex1 = complex0.I.pow((-1937.0));
      Complex complex2 = complex1.add((-1937.0));
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1537.9484);
      complex0.ZERO.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-2024.56), (-2024.56));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-1937.0));
      Complex complex1 = complex0.I.pow((-1937.0));
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-2024.56), (-2024.56));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(455);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide((double) 455);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = new Complex(455);
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(288.04310345279555);
      Complex complex1 = Complex.valueOf((-486.0), 288.04310345279555);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, (-441.57));
      complex1.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2996.3102976), (-594.340449));
      complex0.pow((double) 455);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-27.48416688367828), 9.79139811373348E260);
      Complex complex1 = complex0.multiply(9.79139811373348E260);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex0.ONE.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-276.196510598), (-465.3121988));
      complex0.multiply(2613);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(2137.6006262);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(0.0);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-2024.56), (-2024.56));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-1277.5084361788));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-4041.542327623917));
      Complex complex1 = Complex.valueOf((-276.196510598), (-465.3121988));
      Complex complex2 = complex0.multiply(complex1);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-823.344684890591), (-823.344684890591));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(9.79139811373348E260, 9.79139811373348E260);
      Complex complex1 = complex0.multiply(9.79139811373348E260);
      Complex complex2 = complex1.log();
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.I;
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(9.79139811373348E260, 9.79139811373348E260);
      Complex complex1 = complex0.log();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.divide((-2997.505183));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1537.9484);
      complex0.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.createComplex((-752.03377423636), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1475.059551827983, 1475.059551827983);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, (-441.57));
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-568.66));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cosh();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-823.344684890591), (-4751.67702338314));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-568.66));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.exp();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(749.1167128, 749.1167128);
      Complex complex1 = complex0.ZERO.sinh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(4.184056578817777E10);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-2024.56), (-2024.56));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.add(complex0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add((double) 656);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(749.1167128, 749.1167128);
      Complex complex1 = complex0.ZERO.sinh();
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3367.0, 3367.0);
      Complex complex1 = complex0.NaN.createComplex(1790.981776, 4.737693450915584E247);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2754.464080332468, (double) (-2147483647));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4041.542327623917), (-8.780756503572527E-8));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(288.04310345279555);
      // Undeclared exception!
      complex0.nthRoot(2147457764);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1472.823645214);
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(9.79139811373348E260, (-27.48416688367828));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt();
      assertEquals(3.1291209809998526E130, complex2.getImaginary(), 0.01);
      assertEquals(4.391675337988406E-130, complex2.getReal(), 0.01);
      assertEquals(27.48416688367828, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1631.48087621));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1631.48087621), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1414.15, 0.0);
      Complex complex1 = complex0.NaN.log();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1414.15, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(complex0);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(288.04310345279555);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.subtract(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex3, complex2);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(288.04310345279555, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-823.344684890591), 45.740206750790264);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(45.740206750790264, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-823.344684890591), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(465.3121988, 465.3121988);
      Complex complex1 = complex0.NaN.multiply((-598.2784592757));
      assertEquals(465.3121988, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(465.3121988, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-2762.9091854418), (-4034.338589595));
      Complex complex1 = complex0.INF.multiply(complex0);
      assertEquals((-2762.9091854418), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4034.338589595), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.conjugate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-823.344684890591), (-4751.67702338314));
      Complex complex1 = complex0.NaN.multiply(complex0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-823.344684890591), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-4751.67702338314), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-67.70355));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(67.70355, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.add(complex1);
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(complex0);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-2024.56), (-2024.56));
      Complex complex1 = complex0.add(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-4049.12), complex1.getImaginary(), 0.01);
      assertEquals((-2024.56), complex0.getReal(), 0.01);
      assertEquals((-4049.12), complex1.getReal(), 0.01);
      assertEquals((-2024.56), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(288.04310345279555);
      double double0 = complex0.ZERO.abs();
      assertFalse(complex0.isInfinite());
      assertEquals(288.04310345279555, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0);
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-1.7198866036687559E90), Double.NaN);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals((-1.7198866036687559E90), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-23.43528435578446));
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals((-23.43528435578446), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 246, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 9.79139811373348E260);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(3930);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(1537.9484);
      Complex complex1 = complex0.pow((-427.00104));
      Complex complex2 = complex1.reciprocal();
      List<Complex> list0 = complex2.nthRoot(1134);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex2));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1745.390931736), (-1745.390931736));
      try { 
        complex0.ONE.nthRoot((-1987));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,987
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex((-92.76467), (-5.9375740397285E-291));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
      assertEquals(1.0019464626254206, complex2.getReal(), 0.01);
      assertEquals((-0.0031918416846696417), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1414.15, 0.0);
      Complex complex1 = complex0.tanh();
      assertEquals(1414.15, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(9.79139811373348E260, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      assertEquals(9.79139811373348E260, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-92.76467), (-5.9375740397285E-291));
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-92.76467), complex0.getReal(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1621.7248334151052), (-1621.7248334151052));
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1621.7248334151052), complex0.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1621.7248334151052), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2789.51769073801, 2789.51769073801);
      Complex complex1 = complex0.multiply((-823.344684890591));
      Complex complex2 = complex1.divide((-823.344684890591));
      Complex complex3 = complex2.tan();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(2789.51769073801, complex2.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(2789.51769073801, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-3.866609889222889E-9));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.tan();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-3.866609889222889E-9), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(1537.9484);
      Complex complex1 = complex0.I.sqrt();
      assertFalse(complex1.isNaN());
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      double double0 = complex1.getImaginary();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex(1537.9484);
      Complex complex1 = complex0.pow((-427.00104));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.cos();
      assertSame(complex3, complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex(1522.3);
      Complex complex1 = complex0.cos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-0.19706110392785778), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex((-92.76467), (-5.9375740397285E-291));
      Complex complex1 = complex0.subtract(8.873300991804281E-10);
      assertEquals((-5.9375740397285E-291), complex1.getImaginary(), 0.01);
      assertEquals((-92.76467000088732), complex1.getReal(), 0.01);
      assertEquals((-5.9375740397285E-291), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = new Complex((-2762.9091854418), (-4034.338589595));
      Complex complex1 = complex0.NaN.subtract(2.24669039465627E188);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.subtract(complex1);
      assertSame(complex3, complex2);
      assertSame(complex3, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-4034.338589595), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-2762.9091854418), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = new Complex(1522.3);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      assertNotSame(complex2, complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1522.3, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex(9.79139811373348E260, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-27.48416688367828));
      assertTrue(complex0.isInfinite());
      assertEquals(9.79139811373348E260, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-823.9732143814124));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-27.48416688367828), 9.79139811373348E260);
      Complex complex1 = complex0.multiply(9.79139811373348E260);
      Complex complex2 = complex1.multiply((-400));
      assertEquals((-2.6910841978238372E262), complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-27.48416688367828), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(9.79139811373348E260, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = new Complex(288.04310345279555);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.multiply(0);
      assertFalse(complex2.isInfinite());
      assertEquals(288.04310345279555, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-5.22719810780395), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals((-5.22719810780395), complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((double) (-1678), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1678.0), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.hashCode();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.reciprocal();
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = new Complex(1537.9484);
      Complex complex1 = complex0.pow((-427.00104));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.asin();
      assertSame(complex3, complex2);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1393.0206));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-7.178644737917012E-4), complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.divide((-495.804001994243));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2371.232104483989);
      Complex complex1 = complex0.atan();
      assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
      assertEquals(4.217217105791433E-4, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex0.INF.divide(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(1522.3);
      Complex complex1 = complex0.NaN.add((-3188.03891298025));
      Complex complex2 = complex1.negate();
      assertEquals(1522.3, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.acos();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow(complex0);
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1631.48087621));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.multiply(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1631.48087621), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = new Complex((-5.22719810780395), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.atan();
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isNaN());
      assertEquals((-5.22719810780395), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = new Complex((-92.76467), (-5.9375740397285E-291));
      Complex complex1 = complex0.pow(complex0);
      assertEquals(2.113096915648868E-183, complex1.getImaginary(), 0.01);
      assertEquals((-2.317432126888225E-183), complex1.getReal(), 0.01);
      assertEquals((-5.9375740397285E-291), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = new Complex(1522.3);
      String string0 = complex0.INF.toString();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals("(Infinity, Infinity)", string0);
      assertEquals(1522.3, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = new Complex(1522.3);
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(1522.3, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = new Complex((-92.76467), (-5.9375740397285E-291));
      List<Complex> list0 = complex0.nthRoot(786);
      assertEquals((-92.76467), complex0.getReal(), 0.01);
      assertEquals((-5.9375740397285E-291), complex0.getImaginary(), 0.01);
      assertEquals(786, list0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = new Complex((-92.76467), (-5.9375740397285E-291));
      Complex complex1 = complex0.acos();
      double double0 = complex1.abs();
      assertEquals(3.141592653589793, complex1.getReal(), 0.01);
      assertEquals(6.0951829608550225, double0, 0.01);
  }
}
