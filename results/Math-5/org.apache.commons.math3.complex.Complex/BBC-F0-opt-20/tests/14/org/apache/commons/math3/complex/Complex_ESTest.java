/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:39:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      complex0.sqrt1z();
      Complex complex2 = complex1.atan();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-954.157255791275), 20.0);
      Complex complex1 = Complex.valueOf((-954.157255791275), Double.POSITIVE_INFINITY);
      complex0.tan();
      complex1.multiply((-1093.65919));
      Complex complex2 = Complex.ONE;
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0406580894051073E243), 400.4);
      complex0.NaN.readResolve();
      complex0.abs();
      Complex complex1 = complex0.pow((-49.03688631433));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.tan();
      complex3.tanh();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = Complex.valueOf((-49.03688631433), 436.217);
      complex5.subtract(complex0);
      Complex complex6 = complex4.ONE.subtract(complex5);
      complex6.add(complex5);
      complex2.I.readResolve();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex2.atan();
      complex8.NaN.sqrt1z();
      Complex complex9 = complex8.atan();
      Complex.valueOf((-49.03688631433));
      Complex.valueOf(2.0406580894051073E243);
      complex9.I.readResolve();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex2.add(complex8);
      complex7.conjugate();
      complex2.INF.tan();
      complex2.INF.cosh();
      complex4.asin();
      complex7.exp();
      complex4.conjugate();
      complex0.multiply((-107.327945));
      complex10.add((-49.03688631433));
      complex11.multiply(436.217);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, Double.POSITIVE_INFINITY);
      complex0.multiply(332);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.readResolve();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-1257.435747988), Double.POSITIVE_INFINITY);
      complex0.I.pow(complex1);
      complex0.nthRoot(1136);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, Double.POSITIVE_INFINITY);
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, (-14.457211871106164));
      complex0.sqrt1z();
      Complex complex1 = complex0.multiply(2509);
      Complex complex2 = new Complex(20.0, (-3058.2442));
      complex2.reciprocal();
      complex2.tanh();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex.valueOf(256.0, 256.0);
      Complex complex0 = Complex.valueOf(256.0, Double.POSITIVE_INFINITY);
      complex0.multiply(256.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2978.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(5116.586787727);
      complex0.multiply(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY, 5116.586787727);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      complex1.equals(complex0);
      Complex complex2 = Complex.ZERO;
      complex2.toString();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, 256.0);
      Complex complex1 = Complex.valueOf(256.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex1.divide(complex0);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.sinh();
      complex1.tan();
      complex2.acos();
      complex0.sqrt();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1205.091001959);
      Complex complex1 = complex0.I.multiply(1205.091001959);
      Complex complex2 = Complex.I;
      complex2.ONE.subtract(complex1);
      complex1.ZERO.subtract(complex2);
      complex0.NaN.readResolve();
      complex0.multiply(complex1);
      complex0.ZERO.multiply(2139127680);
      complex0.add(0.010808801560264869);
      Complex complex3 = complex1.ONE.subtract(0.010808801560264869);
      complex3.NaN.exp();
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.sinh();
      complex1.pow(complex0);
      complex4.abs();
      complex2.toString();
      complex5.negate();
      Complex complex6 = Complex.valueOf(0.010808801560264869);
      complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, (-1.4015110811648513E195));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply((-250));
      Complex complex3 = Complex.INF;
      complex3.reciprocal();
      complex1.tanh();
      complex2.nthRoot(1244);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex1.divide(2.0);
      Complex.valueOf(2.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.createComplex(2.0, 2.0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex((-2207.8), 2.0);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.831068747037129E-118), 20.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.conjugate();
      complex2.sqrt1z();
      complex1.readResolve();
      Complex complex4 = Complex.ZERO;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, 256.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply((-250));
      Complex complex3 = complex2.reciprocal();
      complex2.I.sin();
      complex3.tanh();
      complex3.nthRoot(1281);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      complex0.ZERO.subtract(Double.NaN);
      Complex complex3 = new Complex((-475.987130569), Double.NaN);
      complex2.subtract(complex3);
      Complex.valueOf((-475.987130569), Double.NaN);
      Complex complex4 = Complex.valueOf((-475.987130569));
      complex4.NaN.acos();
      complex1.sqrt();
      Complex complex5 = complex3.pow((-475.987130569));
      complex1.conjugate();
      complex3.reciprocal();
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-14.457211871106164), (-14.457211871106164));
      Complex complex1 = Complex.INF;
      complex1.divide(complex1);
      complex1.reciprocal();
      complex0.multiply((-14.457211871106164));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-2632.8));
      complex0.tanh();
      Complex.valueOf(256.0, (-1.1306860837934988E281));
      complex0.tanh();
      complex0.reciprocal();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(1976.941);
      Complex complex1 = new Complex(1976.941);
      Complex complex2 = complex1.ONE.createComplex(1976.941, (-131072.0));
      complex2.multiply(complex0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex1.I.multiply(complex3);
      Complex complex5 = complex0.INF.divide(2.3616843223571777);
      Complex complex6 = complex5.NaN.log();
      complex3.ZERO.sqrt1z();
      complex0.INF.hashCode();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ONE.add(6.564856989693152);
      Complex complex9 = complex0.add(1976.941);
      complex9.I.divide(620.6695525298487);
      Complex complex10 = complex3.pow(complex1);
      complex10.exp();
      Complex complex11 = complex0.divide(complex7);
      Complex complex12 = complex11.INF.multiply(complex10);
      complex12.reciprocal();
      Complex complex13 = Complex.valueOf(1976.941, (-131072.0));
      complex13.INF.pow(complex7);
      complex3.cosh();
      complex9.I.cosh();
      complex8.toString();
      complex7.getField();
      complex9.equals(complex13);
      complex7.multiply(complex4);
      Complex complex14 = complex2.reciprocal();
      complex5.multiply(complex14);
      complex6.multiply(4775.568);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.sqrt();
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2334.270458, 2334.270458);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(2334.270458, 2334.270458);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.subtract(2575.0);
      Complex complex6 = Complex.INF;
      complex5.sqrt();
      complex3.divide(complex4);
      Complex complex7 = Complex.NaN;
      complex1.divide(complex7);
      complex3.exp();
      complex5.createComplex(2334.270458, 2575.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(2334.270458, 2334.270458);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(6.564856989693152);
      complex2.tan();
      complex2.divide(complex3);
      complex1.getArgument();
      Complex complex4 = complex3.multiply((-1538));
      complex4.reciprocal();
      Complex complex5 = Complex.ONE;
      complex1.getField();
      complex5.tanh();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex(684.16, Double.NaN);
      Complex complex2 = complex1.ONE.multiply(Double.NaN);
      complex1.ZERO.multiply(0.6349639147847361);
      complex1.sqrt1z();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.subtract(complex3);
      complex1.reciprocal();
      Complex complex5 = complex0.divide(4110.3233097072);
      Complex complex6 = Complex.valueOf(684.16, 684.16);
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.I.sin();
      complex8.NaN.createComplex((-1919.5), (-731.306934));
      complex5.ONE.toString();
      complex4.sqrt1z();
      complex5.divide(complex3);
      complex1.subtract(complex6);
      Complex complex9 = new Complex(0.6349639147847361);
      complex2.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.sin();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2574.376088);
      Complex complex1 = new Complex(0.0, 503.0);
      complex0.multiply(complex1);
      complex0.hashCode();
      Complex complex2 = complex1.divide((-1.0));
      Complex complex3 = Complex.valueOf((-1.0));
      complex3.sinh();
      Complex complex4 = Complex.valueOf(577.41015, 2574.376088);
      complex4.exp();
      Complex complex5 = Complex.valueOf(355.5048832446357);
      complex5.abs();
      Complex complex6 = Complex.NaN;
      complex6.tanh();
      complex2.tan();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(65325.98902491395, (-2407.436801418235));
      Complex complex1 = complex0.divide(65325.98902491395);
      complex0.ZERO.nthRoot(1274);
      Complex complex2 = complex1.add((-20.0));
      complex2.I.toString();
      Complex complex3 = complex1.pow(3285.2);
      complex3.multiply(2094);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.cos();
      complex5.I.readResolve();
      complex4.add((-20.0));
      // Undeclared exception!
      complex1.nthRoot(2147482009);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.divide(complex0);
      complex0.getArgument();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.divide(complex3);
      complex1.divide(complex6);
      complex2.exp();
      complex5.createComplex((-1.0), 2081035.3258157647);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
      complex0.getArgument();
      complex2.multiply((-250));
      Complex complex3 = complex1.reciprocal();
      complex3.getField();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = 256.0;
      Complex complex0 = Complex.valueOf(256.0, 2.0);
      Complex complex1 = new Complex(1614.834183500275, 2.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(6.564856989693152);
      Complex complex1 = complex0.sinh();
      complex1.sqrt1z();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.5403023058681398, Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex2 = Complex.ZERO;
      complex2.tanh();
      complex1.asin();
      complex2.toString();
      complex0.readResolve();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, 2.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.INF;
      complex2.getField();
      complex2.multiply(2148);
      complex1.pow(237.216524);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, 2.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(0.8414709848078964, 7.220666625582512E161);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tanh();
      complex1.multiply(complex0);
      complex5.tanh();
      complex3.asin();
      complex2.toString();
      Complex complex6 = Complex.I;
      complex6.readResolve();
      complex0.getField();
      complex6.readResolve();
      complex6.createComplex(0.23697508725000183, 7.220666625582512E161);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
      complex1.toString();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(563.371, (-1.0));
      Complex complex1 = complex0.multiply(0.4267409172423019);
      complex1.exp();
      Complex complex2 = Complex.ZERO;
      complex2.getArgument();
      complex0.getArgument();
      Complex complex3 = Complex.ONE;
      complex3.isInfinite();
      Complex complex4 = new Complex(0.0);
      complex4.getField();
      complex1.sqrt1z();
      complex3.multiply(3073.2735225085);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.subtract((-1963.882976));
      Complex complex3 = complex2.pow(complex1);
      complex1.tanh();
      Complex complex4 = complex1.sqrt1z();
      complex0.multiply((-250));
      complex3.nthRoot(684);
      complex4.multiply(684);
      Complex complex5 = new Complex(684);
      complex5.createComplex(1.1828997135162354, 405.505258617);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.INF;
      complex0.subtract(complex1);
      complex0.NaN.getArgument();
      complex0.ZERO.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.acos();
      complex2.toString();
      complex4.sinh();
      Complex.valueOf(2896.199476051208, 2896.199476051208);
      complex1.subtract(1.0);
      Complex complex5 = complex2.multiply(complex0);
      complex5.ONE.atan();
      Complex complex6 = complex0.createComplex(1.0, 1.0);
      Complex complex7 = complex5.INF.multiply(1.0);
      complex7.ZERO.multiply(complex3);
      complex6.createComplex(Double.NaN, 2896.199476051208);
      complex5.reciprocal();
      complex7.acos();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.subtract(510.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(263.05, 263.05);
      Complex complex1 = Complex.valueOf(263.05, 263.05);
      complex1.toString();
      Complex complex2 = new Complex((-606.239296));
      complex2.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.toString();
      complex1.isNaN();
      complex2.sqrt();
      Complex complex3 = new Complex((-606.239296));
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-6.600437262505396E-9));
      Complex complex1 = complex0.INF.divide((-6.600437262505396E-9));
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.subtract(complex3);
      complex3.NaN.add(complex4);
      complex2.nthRoot(686);
      complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2574.376088);
      Complex complex1 = new Complex(2574.376088, 503.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.hashCode();
      Complex complex3 = complex0.divide(2574.376088);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.exp();
      complex3.abs();
      Complex complex7 = new Complex((-2.6921749814579492E-76), Double.POSITIVE_INFINITY);
      complex0.getField();
      complex6.multiply(750168);
      complex5.abs();
      complex7.cosh();
      try { 
        complex4.nthRoot((-1941));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,941
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(263.05, 263.05);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.multiply(874);
      complex1.I.nthRoot(874);
      complex0.getArgument();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.subtract(1.107980489730835);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex0.divide(complex1);
      complex4.divide(complex7);
      Complex complex10 = complex8.exp();
      complex10.INF.multiply(1839);
      Complex complex11 = Complex.valueOf((-2887.36375167));
      complex9.subtract(complex11);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1056.34483);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.cosh();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      complex3.sinh();
      Complex complex4 = complex2.NaN.multiply((-793));
      complex4.ZERO.tan();
      Complex complex5 = complex1.add(1056.34483);
      complex5.ZERO.divide((-1388.214));
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex3.divide((-1388.214));
      complex7.abs();
      complex1.I.pow((double) (-793));
      Complex complex8 = complex2.log();
      complex8.INF.sqrt1z();
      Complex complex9 = complex8.divide(complex7);
      complex9.INF.createComplex(2294.293806868, (-2374.1039375402083));
      Complex complex10 = complex7.reciprocal();
      complex10.INF.getArgument();
      complex6.ZERO.abs();
      Complex complex11 = complex2.cos();
      complex6.tanh();
      Complex complex12 = complex6.conjugate();
      complex12.toString();
      complex7.multiply(complex2);
      complex11.acos();
      complex11.tan();
      Complex complex13 = complex1.atan();
      complex13.add((double) (-793));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.exp();
      complex0.ZERO.getArgument();
      complex2.getArgument();
      Complex complex3 = complex2.INF.pow(0.0);
      complex0.isInfinite();
      complex2.getField();
      complex2.ZERO.getField();
      Complex complex4 = complex0.tanh();
      complex0.exp();
      complex4.log();
      complex2.divide(complex3);
      Complex complex5 = Complex.valueOf(3615.274677445792, 3277.48228526);
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.subtract(complex4);
      complex7.subtract(3277.48228526);
      Complex complex8 = complex5.sinh();
      complex8.equals(complex1);
      complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-6.600437262505396E-9));
      Complex complex1 = complex0.INF.divide((-6.600437262505396E-9));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.sqrt1z();
      complex2.subtract(complex1);
      complex1.add(complex4);
      complex0.sqrt1z();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex1.subtract((-5.207000323380292E-8));
      Complex complex3 = complex2.acos();
      complex3.exp();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex3.subtract(1.2599210498948732);
      Complex complex7 = Complex.ONE;
      complex7.sqrt();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.divide(complex7);
      complex5.divide(complex6);
      complex5.exp();
      complex6.subtract(complex0);
      Complex complex10 = complex9.conjugate();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(510.0);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = Complex.NaN;
      complex2.ONE.multiply(complex3);
      Complex complex5 = complex4.INF.subtract(510.0);
      Complex complex6 = Complex.ONE;
      complex1.sqrt();
      Complex complex7 = complex3.divide(complex1);
      complex3.NaN.atan();
      complex7.ZERO.divide(complex5);
      complex2.exp();
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1121.416892252204, 0.0);
      Complex complex2 = complex1.multiply(complex0);
      complex2.hashCode();
      Complex complex3 = complex2.divide(Double.NaN);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.sinh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.createComplex(6.02987028472758E156, 0.0);
      complex6.abs();
      Complex complex7 = complex3.tanh();
      complex7.divide(1121.416892252204);
      complex7.nthRoot(1);
      Complex complex8 = Complex.valueOf(5.0345752964740226E-45, (double) 1);
      complex8.ONE.multiply(complex1);
      complex7.createComplex((-2.6921749814579492E-76), 20.0);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.createComplex(6.283185307179586, (-2.6921749814579492E-76));
      complex0.readResolve();
      complex1.abs();
      complex2.tanh();
      complex2.divide(0.47584593296051025);
      complex1.nthRoot(4972);
      Complex complex3 = Complex.valueOf((-19.0217451438), Double.NaN);
      complex3.createComplex(6.283185307179586, (-2244));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex1.multiply(complex0);
      complex3.hashCode();
      Complex complex4 = Complex.ZERO;
      Complex.valueOf((-2274.697662));
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.exp();
      double double0 = 0.47584593296051025;
      complex6.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
      complex7.abs();
      complex5.tanh();
      complex2.divide(6.283185307179586);
      int int0 = 1;
      // Undeclared exception!
      complex7.nthRoot(2146733480);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.7853963569066221);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.atan();
      complex2.NaN.multiply(complex1);
      Complex complex3 = complex0.tanh();
      complex3.readResolve();
      complex0.asin();
      complex2.getField();
      complex0.sqrt();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2574.376088);
      Complex complex1 = new Complex(0.0, 503.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.hashCode();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex4.getField();
      complex3.tanh();
      Complex complex6 = complex2.exp();
      complex6.I.pow(complex4);
      Complex complex7 = complex1.log();
      Complex complex8 = complex2.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.add(2574.376088);
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex7.divide(complex10);
      complex11.INF.getField();
      complex1.equals(complex4);
      complex10.getField();
      complex6.pow(complex8);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex1.ONE.divide(complex0);
      complex0.I.log();
      Complex complex5 = complex1.ONE.subtract(969.748);
      Complex complex6 = complex0.tan();
      complex6.getArgument();
      complex5.reciprocal();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex2.createComplex(0.0, 0.0);
      complex8.getReal();
      complex1.isNaN();
      complex4.getImaginary();
      complex7.add(complex4);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
      complex0.getArgument();
      Complex complex3 = complex2.exp();
      complex0.ZERO.createComplex(1.6151834292371802E124, 1.6151834292371802E124);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.ONE.add(complex0);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.INF.add(complex1);
      complex7.ONE.add(complex6);
      complex6.I.reciprocal();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.ZERO.sin();
      complex8.ONE.getField();
      Complex complex10 = complex3.multiply((-710));
      complex3.abs();
      complex9.cosh();
      complex0.nthRoot(883);
      Complex complex11 = complex5.add(complex6);
      complex11.ZERO.multiply(complex9);
      complex4.sqrt();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex.valueOf((-2223.15685247323));
      Complex complex0 = Complex.valueOf((-2223.15685247323));
      Complex complex1 = complex0.sinh();
      complex1.NaN.add((-2223.15685247323));
      Complex complex2 = complex0.exp();
      complex2.ONE.multiply(76.38);
      Complex complex3 = complex1.createComplex((-6.600437262505396E-9), (-1468.0));
      complex3.abs();
      Complex complex4 = complex3.tanh();
      double double0 = (-852.9161827814152);
      complex3.divide(1.3087966177291396E128);
      try { 
        complex4.nthRoot((-4913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,913
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.exp();
      complex0.ZERO.getArgument();
      complex2.getArgument();
      Complex complex3 = complex2.INF.pow(0.0);
      complex0.isInfinite();
      complex2.getField();
      complex2.ZERO.getField();
      complex0.tanh();
      complex1.exp();
      Complex complex4 = new Complex((-1.0), 1.0);
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.asin();
      Complex.valueOf(1.0);
      complex3.add(4002.01689107);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.divide(complex6);
      Complex complex9 = new Complex(4.556060380835955E71, (-1.0));
      complex8.equals(complex9);
      complex6.getField();
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = new Complex(6.283185307179586, (-49.0));
      Complex complex3 = new Complex((-1080.15443));
      Complex complex4 = complex3.multiply(complex1);
      complex2.hashCode();
      Complex complex5 = complex4.divide((-3378.64712242));
      Complex complex6 = Complex.valueOf(6.283185307179586);
      complex5.sinh();
      Complex complex7 = complex6.exp();
      complex7.createComplex(2.0670460065057715E-307, (-3378.64712242));
      complex6.abs();
      Complex complex8 = Complex.NaN;
      complex8.tanh();
      complex7.divide(0.47584593296051025);
      complex8.nthRoot(1275);
      Complex.valueOf((double) 1, (double) 1275);
      complex7.createComplex(3.285935446876949E-8, (-261.61602773));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2574.376088);
      Complex complex1 = new Complex(0.0, 503.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.hashCode();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.sinh();
      complex0.exp();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex3.abs();
      complex4.tanh();
      complex5.divide((-848.580493));
      complex2.nthRoot(1285);
      Complex.valueOf(0.0, 0.66441810131073);
      complex0.createComplex(26.51051, 20.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2223.15685247323));
      Complex complex1 = Complex.valueOf((-2223.15685247323));
      Complex complex2 = complex0.sinh();
      complex2.exp();
      Complex complex3 = Complex.ONE;
      double double0 = 1215.15416507;
      complex3.createComplex(1215.15416507, (-2223.15685247323));
      complex3.abs();
      complex1.tanh();
      complex3.divide((-1.7445917446236717E139));
      Complex complex4 = Complex.valueOf(0.47584593296051025, (-2223.15685247323));
      complex4.INF.negate();
      int int0 = 2129595404;
      // Undeclared exception!
      complex4.nthRoot(2129595404);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2574.376088);
      Complex complex1 = new Complex(0.0, 503.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.hashCode();
      complex0.divide(0.0);
      complex2.atan();
      Complex complex3 = new Complex(0.0, 2574.376088);
      complex3.tan();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.exp();
      complex0.ZERO.getArgument();
      complex2.getArgument();
      Complex complex3 = complex2.INF.pow(0.0);
      complex0.isInfinite();
      complex2.getField();
      complex2.ZERO.getField();
      complex0.tanh();
      complex0.exp();
      complex3.add(complex0);
      Complex complex4 = complex1.reciprocal();
      Complex.valueOf(0.0);
      Complex complex5 = complex1.sin();
      complex0.getField();
      complex4.multiply((-2049574928));
      complex1.abs();
      Complex complex6 = complex5.cosh();
      complex6.nthRoot(2326);
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-0.9335280339043734));
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.divide(complex0);
      complex0.getArgument();
      Complex complex4 = complex3.exp();
      complex0.ZERO.createComplex(1.6151834292371802E124, 1.6151834292371802E124);
      Complex.valueOf((-0.9335280339043734), (-0.9335280339043734));
      Complex complex5 = complex4.ONE.add(complex0);
      complex4.I.pow(1.6151834292371802E124);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.INF.add(complex2);
      Complex complex8 = complex7.ONE.add(complex6);
      complex6.sin();
      complex0.createComplex(1.6151834292371802E124, 1.557407724654902);
      complex8.getReal();
      complex1.isNaN();
      Complex.valueOf(1696.165304);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.INF.hashCode();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.multiply((-2215.4156));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      complex2.INF.acos();
      Complex complex4 = complex3.INF.reciprocal();
      complex4.acos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.I.tanh();
      complex3.I.multiply(0.0);
      Complex complex7 = complex2.tanh();
      complex7.ZERO.multiply((-1542));
      complex2.isInfinite();
      Complex.valueOf(0.0);
      complex1.divide(complex6);
      complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.ONE.cos();
      complex0.subtract(complex1);
      Complex complex2 = new Complex(3.610333312791256E161);
      complex2.INF.acos();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.I.multiply(3.610333312791256E161);
      complex2.I.sqrt1z();
      complex3.toString();
      Complex complex5 = complex4.add(complex3);
      complex5.ZERO.exp();
      try { 
        complex5.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-4683.021));
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.ONE.sqrt();
      complex0.INF.getField();
      complex0.ONE.getField();
      Complex.valueOf(0.0, (-4683.021));
      Complex complex4 = new Complex((-20.0), 0.0);
      complex2.INF.divide(complex4);
      complex0.hashCode();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex3.sqrt();
      complex7.INF.cosh();
      complex5.getImaginary();
      complex6.INF.add((-3791.94122128));
      Complex complex8 = complex1.sqrt();
      complex1.I.createComplex((-4683.021), (-3791.94122128));
      complex8.ZERO.createComplex(604.17, 0.0);
      complex8.createComplex(194.0, 194.0);
      complex2.equals("_s%?u-HV");
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.05, 119.05);
      Complex complex1 = complex0.reciprocal();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.INF.multiply(1);
      Complex complex4 = complex3.NaN.createComplex((-2556.939950131), (-2556.939950131));
      complex4.INF.abs();
      Complex complex5 = complex1.ZERO.tanh();
      Complex complex6 = complex5.ONE.tan();
      complex1.getArgument();
      Complex complex7 = complex2.log();
      Complex complex8 = complex2.multiply(1);
      complex2.NaN.getField();
      complex8.I.abs();
      Complex.valueOf(1.0);
      complex7.sinh();
      Complex complex9 = complex8.tanh();
      complex9.hashCode();
      complex6.subtract(complex7);
      complex7.getImaginary();
      complex4.log();
      complex7.divide(Double.NaN);
      complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(510.0);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex2.ONE.multiply(complex3);
      Complex complex6 = complex4.INF.subtract(510.0);
      complex4.I.sinh();
      complex1.sqrt();
      Complex complex7 = complex3.divide(complex1);
      complex7.ZERO.divide(complex6);
      complex2.exp();
      complex5.exp();
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1615.221));
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex0.NaN.pow(complex2);
      complex3.ZERO.sqrt();
      Complex complex5 = complex0.I.cos();
      Complex.valueOf((-1615.221), 942.0);
      complex5.I.readResolve();
      Complex complex6 = Complex.valueOf(942.0, 20.0);
      complex6.ZERO.divide((-1615.221));
      complex6.sinh();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex3.subtract(1808.9679474631);
      complex8.ZERO.reciprocal();
      complex8.NaN.sin();
      Complex complex9 = complex7.subtract((-1615.221));
      Complex complex10 = complex9.I.multiply((-1235));
      complex4.tan();
      complex3.isInfinite();
      complex1.getField();
      complex10.equals(complex8);
      complex7.add((double) (-1235));
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-6.600437262505396E-9));
      Complex complex1 = complex0.INF.divide((-6.600437262505396E-9));
      complex1.ONE.subtract(complex0);
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.subtract(complex2);
      complex2.NaN.add(complex3);
      complex2.sqrt1z();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(1430.83551943046);
      Complex complex1 = complex0.add(0.0);
      complex1.getReal();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.sinh();
      complex3.ONE.divide(1430.83551943046);
      Complex complex4 = complex0.conjugate();
      complex4.ONE.divide(complex1);
      complex1.getField();
      Complex complex5 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.divide(complex2);
      complex6.asin();
      complex1.isNaN();
      complex1.divide(complex2);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.subtract(complex7);
      complex8.INF.subtract(Double.POSITIVE_INFINITY);
      complex5.sinh();
      complex3.equals("MAP_MODIFIED_WHILE_ITERATING");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.multiply(0.0);
      Complex complex1 = complex0.exp();
      complex0.ZERO.getArgument();
      complex1.getArgument();
      Complex complex2 = complex1.INF.pow(0.0);
      complex0.isInfinite();
      complex1.getField();
      complex1.ZERO.getField();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.exp();
      complex3.log();
      Complex complex5 = complex3.asin();
      Complex.valueOf(0.0);
      complex4.INF.add(0.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.divide(complex6);
      complex4.equals(complex7);
      complex5.getField();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(2268.851297440403, 2268.851297440403);
      complex0.INF.sqrt();
      Complex complex1 = complex0.sinh();
      complex1.ONE.add(2268.851297440403);
      complex0.divide(2.7668218233914262E48);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide(0.0);
      complex1.NaN.negate();
      Complex complex2 = complex0.log();
      complex2.I.tanh();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, 1703.0629341);
      Complex complex2 = complex1.NaN.subtract(1703.0629341);
      complex2.ZERO.sinh();
      Complex complex3 = complex0.subtract(complex1);
      complex3.conjugate();
      complex3.negate();
      Complex complex4 = complex2.negate();
      complex4.createComplex(Double.NaN, 1703.0629341);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.reciprocal();
      complex0.toString();
      complex2.equals(complex0);
      Complex complex3 = complex1.sqrt();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      complex1.I.log();
      Complex complex2 = complex1.ONE.subtract((-1509.5));
      complex2.INF.divide(complex1);
      complex1.nthRoot(1028);
      Complex complex3 = complex0.atan();
      complex3.NaN.readResolve();
      Complex complex4 = complex3.multiply(0.0);
      complex4.ONE.reciprocal();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex6.I.subtract(0.0);
      complex5.getImaginary();
      complex5.getReal();
      complex0.pow((double) 1028);
      complex7.add(0.0);
      complex7.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
      complex0.getArgument();
      Complex complex3 = complex2.exp();
      complex0.ZERO.createComplex(1.6151834292371802E124, 1.6151834292371802E124);
      Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.INF.add(complex1);
      complex6.ONE.add(complex5);
      complex5.I.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.ZERO.sin();
      complex7.ONE.getField();
      complex3.multiply((-710));
      complex3.abs();
      complex8.cosh();
      complex0.nthRoot(883);
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.NaN.divide(0.0);
      Complex complex4 = complex3.ZERO.divide(0.0);
      Complex complex5 = complex3.I.createComplex(0.0, 0.0);
      Complex complex6 = complex4.INF.sqrt();
      complex0.I.hashCode();
      complex0.ZERO.getField();
      Complex complex7 = complex0.negate();
      complex7.NaN.divide(complex2);
      Complex complex8 = complex7.I.conjugate();
      complex7.I.cos();
      Complex complex9 = complex7.log();
      complex9.ZERO.sin();
      complex9.ONE.cosh();
      complex9.tan();
      complex6.divide(0.0);
      Complex complex10 = complex5.atan();
      complex10.add(442.964745923);
      complex8.asin();
      complex9.nthRoot(5062);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.subtract((-2128.21690217));
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.ZERO.tanh();
      complex2.I.sqrt1z();
      int int0 = (-250);
      complex0.multiply((-250));
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(706.490211021361);
      Complex complex1 = complex0.ZERO.multiply((-2141));
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.log();
      double double0 = (-768.138124);
      complex3.ONE.conjugate();
      Complex complex5 = complex4.INF.subtract(complex2);
      Complex complex6 = new Complex((-768.138124));
      complex4.divide(complex6);
      complex0.ZERO.multiply(complex5);
      Complex.valueOf((double) (-2141), 0.4837033152580261);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.multiply(complex7);
      complex8.ZERO.log();
      complex8.multiply((-768.138124));
      complex2.getReal();
      Complex complex9 = complex1.pow(complex3);
      complex2.ONE.asin();
      double double1 = 4.607187019879158E28;
      complex9.add(4.607187019879158E28);
      complex5.readResolve();
      Complex complex10 = complex3.tanh();
      complex10.ONE.tanh();
      Complex complex11 = Complex.valueOf(4.607187019879158E28);
      try { 
        complex11.nthRoot((-2141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,141
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-238.79));
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex2.ONE.subtract((-238.79));
      Complex complex5 = complex2.ONE.asin();
      complex5.pow(complex2);
      complex5.I.log();
      Complex complex6 = complex4.NaN.conjugate();
      complex6.NaN.subtract(complex0);
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex3.pow(1065.46984356);
      complex3.getField();
      complex4.tan();
      complex7.I.getArgument();
      Complex complex10 = complex4.sqrt();
      complex7.multiply((-238.79));
      complex9.multiply(complex1);
      Complex complex11 = complex8.tan();
      complex11.I.negate();
      complex10.nthRoot(4692);
      Complex complex12 = complex4.sqrt1z();
      complex0.conjugate();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1817.216840083243), (-1817.216840083243));
      Complex complex1 = complex0.INF.sqrt();
      complex0.abs();
      complex1.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = Complex.NaN;
      complex0.multiply(complex3);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.createComplex((-20.0), 0.0);
      complex5.NaN.asin();
      complex5.getReal();
      Complex complex6 = complex1.atan();
      complex6.ZERO.atan();
      Complex.valueOf((-106.150761575));
      complex4.I.reciprocal();
      complex0.add(complex6);
      complex1.acos();
      complex4.multiply(complex0);
      Complex complex7 = complex6.conjugate();
      complex0.getField();
      Complex.valueOf(337.0);
      Complex complex8 = complex7.divide(complex2);
      complex8.createComplex(0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 4.505432606253564E64;
      Complex complex1 = null;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2223.15685247323));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      complex0.ONE.readResolve();
      Complex complex3 = complex0.reciprocal();
      complex1.add(complex2);
      Complex complex4 = complex3.sqrt1z();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sinh();
      complex0.sqrt1z();
      complex0.multiply((-1438.9657412));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2574.376088);
      Complex complex1 = new Complex(0.0, 503.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.hashCode();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.exp();
      complex6.I.createComplex((-2.6921749814579492E-76), 0.47584593296051025);
      complex3.abs();
      complex4.tanh();
      complex5.divide((-848.580493));
      complex2.nthRoot(1);
      Complex.valueOf(0.0, 0.66441810131073);
      complex0.createComplex(26.51051, 20.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.asin();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.ZERO.multiply(complex1);
      complex0.log();
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(72.9315782, 72.9315782);
      complex0.I.hashCode();
      Complex complex1 = Complex.valueOf(72.9315782);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.getField();
      Complex complex3 = complex0.multiply((-86));
      Complex complex4 = complex3.add(72.9315782);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.sin();
      complex5.ONE.nthRoot(1434);
      Complex complex7 = complex0.ONE.atan();
      complex3.INF.subtract(complex6);
      Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.negate();
      complex5.I.acos();
      Complex complex9 = complex6.ONE.divide(72.9315782);
      Complex complex10 = complex8.I.sinh();
      complex5.abs();
      complex7.pow(complex6);
      complex6.getArgument();
      complex3.NaN.createComplex((-86), 1434);
      complex10.multiply(148);
      complex0.readResolve();
      complex3.abs();
      complex0.cos();
      complex4.subtract(2.3591305417054953E31);
      complex6.isInfinite();
      complex7.cosh();
      complex2.getImaginary();
      Complex complex11 = Complex.ZERO;
      complex9.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(263.05, 263.05);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.multiply(338);
      complex1.I.nthRoot(338);
      complex0.getArgument();
      complex0.toString();
      Complex complex3 = complex0.multiply(0.7853981633974483);
      complex3.sqrt1z();
      complex1.getReal();
      complex2.NaN.nthRoot(338);
      Complex complex4 = complex1.createComplex(338, 338);
      complex4.ZERO.divide(0.7853963569066221);
      complex2.getArgument();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex6.ONE.sinh();
      complex4.reciprocal();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      complex2.ONE.divide(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sqrt1z();
      complex4.ONE.cos();
      complex1.NaN.divide(complex4);
      Complex complex5 = complex0.NaN.pow((-730.0));
      Complex complex6 = complex4.ZERO.log();
      complex4.ONE.toString();
      complex6.ZERO.divide(complex3);
      complex3.INF.asin();
      complex0.subtract(complex3);
      complex4.cosh();
      complex5.I.toString();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.cos();
      complex7.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.multiply((-1146));
      try { 
        complex8.nthRoot((-1146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,146
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.697724830833087E-8));
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      complex1.INF.sqrt();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.ONE.createComplex((-8.697724830833087E-8), (-8.697724830833087E-8));
      complex3.ONE.asin();
      complex3.ONE.getArgument();
      Complex complex4 = complex2.ZERO.tanh();
      complex0.toString();
      complex4.ONE.hashCode();
      complex0.NaN.readResolve();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.I.getField();
      complex0.createComplex(2796.883, (-1889.37278971136));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.2018241584300995, 0.2018241584300995);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(912.37, (-654.0));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ZERO.subtract((-654.0));
      complex2.NaN.subtract(complex0);
      complex2.INF.divide(912.37);
      Complex complex3 = complex0.pow(912.37);
      complex0.I.abs();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.INF.hashCode();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex0.exp();
      complex7.ZERO.readResolve();
      Complex complex10 = complex9.add(complex3);
      complex8.getReal();
      complex5.divide((-654.0));
      complex10.equals(complex7);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(587.0);
      complex0.add(1901.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-1119.4531));
      Complex complex1 = complex0.ONE.asin();
      double double0 = complex0.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      complex0.I.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      complex3.ZERO.divide(complex0);
      complex3.INF.atan();
      Complex complex4 = complex2.cosh();
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      assertFalse(boolean0);
      
      complex2.I.hashCode();
      complex2.getArgument();
      Complex complex5 = complex4.pow((-1119.4531));
      complex1.divide(complex5);
      Complex complex6 = complex5.ZERO.divide(complex0);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex.valueOf(0.0);
      complex5.hashCode();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex1.subtract(complex2);
      double double1 = complex7.getImaginary();
      assertEquals(2.3012989023072947, complex7.getReal(), 0.01);
      assertEquals(-0.0, double1, 0.01);
      
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex9.ZERO.multiply(1.0);
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex2.acos();
      Complex complex12 = complex11.NaN.divide(complex8);
      complex11.exp();
      complex12.acos();
      complex0.subtract(complex4);
      Complex complex13 = complex8.conjugate();
      assertSame(complex2, complex9);
      assertSame(complex13, complex5);
      assertSame(complex8, complex11);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 1576.70146709663);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = complex0.INF.pow(complex3);
      Complex complex5 = complex4.ZERO.sinh();
      complex0.INF.sin();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.ONE.sin();
      Complex complex8 = complex0.ZERO.subtract(6.283185307179586);
      assertEquals((-6.283185307179586), complex8.getReal(), 0.01);
      
      complex0.multiply(complex6);
      double double0 = complex5.getReal();
      assertTrue(complex4.equals((Object)complex2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex4, complex2);
      
      Complex complex9 = complex7.reciprocal();
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(1.1883951057781212, complex9.getReal(), 0.01);
      
      Complex complex10 = complex0.asin();
      assertEquals(8.056245485491292, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.INF.divide(complex4);
      assertSame(complex5, complex4);
      
      Complex complex6 = complex1.tan();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.5998406268185329, complex6.getReal(), 0.01);
      
      Complex complex7 = complex2.cos();
      complex0.cos();
      Complex complex8 = complex0.cos();
      double double0 = complex8.getArgument();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex8.INF.log();
      Complex complex11 = complex9.ONE.add(complex1);
      assertEquals(1.5403023058681398, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      
      Complex complex12 = complex10.INF.log();
      assertTrue(complex12.isInfinite());
      
      complex9.hashCode();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      complex8.isNaN();
      Complex complex13 = complex3.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getReal(), 0.01);
      
      Complex complex14 = complex3.multiply(1557);
      assertTrue(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex7));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex1.ONE.divide(complex0);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.I.log();
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex1.ONE.subtract(969.748);
      Complex complex7 = complex0.tan();
      complex7.getArgument();
      Complex complex8 = complex6.reciprocal();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      complex7.sin();
      assertEquals(0.7615941559557649, complex7.getImaginary(), 0.01);
      
      Complex complex9 = complex2.createComplex(0.0, 0.0);
      complex9.getReal();
      complex1.isNaN();
      Complex.valueOf(1696.165304);
      complex3.log();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.8813735870195428, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex4));
  }
}
