/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:46:02 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1016.825505), 4228.316415);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.sqrt1z();
      complex0.INF.getArgument();
      complex1.toString();
      Complex complex3 = complex0.pow(complex1);
      complex0.INF.subtract((-461.72596834));
      Complex complex4 = Complex.valueOf((-1.426262681506497E-7));
      Complex complex5 = complex1.multiply((-2038408792));
      complex4.cos();
      complex1.divide((-461.72596834));
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.INF.sqrt();
      complex2.INF.atan();
      complex7.NaN.negate();
      Complex complex8 = complex2.cos();
      complex8.getArgument();
      complex2.sqrt();
      complex2.subtract((-1906.64947755));
      complex3.cos();
      complex0.sinh();
      complex3.asin();
      complex5.add(957.4);
      complex3.multiply(Double.NaN);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1186736024949195E-289, 1.5707963267948966);
      complex0.log();
      Complex complex1 = complex0.tanh();
      complex1.add(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2327.22, 2327.22);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(2.2689924240112305, Double.NaN);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.44503629207611084, 20.0);
      complex0.abs();
      complex0.tan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2544.7846028292897, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.tan();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.pow(complex1);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1016.825505), 4228.316415);
      Complex complex1 = complex0.multiply((-2038408792));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.NaN.sqrt1z();
      complex1.INF.getArgument();
      complex2.toString();
      Complex complex4 = complex1.pow(complex2);
      complex1.INF.subtract((-461.72596834));
      Complex complex5 = Complex.valueOf((-1.426262681506497E-7));
      Complex complex6 = complex2.multiply((-2038408792));
      complex5.cos();
      complex2.divide((-461.72596834));
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.INF.sqrt();
      complex3.INF.atan();
      complex8.NaN.negate();
      Complex complex9 = complex3.cos();
      complex9.getArgument();
      complex3.sqrt();
      complex3.subtract((-1906.64947755));
      complex4.cos();
      complex1.sinh();
      complex4.asin();
      complex6.add(957.4);
      complex4.multiply(Double.NaN);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2681.74988528542), (-2681.74988528542));
      complex1.ZERO.asin();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ONE;
      complex3.divide((-1076.0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      complex0.cos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3000.0, 1.4142135623730951);
      Complex complex1 = complex0.ZERO.multiply((-3235));
      complex1.INF.subtract(complex0);
      Complex.valueOf(1120.8036580695555, (double) (-3235));
      Complex complex2 = complex0.INF.conjugate();
      complex2.log();
      complex0.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(1.0);
      complex2.sin();
      complex3.exp();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.sqrt1z();
      complex3.tan();
      complex3.sinh();
      complex6.multiply(1.4142135623730951);
      complex1.abs();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2576.82360677, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.add(complex0);
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      Complex complex1 = Complex.valueOf(2576.82360677, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex1.NaN.multiply(648);
      complex1.multiply((-800));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1095.879674931233), Double.POSITIVE_INFINITY);
      complex1.acos();
      complex0.tan();
      Complex complex2 = complex0.log();
      complex2.ZERO.cos();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2576.82360677, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex((-1052.32798));
      complex1.I.subtract(complex2);
      complex2.INF.getArgument();
      complex1.multiply(2576.82360677);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2576.82360677));
      Complex complex1 = complex0.INF.acos();
      complex1.multiply(complex0);
      complex1.hashCode();
      complex0.getField();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.subtract(Double.NaN);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-3246.474789));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.pow((-3246.474789));
      complex1.NaN.hashCode();
      Complex complex3 = complex2.ONE.sin();
      complex1.getReal();
      Complex complex4 = Complex.valueOf((-3522.50068928));
      complex4.ONE.tan();
      Complex complex5 = complex4.NaN.multiply((-26));
      complex4.pow(complex2);
      complex3.sqrt1z();
      complex1.divide((-3522.50068928));
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2576.82360677, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex((-1052.32798));
      Complex.valueOf((-1052.32798), Double.POSITIVE_INFINITY);
      complex2.acos();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.tan();
      complex3.getField();
      complex4.pow(complex1);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(4194);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.createComplex((-1.000452697693571), (-92.288671661));
      complex2.NaN.abs();
      complex1.add((-1.000452697693571));
      Complex.valueOf((-92.288671661), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6629755787634093E108), (-1.6629755787634093E108));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.exp();
      complex0.sqrt1z();
      Complex complex6 = complex4.NaN.subtract(complex3);
      complex0.ONE.readResolve();
      Complex complex7 = complex4.createComplex(4194.0, (-1.6629755787634093E108));
      complex7.multiply(complex4);
      Complex complex8 = complex4.INF.sqrt();
      complex8.ZERO.negate();
      Complex complex9 = complex3.createComplex(1602.4910604114182, 1706.16178757971);
      Complex complex10 = complex9.multiply(1.0000000000000009);
      Complex.valueOf((-1.6629755787634093E108), (-657.91200887));
      Complex.valueOf(1.0000000000000009, (-657.91200887));
      complex3.reciprocal();
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex11.NaN.pow(complex6);
      complex9.tanh();
      Complex.valueOf((-1.6629755787634093E108), 1.3280039800814303E7);
      complex9.sinh();
      complex7.reciprocal();
      complex12.cos();
      complex1.NaN.multiply(complex10);
      complex2.divide(complex5);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(4194);
      Complex complex1 = complex0.acos();
      complex1.tan();
      Complex complex2 = complex0.tan();
      complex1.getField();
      Complex complex3 = complex2.add((double) 4194);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2576.82360677), (-2576.82360677));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      complex2.tan();
      Complex complex3 = complex1.cos();
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1772.96023245);
      Complex complex1 = new Complex(1772.96023245, 1772.96023245);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(2427.35907020022);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.log();
      complex5.tanh();
      Complex complex6 = complex4.log();
      complex1.tanh();
      Complex complex7 = complex3.log();
      complex6.ONE.getArgument();
      complex0.tanh();
      Complex complex8 = complex6.add(20.0);
      complex8.reciprocal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.tan();
      complex2.getField();
      complex1.add(0.0);
      complex0.reciprocal();
      Complex complex3 = Complex.NaN;
      complex3.tanh();
      complex3.log();
      complex0.tanh();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex4.add((-665.89846));
      complex5.createComplex(0.0, (-933.6));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(complex0);
      complex1.exp();
      Complex complex3 = complex2.log();
      complex3.tanh();
      complex2.add(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.add(complex0);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex2.log();
      complex5.tanh();
      complex1.add(Double.POSITIVE_INFINITY);
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.ONE.getField();
      complex0.I.toString();
      complex0.I.sinh();
      Complex complex2 = Complex.valueOf(3952.832, 1529.548);
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.cos();
      complex2.asin();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(3304.76395881, (-2570.60441479));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1742));
      Complex complex2 = complex1.subtract(1.7407497662694827E-295);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      // Undeclared exception!
      complex0.nthRoot(2139028987);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = new Complex((-1.0028661472061573E-7), 2635.408906109);
      complex2.negate();
      Complex complex4 = Complex.ONE;
      complex4.isInfinite();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.NaN.negate();
      complex1.I.abs();
      Complex complex3 = Complex.INF;
      complex0.add(complex3);
      Complex complex4 = complex2.log();
      complex4.tanh();
      complex1.add(Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1436);
      Complex complex1 = Complex.ONE;
      complex0.getField();
      Complex complex2 = Complex.valueOf((double) 1436, Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(2078.0, Double.POSITIVE_INFINITY);
      complex3.conjugate();
      Complex complex4 = Complex.NaN;
      complex4.multiply(complex2);
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.valueOf(0.9672830978442731);
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex7.pow(2.0);
      complex8.conjugate();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sin();
      complex1.getField();
      Complex complex2 = Complex.valueOf(0.0, (-3754.48278053));
      Complex complex3 = new Complex(121.28730296777, (-2.2219890216637604E7));
      Complex complex4 = new Complex((-931.54), (-1.2343297554921835E-8));
      complex4.conjugate();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex((-1.2343297554921835E-8), (-1619.22739573));
      complex5.multiply(complex6);
      Complex complex7 = Complex.I;
      complex5.divide(complex0);
      complex2.pow((-900.2075124200911));
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1577.7857153721));
      Complex complex2 = complex0.add((-4040.06));
      Complex complex3 = complex1.tan();
      complex0.getField();
      Complex complex4 = complex0.add(Double.NaN);
      complex2.reciprocal();
      complex4.getArgument();
      complex1.tanh();
      complex1.getField();
      Complex complex5 = complex0.sinh();
      complex0.getArgument();
      Complex complex6 = Complex.INF;
      complex6.tan();
      complex6.negate();
      Complex complex7 = complex0.pow(1.5056564222233245E7);
      complex7.atan();
      Complex complex8 = Complex.ZERO;
      complex3.add((-4040.06));
      Complex complex9 = new Complex(0.06436340862478629, 2451.9);
      complex1.multiply(complex6);
      complex5.pow(0.7165011220470054);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.acos();
      complex1.NaN.tan();
      Complex complex2 = complex1.tan();
      complex0.getField();
      Complex complex3 = complex0.add((-2149.6090614254003));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.reciprocal();
      complex5.getArgument();
      Complex complex6 = complex0.tanh();
      complex2.getField();
      Complex complex7 = complex2.sinh();
      complex1.getArgument();
      Complex complex8 = complex3.tan();
      complex7.negate();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf(1.3101530910725683, 8.688424478730524E-9);
      complex2.I.multiply(complex10);
      complex9.pow((-0.0018255699857711997));
      Complex complex11 = Complex.I;
      complex2.multiply(complex0);
      Complex complex12 = new Complex(1.3101530910725683);
      complex3.sqrt1z();
      Complex complex13 = Complex.INF;
      complex13.pow(811.60403435);
      complex6.getField();
      Complex complex14 = Complex.ONE;
      complex14.isNaN();
      Complex.valueOf((-1.0), 0.0);
      complex0.log();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
      Complex complex2 = complex0.multiply(2079.0);
      Complex complex3 = complex0.divide(complex1);
      complex1.divide(937.97);
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf(2079.0, (-4053.92));
      complex5.pow(937.97);
      Complex complex6 = Complex.valueOf(2079.0, (-1200.546));
      Complex complex7 = complex3.exp();
      complex2.nthRoot(863);
      Complex complex8 = complex3.add(complex6);
      complex7.acos();
      complex3.multiply(863);
      complex2.readResolve();
      complex4.exp();
      complex1.cosh();
      complex1.multiply(1);
      Complex complex9 = complex8.subtract(1.029925929287856E-4);
      Complex complex10 = Complex.valueOf(1.0285082556185196E-38);
      complex2.cosh();
      Complex.valueOf((-1200.546));
      complex3.add((double) 863);
      complex9.nthRoot(97);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-695.5844254343436));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.pow((-1541.0147));
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = Complex.valueOf(2079.0, 3837.0);
      Complex complex7 = Complex.valueOf(2.5641927558519502E-8);
      Complex complex8 = Complex.NaN;
      complex8.readResolve();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex6.pow((-1.0));
      complex7.multiply(complex5);
      complex1.sqrt1z();
      complex8.pow(1928.53098542169);
      Complex complex11 = Complex.ONE;
      complex9.getField();
      complex10.isNaN();
      Complex complex12 = Complex.valueOf(0.9994470058628583, 2180.7093);
      complex3.log();
      Complex complex13 = Complex.I;
      complex13.sqrt();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1742));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.NaN.negate();
      complex1.I.abs();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 2.0);
      complex0.add(complex3);
      Complex complex4 = complex2.log();
      complex4.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-31.63343432432377));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.pow((-1335.710326));
      complex2.multiply(7);
      complex3.multiply(1.3535549640655518);
      Complex.valueOf((-1335.710326), 1085.81668121);
      Complex complex4 = complex1.createComplex(7, 0.0);
      complex4.multiply(complex0);
      complex2.hashCode();
      complex2.getField();
      Complex complex5 = Complex.ONE;
      complex4.subtract(10.076143427074705);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(2111.100758);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.multiply(37);
      Complex complex4 = complex2.multiply(2111.100758);
      Complex complex5 = Complex.valueOf(10.076143427074705, 0.9672830978442731);
      complex4.subtract(complex5);
      Complex complex6 = Complex.valueOf((-1.821729591343314E-8), 2111.100758);
      Complex complex7 = complex6.createComplex(10.076143427074705, 403);
      complex7.multiply(complex4);
      complex0.hashCode();
      complex1.getField();
      Complex complex8 = Complex.ONE;
      complex4.subtract(0.9672830978442731);
      complex2.atan();
      complex4.log();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.acos();
      complex1.NaN.tan();
      Complex complex2 = complex1.tan();
      complex0.getField();
      Complex complex3 = complex0.add((-2149.6090614254003));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.reciprocal();
      complex5.getArgument();
      Complex complex6 = complex0.tanh();
      complex2.getField();
      Complex complex7 = complex2.sinh();
      complex1.getArgument();
      complex3.tan();
      complex7.negate();
      Complex complex8 = Complex.ONE;
      complex8.pow((-0.0018255699857711997));
      Complex complex9 = Complex.I;
      complex2.multiply(complex0);
      Complex complex10 = new Complex(1.3101530910725683);
      complex3.sqrt1z();
      Complex complex11 = Complex.INF;
      complex11.pow(811.60403435);
      complex6.getField();
      Complex complex12 = Complex.ONE;
      complex12.isNaN();
      Complex.valueOf((-1.0), 0.0);
      complex0.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.INF.sqrt();
      complex3.INF.getArgument();
      Complex complex4 = complex1.I.multiply(2945.128317);
      complex1.INF.sinh();
      Complex complex5 = complex1.I.multiply(2905.5);
      Complex complex6 = complex5.ONE.acos();
      complex6.I.pow(complex1);
      complex6.INF.asin();
      Complex complex7 = complex5.log();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex0.INF.negate();
      complex12.INF.divide(6.283185307179586);
      Complex complex13 = complex9.atan();
      complex2.cosh();
      complex13.ZERO.sinh();
      complex1.ONE.pow(2945.128317);
      complex9.abs();
      Complex complex14 = complex2.tan();
      Complex complex15 = complex0.ONE.sqrt1z();
      complex15.NaN.sinh();
      complex0.sinh();
      Complex.valueOf(0.0);
      complex9.toString();
      complex14.subtract(complex11);
      Complex complex16 = complex9.cosh();
      complex16.abs();
      complex10.tan();
      complex8.sqrt1z();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.asin();
      double double0 = (-2397.110299228227);
      Complex complex1 = Complex.valueOf((-2397.110299228227));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.add(complex0);
      Complex.valueOf(17.936005573513498, 17.936005573513498);
      Complex.valueOf(17.936005573513498);
      complex0.subtract(complex2);
      complex1.toString();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.ONE;
      complex1.INF.divide(complex6);
      Complex complex7 = complex5.I.divide(17.936005573513498);
      complex7.ONE.toString();
      complex2.I.pow(17.936005573513498);
      double double1 = (-984.7084835070507);
      complex4.ONE.getArgument();
      try { 
        complex4.ZERO.nthRoot((-872));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -872
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.ONE.pow(complex1);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.divide((-424.56430781));
      complex3.INF.exp();
      complex2.pow((-424.56430781));
      Complex.valueOf((-424.56430781), (-424.56430781));
      complex0.exp();
      int int0 = (-97);
      try { 
        complex1.INF.nthRoot((-97));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -97
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex4.subtract(complex1);
      Complex complex8 = complex4.conjugate();
      complex4.cosh();
      complex3.divide(2.1842007637023926);
      Object object0 = new Object();
      complex8.equals(object0);
      Complex complex9 = complex5.asin();
      Complex complex10 = complex9.multiply(2.1842007637023926);
      complex9.pow(complex6);
      complex7.sqrt();
      Complex complex11 = complex1.pow(complex2);
      complex10.subtract(0.9999924833371979);
      complex8.nthRoot(1571);
      Complex complex12 = complex11.sinh();
      complex12.I.nthRoot(1571);
      Complex complex13 = complex2.acos();
      complex13.hashCode();
      complex10.multiply(1823);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex0.multiply(2079.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.pow(2079.0);
      complex4.I.divide(complex2);
      Complex complex5 = Complex.valueOf(2079.0);
      Complex complex6 = complex5.createComplex(1.0, 1.0);
      complex5.toString();
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex7.negate();
      complex8.multiply(2079.0);
      complex2.negate();
      complex4.isInfinite();
      Complex complex9 = complex4.exp();
      complex0.isInfinite();
      complex7.pow(0.6659245491027832);
      complex0.negate();
      complex9.asin();
      complex7.createComplex(5224.60006, 0.6659245491027832);
      complex6.negate();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.I;
      complex4.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(1.0);
      Complex complex4 = complex0.cos();
      complex3.nthRoot(308);
      complex1.tan();
      Complex complex5 = complex1.acos();
      Complex complex6 = new Complex(1.0, 2.0928317096428755E-247);
      Complex complex7 = complex1.pow(complex6);
      complex7.tanh();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = Complex.valueOf(1.0);
      complex9.divide(1.26570724146049E257);
      Complex complex10 = complex1.pow(1673.1);
      complex6.tanh();
      complex2.pow(0.49030399322509766);
      Complex complex11 = complex10.pow(Double.POSITIVE_INFINITY);
      complex4.hashCode();
      complex11.pow(complex1);
      complex5.atan();
      complex5.atan();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-31.63343432432377));
      Complex complex1 = Complex.valueOf((-31.63343432432377));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply((-31.63343432432377));
      complex2.divide(complex1);
      Complex complex4 = complex3.pow(2079.0);
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex0.cosh();
      complex3.conjugate();
      complex4.subtract(complex2);
      Complex complex7 = complex6.conjugate();
      complex7.ZERO.asin();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.divide((-1587.10524981838));
      complex5.asin();
      Complex complex10 = Complex.I;
      complex10.multiply(2079.0);
      Complex complex11 = complex5.pow(complex2);
      Complex complex12 = complex0.sqrt();
      complex12.pow(complex11);
      complex4.subtract((-2156.72451174));
      complex9.sinh();
      Complex complex13 = Complex.I;
      complex13.acos();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.subtract(681.8081564657174);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex1.acos();
      complex3.atan();
      complex4.createComplex((-430.220791051), (-430.220791051));
      complex7.readResolve();
      complex6.equals(complex4);
      Complex complex8 = Complex.ONE;
      complex8.divide((-60.67));
      complex5.getImaginary();
      complex1.pow(complex6);
      Complex complex9 = complex6.multiply(1072);
      Complex complex10 = complex8.negate();
      complex1.tanh();
      complex10.exp();
      complex9.add(5484.13);
      complex6.multiply((-2335.57778376));
      complex6.multiply(1072);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.exp();
      complex1.ONE.multiply(1.0);
      Complex complex3 = complex0.ZERO.cos();
      complex3.INF.nthRoot(308);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.cosh();
      complex5.divide(536.461142);
      complex6.equals(complex1);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex2.multiply((-787.7702124119234));
      complex9.pow(complex2);
      Complex complex10 = complex8.sqrt();
      complex1.pow(complex8);
      complex10.subtract((-2476.587136218));
      complex7.nthRoot(308);
      complex7.sinh();
      Complex complex11 = complex1.acos();
      Complex complex12 = Complex.valueOf(0.9715162566482856, 0.9715162566482856);
      complex12.hashCode();
      complex11.nthRoot(308);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.createComplex(2.1842007637023926, (-2576.82360677));
      complex0.toString();
      complex1.INF.subtract(complex4);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.multiply(Double.NaN);
      complex3.negate();
      complex7.isInfinite();
      Complex complex8 = new Complex((-2576.82360677));
      complex8.exp();
      complex5.isInfinite();
      complex7.pow(2.1842007637023926);
      Complex complex9 = complex7.negate();
      complex7.asin();
      complex9.createComplex((-2427.35907020022), Double.NaN);
      Complex complex10 = Complex.I;
      complex10.negate();
      Complex complex11 = Complex.ONE;
      complex8.divide(complex4);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4357.4859411221));
      Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.createComplex(3195.184, 3195.184);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.asin();
      complex0.ZERO.getField();
      complex1.hashCode();
      Complex complex4 = Complex.valueOf(0.0);
      complex3.acos();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.divide(complex3);
      complex6.pow((-925.7695442933407));
      complex4.getArgument();
      complex1.add(complex5);
      complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1601.4434841347695), (-1601.4434841347695));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.tan();
      complex2.I.getField();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.reciprocal();
      complex4.getArgument();
      Complex complex5 = complex4.I.tanh();
      complex3.ZERO.getField();
      Complex complex6 = complex2.sinh();
      complex6.getArgument();
      Complex complex7 = complex5.tan();
      complex2.negate();
      Complex.valueOf((-1601.4434841347695), 0.0);
      complex6.ZERO.hashCode();
      complex5.NaN.getField();
      Complex complex8 = complex6.createComplex(0.0, 1871.93114311);
      complex8.I.pow(0.0);
      Complex complex9 = Complex.I;
      complex1.toString();
      Complex complex10 = complex3.tanh();
      complex7.exp();
      complex10.ONE.asin();
      Complex complex11 = complex3.pow(0.0);
      complex11.NaN.pow(complex4);
      complex10.toString();
      complex5.getField();
      Complex complex12 = complex5.sqrt();
      complex12.ZERO.acos();
      complex10.atan();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.exp();
      Complex complex2 = complex1.ONE.multiply(1.0);
      complex0.INF.getField();
      complex2.INF.nthRoot(308);
      Complex complex3 = complex0.NaN.tan();
      complex3.acos();
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex0.reciprocal();
      complex0.ONE.divide(0.49030399322509766);
      Complex complex6 = complex0.pow(0.49030399322509766);
      complex6.tanh();
      complex6.pow(0.49030399322509766);
      complex4.pow(0.49030399322509766);
      complex6.hashCode();
      Complex complex7 = complex5.pow(complex0);
      complex0.atan();
      complex0.abs();
      complex7.sqrt1z();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(2.5631381141873417E-132);
      complex2.cos();
      complex0.nthRoot(308);
      complex0.tan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex5.divide(0.49030399322509766);
      Complex complex8 = complex6.pow(0.49030399322509766);
      complex1.tanh();
      complex1.pow(0.49030399322509766);
      complex2.pow(1.0);
      complex7.hashCode();
      complex0.pow(complex3);
      Complex complex9 = complex1.atan();
      complex9.atan();
      complex8.log();
      complex7.pow((-1522.18345));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf((-20.0), (-1501.6215595));
      Complex complex5 = complex4.createComplex((-2576.82360677), (-20.0));
      complex0.toString();
      complex0.subtract(complex3);
      complex5.negate();
      Complex complex6 = complex1.negate();
      complex6.isInfinite();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.exp();
      complex0.isInfinite();
      complex7.pow(0.6420926159343308);
      Complex complex9 = Complex.I;
      complex9.asin();
      complex8.negate();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.INF;
      complex1.divide(complex11);
      Complex.valueOf((-1501.6215595));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-31.63343432432377));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.I.subtract(681.8081564657174);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex4.tan();
      complex2.acos();
      complex1.pow(complex2);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.reciprocal();
      complex2.divide((-587.1029365));
      Complex complex10 = complex2.pow((-2142.97496));
      complex10.tanh();
      complex9.pow((-2142.97496));
      complex1.pow(1.178204606523101E-7);
      complex2.hashCode();
      complex2.pow(complex6);
      complex6.atan();
      complex5.atan();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex0.multiply(2079.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.pow(2079.0);
      complex4.I.divide(complex2);
      complex4.cosh();
      Complex complex5 = complex2.conjugate();
      complex3.subtract(complex0);
      Complex complex6 = complex3.INF.conjugate();
      Complex complex7 = Complex.valueOf(536.461142);
      complex7.tanh();
      complex5.reciprocal();
      Complex complex8 = complex6.divide((-529.73166));
      complex2.pow(536.461142);
      complex6.tanh();
      complex8.pow(536.461142);
      complex1.pow(2079.0);
      complex5.hashCode();
      complex4.pow(complex8);
      complex0.atan();
      complex6.atan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.exp();
      Complex complex2 = complex1.ONE.multiply(1.0);
      Complex complex3 = complex0.ZERO.cos();
      complex3.INF.nthRoot(308);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.NaN.pow(complex1);
      complex1.cosh();
      Complex complex7 = complex5.divide((double) 308);
      complex6.equals(complex2);
      Complex complex8 = complex5.asin();
      complex1.multiply((double) 308);
      complex8.pow(complex6);
      complex7.sqrt();
      complex0.pow(complex1);
      complex3.subtract(1.8048513285848406E-35);
      try { 
        complex6.nthRoot((-1421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,421
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2396681308746338, 1.2396681308746338);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.negate();
      complex1.tanh();
      complex1.abs();
      Complex complex3 = new Complex(1.2396681308746338);
      complex3.subtract(1.4674011002723395);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(complex3);
      complex5.ZERO.negate();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.NaN.negate();
      complex1.I.abs();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 2.0);
      complex0.add(complex3);
      Complex complex4 = complex2.log();
      complex4.tanh();
      complex1.add(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.add(6.283185307179586);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.ONE.add(6.283185307179586);
      complex4.ZERO.exp();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.log();
      Complex complex9 = complex7.divide(complex5);
      Complex.valueOf((-2549.6200373));
      complex7.conjugate();
      Complex complex10 = complex9.acos();
      complex8.cosh();
      complex1.sin();
      Complex complex11 = complex3.tanh();
      complex10.hashCode();
      complex6.abs();
      complex2.subtract(complex6);
      complex10.pow(complex0);
      Complex complex12 = complex5.cos();
      complex11.subtract((-2549.6200373));
      Complex complex13 = complex9.sqrt();
      Complex.valueOf((-2312.887481), (-2549.6200373));
      Complex complex14 = complex12.log();
      complex14.subtract(complex9);
      complex13.isNaN();
      Complex complex15 = Complex.valueOf(3.425518820814759);
      complex15.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1601.4434841347695), (-1601.4434841347695));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.tan();
      complex2.I.getField();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.reciprocal();
      complex4.getArgument();
      Complex complex5 = complex4.I.tanh();
      complex3.ZERO.getField();
      Complex complex6 = complex2.sinh();
      complex6.getArgument();
      Complex complex7 = complex5.tan();
      Complex.valueOf((-1601.4434841347695), 0.0);
      complex6.ZERO.hashCode();
      complex5.NaN.getField();
      Complex complex8 = complex6.createComplex(0.0, 1871.93114311);
      complex8.I.pow(0.0);
      complex3.negate();
      complex1.toString();
      Complex complex9 = complex3.tanh();
      complex7.exp();
      complex9.ONE.asin();
      Complex complex10 = complex3.pow(0.0);
      complex10.NaN.pow(complex4);
      complex9.toString();
      complex5.getField();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex11.ZERO.acos();
      complex5.abs();
      complex12.acos();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-31.63343432432377));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.I.subtract(681.8081564657174);
      complex2.atan();
      complex4.add(681.8081564657174);
      complex0.multiply(complex4);
      complex5.pow(389.59193895376);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 434.3375272388412);
      Complex complex1 = new Complex(434.3375272388412);
      Complex complex2 = complex0.createComplex((-1788.1), (-5.3681978363391484E-52));
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((-430.220791051), (-5.3681978363391484E-52));
      complex0.equals(complex3);
      Complex complex4 = complex3.divide(1928.53098542169);
      complex3.getImaginary();
      Complex complex5 = complex4.pow(complex2);
      complex4.multiply((-1554));
      complex4.negate();
      Complex complex6 = complex5.tanh();
      complex6.exp();
      complex0.add((-430.220791051));
      Complex complex7 = Complex.valueOf(0.0);
      complex7.multiply((-5.3681978363391484E-52));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.ZERO.multiply((-95));
      complex1.INF.asin();
      Complex.valueOf(2835.736972029156, 0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex0.conjugate();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sin();
      complex1.I.subtract(0.0);
      complex0.I.subtract(complex1);
      complex1.INF.multiply(779);
      complex1.ONE.reciprocal();
      Complex complex2 = complex0.ZERO.multiply(1);
      complex0.readResolve();
      complex1.isNaN();
      complex2.ONE.abs();
      Complex complex3 = complex0.subtract(585.505079772096);
      complex2.subtract(complex3);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(1.408559707497606E293);
      complex0.tanh();
      Complex complex3 = complex1.atan();
      complex3.I.sqrt1z();
      Complex complex4 = complex0.multiply(Double.NaN);
      complex4.NaN.abs();
      complex0.isInfinite();
      complex4.divide(677.06518277634);
      Complex complex5 = complex1.log();
      Complex complex6 = complex3.divide(complex0);
      complex4.conjugate();
      complex4.getReal();
      complex2.cos();
      complex5.sqrt1z();
      Complex complex7 = complex1.cosh();
      complex2.hashCode();
      complex6.exp();
      complex4.divide(Double.NaN);
      Complex.valueOf(0.09938566386699677, 0.09938566386699677);
      Complex complex8 = complex5.tan();
      complex8.I.add(677.06518277634);
      complex7.getArgument();
      try { 
        complex5.nthRoot((-1107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,107
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(3.79438125545842E-8, 1803.9644);
      complex0.readResolve();
      complex0.NaN.log();
      Complex complex1 = complex0.atan();
      complex1.I.exp();
      complex1.NaN.multiply(0);
      Complex.valueOf(4.903687986212687E-49);
      Complex complex2 = complex1.asin();
      complex2.INF.exp();
      complex2.NaN.abs();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf(1803.9644, 1803.9644);
      complex1.NaN.sqrt();
      Complex complex5 = complex4.sin();
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex6 = complex3.subtract((-1945.226776816));
      complex6.NaN.sinh();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = (-2.3105188606976847E-7);
      Complex complex0 = Complex.valueOf((-2.3105188606976847E-7));
      complex0.isNaN();
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.reciprocal();
      Complex complex1 = Complex.ONE;
      complex0.NaN.add(complex1);
      Complex complex2 = Complex.valueOf(2133.49461556207, 2133.49461556207);
      complex0.I.readResolve();
      Complex complex3 = complex2.ONE.sinh();
      complex3.ZERO.pow(2133.49461556207);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.I.sqrt1z();
      complex5.I.pow(2133.49461556207);
      complex0.getField();
      complex4.isNaN();
      Complex.valueOf(0.0, 7.785491934690374E-291);
      complex5.log();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.ZERO.tanh();
      complex0.isInfinite();
      Complex complex4 = complex0.createComplex((-4461.489459), 0.0);
      complex4.ZERO.sqrt1z();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.pow(0.0);
      complex7.getArgument();
      Complex complex8 = complex6.ONE.pow(259.332325094);
      complex5.sin();
      complex3.ONE.subtract(20.0);
      Complex complex9 = complex6.cosh();
      complex7.equals(complex9);
      complex2.log();
      Complex complex10 = complex8.tan();
      complex10.multiply(1997.9437540502);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2396681308746338, 1.2396681308746338);
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      complex1.tanh();
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.exp();
      complex1.ONE.multiply(1.0);
      Complex complex2 = complex0.ZERO.cos();
      complex2.INF.nthRoot(308);
      Complex complex3 = complex2.NaN.tan();
      complex3.acos();
      complex0.NaN.pow(complex1);
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex0.reciprocal();
      complex0.ONE.divide(0.49030399322509766);
      Complex complex6 = complex0.pow(0.49030399322509766);
      complex6.tanh();
      Complex complex7 = complex6.pow(0.49030399322509766);
      complex4.pow(0.49030399322509766);
      complex6.hashCode();
      complex5.pow(complex0);
      Complex complex8 = complex0.atan();
      complex8.ONE.atan();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(3239.76088618, 2.0);
      complex0.toString();
      Complex complex1 = complex0.createComplex(2.0, 0.0);
      complex0.NaN.divide(3239.76088618);
      complex0.equals("(3239.76088618, 2.0)");
      Complex complex2 = complex1.ONE.cos();
      complex0.sin();
      Complex complex3 = complex1.pow(3239.76088618);
      complex2.log();
      complex0.subtract((-2.928362616578011E142));
      Complex.valueOf(3239.76088618, 0.0);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      complex3.INF.sinh();
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex0.ONE.pow((-2938.17952369719));
      complex7.I.getArgument();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex8.NaN.negate();
      complex4.NaN.exp();
      Complex complex10 = complex8.multiply(52.61895142765);
      Complex complex11 = Complex.valueOf(1146.552917821845);
      Complex complex12 = complex11.sqrt();
      complex4.ONE.toString();
      complex2.toString();
      Complex complex13 = complex0.add(complex12);
      complex12.I.asin();
      Complex complex14 = complex7.pow((-2938.17952369719));
      complex14.NaN.multiply(0.0);
      complex9.isInfinite();
      complex11.NaN.readResolve();
      Complex complex15 = complex10.multiply(101);
      complex5.tan();
      complex12.divide(1.5707963267948966);
      complex6.multiply(0.0);
      complex11.INF.sqrt();
      complex15.readResolve();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(287);
      Complex complex1 = Complex.valueOf(289.22952146);
      Complex complex2 = complex0.add(complex1);
      complex2.INF.pow(0.0);
      Complex complex3 = complex1.multiply(403);
      Complex complex4 = complex2.multiply(289.22952146);
      Complex.valueOf(289.22952146, 2.0919226941745448E-8);
      complex4.createComplex(287, 289.22952146);
      complex0.multiply(complex3);
      complex4.hashCode();
      complex0.getField();
      Complex complex5 = complex4.pow((double) 287);
      Complex complex6 = complex5.conjugate();
      complex6.add(1.334449995534113E-7);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide((-2424.1107));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 1184.23636);
      complex1.multiply(0);
      complex0.NaN.multiply(complex1);
      Complex complex2 = Complex.ZERO;
      complex0.INF.add(complex2);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.divide(713.9);
      complex2.ZERO.multiply(6.283185307179586);
      complex0.multiply(0.0);
      Complex.valueOf(713.9, (-3823.873572));
      Complex complex3 = complex1.INF.acos();
      complex1.createComplex((-1796.0772519195602), 713.9);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-31.63343432432377));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.subtract(complex3);
      complex4.I.subtract(681.8081564657174);
      complex4.negate();
      Complex complex5 = complex1.I.acos();
      Complex complex6 = complex2.atan();
      complex5.createComplex((-31.63343432432377), (-430.220791051));
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
      complex5.divide((-31.63343432432377));
      complex3.getImaginary();
      complex5.INF.pow(complex2);
      Complex complex7 = complex5.multiply(1072);
      Complex complex8 = complex4.negate();
      complex1.tanh();
      complex8.exp();
      complex7.add(681.8081564657174);
      complex8.multiply(1.8457821628427503E-8);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = 780.0851222;
      Complex complex0 = Complex.valueOf(780.0851222);
      int int0 = (-2195);
      complex0.multiply((-2195));
      complex0.sqrt();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.exp();
      try { 
        complex2.ZERO.nthRoot((-2195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,195
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.INF.multiply(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex0.abs();
      double double0 = 489.49178006325;
      Complex.valueOf(1697.9455, 489.49178006325);
      int int0 = (-1);
      try { 
        complex1.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 434.3375272388412);
      Complex complex1 = new Complex(434.3375272388412);
      complex0.ZERO.add(389.59193895376);
      Complex complex2 = complex0.multiply(complex1);
      complex0.pow(0.0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2065.2727435819347));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.I.log();
      Complex.valueOf(0.0);
      Complex complex4 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.ONE.pow(0.0);
      complex2.isNaN();
      Complex complex6 = complex0.log();
      Complex complex7 = complex5.tan();
      complex1.I.toString();
      Complex complex8 = complex5.multiply(560);
      complex6.getImaginary();
      complex0.INF.getArgument();
      complex8.atan();
      Complex.valueOf(4650.92, 3.141592653589793);
      complex4.ZERO.atan();
      Complex complex9 = complex1.add(4650.92);
      complex2.abs();
      Complex complex10 = complex9.reciprocal();
      complex10.getImaginary();
      complex10.INF.sqrt1z();
      Complex complex11 = complex6.ONE.negate();
      complex11.multiply(560);
      complex0.equals(complex6);
      complex6.negate();
      Complex complex12 = complex7.createComplex(0.0, 560);
      complex3.subtract(complex4);
      complex1.tanh();
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(851.5502);
      Complex complex2 = complex1.multiply((-562));
      complex2.ZERO.negate();
      Complex complex3 = complex0.multiply(1.0);
      Complex complex4 = complex3.INF.asin();
      complex4.ZERO.multiply((-1738.69));
      Complex complex5 = complex3.I.subtract((-106.4));
      complex3.ZERO.hashCode();
      Complex complex6 = complex3.ZERO.sinh();
      Complex complex7 = Complex.valueOf(5191.92);
      complex3.isNaN();
      complex6.isNaN();
      complex4.cos();
      Complex complex8 = complex7.subtract(complex4);
      complex5.add(complex8);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(444.003, (-2862.9496179322));
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.NaN, (-1611.5861625));
      Complex complex1 = Complex.I;
      complex1.I.readResolve();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex3.ZERO.sinh();
      complex4.ONE.negate();
      complex1.NaN.multiply(1881);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.add(complex0);
      complex0.getImaginary();
      complex6.NaN.atan();
      Complex complex7 = complex6.pow(4352.1);
      complex2.ONE.cos();
      complex7.ONE.getArgument();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1060);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.multiply((double) 1060);
      complex4.cos();
      Complex complex6 = complex5.NaN.cos();
      complex6.ONE.nthRoot(1060);
      Complex complex7 = complex3.pow(complex0);
      complex7.NaN.sqrt();
      Complex complex8 = complex3.subtract(complex1);
      Complex complex9 = complex7.subtract((double) 1060);
      complex9.I.tanh();
      Complex complex10 = complex3.subtract(0.0);
      complex0.I.tanh();
      complex10.NaN.negate();
      complex4.tanh();
      Complex complex11 = complex3.sin();
      Complex complex12 = complex7.cosh();
      complex2.equals(complex11);
      complex2.isNaN();
      complex7.subtract(1381.376414);
      complex3.createComplex((-2404.46473553955), 2115.423439);
      complex2.exp();
      complex5.exp();
      complex0.I.add(2115.423439);
      complex8.reciprocal();
      complex12.sqrt();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex0);
      complex1.I.hashCode();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.NaN.hashCode();
      Complex complex4 = complex2.multiply(710);
      complex4.NaN.sqrt();
      complex4.hashCode();
      complex2.ZERO.divide(Double.NaN);
      Complex complex5 = complex2.exp();
      try { 
        complex5.ZERO.nthRoot((-802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -802
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ZERO.toString();
      complex0.tan();
      complex0.subtract(427.052572954);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.NaN.negate();
      complex1.I.abs();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 2.0);
      complex0.add(complex3);
      complex2.log();
      Complex complex4 = complex2.tanh();
      complex1.add(Double.POSITIVE_INFINITY);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1165.333896);
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.pow(1165.333896);
      complex5.getArgument();
      complex0.getReal();
      Complex complex7 = complex1.add(Double.NaN);
      complex7.NaN.tan();
      complex6.multiply(complex4);
      complex0.getArgument();
      complex3.cosh();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.add(6.283185307179586);
      Complex complex2 = complex1.I.atan();
      complex2.ONE.acos();
      Complex complex3 = complex1.ONE.add(6.283185307179586);
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex7 = complex0.conjugate();
      complex0.log();
      Complex complex8 = complex7.divide(complex5);
      Complex complex9 = Complex.valueOf((-2549.6200373));
      complex9.ZERO.conjugate();
      complex7.acos();
      Complex complex10 = complex3.cosh();
      complex10.ONE.sin();
      Complex complex11 = complex8.tanh();
      complex11.INF.hashCode();
      complex11.NaN.abs();
      Complex complex12 = complex7.subtract(complex10);
      complex12.INF.pow(complex4);
      Complex complex13 = complex11.cos();
      complex13.ZERO.subtract(0.0);
      complex13.I.sqrt();
      Complex complex14 = Complex.valueOf((-816.9954549134769), 1.2087698972768686E-183);
      complex14.NaN.log();
      complex3.subtract(complex6);
      complex2.isNaN();
      complex9.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2427.35907020022), (-2427.35907020022));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.NaN.tan();
      complex0.createComplex(2.1842007637023926, (-2576.82360677));
      complex0.toString();
      Complex complex5 = complex1.INF.subtract(complex4);
      Complex complex6 = complex5.ZERO.negate();
      complex6.I.multiply(Double.NaN);
      complex5.ONE.negate();
      complex0.isInfinite();
      complex1.exp();
      complex1.isInfinite();
      Complex complex7 = complex1.pow((-2427.35907020022));
      complex7.negate();
      Complex complex8 = complex7.asin();
      complex8.INF.createComplex(5224.60006, (-2427.35907020022));
      complex7.negate();
      Complex complex9 = Complex.ONE;
      complex2.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2014.248), 6.283185307179586);
      Complex complex1 = new Complex(1031.10334);
      complex1.NaN.readResolve();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.INF.multiply(1031.10334);
      complex0.getReal();
      complex2.I.sin();
      Complex complex4 = complex2.createComplex((-3086.5), 861.134644492301);
      Complex complex5 = complex1.ONE.subtract((-1.0));
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ONE.acos();
      complex3.sin();
      Complex complex7 = complex2.add((-2014.248));
      complex7.getImaginary();
      complex4.hashCode();
      Complex complex8 = complex0.subtract((-2631.161));
      complex8.multiply(complex1);
      Complex complex9 = complex1.asin();
      complex5.multiply((-1315));
      complex9.asin();
      Complex complex10 = complex1.tan();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.304245948791504);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1737.37));
      complex0.multiply((-162.9797422492));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.asin();
      double double0 = (-2397.110299228227);
      Complex complex1 = Complex.valueOf((-2397.110299228227));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.add(complex0);
      Complex.valueOf(0.0, 0.0);
      complex2.tanh();
      complex0.subtract(complex2);
      complex1.toString();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.ONE;
      complex1.INF.divide(complex6);
      Complex complex7 = complex5.I.divide(0.0);
      complex7.ONE.toString();
      complex2.I.pow(0.0);
      double double1 = (-984.7084835070507);
      complex4.ONE.getArgument();
      try { 
        complex4.ZERO.nthRoot((-872));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -872
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4357.4859411221));
      Complex complex1 = Complex.valueOf(0.0, (-4357.4859411221));
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.createComplex(3195.184, 3195.184);
      complex3.atan();
      Complex complex4 = complex0.asin();
      complex0.ZERO.getField();
      complex2.hashCode();
      Complex complex5 = Complex.valueOf(0.0);
      complex4.acos();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex0.divide(complex4);
      complex7.pow((-925.7695442933407));
      complex5.getArgument();
      complex2.add(complex6);
      complex7.multiply(0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-3914.52178);
      complex0.INF.subtract((-3914.52178));
      double double1 = Double.NaN;
      complex0.createComplex((-3914.52178), Double.NaN);
      int int0 = (-1);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1601.4434841347695));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.tan();
      complex2.I.getField();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.reciprocal();
      complex4.getArgument();
      Complex complex5 = complex4.I.tanh();
      complex3.ZERO.getField();
      Complex complex6 = complex2.sinh();
      complex6.getArgument();
      Complex complex7 = complex5.tan();
      complex2.negate();
      Complex.valueOf((-1601.4434841347695), 0.0);
      complex6.ZERO.hashCode();
      complex5.NaN.getField();
      Complex complex8 = complex6.createComplex(0.0, 1871.93114311);
      complex8.I.pow(0.0);
      Complex complex9 = complex3.negate();
      complex1.toString();
      Complex complex10 = complex3.tanh();
      complex7.exp();
      complex10.ONE.asin();
      Complex complex11 = complex3.pow(0.0);
      complex11.NaN.pow(complex4);
      complex10.toString();
      complex5.getField();
      Complex complex12 = complex5.sqrt();
      complex12.ZERO.acos();
      complex5.abs();
      complex9.sqrt1z();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(2079.0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.pow(2079.0);
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex5.cosh();
      complex2.conjugate();
      Complex complex8 = complex4.subtract(complex0);
      complex4.INF.conjugate();
      complex8.I.cosh();
      Complex complex9 = complex7.ONE.divide(536.461142);
      assertEquals(0.0018640679104396343, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      complex8.equals((Object) null);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex10.multiply(2079.0);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex1.pow(complex7);
      Complex complex13 = complex7.sqrt();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex12.pow(complex0);
      Complex complex14 = complex6.subtract((-2476.587136218));
      List<Complex> list0 = complex2.nthRoot(1337);
      assertEquals(1337, list0.size());
      
      Complex complex15 = complex0.sinh();
      assertEquals(0.8414709848078965, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex3.acos();
      assertEquals(1.5707963267948966, complex16.getReal(), 0.01);
      
      complex14.hashCode();
      assertEquals(2477.587136218, complex14.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3385.532269));
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
