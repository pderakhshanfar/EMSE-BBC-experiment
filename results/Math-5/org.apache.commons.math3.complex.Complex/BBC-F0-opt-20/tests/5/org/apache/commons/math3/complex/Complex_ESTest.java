/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:47:50 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(6.574128018028633E-24);
      Complex complex2 = complex1.acos();
      complex2.ONE.conjugate();
      Complex complex3 = complex0.I.createComplex(6.574128018028633E-24, Double.POSITIVE_INFINITY);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.tanh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex2.divide(complex3);
      complex4.asin();
      Complex complex5 = Complex.ZERO;
      complex5.reciprocal();
      complex2.I.sqrt();
      Complex complex6 = new Complex(1416, Double.POSITIVE_INFINITY);
      complex6.multiply(1416);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.pow(complex1);
      complex3.I.tanh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.atan();
      complex5.divide(complex0);
      complex0.sqrt();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0450615121235744E99, (-1.0));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(938.48);
      Complex complex2 = new Complex(938.48);
      complex2.negate();
      Complex complex3 = complex1.multiply((-365));
      Complex complex4 = Complex.I;
      complex4.nthRoot(7);
      Complex complex5 = Complex.valueOf((double) (-365), Double.POSITIVE_INFINITY);
      complex0.getField();
      complex5.multiply(complex2);
      complex4.ZERO.createComplex((-1805.259931274973), (-1805.259931274973));
      complex3.multiply(complex4);
      Complex complex6 = complex4.log();
      complex6.asin();
      complex2.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sqrt();
      complex0.multiply(complex2);
      Complex.valueOf((-2786.581647705));
      complex0.log();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0003660662340161, 1.0003660662340161);
      complex0.I.getField();
      Complex complex1 = complex0.ZERO.log();
      complex0.getField();
      complex1.ONE.nthRoot(108);
      Complex complex2 = complex1.sinh();
      complex0.NaN.exp();
      Complex complex3 = complex1.atan();
      complex3.ONE.pow(1.0003660662340161);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex2.INF.negate();
      Complex complex7 = complex5.ZERO.cosh();
      complex7.ONE.log();
      complex7.NaN.getField();
      Complex complex8 = complex2.acos();
      complex0.INF.abs();
      complex4.conjugate();
      complex8.ZERO.add(complex2);
      complex8.ZERO.hashCode();
      complex8.ONE.asin();
      complex8.tan();
      complex5.add(1.0003660662340161);
      complex8.nthRoot(108);
      Complex complex9 = complex4.createComplex((-20.0), (-20.0));
      Complex complex10 = complex0.tan();
      complex10.INF.acos();
      complex10.ZERO.hashCode();
      complex1.divide(complex9);
      Complex.valueOf(1600.3767765901523);
      Complex complex11 = complex6.acos();
      complex11.ZERO.atan();
      complex11.log();
      complex3.asin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.5450005531311035);
      complex1.toString();
      complex1.toString();
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      complex1.asin();
      complex0.getArgument();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.ZERO.cosh();
      complex2.I.nthRoot(2287);
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = complex1.cos();
      Complex complex6 = new Complex(2927.641281427, 2927.641281427);
      complex5.I.multiply(complex6);
      Complex complex7 = complex3.cos();
      complex7.getField();
      Complex complex8 = complex7.acos();
      complex8.ZERO.nthRoot(297);
      Complex complex9 = complex8.INF.add(Double.NaN);
      complex9.ONE.toString();
      complex9.I.hashCode();
      Complex complex10 = complex2.multiply(complex1);
      Complex complex11 = complex10.ONE.subtract(909.6568717991811);
      Complex complex12 = complex7.reciprocal();
      complex3.multiply((-1693));
      complex5.cosh();
      complex4.log();
      complex6.conjugate();
      complex12.subtract(complex10);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-1485.069);
      Complex complex0 = new Complex((-1485.069), (-20.0));
      complex0.readResolve();
      Complex complex1 = complex0.add((-1485.069));
      complex1.NaN.reciprocal();
      complex1.add(complex0);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.51813137650059E-8);
      complex0.atan();
      Complex complex1 = Complex.valueOf(4293.708425, 20.0);
      Complex complex2 = Complex.ZERO;
      complex2.asin();
      complex0.getArgument();
      complex1.tan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.9999996062582006, (-9197692.8729));
      Complex complex1 = Complex.valueOf(4461.3);
      Complex complex2 = Complex.valueOf(4461.3, (-1.0));
      complex0.asin();
      Complex complex3 = complex1.conjugate();
      complex0.tan();
      complex1.ONE.exp();
      Complex complex4 = new Complex((-1.0), Double.NaN);
      Complex complex5 = complex3.pow(complex2);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-456.697144));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.add(complex3);
      complex0.reciprocal();
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-17.074184006725176), (-17.074184006725176));
      Complex complex1 = new Complex((-17.074184006725176));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.atan();
      complex4.ZERO.abs();
      Complex complex5 = complex1.INF.divide(complex3);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ONE.sin();
      complex7.I.getField();
      Complex complex8 = complex6.createComplex((-20.0), (-17.074184006725176));
      complex8.tanh();
      complex1.ZERO.readResolve();
      Complex complex9 = complex2.subtract(6.283185307179586);
      Complex complex10 = complex9.NaN.divide(6.283185307179586);
      complex9.ZERO.exp();
      complex1.add(1.0);
      complex1.sinh();
      Complex complex11 = complex9.createComplex(5.88418203051333E-15, 1.0);
      complex11.I.abs();
      Complex complex12 = complex9.asin();
      complex10.subtract(complex9);
      Complex complex13 = complex12.reciprocal();
      complex12.add((-20.0));
      complex2.toString();
      complex2.pow(1.0);
      complex0.readResolve();
      complex5.log();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-2862.280054193626), (-1.8908603201210102E262));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      complex2.readResolve();
      complex1.getArgument();
      complex1.tan();
      Complex.valueOf((-59.0), (-1180.28));
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-266.126), Double.NaN);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.add((-208571.28133775672));
      complex0.I.nthRoot(616);
      complex2.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.exp();
      complex6.readResolve();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex0.pow((-208571.28133775672));
      complex8.ZERO.exp();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.subtract(complex3);
      complex10.tanh();
      Complex.valueOf(Double.NaN, 105.15735232);
      Complex complex11 = complex9.ONE.multiply(complex7);
      complex4.readResolve();
      complex9.multiply(769.68913);
      complex11.nthRoot(1125);
      complex9.log();
      Complex complex12 = Complex.valueOf(1291.1666067593028);
      complex12.sin();
      complex12.exp();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2356.849465213));
      complex0.reciprocal();
      Complex complex1 = new Complex((-1110.63));
      Complex complex2 = new Complex((-1110.63), (-1110.63));
      complex1.equals(complex2);
      complex1.tanh();
      Complex complex3 = complex1.tanh();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2356.849465213));
      Complex complex1 = Complex.valueOf(4461.3);
      complex1.ONE.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf((-2356.849465213), 2253.767926819);
      Complex complex4 = complex3.asin();
      complex2.getArgument();
      complex4.tan();
      Complex complex5 = complex3.add(4461.3);
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = new Complex((-1.3277440528416646E-69), (-9197692.8729));
      Complex complex3 = complex0.multiply(complex1);
      complex3.cosh();
      complex2.acos();
      complex0.subtract(Double.NaN);
      complex1.add(3435.52399);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-454.2938300851379));
      complex0.ONE.asin();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tanh();
      complex1.asin();
      complex1.sinh();
      complex2.divide((-454.2938300851379));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      complex0.abs();
      Complex complex2 = Complex.valueOf((-2263.45));
      Complex complex3 = Complex.valueOf(348.7595209101, (-1.497405487919762E-139));
      Complex complex4 = complex1.divide(complex3);
      complex2.equals(complex4);
      complex3.toString();
      complex3.NaN.divide(complex0);
      complex0.ZERO.tanh();
      Complex complex5 = complex3.acos();
      try { 
        complex5.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-456.697144));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-9.727635664376066E-4));
      Complex complex2 = complex1.sqrt1z();
      complex1.readResolve();
      Complex complex3 = complex2.divide(2.6167001724243164);
      Complex complex4 = complex2.divide((-9.727635664376066E-4));
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex4.getImaginary();
      complex6.isNaN();
      Complex complex7 = complex0.divide((-456.697144));
      Complex complex8 = complex1.divide(complex3);
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.divide(complex2);
      complex3.add(0.6144464015960693);
      complex11.tanh();
      complex9.log();
      Complex complex12 = complex8.cos();
      complex10.reciprocal();
      Complex.valueOf((-1255.40649));
      Complex complex13 = complex5.multiply(complex12);
      Complex complex14 = Complex.INF;
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1179.015672613515);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(20.0);
      Complex complex3 = complex2.divide(Double.NaN);
      Complex complex4 = complex0.pow(complex2);
      complex0.multiply(Double.NaN);
      complex3.getImaginary();
      complex0.isNaN();
      complex4.divide(Double.NaN);
      Complex complex5 = Complex.valueOf(1179.015672613515, 20.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.valueOf(Double.NaN, 609551.1027411873);
      Complex complex9 = Complex.I;
      complex8.divide(complex9);
      complex0.add(0.8104957545570445);
      complex4.tanh();
      Complex complex10 = complex5.log();
      complex1.cos();
      complex5.reciprocal();
      Complex complex11 = Complex.NaN;
      complex5.multiply(complex10);
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.valueOf(1411.0005);
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2328.01, 2328.01);
      Complex complex1 = Complex.valueOf(264195.0, 1198.6);
      Complex complex2 = Complex.valueOf((-456.697144), 2328.01);
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.ONE.tanh();
      complex0.cosh();
      complex0.INF.readResolve();
      Complex complex5 = complex1.createComplex(609551.1027411873, 264195.0);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex2.ONE.multiply(3115);
      complex7.I.nthRoot(37);
      complex6.sqrt();
      Complex complex8 = complex2.asin();
      complex4.equals(complex5);
      Complex complex9 = complex8.reciprocal();
      complex9.ONE.cos();
      complex8.abs();
      complex3.cosh();
      complex0.createComplex(1131.1033239111, (-3098.799));
      complex3.createComplex(1198.6, (-3098.799));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex.valueOf((-456.697144));
      Complex complex0 = Complex.valueOf((-456.697144));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1115.017368));
      complex1.asin();
      complex0.asin();
      complex0.sinh();
      Complex complex2 = complex0.tanh();
      complex0.add((-1115.017368));
      complex2.pow(Double.POSITIVE_INFINITY);
      complex2.isInfinite();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-312.8704749518), (-312.8704749518));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1179.015672613515);
      Complex complex1 = new Complex(1179.015672613515, 1179.015672613515);
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex(1179.015672613515, 1179.015672613515);
      complex0.divide(complex1);
      complex1.isInfinite();
      complex0.cos();
      Complex complex4 = complex1.reciprocal();
      complex4.ZERO.multiply(complex2);
      Complex complex5 = complex2.tanh();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-456.697144));
      complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      complex0.readResolve();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.divide(2.6167001724243164);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.pow(complex3);
      complex0.toString();
      Complex complex5 = complex3.multiply((-456.697144));
      complex0.getImaginary();
      complex2.isNaN();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex1.divide(complex4);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.NaN;
      complex7.divide(complex0);
      complex7.add((-885.6954081977));
      complex7.tanh();
      complex4.log();
      complex2.sin();
      Complex complex8 = Complex.INF;
      complex8.pow((-885.6954081977));
      complex8.asin();
      complex5.tan();
      complex5.isInfinite();
      Complex complex9 = Complex.ONE;
      complex9.hashCode();
      complex3.multiply(793);
      Complex complex10 = Complex.I;
      complex10.cos();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1179.015672613515);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.log();
      complex2.sqrt();
      complex1.divide(complex2);
      Complex complex3 = Complex.valueOf((-2319.01538714));
      Complex complex4 = Complex.NaN;
      complex3.equals(complex4);
      complex0.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-2319.01538714));
      complex6.multiply(complex4);
      Complex complex7 = Complex.valueOf(1179.015672613515);
      complex7.tanh();
      Complex complex8 = new Complex((-5333.49528484919));
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.8189270221070483);
      Complex complex1 = Complex.valueOf(0.8189270221070483, (-3436.9729));
      Complex complex2 = complex1.reciprocal();
      complex2.subtract(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.exp();
      complex1.getArgument();
      complex2.getArgument();
      complex0.atan();
      complex4.isInfinite();
      complex1.atan();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1179.015672613515);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.log();
      complex0.NaN.sqrt();
      complex0.divide(complex1);
      complex1.equals("");
      complex0.cos();
      Complex complex3 = complex1.reciprocal();
      complex3.ZERO.multiply(complex2);
      Complex complex4 = complex2.tanh();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.NaN;
      complex1.tanh();
      Complex.valueOf((-1794.8970008405574));
      Complex complex3 = complex1.tan();
      complex3.isInfinite();
      complex0.hashCode();
      complex2.cos();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(476.622);
      Complex complex1 = complex0.log();
      complex0.I.toString();
      complex0.isNaN();
      complex0.hashCode();
      Complex complex2 = complex1.sqrt1z();
      complex1.readResolve();
      Complex complex3 = complex1.ONE.pow(complex0);
      complex3.divide(2.6167001724243164);
      Complex complex4 = complex2.divide(2.6167001724243164);
      Complex complex5 = complex2.ONE.pow(complex3);
      complex2.ONE.toString();
      complex5.INF.multiply(476.622);
      complex0.getImaginary();
      Complex complex6 = complex4.divide(0.0);
      complex6.divide(complex1);
      Complex complex7 = Complex.NaN;
      complex0.divide(complex7);
      complex3.getArgument();
      complex3.getArgument();
      Complex complex8 = complex2.atan();
      complex6.isInfinite();
      complex6.atan();
      complex8.isInfinite();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      complex1.multiply((-517));
      Object object0 = complex1.readResolve();
      object0.equals(object0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.reciprocal();
      complex1.tanh();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1179.015672613515);
      Complex complex1 = Complex.INF;
      complex1.log();
      Complex complex2 = complex0.NaN.sqrt();
      complex0.I.toString();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.pow((-67.2));
      Complex.valueOf(1179.015672613515);
      complex2.equals(complex1);
      complex4.cos();
      Complex complex5 = complex4.reciprocal();
      complex5.multiply(2.095732474644446E-309);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(698.6174129417901);
      Complex complex2 = Complex.valueOf(698.6174129417901);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.cosh();
      complex3.I.tan();
      Complex complex5 = Complex.valueOf((-1019.9041289), 698.6174129417901);
      complex4.ZERO.hashCode();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex2.INF.add(complex6);
      complex7.INF.divide(2429.198511);
      complex0.pow(4879.821703370329);
      complex2.NaN.sqrt1z();
      complex2.nthRoot(323);
      complex1.acos();
      Complex complex8 = complex3.sinh();
      complex8.add(complex2);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow(complex0);
      complex2.toString();
      Complex complex3 = complex1.multiply(0.0);
      complex1.getImaginary();
      complex3.isNaN();
      Complex complex4 = complex2.divide(0.0);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = Complex.NaN;
      complex0.divide(complex3);
      Complex complex7 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex5.log();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex4.asin();
      complex5.tan();
      complex8.isInfinite();
      complex11.hashCode();
      complex0.multiply(793);
      Complex complex12 = Complex.I;
      complex7.equals(complex10);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.divide((double) (-499));
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.add(1999.5);
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex2.log();
      complex9.sin();
      Complex complex10 = complex8.asin();
      Complex complex11 = Complex.INF;
      complex11.tan();
      Complex complex12 = Complex.INF;
      complex12.isInfinite();
      complex7.hashCode();
      complex5.multiply(136);
      Complex complex13 = Complex.I;
      Object object0 = new Object();
      complex13.equals(object0);
      Complex complex14 = complex6.tan();
      complex14.sinh();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf((-20.0), 195.165174873649);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = Complex.INF;
      Complex.valueOf((-20.0));
      Complex complex6 = complex5.tanh();
      complex6.log();
      complex0.sin();
      Complex complex7 = complex4.asin();
      complex5.tan();
      complex7.isInfinite();
      complex2.hashCode();
      complex3.multiply((-268));
      Complex complex8 = Complex.I;
      complex2.equals(complex6);
      complex2.tan();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(698.6174129417901);
      Complex complex2 = Complex.valueOf(698.6174129417901);
      Complex complex3 = Complex.ZERO;
      complex3.cosh();
      complex1.sqrt();
      complex0.reciprocal();
      complex2.sin();
      Complex complex4 = complex0.pow(698.6174129417901);
      complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-4310.55346));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-4310.55346), (-1611.76745040145));
      Complex complex3 = new Complex((-1019.9041289), (-1611.76745040145));
      complex3.hashCode();
      Complex complex4 = complex2.multiply(complex1);
      complex0.add(complex4);
      Complex complex5 = complex3.divide(2429.198511);
      complex0.pow((-4310.55346));
      Complex complex6 = complex5.sqrt1z();
      complex5.nthRoot(323);
      Complex complex7 = Complex.I;
      complex7.acos();
      complex0.sinh();
      complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(501582.13234980684, (-3032.77));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.NaN.atan();
      complex5.sinh();
      complex2.INF.nthRoot(1479);
      complex0.I.readResolve();
      Complex complex6 = complex0.multiply(996);
      Complex complex7 = complex0.ZERO.cos();
      complex1.log();
      complex1.multiply(complex6);
      complex6.asin();
      complex7.subtract(complex6);
      complex1.sqrt1z();
      Complex.valueOf(20.0);
      complex7.add(2.6167001724243164);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(825.59, 825.59);
      Complex complex1 = complex0.sin();
      complex1.subtract((-1278.68257274));
      complex0.exp();
      complex1.sin();
      complex1.conjugate();
      complex1.subtract(825.59);
      Complex complex2 = Complex.valueOf(825.59, (-0.999999997056933));
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.NaN.exp();
      complex4.INF.subtract(6.085103243736189);
      Complex complex5 = complex1.subtract(complex3);
      Complex complex6 = complex2.subtract((-3111.31537));
      complex1.NaN.nthRoot(4970);
      Complex complex7 = complex6.tanh();
      complex7.ZERO.getField();
      Complex complex8 = complex6.multiply(complex2);
      Complex.valueOf((-3111.31537), (-3111.31537));
      Complex complex9 = complex1.sin();
      complex8.toString();
      Complex complex10 = Complex.valueOf((-3111.31537), (-3111.31537));
      complex5.getField();
      complex10.I.sqrt();
      Complex complex11 = complex10.multiply(0);
      complex11.INF.cosh();
      complex9.createComplex(Double.NaN, 0.0);
      Complex complex12 = complex9.divide(1.0);
      complex12.NaN.abs();
      complex10.conjugate();
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1307.0, 1307.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex1.subtract(complex4);
      complex4.tanh();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = Complex.valueOf(1307.0, 0.0);
      complex3.sqrt1z();
      complex7.negate();
      Complex complex8 = Complex.INF;
      complex3.divide(complex8);
      complex1.subtract(Double.NaN);
      complex8.pow((-1435.5856358564429));
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex.valueOf(0.0);
      Complex complex2 = complex1.ONE.divide(0.0);
      complex2.I.negate();
      complex1.tanh();
      Complex complex3 = complex0.I.tanh();
      complex3.ZERO.add(complex1);
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex4.ONE.tanh();
      complex0.conjugate();
      Complex complex6 = complex5.sin();
      // Undeclared exception!
      complex6.nthRoot(628983398);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.multiply((-517));
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      Complex complex3 = complex0.cos();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(476.622);
      Complex complex1 = complex0.log();
      complex0.I.toString();
      complex0.isNaN();
      complex0.hashCode();
      Complex complex2 = complex1.sqrt1z();
      complex1.readResolve();
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex3.divide(2.6167001724243164);
      Complex complex5 = complex2.divide(2.6167001724243164);
      Complex complex6 = complex2.ONE.pow(complex3);
      complex2.ONE.toString();
      complex6.INF.multiply(0.0);
      complex0.getImaginary();
      complex5.isNaN();
      Complex complex7 = complex5.divide(0.0);
      complex7.divide(complex1);
      Complex complex8 = Complex.NaN;
      complex0.divide(complex8);
      Complex complex9 = complex5.add(708.229158);
      Complex complex10 = complex9.NaN.tanh();
      complex10.I.log();
      Complex complex11 = complex1.sin();
      complex10.INF.tanh();
      Complex complex12 = complex9.asin();
      complex10.tan();
      complex4.isInfinite();
      complex2.hashCode();
      complex11.multiply(793);
      Complex complex13 = Complex.I;
      complex6.equals(complex13);
      complex12.tan();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.NaN.multiply(1032.81625286);
      Complex complex3 = complex0.pow(1032.81625286);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.INF.add(1032.81625286);
      Complex complex6 = complex4.multiply(571);
      Complex complex7 = complex2.divide(1032.81625286);
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex2.divide(complex8);
      complex4.add(708.229158);
      complex1.tanh();
      complex6.log();
      complex4.sin();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex1.tan();
      complex12.isInfinite();
      complex0.hashCode();
      complex10.multiply(571);
      Complex complex13 = Complex.I;
      complex5.equals(complex11);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-1.0));
      Complex complex2 = complex1.atan();
      complex1.getField();
      Complex complex3 = complex2.exp();
      complex2.getArgument();
      complex3.getArgument();
      Complex complex4 = complex0.atan();
      complex1.I.multiply(1);
      complex4.isInfinite();
      complex2.atan();
      complex1.isInfinite();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf((-20.0), 195.165174873649);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.ZERO.subtract(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.sinh();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf((-20.0), 195.165174873649);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex0.I.atan();
      complex1.I.getField();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.pow(complex5);
      Complex complex8 = complex6.acos();
      complex2.hashCode();
      complex1.sinh();
      complex7.createComplex((-1.0), 195.165174873649);
      complex4.subtract(complex8);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1179.015672613515);
      Complex complex1 = Complex.INF;
      complex1.log();
      Complex complex2 = complex0.divide(0.41421356237309515);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.createComplex(0.0, 1179.015672613515);
      Complex complex5 = Complex.valueOf(795.677, (-550.28128683002));
      complex5.getReal();
      complex1.reciprocal();
      Complex complex6 = Complex.valueOf(3032.77);
      complex6.negate();
      complex6.exp();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.subtract(0.0);
      complex4.tan();
      complex6.pow(complex2);
      complex8.getReal();
      complex3.add((-550.28128683002));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.reciprocal();
      complex0.exp();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex0.sinh();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-838.81152));
      complex8.tan();
      complex6.sinh();
      complex3.log();
      Complex complex9 = Complex.ONE;
      complex9.atan();
      Complex complex10 = new Complex((-838.81152), Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex10.pow(complex7);
      complex1.acos();
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex13.hashCode();
      complex11.sinh();
      complex5.createComplex(Double.POSITIVE_INFINITY, (-2814.512));
      Complex complex14 = new Complex((-2814.512));
      complex14.subtract(complex2);
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(476.622);
      Complex complex1 = complex0.log();
      complex0.I.toString();
      complex0.isNaN();
      complex0.hashCode();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.pow(476.622);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.tanh();
      complex3.getImaginary();
      Complex complex6 = complex5.divide((-1963.24));
      complex0.createComplex(544.9334, 0.999999997056933);
      complex6.getReal();
      complex4.reciprocal();
      Complex.valueOf((-1963.24));
      complex1.negate();
      complex3.exp();
      complex1.subtract(843.0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.tan();
      complex1.pow(complex8);
      complex6.getReal();
      complex4.add((-5.093575905148736E-4));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex4.ONE.acos();
      complex4.INF.atan();
      Complex complex6 = complex1.sinh();
      complex2.tan();
      Complex complex7 = complex6.INF.sinh();
      complex2.log();
      complex6.atan();
      Complex complex8 = complex2.add(Double.POSITIVE_INFINITY);
      complex8.tanh();
      Complex complex9 = complex8.log();
      Complex complex10 = Complex.ONE;
      complex10.sin();
      Complex complex11 = complex5.asin();
      complex8.tan();
      complex10.isInfinite();
      complex9.hashCode();
      complex3.multiply(37);
      Complex complex12 = Complex.I;
      Complex complex13 = Complex.I;
      complex11.equals(complex13);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1546.02860604));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex1.ZERO.tan();
      Complex complex8 = complex2.sqrt1z();
      complex8.INF.add((-20.0));
      complex2.ZERO.subtract(complex6);
      complex1.sin();
      complex3.hashCode();
      Complex complex9 = complex1.acos();
      complex2.negate();
      complex6.readResolve();
      complex2.sin();
      complex6.getImaginary();
      Complex complex10 = complex5.atan();
      complex10.ONE.toString();
      complex9.pow(complex5);
      complex0.isInfinite();
      complex0.getImaginary();
      complex4.NaN.negate();
      Complex complex11 = Complex.valueOf(3376.755856600228, 0.0);
      complex11.NaN.add(1517.5280119512574);
      complex8.negate();
      complex4.hashCode();
      complex6.negate();
      complex6.add((-1546.02860604));
      complex9.reciprocal();
      complex6.hashCode();
      complex7.hashCode();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ONE.divide(0.0);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.I.tanh();
      complex6.ZERO.add(complex1);
      Complex complex7 = complex0.I.subtract(complex1);
      complex7.ONE.tanh();
      complex0.conjugate();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.ZERO.sqrt1z();
      complex8.negate();
      Complex complex9 = Complex.INF;
      complex5.divide(complex9);
      complex2.subtract(0.0);
      complex4.pow(0.0);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(0.0);
      complex2.I.multiply(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tanh();
      complex3.subtract(complex2);
      Complex complex4 = complex0.conjugate();
      complex4.I.asin();
      complex2.cosh();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.5523349046707153, 0.5523349046707153);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex1.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      complex2.pow(complex6);
      complex0.INF.add(0.0);
      Complex complex7 = complex0.sinh();
      Complex.valueOf(0.5523349046707153);
      complex5.ONE.sqrt();
      complex7.readResolve();
      complex3.sqrt1z();
      complex5.negate();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.add(1626.0);
      Complex complex6 = complex0.ONE.sqrt();
      complex6.conjugate();
      Complex complex7 = complex4.multiply(1305);
      Complex complex8 = complex7.cosh();
      complex8.getField();
      Complex.valueOf((double) 1305);
      Complex complex9 = complex4.pow(2224.1597388024566);
      complex4.getArgument();
      complex0.abs();
      complex6.subtract(complex5);
      complex9.createComplex(1305, 1.0);
      complex9.toString();
      complex7.getArgument();
      complex3.createComplex(0.6517757177352905, 1305);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(795.677);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ZERO.exp();
      complex2.INF.getField();
      Complex complex3 = complex0.NaN.pow(795.677);
      complex3.ONE.getField();
      Complex complex4 = Complex.ZERO;
      complex4.INF.nthRoot(1162);
      Complex complex5 = complex0.divide(complex4);
      complex5.ZERO.sqrt();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex6.ZERO.pow(complex1);
      complex7.ZERO.getField();
      complex4.NaN.sqrt();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex8.I.atan();
      complex5.abs();
      complex5.isNaN();
      Complex.valueOf(795.677);
      complex8.multiply((double) 1162);
      complex8.getField();
      complex9.sinh();
      complex5.getReal();
      complex0.abs();
      complex0.abs();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.pow(0.0);
      complex2.NaN.hashCode();
      complex0.ONE.sin();
      Complex complex3 = complex2.NaN.log();
      complex0.asin();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex4.sqrt1z();
      complex5.I.hashCode();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.ONE.sinh();
      complex5.add(0.0);
      Complex complex8 = complex6.ONE.add(complex7);
      Complex complex9 = complex0.ZERO.acos();
      complex3.sin();
      complex9.INF.exp();
      complex5.sinh();
      complex2.ONE.hashCode();
      Complex complex10 = complex6.I.reciprocal();
      complex4.INF.conjugate();
      complex8.ONE.log();
      complex10.INF.atan();
      complex5.nthRoot(1475);
      complex8.multiply(1);
      complex6.atan();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-1963.24));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex2.ZERO.add((-484.399058613834));
      complex8.I.abs();
      Complex complex9 = complex8.ZERO.negate();
      complex1.NaN.divide((-1963.24));
      Complex complex10 = complex4.I.sqrt();
      Complex complex11 = complex9.ONE.pow(complex6);
      Complex complex12 = complex11.INF.cosh();
      Complex complex13 = complex11.ZERO.divide(complex5);
      complex13.ZERO.log();
      complex6.getImaginary();
      complex3.nthRoot(1);
      complex1.multiply(complex2);
      complex12.subtract(complex10);
      complex2.tan();
      complex2.log();
      complex10.equals(complex6);
      complex12.reciprocal();
      try { 
        complex7.nthRoot((-3345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,345
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      complex1.negate();
      complex1.ZERO.getField();
      Complex complex2 = complex0.pow(2389.5);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.tanh();
      complex0.getImaginary();
      Complex complex5 = complex4.INF.divide((-1.2091497144395591E-85));
      Complex complex6 = complex2.createComplex((-550.28128683002), (-1.2091497144395591E-85));
      complex4.getReal();
      complex2.reciprocal();
      Complex.valueOf((-550.28128683002));
      Complex complex7 = complex6.negate();
      complex6.INF.exp();
      complex2.ONE.subtract(1379.007530929594);
      complex7.INF.tan();
      complex5.pow(complex7);
      complex4.getReal();
      complex0.add(20.082588531);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(476.622);
      Complex complex1 = complex0.log();
      complex0.I.toString();
      complex0.isNaN();
      complex0.hashCode();
      Complex complex2 = complex1.sqrt1z();
      complex1.readResolve();
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex3.divide(2.6167001724243164);
      Complex complex5 = complex2.divide(2.6167001724243164);
      Complex complex6 = complex2.ONE.pow(complex3);
      complex2.ONE.toString();
      complex6.INF.multiply(0.0);
      complex0.getImaginary();
      complex5.isNaN();
      Complex complex7 = complex5.divide(0.0);
      complex7.divide(complex1);
      Complex complex8 = Complex.NaN;
      complex0.divide(complex8);
      Complex complex9 = complex5.add(708.229158);
      Complex complex10 = complex9.NaN.tanh();
      complex10.I.log();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex9.asin();
      complex10.tan();
      complex4.isInfinite();
      complex2.hashCode();
      complex11.multiply(793);
      Complex complex13 = Complex.I;
      complex6.equals(complex13);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1794.128232);
      Complex complex1 = complex0.NaN.add(1794.128232);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.ZERO.divide(complex1);
      complex4.ONE.asin();
      Complex complex5 = complex0.tan();
      complex0.ZERO.hashCode();
      Complex complex6 = complex0.INF.reciprocal();
      complex6.NaN.readResolve();
      Complex complex7 = complex5.createComplex(315.6508, 3803.424924);
      complex3.toString();
      complex1.getReal();
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex5.log();
      complex9.I.getField();
      Complex complex11 = complex1.I.asin();
      complex10.NaN.tanh();
      complex10.getReal();
      complex2.getArgument();
      Complex complex12 = complex10.log();
      complex11.nthRoot(1);
      complex0.acos();
      Complex complex13 = complex1.createComplex(0.0, 315.6508);
      complex9.reciprocal();
      complex5.conjugate();
      complex13.divide(1794.128232);
      complex12.toString();
      complex3.isInfinite();
      complex4.add(1151.22287688);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-443.0), 0.0);
      complex1.ONE.divide((-443.0));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1658.5852750943));
      Complex complex1 = complex0.I.negate();
      complex1.abs();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex2.INF.pow((-1658.5852750943));
      Complex complex5 = complex4.asin();
      complex0.INF.createComplex((-1658.5852750943), 0.0);
      Complex complex6 = complex1.I.multiply(5985);
      Complex complex7 = complex0.ONE.negate();
      complex3.abs();
      Complex complex8 = complex0.ZERO.pow((-1658.5852750943));
      Complex complex9 = complex8.INF.subtract(complex3);
      complex9.I.toString();
      complex0.tanh();
      complex6.asin();
      complex5.sqrt();
      Complex complex10 = complex7.multiply(complex8);
      complex1.readResolve();
      Complex complex11 = Complex.ONE;
      complex10.equals(complex11);
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      complex1.NaN.multiply(1032.81625286);
      Complex complex2 = complex0.pow(1032.81625286);
      Complex complex3 = complex2.reciprocal();
      complex2.INF.add(1032.81625286);
      Complex complex4 = complex3.multiply(571);
      complex2.INF.readResolve();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.INF.sin();
      complex0.nthRoot(571);
      Complex complex7 = complex0.conjugate();
      complex6.nthRoot(1);
      complex7.abs();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.I.pow(0.0);
      Complex complex4 = complex3.I.cosh();
      complex4.ONE.divide((-687.652));
      Complex complex5 = complex3.multiply(complex0);
      complex5.multiply(complex1);
      complex5.I.cos();
      complex1.getArgument();
      Complex complex6 = complex3.ZERO.divide((-2404.373809));
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex2.INF.subtract(complex9);
      Complex complex11 = complex10.I.conjugate();
      Complex complex12 = complex0.exp();
      complex12.getReal();
      complex2.equals(complex1);
      complex11.INF.readResolve();
      complex2.getReal();
      complex3.abs();
      complex2.isNaN();
      complex12.getImaginary();
      complex4.pow(complex3);
      Complex complex13 = complex11.divide(complex1);
      complex13.sqrt1z();
      Complex complex14 = complex7.multiply((-496.751268302));
      complex3.getField();
      Complex complex15 = Complex.valueOf(Double.NaN);
      complex11.isNaN();
      complex15.sqrt1z();
      complex8.reciprocal();
      complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.tan();
      complex3.createComplex(Double.POSITIVE_INFINITY, (-20.0));
      complex1.I.reciprocal();
      complex1.readResolve();
      complex2.multiply(1725.2822366298);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-456.697144));
      Complex complex1 = complex0.I.asin();
      complex1.sinh();
      complex1.tanh();
      complex1.ZERO.add(1.1875293254852295);
      complex0.isInfinite();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1562.1);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.INF.pow(1562.1);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex2.ZERO.pow(complex1);
      complex4.INF.sqrt1z();
      complex3.NaN.acos();
      Complex complex5 = complex2.ZERO.subtract(4089.7259);
      complex5.INF.add(complex3);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.NaN.sinh();
      complex0.INF.sin();
      Complex complex1 = complex0.createComplex(0.0, 831.7035);
      complex1.ONE.nthRoot(7);
      complex1.NaN.abs();
      complex1.INF.asin();
      complex1.getReal();
      Complex.valueOf(Double.NaN, 2.0);
      Complex complex2 = complex0.cosh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf((-20.0), 195.165174873649);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex0.I.atan();
      complex1.I.getField();
      Complex complex4 = complex0.NaN.exp();
      complex0.getArgument();
      complex0.getArgument();
      complex1.NaN.atan();
      complex4.isInfinite();
      complex2.atan();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.negate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.NaN.log();
      complex0.I.sqrt1z();
      complex7.ZERO.sin();
      Complex complex9 = complex7.NaN.multiply(936.43);
      complex9.sinh();
      complex7.NaN.readResolve();
      complex0.getField();
      Complex complex10 = complex5.NaN.divide(complex7);
      complex10.INF.abs();
      Complex.valueOf((-1069.8702), Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex7.getArgument();
      complex6.exp();
      complex4.isInfinite();
      complex1.divide(complex8);
      complex3.isInfinite();
      complex3.toString();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-599.9), (-599.9));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.sqrt();
      complex0.nthRoot(815);
      Complex complex3 = complex0.divide((double) 815);
      Complex complex4 = complex2.subtract(complex3);
      complex1.cosh();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1307.0, 1307.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.pow(1307.0);
      Complex complex3 = complex2.acos();
      complex3.ONE.log();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-1230.5853718584535), (-4874.0155571628575));
      Complex complex1 = complex0.multiply((-7.579587391156013E-9));
      Complex complex2 = complex0.cos();
      complex2.NaN.subtract((-4874.0155571628575));
      complex1.toString();
      complex0.isInfinite();
      Complex complex3 = complex0.reciprocal();
      complex3.ZERO.cosh();
      complex3.INF.sqrt();
      Complex complex4 = complex3.NaN.negate();
      try { 
        complex4.ONE.nthRoot((-590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -590
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.reciprocal();
      complex2.INF.exp();
      Complex complex3 = complex2.INF.tan();
      complex3.ONE.acos();
      complex3.INF.atan();
      Complex complex4 = complex1.sinh();
      complex2.tan();
      Complex complex5 = complex4.INF.sinh();
      complex2.log();
      Complex complex6 = complex4.atan();
      complex2.ONE.sqrt1z();
      complex6.ONE.pow(complex5);
      complex6.INF.acos();
      complex5.hashCode();
      Complex complex7 = complex2.sinh();
      complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.subtract(complex7);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.atan();
      complex0.ONE.getField();
      Complex complex2 = complex1.log();
      complex2.subtract(complex1);
      complex1.ONE.add(complex2);
      double double1 = 1.5907089565090164E-173;
      Complex complex3 = Complex.valueOf(0.0, 1.5907089565090164E-173);
      complex3.sqrt1z();
      Complex complex4 = complex0.asin();
      complex4.getReal();
      complex4.INF.negate();
      Object object0 = new Object();
      complex4.equals(object0);
      complex0.isInfinite();
      Complex complex5 = complex1.sinh();
      complex4.NaN.hashCode();
      try { 
        complex5.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.INF.divide(complex0);
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.NaN.negate();
      complex4.I.getField();
      complex0.getImaginary();
      Complex complex5 = complex1.atan();
      complex0.INF.subtract(0.0);
      Complex complex6 = complex5.conjugate();
      complex6.NaN.sqrt1z();
      Complex complex7 = Complex.valueOf(2352.85020429986, (-1854.49));
      complex0.isInfinite();
      complex2.conjugate();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex5.conjugate();
      complex4.NaN.multiply(0.0);
      complex4.readResolve();
      Complex complex7 = complex4.sqrt1z();
      complex4.I.add(complex3);
      complex6.getField();
      complex0.getImaginary();
      complex1.ZERO.sinh();
      Complex complex8 = complex2.pow(complex6);
      Complex complex9 = complex2.subtract(complex0);
      complex4.I.toString();
      Complex complex10 = complex6.subtract(complex8);
      complex0.nthRoot(589);
      Complex complex11 = complex10.exp();
      complex11.nthRoot(589);
      complex3.I.subtract(1.0);
      complex11.ZERO.hashCode();
      complex7.exp();
      complex5.isInfinite();
      complex2.NaN.atan();
      complex3.getField();
      complex9.sinh();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(667.1);
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.tanh();
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.NaN.cos();
      complex3.NaN.atan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.INF.pow(complex4);
      complex5.abs();
      Complex complex6 = complex0.multiply(5155);
      Complex complex7 = complex6.NaN.tan();
      complex7.ZERO.cosh();
      Complex complex8 = complex1.sqrt1z();
      complex6.multiply(complex2);
      Complex complex9 = complex3.add(complex2);
      Complex complex10 = complex0.multiply(4560);
      Complex complex11 = complex10.ONE.multiply(complex8);
      complex3.isInfinite();
      Complex complex12 = complex9.NaN.reciprocal();
      Complex complex13 = complex4.cosh();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      List<Complex> list0 = complex9.nthRoot(1848);
      assertEquals(1, list0.size());
      
      Complex complex14 = complex6.acos();
      complex14.NaN.sqrt();
      assertEquals(9.240869565129367, complex14.getImaginary(), 0.01);
      
      complex9.INF.cosh();
      Complex complex15 = complex2.multiply((-131.0));
      assertEquals(-0.0, complex15.getReal(), 0.01);
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex9.atan();
      Complex complex17 = complex10.add(complex9);
      assertSame(complex1, complex12);
      assertSame(complex17, complex11);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertSame(complex9, complex16);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-520.105132984152));
      Complex complex1 = complex0.negate();
      assertEquals((-520.105132984152), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(520.105132984152, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 69.09616351907214);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.I.cos();
      assertEquals(1.5430806348152437, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.divide(complex1);
      assertEquals(4.235499208524219, complex5.getReal(), 0.01);
      
      double double0 = complex1.getArgument();
      assertEquals(0.0, double0, 0.01);
  }
}
