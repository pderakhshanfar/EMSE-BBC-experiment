/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:02:10 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(6.283185307179586, 2.0579001228504997E-188);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.multiply(complex3);
      complex2.nthRoot(1443);
      Complex complex5 = complex4.multiply(complex2);
      complex3.multiply(complex1);
      complex4.multiply(20.0);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex5.sqrt1z();
      complex7.INF.nthRoot(2074);
      complex6.toString();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1917.4176632925892);
      Complex complex2 = complex0.multiply(complex1);
      complex1.nthRoot(926);
      complex2.hashCode();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.multiply(complex6);
      complex7.NaN.multiply(Double.POSITIVE_INFINITY);
      complex6.multiply(6.926891813514782E-185);
      complex7.conjugate();
      Complex complex8 = complex7.reciprocal();
      complex8.ZERO.exp();
      complex7.sqrt1z();
      complex0.acos();
      complex5.subtract((double) 926);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.multiply(complex2);
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(896.95875, 4.458001565878111E-114);
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.ZERO.abs();
      complex2.ONE.hashCode();
      Complex complex3 = complex1.pow((-260.938589547944));
      Complex complex4 = complex3.I.pow(4.458001565878111E-114);
      complex0.multiply(complex1);
      Complex complex5 = Complex.valueOf(896.95875, 896.95875);
      complex4.NaN.atan();
      Complex complex6 = complex1.sqrt1z();
      complex6.I.multiply(500.13434);
      Complex complex7 = complex3.divide((-49.34933));
      Complex complex8 = complex3.sqrt1z();
      complex8.I.sqrt();
      complex7.sqrt1z();
      complex4.sqrt1z();
      complex5.createComplex((-49.34933), 3.667348665023154E221);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(382.3304234415877, 1719.7);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.divide(complex0);
      complex3.atan();
      complex1.I.negate();
      complex0.abs();
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex1.ONE.divide(complex2);
      complex5.INF.reciprocal();
      Complex complex6 = Complex.valueOf((-1962.333382881534), Double.POSITIVE_INFINITY);
      complex6.NaN.multiply(complex1);
      Complex complex7 = complex3.reciprocal();
      complex7.NaN.exp();
      Complex complex8 = complex0.log();
      complex8.atan();
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(331.597, (-20.0));
      Complex complex2 = Complex.I;
      complex1.abs();
      complex0.subtract(Double.NaN);
      Complex complex3 = complex1.tan();
      Complex complex4 = new Complex((-2.491478492123914E-5), 0.053452173746311615);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex.valueOf((-381.5276379947274));
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 6.283185307179586);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.I.asin();
      complex1.ONE.add(Double.NaN);
      Complex complex2 = complex0.subtract((-1074.35637));
      complex2.ZERO.hashCode();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.41997434161402614);
      Complex complex2 = complex1.createComplex(2.0, Double.POSITIVE_INFINITY);
      complex2.multiply((-42));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.divide(complex0);
      complex1.tanh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(3678.4589457095008, 1.0);
      complex0.divide(complex1);
      complex1.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.NaN.log();
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(708.9222, (-384.124707850788));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.valueOf(708.9222);
      complex2.subtract(5621.10346419468);
      Complex complex4 = complex0.multiply((-1800));
      Complex complex5 = complex0.createComplex(708.9222, (-1800));
      Complex complex6 = complex5.add((-384.124707850788));
      complex6.INF.multiply(complex4);
      Complex complex7 = complex6.NaN.createComplex(2.0, 2.0);
      Complex complex8 = complex7.ZERO.multiply(complex3);
      complex8.ZERO.abs();
      Complex complex9 = complex6.exp();
      Complex complex10 = Complex.valueOf((-2.751925069084042E-8));
      Complex complex11 = complex10.ONE.asin();
      complex1.cosh();
      Complex complex12 = complex1.pow(complex4);
      complex5.subtract((-0.8813735870195429));
      complex3.createComplex((-384.124707850788), 5621.10346419468);
      complex2.createComplex(487.51931, (-0.8813735870195429));
      complex9.ZERO.sin();
      Complex.valueOf((-2.751925069084042E-8), (-0.8813735870195429));
      complex12.tan();
      complex10.getField();
      complex9.divide(complex3);
      Complex.valueOf(20.0);
      complex1.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.NaN;
      complex3.asin();
      Complex.valueOf(1.9903990578876104E-158);
      Complex complex5 = Complex.ONE;
      complex2.toString();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(1.937928329541349E-24, Double.POSITIVE_INFINITY);
      complex7.tan();
      Complex complex8 = Complex.INF;
      complex8.divide(Double.POSITIVE_INFINITY);
      complex1.cos();
      complex3.reciprocal();
      complex2.subtract((-1.4601106624823502E-8));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.063655586));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.acos();
      complex0.readResolve();
      complex0.atan();
      Complex complex3 = complex1.INF.createComplex(0.0, 20.0);
      complex3.ZERO.exp();
      Complex complex4 = Complex.valueOf(439.4981198979458);
      Complex complex5 = complex4.INF.cosh();
      complex0.atan();
      complex0.NaN.cos();
      complex1.cos();
      complex2.conjugate();
      Complex complex6 = new Complex((-1120.44280094431), 20.0);
      Complex complex7 = complex6.tan();
      complex7.isNaN();
      complex5.divide(2.0483260435783403E-214);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5621.10346419468);
      Complex complex1 = complex0.asin();
      complex1.multiply(complex0);
      Complex complex2 = complex1.cos();
      complex2.cos();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.ZERO;
      complex3.cosh();
      Complex complex5 = new Complex((-390.72), (-1.1487079818684332E-8));
      complex5.tanh();
      Complex.valueOf(0.9534903170187385, 0.0);
      complex5.hashCode();
      complex2.atan();
      complex1.cosh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.atan();
      complex0.cos();
      Complex.valueOf(1.0, 1.0);
      complex1.acos();
      Complex complex5 = Complex.ZERO;
      complex4.cosh();
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      Complex complex7 = complex2.tanh();
      complex7.NaN.tan();
      Complex.valueOf((-1058.804), 2968.0);
      complex5.hashCode();
      Complex complex8 = complex0.atan();
      complex8.ONE.hashCode();
      Complex complex9 = Complex.ONE;
      complex9.cosh();
      Complex complex10 = complex0.sqrt();
      complex10.add(complex0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.0013105232987982163), (-1892.69584173896));
      Complex complex1 = complex0.sinh();
      complex1.ONE.getArgument();
      Complex complex2 = Complex.valueOf(436.41161616069235, 436.41161616069235);
      Complex complex3 = complex0.pow(complex2);
      complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5621.10346419468);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.INF.log();
      complex3.NaN.cos();
      complex1.conjugate();
      complex1.tan();
      Complex complex4 = new Complex(4250.063764709413, 608.4534520824413);
      Complex complex5 = Complex.valueOf((-3675.41283978936));
      complex5.tan();
      complex2.divide(1971.707137);
      Complex.valueOf(747.387174);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = new Complex((-1.0), (-1.0));
      complex1.I.divide(complex2);
      complex0.acos();
      Complex complex3 = complex1.pow((-1.0));
      complex2.cosh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = Complex.I;
      complex5.I.getField();
      complex4.divide(complex6);
      Complex complex7 = complex3.exp();
      complex4.INF.abs();
      Complex complex8 = complex7.I.pow((-1.0));
      complex4.add(complex1);
      complex4.asin();
      Complex complex9 = complex0.asin();
      complex9.multiply(complex0);
      Complex complex10 = complex5.acos();
      complex10.add(complex0);
      Complex complex11 = new Complex((-1.0), 2.0);
      complex1.multiply(complex11);
      complex8.conjugate();
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = null;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5621.10346419468);
      Complex complex1 = complex0.asin();
      complex0.I.pow(complex1);
      complex1.multiply(complex0);
      Complex complex2 = complex0.INF.log();
      complex2.NaN.cos();
      complex1.conjugate();
      Complex complex3 = complex1.tan();
      complex3.multiply((-1453.15219615));
      Complex complex4 = complex3.ONE.multiply((double) 1450);
      complex1.asin();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ZERO;
      complex1.I.subtract(complex2);
      Complex complex3 = new Complex(178);
      complex3.divide(complex1);
      Complex.valueOf((double) 178, 20.0);
      complex0.tanh();
      complex0.tan();
      complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.tanh();
      complex1.readResolve();
      complex1.asin();
      Complex complex3 = complex2.acos();
      complex3.getField();
      complex2.divide(complex0);
      complex3.cos();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.NaN;
      complex5.asin();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.INF;
      Complex complex8 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex7.tan();
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf((-1049.3439));
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.063655586));
      Complex complex1 = complex0.ONE.negate();
      complex0.I.acos();
      complex0.readResolve();
      Complex complex2 = complex0.atan();
      complex2.INF.abs();
      complex1.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(490.7);
      complex3.INF.cosh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.NaN.cos();
      complex5.I.cosh();
      Complex complex6 = complex1.cos();
      complex6.NaN.sqrt1z();
      Complex complex7 = complex0.acos();
      complex4.INF.toString();
      complex7.divide(1603.7939140056646);
      complex7.ZERO.cosh();
      Complex complex8 = new Complex(490.7, Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex9 = complex1.sqrt1z();
      complex9.tan();
      Complex complex10 = Complex.I;
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex12 = new Complex(319.9793396, Double.POSITIVE_INFINITY);
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-381.5276379947274));
      Complex complex1 = complex0.multiply((-381.5276379947274));
      Complex complex2 = complex1.createComplex((-381.5276379947274), Double.NaN);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.cosh();
      complex1.atan();
      Complex complex5 = complex0.cos();
      complex5.getField();
      Complex complex6 = complex1.cosh();
      complex6.cos();
      complex2.sqrt1z();
      Complex complex7 = complex3.acos();
      complex0.toString();
      complex1.I.toString();
      complex0.divide(6.283185307179586);
      Complex complex8 = Complex.I;
      complex8.cosh();
      Complex complex9 = new Complex(490.7, Double.NaN);
      complex7.tanh();
      complex4.sqrt1z();
      Complex complex10 = complex0.tan();
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex((-883.793863586));
      complex10.exp();
      complex7.sqrt1z();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-304.22631516233685), (-304.22631516233685));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.reciprocal();
      complex2.I.abs();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex0.exp();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(178);
      complex0.abs();
      complex1.multiply(complex0);
      complex1.tanh();
      Object object0 = complex2.readResolve();
      // Undeclared exception!
      ((Complex) object0).I.nthRoot(2147482924);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-1.0), (-168.0));
      complex2.log();
      Complex complex3 = complex2.cos();
      complex3.nthRoot(1411);
      complex2.equals(complex3);
      complex1.conjugate();
      complex3.tan();
      Complex complex4 = complex2.multiply(8829.608674091072);
      complex4.multiply(8829.608674091072);
      complex4.asin();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(11242.206972864613);
      complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(178);
      complex1.abs();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.tanh();
      complex3.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.acos();
      complex7.getField();
      Complex complex8 = complex4.divide(complex6);
      complex0.cos();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.asin();
      complex9.ONE.pow(11242.206972864613);
      complex6.tanh();
      complex9.sqrt1z();
      Complex complex11 = new Complex(1.2817465305970453E7, 0.0);
      complex11.tan();
      complex10.divide(1.2817465305970453E7);
      complex4.exp();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.divide(complex0);
      complex1.tanh();
      complex0.tan();
      complex0.add((-163.455695));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-528.0127));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.createComplex(403.3938228334, 0.0);
      Complex complex4 = complex3.multiply(897);
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex1.NaN.asin();
      complex0.getImaginary();
      Complex complex7 = complex6.INF.pow(0.0);
      complex7.abs();
      complex4.getField();
      complex7.divide(complex0);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.asin();
      complex9.tanh();
      complex5.sqrt1z();
      complex7.tan();
      complex3.divide(Double.NaN);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.063655586));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.acos();
      complex0.readResolve();
      Complex complex3 = complex0.atan();
      complex3.INF.abs();
      Complex complex4 = complex1.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(490.7);
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex0.NaN.cos();
      complex8.I.cosh();
      Complex complex9 = complex1.cos();
      complex9.NaN.sqrt1z();
      Complex complex10 = complex0.acos();
      complex7.INF.toString();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex10.divide(1603.7939140056646);
      complex10.ZERO.cosh();
      Complex complex13 = Complex.INF;
      complex7.equals(complex13);
      complex10.getImaginary();
      complex11.tan();
      Complex complex14 = complex2.atan();
      complex2.toString();
      complex4.cos();
      complex9.add(1247.283);
      Complex complex15 = complex1.tanh();
      complex6.ZERO.divide(162.8405952903044);
      complex14.hashCode();
      complex15.atan();
      complex10.cosh();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(178);
      complex0.abs();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.tanh();
      complex2.readResolve();
      Complex complex5 = complex2.asin();
      complex4.acos();
      complex1.getField();
      Complex complex6 = complex3.divide(complex5);
      complex6.cos();
      Complex complex7 = Complex.INF;
      complex7.asin();
      complex0.tanh();
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex((-1360.309885), Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex4.divide(1.0);
      complex11.I.add((-1.0));
      complex2.exp();
      complex2.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex2);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.divide(complex1);
      complex1.sinh();
      Complex complex5 = Complex.ONE;
      complex5.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex6 = complex4.sqrt1z();
      complex6.tan();
      complex6.ONE.readResolve();
      Complex complex7 = complex3.pow((-717.3946019152));
      complex6.toString();
      complex7.tan();
      Complex complex8 = complex4.divide(complex3);
      complex3.tanh();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.063655586));
      Complex complex1 = complex0.ONE.negate();
      complex0.I.acos();
      complex0.readResolve();
      Complex complex2 = complex0.atan();
      complex2.INF.abs();
      Complex complex3 = complex1.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex3.I.sin();
      Complex complex4 = Complex.valueOf(490.7);
      complex4.INF.cosh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.NaN.cos();
      complex6.I.cosh();
      Complex complex7 = complex1.cos();
      complex7.INF.subtract(complex1);
      complex7.NaN.sqrt1z();
      Complex complex8 = complex0.acos();
      complex5.INF.toString();
      complex1.atan();
      Complex complex9 = complex8.divide(1603.7939140056646);
      Complex complex10 = new Complex(1.1221363544464111, (-1134.5288511159));
      complex10.divide(complex8);
      complex9.toString();
      complex9.pow((-357.00369891));
      try { 
        complex1.nthRoot((-1237));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,237
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 1936.2134);
      complex1.ZERO.conjugate();
      Complex complex4 = complex2.cosh();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Object object0 = complex6.readResolve();
      complex0.equals(object0);
      complex5.getImaginary();
      complex3.tan();
      Complex complex7 = complex5.atan();
      Complex complex8 = new Complex(0.48610860109329224, 0.48610860109329224);
      complex8.toString();
      complex8.cos();
      Complex complex9 = complex7.add(Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex8.divide(0.0);
      complex9.hashCode();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-389.5), (-389.5));
      complex0.I.sqrt();
      Complex.valueOf((-389.5), (-389.5));
      Complex.valueOf(913.75);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sin();
      complex0.I.hashCode();
      Complex complex3 = complex0.acos();
      complex3.NaN.toString();
      complex3.INF.tan();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex5.ZERO.reciprocal();
      complex2.add((-389.5));
      Complex complex7 = complex0.sqrt1z();
      complex7.I.reciprocal();
      complex4.atan();
      Complex complex8 = Complex.valueOf(0.0, (-1041.16247762994));
      complex8.ZERO.reciprocal();
      try { 
        complex6.nthRoot((-355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -355
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.createComplex(20.0, (-763.8999590511819));
      complex4.ZERO.pow(complex3);
      complex0.readResolve();
      complex4.getArgument();
      Complex complex5 = complex3.subtract(complex0);
      complex5.subtract((-1105.995342));
      complex2.conjugate();
      complex3.createComplex((-763.8999590511819), (-20.0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex((-1935.1110106761), 2004.278892);
      Complex complex3 = Complex.valueOf((-0.001402524544179523));
      complex3.conjugate();
      Complex complex4 = Complex.ONE;
      complex1.divide(complex4);
      Complex complex5 = new Complex(1.1660367213160203E-8, 374.241032);
      complex5.toString();
      Complex complex6 = Complex.ONE;
      complex6.log();
      complex3.exp();
      complex4.nthRoot(3415);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.atan();
      complex0.multiply(1866);
      complex2.sqrt1z();
      complex0.isInfinite();
      Complex complex3 = Complex.ZERO;
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      complex4.divide(complex2);
      complex0.add((double) 1866);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.526819276639527E-9), 2957.0176927504203);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      complex1.sinh();
      Complex complex3 = complex1.createComplex(763.9, 2957.0176927504203);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.tan();
      complex2.pow((-5.526819276639527E-9));
      Complex complex6 = complex1.log();
      complex4.toString();
      complex5.tan();
      Complex complex7 = complex3.atan();
      complex7.sqrt1z();
      complex4.isInfinite();
      complex4.multiply(0.9640275800758169);
      complex4.divide(complex6);
      complex6.add(2012.66721406352);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(178);
      complex0.abs();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.tanh();
      complex2.readResolve();
      Complex complex5 = complex2.asin();
      complex4.acos();
      complex1.getField();
      Complex complex6 = complex3.divide(complex5);
      complex6.cos();
      Complex complex7 = Complex.INF;
      complex7.asin();
      complex0.tanh();
      complex6.sqrt1z();
      Complex complex8 = new Complex((-1360.309885), Double.POSITIVE_INFINITY);
      complex8.tan();
      complex4.divide(1.0);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.526819276639527E-9), 2957.0176927504203);
      Complex complex1 = complex0.reciprocal();
      complex1.divide(complex0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.sin();
      complex2.asin();
      complex3.nthRoot(3386);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3389.0), (-3389.0));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = new Complex((-3389.0), (-3389.0));
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex3.ONE.acos();
      complex3.toString();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.sqrt1z();
      complex5.isInfinite();
      complex0.multiply((-3389.0));
      complex7.divide(complex5);
      Complex complex8 = new Complex(0.0, (-3389.0));
      complex8.add((-13.0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-381.5276379947274));
      Complex complex1 = complex0.multiply((-381.5276379947274));
      Complex complex2 = Complex.I;
      complex2.readResolve();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.multiply(619);
      complex4.abs();
      Complex complex5 = Complex.NaN;
      complex5.multiply(complex1);
      complex5.tanh();
      complex2.readResolve();
      Complex complex6 = new Complex(619.0, (-1.538273497873993E260));
      complex6.asin();
      complex3.acos();
      complex2.getField();
      complex4.divide(complex6);
      complex6.asin();
      complex4.tanh();
      complex6.sqrt1z();
      Complex complex7 = complex1.tan();
      complex2.divide(105.962584939);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.063655586));
      Complex complex1 = complex0.ONE.negate();
      complex0.I.acos();
      complex0.readResolve();
      Complex complex2 = complex0.atan();
      complex2.INF.abs();
      complex1.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(490.7);
      complex3.INF.cosh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.NaN.cos();
      complex5.I.cosh();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.NaN.sqrt1z();
      complex0.acos();
      complex4.INF.toString();
      complex7.acos();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      complex1.log();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.INF;
      List<Complex> list0 = complex3.nthRoot(3033);
      complex3.equals(list0);
      Complex complex4 = Complex.valueOf(583.94434066185, (-1281.19989));
      Complex complex5 = complex4.conjugate();
      complex1.tan();
      complex4.multiply((double) 3033);
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex2.asin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-724.131897405832));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.pow(Double.NaN);
      Complex complex3 = complex2.INF.createComplex((-724.131897405832), Double.NaN);
      Complex complex4 = complex2.INF.sinh();
      complex4.I.atan();
      Complex complex5 = complex3.ONE.divide(complex1);
      complex3.I.hashCode();
      complex3.multiply(3395);
      Complex complex6 = complex5.ZERO.add((-4663.010689698));
      complex2.hashCode();
      complex0.asin();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.sin();
      complex8.ZERO.nthRoot(3395);
      Complex complex9 = complex0.sqrt();
      complex9.ZERO.tan();
      complex3.cos();
      complex6.tan();
      complex6.I.sqrt1z();
      Complex complex10 = complex6.tanh();
      complex6.equals((Object) null);
      complex10.abs();
      complex5.abs();
      complex4.conjugate();
      Complex.valueOf((-0.9999457839539642));
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3389.0), (-3389.0));
      Complex complex1 = new Complex((-122.356357), (-122.356357));
      Complex complex2 = complex1.pow((-3389.0));
      complex1.hashCode();
      Complex complex3 = complex1.subtract((-122.356357));
      complex1.readResolve();
      complex3.isInfinite();
      Complex complex4 = complex0.negate();
      complex4.INF.readResolve();
      complex1.toString();
      complex4.isNaN();
      complex4.multiply(286);
      complex2.subtract((-3389.0));
      complex2.subtract(0.293281614780426);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-381.5276379947274));
      Complex complex1 = Complex.I;
      complex1.I.readResolve();
      complex1.ONE.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.sqrt();
      Complex.valueOf((-381.5276379947274));
      Complex complex4 = complex0.divide(complex2);
      complex4.toString();
      complex4.log();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.sin();
      complex6.subtract(1936.2134);
      complex5.getReal();
      Complex.valueOf((-2034.935407748131));
      Complex complex7 = Complex.valueOf((-2034.935407748131), 1.0261880234452292E-10);
      complex7.tan();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5621.10346419468);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.NaN.conjugate();
      complex3.NaN.pow((double) 1450);
      Complex complex4 = complex0.INF.log();
      complex4.NaN.cos();
      complex1.ONE.nthRoot(1450);
      complex0.equals(complex2);
      complex1.sinh();
      complex0.isNaN();
      Complex complex5 = new Complex(1450, 1450);
      Complex complex6 = complex5.divide(complex4);
      complex6.multiply(1802);
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex5.acos();
      Complex.valueOf((-0.0037105574764976176), (double) 1);
      complex8.abs();
      complex2.subtract(Double.NaN);
      complex4.cos();
      complex0.log();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.526819276639527E-9), 2957.0176927504203);
      Complex complex1 = complex0.reciprocal();
      complex1.divide(complex0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.createComplex((-5.526819276639527E-9), (-5.526819276639527E-9));
      complex2.abs();
      Complex complex6 = Complex.valueOf((-5.526819276639527E-9));
      Complex complex7 = complex1.divide(complex3);
      Complex.valueOf(740.83004846118);
      complex7.tanh();
      complex3.getField();
      complex6.divide(1973.7310911743225);
      Complex complex8 = Complex.valueOf(823.0371471738);
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = complex3.divide(complex9);
      complex10.asin();
      Complex complex11 = complex2.conjugate();
      complex4.reciprocal();
      complex6.getField();
      complex8.conjugate();
      complex11.tanh();
      Complex complex12 = complex0.cos();
      complex11.cos();
      complex11.multiply(complex12);
      Complex complex13 = complex7.exp();
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.063655586));
      Complex complex1 = complex0.ONE.negate();
      complex0.I.acos();
      complex0.readResolve();
      Complex complex2 = complex0.atan();
      complex2.INF.abs();
      complex1.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(490.7);
      complex3.INF.cosh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.NaN.cos();
      complex5.INF.exp();
      complex5.I.cosh();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex0.acos();
      complex4.INF.toString();
      complex1.atan();
      Complex complex9 = complex8.divide(1603.7939140056646);
      Complex complex10 = complex9.sin();
      complex1.subtract(490.7);
      complex7.getReal();
      Complex.valueOf((-4.330693978322885E-8));
      complex10.tan();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-381.5276379947274));
      Complex complex1 = complex0.multiply((-381.5276379947274));
      complex1.I.readResolve();
      Complex complex2 = complex1.ONE.sin();
      complex1.ZERO.multiply(3793);
      complex0.abs();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.acos();
      complex3.getField();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex8.ONE.sqrt1z();
      complex9.NaN.tan();
      Complex complex10 = complex8.INF.multiply(1800.71158114849);
      Complex complex11 = (Complex)complex1.readResolve();
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex12.multiply(complex0);
      complex13.I.sqrt();
      Complex complex14 = complex3.NaN.cosh();
      complex14.nthRoot(3793);
      complex7.isNaN();
      complex0.divide(complex7);
      complex5.multiply(1);
      complex2.reciprocal();
      complex7.acos();
      Complex.valueOf(Double.NaN, (double) 1);
      complex8.abs();
      complex10.subtract(1800.71158114849);
      complex11.tan();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply((-944.224577490369));
      complex1.readResolve();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.sqrt();
      complex2.cosh();
      Complex complex7 = Complex.NaN;
      complex7.nthRoot(2038512265);
      complex7.isNaN();
      Complex complex8 = complex5.divide(complex1);
      complex6.multiply(1);
      complex3.reciprocal();
      complex8.acos();
      Complex complex9 = Complex.valueOf(1800.71158114849, Double.NaN);
      complex8.abs();
      complex8.subtract((-1859.04373843));
      complex9.cos();
      complex2.log();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.I.pow(20.0);
      complex0.hashCode();
      Complex complex2 = complex1.subtract(20.0);
      complex1.readResolve();
      complex0.isInfinite();
      Complex complex3 = complex2.negate();
      complex0.toString();
      complex3.isNaN();
      complex2.multiply(2250);
      complex1.subtract((-1545.042));
      complex3.subtract(2111.67599365);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(0.0);
      complex0.nthRoot(314);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex1.ZERO.divide(1072.2275917104796);
      Complex complex6 = complex1.I.reciprocal();
      complex6.NaN.hashCode();
      complex1.ONE.abs();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex7.add(0.0);
      complex5.INF.add(complex3);
      Complex complex9 = complex7.ZERO.negate();
      complex1.I.negate();
      complex9.INF.divide(0.0);
      complex6.NaN.sqrt1z();
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex0.tan();
      complex5.getField();
      complex7.INF.asin();
      complex11.createComplex((-598.82164589), 0.0);
      complex4.nthRoot(1);
      complex2.conjugate();
      complex2.toString();
      complex10.abs();
      complex7.getField();
      complex11.getReal();
      complex9.readResolve();
      complex8.pow(complex9);
      Complex complex12 = complex6.divide(2.80923543);
      complex12.pow((double) 1);
      Complex.valueOf(2.80923543);
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-449.2));
      Complex.valueOf((-449.2));
      Complex complex1 = Complex.valueOf(0.0, (-749.757807547938));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(251.211342, 0.0);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.multiply(complex2);
      complex1.I.toString();
      complex4.atan();
      complex4.add(complex8);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2009.715599927302);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(2009.715599927302, 2017.0);
      Complex complex3 = complex2.ZERO.cosh();
      complex1.ZERO.abs();
      complex2.ONE.sqrt1z();
      complex1.getReal();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.subtract(3060.0117037);
      complex4.pow(complex1);
      complex0.toString();
      Complex complex6 = complex3.exp();
      complex6.isNaN();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.NaN.log();
      complex1.ZERO.multiply(complex2);
      complex3.INF.sqrt1z();
      complex0.NaN.negate();
      complex4.getField();
      complex1.NaN.multiply(2.0);
      complex0.isInfinite();
      Complex complex5 = complex0.cosh();
      complex5.acos();
      complex5.ZERO.hashCode();
      Complex complex6 = complex3.sqrt();
      complex3.hashCode();
      complex6.abs();
      complex4.tan();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
      double double0 = (-4464.221923692097);
      Complex.valueOf((-4464.221923692097));
      complex0.NaN.readResolve();
      complex0.ZERO.hashCode();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.279361500971995E179);
      Complex complex1 = Complex.valueOf((-942.0347516226), 0.0);
      Complex complex2 = complex1.NaN.atan();
      Complex.valueOf(0.5463024377822876, 0.0);
      complex2.I.nthRoot(2956);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      complex1.ONE.atan();
      Complex.valueOf((-1980.831));
      complex0.getImaginary();
      complex1.ONE.cosh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.INF.tanh();
      complex4.ZERO.asin();
      complex1.abs();
      complex3.INF.exp();
      Complex complex5 = complex0.I.asin();
      complex1.conjugate();
      Complex complex6 = complex1.asin();
      complex6.hashCode();
      complex5.NaN.multiply((-832.0));
      try { 
        complex1.nthRoot((-3337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,337
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(2494.20661693042, 2494.20661693042);
      complex0.I.abs();
      Complex complex1 = Complex.valueOf(2494.20661693042);
      complex0.equals(complex1);
      complex1.NaN.pow(1.0);
      complex1.getReal();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.log();
      complex2.INF.toString();
      Complex complex4 = complex0.multiply(37);
      Complex complex5 = complex4.NaN.sqrt1z();
      complex4.INF.createComplex(2494.20661693042, 37);
      complex5.ONE.abs();
      Complex.valueOf(5058.9844);
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = Complex.valueOf(1973.7310911743225);
      complex7.NaN.tanh();
      complex4.getField();
      Complex complex8 = complex6.INF.divide(1.0);
      Complex complex9 = complex3.NaN.divide(complex5);
      Complex complex10 = complex3.I.divide(complex9);
      Complex complex11 = complex2.asin();
      Complex complex12 = complex3.conjugate();
      complex3.reciprocal();
      complex11.ONE.getField();
      complex11.ONE.conjugate();
      Complex complex13 = complex11.tanh();
      complex13.cos();
      complex9.cos();
      complex8.multiply(complex12);
      complex10.exp();
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(331.74);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ONE.add(0.0);
      complex1.NaN.multiply(complex0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 1936.2134);
      complex2.I.divide(complex3);
      complex2.ONE.toString();
      Complex complex4 = complex2.I.log();
      complex4.ZERO.exp();
      Complex complex5 = complex0.sin();
      complex5.subtract(Double.POSITIVE_INFINITY);
      complex5.getReal();
      Complex.valueOf((-4.330693978322885E-8));
      complex2.tan();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(0.0);
      complex0.ZERO.divide(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1516.270880165958), 6.283185307179586);
      Complex complex1 = Complex.INF;
      complex1.I.subtract(complex0);
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.I.acos();
      complex2.I.subtract(complex1);
      complex0.NaN.cos();
      complex0.hashCode();
      Complex.valueOf(Double.NaN, Double.NaN);
      try { 
        complex0.nthRoot((-555));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -555
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.526819276639527E-9), 2957.0176927504203);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      complex1.sinh();
      complex1.ONE.createComplex((-5.526819276639527E-9), 763.9);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.pow((-5.526819276639527E-9));
      Complex complex6 = complex3.ZERO.log();
      complex5.toString();
      complex0.I.tan();
      Complex complex7 = complex0.atan();
      complex3.sqrt1z();
      complex1.isInfinite();
      complex6.multiply(0.0);
      complex2.divide(complex7);
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(310.07011324113, 310.07011324113);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.multiply((-3778));
      complex2.ONE.getArgument();
      complex1.NaN.nthRoot(700);
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ZERO.sinh();
      complex4.INF.getArgument();
      complex0.hashCode();
      complex0.toString();
      complex0.toString();
      Complex complex5 = complex1.divide(2868.29239046);
      complex1.tan();
      complex5.isInfinite();
      complex1.sinh();
      complex4.getArgument();
      Complex complex6 = complex3.subtract(complex4);
      complex6.NaN.createComplex((-1043.0), 0.0);
      complex1.readResolve();
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1756.68957));
      Complex complex1 = complex0.ZERO.multiply(0.0);
      complex0.toString();
      Complex complex2 = new Complex(392.841082, (-942.15));
      Complex.valueOf(1224.76219555, 0.0);
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex.valueOf((-1756.68957), 0.0);
      Complex complex4 = complex3.divide(complex1);
      complex0.isInfinite();
      Complex complex5 = complex1.sin();
      complex5.ZERO.sinh();
      complex5.nthRoot(7);
      complex4.log();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(0.0);
      complex1.I.tanh();
      Complex complex2 = complex1.ONE.reciprocal();
      complex2.pow(0.0);
      complex0.abs();
      complex0.ONE.abs();
      complex0.getField();
      complex0.tanh();
      complex1.add(1.4088494777679443);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow((-7.678973146281339E-156));
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.sin();
      complex3.I.hashCode();
      Complex.valueOf((-7.678973146281339E-156));
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = Complex.valueOf((-1448.14));
      complex6.ONE.negate();
      Complex complex7 = complex2.tanh();
      complex5.readResolve();
      Complex complex8 = complex4.divide(complex2);
      Complex complex9 = complex8.pow(complex1);
      complex4.pow(0.0);
      complex3.multiply(complex7);
      complex7.tan();
      Complex complex10 = complex9.asin();
      complex10.getReal();
      complex0.getImaginary();
      complex5.cosh();
      complex6.pow(0.0);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1333.0);
      complex0.equals((Object) null);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.conjugate();
      complex1.NaN.tan();
      complex2.NaN.hashCode();
      complex3.getArgument();
      complex2.readResolve();
      Complex complex4 = complex0.acos();
      Complex.valueOf(-0.0);
      Complex complex5 = complex4.sin();
      complex5.sqrt();
      complex5.sinh();
      complex2.multiply(3105);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.abs();
      complex0.readResolve();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getArgument();
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.log();
      complex0.INF.exp();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.subtract(0.0);
      complex2.getReal();
      Complex complex5 = complex3.INF.multiply(1);
      Complex complex6 = complex4.ZERO.sqrt1z();
      Complex complex7 = complex4.divide((-1057.6331087607));
      Complex complex8 = complex4.createComplex(0.0, 0.0);
      Complex complex9 = complex3.ONE.cosh();
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex8.multiply(0.0);
      complex4.NaN.divide(complex0);
      complex11.INF.negate();
      complex3.getArgument();
      complex8.isInfinite();
      complex3.log();
      complex4.I.toString();
      complex4.cosh();
      complex5.add((double) 1);
      complex2.equals(complex3);
      complex6.sqrt();
      complex7.pow(complex4);
      complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-528.0127));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.createComplex(403.3938228334, 0.0);
      Complex complex4 = complex3.multiply(897);
      complex0.INF.conjugate();
      Complex complex5 = complex1.NaN.asin();
      complex0.getImaginary();
      Complex complex6 = complex5.INF.pow(0.0);
      complex6.abs();
      Complex complex7 = Complex.valueOf(0.0);
      complex5.multiply((-4010.76624278));
      complex2.readResolve();
      complex7.divide(403.3938228334);
      Complex complex8 = complex7.subtract(complex4);
      complex1.add(complex8);
      complex8.toString();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.cosh();
      complex1.getArgument();
      complex0.sqrt();
      complex0.sin();
      complex1.ONE.sin();
      double double0 = 1316.07994;
      Complex complex2 = complex0.createComplex(1316.07994, 6.283185307179586);
      complex2.NaN.divide((-815.92));
      Complex complex3 = complex0.asin();
      complex3.tanh();
      try { 
        complex2.nthRoot((-794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -794
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3648.83184));
      Complex complex1 = complex0.NaN.divide((-3648.83184));
      complex1.add(complex0);
      complex1.ZERO.sinh();
      complex0.pow((-3374.67257567979));
      complex1.subtract(2025.933);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 792.59);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.INF.log();
      complex1.NaN.abs();
      Complex complex4 = complex0.add(complex1);
      complex4.ZERO.getArgument();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.INF.multiply(complex1);
      Complex complex6 = complex0.NaN.pow(complex1);
      Complex complex7 = complex2.INF.sqrt();
      complex0.INF.abs();
      Complex complex8 = complex6.ZERO.divide(0.0);
      complex8.INF.pow(0.0);
      Complex complex9 = complex0.cos();
      complex9.getArgument();
      complex9.multiply(1);
      Complex complex10 = complex9.reciprocal();
      complex9.pow(792.59);
      complex0.acos();
      complex5.add(complex2);
      complex6.subtract(0.0);
      complex10.sqrt();
      complex9.exp();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1804.867432), 2.436652183532715);
      Complex complex1 = complex0.sqrt();
      complex1.ONE.sinh();
      complex1.add((-1804.867432));
      Complex complex2 = Complex.valueOf((-1804.867432), (-1804.867432));
      complex2.sinh();
      Complex.valueOf((-1804.867432));
      Complex complex3 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.NaN.sinh();
      complex5.ZERO.asin();
      complex4.I.reciprocal();
      Complex complex6 = complex3.ONE.sinh();
      complex6.ONE.readResolve();
      complex6.I.log();
      complex0.isInfinite();
      complex1.equals(complex0);
      Complex complex7 = Complex.valueOf((-1804.867432));
      Complex complex8 = complex7.NaN.asin();
      complex8.ONE.acos();
      Complex complex9 = complex7.exp();
      complex0.isInfinite();
      complex9.nthRoot(37);
      complex7.getField();
      complex9.getArgument();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(971.8298423);
      complex0.getArgument();
      Complex complex1 = complex0.subtract(2600.3620863);
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.NaN.conjugate();
      complex3.I.getField();
      complex3.NaN.pow(complex2);
      complex2.INF.reciprocal();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex4.log();
      complex5.ONE.atan();
      Complex complex6 = complex1.divide(0.0);
      Complex complex7 = complex6.sqrt1z();
      Complex.valueOf(1.1479863663699871E296, 0.0);
      complex1.nthRoot(1206);
      complex7.getArgument();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.sinh();
      complex0.ZERO.sin();
      complex0.asin();
      try { 
        complex0.nthRoot((-1829));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,829
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.reciprocal();
      double double0 = (-1842.4515597);
      Complex complex4 = complex0.add((-1842.4515597));
      complex4.I.asin();
      complex0.ZERO.hashCode();
      Complex complex5 = complex3.cosh();
      complex2.hashCode();
      Complex complex6 = complex5.atan();
      complex5.ZERO.sinh();
      complex1.NaN.multiply((-1842.4515597));
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      complex2.ZERO.subtract(6.283185307179586);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex0.I.readResolve();
      complex1.getImaginary();
      complex1.nthRoot(168);
      Complex complex4 = complex1.conjugate();
      complex4.nthRoot(168);
      Complex complex5 = complex0.cos();
      complex3.divide(complex2);
      complex1.cos();
      complex5.sqrt();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 4.4068830785712375E-8);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.I.add(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(0.23015019297599792);
      complex4.INF.getArgument();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.sinh();
      complex6.INF.pow(4.4068830785712375E-8);
      Complex complex7 = complex3.multiply((-287));
      complex6.NaN.atan();
      complex7.cosh();
      complex6.cosh();
      complex2.multiply((-1062));
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-304.22631516233685), (-304.22631516233685));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.reciprocal();
      complex2.I.abs();
      complex1.pow(0.0);
      complex0.nthRoot(470);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-381.5276379947274));
      Complex complex1 = complex0.multiply((-381.5276379947274));
      complex1.I.readResolve();
      Complex complex2 = complex1.ONE.sin();
      complex1.ZERO.multiply(619);
      complex0.abs();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.acos();
      complex3.getField();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex8.ONE.sqrt1z();
      complex9.NaN.tan();
      Complex complex10 = complex8.INF.multiply(1800.71158114849);
      complex1.readResolve();
      Complex complex11 = complex4.reciprocal();
      Complex complex12 = complex11.multiply(complex0);
      complex12.I.sqrt();
      Complex complex13 = complex3.NaN.cosh();
      complex13.nthRoot(619);
      complex7.isNaN();
      complex0.divide(complex7);
      complex5.multiply(1);
      complex2.reciprocal();
      complex7.acos();
      Complex.valueOf(Double.NaN, (double) 1);
      complex8.abs();
      Complex complex14 = complex10.subtract(1800.71158114849);
      complex14.ONE.cos();
      complex8.log();
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.toString();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.conjugate();
      complex1.INF.reciprocal();
      complex1.ZERO.negate();
      complex3.INF.negate();
      Complex complex4 = complex0.reciprocal();
      complex0.getReal();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.negate();
      complex6.ONE.asin();
      Complex complex7 = complex1.reciprocal();
      complex6.divide(complex0);
      Complex.valueOf((double) 1);
      Complex complex8 = complex7.sqrt1z();
      complex8.cosh();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3389.0), (-3389.0));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ONE.multiply(complex1);
      complex3.ONE.acos();
      complex0.multiply(complex2);
      complex2.createComplex((-1169.63276337), 0.0);
      complex3.divide((-6.56250013356227E-149));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5621.10346419468);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.NaN.conjugate();
      complex3.NaN.pow((double) 1450);
      Complex complex4 = complex0.INF.log();
      complex4.NaN.cos();
      complex1.ONE.nthRoot(1450);
      complex0.equals(complex2);
      complex1.sinh();
      complex1.conjugate();
      Complex complex5 = complex1.tan();
      complex5.multiply((-1453.15219615));
      complex5.ONE.multiply((double) 1450);
      complex1.asin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.cos();
      Complex complex1 = complex0.negate();
      complex1.multiply(0);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(397.664851089143);
      complex0.add(397.664851089143);
      double double0 = (-1.0);
      Complex complex1 = Complex.valueOf((-1.0));
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-2361.333), 1089.940342476589);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex0.ZERO.add(complex1);
      Complex complex3 = complex1.cosh();
      complex3.isInfinite();
      Complex complex4 = complex3.INF.multiply(complex1);
      complex4.ZERO.pow(1089.940342476589);
      Complex complex5 = Complex.valueOf((-2361.333));
      complex4.ONE.divide(complex5);
      Complex complex6 = complex3.INF.pow((-2361.333));
      complex6.NaN.cosh();
      complex2.log();
      Complex complex7 = complex0.tan();
      complex7.I.exp();
      complex6.INF.divide(complex7);
      complex2.getReal();
      complex3.abs();
      Complex complex8 = complex6.subtract(0.0);
      complex8.NaN.exp();
      complex8.readResolve();
      complex8.multiply(complex6);
      complex8.negate();
      complex4.reciprocal();
      complex1.subtract(2990.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.I.pow(20.0);
      complex1.ONE.hashCode();
      Complex complex2 = complex0.INF.subtract(20.0);
      complex2.ZERO.readResolve();
      complex0.isInfinite();
      Complex complex3 = complex0.negate();
      complex3.I.toString();
      complex3.isNaN();
      Complex complex4 = complex3.multiply(286);
      complex3.subtract((-1545.042));
      complex4.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(2419.6, 2419.6);
      Complex complex1 = complex0.ZERO.createComplex((-3563.801), (-3563.801));
      Complex complex2 = complex1.NaN.divide((-3563.801));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.tan();
      complex3.I.getField();
      Complex complex5 = complex3.createComplex(0.0, 2.2756495475769043);
      Complex complex6 = complex5.ZERO.conjugate();
      complex6.ZERO.log();
      complex5.getReal();
      complex0.getReal();
      complex4.multiply(0);
      complex2.sinh();
      complex0.divide(0.0);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.pow((-1894.38399));
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex2.ONE.add(complex0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.I.acos();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex0.sinh();
      complex8.ZERO.tanh();
      Complex complex9 = complex0.I.reciprocal();
      complex9.INF.readResolve();
      complex0.INF.abs();
      complex8.ZERO.asin();
      complex5.I.createComplex((-2286.215046), (-2286.215046));
      complex0.toString();
      Complex complex10 = complex7.INF.tan();
      Complex complex11 = complex10.INF.sqrt();
      complex5.getImaginary();
      complex0.readResolve();
      Complex.valueOf(2168.9155239171755, Double.POSITIVE_INFINITY);
      Complex.valueOf(1241.43265024782);
      complex7.cos();
      Complex complex12 = complex7.conjugate();
      complex6.isNaN();
      complex5.subtract(complex12);
      complex11.nthRoot(1);
      complex6.multiply(complex12);
      complex4.sin();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-192.063655586));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.acos();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.atan();
      complex3.INF.abs();
      Complex complex4 = complex1.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(490.7);
      complex5.INF.cosh();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.NaN.cos();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex9.NaN.sqrt1z();
      assertSame(complex10, complex7);
      
      Complex complex11 = complex0.acos();
      complex6.INF.toString();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex11.divide(1603.7939140056646);
      assertEquals((-0.0037105560807556962), complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex11.ZERO.cosh();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = Complex.INF;
      complex6.equals(complex15);
      complex11.getImaginary();
      Complex complex16 = complex12.tan();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex2.atan();
      String string0 = complex2.toString();
      assertEquals("(1.5707963267948966, -0.8813735870195429)", string0);
      
      Complex complex18 = complex4.cos();
      Complex complex19 = complex9.add(1247.283);
      assertEquals(1247.823302305868, complex19.getReal(), 0.01);
      assertTrue(complex9.equals((Object)complex8));
      
      Complex complex20 = complex1.tanh();
      Complex complex21 = complex18.multiply(complex2);
      Complex complex22 = complex21.ZERO.divide(162.8405952903044);
      assertEquals(0.0, complex22.getReal(), 0.01);
      
      complex17.hashCode();
      assertEquals((-0.22101690190093917), complex17.getImaginary(), 0.01);
      
      Complex complex23 = complex20.atan();
      assertEquals((-0.6508801680230075), complex23.getReal(), 0.01);
      assertTrue(complex0.equals((Object)object0));
      assertTrue(complex1.equals((Object)complex16));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(3006.354);
      assertFalse(complex1.isInfinite());
      assertEquals(3.326288254809647E-4, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }
}
