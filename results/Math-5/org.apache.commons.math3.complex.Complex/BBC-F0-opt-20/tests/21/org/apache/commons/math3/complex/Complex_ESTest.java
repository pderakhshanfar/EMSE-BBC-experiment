/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:50:02 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-9.441842771290538E-300), (-9.441842771290538E-300));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex1.I.tanh();
      complex1.abs();
      Complex complex3 = new Complex((-9.441842771290538E-300));
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-1388.44915416), Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5041472729809487E-14, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.divide(complex0);
      complex0.multiply(2266);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.145160459652136E283), (-579.06683));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.divide(3.408223442335828);
      Complex complex3 = complex2.ZERO.log();
      complex3.add(2990.682365635);
      complex0.I.reciprocal();
      Complex complex4 = complex2.ONE.cosh();
      double double0 = 20.0;
      Complex.valueOf(20.0);
      complex0.tan();
      complex0.acos();
      complex1.reciprocal();
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      complex2.I.toString();
      complex1.multiply(179);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.tanh();
      complex2.multiply(complex3);
      complex4.log();
      complex1.subtract(Double.NaN);
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(1.9162893295288086);
      complex6.subtract((-3.375990585905416E-150));
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.valueOf((-396.88906760662), Double.NaN);
      complex8.add(7.326955749884755E-202);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.ONE.tan();
      Complex complex1 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(0);
      complex2.abs();
      Complex complex3 = complex2.ZERO.add((double) 0);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex1.conjugate();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.abs();
      Complex complex2 = new Complex(Double.NaN);
      complex2.ZERO.nthRoot(1506);
      complex1.multiply(1071);
      Complex complex3 = complex2.sinh();
      complex0.multiply(Double.NaN);
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      complex4.toString();
      Complex complex5 = new Complex(1071, Double.NaN);
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.ONE.tan();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.sqrt();
      complex2.add((-1.036103313062145E-7));
      complex0.pow(complex1);
      complex2.abs();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.ONE.tan();
      Complex complex1 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(0);
      complex2.abs();
      complex2.ZERO.add((double) 0);
      Complex complex3 = complex2.multiply((-3399.3459705125656));
      complex0.subtract(complex3);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, (-2528.9295128604));
      complex0.tan();
      complex3.nthRoot(7);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-9.441842771290538E-300));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.I;
      complex2.divide(complex1);
      Complex complex4 = new Complex(12.60628452863607);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = Complex.NaN;
      complex2.pow(complex1);
      complex1.exp();
      Complex complex3 = new Complex(20.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex(3270.061527973907, 2021.7464738876);
      Complex complex6 = Complex.INF;
      complex1.tanh();
      complex0.multiply((-396));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex1.abs();
      complex0.toString();
      Complex complex3 = Complex.valueOf((-2434.3), (-2276.557374787165));
      Complex complex4 = complex3.ZERO.acos();
      complex4.INF.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
      Complex complex5 = complex2.sqrt1z();
      complex1.subtract(complex0);
      complex5.multiply(1535);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 3008.738345057203;
      Complex complex1 = complex0.ZERO.multiply(3008.738345057203);
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.ONE.pow(complex3);
      complex3.ZERO.atan();
      complex2.I.tanh();
      Complex complex5 = null;
      complex1.ONE.pow(complex4);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.abs();
      complex1.add(2.0);
      Complex complex2 = complex0.pow(28.284271247461902);
      complex1.tan();
      complex2.exp();
      complex0.sinh();
      Complex complex3 = new Complex(2322.6366324769);
      Complex complex4 = Complex.INF;
      complex4.nthRoot(944);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2257.526842), 20.0);
      Complex complex2 = complex1.tan();
      complex2.ZERO.multiply(3.0727581699981756E-150);
      Complex.valueOf((-2257.526842));
      Complex complex3 = new Complex(20.0, (-2257.526842));
      complex0.conjugate();
      complex0.multiply(complex1);
      complex0.readResolve();
      complex0.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(36.68773248011913, (-1336.0939938552));
      Complex complex2 = complex1.multiply((-1753.067218));
      Complex complex3 = complex0.sqrt();
      complex1.atan();
      complex1.sin();
      complex3.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.exp();
      complex5.sinh();
      Complex.valueOf(1.3983810871259145E-150, 36.68773248011913);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.negate();
      complex0.multiply((-1336.0939938552));
      complex4.tanh();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2257.526842), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex2.I.sqrt1z();
      complex1.ONE.asin();
      complex0.conjugate();
      complex0.multiply(complex1);
      complex0.readResolve();
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-9.441842771290538E-300), (-9.441842771290538E-300));
      Complex complex1 = complex0.multiply((-269.5));
      complex0.sqrt();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.sin();
      complex1.add((-9.441842771290538E-300));
      complex3.ONE.tan();
      Complex complex4 = Complex.valueOf(2.5445766268628E-297, (double) 419);
      complex3.readResolve();
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply(279);
      complex0.ZERO.abs();
      Complex complex1 = complex0.ONE.atan();
      complex0.I.tan();
      Complex complex2 = complex0.ZERO.createComplex((-1837.9999569), 481.2805);
      complex2.I.negate();
      Complex complex3 = complex0.acos();
      complex0.subtract(481.2805);
      complex0.add(complex3);
      Complex complex4 = complex2.subtract((-1837.9999569));
      complex4.I.nthRoot(545);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1988.8235619));
      Complex complex1 = complex0.divide((-9.441842771290538E-300));
      complex0.tan();
      Complex complex2 = complex1.asin();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.042639194493364E-9), (-9.441842771290538E-300));
      Complex complex1 = complex0.add(2313.0);
      Complex complex2 = complex0.pow(1.0274494061148778E-8);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.exp();
      complex3.sinh();
      complex5.NaN.reciprocal();
      Complex.valueOf(2627.9600339797053, (-2.042639194493364E-9));
      complex4.log();
      Complex complex6 = Complex.I;
      complex0.negate();
      complex5.multiply(1255.8000000002212);
      Complex complex7 = new Complex((-1885.996), (-2.042639194493364E-9));
      Complex complex8 = Complex.valueOf((-9.441842771290538E-300), 0.05977437705805677);
      Complex complex9 = complex8.tanh();
      complex7.hashCode();
      complex9.equals(complex1);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex.valueOf(193.0, 193.0);
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-1258.3743043395168));
      Complex complex2 = complex1.tanh();
      complex2.hashCode();
      Complex complex3 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sin();
      complex2.equals((Object) null);
      complex2.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.pow(2327.02087393631);
      Complex complex4 = complex3.pow(complex2);
      complex3.tan();
      complex2.exp();
      complex4.sinh();
      Complex.valueOf(2.0, (-392.48741452543595));
      Complex complex5 = complex3.log();
      complex5.negate();
      Complex complex6 = Complex.valueOf(2.0);
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract((-551.767));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.cosh();
      Complex.valueOf((-1544.12984304444), 975.96645);
      Complex complex2 = complex0.conjugate();
      complex2.I.hashCode();
      Complex complex3 = complex0.multiply((-1238));
      Complex complex4 = complex3.ONE.add((double) (-1238));
      complex0.abs();
      complex3.readResolve();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.log();
      complex6.tanh();
      Complex complex7 = complex6.atan();
      complex7.INF.getField();
      complex7.multiply((-1238));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.asin();
      complex1.nthRoot(1);
      complex3.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.689591738));
      complex0.INF.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.pow((-1402.689591738));
      complex1.pow(complex2);
      Complex complex3 = complex1.tan();
      complex0.exp();
      complex1.sinh();
      Complex complex4 = Complex.valueOf((-1.6040513288090055E-287), 2893.99743245);
      Complex complex5 = complex1.log();
      complex5.negate();
      complex3.multiply((-1402.689591738));
      complex4.tanh();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.554580807685852);
      complex0.toString();
      complex0.readResolve();
      Complex complex1 = new Complex(2.7796303536272215E-86, Double.NaN);
      complex0.reciprocal();
      Complex complex2 = complex0.tan();
      complex2.asin();
      complex2.sinh();
      Complex complex3 = Complex.valueOf((-9.441842771290538E-300), 0.0);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.218609462241927E-9), (-84.7639535459));
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.sinh();
      Complex.valueOf((-1.218609462241927E-9), 14.1);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.ONE.add((-1.218609462241927E-9));
      complex1.sinh();
      complex4.ONE.cos();
      Complex complex8 = complex7.pow(complex6);
      Complex complex9 = complex3.pow(complex8);
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(419);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.ZERO;
      complex4.equals(complex5);
      complex4.add(8.041523923017192E122);
      complex3.pow(complex1);
      complex4.tan();
      Complex complex6 = Complex.NaN;
      complex6.exp();
      complex5.sinh();
      Complex complex7 = Complex.valueOf(8.041523923017192E122, 1339.2256597770318);
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.negate();
      complex9.multiply(225.83);
      complex7.tanh();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(36.68773248011913, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex.valueOf(1.002339480835938);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.abs();
      Complex complex2 = complex1.divide(Double.NaN);
      Complex complex3 = complex1.multiply(1071);
      complex2.sinh();
      complex0.multiply(Double.NaN);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.atan();
      complex0.tan();
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.valueOf(2.0, 2.0);
      complex5.nthRoot(3455);
      complex4.negate();
      complex0.conjugate();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.I.multiply((-933.2627));
      complex0.I.sqrt();
      Complex complex2 = complex0.add(6.283185307179586);
      complex2.ONE.atan();
      Complex complex3 = new Complex((-215.37881428664), 990.99565498989);
      complex0.reciprocal();
      complex3.tan();
      complex1.asin();
      complex3.nthRoot(1);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.I.multiply((-933.2627));
      Complex complex2 = Complex.INF;
      complex2.readResolve();
      Complex complex3 = Complex.INF;
      complex3.hashCode();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.reciprocal();
      complex5.createComplex(1134.0566893841858, 1.0);
      complex5.divide((-750.8));
      complex3.multiply(19);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.atan();
      complex1.I.divide(complex0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.tan();
      complex3.INF.asin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.asin();
      complex4.INF.multiply(complex5);
      complex5.nthRoot(1);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.readResolve();
      complex2.I.hashCode();
      Complex complex3 = complex1.negate();
      complex3.tanh();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.NaN.createComplex(1436.8098056, 1436.8098056);
      complex4.NaN.divide(0.0);
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.I;
      complex7.negate();
      complex5.cos();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.I.multiply((-933.2627));
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.add(6.283185307179586);
      Complex complex4 = complex3.ONE.atan();
      complex1.I.sin();
      complex3.equals((Object) null);
      Complex complex5 = complex1.add(0.0);
      complex5.pow(2327.02087393631);
      complex5.INF.pow(complex4);
      complex2.tan();
      Complex complex6 = complex0.exp();
      complex6.sinh();
      Complex.valueOf(2327.02087393631, (-933.2627));
      Complex complex7 = complex1.log();
      complex7.negate();
      complex2.multiply((-20.0));
      complex1.tanh();
      complex5.negate();
      complex1.cos();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ONE.divide((-1094.453405050019));
      Complex.valueOf((-1094.453405050019), (-1094.453405050019));
      Complex complex3 = complex2.ONE.log();
      complex3.ONE.abs();
      complex0.I.add(complex1);
      Complex complex4 = complex0.ONE.subtract(1572.83);
      Complex complex5 = Complex.ZERO;
      complex2.NaN.asin();
      complex4.I.subtract(complex5);
      complex0.conjugate();
      Complex complex6 = complex0.log();
      complex2.ONE.nthRoot(266);
      Complex complex7 = complex6.ONE.multiply(3.141592653589793);
      Complex complex8 = complex5.log();
      complex4.sqrt1z();
      Complex complex9 = complex0.pow(complex4);
      complex2.subtract(complex9);
      Complex complex10 = complex8.reciprocal();
      complex10.ZERO.conjugate();
      complex9.log();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.689591738));
      complex0.INF.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.asin();
      complex1.log();
      complex1.log();
      Complex complex2 = new Complex((-1402.689591738), (-1402.689591738));
      complex0.add(complex2);
      complex2.hashCode();
      Complex complex3 = Complex.INF;
      complex3.hashCode();
      try { 
        complex3.nthRoot((-2517));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,517
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.I.multiply((-933.2627));
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.add(6.283185307179586);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex1.I.sin();
      complex3.equals((Object) null);
      Complex complex6 = complex1.add(0.0);
      complex6.pow(2327.02087393631);
      complex6.INF.pow(complex4);
      complex2.tan();
      complex0.exp();
      complex2.sinh();
      Complex complex7 = Complex.INF;
      complex7.log();
      complex5.negate();
      Complex complex8 = complex4.multiply(4041.688);
      Complex complex9 = Complex.valueOf(4041.688);
      Complex complex10 = complex9.tanh();
      complex7.negate();
      Complex complex11 = Complex.INF;
      complex11.cos();
      complex10.nthRoot(1);
      complex8.conjugate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.I.multiply((-933.2627));
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.add(6.283185307179586);
      Complex complex4 = complex3.ONE.atan();
      complex1.I.sin();
      complex3.equals((Object) null);
      Complex complex5 = complex1.add(0.0);
      complex5.pow(2326.5998430392233);
      complex5.INF.pow(complex4);
      complex2.tan();
      complex5.sinh();
      Complex complex6 = complex1.log();
      complex6.negate();
      complex2.multiply((-20.0));
      complex0.tanh();
      complex1.negate();
      complex3.cos();
      complex1.nthRoot(302);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.689591738));
      complex0.INF.toString();
      complex0.readResolve();
      Complex complex1 = new Complex(1.0, 2893.99743245);
      Complex complex2 = complex1.reciprocal();
      complex2.tan();
      complex0.asin();
      complex0.nthRoot(1);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.689591738));
      complex0.INF.toString();
      Complex complex1 = complex0.subtract((-1402.689591738));
      Complex complex2 = Complex.valueOf((-1402.689591738), (-1402.689591738));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.ONE;
      complex2.I.sin();
      complex4.cosh();
      Complex complex5 = complex3.tan();
      complex3.divide(complex4);
      Complex complex6 = Complex.valueOf((-1669.77399234365));
      Complex complex7 = complex1.add(complex6);
      complex7.conjugate();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.ZERO.cos();
      complex1.sin();
      complex0.sqrt();
      complex0.isNaN();
      Complex complex4 = complex2.sqrt();
      complex1.subtract(0.0);
      Complex complex5 = Complex.valueOf((-1202.122326));
      complex5.I.atan();
      complex5.subtract(complex4);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.asin();
      complex0.add(Double.NaN);
      complex0.subtract((-278.730985807));
      Complex complex2 = complex0.createComplex((-2572.6703718), (-20.0));
      Complex complex3 = complex2.subtract(5.9429379110783564);
      complex1.readResolve();
      complex3.equals("");
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.689591738));
      complex0.INF.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.asin();
      Complex complex2 = complex0.ONE.log();
      complex2.NaN.add((-1402.689591738));
      complex2.tan();
      complex1.asin();
      Complex complex3 = Complex.ONE;
      complex0.asin();
      // Undeclared exception!
      complex0.nthRoot(1717986918);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.add(complex2);
      complex4.hashCode();
      complex5.hashCode();
      Object object0 = new Object();
      complex5.subtract(complex2);
      complex5.atan();
      complex2.log();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex2.readResolve();
      complex2.hashCode();
      complex1.negate();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.createComplex(0.5, 4565.7075);
      Complex complex6 = complex3.divide(3.468649042975936);
      complex3.getReal();
      complex0.readResolve();
      Complex complex7 = complex5.cosh();
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
      complex4.sqrt();
      complex3.multiply(complex8);
      Complex complex9 = complex7.cos();
      complex9.atan();
      Complex complex10 = Complex.INF;
      complex10.ONE.multiply(2.0);
      complex6.equals("");
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex0.tan();
      complex3.I.asin();
      Object object0 = new Object();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.subtract(complex4);
      complex1.atan();
      complex5.log();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(36.68773248011913, Double.POSITIVE_INFINITY);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.I.createComplex(1709.0, 1709.0);
      Complex complex3 = complex1.ZERO.reciprocal();
      complex1.NaN.multiply(complex0);
      Complex complex4 = complex0.I.pow(1709.0);
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex0.divide((double) 1);
      Complex complex7 = complex2.cosh();
      complex6.readResolve();
      complex7.NaN.acos();
      complex3.NaN.createComplex(1709.0, (-742.70856));
      Complex complex8 = complex0.sinh();
      complex8.I.reciprocal();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex10.acos();
      complex0.divide(complex10);
      complex11.multiply((double) 1);
      complex3.isInfinite();
      complex4.multiply(complex11);
      complex9.hashCode();
      complex7.tan();
      complex1.divide(1709.0);
      complex5.getArgument();
      complex9.hashCode();
      complex10.cosh();
      Complex complex12 = complex4.exp();
      complex12.INF.asin();
      Complex complex13 = complex7.multiply(complex8);
      complex13.ZERO.add((-1537.1942736893));
      complex0.multiply(0.7853981633974483);
      complex3.sqrt();
      complex11.acos();
      complex8.atan();
      complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.663275957107544);
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex(1.663275957107544);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.createComplex(673.78, 12.486282727368748);
      Complex complex5 = complex0.divide(0.0);
      complex4.getReal();
      complex3.readResolve();
      Complex complex6 = complex3.cosh();
      complex4.getReal();
      Complex complex7 = complex6.sqrt();
      complex6.hashCode();
      complex6.isNaN();
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex3.NaN.multiply(complex9);
      complex10.NaN.abs();
      complex5.exp();
      complex1.nthRoot(1448);
      Complex complex11 = Complex.valueOf(3647.7, (-625.214674501));
      complex11.nthRoot(880);
      complex7.pow(673.78);
      complex3.toString();
      complex1.divide(1367.0072379973205);
      complex8.createComplex(0.36967599391937256, 3647.7);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.ZERO.subtract(2508.774490707905);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex4.subtract(2.0474331649368955);
      complex3.pow(complex6);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sin();
      complex0.equals("");
      Complex complex3 = complex2.add(2.0);
      complex1.pow(complex0);
      Complex complex4 = Complex.ONE;
      complex4.tan();
      complex2.exp();
      Complex complex5 = complex3.log();
      Complex complex6 = complex2.negate();
      complex5.multiply((-3573.2264937988));
      complex5.tanh();
      complex0.negate();
      complex5.cos();
      Complex complex7 = Complex.ZERO;
      complex7.nthRoot(1);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = (Complex)complex0.readResolve();
      complex2.I.hashCode();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.NaN.createComplex(1436.8098056, 1436.8098056);
      complex6.NaN.divide(0.0);
      complex4.getReal();
      Complex complex8 = (Complex)complex5.ONE.readResolve();
      complex6.cosh();
      complex5.getReal();
      complex0.ONE.sqrt();
      complex4.multiply(complex7);
      complex3.cos();
      complex8.atan();
      Complex complex9 = Complex.INF;
      complex9.equals(complex2);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.663275957107544);
      Complex complex1 = complex0.I.createComplex(2.0, 2.0);
      complex1.ZERO.add(complex0);
      complex1.INF.getArgument();
      complex1.INF.asin();
      Complex complex2 = Complex.valueOf(0.7853981633974483, Double.NaN);
      complex2.hashCode();
      Complex complex3 = Complex.ONE;
      complex3.isNaN();
      complex1.getReal();
      Complex complex4 = complex1.exp();
      complex4.acos();
      complex2.nthRoot(1448);
      complex0.nthRoot(1391);
      complex1.pow(2.0);
      complex0.divide(3794.584422793792);
      complex0.createComplex((-1037.1468), 2.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex0.add(Double.NaN);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.log();
      Complex complex8 = complex6.negate();
      complex7.multiply((-1572.83));
      complex8.tanh();
      complex4.negate();
      Complex complex9 = complex2.cos();
      complex1.nthRoot(1);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
      complex2.hashCode();
      complex1.hashCode();
      Object object0 = new Object();
      Complex complex3 = complex2.cos();
      complex2.equals(object0);
      Complex complex4 = complex2.exp();
      complex4.tanh();
      Complex complex5 = Complex.valueOf(2508.774490707905, 127.384);
      complex5.sinh();
      complex4.log();
      complex2.log();
      complex3.createComplex(0.3594330038102771, 3293.2540176984126);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.689591738));
      complex0.INF.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex1.subtract(498.5);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.tan();
      complex5.divide(complex3);
      complex2.add(complex6);
      complex7.conjugate();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1208.2684786726), (-65.3909));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.cos();
      complex1.equals(complex2);
      Complex complex3 = complex1.exp();
      complex0.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.log();
      complex5.log();
      complex3.createComplex((-65.3909), (-1208.2684786726));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.ZERO.subtract(2508.774490707905);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex2.multiply(2508.774490707905);
      Complex complex5 = Complex.ZERO;
      complex5.isInfinite();
      Complex complex6 = complex1.multiply(complex3);
      complex1.hashCode();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.tan();
      complex8.divide((-1.0));
      complex7.getArgument();
      complex2.hashCode();
      complex0.cosh();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex3.asin();
      complex4.multiply(complex10);
      complex9.add(1.0);
      Complex complex11 = Complex.INF;
      complex6.sqrt();
      Complex complex12 = Complex.I;
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(-0.0, -0.0);
      complex1.asin();
      Complex complex2 = complex0.reciprocal();
      complex1.asin();
      complex2.nthRoot(1050);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      complex0.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.createComplex(498.5, (-991.32));
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex5.sinh();
      complex4.asin();
      complex3.acos();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.divide(complex3);
      Complex complex10 = complex6.multiply(Double.POSITIVE_INFINITY);
      complex10.isInfinite();
      Complex complex11 = complex10.multiply(complex1);
      complex4.hashCode();
      complex7.tan();
      Complex complex12 = complex6.divide((-742.70856));
      complex3.getArgument();
      complex9.hashCode();
      complex2.cosh();
      Complex complex13 = Complex.INF;
      complex12.asin();
      complex2.multiply(complex3);
      complex1.add(0.45251762866973877);
      complex11.multiply((-2.6033812325397097E-8));
      complex4.sqrt();
      Complex complex14 = Complex.NaN;
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.ZERO.multiply(0.0);
      Complex complex4 = complex1.ZERO.cos();
      complex1.sin();
      complex0.sqrt();
      complex0.isNaN();
      complex3.sqrt();
      complex1.add((-1537.1942736893));
      complex2.multiply(0.0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.acos();
      complex6.ONE.sqrt1z();
      complex4.multiply((-1537.1942736893));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.NaN.multiply(0);
      complex5.ZERO.getArgument();
      Complex complex6 = complex4.ONE.tanh();
      Complex complex7 = Complex.valueOf(0.0);
      complex1.isInfinite();
      Complex complex8 = complex6.NaN.tanh();
      Complex complex9 = complex6.INF.subtract(complex1);
      complex6.ONE.reciprocal();
      Complex complex10 = complex3.ONE.atan();
      complex10.INF.createComplex(0, (-43.549));
      Complex complex11 = complex9.ZERO.multiply(complex7);
      complex11.ZERO.readResolve();
      complex3.isInfinite();
      complex7.getField();
      complex6.hashCode();
      Complex complex12 = complex4.ONE.divide((double) 0);
      complex12.ZERO.multiply(Double.NaN);
      Complex complex13 = complex4.sinh();
      complex13.readResolve();
      complex4.sinh();
      complex2.toString();
      complex13.tan();
      complex13.multiply((double) 0);
      complex6.pow(0.0);
      complex1.nthRoot(1053);
      complex10.exp();
      complex8.sinh();
      complex0.reciprocal();
      complex11.add((-43.549));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.abs();
      Complex complex1 = complex0.INF.divide(1369.3209618);
      complex0.I.cosh();
      complex0.nthRoot(962);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex2.divide(complex1);
      complex2.INF.tanh();
      Complex complex5 = complex4.ZERO.divide(complex1);
      Complex complex6 = complex5.I.sqrt1z();
      complex6.NaN.reciprocal();
      Complex complex7 = complex1.I.sqrt();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.log();
      complex2.toString();
      complex4.INF.divide(complex1);
      complex9.asin();
      complex2.equals(complex5);
      complex7.getArgument();
      complex3.add(complex6);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.ZERO.divide((-20.0));
      Complex complex3 = complex0.I.multiply(0.0);
      Complex complex4 = complex1.ZERO.divide(0.0);
      complex4.I.tanh();
      complex3.INF.atan();
      complex0.I.cos();
      complex0.getImaginary();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.multiply((-20.0));
      complex6.getReal();
      Complex.valueOf((-2899.63136447067));
      Complex complex7 = complex5.pow(-0.0);
      Complex complex8 = Complex.valueOf((-20.0), 2252.0317177793963);
      complex8.ONE.toString();
      complex7.hashCode();
      complex1.reciprocal();
      complex2.conjugate();
      complex1.sinh();
      complex0.toString();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 1892.39;
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf(1892.39, 0.0);
      Complex complex1 = complex0.NaN.pow(1892.39);
      complex1.add(complex0);
      complex0.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.exp();
      complex2.NaN.createComplex(1892.39, 1892.39);
      Complex complex4 = complex3.I.tanh();
      complex4.I.tanh();
      try { 
        complex1.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-2327.02087393631), 0.0);
      Complex complex1 = complex0.acos();
      complex1.sin();
      complex1.abs();
      complex0.getField();
      Complex complex2 = complex1.exp();
      complex2.subtract(1614.230841174);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.cos();
      complex4.readResolve();
      complex4.readResolve();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex5.NaN.cosh();
      complex6.ONE.multiply((-5333));
      Complex complex7 = complex1.acos();
      complex1.INF.sqrt1z();
      Complex complex8 = complex2.log();
      complex1.I.exp();
      complex8.I.multiply(9.010878267878745);
      complex2.INF.getArgument();
      complex1.INF.readResolve();
      complex3.nthRoot(1);
      complex8.abs();
      complex6.pow(1614.230841174);
      complex0.reciprocal();
      complex3.isNaN();
      complex6.getImaginary();
      complex7.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.NaN.acos();
      complex0.I.nthRoot(4128);
      Complex complex2 = complex0.sqrt();
      complex2.NaN.conjugate();
      complex0.exp();
      Complex complex3 = complex1.sqrt1z();
      complex1.getReal();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1309.0));
      Complex complex1 = complex0.ZERO.multiply((-1309.0));
      complex1.ONE.negate();
      Complex complex2 = complex0.acos();
      complex2.pow(3266.4494068);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.663275957107544);
      Complex complex1 = complex0.I.createComplex(2.0, 2.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      complex1.INF.getArgument();
      Complex complex3 = complex1.INF.asin();
      complex3.ONE.multiply(complex2);
      Complex complex4 = complex0.cos();
      complex0.atan();
      complex4.equals(complex2);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.sin();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.multiply(complex1);
      complex1.ZERO.add(0.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.ONE.pow(complex1);
      Complex complex6 = Complex.valueOf(0.0, (-1041.5468619515));
      Complex complex7 = complex0.ZERO.pow(complex4);
      Complex complex8 = complex0.I.tan();
      complex0.NaN.hashCode();
      Complex complex9 = complex0.INF.pow(0.0);
      complex9.I.toString();
      complex9.ZERO.getArgument();
      complex9.ONE.negate();
      complex0.INF.getArgument();
      Complex complex10 = complex0.asin();
      complex10.INF.toString();
      complex9.toString();
      complex4.ONE.pow(complex5);
      Complex complex11 = complex7.divide(0.0);
      complex0.ONE.reciprocal();
      complex11.ZERO.add((-1041.5468619515));
      complex2.add(958.11);
      complex0.ONE.subtract(0.0);
      Complex complex12 = complex10.exp();
      complex6.subtract(complex0);
      Complex complex13 = complex2.negate();
      complex13.INF.asin();
      complex3.divide(complex8);
      complex13.getImaginary();
      complex12.sqrt1z();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1.830335419852293E-147), (-1.830335419852293E-147));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.ONE.sin();
      complex3.NaN.readResolve();
      complex2.I.readResolve();
      complex2.getArgument();
      complex1.atan();
      complex2.divide((-3.3501277491658695E-294));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.651944637298584);
      complex0.ONE.reciprocal();
      complex0.NaN.readResolve();
      complex0.INF.toString();
      Complex complex1 = complex0.I.negate();
      complex1.multiply(1.651944637298584);
      complex1.ONE.pow(1.651944637298584);
      complex0.isInfinite();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(2866.8);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.sqrt1z();
      complex5.NaN.reciprocal();
      Complex complex6 = complex4.add(complex2);
      Complex complex7 = complex6.ZERO.multiply(complex0);
      Complex complex8 = complex4.sinh();
      Complex.valueOf(2866.8);
      complex8.ZERO.hashCode();
      Complex complex9 = complex7.NaN.sin();
      Complex complex10 = complex7.I.tan();
      complex10.NaN.exp();
      Complex complex11 = complex10.INF.divide(1204.0);
      complex11.INF.pow(1204.0);
      complex2.pow(1.651944637298584);
      Complex complex12 = complex3.exp();
      complex12.NaN.sinh();
      complex1.toString();
      complex9.sqrt1z();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.cos();
      Complex.valueOf(1068.21833177934);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.pow((-497.5165));
      Complex complex1 = Complex.valueOf((double) 1, 1516.63473);
      complex0.divide(complex1);
      complex0.ZERO.multiply(1);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.554580807685852);
      Complex complex1 = complex0.divide((-2401.88));
      complex1.INF.multiply(1071);
      complex1.sinh();
      complex0.multiply((double) 1071);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.NaN.log();
      complex3.conjugate();
      complex1.isInfinite();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.INF.divide(complex2);
      complex2.tan();
      complex2.nthRoot(963);
      Complex complex6 = complex4.I.asin();
      Complex complex7 = complex6.ONE.conjugate();
      complex7.ONE.asin();
      complex5.I.sin();
      Complex.valueOf((double) 963);
      complex0.getReal();
      complex0.readResolve();
      complex2.add(1.0);
      complex5.pow(complex2);
      complex1.nthRoot(963);
      complex2.abs();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1208.2684786726), (-65.3909));
      Complex complex1 = Complex.I;
      complex0.INF.subtract(complex1);
      complex0.atan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Complex complex1 = new Complex(0.0, 20.0);
      Complex complex2 = complex0.divide(complex1);
      complex0.toString();
      complex0.atan();
      complex2.INF.sqrt1z();
      Complex complex3 = complex2.multiply(410);
      Complex complex4 = complex3.createComplex((-808.2232), (-808.2232));
      complex0.createComplex((-3182.991), (-3182.991));
      complex0.sinh();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.atan();
      complex1.I.divide(complex0);
      Complex complex2 = complex1.ZERO.multiply(0.0);
      complex1.ZERO.cos();
      complex1.sin();
      Complex complex3 = complex0.sqrt();
      complex0.isNaN();
      Complex complex4 = complex2.sqrt();
      complex1.subtract(0.0);
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.NaN.pow(complex1);
      complex0.subtract((-311.0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = new Complex(0.0, (-1097.0391));
      complex2.ONE.getArgument();
      complex0.INF.pow(complex2);
      complex1.ONE.nthRoot(1206);
      complex0.ONE.getArgument();
      Complex complex3 = complex0.divide((-1750.09882908137));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex1.tanh();
      complex4.I.cos();
      Complex complex7 = complex6.INF.subtract(0.0);
      complex5.isNaN();
      complex6.INF.conjugate();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.tan();
      complex10.conjugate();
      complex1.ONE.multiply(complex7);
      complex8.sin();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex11.ZERO.exp();
      complex12.INF.negate();
      complex9.readResolve();
      complex4.isInfinite();
      Complex complex13 = complex9.exp();
      complex13.multiply(complex7);
      complex1.sinh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.I.multiply((-933.2627));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.add(6.283185307179586);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex3.INF.conjugate();
      complex1.I.sin();
      complex4.equals((Object) null);
      Complex complex7 = complex1.add(0.0);
      complex7.INF.pow(complex5);
      complex3.tan();
      complex0.exp();
      Complex complex8 = complex1.log();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex6.multiply((-20.0));
      complex2.tanh();
      complex2.negate();
      complex4.cos();
      complex9.nthRoot(1);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.divide(253.88);
      complex0.ZERO.abs();
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      complex0.asin();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.tan();
      complex2.I.asin();
      complex1.nthRoot(1);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-1.0022192034216903E-7));
      complex0.hashCode();
      Complex complex2 = complex1.createComplex(1857.967266736178, 1990.610083);
      Complex complex3 = complex2.INF.sqrt1z();
      complex3.ONE.getField();
      Complex complex4 = complex2.INF.log();
      complex0.isNaN();
      complex4.cos();
      Complex complex5 = complex0.add(1857.967266736178);
      complex4.cos();
      complex5.asin();
      complex2.toString();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.asin();
      complex2.ZERO.cosh();
      Complex complex3 = complex2.sqrt1z();
      complex3.acos();
      Complex complex4 = complex1.tanh();
      complex4.multiply((-1));
      complex0.sin();
      complex3.multiply((-1));
      complex1.subtract(0.0);
      complex3.getField();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.689591738));
      complex0.INF.toString();
      complex0.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.log();
      complex2.ZERO.log();
      Complex complex3 = complex1.add(complex2);
      complex0.hashCode();
      complex1.hashCode();
      Object object0 = new Object();
      complex3.ZERO.cos();
      complex0.equals(object0);
      Complex complex4 = complex1.exp();
      complex4.tanh();
      complex3.sinh();
      complex0.log();
      complex0.log();
      complex0.createComplex((-1402.689591738), 2.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex0.readResolve();
      complex2.I.hashCode();
      Complex complex3 = complex1.negate();
      complex3.cos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.reciprocal();
      complex5.NaN.createComplex(1436.8098056, 1436.8098056);
      double double0 = 0.0;
      complex5.NaN.divide(0.0);
      complex3.getReal();
      complex4.ONE.readResolve();
      Complex complex6 = complex5.cosh();
      complex4.getReal();
      complex0.ONE.sqrt();
      complex3.hashCode();
      complex0.isNaN();
      complex5.getReal();
      complex3.exp();
      int int0 = 1448;
      complex1.nthRoot(1448);
      try { 
        complex6.nthRoot((-2384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,384
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.divide(complex0);
      complex0.sqrt();
      complex1.ZERO.toString();
      Complex complex3 = complex0.sqrt1z();
      complex1.equals(complex3);
      complex3.getField();
      complex2.divide(1847.1741656198847);
      complex1.tan();
      complex3.getReal();
      complex1.getReal();
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(660);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex1.I.abs();
      complex0.ZERO.getField();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.sinh();
      complex4.log();
      complex0.getArgument();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex1.I.sinh();
      complex5.NaN.toString();
      Complex complex7 = complex1.divide(complex4);
      complex7.INF.atan();
      complex1.equals("#clyis@sFOK");
      complex2.hashCode();
      Complex complex8 = complex4.multiply(0);
      Complex complex9 = complex8.multiply((double) 660);
      complex8.ONE.subtract(complex2);
      Complex complex10 = complex4.add(complex9);
      complex8.asin();
      complex10.ONE.conjugate();
      complex10.subtract(2.0);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = complex0.subtract(2.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.I.atan();
      Complex complex3 = complex1.INF.atan();
      complex3.INF.atan();
      complex2.ONE.getArgument();
      Complex complex4 = complex0.negate();
      complex1.tan();
      Complex complex5 = complex4.multiply((-462.53));
      complex5.ONE.cosh();
      complex5.add(complex1);
      Complex complex6 = complex3.sin();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3686.955900469026, (-1232.405097333457));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(566.2005562884372);
      Complex complex1 = complex0.multiply(566.2005562884372);
      complex1.INF.tanh();
      complex0.nthRoot(180);
      Complex complex2 = complex0.sinh();
      complex2.conjugate();
      complex2.reciprocal();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      Complex complex1 = new Complex((-1996.0934190327046), (-1996.0934190327046));
      complex1.NaN.cos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.divide((-4142.952289112881));
      Complex complex4 = complex3.NaN.multiply(0.20818853378295898);
      complex4.hashCode();
      Complex complex5 = complex3.pow((-5.598619958143586E-8));
      complex2.INF.sin();
      Complex complex6 = complex1.pow((-1996.0934190327046));
      Complex complex7 = complex6.INF.divide((-5.598619958143586E-8));
      complex7.I.readResolve();
      complex6.equals((Object) null);
      complex3.toString();
      complex5.toString();
      complex0.pow((-1996.0934190327046));
      try { 
        complex2.nthRoot((-567));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -567
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-951.0), 3.076063086193525E-48);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.divide(complex0);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.NaN.tan();
      complex2.ZERO.sinh();
      Complex complex5 = complex0.ZERO.divide((-3308.2761644));
      complex5.ONE.readResolve();
      Complex complex6 = complex5.I.conjugate();
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.ONE.acos();
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      complex1.INF.pow((-3308.2761644));
      Complex complex10 = complex1.multiply((-233));
      complex1.isInfinite();
      Complex complex11 = complex10.divide((-659.8));
      assertEquals(1.086272656991651E-48, complex11.getImaginary(), 0.01);
      assertEquals((-335.8335859351319), complex11.getReal(), 0.01);
      
      complex1.hashCode();
      complex5.getArgument();
      complex8.getImaginary();
      complex8.isInfinite();
      Complex complex12 = complex4.sinh();
      assertNotSame(complex4, complex3);
      assertSame(complex12, complex2);
      
      Complex complex13 = complex8.subtract(complex7);
      assertEquals((-1.0137618320726058), complex13.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.asin();
      complex1.ZERO.add(6.283185307179586);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.subtract(0.0);
      complex2.createComplex(0.0, 0.0);
      complex2.subtract(1572.83);
      Complex complex3 = (Complex)complex2.readResolve();
      boolean boolean0 = complex2.equals(complex3);
      assertTrue(boolean0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      complex2.hashCode();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      double double0 = 3390.9072822;
      Complex complex2 = complex1.NaN.subtract(3390.9072822);
      complex2.ZERO.negate();
      complex0.reciprocal();
      complex1.NaN.divide(1.2991611957550049);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.INF.divide(3390.9072822);
      complex3.INF.nthRoot(1);
      try { 
        complex4.NaN.nthRoot((-3846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,846
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3409.7608495153));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.I.multiply((-3409.7608495153));
      assertEquals((-3409.7608495153), complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      
      Complex.valueOf((-3409.7608495153));
      Complex complex4 = complex2.INF.divide(complex1);
      complex4.I.negate();
      complex0.hashCode();
      Complex complex5 = complex1.divide(complex0);
      Complex.valueOf((-3409.7608495153));
      complex0.getArgument();
      Complex complex6 = complex5.sin();
      assertSame(complex1, complex4);
      assertSame(complex6, complex5);
      
      Complex complex7 = complex0.sqrt1z();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(3409.760702877447, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.ONE.getField();
      Complex complex1 = complex0.subtract(2.0);
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.INF.log();
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex3.getImaginary(), 0.01);
      
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.ZERO.multiply(3970);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      boolean boolean0 = complex2.equals(complex4);
      assertFalse(boolean0);
      
      Complex complex8 = complex5.sinh();
      assertTrue(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      
      Complex complex9 = complex6.atan();
      assertSame(complex9, complex2);
      assertFalse(complex4.equals((Object)complex1));
      assertSame(complex9, complex8);
      assertSame(complex6, complex5);
  }
}
