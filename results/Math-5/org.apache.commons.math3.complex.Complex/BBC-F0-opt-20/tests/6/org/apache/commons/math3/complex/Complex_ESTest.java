/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:57:29 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-165.50268424549512));
      Complex complex2 = Complex.ZERO;
      complex0.add((-72.51172594));
      complex2.reciprocal();
      complex0.nthRoot(600);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf((double) 600);
      Complex complex5 = complex4.sinh();
      complex1.readResolve();
      complex2.sqrt();
      complex3.hashCode();
      complex4.cosh();
      complex5.sqrt1z();
      complex1.toString();
      complex0.divide((-165.50268424549512));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-4081.9242619425286), (-1102.0));
      complex0.cosh();
      Complex.valueOf((-1102.0));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf((-1102.0));
      complex3.I.exp();
      Complex complex4 = complex3.multiply(2147);
      Complex.valueOf((-1102.0));
      complex4.divide(complex2);
      complex1.INF.asin();
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.getField();
      Complex complex6 = complex1.cosh();
      complex6.ZERO.createComplex((-1102.0), 2163.54821);
      complex2.pow(780.9029);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.subtract(2163.54821);
      complex8.tanh();
      complex8.multiply((-424));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(4999);
      // Undeclared exception!
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), 1.2246467991473532E-16);
      Complex complex2 = complex1.divide(6.283185307179586);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.multiply(2507);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.reciprocal();
      complex5.nthRoot(570);
      complex5.log();
      Complex complex7 = complex6.sinh();
      complex6.readResolve();
      complex3.readResolve();
      Complex complex8 = complex7.sqrt();
      complex3.hashCode();
      complex8.negate();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1736.63991815735, (-3132.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(complex1);
      complex0.NaN.nthRoot(1);
      complex2.nthRoot(1);
      Complex complex3 = complex0.reciprocal();
      complex2.toString();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.asin();
      complex5.NaN.subtract((-3132.0));
      Complex complex6 = complex0.INF.sinh();
      complex6.ZERO.pow(complex3);
      Complex complex7 = complex5.ZERO.multiply(1);
      Complex complex8 = complex5.multiply(1736.63991815735);
      Complex complex9 = complex1.add(complex7);
      complex9.multiply(complex4);
      complex2.sin();
      Complex complex10 = complex8.pow(1.8209286527912475E-15);
      complex10.ZERO.sqrt1z();
      complex8.add((-3132.0));
      complex4.divide(1736.63991815735);
      Complex complex11 = complex0.cosh();
      complex11.nthRoot(17);
      complex7.multiply(17);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex(3.5201699899499525E-100, 20.0);
      complex1.ONE.createComplex(1.7814075506761822, 3.5201699899499525E-100);
      Complex complex2 = new Complex(1.7814075506761822, (-1.0));
      complex2.ONE.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      complex1.multiply(5.685720022003016E24);
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.atan();
      complex0.I.multiply(complex1);
      Complex complex3 = complex2.divide(3.5201699899499525E-100);
      complex3.ONE.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex3.nthRoot(594);
      Complex complex4 = Complex.NaN;
      Complex.valueOf((double) (-3295));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      complex1.nthRoot(1);
      Complex.valueOf((double) 1);
      Complex complex2 = complex1.atan();
      complex2.divide(3.5201699899499525E-100);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 1);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex1 = Complex.INF;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      complex1.abs();
      complex1.readResolve();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.multiply(1.432433843612671);
      Complex complex2 = complex1.createComplex(0.19062360414733082, 3.5201699899499525E-100);
      complex2.conjugate();
      Complex complex3 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      complex1.nthRoot(613);
      Complex.valueOf((double) 1);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.divide(3.5201699899499525E-100);
      complex3.ONE.sinh();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.ZERO.getArgument();
      complex1.multiply(809);
      complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.multiply(1.432433843612671);
      Complex complex2 = complex1.createComplex(0.19062360414733082, 3.5201699899499525E-100);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      complex4.nthRoot(613);
      complex3.abs();
      Complex complex5 = Complex.valueOf((double) 1);
      complex5.I.atan();
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.INF;
      complex5.nthRoot(3525);
      complex4.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.atan();
      complex6.divide(3.5201699899499525E-100);
      complex7.divide(Double.POSITIVE_INFINITY);
      complex6.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-3.0173901411577916E-8), (-3.0173901411577916E-8));
      complex0.divide((-20.0));
      int int0 = (-1041);
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = new Complex(20.0);
      complex2.subtract(288.9842422475192);
      Complex complex4 = Complex.I;
      complex4.pow((-0.19062360414733082));
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex2.divide((-0.19062360414733082));
      complex6.exp();
      complex5.reciprocal();
      Complex complex7 = Complex.ONE;
      complex7.multiply(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      Complex complex8 = Complex.INF;
      complex1.equals(complex8);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.multiply(1.432433843612671);
      Complex complex2 = complex1.createComplex(0.19062360414733082, 3.5201699899499525E-100);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = new Complex(3.5201699899499525E-100, Double.POSITIVE_INFINITY);
      complex4.nthRoot(613);
      complex3.abs();
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex5.sinh();
      complex6.INF.sqrt1z();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.divide(3.5201699899499525E-100);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex8.nthRoot(594);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.pow((double) (-3295));
      complex1.nthRoot(17);
      complex4.tan();
      complex10.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.multiply(1.432433843612671);
      Complex complex2 = complex0.conjugate();
      complex0.nthRoot(1);
      complex2.abs();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.atan();
      complex1.divide((-2805.1781165));
      Complex complex4 = complex0.divide((double) 1);
      complex3.nthRoot(613);
      Complex complex5 = Complex.NaN;
      complex1.pow(0.19062360414733082);
      try { 
        complex4.nthRoot((-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -563
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-3564.2291225255));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(547.815905118);
      Complex complex4 = complex2.add((-4044.92));
      complex1.isInfinite();
      complex4.nthRoot(629);
      Complex complex5 = complex1.pow(complex4);
      complex1.getField();
      Complex complex6 = Complex.valueOf(547.815905118);
      complex4.hashCode();
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.multiply((-3564.2291225255));
      Complex complex9 = complex8.cosh();
      complex3.tanh();
      complex5.sqrt1z();
      complex9.getReal();
      Complex complex10 = Complex.valueOf((-1894.6), (-20.0));
      complex10.tan();
      complex2.multiply((-3564.2291225255));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(757.3, 757.3);
      Complex.valueOf(757.3, (-9.457084582570225E263));
      complex0.readResolve();
      Complex complex1 = new Complex(757.3);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = new Complex(2583.0);
      complex1.cos();
      Complex complex2 = Complex.valueOf(1.0000000301739014, Double.POSITIVE_INFINITY);
      complex2.cosh();
      complex0.nthRoot(1249);
      Complex complex3 = complex2.pow(0.38905513286590576);
      complex0.cos();
      complex3.tan();
      complex3.multiply(1.0000000301739014);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 593.232079);
      Complex complex1 = complex0.conjugate();
      complex1.nthRoot(37);
      complex1.abs();
      Complex complex2 = complex0.sin();
      complex1.atan();
      Complex complex3 = complex1.divide((-906.6417384644965));
      Complex complex4 = complex2.divide(593.232079);
      complex2.nthRoot(1359);
      complex2.tanh();
      complex3.pow((-1.0));
      complex1.nthRoot(37);
      complex3.cos();
      complex1.multiply((-2147096694));
      complex4.asin();
      Complex.valueOf((-2059.95476456262), 2592.9721);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = complex0.subtract(339.674);
      complex1.getReal();
      Complex complex2 = Complex.I;
      complex2.isNaN();
      Complex complex3 = complex1.sin();
      complex0.hashCode();
      complex3.multiply(1.0);
      Complex complex4 = complex1.createComplex(Double.POSITIVE_INFINITY, 339.674);
      Complex complex5 = complex0.conjugate();
      complex0.nthRoot(1);
      complex5.abs();
      Complex complex6 = complex1.sin();
      complex0.atan();
      complex6.divide((-1884.8));
      Complex complex7 = complex2.divide(1.0);
      complex0.nthRoot(37);
      complex1.pow((-1751.7824823878));
      complex4.nthRoot(1);
      complex2.cos();
      complex7.multiply((-2146418597));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-3.0173901411577916E-8), (-3.0173901411577916E-8));
      Complex complex1 = complex0.ZERO.add((-3.0173901411577916E-8));
      complex0.ZERO.reciprocal();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.sin();
      complex0.acos();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = (Complex)complex5.ZERO.readResolve();
      complex2.multiply(complex0);
      Complex complex7 = complex0.subtract((-3.0173901411577916E-8));
      Complex complex8 = complex7.sinh();
      complex8.NaN.nthRoot(2914);
      double double0 = (-301.60074383);
      Complex complex9 = complex8.INF.createComplex((-3.0173901411577916E-8), (-301.60074383));
      complex4.subtract(Double.NaN);
      Complex complex10 = complex3.atan();
      complex1.sinh();
      complex6.multiply(2914);
      complex9.subtract((-301.60074383));
      complex7.equals(complex10);
      int int0 = 1853757959;
      // Undeclared exception!
      complex6.nthRoot(1853757959);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-2015.3201), 0.0);
      Complex complex2 = new Complex((-2015.3201), 0.0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ONE.subtract(0.0);
      complex0.getReal();
      complex1.isNaN();
      Complex complex5 = complex4.sin();
      complex3.INF.tan();
      Complex complex6 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      complex4.createComplex((-593.232079), Double.NaN);
      complex5.abs();
      complex0.sin();
      complex1.NaN.atan();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.I.atan();
      Complex complex7 = new Complex(Double.NaN, 0.0);
      complex7.ZERO.tan();
      complex7.isInfinite();
      Complex complex8 = complex4.exp();
      complex8.log();
      Complex complex9 = Complex.ONE;
      complex6.getArgument();
      complex2.tan();
      complex6.add(4.241536392174967E-9);
      Complex complex10 = Complex.NaN;
      complex6.cos();
      Complex complex11 = Complex.ZERO;
      Complex.valueOf((-8271.640937105003), (-2015.3201));
      complex5.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4135.820529));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-5528.717959192615), (-1049.8389));
      complex4.ONE.getArgument();
      Complex complex5 = complex4.INF.pow(complex1);
      complex5.getField();
      complex3.multiply(2583);
      Complex complex6 = new Complex((-4135.820529));
      Complex complex7 = Complex.INF;
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex4.pow((-5.3086706437795354E-9));
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = Complex.I;
      complex3.getArgument();
      Complex complex12 = Complex.INF;
      complex12.tan();
      complex10.add((double) 2583);
      Complex complex13 = Complex.NaN;
      complex12.cos();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = Complex.valueOf((-4135.820529), (-1.2356642915425957));
      try { 
        complex15.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4135.820529));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-4135.820529));
      Complex complex5 = complex4.subtract((-4135.820529));
      Complex complex6 = complex5.add(0.0);
      complex2.isInfinite();
      complex5.nthRoot(629);
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex6.pow(complex7);
      complex6.atan();
      complex8.multiply(535);
      Complex complex9 = new Complex((-3072.3));
      complex5.subtract((-672.65443188481));
      complex8.equals(complex3);
      complex8.reciprocal();
      Complex complex10 = Complex.ZERO;
      complex4.I.pow((-677.32784));
      Complex complex11 = complex2.pow((-1.1455271549574576E-7));
      complex1.reciprocal();
      Complex complex12 = Complex.ONE;
      complex7.getArgument();
      complex11.tan();
      complex3.add(0.0);
      Complex complex13 = Complex.NaN;
      complex10.cos();
      Complex complex14 = Complex.ZERO;
      Complex.valueOf((-2984.637085970868), 0.26146239042282104);
      complex5.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply((-20.0));
      Complex complex3 = complex2.createComplex(0.7647251540112073, 0.7647251540112073);
      Complex complex4 = complex3.conjugate();
      complex3.nthRoot(2578);
      complex0.abs();
      complex0.sin();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.divide(0.7647251540112073);
      Complex complex7 = complex2.divide(20.0);
      complex5.exp();
      complex3.reciprocal();
      Complex complex8 = complex7.exp();
      complex6.multiply((-20.0));
      Complex complex9 = new Complex(0.7647251540112073, (-20.0));
      complex9.multiply(2578);
      complex4.sqrt();
      complex8.add((-593.232079));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-549.6977226885809));
      complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.log();
      complex1.sin();
      complex1.cosh();
      Complex complex2 = complex1.INF.sinh();
      complex2.ZERO.cosh();
      complex0.I.pow((-549.6977226885809));
      Complex complex3 = complex0.tanh();
      complex0.divide((-2348.3313853255277));
      Complex complex4 = Complex.valueOf(167.65613783550918, 167.65613783550918);
      complex4.tan();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2247.146927), 0.6170875772350976);
      Complex complex1 = complex0.log();
      complex0.cosh();
      complex0.sinh();
      Complex complex2 = complex1.subtract((-356.9));
      Complex complex3 = complex1.pow((-802.596310059262));
      Complex complex4 = new Complex(0.6170875772350976, 929.8);
      Complex complex5 = complex4.tanh();
      complex5.divide(0.0);
      complex2.exp();
      complex5.reciprocal();
      complex3.exp();
      Complex complex6 = complex5.multiply(2032.996751229025);
      complex6.exp();
      Complex complex7 = complex6.log();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 3.087661273836024E-193;
      Complex complex0 = Complex.valueOf(3.087661273836024E-193);
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-3564.2291225255));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(547.815905118);
      Complex complex4 = complex2.add((-4044.92));
      complex1.isInfinite();
      complex4.nthRoot(629);
      Complex complex5 = complex1.pow(complex4);
      complex3.atan();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex2.multiply(2583);
      Complex complex8 = new Complex((-3564.2291225255));
      Complex complex9 = complex8.subtract((-5.3086706437795354E-9));
      complex3.equals(complex2);
      complex1.reciprocal();
      Complex complex10 = complex7.log();
      complex5.pow((-1.1455271549574576E-7));
      Complex complex11 = complex1.sin();
      complex9.atan();
      complex0.divide((-1.0));
      complex10.divide((-20.0));
      complex8.exp();
      Complex complex12 = complex11.reciprocal();
      complex6.exp();
      complex8.multiply((-4044.92));
      Complex complex13 = new Complex(1.0000521508486608, (-5.3086706437795354E-9));
      complex13.multiply(629);
      complex4.sqrt();
      complex12.add(2.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2015.3201), 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.INF.cosh();
      Complex complex3 = complex0.ONE.subtract(0.0);
      complex0.getReal();
      complex0.isInfinite();
      Complex complex4 = complex3.sin();
      complex3.hashCode();
      complex0.hashCode();
      Complex complex5 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.createComplex((-2895.7773), (-2015.3201));
      Complex complex7 = complex6.conjugate();
      complex3.nthRoot(604);
      complex3.abs();
      complex1.sin();
      Complex complex8 = complex2.atan();
      complex1.divide((-4268.0));
      complex7.divide((-2656.44327624406));
      complex8.exp();
      complex4.reciprocal();
      Complex complex9 = Complex.I;
      complex9.exp();
      complex0.multiply((-593.232079));
      complex4.multiply(604);
      complex5.sqrt();
      complex3.add((double) 1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4135.820529));
      complex0.sqrt();
      complex0.acos();
      Complex complex1 = Complex.valueOf((-5528.717959192615), (-1049.8389));
      complex1.ONE.getArgument();
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.getField();
      Complex complex3 = Complex.valueOf((-4135.820529));
      complex3.asin();
      Complex complex4 = new Complex(0.06612417101860046, (-1049.8389));
      complex4.pow(complex0);
      complex2.getField();
      Complex complex5 = Complex.valueOf((-1049.8389));
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.I;
      complex6.multiply(662.06994698798);
      complex5.divide(2015.3201);
      Complex.valueOf((-1978.7441268812722), 1049.8389);
      complex3.multiply(604);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2015.3201), 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ONE.subtract(0.0);
      complex0.getReal();
      complex1.isNaN();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.pow(complex1);
      complex5.getField();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.asin();
      complex3.hashCode();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.multiply(0.999999095491122);
      complex6.cosh();
      complex3.tanh();
      Complex complex10 = new Complex(0.8414709848078965, 0.999999095491122);
      complex10.sqrt1z();
      complex0.getReal();
      Complex.valueOf(0.0, 1012.3266);
      Complex complex11 = Complex.NaN;
      complex9.pow(complex4);
      Complex.valueOf((-3223.9997341686), 3834.20269);
      complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.510567165169581E-4);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(9.510567165169581E-4);
      complex1.cosh();
      complex2.tanh();
      Complex complex5 = new Complex(2015.3201);
      complex5.sqrt1z();
      complex2.getReal();
      Complex complex6 = Complex.valueOf((-1303.273813534), 3679.98001);
      Complex complex7 = Complex.NaN;
      complex2.pow(complex6);
      Complex.valueOf(9.020588189589123, 3017.7618462616);
      complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-3564.2291225255));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(547.815905118);
      Complex complex4 = complex2.add((-4044.92));
      complex1.isInfinite();
      complex4.nthRoot(629);
      complex1.pow(complex4);
      complex3.atan();
      complex4.multiply((double) 629);
      complex4.hashCode();
      complex0.conjugate();
      complex3.pow(complex1);
      complex2.divide(Double.NaN);
      Complex.valueOf(1.528388084444653E68, 4589.945452);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = (-246);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.cosh();
      double double0 = (-2263.0);
      Complex complex4 = complex3.ONE.pow((-2263.0));
      complex4.NaN.multiply(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.I.log();
      complex6.I.getArgument();
      complex1.ZERO.sin();
      Complex complex7 = complex3.INF.divide(complex5);
      complex7.I.cosh();
      complex7.ZERO.exp();
      complex2.ONE.abs();
      complex3.I.hashCode();
      complex2.ONE.subtract((double) (-246));
      try { 
        complex0.NaN.nthRoot((-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -246
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.log();
      complex2.NaN.subtract(878.55658410674);
      complex0.equals(complex1);
      Complex complex3 = complex1.NaN.sqrt();
      complex3.NaN.log();
      complex1.I.divide(complex3);
      complex1.I.cos();
      Complex complex4 = complex3.INF.sqrt();
      complex3.I.nthRoot(1389);
      Complex complex5 = complex0.I.negate();
      complex5.toString();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex1.reciprocal();
      Complex.valueOf(3007.756797717664);
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex0.sinh();
      complex9.conjugate();
      complex9.ZERO.cosh();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex1.createComplex(1389, 1389);
      complex10.INF.readResolve();
      Complex complex12 = complex6.sin();
      complex12.I.abs();
      complex7.asin();
      Complex complex13 = complex10.multiply(1389);
      Complex complex14 = complex13.I.negate();
      complex5.toString();
      complex13.INF.cosh();
      complex7.add(1.0);
      complex14.tan();
      complex8.asin();
      complex4.cosh();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4135.820529));
      Complex complex1 = complex0.I.tan();
      complex1.sqrt();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf((-5528.717959192615), (-1049.8389));
      complex3.ONE.getArgument();
      Complex complex4 = complex3.INF.pow(complex1);
      complex4.getField();
      Complex complex5 = Complex.valueOf((-4135.820529));
      Complex complex6 = complex5.asin();
      complex1.hashCode();
      Complex complex7 = Complex.I;
      complex7.multiply(2015.3201);
      Complex complex8 = complex2.cosh();
      complex8.tanh();
      complex2.sqrt1z();
      complex1.getReal();
      Complex.valueOf((-1049.8389), Double.NaN);
      Complex complex9 = Complex.NaN;
      complex6.pow(complex9);
      Complex complex10 = Complex.valueOf((-4135.820529), 0.6512666940689087);
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(2032.052044);
      Complex complex1 = Complex.I;
      complex1.INF.pow(complex0);
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.equals((Object) null);
      Complex complex3 = Complex.I;
      complex1.divide(complex3);
      complex1.sin();
      Complex.valueOf(2032.052044, 2032.052044);
      complex0.sqrt1z();
      complex2.getField();
      complex3.multiply((-1552.035702982));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-3564.2291225255));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(547.815905118);
      Complex complex4 = complex2.add((-4044.92));
      complex1.isInfinite();
      complex4.nthRoot(629);
      Complex complex5 = complex1.pow(complex4);
      complex3.atan();
      Complex complex6 = complex2.sinh();
      complex6.I.cos();
      Complex complex7 = complex2.multiply(2583);
      Complex complex8 = new Complex((-3564.2291225255));
      complex8.subtract((-5.3086706437795354E-9));
      complex3.equals(complex2);
      complex1.reciprocal();
      complex7.log();
      complex5.pow((-0.2680270631615218));
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = Complex.ONE;
      complex10.getArgument();
      complex9.tan();
      Complex complex11 = complex5.add(1.1752011936438014);
      complex0.cosh();
      Complex complex12 = Complex.NaN;
      complex12.cos();
      complex0.isNaN();
      complex11.multiply(1);
      Complex complex13 = complex0.sqrt1z();
      complex2.getField();
      complex13.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-549.6977226885809));
      Complex complex1 = complex0.acos();
      Complex complex2 = (Complex)complex0.ONE.readResolve();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.cosh();
      complex3.INF.sinh();
      Complex complex5 = complex0.INF.subtract((-2348.3313853255277));
      complex1.I.pow((-549.6977226885809));
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.multiply((-549.6977226885809));
      complex0.isNaN();
      Complex complex8 = complex4.exp();
      Complex complex9 = Complex.I;
      complex9.log();
      complex0.conjugate();
      Complex complex10 = complex8.cosh();
      complex5.tanh();
      complex10.sqrt1z();
      complex2.getReal();
      Complex complex11 = Complex.valueOf((-549.6977226885809), (-1.2703728237858895E7));
      complex11.pow(complex3);
      Complex.valueOf((-266.617305393), (-549.6977226885809));
      complex0.divide(complex8);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.NaN.subtract(1.4615985810260016E275);
      complex0.nthRoot(629);
      complex1.pow(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.multiply(616);
      Complex complex6 = new Complex(4142.0);
      Complex complex7 = complex4.subtract((double) 629);
      complex4.equals(complex1);
      Complex complex8 = complex4.reciprocal();
      complex2.log();
      complex7.pow((-1.1455271549574576E-7));
      complex5.reciprocal();
      Complex complex9 = Complex.ONE;
      complex8.getArgument();
      complex4.tan();
      complex6.add(Double.NaN);
      complex4.cosh();
      Complex complex10 = Complex.NaN;
      complex9.cos();
      complex5.isNaN();
      Complex complex11 = Complex.NaN;
      complex11.multiply(617);
      complex2.sqrt1z();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4135.820529));
      Complex complex1 = complex0.I.tan();
      complex1.sqrt();
      complex0.acos();
      Complex complex2 = Complex.valueOf((-5528.717959192615), (-1049.8389));
      complex2.ONE.getArgument();
      Complex complex3 = complex2.INF.pow(complex1);
      complex3.getField();
      Complex complex4 = Complex.valueOf((-4135.820529));
      Complex complex5 = complex4.asin();
      complex1.hashCode();
      Complex complex6 = Complex.I;
      complex6.multiply(2015.3201);
      Complex complex7 = Complex.valueOf(0.45969769413186023, (-44.86185122));
      complex7.tanh();
      Complex.valueOf((-1049.8389), (-3729.11705));
      Complex complex8 = complex6.sqrt1z();
      complex8.asin();
      complex3.getField();
      complex5.multiply(8271.640937105003);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.4054863777516134E297, 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ONE.subtract(0.0);
      complex0.getReal();
      complex0.isInfinite();
      Complex complex5 = complex4.sin();
      complex4.hashCode();
      complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.createComplex((-593.232079), 0.0);
      complex6.I.nthRoot(1);
      complex5.abs();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex1.NaN.atan();
      Complex complex9 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.multiply(0.0);
      complex8.getField();
      Complex complex11 = complex4.sinh();
      complex11.NaN.sqrt();
      complex6.isNaN();
      complex9.NaN.conjugate();
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex9.exp();
      Complex complex14 = Complex.valueOf((-593.232079));
      complex1.multiply(complex14);
      complex11.pow(complex7);
      complex13.pow(0.8414709848078965);
      Complex complex15 = complex3.subtract(complex5);
      complex15.INF.getArgument();
      complex12.getReal();
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.pow(complex4);
      complex2.I.pow(complex5);
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex3.multiply(0);
      complex9.ONE.subtract(complex8);
      complex8.divide(complex2);
      complex4.readResolve();
      complex1.divide(complex6);
      Complex complex10 = Complex.valueOf((-20.0));
      complex10.negate();
      Complex complex11 = Complex.INF;
      complex2.add(complex11);
      Complex complex12 = Complex.ZERO;
      complex12.toString();
      Complex complex13 = complex5.sqrt();
      complex7.sqrt();
      Complex.valueOf((-1.9841269659586505E-4), 0.006166101900447149);
      Complex complex14 = Complex.valueOf(0.5403023058681398);
      complex14.tanh();
      Complex.valueOf((-241.52622479), (-2015.3201));
      complex7.sqrt1z();
      complex8.getField();
      complex13.cosh();
      complex1.multiply((-241.52622479));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-3564.2291225255));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(547.815905118);
      Complex complex4 = complex2.add((-4044.92));
      complex1.isInfinite();
      complex4.nthRoot(629);
      Complex complex5 = complex1.pow(complex4);
      complex3.atan();
      complex2.sinh();
      Complex complex6 = complex2.multiply(2583);
      Complex complex7 = new Complex((-3564.2291225255));
      complex7.subtract((-5.3086706437795354E-9));
      complex3.equals(complex2);
      complex1.reciprocal();
      complex6.log();
      complex5.pow((-1.1455271549574576E-7));
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = Complex.ONE;
      complex9.getArgument();
      complex8.tan();
      Complex complex10 = complex5.add(1.1752011936438014);
      complex0.cosh();
      Complex complex11 = Complex.NaN;
      complex11.cos();
      complex0.isNaN();
      complex10.multiply(1);
      complex0.sqrt1z();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex.valueOf(4589.945452, 463.0);
      Complex complex2 = new Complex(399.658205, 399.658205);
      complex2.ONE.sqrt1z();
      complex2.NaN.nthRoot(1503);
      complex2.sqrt1z();
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = Complex.valueOf(463.0);
      complex3.I.cosh();
      Complex complex5 = Complex.ZERO;
      complex5.subtract(921067.2836791243);
      complex5.pow(0.31845372915267944);
      complex2.tanh();
      complex2.divide((-1.1455271549574576E-7));
      complex1.exp();
      complex4.reciprocal();
      Complex complex6 = new Complex(399.658205, 1135.6469611259192);
      complex6.exp();
      complex4.multiply(1135.6469611259192);
      Complex complex7 = complex4.multiply(829);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-549.6977226885809));
      Complex complex1 = complex0.acos();
      complex0.ONE.readResolve();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.INF.sinh();
      complex3.sinh();
      complex2.sqrt1z();
      Complex complex5 = Complex.I;
      complex5.toString();
      Complex complex6 = complex5.tanh();
      complex6.cosh();
      Complex complex7 = Complex.valueOf((-1652.9328710093598));
      Complex complex8 = complex7.asin();
      complex1.divide((-549.6977226885809));
      Complex complex9 = complex4.divide(0.6911921501159668);
      complex0.log();
      complex3.getImaginary();
      complex4.equals(complex9);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.ONE.cos();
      Complex complex2 = complex0.ZERO.cosh();
      complex1.ZERO.nthRoot(1249);
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex3.NaN.cos();
      Complex complex4 = complex1.tan();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2015.3201), 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ONE.subtract(0.0);
      complex0.getReal();
      complex0.isInfinite();
      Complex complex5 = complex4.sin();
      complex4.hashCode();
      complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.createComplex((-593.232079), 0.0);
      complex6.I.nthRoot(1);
      complex5.abs();
      Complex complex7 = complex0.sin();
      complex1.NaN.atan();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.multiply(0.0);
      complex7.isNaN();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.log();
      complex1.conjugate();
      complex2.cosh();
      complex9.tanh();
      complex3.sqrt1z();
      complex10.getReal();
      Complex complex11 = Complex.valueOf((-1.2703728237858895E7), (-593.232079));
      complex8.pow(complex11);
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 1871.8682);
      complex1.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.pow(complex4);
      complex2.I.pow(complex5);
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = complex6.acos();
      complex3.multiply(0);
      complex8.divide(complex2);
      Complex complex9 = complex0.multiply(0);
      complex0.getField();
      Complex complex10 = Complex.INF;
      Object object0 = complex7.readResolve();
      complex2.equals(object0);
      Complex complex11 = complex4.conjugate();
      complex10.cosh();
      Complex complex12 = complex8.exp();
      Complex.valueOf((-2015.3201));
      Complex complex13 = complex7.multiply(complex2);
      complex10.pow(complex8);
      complex11.pow(0.0);
      complex13.subtract(complex12);
      complex9.getArgument();
      Complex complex14 = Complex.valueOf((-2389.072404830007), 1460.4974941084402);
      complex14.getReal();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-549.6977226885809));
      Complex complex1 = complex0.acos();
      Complex complex2 = (Complex)complex0.ONE.readResolve();
      Complex complex3 = complex1.INF.log();
      complex1.cosh();
      Complex complex4 = complex3.sin();
      complex4.getReal();
      complex2.conjugate();
      complex0.tanh();
      Complex complex5 = Complex.valueOf((-549.6977226885809), 837.794341928659);
      complex5.subtract((-4176.704286177598));
      Complex complex6 = Complex.valueOf(Double.NaN, (-549.6977226885809));
      complex1.multiply(complex2);
      complex5.sqrt1z();
      Complex complex7 = Complex.I;
      complex7.getReal();
      complex3.add(complex1);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.toString();
      Complex complex9 = complex6.conjugate();
      complex0.subtract(Double.NaN);
      complex9.multiply((-360.444));
      complex4.getReal();
      complex3.subtract(4784.9812819354);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.NaN.subtract(1.4615985810260016E275);
      complex0.getField();
      Complex complex3 = complex0.INF.subtract(0.0);
      complex3.multiply((-2493));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.multiply((double) (-2493));
      complex1.tanh();
      complex3.isInfinite();
      complex3.readResolve();
      complex7.divide(complex2);
      complex4.negate();
      Complex complex8 = Complex.valueOf(1.0, (-0.9999999999998977));
      complex8.add(complex4);
      complex2.toString();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex9.sqrt();
      Complex.valueOf(20.0, 20.0);
      complex6.tanh();
      Complex complex11 = Complex.valueOf(0.0, 20.0);
      complex11.sqrt1z();
      complex0.getField();
      complex10.cosh();
      complex0.multiply((-931.1));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex.valueOf(4589.945452, 463.0);
      Complex complex2 = new Complex(399.658205, 399.658205);
      complex2.ONE.sqrt1z();
      complex2.NaN.nthRoot(1503);
      Complex complex3 = complex0.multiply(1143);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.divide(4589.945452);
      complex6.readResolve();
      Complex complex7 = complex5.asin();
      complex1.sqrt1z();
      complex3.toString();
      complex7.multiply(complex3);
      Complex complex8 = complex5.atan();
      Complex complex9 = new Complex(182.21125758);
      Complex complex10 = complex9.sin();
      complex10.divide(complex0);
      complex1.sin();
      complex1.toString();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-549.6977226885809));
      Complex complex1 = complex0.acos();
      complex0.ONE.readResolve();
      Complex complex2 = complex1.INF.log();
      complex2.cosh();
      complex2.INF.sinh();
      complex0.INF.subtract((-2348.3313853255277));
      complex1.I.pow((-549.6977226885809));
      Complex complex3 = complex0.tanh();
      complex1.divide(1135.6469611259192);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.reciprocal();
      complex5.exp();
      complex0.multiply(1135.6469611259192);
      complex3.multiply(37);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.080639291795678E-30);
      Complex complex1 = complex0.exp();
      complex0.isInfinite();
      complex0.getArgument();
      Complex complex2 = complex1.add(complex0);
      complex2.I.sinh();
      Complex complex3 = complex2.NaN.multiply(2237);
      complex3.INF.nthRoot(2237);
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex4.ZERO.sinh();
      Complex complex7 = complex5.I.multiply(2237);
      Complex complex8 = complex6.NaN.subtract((-111.5812278176));
      complex8.isNaN();
      Complex complex9 = complex2.log();
      complex9.NaN.pow((double) 2237);
      complex6.I.reciprocal();
      Complex complex10 = complex9.tan();
      complex10.ONE.add(Double.POSITIVE_INFINITY);
      complex7.multiply(9);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2015.3201), 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.INF.cosh();
      Complex complex3 = complex0.ONE.subtract(0.0);
      complex0.getReal();
      complex0.isInfinite();
      Complex complex4 = complex3.sin();
      complex3.hashCode();
      Complex complex5 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.createComplex((-593.232079), 0.0);
      complex6.I.nthRoot(1);
      complex4.abs();
      Complex complex7 = complex0.sin();
      complex1.NaN.atan();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.multiply(0.0);
      complex5.divide(0.8414709848078965);
      complex0.exp();
      Complex complex9 = new Complex((-1261.095963642553), 1.2089499614376109E-4);
      complex9.reciprocal();
      Complex complex10 = complex5.exp();
      complex7.multiply(1.2089499614376109E-4);
      complex10.multiply(37);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.510567165169581E-4);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(9.510567165169581E-4);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.multiply(complex4);
      complex5.conjugate();
      Complex complex6 = complex5.add(complex0);
      complex2.isNaN();
      Complex.valueOf((-529.6388773), (-5251.03719484));
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = complex4.createComplex(1223.388695425492, 1223.388695425492);
      Complex complex9 = complex8.cos();
      complex3.atan();
      complex7.multiply((-11));
      complex9.negate();
      complex9.conjugate();
      complex6.tan();
      Complex.valueOf(147.8908169728);
      complex7.hashCode();
      complex2.add(1.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-3564.2291225255));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(547.815905118);
      Complex complex4 = complex2.add((-4044.92));
      complex1.isInfinite();
      complex4.INF.sin();
      complex1.getReal();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.ONE.tanh();
      complex6.subtract(Double.NaN);
      Complex complex7 = Complex.valueOf((-1283.7146881967246), (-360.444));
      complex7.ZERO.multiply(complex1);
      complex7.I.sqrt1z();
      complex2.getReal();
      complex4.add(complex1);
      Complex.valueOf(2358.240783509043);
      complex3.toString();
      Complex complex8 = complex3.conjugate();
      complex4.INF.reciprocal();
      complex2.subtract(2.0);
      complex4.multiply(2.0);
      complex0.getReal();
      complex4.subtract(243.372398);
      complex8.createComplex((-1.5707963267948966), (-2.5098934806904326E-241));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.NaN.subtract(1.4615985810260016E275);
      complex0.getField();
      Complex complex3 = complex0.INF.subtract(0.0);
      complex3.multiply((-2493));
      Complex complex4 = complex0.negate();
      complex0.ONE.sqrt1z();
      Complex complex5 = complex0.divide(0.0);
      complex4.NaN.readResolve();
      Complex complex6 = complex4.asin();
      complex6.ONE.sqrt1z();
      complex4.toString();
      Complex complex7 = complex4.multiply(complex6);
      Complex complex8 = complex7.atan();
      complex8.divide(1.4615985810260016E275);
      complex1.log();
      Complex complex9 = new Complex(1.4615985810260016E275, (-407.061092));
      complex9.getImaginary();
      Complex complex10 = new Complex((-407.061092));
      complex5.equals(complex10);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2015.3201), 0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ONE.subtract(0.0);
      complex0.getReal();
      complex0.isInfinite();
      Complex complex5 = complex4.sin();
      complex4.hashCode();
      Complex complex6 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.createComplex((-593.232079), 0.0);
      complex7.I.nthRoot(1);
      complex5.abs();
      Complex complex8 = complex0.sin();
      complex1.NaN.atan();
      Complex complex9 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.multiply(0.0);
      complex4.getField();
      Complex complex11 = complex4.sinh();
      complex11.equals(complex6);
      complex9.NaN.conjugate();
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex9.exp();
      Complex complex14 = Complex.valueOf((-593.232079));
      complex1.multiply(complex14);
      complex11.pow(complex8);
      complex13.pow(0.8414709848078965);
      Complex complex15 = complex3.subtract(complex5);
      complex15.INF.getArgument();
      complex12.getReal();
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.subtract(1772.58);
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.asin();
      Complex.valueOf(1747.347691612871, (-409.1814609));
      complex2.nthRoot(17);
      complex0.getField();
      complex5.ONE.createComplex((-1597.49631344667), 0.0);
      Complex complex6 = complex0.atan();
      complex6.ONE.subtract((-1693.8546015338081));
      Complex complex7 = complex6.atan();
      complex0.NaN.readResolve();
      Complex complex8 = complex4.ZERO.subtract(complex6);
      Complex complex9 = complex5.INF.cosh();
      Complex complex10 = Complex.valueOf(1747.347691612871, 1747.347691612871);
      complex9.pow(complex10);
      complex9.ZERO.sqrt();
      Complex.valueOf((double) 17, (-504.527309));
      complex5.cosh();
      complex9.ZERO.add(complex7);
      complex3.hashCode();
      complex8.I.log();
      Complex complex11 = complex1.multiply(complex2);
      complex11.acos();
      complex9.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.NaN.divide(1932.0);
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.add(complex0);
      // Undeclared exception!
      complex2.nthRoot(5217);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.I.subtract(20.0);
      complex0.equals("}");
      complex0.isInfinite();
      complex0.toString();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.INF.divide(complex4);
      complex5.getImaginary();
      Complex complex7 = complex5.NaN.sinh();
      complex0.getReal();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.NaN.multiply(complex4);
      Complex complex11 = complex10.I.divide(complex8);
      complex3.INF.tan();
      complex4.reciprocal();
      Complex complex12 = complex5.sqrt1z();
      complex6.ONE.multiply(1407);
      complex12.NaN.createComplex((-626.03), 20.0);
      complex2.subtract(16.089516);
      complex2.sqrt1z();
      complex3.toString();
      complex3.cos();
      complex3.sqrt1z();
      complex11.getImaginary();
      complex4.createComplex(3.845192807999274E-10, 20.0);
      complex12.getReal();
      complex6.subtract(2106.3260884528654);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.ONE.cos();
      complex0.ZERO.cosh();
      complex1.ZERO.nthRoot(1249);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex3.NaN.cos();
      Complex complex4 = complex1.tan();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-549.6977226885809));
      Complex complex1 = complex0.acos();
      complex0.ONE.readResolve();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ZERO.cos();
      complex2.INF.sinh();
      complex3.INF.subtract((-2348.3313853255277));
      complex1.I.pow((-549.6977226885809));
      Complex complex4 = complex0.tanh();
      complex1.divide(1135.6469611259192);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.reciprocal();
      complex6.exp();
      complex0.multiply(1135.6469611259192);
      complex4.multiply(37);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.5057345628738403);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex1.ZERO.sqrt();
      complex4.I.pow(complex3);
      complex4.NaN.reciprocal();
      complex4.ONE.nthRoot(2425);
      complex0.toString();
      Complex complex6 = complex2.multiply((-692.2566));
      Complex complex7 = complex6.multiply((-692.2566));
      complex7.I.add(complex0);
      Complex complex8 = complex2.pow(0.0);
      Complex complex9 = Complex.valueOf((-50.3995));
      Complex complex10 = complex9.ONE.createComplex(1356.216915, 2425);
      Complex complex11 = complex10.ONE.divide(3760.43395832968);
      complex11.I.sqrt();
      complex8.multiply(1);
      complex5.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-3564.2291225255));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(547.815905118);
      Complex complex4 = complex2.add((-4044.92));
      complex1.isInfinite();
      Complex complex5 = complex2.NaN.cosh();
      complex5.INF.sin();
      complex1.getReal();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.ONE.tanh();
      complex7.subtract(Double.NaN);
      Complex complex8 = Complex.valueOf((-1283.7146881967246), (-360.444));
      complex8.ZERO.multiply(complex1);
      complex8.I.sqrt1z();
      complex2.getReal();
      complex4.add(complex1);
      Complex.valueOf(2358.240783509043);
      complex3.toString();
      complex3.conjugate();
      complex2.subtract(2.0);
      complex4.multiply((-896.3));
      complex0.getReal();
      complex4.subtract(243.372398);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.exp();
      complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
      complex0.abs();
      Complex complex2 = complex1.NaN.sin();
      complex2.ONE.sqrt1z();
      complex2.NaN.sqrt1z();
      complex1.NaN.sinh();
      complex2.I.getArgument();
      complex2.INF.cosh();
      Complex complex3 = complex0.add(0.0);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.atan();
      complex5.acos();
      complex0.negate();
      complex3.divide((-39.44240350154));
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1078.264), 1955.4626448);
      complex1.I.asin();
      Complex complex2 = Complex.valueOf((-1078.264));
      Complex complex3 = complex2.NaN.subtract(complex0);
      complex2.ZERO.pow(complex3);
      Complex complex4 = new Complex((-1078.264), (-1078.264));
      complex4.INF.hashCode();
      Complex complex5 = complex0.add(complex4);
      complex5.ONE.createComplex(Double.NaN, 3503.937308412);
      Complex.valueOf(3503.937308412);
      complex4.ZERO.getField();
      Complex complex6 = complex0.ZERO.cosh();
      complex6.I.readResolve();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex5.tan();
      complex9.toString();
      complex9.ZERO.multiply(complex8);
      Complex complex10 = complex9.reciprocal();
      complex10.tan();
      complex7.ZERO.getField();
      complex2.sqrt();
      complex0.negate();
      complex7.reciprocal();
      complex1.log();
      complex6.getReal();
      Complex.valueOf((-2332.824086));
      complex1.isInfinite();
      Complex.valueOf((-1373.55627157), 0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1409.3);
      Complex complex1 = complex0.NaN.subtract(Double.NaN);
      Complex complex2 = Complex.valueOf(1409.3);
      complex2.abs();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.I.multiply(Double.NaN);
      complex5.sin();
      complex0.tanh();
      Complex complex6 = complex3.sqrt();
      complex6.NaN.conjugate();
      complex6.ONE.negate();
      complex6.NaN.getArgument();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex5.cos();
      complex6.NaN.createComplex(1409.3, 0.0);
      Complex complex9 = complex8.NaN.atan();
      complex9.ONE.multiply(1552);
      Complex complex10 = complex1.add(complex5);
      complex2.acos();
      Complex.valueOf(0.12038381397724152, 0.12038381397724152);
      Complex complex11 = complex3.add(0.12038381397724152);
      complex7.getArgument();
      complex11.getReal();
      complex5.negate();
      Complex.valueOf(Double.NaN);
      complex3.getImaginary();
      complex5.add(complex10);
      complex1.getArgument();
      complex6.acos();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(0.0);
      complex1.NaN.subtract(1.4615985810260016E275);
      complex0.getField();
      Complex complex2 = complex0.INF.subtract(0.0);
      complex2.multiply((-2493));
      Complex complex3 = complex0.negate();
      complex0.ONE.sqrt1z();
      complex0.divide(0.0);
      complex3.NaN.readResolve();
      Complex complex4 = complex3.asin();
      complex4.ONE.sqrt1z();
      complex3.toString();
      Complex complex5 = complex3.multiply(complex4);
      complex5.atan();
      Complex complex6 = complex2.sin();
      complex6.ONE.divide(complex0);
      complex3.sin();
      complex4.toString();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-56.209226));
      Complex complex1 = Complex.valueOf(870.14768989);
      Complex complex2 = complex0.add((-56.209226));
      Complex complex3 = complex2.ONE.subtract(870.14768989);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex1.INF.createComplex(0.0, 494.82797);
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex0.sqrt1z();
      complex1.INF.toString();
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex8.cosh();
      complex0.INF.asin();
      complex1.divide((-1652.9328710093598));
      complex3.divide((-2584.013047));
      complex9.log();
      complex6.getImaginary();
      complex10.equals(complex5);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ZERO.divide(2555.0229841);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.NaN.sqrt();
      complex5.ZERO.hashCode();
      complex1.ZERO.cosh();
      Complex complex6 = complex4.cos();
      complex1.abs();
      complex2.equals(complex0);
      Complex.valueOf(0.0, 0.0);
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.acos();
      complex4.NaN.createComplex(0.0, 7.200489472E10);
      complex2.ONE.readResolve();
      complex0.INF.getArgument();
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = complex7.NaN.reciprocal();
      complex8.ONE.cosh();
      complex8.ZERO.conjugate();
      complex5.hashCode();
      Complex complex9 = complex0.log();
      Complex complex10 = complex9.ONE.pow(complex1);
      complex10.INF.toString();
      Complex complex11 = complex5.tan();
      Complex complex12 = complex0.subtract(0.0);
      complex12.ONE.cosh();
      Complex complex13 = complex3.negate();
      Complex complex14 = complex13.add(0.7853981633974483);
      complex12.sin();
      Complex complex15 = complex11.pow(4391.7495);
      complex9.toString();
      complex4.sin();
      Complex complex16 = complex15.asin();
      complex3.reciprocal();
      complex4.acos();
      Complex complex17 = complex4.divide(4391.7495);
      complex17.INF.tan();
      complex14.getArgument();
      complex16.getField();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(682.44121516);
      complex0.pow(complex1);
      complex0.getReal();
      Complex complex2 = Complex.valueOf(13.6781);
      complex2.getImaginary();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.080639291795678E-30);
      Complex complex1 = complex0.exp();
      complex0.isInfinite();
      complex0.getArgument();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.NaN.multiply(2237);
      complex4.INF.nthRoot(2237);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex5.ZERO.sinh();
      Complex complex8 = complex6.I.multiply(2583);
      Complex complex9 = complex7.NaN.subtract((-111.5812278176));
      complex2.equals(complex1);
      complex1.INF.reciprocal();
      Complex complex10 = complex2.log();
      complex10.NaN.pow((double) 2583);
      complex7.I.reciprocal();
      complex1.I.getArgument();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex11.ONE.add(Double.POSITIVE_INFINITY);
      complex12.ZERO.cosh();
      Complex complex13 = complex7.cos();
      complex13.isNaN();
      complex3.multiply(1);
      complex8.sqrt1z();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ONE.multiply((-551));
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.cosh();
      complex0.hashCode();
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex2.INF.tan();
      complex7.NaN.getField();
      Complex complex9 = complex8.NaN.sin();
      complex9.INF.acos();
      complex7.I.getArgument();
      complex1.NaN.multiply((-3429));
      complex6.NaN.readResolve();
      Complex complex10 = complex6.sqrt1z();
      complex6.sinh();
      complex10.NaN.getField();
      complex10.I.hashCode();
      complex3.getReal();
      complex5.I.sqrt();
      complex5.abs();
      complex0.isInfinite();
      complex5.multiply(complex3);
      complex2.exp();
      Complex complex11 = complex6.createComplex((-551), 0.0);
      complex5.readResolve();
      complex9.negate();
      complex7.multiply(58);
      try { 
        complex11.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1052.02650658), (-442.3433121433));
      Complex complex1 = complex0.I.exp();
      complex0.tan();
      complex1.NaN.log();
      Complex complex2 = complex0.atan();
      complex0.I.asin();
      complex0.getField();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.add(complex3);
      complex3.cosh();
      complex3.cos();
      complex2.ONE.pow((-1197.41));
      complex1.subtract(2902.506);
      complex1.acos();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.readResolve();
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.log();
      complex2.createComplex(2152.028, 2152.028);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.reciprocal();
      complex3.readResolve();
      complex5.NaN.multiply(0.0);
      Complex complex7 = complex6.sqrt1z();
      complex6.I.sinh();
      complex4.cosh();
      complex0.exp();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex3.log();
      complex9.getField();
      complex3.multiply(complex5);
      Complex complex10 = complex4.subtract(complex5);
      complex10.ZERO.sin();
      Complex complex11 = complex6.ZERO.reciprocal();
      complex3.getField();
      complex4.getReal();
      Complex complex12 = complex6.negate();
      complex3.atan();
      complex7.getArgument();
      complex8.exp();
      complex11.add(Double.NaN);
      complex3.exp();
      complex12.multiply(0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.pow(1486.0);
      complex2.atan();
      Complex complex3 = complex2.NaN.cosh();
      complex0.toString();
      Complex complex4 = complex1.tanh();
      complex4.ZERO.cosh();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.log();
      complex1.getImaginary();
      complex4.readResolve();
      complex5.atan();
      Complex.valueOf(1486.0, (-379.0497731));
      complex3.subtract(Double.NaN);
      complex1.tan();
      complex6.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.divide(6.283185307179586);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex2.I.multiply(complex4);
      complex5.I.multiply(complex3);
      complex2.ZERO.hashCode();
      complex1.getField();
      complex2.ZERO.nthRoot(548);
      complex4.createComplex(6.283185307179586, 0.9974949359893799);
      Complex complex6 = complex0.tan();
      complex6.ONE.sqrt1z();
      Complex complex7 = new Complex(0.0, 0.0);
      complex1.equals(complex7);
      complex0.sqrt1z();
      complex0.abs();
      complex4.readResolve();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      complex0.ZERO.tanh();
      Complex.valueOf(4589.945452, 463.0);
      Complex complex1 = new Complex(399.658205, 399.658205);
      Complex complex2 = complex1.ONE.sqrt1z();
      complex1.NaN.nthRoot(1503);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex4.INF.multiply(2.0);
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex4.ONE.createComplex(399.658205, 2.0);
      complex7.ONE.sinh();
      complex3.atan();
      complex7.ZERO.multiply(1.0);
      complex4.NaN.tanh();
      complex0.isInfinite();
      complex0.ONE.readResolve();
      complex3.divide(complex5);
      complex4.negate();
      Complex complex8 = complex1.add(complex2);
      complex6.toString();
      Complex complex9 = complex6.sqrt();
      complex9.ONE.sqrt();
      Complex.valueOf(1.0, 2.0);
      complex6.ZERO.tanh();
      Complex.valueOf(399.658205, 1065.850068);
      complex9.sqrt1z();
      complex8.getField();
      complex9.cosh();
      complex8.multiply(1065.850068);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = Complex.NaN;
      complex1.acos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.pow(complex1);
      complex4.INF.cos();
      complex2.getField();
      complex0.asin();
      complex3.nthRoot(394);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.createComplex(2704.675242948, 2704.675242948);
      Complex complex6 = complex5.ONE.pow(complex3);
      complex5.ZERO.cos();
      complex6.ZERO.createComplex(2747.5, 0.0);
      complex2.getReal();
      complex2.reciprocal();
      complex4.multiply(0.8414709848078965);
      try { 
        complex4.nthRoot((-2578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,578
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.abs();
      Complex complex2 = Complex.valueOf((-1.3902314592614197E-7), 1478.0);
      complex0.subtract(complex2);
      complex1.sqrt1z();
      complex2.multiply(0);
      complex1.divide(983.70431491);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(3377.1400640471);
      complex0.toString();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      complex0.NaN.readResolve();
      complex0.ONE.createComplex((-20.0), 0.0);
      Complex complex1 = complex0.tan();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.ONE.add((double) (-368));
      try { 
        complex1.INF.nthRoot((-368));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -368
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex2.I.pow(complex5);
      complex1.multiply(0.0);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex3.multiply(0);
      complex8.divide(complex2);
      complex0.multiply(0);
      complex2.isNaN();
      complex3.exp();
      Complex complex10 = complex9.log();
      complex9.conjugate();
      complex4.cosh();
      complex0.tanh();
      complex3.sqrt1z();
      complex10.getReal();
      complex4.pow(complex2);
      complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4135.820529));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-5528.717959192615), (-1049.8389));
      complex4.INF.pow(complex1);
      Complex complex5 = complex3.INF.multiply(529.6388773);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.I.exp();
      Complex complex8 = complex3.multiply(complex5);
      complex8.NaN.conjugate();
      complex8.ONE.add(complex5);
      complex1.isNaN();
      Complex complex9 = Complex.valueOf(529.6388773, 6.283185307179586);
      complex9.INF.multiply(complex0);
      complex9.createComplex(461.18391157908746, 1627.5239);
      Complex complex10 = complex5.cos();
      Complex complex11 = complex9.atan();
      complex11.ONE.multiply((-11));
      complex2.negate();
      complex10.conjugate();
      complex0.I.tan();
      Complex.valueOf(147.8908169728);
      complex7.hashCode();
      complex3.add(529.6388773);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      complex1.ZERO.negate();
      complex1.ZERO.subtract(1.0);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.NaN.reciprocal();
      complex1.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex2.asin();
      complex4.add(complex3);
      complex1.NaN.divide(complex0);
      complex0.ONE.abs();
      Complex complex5 = complex0.pow((-1399.8655819062));
      Complex complex6 = complex5.createComplex((-1399.8655819062), 0.0);
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex7.INF.divide(complex6);
      complex0.getImaginary();
      Complex complex9 = complex5.multiply((-1));
      complex9.INF.cos();
      Complex.valueOf(0.0);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.sqrt1z();
      double double0 = 20.0;
      Complex complex2 = complex0.multiply(20.0);
      Complex complex3 = complex2.INF.tan();
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3465.8124846852184));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.asin();
      complex2.getArgument();
      complex1.ZERO.hashCode();
      complex1.INF.getArgument();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex5.INF.exp();
      complex0.getField();
      Complex complex7 = complex5.subtract((-3465.8124846852184));
      complex5.INF.divide(complex0);
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex8.NaN.subtract((-1.0));
      Complex complex10 = complex0.createComplex((-3465.8124846852184), 0.7853981633974483);
      Complex complex11 = complex6.log();
      Complex complex12 = complex2.ONE.negate();
      Complex complex13 = complex11.multiply(0);
      Complex complex14 = complex10.I.divide((-3465.8124846852184));
      assertEquals(-0.0, complex14.getReal(), 0.01);
      
      double double0 = complex13.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex15 = complex11.sqrt1z();
      Complex complex16 = complex13.I.divide(complex9);
      double double1 = complex2.abs();
      assertEquals(2.9540672367124112, double1, 0.01);
      
      Complex complex17 = complex4.tanh();
      assertEquals((-347.97891836512105), complex4.getImaginary(), 0.01);
      assertTrue(complex17.equals((Object)complex12));
      
      complex0.cosh();
      Complex complex18 = complex10.tanh();
      complex18.divide((double) 0);
      Complex complex19 = complex8.pow(Double.POSITIVE_INFINITY);
      assertEquals(3468.9531708868094, complex7.getReal(), 0.01);
      assertSame(complex19, complex15);
      
      complex0.sqrt1z();
      Complex complex20 = complex13.add(complex0);
      assertSame(complex20, complex16);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      complex0.I.hashCode();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.NaN;
      complex1.pow(complex2);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.pow(0.0);
      complex5.sinh();
      complex3.getImaginary();
      Complex complex6 = complex0.sinh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.divide(1.8178532123565674);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      complex2.getImaginary();
      assertNotSame(complex2, complex5);
      
      complex0.isNaN();
      assertTrue(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      double double0 = (-791.486332309);
      Complex complex0 = new Complex((-791.486332309));
      complex0.pow((-791.486332309));
      complex0.pow(1029.8);
      Complex complex1 = complex0.atan();
      try { 
        complex1.nthRoot((-4129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,129
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
