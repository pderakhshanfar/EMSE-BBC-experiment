/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:43:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf(1.557407724654902, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), 612.7697396840852);
      Complex complex1 = Complex.valueOf(3.060737220976933E-278, 3.060737220976933E-278);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sqrt1z();
      complex0.tan();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), 612.7697396840852);
      Complex complex1 = new Complex(612.7697396840852);
      Complex complex2 = complex0.sqrt1z();
      complex2.tan();
      complex2.multiply(3899);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), 612.7697396840852);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.add(complex0);
      complex1.subtract(complex3);
      complex2.tan();
      complex2.multiply((-2.0406580894051073E243));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), (-1869.5));
      Complex complex1 = complex0.createComplex((-2.0406580894051073E243), 24.58920177305309);
      complex0.divide(complex1);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.subtract((-2.0406580894051073E243));
      Complex complex4 = complex3.tan();
      complex2.reciprocal();
      Complex complex5 = complex2.tanh();
      complex5.pow(6.283185307179586);
      complex3.getImaginary();
      complex2.sin();
      complex0.nthRoot(3899);
      complex1.getArgument();
      complex5.asin();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2256.500440046656), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex1.I.atan();
      Complex complex2 = complex0.add(8.878766564983742E9);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2752.664924731, Double.NaN);
      complex0.add((-798.564228455));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex2.sqrt1z();
      complex0.conjugate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.cosh();
      complex6.tan();
      complex6.getField();
      complex3.readResolve();
      complex2.pow(complex1);
      complex4.exp();
      complex5.createComplex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex7 = Complex.NaN;
      complex7.subtract(7.93512149694629E-17);
      complex4.conjugate();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1465);
      complex0.I.divide((double) 1465);
      Complex.valueOf((double) 1465, (double) 1465);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex((-20.0), (-20.0));
      complex1.divide((-1575.2));
      complex2.tanh();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex0.ONE.pow(complex1);
      complex2.ZERO.createComplex(18.33395677323698, 18.33395677323698);
      Complex complex5 = complex3.ZERO.conjugate();
      Complex.valueOf((-6.938000231893302E137), 2463.588289570424);
      Complex complex6 = complex0.cosh();
      complex4.getReal();
      Complex complex7 = complex0.divide(complex3);
      complex7.cos();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex6.acos();
      complex9.negate();
      complex9.abs();
      complex3.multiply(2.0);
      complex5.divide(Double.POSITIVE_INFINITY);
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.ZERO;
      complex1.readResolve();
      Complex complex7 = complex4.negate();
      complex6.toString();
      complex3.isNaN();
      Complex complex8 = Complex.valueOf((-1.0), 20.0);
      complex1.cosh();
      complex7.getReal();
      Complex complex9 = new Complex((-1.0), (-1.0));
      complex0.divide(complex9);
      complex5.cos();
      Complex complex10 = Complex.ZERO;
      complex3.acos();
      Complex complex11 = complex0.negate();
      complex11.abs();
      complex8.multiply((-1.0));
      Complex complex12 = Complex.INF;
      complex12.divide(Double.NaN);
      complex5.multiply((-1310));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      complex2.ONE.reciprocal();
      complex0.equals(complex2);
      Complex complex3 = complex0.sqrt1z();
      complex1.NaN.tan();
      Complex complex4 = complex3.multiply((-459.656));
      Complex complex5 = complex4.ONE.add((-459.656));
      complex4.ZERO.cos();
      Complex complex6 = complex1.sin();
      complex6.I.atan();
      Complex complex7 = complex3.multiply((-3146));
      complex7.ZERO.getArgument();
      Object object0 = new Object();
      complex5.equals(object0);
      complex5.toString();
      complex4.getField();
      complex5.readResolve();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.negate();
      complex9.NaN.multiply(complex3);
      Complex complex10 = complex3.acos();
      Complex.valueOf(0.8528259335691418);
      complex10.sinh();
      complex5.createComplex(1739.0, (-3146));
      complex6.acos();
      complex8.acos();
      Complex.valueOf((-1.4673977248063559), 2.7532963354740994);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.equals(complex0);
      Complex complex2 = new Complex((-4137.53943413), 2760.94271048434);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.subtract(complex2);
      complex0.getArgument();
      Complex complex6 = complex4.atan();
      complex0.exp();
      Complex complex7 = complex0.tan();
      complex0.getArgument();
      Complex.valueOf(1.5707963267948966);
      complex7.readResolve();
      complex2.tanh();
      complex6.reciprocal();
      complex7.reciprocal();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.conjugate();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      Complex complex4 = complex2.NaN.negate();
      complex4.ZERO.toString();
      complex4.isNaN();
      Complex.valueOf(2.0, (-1.0));
      complex3.cosh();
      complex2.getReal();
      complex1.ZERO.divide(complex4);
      Complex complex5 = complex4.cos();
      Complex complex6 = Complex.ZERO;
      complex1.acos();
      complex3.negate();
      complex4.ONE.abs();
      complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.ZERO;
      complex7.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-20.0));
      complex0.pow(complex0);
      complex0.tan();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ZERO;
      complex2.readResolve();
      Complex complex3 = complex0.negate();
      complex1.toString();
      complex2.getField();
      complex0.equals(complex1);
      Complex complex4 = Complex.valueOf((-902.55333), (-734.3032821));
      complex3.cosh();
      complex4.getReal();
      complex4.divide(complex0);
      complex4.cos();
      Complex complex5 = complex3.sinh();
      Complex complex6 = Complex.ONE;
      complex6.acos();
      Complex complex7 = complex0.negate();
      complex7.abs();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex5.divide(0.6480542736638855);
      Complex.valueOf(0.11951763927936554);
      complex2.multiply((-902.55333));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.ZERO;
      complex1.readResolve();
      Complex complex6 = complex3.negate();
      complex0.toString();
      complex3.getField();
      Complex complex7 = Complex.valueOf((-136.828), (-136.828));
      complex7.equals(complex6);
      Complex.valueOf((-136.828), 2.0);
      complex3.cosh();
      complex6.getReal();
      Complex complex8 = complex2.divide(complex0);
      complex7.cos();
      complex4.sinh();
      complex6.acos();
      complex2.negate();
      complex8.abs();
      complex0.multiply(Double.NaN);
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.divide(1468.786474);
      Complex.valueOf(2.0);
      complex6.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      complex0.getField();
      complex0.reciprocal();
      Complex complex1 = Complex.ZERO;
      complex1.ONE.createComplex(2.0, Double.NaN);
      Complex complex2 = complex0.sinh();
      complex2.ONE.conjugate();
      complex0.multiply(37);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-328.0860701093));
      complex0.NaN.sqrt();
      Complex complex2 = complex1.divide((-4529.947519));
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.I.sinh();
      complex4.NaN.nthRoot(3878);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.multiply(complex5);
      complex1.I.hashCode();
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.add(1625.00338);
      complex2.abs();
      Complex complex9 = complex0.multiply((-328.0860701093));
      complex9.INF.divide((-2198.30815));
      complex9.NaN.abs();
      Complex complex10 = complex8.sinh();
      complex10.cosh();
      Complex complex11 = Complex.valueOf((-1.1255706987475148E-9), 3.104297782658242E26);
      complex11.createComplex(20.0, 3179.7836097793);
      complex7.sinh();
      complex8.sqrt();
      complex3.sqrt();
      Complex complex12 = complex3.tanh();
      complex12.I.subtract(complex1);
      complex3.add((-328.0860701093));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.createComplex((-1869.5), (-2.0406580894051073E243));
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex1.sqrt1z();
      complex4.INF.subtract((-1869.5));
      complex4.tan();
      complex2.reciprocal();
      complex2.tanh();
      complex3.pow(6.283185307179586);
      complex0.getImaginary();
      complex2.sin();
      complex3.nthRoot(3899);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4111.593342918);
      Complex complex1 = complex0.negate();
      complex1.I.sqrt1z();
      Complex.valueOf(0.0);
      complex1.isNaN();
      // Undeclared exception!
      complex0.ONE.nthRoot(1518500250);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      complex0.getField();
      Complex complex1 = complex0.createComplex((-2.0406580894051073E243), (-2.0406580894051073E243));
      complex0.divide(complex1);
      complex0.sqrt1z();
      complex1.reciprocal();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.divide((-2.0406580894051073E243));
      complex2.multiply((-2.0406580894051073E243));
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.createComplex((-1869.5), (-2.0406580894051073E243));
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.reciprocal();
      complex3.tanh();
      complex5.pow((-2.0406580894051073E243));
      complex4.acos();
      complex6.acos();
      Complex complex7 = Complex.I;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-1812.03));
      complex1.NaN.cos();
      complex0.readResolve();
      complex0.getField();
      Complex complex2 = complex0.add(2.5187968110874885E-38);
      complex2.INF.tan();
      Complex complex3 = complex2.NaN.subtract((-1812.03));
      Complex complex4 = complex2.NaN.asin();
      complex4.ONE.toString();
      Complex complex5 = complex2.sqrt1z();
      complex2.toString();
      Complex complex6 = complex0.asin();
      complex6.INF.sin();
      complex3.divide(complex2);
      Complex complex7 = complex5.sinh();
      complex7.ZERO.negate();
      complex4.divide((-2836.0));
      complex1.log();
      complex5.nthRoot(1137);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.conjugate();
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      Complex complex4 = complex2.NaN.negate();
      complex4.ZERO.toString();
      Complex complex5 = complex4.NaN.conjugate();
      complex5.I.getField();
      complex2.equals(object0);
      Complex.valueOf(2.0, (-2.2459278245511554));
      complex3.cosh();
      complex2.getReal();
      complex1.ZERO.divide(complex4);
      Complex complex6 = complex4.cos();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.sinh();
      Complex complex8 = complex6.acos();
      complex8.multiply(1297);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = complex2.NaN.negate();
      complex5.ZERO.toString();
      Complex complex6 = complex5.NaN.conjugate();
      complex6.I.getField();
      complex2.equals(complex4);
      Complex.valueOf(2.0, (-1.0));
      complex3.cosh();
      complex2.getReal();
      complex1.ZERO.divide(complex5);
      Complex complex7 = complex5.cos();
      complex1.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-3300.9622581));
      complex4.getField();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex7.reciprocal();
      complex8.hashCode();
      complex5.NaN.multiply(4757);
      complex2.abs();
      complex6.multiply((-1.0));
      complex9.divide(complex0);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = new Complex(4236.32, 2947.15);
      Complex complex2 = Complex.valueOf(2947.15);
      complex2.cos();
      Complex complex3 = complex1.multiply((-2654));
      complex2.nthRoot(2075);
      complex3.hashCode();
      complex3.subtract(826.3291);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.multiply((-2654));
      complex0.sinh();
      Complex complex6 = Complex.ONE;
      complex6.add(complex3);
      complex1.getArgument();
      Complex complex7 = Complex.ONE;
      complex7.I.exp();
      complex7.I.getArgument();
      complex7.asin();
      complex5.tanh();
      complex6.createComplex((-168.66397), (-2654));
      complex2.add(711.675832964);
      complex1.pow(4.450911080336422E-139);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-3179.028));
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(Double.NaN, (-3179.028));
      Complex complex3 = complex1.multiply(complex2);
      complex3.isNaN();
      complex2.sqrt();
      complex1.tan();
      complex2.nthRoot(2037);
      complex0.getArgument();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.createComplex((-1869.5), (-2.0406580894051073E243));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.valueOf((-2.0406580894051073E243));
      complex6.subtract(complex3);
      complex4.getField();
      Complex.valueOf((-2.0406580894051073E243), Double.NaN);
      complex4.conjugate();
      Object object0 = complex5.readResolve();
      complex6.equals(object0);
      Complex complex7 = new Complex(0.4770587682723999, (-1869.5));
      complex2.cos();
      complex0.sqrt();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 2.8844319473099593E-139);
      Complex complex1 = complex0.tanh();
      complex0.INF.pow(complex1);
      complex1.INF.getField();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.sqrt1z();
      complex4.acos();
      Complex.valueOf(2.8844319473099593E-139, (-926.699118871491));
      complex0.sinh();
      Complex complex5 = complex4.negate();
      complex5.subtract(complex0);
      Complex complex6 = complex2.log();
      complex3.getField();
      Complex complex7 = Complex.valueOf(1155.0, (double) (-4325));
      Complex complex8 = complex7.conjugate();
      complex4.asin();
      complex6.tanh();
      complex8.createComplex(1155.0, (-1.0));
      complex7.add((-926.699118871491));
      complex4.pow((double) (-4325));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(412);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.cosh();
      complex3.add(complex2);
      complex0.getArgument();
      complex3.asin();
      Complex complex5 = complex3.tanh();
      complex0.createComplex(1.5707963267948966, 1.83211088180542);
      complex4.add((-4.191810118556531E-11));
      complex5.pow(1.83211088180542);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = new Complex((-475.263), (-475.263));
      complex0.ONE.pow(218.098);
      Complex.valueOf((-475.263));
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.ONE.multiply((-2654));
      complex3.nthRoot(2075);
      complex1.hashCode();
      Complex complex4 = complex0.asin();
      complex4.getArgument();
      complex0.sinh();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 2.8844319473099593E-139);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ZERO;
      complex1.readResolve();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.NaN;
      complex4.toString();
      complex4.conjugate();
      complex1.getField();
      complex4.equals(complex3);
      Complex complex5 = Complex.valueOf(2.8844319473099593E-139, (-1.0));
      Complex complex6 = complex0.divide(complex0);
      Complex complex7 = complex4.cos();
      complex5.sinh();
      Complex complex8 = Complex.INF;
      complex8.acos();
      complex7.negate();
      complex6.abs();
      Complex complex9 = complex5.multiply(2.8844319473099593E-139);
      Complex complex10 = complex4.divide(1699.67);
      Complex.valueOf(2.0);
      complex6.getImaginary();
      complex5.sin();
      complex1.getField();
      complex1.readResolve();
      complex9.cosh();
      complex8.isNaN();
      complex3.asin();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1600.52402216));
      complex0.ZERO.getArgument();
      complex0.equals("");
      Complex complex1 = Complex.valueOf((-475.263), 0.0020996755805893557);
      Complex complex2 = complex1.cosh();
      complex1.getReal();
      Complex complex3 = complex1.divide(complex2);
      complex0.cos();
      complex1.sinh();
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.valueOf((-475.263), (-475.263));
      complex2.getField();
      complex3.conjugate();
      complex5.equals("");
      Complex complex6 = Complex.I;
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.conjugate();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      Complex complex4 = complex2.NaN.negate();
      complex4.ZERO.toString();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = new Complex(1496.918, (-1.5672616810047122E133));
      complex6.ZERO.log();
      complex6.add(1496.918);
      complex5.multiply(1496.918);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.799340708992666E66, 2.799340708992666E66);
      Complex complex1 = complex0.I.pow(3283.58030735);
      complex0.I.toString();
      complex1.getField();
      Complex complex2 = complex0.negate();
      complex2.sinh();
      Complex complex3 = complex2.sqrt1z();
      int int0 = 609;
      complex0.nthRoot(609);
      complex2.negate();
      Complex complex4 = Complex.valueOf(0.7493364694708156);
      complex4.tanh();
      int int1 = 1123;
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.createComplex((-1869.5), (-2.0406580894051073E243));
      Complex complex3 = complex1.divide(complex2);
      complex1.sqrt1z();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.tanh();
      complex3.pow(6.283185307179586);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.tanh();
      complex5.pow(complex1);
      complex4.toString();
      Complex complex8 = new Complex((-1869.5));
      complex8.tanh();
      complex6.tanh();
      complex7.acos();
      Complex.valueOf((-1646.0353786079475));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(1.690519881752762E7, 811.433906);
      complex1.equals(complex2);
      Complex.valueOf(0.0, (-7.159157201731446E-8));
      Complex complex3 = complex1.cosh();
      complex0.getReal();
      complex1.divide(complex3);
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.I;
      complex5.sinh();
      complex4.log();
      Complex complex6 = Complex.valueOf(2.0, 811.433906);
      complex1.getField();
      Complex complex7 = complex1.conjugate();
      complex7.equals(complex6);
      Complex complex8 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = new Complex((-475.263), (-475.263));
      Complex.valueOf((-475.263));
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.ONE.multiply((-2654));
      complex3.nthRoot(2075);
      complex1.hashCode();
      Complex complex4 = complex0.reciprocal();
      complex0.hashCode();
      complex2.abs();
      Complex complex5 = complex2.createComplex((-2.0406580894051073E243), 1.5430806348152437);
      complex0.divide(complex3);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex5.reciprocal();
      complex0.tanh();
      complex6.pow((-475.263));
      complex5.acos();
      Complex complex8 = Complex.valueOf((-475.263));
      Complex complex9 = complex8.tanh();
      complex3.pow(complex7);
      complex9.toString();
      complex4.tanh();
      complex6.tanh();
      complex9.acos();
      Complex.valueOf(688.76);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex((-527.86154106809), (-1566.40076492967));
      Complex complex3 = complex2.INF.createComplex(765.982, 765.982);
      Complex complex4 = complex3.NaN.createComplex(0.4500300884246826, 765.982);
      complex4.ONE.multiply(complex1);
      Complex complex5 = complex4.I.log();
      complex5.conjugate();
      complex0.ZERO.divide(complex2);
      Complex complex6 = complex0.add((-1576.2));
      complex6.NaN.sinh();
      complex2.I.hashCode();
      complex6.INF.toString();
      complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.add(complex0);
      complex1.conjugate();
      Complex complex3 = Complex.ZERO;
      complex1.readResolve();
      Complex complex4 = complex0.negate();
      complex0.toString();
      Complex complex5 = complex1.conjugate();
      complex0.getField();
      complex0.equals(complex5);
      Complex complex6 = Complex.valueOf((-355.5362306176), 0.539891242980957);
      Complex complex7 = complex2.cosh();
      complex7.getReal();
      Complex complex8 = complex6.divide(complex4);
      Complex complex9 = complex8.cos();
      complex3.sinh();
      complex7.acos();
      Complex complex10 = complex1.negate();
      complex0.abs();
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex6.divide((-1042.8133089));
      Complex complex11 = Complex.valueOf((-208.7));
      complex5.getImaginary();
      Complex complex12 = complex7.sin();
      complex4.getField();
      complex10.readResolve();
      complex8.cosh();
      complex12.isNaN();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-863.4231159));
      complex0.ZERO.abs();
      complex0.I.add(4802.0);
      Complex complex1 = new Complex(2.016113758087158, (-1474.0));
      Complex complex2 = Complex.valueOf((-1474.0));
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.ZERO;
      complex4.multiply((-2654));
      complex1.nthRoot(256);
      Complex.valueOf(1.0, (-20.0));
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = complex5.log();
      complex5.I.hashCode();
      complex3.nthRoot(423);
      Complex complex7 = complex5.subtract(complex1);
      complex2.pow(complex7);
      complex0.pow(complex3);
      complex2.subtract(complex3);
      complex6.acos();
      Complex complex8 = complex1.atan();
      complex8.sqrt1z();
      complex0.add(4802.0);
      complex6.log();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-863.4231159));
      Complex.valueOf((-863.4231159), 1.838233704586173E33);
      double double0 = 1884.4688995044498;
      Complex complex1 = Complex.valueOf(854.8077, 1884.4688995044498);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex0.conjugate();
      complex4.INF.multiply(2042);
      Complex complex5 = complex2.negate();
      complex3.exp();
      complex5.toString();
      Complex complex6 = null;
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.799340708992666E66, 2.799340708992666E66);
      Complex complex1 = complex0.I.pow(3283.58030735);
      complex0.I.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.I.divide(2.799340708992666E66);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.multiply(17);
      complex2.nthRoot(17);
      Complex complex7 = Complex.valueOf((double) 17, (-3974.486743));
      Complex complex8 = complex4.log();
      complex0.nthRoot(17);
      Complex complex9 = complex8.subtract(complex2);
      complex9.pow(complex7);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex5.pow(complex10);
      complex6.subtract(complex8);
      complex11.acos();
      Complex complex12 = complex8.atan();
      complex12.sqrt1z();
      complex2.add(1815.61442);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.conjugate();
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      Complex complex4 = complex2.NaN.negate();
      complex4.ZERO.toString();
      Complex complex5 = complex4.NaN.conjugate();
      complex5.I.getField();
      complex2.equals(object0);
      Complex.valueOf(2.0, (-1.0));
      Complex complex6 = complex3.cosh();
      complex2.getReal();
      complex1.ZERO.divide(complex4);
      complex4.cos();
      complex4.ZERO.sinh();
      complex1.log();
      Complex complex7 = Complex.valueOf(1.0, (-1.0));
      complex2.getField();
      complex5.conjugate();
      complex7.equals(complex6);
      Complex complex8 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2327.278942329591);
      Complex complex1 = complex0.NaN.subtract(2327.278942329591);
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ZERO.subtract(2731.8);
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(2731.8);
      complex3.sinh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.799340708992666E66, 2.799340708992666E66);
      Complex complex1 = complex0.I.pow(3283.58030735);
      complex0.I.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.I.divide(2.799340708992666E66);
      Complex complex4 = Complex.I;
      complex3.INF.readResolve();
      Complex complex5 = complex0.NaN.add(complex4);
      Complex complex6 = complex1.subtract((-3974.486743));
      Complex complex7 = Complex.valueOf((-2922.574), (-3974.486743));
      Complex complex8 = complex1.cos();
      complex8.cos();
      Complex complex9 = complex4.add((-2012.346997953942));
      complex5.divide(complex8);
      complex6.divide(complex9);
      Complex complex10 = complex2.cos();
      complex10.nthRoot(396);
      Complex complex11 = complex7.sqrt1z();
      complex0.getArgument();
      complex1.multiply(complex8);
      complex4.nthRoot(396);
      complex2.getArgument();
      complex4.abs();
      complex11.acos();
      try { 
        complex2.nthRoot((-3715));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,715
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-863.4231159));
      complex0.ZERO.abs();
      Complex.valueOf(0.0, 1.710461570253934E7);
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.exp();
      complex2.toString();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex3.multiply(1.0);
      complex4.abs();
      Complex complex8 = complex5.multiply(2299);
      Complex complex9 = Complex.I;
      complex9.isInfinite();
      complex8.isNaN();
      Complex complex10 = complex9.sinh();
      complex5.getReal();
      complex7.INF.add(0.0);
      complex8.getField();
      complex7.sin();
      complex4.conjugate();
      complex0.divide(complex10);
      complex0.negate();
      complex3.subtract(complex6);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      complex0.abs();
      complex0.abs();
      complex0.I.toString();
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 2.8844319473099593E-139);
      Complex complex1 = complex0.tanh();
      complex0.INF.pow(complex1);
      complex1.INF.getField();
      Complex complex2 = complex1.negate();
      complex2.sinh();
      Complex complex3 = complex1.sqrt1z();
      try { 
        complex3.ONE.nthRoot((-4325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,325
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-3179.028));
      complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf((-3179.028), (-3492.3));
      Complex complex3 = complex0.sinh();
      complex1.negate();
      Complex complex4 = complex3.log();
      complex2.getField();
      complex3.conjugate();
      complex0.equals(complex4);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.799340708992666E66, 2.799340708992666E66);
      Complex complex1 = complex0.I.pow(3283.58030735);
      complex0.I.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.I.divide(2.799340708992666E66);
      Complex complex4 = Complex.I;
      complex3.INF.readResolve();
      Complex complex5 = complex0.NaN.add(complex4);
      Complex complex6 = complex1.subtract((-3974.486743));
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = Complex.valueOf((-3300.9622581), (-1982.5));
      complex4.INF.cosh();
      Complex complex9 = complex3.reciprocal();
      complex9.NaN.hashCode();
      complex5.abs();
      Complex complex10 = complex1.createComplex((-1982.5), (-2.0406580894051073E243));
      Complex complex11 = complex10.divide(complex0);
      Complex complex12 = complex11.NaN.sqrt1z();
      complex12.ZERO.reciprocal();
      complex6.NaN.tanh();
      complex12.INF.pow((-3974.486743));
      complex7.acos();
      complex7.tanh();
      complex5.pow(complex2);
      complex0.toString();
      complex3.tanh();
      complex8.tanh();
      complex4.acos();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2327.278942329591);
      Complex complex1 = complex0.NaN.subtract(2327.278942329591);
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ZERO.subtract(2731.8);
      complex1.INF.readResolve();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1293.46017);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.pow(complex2);
      double double0 = (-1.7672547212604003E-8);
      Complex complex4 = complex3.INF.add((-1.7672547212604003E-8));
      complex4.I.tanh();
      complex4.NaN.subtract((-1.7672547212604003E-8));
      double double1 = (-908.037117);
      Complex complex5 = complex0.ONE.divide(0.0);
      complex5.I.abs();
      Complex complex6 = complex1.multiply((-908.037117));
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2478.248850156473);
      Complex complex0 = new Complex(0.0, (-2478.248850156473));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex.valueOf(0.0);
      complex2.ZERO.subtract(692.374);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.sinh();
      try { 
        complex4.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(805.968698, (-967.424));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.INF.add(0.0);
      complex3.INF.sqrt1z();
      complex0.multiply((-967.424));
      complex2.getImaginary();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = Complex.valueOf(554.798, 3799.37639774987);
      complex7.NaN.sin();
      complex2.readResolve();
      Complex complex8 = complex1.I.log();
      complex8.I.sinh();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex4.negate();
      Complex complex11 = complex9.subtract(0.0);
      complex6.multiply((-967.424));
      complex3.ONE.getArgument();
      Complex complex12 = complex4.divide(1061.006);
      complex12.ONE.createComplex((-1925.19), 805.968698);
      complex11.atan();
      complex10.getArgument();
      complex2.INF.readResolve();
      complex1.createComplex(1403.446068, (-1104.6505329));
      Complex complex13 = Complex.I;
      complex2.divide(complex13);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-2884.170175645));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.cosh();
      complex1.I.tanh();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      complex4.I.getArgument();
      Complex complex5 = complex4.ONE.sin();
      complex5.INF.readResolve();
      complex4.INF.hashCode();
      complex5.I.getArgument();
      complex5.I.conjugate();
      complex3.I.toString();
      complex3.isNaN();
      complex4.INF.multiply((-980));
      complex2.pow(complex0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.I.negate();
      Complex complex8 = complex6.conjugate();
      complex8.I.readResolve();
      Complex complex9 = complex6.sqrt1z();
      complex9.NaN.reciprocal();
      complex0.divide(complex4);
      Complex complex10 = complex5.negate();
      complex7.multiply((-959));
      complex9.negate();
      complex8.negate();
      complex10.add(20.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double double0 = (-1059.3016671645);
      Complex complex0 = Complex.valueOf((-1059.3016671645), (-1059.3016671645));
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.pow(Double.NaN);
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.acos();
      complex1.getArgument();
      complex2.sin();
      complex5.sin();
      complex3.add(891.52);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex2 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.INF.negate();
      complex3.ONE.exp();
      complex2.ZERO.toString();
      Complex complex6 = complex0.ZERO.subtract(complex2);
      Complex complex7 = complex6.ONE.multiply(0.0);
      complex7.ZERO.add(0.0);
      complex7.INF.abs();
      Complex complex8 = complex0.multiply((-708));
      complex8.isInfinite();
      complex1.isNaN();
      complex8.sinh();
      complex6.getReal();
      complex8.getField();
      complex3.sin();
      complex8.abs();
      Complex complex9 = complex6.conjugate();
      complex5.divide(complex7);
      complex9.negate();
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sinh();
      complex0.INF.hashCode();
      complex0.readResolve();
      Complex complex2 = complex1.exp();
      Complex.valueOf(0.0);
      complex1.INF.hashCode();
      double double0 = (-1041.0);
      complex2.subtract((-1041.0));
      Complex complex3 = complex0.ONE.divide(0.0);
      complex3.readResolve();
      complex1.nthRoot(218);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.cosh();
      complex4.ONE.sin();
      complex5.ZERO.reciprocal();
      Complex complex6 = complex4.tan();
      complex6.abs();
      complex2.getArgument();
      complex1.hashCode();
      Complex complex7 = complex0.subtract(complex1);
      complex7.INF.subtract(0.6816387176513672);
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      complex1.INF.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.createComplex((-790.30560874), (-790.30560874));
      Complex complex7 = complex6.INF.reciprocal();
      complex6.I.add(complex4);
      Complex complex8 = complex5.reciprocal();
      complex8.getArgument();
      Complex complex9 = complex3.NaN.createComplex((-790.30560874), (-790.30560874));
      Complex complex10 = complex4.multiply(0.0);
      Complex complex11 = complex10.INF.sin();
      complex11.ONE.conjugate();
      complex3.log();
      complex5.getReal();
      Complex complex12 = complex10.asin();
      complex12.I.tanh();
      Complex complex13 = complex2.log();
      complex8.toString();
      complex10.ONE.subtract(complex7);
      Complex complex14 = complex13.sin();
      complex14.I.getArgument();
      complex9.sqrt();
      complex3.multiply(complex5);
      complex9.add(complex7);
      complex14.log();
      complex8.createComplex(0.0, 1.5707963267948966);
      complex12.negate();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.conjugate();
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      Complex complex4 = complex2.NaN.negate();
      complex4.ZERO.toString();
      Complex complex5 = complex4.NaN.conjugate();
      complex5.I.getField();
      complex2.equals(object0);
      Complex.valueOf(2.0, (-1.0));
      complex3.cosh();
      complex2.getReal();
      Complex complex6 = complex1.ZERO.divide(complex4);
      Complex complex7 = complex4.cos();
      complex4.ZERO.sinh();
      Complex complex8 = complex1.acos();
      complex3.negate();
      complex4.ONE.abs();
      Complex complex9 = complex7.multiply(3166.2885);
      complex9.INF.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(2.0);
      complex8.getImaginary();
      complex6.sin();
      complex2.getField();
      complex1.readResolve();
      complex6.cosh();
      complex8.isNaN();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-115.476));
      Complex complex1 = complex0.I.sinh();
      complex0.INF.toString();
      complex1.tan();
      complex0.ONE.abs();
      Complex complex2 = complex1.INF.conjugate();
      complex0.pow(0.0);
      Complex complex3 = complex0.sqrt1z();
      complex3.NaN.negate();
      complex3.getReal();
      Complex complex4 = Complex.valueOf(115.48032982287504);
      complex2.sin();
      complex4.ZERO.log();
      Complex complex5 = complex1.multiply(complex2);
      complex4.readResolve();
      complex1.hashCode();
      complex5.createComplex(0.0, 115.48032982287504);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.ONE.multiply(0);
      complex3.NaN.multiply((double) 0);
      complex2.ONE.add(complex1);
      Complex.valueOf((-20.0), (-20.0));
      complex2.log();
      Complex complex4 = complex2.sin();
      complex4.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      complex1.ONE.createComplex(275.0243, 275.0243);
      complex0.NaN.cos();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(376.48745487823714, 376.48745487823714);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = new Complex(1236.833317);
      Complex complex5 = complex3.I.subtract(complex4);
      Complex complex6 = complex0.cos();
      complex6.ZERO.negate();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex7 = complex4.pow(2499.918108331);
      Complex complex8 = complex0.sqrt();
      complex8.INF.exp();
      Complex complex9 = Complex.valueOf(376.48745487823714, 1236.833317);
      complex9.ONE.tan();
      complex0.NaN.multiply(334);
      Complex complex10 = new Complex(2499.918108331, (-4037.393694553511));
      Complex complex11 = complex4.subtract(complex10);
      complex11.I.pow(complex5);
      Complex complex12 = new Complex(2499.918108331, (-4037.393694553511));
      complex12.ONE.conjugate();
      Complex complex13 = complex2.subtract(complex12);
      complex7.ONE.negate();
      Complex.valueOf(0.0, (double) 334);
      Complex complex14 = complex1.multiply(1);
      Complex complex15 = complex7.multiply(2499.918108331);
      complex15.sqrt();
      complex7.sinh();
      complex1.abs();
      complex4.add(complex13);
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide(0.24740394949913025);
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.I.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.NaN.atan();
      complex4.I.sqrt();
      Complex complex5 = complex3.divide((-20.0));
      complex0.ONE.tanh();
      Complex complex6 = complex3.ONE.add(0.0);
      Complex complex7 = complex0.ZERO.pow(complex3);
      Complex complex8 = complex5.NaN.atan();
      complex6.ZERO.getField();
      Complex complex9 = complex7.multiply(2095.53);
      Complex complex10 = complex9.I.sin();
      complex10.INF.pow(complex2);
      Complex complex11 = complex0.sqrt1z();
      complex3.INF.cos();
      complex0.readResolve();
      complex11.tan();
      complex5.I.multiply(1);
      complex6.toString();
      complex5.conjugate();
      Complex complex12 = complex6.pow(2095.53);
      complex12.getArgument();
      complex8.log();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(725.2);
      Complex complex3 = Complex.valueOf(725.2, 1787.942);
      complex2.NaN.sinh();
      Complex complex4 = complex1.I.reciprocal();
      complex0.divide(complex1);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.asin();
      complex3.I.asin();
      Complex complex7 = complex6.ZERO.multiply((-494.0));
      complex0.abs();
      Complex complex8 = complex3.cosh();
      complex6.hashCode();
      Complex complex9 = complex8.cosh();
      Complex complex10 = Complex.valueOf(725.2, 0.0);
      complex10.I.conjugate();
      complex10.I.cosh();
      Complex complex11 = complex8.negate();
      complex11.ONE.pow(complex2);
      complex11.I.subtract((-1559.4752624185253));
      Complex complex12 = complex0.atan();
      complex8.divide(0.0);
      complex8.sqrt1z();
      complex1.getImaginary();
      complex12.pow(complex9);
      complex7.equals(complex9);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(1325.72551141);
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.INF.cosh();
      complex3.INF.abs();
      complex0.ZERO.sin();
      Complex complex5 = Complex.valueOf(0.0, (-1387.556));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.I.pow(complex5);
      Complex complex8 = complex6.ONE.pow(complex0);
      Complex complex9 = complex8.conjugate();
      complex6.toString();
      complex8.subtract(complex5);
      complex8.hashCode();
      complex5.ONE.negate();
      complex3.multiply(0.0);
      Complex complex10 = complex7.tan();
      complex10.ZERO.getArgument();
      complex7.ZERO.log();
      complex4.add(0.11604541540145874);
      complex7.log();
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.tanh();
      complex0.subtract(0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4111.593342918);
      complex0.I.pow(4111.593342918);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.multiply(complex0);
      complex1.isNaN();
      complex2.sqrt();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex0.I.pow(complex1);
      complex2.ZERO.atan();
      complex1.abs();
      complex0.NaN.subtract(complex1);
      complex1.add(5509.0);
      Complex complex3 = complex0.sin();
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(7.524954624697075E109, 0.0);
      complex0.INF.reciprocal();
      complex0.conjugate();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.sqrt();
      complex1.ONE.hashCode();
      complex1.getImaginary();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.I.sin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.cosh();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1028.61489), (-1028.61489));
      Complex complex1 = complex0.ONE.sinh();
      complex1.ONE.getField();
      complex1.getArgument();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.multiply(complex0);
      complex4.cos();
      complex0.isNaN();
      complex2.abs();
      complex4.ONE.getArgument();
      complex0.abs();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex0.ZERO.subtract(6.283185307179586);
      complex0.getField();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.tanh();
      complex6.INF.subtract(complex0);
      complex2.abs();
      Complex complex7 = complex5.subtract(complex2);
      complex7.cosh();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.ONE.atan();
      Complex.valueOf(0.0);
      complex3.NaN.getField();
      Complex complex4 = complex0.sqrt1z();
      complex1.tanh();
      Complex complex5 = complex4.acos();
      complex4.isNaN();
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-729.872));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.ONE.divide((-729.872));
      complex0.readResolve();
      Complex complex5 = complex2.sqrt();
      complex2.NaN.divide(complex4);
      complex3.getArgument();
      Complex complex6 = complex5.asin();
      complex5.sin();
      Complex complex7 = complex5.multiply(complex6);
      complex6.hashCode();
      Complex complex8 = complex7.multiply((-729.872));
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.ZERO.sin();
      complex4.sqrt();
      complex4.ONE.tanh();
      Complex complex5 = complex1.ONE.acos();
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex5.I.divide(complex6);
      complex7.hashCode();
      complex2.tan();
      Complex complex8 = complex2.sinh();
      complex8.cos();
      complex1.equals(complex0);
      complex1.readResolve();
      int int0 = (-110);
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.multiply((-110));
      Complex complex11 = complex10.I.asin();
      try { 
        complex11.NaN.nthRoot((-110));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -110
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      complex1.NaN.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.pow((-987.2219));
      Complex complex4 = complex3.ZERO.add(0.0);
      complex2.ZERO.acos();
      Complex complex5 = complex4.sqrt1z();
      complex5.ZERO.abs();
      Complex complex6 = complex2.sqrt();
      complex0.hashCode();
      complex0.atan();
      complex6.NaN.readResolve();
      complex1.abs();
      complex6.acos();
      Complex complex7 = complex0.divide(0.0);
      complex7.NaN.toString();
      complex7.ONE.readResolve();
      complex3.readResolve();
      Complex complex8 = complex4.divide((-2086.0));
      complex8.sqrt();
      complex5.hashCode();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(1276.01, (-2041.294923));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.ONE.cos();
      complex4.INF.pow((-2041.294923));
      Complex complex5 = Complex.I;
      complex5.getField();
      complex5.tan();
      complex0.INF.hashCode();
      complex5.NaN.abs();
      Complex complex6 = complex0.subtract(complex5);
      Object object0 = new Object();
      complex0.I.getArgument();
      Complex complex7 = Complex.valueOf(0.0);
      Complex.valueOf(0.0, 1276.01);
      complex6.I.pow(complex7);
      complex0.equals(object0);
      complex5.getReal();
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex0.multiply(complex6);
      complex9.ONE.sqrt1z();
      complex1.hashCode();
      complex7.pow(4865.420707);
      complex8.negate();
      Complex complex10 = complex6.atan();
      complex10.INF.multiply(complex2);
      try { 
        complex3.nthRoot((-464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -464
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-863.4231159));
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.add(4802.0);
      Complex complex2 = complex0.negate();
      complex0.multiply(complex2);
      complex2.hashCode();
      Complex complex3 = new Complex((-863.4231159));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.sqrt();
      Complex complex8 = Complex.valueOf(2926.293004478131, (-2922.574));
      complex8.ONE.cos();
      complex4.ZERO.cos();
      Complex complex9 = complex2.I.add((-2922.574));
      complex5.ONE.divide(complex9);
      Complex complex10 = complex2.divide(complex6);
      complex10.cos();
      complex5.nthRoot(1);
      complex0.NaN.sqrt1z();
      complex2.getArgument();
      Complex complex11 = complex6.multiply(complex7);
      complex11.nthRoot(1);
      complex5.getArgument();
      complex1.abs();
      complex8.acos();
      complex5.nthRoot(151);
      Complex complex12 = complex4.log();
      complex12.INF.pow(4802.000104123281);
      complex2.add(complex3);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.885186277410878E-9));
      Complex complex1 = complex0.cosh();
      complex0.toString();
      complex0.NaN.multiply(complex1);
      Complex complex2 = Complex.valueOf(1508.6064408464617);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.INF.divide(complex1);
      complex4.pow(1508.6064408464617);
      Complex complex5 = complex2.ZERO.negate();
      complex3.NaN.sqrt();
      complex5.conjugate();
      complex5.I.divide(complex3);
      complex0.add((-563.9253571938));
      Complex complex6 = Complex.valueOf((-563.9253571938));
      Complex complex7 = new Complex(0.0, (-5.885186277410878E-9));
      complex6.ONE.multiply(complex7);
      complex1.readResolve();
      complex3.I.nthRoot(2555);
      Complex complex8 = complex1.log();
      complex2.reciprocal();
      complex8.readResolve();
      Complex.valueOf((-563.9253571938));
      complex1.getReal();
      Complex complex9 = complex3.NaN.tan();
      Complex complex10 = complex3.subtract(complex8);
      complex10.NaN.toString();
      complex8.atan();
      complex0.exp();
      complex2.isNaN();
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-1600.52402216));
      Complex complex1 = complex0.add((-1600.52402216));
      Complex complex2 = complex1.multiply(6.283185307179586);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3201.04804432), complex1.getReal(), 0.01);
      assertEquals((-20112.77803964737), complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex1.tanh();
      assertSame(complex3, complex1);
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1278.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex3.I.negate();
      complex4.I.negate();
      complex0.ZERO.multiply(8.750367485925089E-8);
      complex4.I.atan();
      complex2.NaN.createComplex(0.0, (-2134.7005100205592));
      int int0 = 3;
      complex0.I.multiply(3);
      Complex complex5 = Complex.valueOf((-703.500293), (double) 3);
      complex4.ZERO.pow(complex5);
      complex0.isNaN();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
