/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:46:57 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(4481);
      Complex complex1 = Complex.valueOf(0.5403023058681398, 1.5800256583859738);
      Complex complex2 = complex0.pow(complex1);
      complex2.toString();
      complex0.readResolve();
      complex0.getField();
      complex2.reciprocal();
      Complex complex3 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex2.asin();
      complex1.multiply(complex3);
      complex1.pow(6.283185307179586);
      Complex.valueOf((-4828.895), 0.23092567920684814);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = new Complex((-1.0));
      complex1.tan();
      Complex complex3 = new Complex(1.5790297768522832E146);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1.334449995534113E-7);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(294.2441074015574);
      Complex complex3 = Complex.valueOf(294.2441074015574, 2055.55338);
      complex3.I.abs();
      complex2.abs();
      Complex complex4 = complex1.divide(Double.POSITIVE_INFINITY);
      complex4.tan();
      Complex complex5 = new Complex((-1616.2), (-1616.2));
      complex0.sinh();
      complex2.divide(0.16442140936851501);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 11);
      Complex complex1 = complex0.multiply(11);
      Complex.valueOf(0.0, (double) 11);
      complex0.isNaN();
      complex1.reciprocal();
      Complex complex2 = new Complex(11);
      Complex complex3 = Complex.ONE;
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 4944, Double.POSITIVE_INFINITY);
      complex0.nthRoot(4944);
      Complex complex1 = new Complex((-6327.9052), (-6327.9052));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(3771.32532782839);
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.pow(complex0);
      complex0.toString();
      complex1.readResolve();
      Complex complex4 = new Complex((-20.0), (-20.0));
      complex4.reciprocal();
      complex3.isNaN();
      complex2.add((-20.0));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.INF.add(Double.NaN);
      complex2.ZERO.sin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex2.reciprocal();
      complex5.NaN.toString();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = Complex.valueOf(0.7615941559557649, 503.47701);
      complex8.INF.cos();
      complex3.I.sqrt1z();
      complex2.multiply(Double.NaN);
      complex4.readResolve();
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.INF.pow(complex5);
      Complex complex10 = complex9.INF.sqrt();
      complex10.NaN.pow(503.47701);
      Complex complex11 = complex1.add(complex9);
      complex11.ZERO.getArgument();
      complex2.divide(complex0);
      complex7.add(complex4);
      complex2.readResolve();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.INF;
      complex3.pow((-1794.985403728566));
      complex0.conjugate();
      complex1.pow(complex3);
      Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      Complex complex4 = complex2.asin();
      complex1.abs();
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.INF;
      complex6.toString();
      complex1.divide(1.5692921723471877E-213);
      complex5.tan();
      Complex complex7 = new Complex(5761.87961, 452.7212493);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-1794.985403728566), (-1794.985403728566));
      complex0.conjugate();
      Complex complex1 = new Complex((-4550.348820159378));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf((-1794.985403728566), (-1794.985403728566));
      Complex complex4 = complex3.asin();
      complex0.abs();
      Complex complex5 = new Complex(2538.492702214684, 7.19206509529613E-5);
      Complex complex6 = complex2.asin();
      complex5.toString();
      complex4.divide(2538.492702214684);
      complex2.tan();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.log();
      Complex complex1 = Complex.valueOf((-2.129111));
      Complex complex2 = new Complex(1.7768193998956956, (-1283.3137055669988));
      Complex complex3 = new Complex((-20.0));
      complex3.tanh();
      complex1.cos();
      Complex complex4 = Complex.valueOf(1.7768193998956956);
      Complex complex5 = complex4.sqrt();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex.valueOf(2115.2152273719194, 10.318777628593526);
      Complex complex0 = Complex.valueOf(2115.2152273719194, 2115.2152273719194);
      complex0.negate();
      Complex complex1 = new Complex(2808.9417164312554, (-8.920802476895425));
      Complex complex2 = complex1.tanh();
      complex1.cos();
      complex2.NaN.sinh();
      complex2.add(2406.775386);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.conjugate();
      Complex complex2 = Complex.I;
      complex0.pow(complex2);
      Complex complex3 = Complex.valueOf((-1066.7180653), (-1745.0));
      complex1.abs();
      complex3.asin();
      Complex complex4 = complex1.asin();
      complex4.divide(Double.NaN);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-1827.4277530570027), (-1827.4277530570027));
      Complex complex1 = complex0.subtract((-1827.4277530570027));
      complex1.reciprocal();
      Complex complex2 = new Complex((-1827.4277530570027), (-1827.4277530570027));
      Complex complex3 = new Complex((-1827.4277530570027), (-1827.4277530570027));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.add(complex0);
      complex2.negate();
      Complex complex5 = new Complex(3331.0);
      complex4.ONE.pow(complex5);
      Complex.valueOf(3331.0, 3331.0);
      complex3.atan();
      complex3.hashCode();
      complex4.tanh();
      complex1.exp();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      complex0.toString();
      complex0.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(2673.5883813969676);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.I;
      complex4.getArgument();
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex3.multiply(11);
      Complex complex7 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex8 = complex6.asin();
      Complex complex9 = complex6.multiply((-1363.1259158402768));
      complex7.nthRoot(37);
      complex5.isNaN();
      complex0.pow(complex2);
      complex7.toString();
      complex7.readResolve();
      complex6.reciprocal();
      complex9.isNaN();
      complex8.add(4.151794514828518E-8);
      complex1.tan();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2421.0033985659575);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.multiply(1347);
      complex2.getArgument();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.sqrt1z();
      complex1.log();
      complex2.negate();
      complex5.getImaginary();
      Complex complex6 = new Complex(20.0, 2363.0064910470805);
      complex6.tanh();
      complex4.cos();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = Complex.ONE;
      complex8.createComplex(20.0, 2421.0033985659575);
      complex7.divide(2421.0033985659575);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1825.628634940469));
      Complex complex1 = Complex.NaN;
      complex0.INF.readResolve();
      Complex complex2 = Complex.valueOf((-1825.628634940469), (-1825.628634940469));
      Complex complex3 = complex2.atan();
      complex3.ONE.hashCode();
      complex3.tanh();
      complex1.cos();
      Complex complex4 = new Complex((-1825.628634940469));
      complex3.getReal();
      Complex complex5 = Complex.ONE;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      int int0 = 31;
      Complex complex1 = complex0.ZERO.multiply(31);
      Complex complex2 = complex1.I.sqrt1z();
      complex2.INF.createComplex(Double.POSITIVE_INFINITY, (-574652.90231649));
      complex1.NaN.multiply(31);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.add(1338.0160607204175);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2421.0033985659575);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.multiply(1347);
      complex2.getArgument();
      Complex complex4 = complex3.sinh();
      complex3.sqrt1z();
      complex1.log();
      Complex complex5 = Complex.valueOf(2421.0033985659575, (double) 1347);
      Complex complex6 = new Complex((-63.9971), (-425.90374));
      complex6.log();
      Complex complex7 = complex6.pow(complex3);
      complex5.toString();
      complex7.readResolve();
      complex3.reciprocal();
      complex4.isNaN();
      Complex complex8 = complex5.add((-425.90374));
      complex7.tan();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.multiply(2147482464);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-772.25488988133), (-770.2));
      Complex complex1 = Complex.valueOf((-772.25488988133), (-772.25488988133));
      complex0.readResolve();
      Complex complex2 = complex1.NaN.divide((-772.25488988133));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.subtract((-772.25488988133));
      complex3.pow(complex5);
      complex1.getField();
      Complex complex6 = complex4.multiply(complex0);
      Complex complex7 = complex6.multiply(1007);
      complex3.log();
      Complex complex8 = complex7.add((-770.2));
      complex8.ONE.pow((-772.25488988133));
      complex2.readResolve();
      complex4.nthRoot(4137);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2421.0033985659575);
      Complex complex2 = Complex.I;
      complex2.getArgument();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.valueOf((double) 1347, 2421.0033985659575);
      Complex complex7 = new Complex(0.001095512724574991, (-425.90374));
      Complex complex8 = complex7.log();
      complex8.ONE.add(complex5);
      Complex complex9 = complex1.add(complex6);
      complex3.negate();
      complex9.getImaginary();
      complex4.equals(complex3);
      Complex complex10 = Complex.I;
      Complex complex11 = Complex.INF;
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = 895.9138;
      double double1 = 367.585479883;
      Complex complex0 = new Complex(895.9138, 367.585479883);
      Complex complex1 = null;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.sin();
      complex2.ONE.abs();
      Complex complex3 = Complex.INF;
      complex0.divide(complex3);
      complex1.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.acos();
      complex0.sqrt();
      Complex complex3 = new Complex(880.4714673594, 880.4714673594);
      Complex complex4 = complex3.sin();
      complex1.abs();
      complex2.divide(complex4);
      Complex complex5 = Complex.valueOf(1.0850715739509136E-225, Double.NaN);
      complex5.divide(1.0850715739509136E-225);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sqrt();
      complex2.divide(3331.0);
      Complex complex4 = complex3.multiply(complex0);
      complex4.getField();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      complex2.log();
      complex2.add(complex0);
      complex2.pow(complex1);
      Complex complex3 = Complex.I;
      complex3.multiply(1881);
      Complex.valueOf((double) 1881, (double) 1881);
      complex3.asin();
      complex2.multiply(3331.0);
      Complex complex4 = new Complex(0.0);
      complex4.nthRoot(1103);
      complex1.isNaN();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3784853708457332E-206);
      Complex complex1 = complex0.pow((-858.2859));
      Complex complex2 = complex1.conjugate();
      complex1.getArgument();
      Complex complex3 = complex1.pow(complex2);
      complex3.multiply(1733);
      Complex complex4 = Complex.valueOf(1.3784853708457332E-206, (-858.2859));
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.asin();
      Complex complex7 = complex3.multiply(1639.2138);
      complex4.nthRoot(37);
      complex7.isNaN();
      Complex complex8 = complex3.pow(complex6);
      complex5.toString();
      complex7.readResolve();
      complex1.reciprocal();
      complex8.isNaN();
      complex2.add((-0.15118851377886328));
      Complex complex9 = Complex.I;
      complex9.tan();
      complex7.toString();
      Complex.valueOf(Double.NaN, (-425.90374));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.multiply(1347);
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-3.314051560952014E-254), (-1.0));
      Complex complex3 = complex2.exp();
      complex3.I.pow(1777.31);
      complex1.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.INF.toString();
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(1062.5305);
      Complex complex4 = complex1.conjugate();
      complex4.getArgument();
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex3.multiply(37);
      Complex complex7 = Complex.valueOf(8.464160964649636E-5, 964.5646350818635);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex6.multiply(1753.250746051099);
      complex1.nthRoot(1144);
      complex0.isNaN();
      complex5.pow(complex8);
      complex3.toString();
      complex6.readResolve();
      complex8.reciprocal();
      complex5.isNaN();
      complex9.add(1.5800256583859738);
      Complex complex10 = complex7.tan();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(0.0, 1.6121782610217253E-8);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(1387);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = new Complex(1387);
      Complex complex7 = complex3.log();
      complex7.ZERO.asin();
      complex1.multiply(Double.NaN);
      complex4.pow(Double.NaN);
      complex0.hashCode();
      complex5.equals(complex2);
      complex4.add(1.0000000322435656);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.INF.toString();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(2386.12);
      Complex complex3 = complex2.NaN.conjugate();
      complex3.getArgument();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.multiply(37);
      Complex complex6 = Complex.valueOf(2386.12, 0.0);
      complex6.asin();
      Complex complex7 = complex5.ZERO.multiply(4.151794514828518E-8);
      complex6.nthRoot(37);
      complex5.isNaN();
      complex7.INF.pow(complex0);
      complex5.hashCode();
      Object object0 = new Object();
      complex5.equals(object0);
      complex5.add((-5693567.654399999));
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.177739474561431E-7, 1.177739474561431E-7);
      complex0.NaN.add(1.177739474561431E-7);
      Complex complex1 = complex0.I.multiply((-528));
      Complex complex2 = complex1.sin();
      complex2.I.getArgument();
      Complex complex3 = complex0.createComplex((-258.6487898272988), 2.0);
      complex3.tanh();
      complex3.readResolve();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(0.0, 1.6121782610217253E-8);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(1387);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.ONE.sinh();
      complex2.readResolve();
      Complex complex6 = complex3.sinh();
      complex5.toString();
      complex6.abs();
      complex4.acos();
      complex1.log();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex2.sin();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex4.cos();
      Complex complex10 = Complex.valueOf((double) 1387, 20.0);
      complex10.readResolve();
      complex9.getReal();
      complex8.getImaginary();
      Complex complex11 = complex7.sinh();
      complex3.abs();
      complex11.createComplex(0.0, 113.0789);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2421.0033985659575);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.add(complex0);
      complex3.negate();
      complex0.getImaginary();
      Complex complex6 = new Complex(3331.0, 3331.0);
      complex0.tanh();
      complex5.cos();
      complex4.conjugate();
      Complex complex7 = Complex.ONE;
      complex7.pow((-3.200068509818696E299));
      Complex complex8 = Complex.valueOf((-1856.9), 3.1381733357351287);
      complex8.tan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2421.0033985659575);
      complex0.readResolve();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.atan();
      complex2.hashCode();
      Complex complex4 = complex3.asin();
      complex2.NaN.readResolve();
      Complex complex5 = complex3.pow(complex1);
      complex1.tanh();
      Complex complex6 = complex2.cos();
      complex4.conjugate();
      complex6.NaN.multiply(complex5);
      complex4.pow((-4349.0592614));
      Complex complex7 = Complex.valueOf((-4349.0592614));
      complex7.tan();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(0.0, 1.6121782610217253E-8);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(1387);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = new Complex(1387);
      Complex complex7 = complex3.log();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex3.NaN.log();
      complex9.add(complex3);
      Complex complex10 = complex1.negate();
      complex3.getImaginary();
      Complex complex11 = new Complex(3.1381733357351287, 2569.31);
      complex11.ONE.hashCode();
      complex11.tanh();
      complex3.conjugate();
      complex10.pow(Double.NaN);
      complex8.tan();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3784853708457332E-206);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.divide(1.3784853708457332E-206);
      complex1.multiply(complex0);
      complex1.getImaginary();
      complex2.multiply(0.0);
      // Undeclared exception!
      complex0.nthRoot(1050200144);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.INF.toString();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(2386.12);
      Complex complex3 = complex2.NaN.conjugate();
      complex3.getArgument();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.multiply(37);
      Complex complex6 = Complex.valueOf(2386.12, 0.0);
      Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = Complex.valueOf(2.0);
      complex7.getField();
      complex6.isInfinite();
      complex0.ZERO.pow(complex7);
      Complex complex8 = Complex.I;
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1826.0));
      Complex complex1 = complex0.subtract((-1826.0));
      complex0.INF.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.atan();
      complex3.ONE.hashCode();
      Complex complex4 = complex2.ZERO.asin();
      complex1.pow(complex0);
      Complex complex5 = new Complex((-1649.0), Double.NaN);
      complex3.tanh();
      Complex complex6 = Complex.NaN;
      complex6.cos();
      Complex complex7 = Complex.ZERO;
      complex7.conjugate();
      complex0.pow((-508.6));
      complex4.tan();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1826.0));
      Complex complex1 = complex0.subtract((-1826.0));
      complex0.INF.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.atan();
      complex3.ONE.hashCode();
      Complex complex4 = complex2.ZERO.asin();
      complex1.pow(complex0);
      complex3.tanh();
      complex1.cos();
      Complex complex5 = complex1.conjugate();
      complex5.ONE.reciprocal();
      Complex complex6 = Complex.NaN;
      complex4.tan();
      complex2.acos();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(complex0);
      complex1.getImaginary();
      complex0.getField();
      Object object0 = new Object();
      complex1.equals(object0);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.multiply(1387);
      complex1.getArgument();
      Complex complex3 = complex1.sinh();
      complex3.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex4.log();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.add(complex6);
      complex3.negate();
      complex2.getImaginary();
      Complex complex8 = new Complex(1387, 0.0);
      complex6.tanh();
      Complex complex9 = complex1.cos();
      complex9.conjugate();
      complex7.pow(Double.NaN);
      complex1.acos();
      Complex complex10 = Complex.ZERO;
      complex9.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-595.437118808628), 2.0);
      complex2.add(complex1);
      Complex complex3 = Complex.valueOf((-1364.81), 2.7106814809424793E-8);
      complex3.sin();
      complex0.reciprocal();
      Complex complex4 = complex3.multiply(7);
      complex4.ZERO.add(complex2);
      complex2.equals(complex1);
      Complex complex5 = Complex.ONE;
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add(2421.0033985659575);
      Complex complex2 = Complex.valueOf(2421.0033985659575, 2421.0033985659575);
      complex2.abs();
      complex0.add((-456.6));
      Complex complex3 = complex0.log();
      complex1.acos();
      complex3.sqrt();
      complex1.nthRoot(28);
      Complex complex4 = complex2.subtract(complex1);
      complex4.toString();
      complex3.subtract(984.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.612555731556604E159);
      Complex complex1 = Complex.valueOf(6.612555731556604E159);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.add(6.612555731556604E159);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.pow(complex4);
      complex2.ZERO.tanh();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex5.INF.subtract(6.612555731556604E159);
      complex6.I.divide(complex1);
      complex6.ZERO.acos();
      complex5.NaN.pow(complex7);
      Complex complex8 = complex3.INF.log();
      complex1.asin();
      Complex complex9 = complex0.exp();
      complex9.NaN.add(376.6302805606972);
      Complex complex10 = complex2.reciprocal();
      complex3.ONE.divide(6.612555731556604E159);
      complex0.INF.add(complex6);
      Complex.valueOf((-515.72));
      complex10.ONE.exp();
      complex9.readResolve();
      Complex.valueOf(376.6302805606972);
      complex5.readResolve();
      complex2.log();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(4.2269712317468864E-156, 4.2269712317468864E-156);
      complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.acos();
      complex1.INF.multiply(4.2269712317468864E-156);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.NaN.multiply(4.2269712317468864E-156);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex3.ZERO.sin();
      complex3.INF.abs();
      complex3.negate();
      Complex complex7 = complex6.NaN.multiply(26);
      complex3.isInfinite();
      Complex complex8 = complex7.log();
      complex8.INF.subtract(complex1);
      complex6.INF.divide(537.6090120246);
      Complex complex9 = Complex.valueOf(0.005781456343026527, 0.5308922505347817);
      Complex complex10 = complex7.atan();
      Complex complex11 = complex9.reciprocal();
      complex11.I.sqrt1z();
      Complex complex12 = complex0.sqrt1z();
      complex12.divide((double) 26);
      complex2.abs();
      complex2.readResolve();
      complex10.conjugate();
      complex5.isInfinite();
      Complex.valueOf((-5111.55025412));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3784853708457332E-206);
      complex0.ZERO.sqrt();
      Complex complex1 = complex0.divide(1.3784853708457332E-206);
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(4610.973473368916, (-979.9));
      complex2.cos();
      complex2.atan();
      complex0.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = new Complex(1.3784853708457332E-206, 1.3784853708457332E-206);
      complex4.pow(complex1);
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.ZERO;
      complex6.cos();
      complex6.conjugate();
      complex2.pow(5693567.654399999);
      Complex complex7 = new Complex(939.0, (-6.202788045675461E7));
      complex7.tan();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1826.0));
      complex0.subtract((-1826.0));
      complex0.abs();
      Complex complex1 = complex0.add((-456.6));
      complex1.log();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      complex3.nthRoot(28);
      Complex complex4 = complex2.subtract(complex3);
      complex4.toString();
      complex4.subtract(1826.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, (-543.39184));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.multiply(1387);
      complex3.getArgument();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex4.log();
      Complex complex7 = complex0.reciprocal();
      complex3.log();
      Complex complex8 = complex2.add(complex5);
      Complex complex9 = complex7.negate();
      Complex complex10 = Complex.valueOf(0.0, 2663.3943306);
      complex10.getImaginary();
      complex5.subtract(2663.3943306);
      Complex complex11 = complex6.reciprocal();
      complex11.NaN.negate();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, (-5693567.654399999));
      complex12.multiply(1.6310685332570577E-15);
      complex8.isNaN();
      complex9.nthRoot(7);
      complex0.isNaN();
      Complex complex13 = Complex.INF;
      Complex complex14 = Complex.ONE;
      complex14.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(0.0, 1.6121782610217253E-8);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(1387);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = complex3.sqrt1z();
      complex3.log();
      complex5.reciprocal();
      Complex complex7 = complex3.reciprocal();
      complex2.getField();
      complex6.multiply(1387);
      Complex complex8 = new Complex(Double.NaN, (-892.9283219969409));
      complex0.ZERO.getArgument();
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.valueOf((-1084.987));
      complex10.multiply((-1632.92957));
      complex7.INF.atan();
      complex7.pow((-615.7107604559792));
      Complex complex11 = Complex.I;
      complex2.multiply(complex7);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.createComplex(0.0, 1.6121782610217253E-8);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(1387);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.ONE.sinh();
      complex3.sqrt1z();
      Complex complex6 = complex3.log();
      complex5.reciprocal();
      Complex complex7 = Complex.I;
      complex7.add(complex3);
      Complex complex8 = complex1.negate();
      complex3.getImaginary();
      complex8.subtract(2452.63);
      complex5.reciprocal();
      Complex complex9 = complex6.multiply((-96.693));
      complex9.isNaN();
      try { 
        complex3.I.nthRoot((-214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -214
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2182.784, 655.4862587922748);
      Complex complex1 = complex0.add((-2798.4947604559793));
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.multiply(1.4953253269195557);
      Complex complex6 = complex4.pow(445.475233);
      complex6.hashCode();
      complex2.equals(complex5);
      complex0.getImaginary();
      complex1.tanh();
      complex1.getReal();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add((-4870.0));
      complex0.hashCode();
      Complex complex3 = complex2.sinh();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.valueOf(183.0, Double.POSITIVE_INFINITY);
      complex3.divide(complex4);
      complex6.reciprocal();
      complex1.getField();
      complex6.multiply((-3911));
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.log();
      Complex complex8 = Complex.valueOf(0.0);
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex5.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.I;
      complex1.multiply(complex8);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1826.0));
      Complex complex1 = complex0.subtract((-1826.0));
      Complex complex2 = (Complex)complex0.INF.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.atan();
      complex4.ONE.hashCode();
      Complex complex5 = complex3.ZERO.asin();
      complex1.pow(complex0);
      Complex complex6 = Complex.I;
      complex6.subtract((-1826.0));
      complex5.reciprocal();
      complex2.multiply((-1150.74621915416));
      complex5.isNaN();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(0.0, 1.6121782610217253E-8);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(1387);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = complex3.sqrt1z();
      complex3.log();
      complex5.reciprocal();
      Complex complex7 = complex3.NaN.log();
      complex7.add(complex3);
      complex1.negate();
      complex3.getImaginary();
      Complex complex8 = new Complex(2.0, 2569.31);
      complex8.tanh();
      complex8.cos();
      complex6.conjugate();
      complex6.pow((-3696.2488797699));
      complex1.tan();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.divide(complex3);
      Complex complex5 = complex4.reciprocal();
      complex3.getField();
      complex5.multiply((-3911));
      Complex complex6 = complex1.log();
      Complex.valueOf((double) (-3911));
      complex2.multiply(2.5526681615684215E63);
      Complex complex7 = Complex.valueOf((-1654.7064174));
      complex7.pow((-1288.0));
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex(2.5526681615684215E63);
      complex4.multiply(complex9);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1826.0));
      Complex complex1 = complex0.subtract((-1826.0));
      complex0.INF.readResolve();
      complex0.cos();
      Complex complex2 = new Complex((-1826.0));
      complex2.ONE.hashCode();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.I;
      complex1.conjugate();
      complex2.pow((-1826.0));
      complex4.tanh();
      complex3.getReal();
      complex4.multiply((-2839));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1826.0));
      Complex complex1 = complex0.subtract((-1826.0));
      Complex complex2 = (Complex)complex0.INF.readResolve();
      complex1.getArgument();
      Complex complex3 = Complex.NaN;
      complex3.pow(complex0);
      Complex complex4 = complex2.multiply(1371);
      Complex complex5 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.nthRoot(1);
      Complex complex8 = Complex.INF;
      complex8.isNaN();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.pow(complex4);
      complex10.NaN.negate();
      complex7.toString();
      complex1.readResolve();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.reciprocal();
      complex6.isNaN();
      complex8.add((-1826.0));
      complex1.tan();
      complex12.toString();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.toString();
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(2386.12);
      Complex complex4 = complex3.NaN.conjugate();
      complex1.cos();
      Complex complex5 = complex4.atan();
      complex5.I.pow(2386.12);
      complex2.hashCode();
      complex1.asin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.pow(complex6);
      complex4.tanh();
      Complex complex8 = complex1.cos();
      complex0.pow(2386.12);
      complex7.tan();
      complex7.acos();
      complex8.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3784853708457332E-206);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.divide(1.3784853708457332E-206);
      Complex complex3 = complex2.multiply(1.3784853708457332E-206);
      complex3.NaN.abs();
      Complex complex4 = complex2.add((-1265.4213718));
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.I.subtract(complex2);
      complex6.I.abs();
      Complex complex7 = complex1.acos();
      complex7.ZERO.toString();
      complex5.isNaN();
      complex2.multiply(7);
      Complex complex8 = new Complex(Double.NaN);
      complex8.readResolve();
      complex0.createComplex(1.3784853708457332E-206, (-331.205));
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      complex1.ONE.add(2421.0033985659575);
      complex0.cos();
      Complex.valueOf(1.0000000000000004, 2421.0033985659575);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.subtract(1.0000000000000004);
      Complex complex4 = complex2.add(3.270849446965521E-265);
      complex4.equals(complex3);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-228.5256461488953));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex2.I.sqrt();
      complex4.ZERO.add(complex1);
      complex2.ONE.createComplex((-228.5256461488953), (-228.5256461488953));
      complex4.tanh();
      Complex complex5 = Complex.valueOf((-228.5256461488953));
      Complex complex6 = complex5.createComplex((-228.5256461488953), (-228.5256461488953));
      Complex complex7 = complex6.log();
      complex7.ONE.pow(complex0);
      Complex complex8 = Complex.ZERO;
      complex1.subtract(complex8);
      Complex complex9 = complex3.sin();
      try { 
        complex9.I.nthRoot((-2950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,950
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.add(complex0);
      complex4.I.toString();
      complex4.I.sqrt();
      complex4.I.hashCode();
      complex4.INF.getArgument();
      Complex complex5 = complex4.I.sin();
      complex5.I.conjugate();
      complex4.nthRoot(1892);
      Complex complex6 = complex0.atan();
      complex3.I.getField();
      Complex complex7 = complex2.cos();
      complex3.divide(complex7);
      Complex.valueOf((double) 1892);
      complex2.atan();
      complex5.conjugate();
      complex3.toString();
      complex2.abs();
      complex6.conjugate();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(0.0, 1.6121782610217253E-8);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply(1387);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.ONE.sinh();
      complex3.sqrt1z();
      Complex complex6 = complex3.log();
      complex5.reciprocal();
      Complex complex7 = complex3.NaN.log();
      complex7.add(complex3);
      Complex complex8 = complex1.negate();
      complex3.getImaginary();
      complex8.subtract(2452.63);
      complex5.reciprocal();
      Complex complex9 = complex6.multiply((-96.693));
      complex9.isNaN();
      try { 
        complex3.I.nthRoot((-214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -214
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 778.0291);
      complex0.NaN.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      complex1.I.sinh();
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = complex3.I.sinh();
      complex0.NaN.pow(complex1);
      Complex complex5 = complex0.acos();
      complex5.asin();
      complex5.ZERO.negate();
      complex3.reciprocal();
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex5.NaN.reciprocal();
      Complex complex8 = complex1.I.subtract(complex7);
      complex8.INF.getArgument();
      complex7.I.divide(complex5);
      complex1.ZERO.multiply(0.0);
      complex2.hashCode();
      Complex complex9 = complex6.sinh();
      complex5.asin();
      try { 
        complex9.ONE.nthRoot((-48));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -48
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((-3773.8778149885));
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.add((-3773.8778149885));
      complex4.I.cos();
      complex3.cos();
      Complex complex5 = complex3.pow((-3773.8778149885));
      complex5.INF.atan();
      complex5.reciprocal();
      complex0.multiply(452);
      complex2.nthRoot(324);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2182.784, 655.4862587922748);
      complex0.I.add(655.4862587922748);
      complex0.INF.hashCode();
      Complex complex1 = complex0.sinh();
      complex1.acos();
      Complex complex2 = Complex.valueOf(2182.784, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.ONE.reciprocal();
      complex3.INF.getField();
      complex4.multiply((-3911));
      Complex complex5 = complex0.INF.log();
      Complex.valueOf((-1288.0));
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex5.pow(0.0);
      Complex complex6 = Complex.I;
      complex4.multiply(complex6);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4696.448047892801);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.pow(7.285370725133842E-304);
      Complex complex6 = complex5.conjugate();
      complex5.NaN.pow(complex1);
      complex6.I.multiply((-2404.72267708853));
      complex6.INF.getArgument();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex0.multiply(4696.448047892801);
      complex8.I.getField();
      complex0.NaN.conjugate();
      Complex complex9 = complex6.conjugate();
      complex9.toString();
      complex1.log();
      complex7.equals(complex2);
      Complex complex10 = complex0.atan();
      complex10.abs();
      complex3.subtract(1.0);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      complex1.ONE.add(2421.0033985659575);
      complex0.cos();
      Complex complex2 = Complex.I;
      complex2.NaN.atan();
      complex1.I.multiply(1.4953253269195557);
      complex2.ZERO.pow(3331.0);
      complex2.INF.hashCode();
      complex0.equals(complex2);
      complex2.getImaginary();
      Complex complex3 = complex1.tanh();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex2.multiply(complex0);
      complex4.NaN.pow(complex0);
      complex4.NaN.tan();
      complex1.isNaN();
      Complex complex5 = complex3.pow(complex2);
      complex5.tan();
      complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.ZERO.multiply(1);
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex1.I.reciprocal();
      Complex complex7 = complex0.ZERO.sqrt1z();
      complex6.INF.pow(complex3);
      Complex.valueOf(6.283185307179586, 4336.6946923);
      complex7.I.readResolve();
      complex1.INF.toString();
      complex6.readResolve();
      complex0.isNaN();
      complex6.I.getArgument();
      Complex complex8 = complex6.ONE.subtract(complex5);
      complex8.ONE.acos();
      complex6.getArgument();
      complex1.asin();
      Complex complex9 = complex6.log();
      complex9.ONE.log();
      Complex complex10 = complex1.divide(complex7);
      complex10.INF.sqrt();
      complex0.pow(complex3);
      complex1.cosh();
      complex1.readResolve();
      Complex complex11 = complex7.atan();
      complex11.NaN.getField();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex1.ZERO.reciprocal();
      complex2.ZERO.atan();
      complex0.NaN.nthRoot(37);
      complex2.ONE.add(complex0);
      Complex complex3 = complex2.NaN.createComplex(0.0, 1.0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.I.exp();
      complex4.INF.abs();
      complex1.readResolve();
      complex2.getArgument();
      Complex.valueOf(1.0);
      Complex complex6 = complex5.negate();
      complex3.tan();
      Complex complex7 = complex6.INF.cos();
      complex7.ONE.cos();
      Complex complex8 = complex6.cos();
      complex3.abs();
      Complex complex9 = complex0.exp();
      complex9.ZERO.acos();
      complex0.isInfinite();
      complex8.hashCode();
      complex2.tan();
      Complex complex10 = new Complex((-20.0));
      complex3.multiply(complex10);
      complex7.cosh();
      complex8.getArgument();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      complex0.getImaginary();
      complex2.getField();
      complex0.equals(complex1);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ZERO;
      Complex.valueOf(332.171242013);
      Complex complex3 = complex1.ZERO.subtract(complex2);
      complex0.getReal();
      complex0.getArgument();
      complex3.abs();
      complex1.add(332.171242013);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.I.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.divide((-1045.81457));
      complex2.ONE.multiply(17);
      Complex complex4 = complex1.asin();
      complex4.divide(complex3);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex0.divide(20.0);
      complex1.ZERO.getArgument();
      complex2.isNaN();
      Complex.valueOf(20.0);
      complex7.ZERO.nthRoot(17);
      complex3.ONE.multiply((-370.268146));
      complex6.ZERO.multiply(0);
      complex5.sqrt1z();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex5.subtract(complex7);
      complex6.getImaginary();
      Complex complex11 = complex0.I.conjugate();
      Complex complex12 = complex10.acos();
      complex8.toString();
      complex12.equals((Object) null);
      Complex complex13 = complex9.acos();
      complex13.sqrt1z();
      complex3.reciprocal();
      complex11.divide(2590.34106761);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      complex0.ZERO.divide(complex1);
      Complex complex2 = Complex.ONE;
      complex0.I.getField();
      Complex complex3 = complex0.NaN.divide(complex2);
      complex3.exp();
      complex0.abs();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.acos();
      complex5.ZERO.add(complex4);
      complex0.I.hashCode();
      complex1.isInfinite();
      complex0.getArgument();
      Complex complex6 = complex4.sqrt1z();
      complex6.divide(complex2);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-105.2440635770607));
      complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.acos();
      complex1.subtract((-105.2440635770607));
      Complex.valueOf((-1089.2712980657), (-2372.1206356));
      Complex complex4 = Complex.valueOf((-825.603478380295), 0.0);
      Complex complex5 = complex4.ZERO.divide(0.0);
      complex5.sinh();
      complex2.acos();
      complex4.ONE.reciprocal();
      complex0.readResolve();
      Complex complex6 = complex3.tan();
      complex6.ONE.negate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.multiply(complex7);
      complex8.ONE.multiply(0);
      complex8.equals("");
      complex0.sqrt1z();
      Complex complex9 = Complex.valueOf((-2413.2089), (-825.603478380295));
      Complex complex10 = complex9.multiply((-2413.2089));
      complex10.sqrt();
      Complex.valueOf((-2487.99));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1089.1183), (-7.488022803661722E-19));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(1398.27);
      Complex complex1 = new Complex((-4.2702997139152675E-8));
      Complex complex2 = complex1.I.multiply((-4.2702997139152675E-8));
      complex0.INF.getField();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex0.divide(complex1);
      complex3.toString();
      Complex complex5 = complex1.conjugate();
      complex5.ZERO.exp();
      complex5.readResolve();
      Complex complex6 = complex4.sin();
      complex6.I.acos();
      complex4.toString();
      Complex complex7 = complex4.atan();
      complex2.abs();
      complex4.toString();
      Complex complex8 = Complex.valueOf(1398.27, (-2116.0));
      Complex complex9 = complex8.I.subtract(complex7);
      complex9.sqrt();
      complex9.INF.multiply(complex5);
      complex7.ZERO.add(complex0);
      Complex complex10 = complex5.acos();
      Complex complex11 = complex1.createComplex(1398.27, 1175.1);
      Complex complex12 = complex11.divide(complex7);
      Complex complex13 = complex12.I.tanh();
      complex5.INF.log();
      complex13.toString();
      complex5.sqrt();
      complex4.getImaginary();
      complex6.nthRoot(4610);
      complex12.toString();
      complex3.getReal();
      complex10.add((double) 4610);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = new Complex(3140.933453);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.ONE.acos();
      complex4.I.asin();
      complex3.I.getArgument();
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex0.cos();
      complex3.hashCode();
      Complex complex7 = complex3.exp();
      complex7.subtract(complex0);
      complex2.getImaginary();
      complex6.NaN.exp();
      complex1.getField();
      complex6.multiply(0.0);
      complex2.abs();
      complex0.sinh();
      complex5.getArgument();
      complex1.negate();
      complex0.tan();
      int int0 = (-4006);
      try { 
        complex5.nthRoot((-4006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,006
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex0.ONE.abs();
      Complex complex2 = complex0.divide((-1511.46));
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex2.INF.multiply(272);
      complex5.I.asin();
      Complex complex6 = complex1.I.log();
      complex4.divide(complex0);
      complex2.equals(complex1);
      complex2.INF.toString();
      Complex complex7 = complex6.INF.add(complex0);
      complex7.NaN.multiply(1.0);
      complex4.getReal();
      complex2.asin();
      complex4.ZERO.subtract(0.0);
      complex1.hashCode();
      Complex complex8 = complex6.negate();
      complex8.ZERO.getField();
      complex8.log();
      complex6.pow(1.0);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(2511.727492934411);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = Complex.valueOf(2511.727492934411, 2511.727492934411);
      Complex complex4 = Complex.valueOf(1889.2);
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex3.ZERO.conjugate();
      Complex complex7 = complex6.ZERO.divide(complex2);
      Complex complex8 = complex7.I.conjugate();
      complex0.multiply((-2852));
      complex2.tan();
      Complex complex9 = complex2.sinh();
      Complex complex10 = Complex.NaN;
      complex10.ZERO.subtract(0.0);
      complex2.equals(complex10);
      Complex complex11 = complex2.divide(1230.43899423776);
      complex4.multiply((-1229.31527118));
      complex0.divide(complex8);
      complex5.hashCode();
      complex11.subtract(639.88410317);
      complex5.cos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.exp();
      complex0.sqrt1z();
      complex2.createComplex((-2032.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1826.0));
      Complex complex1 = complex0.subtract((-1826.0));
      complex0.INF.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.atan();
      complex3.ONE.hashCode();
      Complex complex4 = complex2.ZERO.asin();
      complex1.pow(complex0);
      complex3.tanh();
      complex1.cos();
      complex1.conjugate();
      complex3.pow((-1826.0));
      complex4.tan();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.cos();
      complex1.INF.getArgument();
      complex1.NaN.atan();
      Complex complex2 = complex0.acos();
      complex2.I.log();
      complex2.isNaN();
      complex1.NaN.toString();
      complex2.atan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 1194.7481536865712);
      complex0.getImaginary();
      complex0.createComplex(Double.NaN, Double.NaN);
      complex0.toString();
      complex1.pow((-700.36192));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.toString();
      Complex complex1 = Complex.valueOf(1167.16898);
      complex0.I.multiply(346);
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.acos();
      Complex complex3 = complex0.createComplex(1167.16898, 1167.16898);
      complex3.ONE.cos();
      complex3.ONE.pow(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex3.pow(1167.16898);
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.exp();
      complex5.equals(complex1);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(1466.3819894558);
      Complex complex1 = complex0.INF.sin();
      complex1.I.divide(complex0);
      complex0.ONE.cos();
      Complex complex2 = complex0.multiply((-20.0));
      Complex complex3 = complex2.pow((-20.0));
      complex0.isNaN();
      complex3.getImaginary();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1335.872762684903));
      complex0.I.multiply(complex1);
      Complex complex2 = complex0.createComplex((-1335.872762684903), 0.0);
      Complex complex3 = complex2.I.subtract(1557.394275);
      Complex complex4 = complex0.ZERO.divide(0.0);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.ZERO.multiply(complex2);
      Complex complex8 = complex2.add((-2033.17167));
      complex8.INF.nthRoot(1);
      complex4.sqrt1z();
      complex2.multiply(complex4);
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex9.ZERO.multiply((double) 1);
      complex4.createComplex((-1012.4559908098884), 0.0);
      complex5.atan();
      complex0.add(0.0);
      complex6.pow(complex4);
      Complex complex10 = complex3.sqrt();
      complex10.I.pow(560.7814116);
      complex7.atan();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.INF.toString();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(2386.12);
      Complex complex3 = complex2.NaN.conjugate();
      complex3.getArgument();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.multiply(37);
      Complex complex6 = Complex.valueOf(2386.12, 0.0);
      complex6.asin();
      Complex complex7 = complex5.ZERO.multiply(4.151794514828518E-8);
      complex6.nthRoot(37);
      complex5.isNaN();
      complex7.INF.pow(complex0);
      complex7.NaN.toString();
      complex0.readResolve();
      complex7.reciprocal();
      complex3.isNaN();
      complex6.add((-3211.4530948112));
      complex5.tan();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.sin();
      complex2.asin();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(0.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 1076.6568374038);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.NaN.cosh();
      complex3.ZERO.add(0.0);
      complex2.INF.multiply(570);
      complex1.ZERO.reciprocal();
      Complex complex4 = complex0.ZERO.asin();
      complex4.INF.toString();
      Complex complex5 = complex0.multiply((-5146.874));
      complex5.readResolve();
      Complex complex6 = complex5.sinh();
      complex4.ONE.toString();
      complex6.NaN.abs();
      complex4.I.acos();
      Complex complex7 = complex4.log();
      Complex.valueOf((-2134.1));
      Complex complex8 = complex4.sin();
      complex8.ZERO.atan();
      Complex complex9 = complex7.cos();
      complex9.readResolve();
      complex8.getReal();
      complex7.getImaginary();
      Complex complex10 = complex7.sinh();
      complex10.ONE.abs();
      complex5.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      complex1.ONE.tanh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.INF.sin();
      complex3.I.reciprocal();
      complex0.isNaN();
      Complex complex4 = complex0.multiply(7);
      complex4.readResolve();
      complex2.createComplex((-2205.24378), 20.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      complex1.readResolve();
      complex1.ONE.tan();
      Complex complex2 = complex1.I.sqrt();
      complex2.getField();
      complex0.tan();
      complex2.getField();
      Complex.valueOf((-3544.26949807503));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      complex0.abs();
      Complex complex2 = complex0.acos();
      complex0.ONE.hashCode();
      Complex complex3 = complex2.NaN.divide(complex1);
      complex3.NaN.divide(1.0);
      Complex complex4 = complex1.I.subtract((-1.0));
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex1.ZERO.sqrt();
      Complex complex7 = complex6.INF.sqrt();
      complex7.ONE.cos();
      complex1.readResolve();
      complex4.INF.abs();
      Complex complex8 = Complex.valueOf(1.0);
      Complex complex9 = complex8.ZERO.cosh();
      complex9.NaN.getArgument();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex5.conjugate();
      complex11.getImaginary();
      complex4.isInfinite();
      complex8.hashCode();
      Complex complex12 = complex10.acos();
      complex5.ONE.sqrt();
      complex11.multiply((-712));
      complex12.ONE.sqrt1z();
      Complex complex13 = complex12.createComplex(Double.NaN, (-1048.63162));
      complex13.toString();
      complex8.toString();
      complex4.add((-323.5434312783));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex0.ONE.pow(complex2);
      complex5.NaN.acos();
      Complex complex6 = complex5.add((-223.9956512049447));
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.ONE.asin();
      Complex complex8 = complex4.ONE.log();
      Complex complex9 = complex0.acos();
      complex1.ZERO.hashCode();
      Complex complex10 = complex9.NaN.cosh();
      complex7.getReal();
      Complex complex11 = complex7.sinh();
      complex11.multiply(complex8);
      complex1.NaN.hashCode();
      Complex complex12 = complex8.subtract(complex7);
      Complex complex13 = complex12.ONE.add(3.418237608335161E-166);
      assertTrue(complex13.equals((Object)complex5));
      
      Complex complex14 = complex10.INF.tanh();
      Complex complex15 = complex8.divide(738.38464432);
      Complex complex16 = complex7.I.divide(3.418237608335161E-166);
      assertEquals(2.9254841663480674E165, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex0.sin();
      assertEquals(1.1752011936438014, complex17.getImaginary(), 0.01);
      
      complex0.isNaN();
      Complex complex18 = complex3.multiply(complex10);
      complex18.ZERO.getArgument();
      Complex complex19 = complex2.negate();
      Complex complex20 = complex19.sqrt1z();
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex18.exp();
      assertSame(complex18, complex14);
      assertEquals((-0.8813735870195429), complex9.getImaginary(), 0.01);
      
      Complex complex22 = complex3.add(738.38464432);
      complex22.INF.sin();
      complex15.getField();
      complex8.isNaN();
      complex11.sqrt1z();
      assertNotSame(complex4, complex21);
      assertEquals(2.3012989023072947, complex11.getReal(), 0.01);
      
      Complex complex23 = complex2.subtract(2.591270923614502);
      assertEquals(1.0232274785475506, complex2.getImaginary(), 0.01);
      assertFalse(complex23.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-758.0593));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.exp();
      assertEquals(2.718281828459045, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.tan();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.tanh();
      assertTrue(complex0.equals((Object)complex4));
      assertEquals((-1.3562931900566968), complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }
}
