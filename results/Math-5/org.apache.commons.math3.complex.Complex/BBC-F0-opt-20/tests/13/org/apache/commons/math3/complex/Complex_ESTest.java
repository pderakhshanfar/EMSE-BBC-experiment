/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:35:57 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586, 770.4968131);
      Complex complex2 = complex1.pow(6.283185307179586);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(3144.09603034, 3144.09603034);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.add(0.40679083721659215);
      Complex complex3 = complex2.ZERO.log();
      complex2.ZERO.readResolve();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.INF.sqrt1z();
      complex5.NaN.toString();
      Complex complex7 = complex4.INF.log();
      Complex complex8 = complex4.divide(3144.09603034);
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex8.exp();
      complex2.getField();
      Complex complex11 = complex2.tanh();
      complex11.createComplex(319.0720648763175, 0.40679083721659215);
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = Complex.valueOf(0.40679083721659215);
      Complex complex14 = complex12.ZERO.pow(3144.09603034);
      complex12.NaN.reciprocal();
      complex12.NaN.acos();
      complex4.conjugate();
      complex7.abs();
      complex7.abs();
      complex14.multiply(complex1);
      complex3.divide(complex10);
      complex9.I.exp();
      complex8.createComplex(2.4175248449172035E-87, 2024.92134628205);
      complex13.multiply(440.7242484219999);
      Complex complex15 = complex9.reciprocal();
      complex6.multiply(complex15);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      complex0.multiply(53);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(4435.352, 4435.352);
      Complex complex1 = complex0.pow((double) 17);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.toString();
      Complex complex2 = complex0.createComplex(20.0, 2852.138768188775);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.reciprocal();
      complex0.tan();
      Complex complex5 = complex0.atan();
      complex3.sinh();
      Complex complex6 = complex4.cosh();
      complex0.hashCode();
      complex2.tanh();
      complex1.exp();
      Complex complex7 = complex6.asin();
      complex7.ZERO.multiply(complex3);
      complex1.cosh();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-583.45694833665), (-2036.930355512733));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-6.123233995736767E-17), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(complex0);
      Complex.valueOf(599.76284);
      complex2.multiply(complex1);
      complex1.sqrt1z();
      complex2.divide((-6.123233995736767E-17));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.add(complex0);
      complex2.NaN.asin();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      complex1.NaN.negate();
      complex3.NaN.sinh();
      Complex complex4 = complex3.ZERO.cosh();
      complex4.ZERO.multiply(1.0);
      Complex complex5 = complex0.tanh();
      complex5.ONE.divide(complex3);
      complex3.sinh();
      complex2.divide(0.5707963267948966);
      Complex complex6 = complex3.multiply(1.0);
      complex6.cos();
      complex2.toString();
      complex2.conjugate();
      complex2.add(786.15022);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, (-6.123233995736767E-17));
      Complex complex2 = Complex.ONE;
      complex2.multiply(complex1);
      Complex complex3 = complex0.add(1.0);
      Complex complex4 = complex3.multiply((-20.0));
      complex4.tan();
      complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.multiply(complex1);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(2.0810681643102672E-8, 2.0810681643102672E-8);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex((-3550.61354017), (-3550.61354017));
      complex1.divide(complex2);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.I;
      complex4.add((-3550.61354017));
      Complex complex5 = complex1.multiply((-3550.61354017));
      Complex complex6 = Complex.valueOf((-524.855));
      Complex complex7 = complex6.multiply(complex4);
      complex1.readResolve();
      complex4.equals(complex3);
      complex6.reciprocal();
      complex7.multiply(complex5);
      complex2.atan();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1617.65983420154), 1036.9312642);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.multiply((-598));
      complex2.NaN.nthRoot(4968);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex0.readResolve();
      complex1.asin();
      Complex complex5 = Complex.valueOf(1036.9312642);
      Complex complex6 = complex1.add((-614.12874175749));
      Complex complex7 = Complex.valueOf((double) (-598), (-614.12874175749));
      complex1.negate();
      Complex complex8 = complex6.tan();
      complex4.toString();
      complex7.subtract(complex1);
      Complex complex9 = complex8.add(complex5);
      Complex.valueOf(1036.9312642, 0.0);
      complex1.subtract(complex7);
      complex9.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex0.isInfinite();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1089.329064232162, 1089.329064232162);
      complex2.multiply(1089.329064232162);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(4183036.467479099, 8.013164089994031E46);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = new Complex(0.4161468365471423, (-4124.270674140233));
      complex3.sqrt();
      complex5.tan();
      complex3.abs();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(0.0, (-2.7609457648450225E-8));
      Complex complex3 = complex2.log();
      complex3.divide(7.708777608683431E-178);
      Complex complex4 = complex2.acos();
      complex1.negate();
      complex4.abs();
      Complex complex5 = new Complex(0.664920449256897, 3.347954541376715E-8);
      complex1.cos();
      Complex complex6 = complex0.log();
      Complex complex7 = Complex.ZERO;
      complex1.pow(0.0);
      complex5.hashCode();
      complex6.negate();
      complex6.sinh();
      Complex complex8 = Complex.valueOf(0.0);
      complex3.subtract(complex8);
      Complex complex9 = new Complex((-3707));
      Complex complex10 = Complex.NaN;
      complex10.multiply((-3707));
      complex5.acos();
      complex7.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1872.0));
      Complex complex1 = complex0.multiply(370);
      Complex complex2 = Complex.valueOf(1370.04120841691);
      Complex complex3 = complex2.NaN.pow(complex0);
      complex1.ONE.readResolve();
      Complex complex4 = complex1.subtract((-1.0));
      Complex complex5 = complex0.sqrt();
      complex2.I.cos();
      Complex complex6 = Complex.valueOf((-1872.0), (double) 370);
      complex5.toString();
      complex2.ZERO.abs();
      complex1.INF.getArgument();
      Complex complex7 = complex0.multiply(complex6);
      complex6.INF.subtract(complex2);
      Complex complex8 = complex7.NaN.add(0.0317181795835495);
      complex5.negate();
      complex8.ZERO.multiply(0.7853981633974483);
      complex4.add(complex5);
      complex4.getField();
      complex8.getField();
      complex3.toString();
      Complex complex9 = complex3.asin();
      complex1.add(complex8);
      Complex complex10 = Complex.valueOf(833.5649784070308, 1370.04120841691);
      complex3.multiply(complex10);
      complex10.exp();
      complex9.cosh();
      complex7.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.acos();
      complex0.toString();
      Complex complex1 = complex0.divide((-5330.510233035307));
      Complex complex2 = complex0.I.divide((-5330.510233035307));
      complex2.getField();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.ZERO.multiply(1);
      complex5.toString();
      Complex complex6 = Complex.valueOf((-5330.510233035307), (-5330.510233035307));
      complex4.divide(complex6);
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = complex3.ZERO.add((-5330.510233035307));
      Complex complex9 = complex8.add((-5330.510233035307));
      complex4.multiply(2584.3948619107236);
      complex2.ONE.multiply(2584.3948619107236);
      complex0.conjugate();
      Complex complex10 = complex3.sqrt();
      complex10.NaN.tan();
      complex2.abs();
      complex8.reciprocal();
      complex7.sinh();
      complex9.equals("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, (-6.123233995736767E-17));
      Complex complex2 = complex1.divide(complex0);
      complex2.multiply(complex1);
      Complex complex3 = complex2.add((-6.123233995736767E-17));
      Complex complex4 = complex3.add((-3726.948));
      Complex complex5 = complex1.multiply((-0.17157287525380985));
      complex3.multiply((-6.123233995736767E-17));
      complex4.conjugate();
      Complex complex6 = new Complex((-6.123233995736767E-17), (-3726.948));
      complex6.sqrt();
      Complex complex7 = complex3.tan();
      complex1.abs();
      Complex complex8 = new Complex(Double.NaN);
      complex8.reciprocal();
      complex3.sinh();
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      complex0.I.tan();
      int int0 = (-2134);
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-2034.375));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add((-2034.375));
      Complex complex3 = complex1.conjugate();
      complex3.INF.sqrt1z();
      complex1.INF.subtract((-2034.375));
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex1.ZERO.divide(complex3);
      complex6.NaN.cos();
      Complex.valueOf((-2034.375), (-2034.375));
      complex1.toString();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-2034.375), Double.POSITIVE_INFINITY);
      complex4.reciprocal();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-2034.375));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add((-2034.375));
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex1.subtract((-2034.375));
      Complex complex6 = complex3.conjugate();
      complex5.atan();
      complex4.divide(complex1);
      Complex complex7 = new Complex((-2034.375), (-2034.375));
      complex6.ZERO.divide((-2034.375));
      complex7.cos();
      Complex.valueOf(2.0, (-2034.375));
      complex7.toString();
      Complex complex8 = Complex.ONE;
      complex6.divide(2.0);
      Complex complex9 = complex5.reciprocal();
      complex9.ONE.createComplex((-1393.0), 5.096361344218192);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2540.555251181, 2540.555251181);
      complex1.tan();
      Complex complex2 = Complex.valueOf(3216.32059);
      complex2.reciprocal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.multiply(complex3);
      complex5.readResolve();
      Complex complex6 = new Complex((-1018.56278532), 1318.57);
      complex4.equals(complex6);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(524.449454672);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.subtract(524.449454672);
      Complex complex5 = complex4.conjugate();
      complex5.atan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = new Complex(524.449454672, 524.449454672);
      complex6.divide(complex7);
      Complex complex8 = Complex.I;
      Complex.valueOf((-122.368), (-8614.982205183));
      complex2.toString();
      Complex complex9 = Complex.ONE;
      complex3.divide(524.449454672);
      complex0.reciprocal();
      complex7.atan();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.I;
      complex2.I.multiply(complex0);
      complex0.isNaN();
      Complex complex3 = complex1.pow(3431.8018374262156);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.subtract(1620.3267);
      complex1.conjugate();
      complex1.atan();
      Complex complex2 = Complex.I;
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      complex1.ZERO.sin();
      Complex complex3 = complex0.I.createComplex((-3166.4), 2.3848605155944824);
      Complex complex4 = complex3.ZERO.subtract(2.3848605155944824);
      complex0.getField();
      Complex complex5 = complex0.cos();
      complex5.I.log();
      complex5.ZERO.reciprocal();
      complex1.nthRoot(918);
      complex1.nthRoot(918);
      Complex complex6 = complex1.pow(2.3848605155944824);
      complex6.I.add(complex1);
      Complex complex7 = complex6.INF.subtract((-2501.0));
      complex7.ONE.subtract(1.0);
      Complex complex8 = complex4.cosh();
      complex8.cos();
      complex1.abs();
      Complex complex9 = Complex.valueOf(64.0456675486);
      complex9.ONE.abs();
      complex3.sqrt1z();
      Complex.valueOf(Double.NaN);
      Complex complex10 = complex3.subtract(complex2);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3.347954541376715E-8);
      complex0.isNaN();
      Complex complex1 = complex0.pow((-751.7324111));
      complex0.atan();
      Complex complex2 = complex1.multiply(565);
      complex2.subtract(2.768276122845335E109);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = new Complex(0.0);
      complex0.equals(complex1);
      Complex complex2 = complex0.tanh();
      complex2.ZERO.abs();
      Complex complex3 = new Complex(60.9686827);
      complex3.sqrt1z();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.pow(complex4);
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2034.375));
      Complex complex1 = complex0.cos();
      complex0.I.add((-2034.375));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.sqrt1z();
      complex1.INF.subtract((-2034.375));
      Complex complex4 = complex2.conjugate();
      complex1.ZERO.divide(complex2);
      Complex complex5 = Complex.valueOf(0.0);
      complex1.toString();
      Complex complex6 = complex0.INF.createComplex(0.0, 20.0);
      Complex complex7 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex9.INF.tan();
      complex8.atan();
      Complex complex11 = complex7.sinh();
      complex11.ONE.hashCode();
      complex5.tanh();
      complex6.acos();
      Complex complex12 = complex8.exp();
      complex3.getImaginary();
      complex4.nthRoot(136);
      Complex complex13 = new Complex(995.199);
      complex13.atan();
      complex12.add(complex10);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(6.283185307179586);
      complex0.tan();
      Complex complex2 = Complex.valueOf(2274.575128);
      Complex complex3 = complex1.reciprocal();
      complex2.acos();
      complex2.readResolve();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ZERO;
      complex3.equals(complex5);
      Complex complex6 = complex3.tanh();
      complex5.sqrt1z();
      complex6.pow(2274.575128);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(3264.44812);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex2.ONE.readResolve();
      Complex complex3 = Complex.valueOf(3264.44812);
      complex3.I.atan();
      complex3.ZERO.sin();
      Complex complex4 = complex0.I.add(complex3);
      Complex complex5 = complex0.subtract(3264.44812);
      Complex complex6 = complex5.NaN.multiply(complex2);
      Complex complex7 = complex5.log();
      Complex complex8 = complex0.I.tan();
      Complex complex9 = complex7.INF.multiply(2589);
      Complex complex10 = complex7.ONE.acos();
      Complex complex11 = complex5.NaN.multiply(3.9747557089197843E-227);
      complex10.NaN.getArgument();
      complex0.INF.atan();
      Complex complex12 = complex1.tan();
      complex12.ONE.multiply(3264.44812);
      Complex complex13 = complex6.add(complex0);
      Complex complex14 = complex5.conjugate();
      complex3.pow(4.689503868988906);
      complex13.add(1509.3);
      complex7.abs();
      complex8.sin();
      complex4.sqrt1z();
      complex4.sqrt();
      complex10.toString();
      complex0.multiply(Double.NaN);
      complex9.divide((double) 2589);
      complex14.sinh();
      complex11.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.add(6.283185307179586);
      complex1.tan();
      Complex.valueOf((double) (-341));
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.acos();
      complex4.readResolve();
      Complex complex5 = Complex.I;
      complex3.equals(complex5);
      complex0.tanh();
      Complex complex6 = complex4.sqrt1z();
      complex5.pow((double) (-341));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(2274.575128);
      Complex complex1 = complex0.multiply(2274.575128);
      Complex complex2 = Complex.valueOf(1.000000000000001, 1.000000000000001);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = Complex.ZERO;
      complex2.INF.sinh();
      complex4.sqrt1z();
      complex0.isInfinite();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex1.add(complex4);
      complex3.pow(complex6);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-3.343201925128334E60));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add((-3.343201925128334E60));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.subtract(1.4255188208147591);
      Complex complex6 = complex4.conjugate();
      complex2.divide(complex1);
      Complex.valueOf((-3.343201925128334E60));
      complex5.toString();
      Complex complex7 = complex0.createComplex(0.0, (-302.505));
      complex7.divide(20.0);
      Complex complex8 = Complex.ZERO;
      complex0.reciprocal();
      complex6.tan();
      Complex.valueOf(1.4255188208147591, 20.0);
      Complex complex9 = new Complex(1.4255188208147591, (-3.343201925128334E60));
      complex0.hashCode();
      complex3.tanh();
      complex6.acos();
      complex8.exp();
      complex3.getImaginary();
      Complex complex10 = Complex.ONE;
      complex10.atan();
      complex2.equals(complex8);
      Complex complex11 = Complex.NaN;
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3.347954541376715E-8);
      Complex complex1 = Complex.INF;
      complex0.divide(0.0);
      complex0.ONE.acos();
      Complex complex2 = complex0.negate();
      complex1.abs();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sinh();
      complex3.hashCode();
      Complex complex6 = complex5.tanh();
      complex5.acos();
      complex6.exp();
      complex1.negate();
      complex1.sinh();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex4.multiply((-3707));
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(1.31961989402771);
      Complex complex1 = Complex.valueOf(1.31961989402771, 1.31961989402771);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.divide((-0.2568880349676607));
      Complex complex5 = complex1.sin();
      Complex complex6 = complex4.acos();
      Complex complex7 = Complex.INF;
      complex3.divide(complex0);
      complex3.abs();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex6.conjugate();
      complex6.hashCode();
      Complex complex10 = complex6.tanh();
      complex5.divide(complex9);
      complex10.divide(complex6);
      Complex complex11 = Complex.valueOf((-0.2568880349676607), 0.0014383204291414456);
      complex8.toString();
      complex9.getField();
      complex10.tanh();
      complex4.negate();
      complex4.add(complex11);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = new Complex((-2581.843482298047));
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.sqrt1z();
      complex2.isInfinite();
      Complex complex4 = complex3.add(complex1);
      complex1.pow(complex0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2112.0));
      Complex complex1 = complex0.NaN.createComplex(1.0, 0.12844401748383036);
      Complex complex2 = Complex.valueOf(2.0);
      complex1.ZERO.getField();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex3.INF.tan();
      complex4.ONE.pow(1.0);
      complex0.getField();
      Complex complex5 = complex3.ZERO.sqrt1z();
      Complex complex6 = complex3.acos();
      complex6.NaN.tan();
      Complex complex7 = complex1.asin();
      complex3.readResolve();
      complex1.nthRoot(1492);
      Complex complex8 = complex7.multiply((double) 1492);
      complex3.sin();
      complex2.sinh();
      complex5.createComplex(3216.32059, Double.NaN);
      complex7.negate();
      Complex.valueOf((-7.334319635123628E-9), 2647.8065);
      complex3.pow(complex2);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2034.375));
      Complex complex1 = complex0.cos();
      complex0.I.add((-2034.375));
      complex1.readResolve();
      Complex complex2 = complex1.conjugate();
      complex2.INF.sqrt1z();
      Complex.valueOf((-2034.375), (-2034.375));
      complex2.conjugate();
      complex1.ZERO.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex1.toString();
      Complex complex4 = complex0.INF.createComplex(0.0, 20.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.ZERO;
      complex6.reciprocal();
      Complex complex7 = complex6.atan();
      complex7.ONE.abs();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.ONE.hashCode();
      complex3.tanh();
      Complex complex9 = complex4.acos();
      complex9.I.exp();
      complex1.getImaginary();
      complex6.nthRoot(2592);
      Complex complex10 = complex9.atan();
      complex0.equals(complex5);
      complex10.tanh();
      complex4.createComplex(Double.POSITIVE_INFINITY, -0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.31961989402771);
      Complex complex2 = complex0.negate();
      complex1.abs();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.divide((-2972.80953761));
      complex5.nthRoot(390);
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.valueOf(4138679.640625);
      complex7.divide(complex6);
      Complex complex8 = complex0.add(complex6);
      Complex complex9 = complex0.divide(5005.517471112631);
      complex9.abs();
      complex6.reciprocal();
      Complex complex10 = complex1.atan();
      complex2.sinh();
      complex10.hashCode();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex8.acos();
      complex11.exp();
      complex12.getImaginary();
      Complex complex13 = complex9.atan();
      complex7.equals(complex5);
      Complex.valueOf((-5376.279));
      Complex complex14 = complex8.tanh();
      complex13.pow(complex4);
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3.347954541376715E-8);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      complex0.divide(0.0);
      complex1.ONE.acos();
      Complex complex3 = complex1.negate();
      complex3.I.abs();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex3.cos();
      complex5.I.reciprocal();
      complex5.log();
      Complex complex6 = Complex.ZERO;
      Complex.valueOf(0.0, (-536.157852));
      Complex complex7 = complex6.pow(1.0);
      complex0.hashCode();
      complex2.getImaginary();
      complex4.nthRoot(289);
      complex2.atan();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex8 = Complex.valueOf(1.0);
      complex4.tanh();
      Complex complex9 = Complex.valueOf(0.0, 642.98326);
      complex9.pow(complex8);
      complex7.getField();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.866294830116931E-164);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.add(3035.9);
      complex0.reciprocal();
      complex3.cosh();
      complex0.sqrt();
      complex0.nthRoot(3850);
      complex2.reciprocal();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.asin();
      complex5.tanh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-5307.75));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.NaN.acos();
      complex4.NaN.log();
      complex4.NaN.divide((-2034.375));
      complex0.ONE.getField();
      Complex complex5 = complex3.cos();
      complex5.ZERO.pow((-3.233204600453039E-9));
      Complex complex6 = complex1.add(complex3);
      complex6.NaN.readResolve();
      complex2.I.sqrt();
      Complex complex7 = Complex.valueOf((-3.233204600453039E-9));
      Complex complex8 = complex2.conjugate();
      complex7.acos();
      Complex complex9 = complex5.multiply((-5307.75));
      complex9.ZERO.multiply(complex0);
      Complex complex10 = complex2.acos();
      complex10.NaN.hashCode();
      complex8.cosh();
      complex5.subtract(complex1);
      complex1.abs();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.220877859149313), 3.347954541376715E-8);
      Complex complex1 = Complex.valueOf((-9.220877859149313), 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(0.0);
      complex1.ONE.acos();
      Complex complex4 = complex1.negate();
      complex4.I.abs();
      complex2.multiply(complex0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex1.divide(0.0);
      List<Complex> list0 = complex5.ZERO.nthRoot(390);
      complex6.NaN.tanh();
      complex2.add(complex5);
      Complex complex7 = complex0.divide(5005.517471112631);
      complex3.readResolve();
      complex7.equals(list0);
      complex4.tanh();
      Complex complex8 = complex6.sqrt1z();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2034.375));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.add((-2034.375));
      complex1.readResolve();
      Complex complex3 = complex1.conjugate();
      complex3.INF.sqrt1z();
      complex1.INF.subtract((-2034.375));
      complex3.conjugate();
      complex1.ZERO.divide(complex3);
      Complex complex4 = Complex.valueOf(0.0);
      complex1.toString();
      Complex complex5 = complex0.INF.createComplex(0.0, 20.0);
      Complex complex6 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(5.031755776868959E226);
      complex7.reciprocal();
      complex7.atan();
      Complex complex8 = complex6.sinh();
      complex8.ONE.hashCode();
      complex4.tanh();
      Complex complex9 = complex5.acos();
      complex9.I.exp();
      complex1.getImaginary();
      complex7.nthRoot(2592);
      Complex complex10 = complex9.atan();
      complex0.equals(complex6);
      complex10.tanh();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-623.81204));
      complex0.toString();
      Complex complex1 = complex0.createComplex((-1872.0), 1239.373654);
      Complex complex2 = complex1.divide(20.0);
      complex2.atan();
      Complex complex3 = complex2.sinh();
      complex2.hashCode();
      complex3.tanh();
      complex1.exp();
      complex1.getImaginary();
      complex0.nthRoot(4958);
      complex0.atan();
      complex2.equals((Object) null);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-2034.375));
      complex0.cos();
      Complex complex1 = complex0.multiply(0.9999999033572144);
      Complex complex2 = Complex.valueOf(0.9999999033572144, 1.5703566842348844);
      complex2.add((-2034.375));
      Complex.valueOf(0.42296930392054016);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.add(4721.8392687);
      complex2.reciprocal();
      complex1.cosh();
      complex4.sqrt();
      // Undeclared exception!
      complex3.nthRoot(5011);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1.31961989402771);
      complex1.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sqrt1z();
      complex3.subtract((-2402.203647));
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = Complex.valueOf(1.31961989402771);
      complex5.toString();
      Complex complex7 = complex1.createComplex(1.557407724654902, 1620.3267);
      Complex complex8 = complex4.divide(7.390383074561107);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.reciprocal();
      complex0.atan();
      Complex complex10 = complex2.sinh();
      complex10.hashCode();
      complex5.tanh();
      complex9.acos();
      complex6.exp();
      complex3.getImaginary();
      Complex complex11 = Complex.INF;
      complex11.nthRoot(2592);
      complex6.atan();
      complex7.equals(complex3);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      complex0.sqrt();
      Complex complex2 = complex1.divide(1962.302069795);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex4.divide((-2.516866097506943E81));
      complex0.nthRoot(390);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf((-2.516866097506943E81));
      complex5.divide(complex3);
      complex3.add(complex1);
      double double0 = 5005.517471112631;
      complex6.divide((double) 390);
      complex4.abs();
      complex0.toString();
      Complex complex7 = Complex.valueOf(1.0);
      complex7.tanh();
      Complex complex8 = Complex.I;
      // Undeclared exception!
      complex8.nthRoot(1069066300);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.divide(1.5703566842348844);
      complex5.sqrt1z();
      complex2.sqrt1z();
      Complex complex6 = Complex.I;
      complex6.log();
      complex6.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf((-385.254), Double.POSITIVE_INFINITY);
      complex0.pow(1.0);
      complex4.hashCode();
      complex4.negate();
      complex3.sinh();
      complex5.subtract(complex1);
      complex5.multiply(2063);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      complex0.divide(0.0);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex1.negate();
      complex4.I.abs();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex1.divide(0.0);
      complex6.ZERO.nthRoot(390);
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = Complex.valueOf(0.0);
      complex2.divide(complex6);
      Complex complex10 = complex9.add(complex6);
      Complex complex11 = complex9.divide(5005.517471112631);
      complex11.ONE.abs();
      Complex complex12 = complex2.reciprocal();
      complex9.atan();
      Complex complex13 = complex10.sinh();
      complex2.hashCode();
      complex2.tanh();
      complex12.acos();
      Complex complex14 = complex12.exp();
      complex3.getImaginary();
      complex7.nthRoot(390);
      Complex complex15 = complex13.atan();
      complex14.equals(complex5);
      Complex complex16 = Complex.valueOf((-685.79193));
      complex16.tanh();
      complex15.pow(complex8);
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.createComplex((-1745.0), (-1745.0));
      complex0.nthRoot(2086);
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.sqrt();
      complex0.getArgument();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.subtract(1962.302069795);
      Complex complex10 = complex6.pow(complex9);
      Complex complex11 = complex9.sinh();
      complex5.sin();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex1.multiply(complex12);
      complex0.readResolve();
      complex1.tanh();
      Complex complex14 = complex13.pow(1962.302069795);
      complex12.add(complex0);
      Complex complex15 = complex11.sin();
      complex9.reciprocal();
      complex11.readResolve();
      complex7.getField();
      complex1.ONE.readResolve();
      complex15.subtract(complex2);
      Complex complex16 = complex14.divide(complex6);
      complex10.sqrt();
      complex16.cosh();
      complex3.cosh();
      complex4.getField();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1071.4078623275575, 1071.4078623275575);
      Complex complex1 = complex0.ZERO.asin();
      complex0.getImaginary();
      complex0.getReal();
      Complex complex2 = complex1.ZERO.cosh();
      complex2.I.getField();
      complex1.divide((-1822.0));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.multiply((-8.040805474833476));
      Complex complex7 = Complex.valueOf(1.0, (-1822.0));
      complex6.pow((-2006.313302));
      complex7.hashCode();
      complex3.negate();
      complex2.sinh();
      complex0.subtract(complex5);
      complex6.multiply((-780));
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.INF.multiply((-1798.76));
      complex1.ONE.getArgument();
      complex0.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.pow(complex0);
      complex2.I.sinh();
      complex3.NaN.sqrt1z();
      complex2.pow(complex0);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.sqrt1z();
      complex5.I.tanh();
      complex0.INF.cosh();
      Complex complex6 = complex1.ZERO.multiply(3670);
      Complex complex7 = complex4.INF.sin();
      complex5.multiply((-1382));
      complex7.sqrt();
      Complex complex8 = complex6.acos();
      complex1.isInfinite();
      complex8.readResolve();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.add((-3327.8));
      complex0.I.pow(Double.NaN);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.sqrt();
      complex2.ONE.acos();
      complex0.log();
      complex1.toString();
      complex1.readResolve();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4036.3440749012157);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex2.ZERO.cos();
      complex5.ONE.cos();
      complex5.INF.subtract(4036.3440749012157);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex6.cosh();
      complex8.NaN.negate();
      complex7.abs();
      complex6.ONE.log();
      Complex complex9 = complex0.I.subtract(complex3);
      complex9.toString();
      complex2.getImaginary();
      complex6.multiply(118.034249686276);
      complex4.toString();
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex3.subtract(complex10);
      complex2.cosh();
      try { 
        complex11.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(278.6, 2.955364187248884E203);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ZERO.atan();
      complex3.ONE.conjugate();
      Complex complex4 = complex0.subtract(Double.NaN);
      Complex complex5 = complex4.ONE.atan();
      complex5.ONE.tanh();
      complex5.INF.tan();
      complex4.divide(Double.NaN);
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.I.sinh();
      complex2.ONE.createComplex(278.6, 0.0);
      complex1.exp();
      complex6.toString();
      complex4.createComplex(702.6446237044, 2.955364187248884E203);
      complex8.INF.subtract(5258.91578309);
      complex1.add(2.955364187248884E203);
      complex3.abs();
      complex2.tanh();
      complex8.sqrt();
      complex9.createComplex(1.0537591246531136E255, 3776.661059024926);
      complex0.cos();
      complex7.getField();
      complex2.abs();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-2484.15457572));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.subtract((-2484.15457572));
      Complex complex3 = complex1.pow((-2484.15457572));
      complex2.tanh();
      complex1.NaN.sqrt();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.sinh();
      complex3.I.getArgument();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.I.negate();
      complex7.I.tanh();
      complex2.sin();
      complex4.createComplex(438.84, 438.84);
      complex7.add(1.0);
      complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      complex0.sqrt();
      Complex complex2 = complex1.divide(1962.302069795);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex2.ONE.log();
      complex0.INF.multiply((-20.0));
      Complex.valueOf(1.0, 1962.302069795);
      complex0.pow(0.0);
      complex1.hashCode();
      Complex complex6 = complex0.negate();
      complex5.sinh();
      complex1.subtract(complex6);
      complex2.multiply(1);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(242.442413);
      complex0.NaN.readResolve();
      complex0.ONE.createComplex((-20.0), (-3516.7891765733784));
      Complex complex1 = complex0.sinh();
      complex1.INF.nthRoot(37);
      Complex complex2 = new Complex(242.442413, (-439.652));
      Complex complex3 = complex0.I.multiply(complex2);
      complex1.add(complex2);
      complex3.subtract(complex1);
      complex1.multiply(0.0);
      complex3.pow((-439.652));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2195.64665233606, 2195.64665233606);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex1.I.sinh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.log();
      complex4.INF.divide(complex3);
      complex4.nthRoot(1163);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1071.4078623275575, 1071.4078623275575);
      Complex complex1 = complex0.ZERO.asin();
      complex0.getImaginary();
      complex0.getReal();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.ZERO.cos();
      complex3.I.getField();
      complex3.INF.createComplex(1071.4078623275575, (-1745.0));
      complex1.nthRoot(2086);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.tanh();
      complex5.ONE.sqrt();
      complex4.ZERO.getArgument();
      Complex complex6 = Complex.ZERO;
      complex6.subtract(0.0);
      complex5.pow(complex6);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex9.NaN.multiply(complex1);
      complex10.readResolve();
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex2.pow((-2627.90502129873));
      complex9.NaN.add(complex11);
      complex5.sin();
      complex1.reciprocal();
      complex2.readResolve();
      complex6.getField();
      complex1.ZERO.subtract(complex9);
      complex9.divide(complex8);
      complex12.sqrt();
      Complex complex13 = complex9.cosh();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.subtract(complex1);
      complex3.I.multiply(498);
      complex0.NaN.nthRoot(417);
      complex1.ONE.readResolve();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.ONE.multiply(complex2);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.NaN.add(0.0);
      complex6.ONE.abs();
      Complex complex8 = complex4.divide(complex0);
      complex8.INF.hashCode();
      Complex complex9 = complex0.multiply((-526));
      Complex complex10 = complex9.I.add(complex0);
      complex10.NaN.pow(4560.2);
      Complex complex11 = complex9.multiply(1.0127761363983154);
      Complex complex12 = complex11.I.tan();
      complex5.negate();
      complex5.toString();
      complex8.nthRoot(417);
      complex10.multiply(complex12);
      Complex complex13 = Complex.valueOf(1.0127761363983154);
      complex7.add((double) 417);
      complex7.conjugate();
      complex13.hashCode();
      Complex complex14 = complex1.divide(4560.2);
      complex14.equals(complex1);
      Complex.valueOf((double) 417);
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = complex0.pow((-1190.9031344808));
      Complex complex5 = complex4.NaN.pow((-1.3782394940142479E-8));
      Complex complex6 = complex4.sin();
      Complex complex7 = complex1.NaN.sqrt();
      Complex complex8 = complex1.sin();
      complex8.ZERO.abs();
      Complex complex9 = complex1.conjugate();
      complex8.INF.asin();
      Complex complex10 = complex9.I.subtract((-1.3782394940142479E-8));
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex8.sqrt();
      complex0.INF.readResolve();
      complex4.NaN.hashCode();
      complex2.divide(complex3);
      Complex complex13 = complex6.add(924.5513294751);
      complex13.acos();
      Complex complex14 = complex12.tanh();
      complex14.I.multiply(924.5513294751);
      complex14.I.readResolve();
      complex2.getArgument();
      Complex complex15 = complex0.subtract((-1190.9031344808));
      complex5.ZERO.subtract(complex7);
      complex3.getArgument();
      complex5.divide((-1.3782394940142479E-8));
      Complex complex16 = complex6.tanh();
      complex1.subtract(complex15);
      complex16.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.31961989402771);
      Complex.valueOf(3544.5621, 1.31961989402771);
      complex1.ONE.add(0.0);
      Complex.valueOf(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.add(0.0);
      complex3.ZERO.reciprocal();
      Complex complex4 = complex1.cosh();
      complex4.ONE.sqrt();
      // Undeclared exception!
      complex1.nthRoot(5011);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = Complex.valueOf((-243.953342));
      complex4.subtract(complex2);
      complex4.I.getArgument();
      complex0.ONE.sin();
      complex1.INF.multiply((-148));
      Complex.valueOf((double) (-148), 2.441415786743164);
      complex3.NaN.exp();
      Complex complex5 = complex1.ZERO.tanh();
      complex5.I.cosh();
      complex0.ONE.sqrt();
      Complex complex6 = complex0.sinh();
      complex6.createComplex(0.0, 0.0);
      complex3.log();
      complex0.acos();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.ZERO.divide(complex1);
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex1.NaN.createComplex(2.551170809294396E-181, 0.0);
      Complex complex5 = complex1.I.sqrt();
      Complex complex6 = complex0.NaN.log();
      Complex complex7 = complex6.multiply((-1286));
      Complex complex8 = complex6.ZERO.acos();
      Complex complex9 = complex6.I.conjugate();
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex1.add((double) (-1286));
      complex12.ONE.divide(complex4);
      Complex complex13 = complex6.ZERO.divide((double) (-1286));
      complex13.NaN.divide(0.0);
      Complex.valueOf(0.0, (-178.3030637869346));
      complex11.abs();
      complex10.getImaginary();
      complex9.getArgument();
      complex5.isNaN();
      complex3.getReal();
      complex1.divide(complex7);
      complex8.sqrt1z();
      complex4.reciprocal();
      Complex.valueOf(Double.NaN, (-456.955029304972));
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.subtract(complex3);
      complex5.ZERO.divide(0.0);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.acos();
      complex7.NaN.abs();
      Complex complex8 = complex6.NaN.createComplex((-3.370929373457322E-8), 2311.4858);
      Complex complex9 = complex4.NaN.multiply((-2150));
      complex9.INF.sqrt();
      complex8.INF.divide(2311.4858);
      Complex complex10 = complex6.sin();
      Complex complex11 = complex2.acos();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex11.I.divide(complex12);
      complex13.ONE.abs();
      complex4.sinh();
      Complex complex14 = complex12.INF.conjugate();
      complex10.hashCode();
      Complex complex15 = complex4.tanh();
      complex15.I.divide(complex2);
      complex11.divide(complex8);
      Complex complex16 = Complex.valueOf((-3.370929373457322E-8), 0.0);
      complex13.I.toString();
      complex16.INF.getField();
      complex14.ONE.tanh();
      complex13.negate();
      complex14.add(complex8);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(1620.3267);
      Complex complex2 = complex0.tan();
      Complex.valueOf(3216.32059);
      Complex complex3 = complex0.reciprocal();
      complex3.ONE.acos();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex2.tanh();
      Complex complex4 = complex2.sqrt1z();
      complex1.pow(0.0);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.nthRoot(719);
      complex0.INF.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.createComplex(1.7260616357651607E137, 3438.3);
      complex2.atan();
      complex2.INF.createComplex((-1170.3777410070875), 0.7853981633974483);
      double double0 = (-308.5875715051624);
      Complex complex3 = complex0.ZERO.subtract((-308.5875715051624));
      complex3.hashCode();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.add((-308.5875715051624));
      complex5.INF.getField();
      Complex complex6 = complex4.I.conjugate();
      complex4.add(complex6);
      complex3.multiply(719);
      Complex complex7 = complex6.ONE.pow(complex3);
      complex7.NaN.sin();
      complex4.hashCode();
      Complex complex8 = complex3.add(complex5);
      complex8.I.cosh();
      complex8.ZERO.add(0.0);
      Complex complex9 = complex8.ONE.sinh();
      complex9.INF.hashCode();
      try { 
        complex6.nthRoot((-2327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,327
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(639.0, Double.NaN);
      Complex complex1 = complex0.conjugate();
      complex0.NaN.getField();
      Complex.valueOf(639.0);
      Complex complex2 = complex0.NaN.add(639.0);
      complex0.NaN.exp();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ZERO.divide(complex1);
      complex5.acos();
      complex2.ONE.acos();
      Complex complex6 = complex1.tan();
      complex6.cos();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex2.divide(0.0);
      complex5.multiply(complex2);
      Complex complex6 = complex0.multiply((-840));
      Complex complex7 = complex6.atan();
      complex1.readResolve();
      complex0.isNaN();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex2.I.subtract(744.7840882485375);
      Complex complex10 = complex9.NaN.pow((-2664.501617965));
      complex10.NaN.hashCode();
      complex5.isNaN();
      complex4.toString();
      complex5.divide(0.0);
      complex7.multiply((-840));
      Complex complex11 = Complex.valueOf((double) (-840), 1437.4430917);
      complex11.ZERO.atan();
      complex8.readResolve();
      Complex complex12 = complex8.asin();
      try { 
        complex12.NaN.nthRoot((-840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -840
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      complex0.ZERO.multiply(complex1);
      complex1.readResolve();
      complex0.getArgument();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.multiply((-49));
      complex3.INF.sqrt();
      complex0.hashCode();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-481.84721971789), (-2695.672489699));
      complex1.NaN.sinh();
      complex1.ZERO.cos();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.add((-2421.1828721166726));
      Complex complex6 = complex2.I.pow((-2421.1828721166726));
      Complex complex7 = complex0.multiply(complex4);
      complex7.abs();
      Complex complex8 = complex0.cos();
      complex3.NaN.asin();
      Complex complex9 = complex3.log();
      complex9.sqrt();
      complex0.atan();
      complex8.readResolve();
      Complex complex10 = complex5.multiply(1);
      Complex.valueOf(Double.NaN, 0.0);
      complex6.divide(complex10);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.INF.atan();
      Complex complex3 = complex2.I.subtract(0.0);
      complex3.asin();
      complex0.ONE.sin();
      complex1.NaN.cosh();
      complex0.NaN.divide(complex2);
      Complex complex4 = complex1.ZERO.add(0.0);
      complex0.log();
      complex0.getImaginary();
      complex2.NaN.add(4363.6244);
      complex0.acos();
      complex3.exp();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex1.isInfinite();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1947.451), 0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ONE.subtract(complex0);
      complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      complex2.subtract((-1947.451));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      complex1.INF.sqrt1z();
      complex1.ONE.exp();
      try { 
        complex1.INF.nthRoot((-341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -341
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3215.9674366), 2.0);
      Complex complex1 = Complex.NaN;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-7.315860999413894E129));
      complex0.tan();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.cosh();
      complex2.NaN.asin();
      complex1.ONE.sin();
      try { 
        complex1.NaN.nthRoot((-248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -248
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-6.746431126005811E-8));
      Complex complex1 = complex0.ONE.subtract((double) 1);
      complex1.INF.getArgument();
      Complex complex2 = complex0.NaN.cosh();
      complex0.nthRoot(1);
      Complex complex3 = complex0.log();
      complex3.multiply((-6.746431126005811E-8));
      complex3.I.toString();
      complex2.NaN.hashCode();
      Complex.valueOf((double) 1);
      Complex complex4 = complex2.negate();
      complex3.abs();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.subtract(complex5);
      int int0 = 2239;
      Complex complex7 = complex6.ZERO.multiply(2239);
      complex7.I.sin();
      complex1.cosh();
      complex1.getReal();
      Complex complex8 = complex4.multiply(2239);
      complex8.I.toString();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex9.add((double) 2239);
      Complex complex11 = complex10.INF.add(complex7);
      try { 
        complex11.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-852.3051270562368));
      complex0.INF.getField();
      complex0.ZERO.readResolve();
      complex0.ONE.abs();
      Complex complex1 = complex0.sqrt();
      complex1.INF.getArgument();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.subtract((-852.3051270562368));
      Complex complex4 = complex3.ONE.acos();
      complex4.I.createComplex(1.0, 458.734997499);
      complex3.INF.subtract(0.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.conjugate();
      Complex complex3 = complex1.sinh();
      complex0.abs();
      Complex complex4 = complex3.I.pow(1127.5150181091087);
      complex3.isInfinite();
      complex3.ZERO.pow(1127.5150181091087);
      complex3.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex3.reciprocal();
      complex7.I.subtract(complex4);
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex5.cos();
      complex9.ONE.sqrt1z();
      Complex complex10 = complex9.INF.subtract((-5620.217));
      complex8.getArgument();
      complex10.NaN.subtract(complex9);
      complex0.multiply(complex3);
      complex6.negate();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex11.ONE.tan();
      Complex complex13 = complex12.ZERO.atan();
      Complex complex14 = complex6.tan();
      complex14.INF.subtract((-1132.171336887559));
      complex8.getArgument();
      complex12.reciprocal();
      complex3.nthRoot(1);
      Complex.valueOf(0.0, 1127.5150181091087);
      complex13.divide((-113.232991534507));
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(2274.575128);
      complex0.ZERO.sqrt();
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = complex0.log();
      complex1.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.hashCode();
      complex0.getField();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1);
      complex1.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.INF.multiply(complex3);
      Complex complex6 = complex2.asin();
      complex1.ONE.tan();
      Complex complex7 = Complex.valueOf((double) 1, 2282.021358774);
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex8.ZERO.reciprocal();
      complex9.negate();
      Complex complex10 = Complex.valueOf(0.0, (-3.1139472791083883E-8));
      complex10.ZERO.atan();
      Complex complex11 = complex1.createComplex(1929.9064, (-3.1139472791083883E-8));
      complex6.cos();
      complex7.getArgument();
      complex11.tan();
      complex7.getReal();
      Complex complex12 = complex1.subtract(complex0);
      complex12.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      complex1.ONE.abs();
      complex1.abs();
      Complex complex2 = complex0.asin();
      complex2.toString();
      complex2.INF.getField();
      complex0.nthRoot(37);
      complex1.hashCode();
      Complex complex3 = complex0.sqrt();
      complex3.getImaginary();
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf((-1398.65102831309), 0.0);
      Complex complex6 = complex4.INF.multiply(complex5);
      complex6.ZERO.atan();
      complex6.NaN.tanh();
      complex6.I.sqrt();
      complex4.I.subtract(complex0);
      Complex complex7 = complex3.cos();
      complex0.NaN.tan();
      complex7.multiply(complex4);
      Complex.valueOf((double) 37, (double) 37);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.conjugate();
      complex0.add(complex1);
      complex0.sqrt();
      Complex complex3 = Complex.valueOf(6217.0);
      complex3.readResolve();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.subtract(6217.0);
      Complex complex6 = complex4.I.subtract(0.9166666666666666);
      complex6.ONE.tan();
      Complex complex7 = complex2.conjugate();
      complex7.INF.log();
      complex7.cosh();
      complex2.getField();
      complex5.ONE.multiply(57.4);
      complex1.sinh();
      complex5.isInfinite();
      complex4.getField();
      Object object0 = new Object();
      complex3.equals(object0);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.createComplex((-800.2437967), (-800.2437967));
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.add(1700.10034969);
      complex2.sinh();
      Complex complex5 = complex2.INF.subtract(625.062596);
      complex5.INF.sinh();
      complex1.I.tanh();
      complex5.ZERO.readResolve();
      complex0.conjugate();
      complex4.NaN.getField();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex4.equals(complex3);
      complex0.subtract(complex3);
      Complex complex7 = complex5.createComplex((-800.2437967), Double.POSITIVE_INFINITY);
      complex6.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1872.0));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.tanh();
      complex0.negate();
      Complex.valueOf(0.0);
      complex0.sqrt();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-641.6519251));
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.I.acos();
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = complex1.multiply((-896));
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex5.I.sqrt1z();
      Complex complex8 = complex1.subtract(0.0);
      Complex complex9 = complex0.NaN.atan();
      Complex complex10 = complex0.I.multiply(2632);
      assertEquals(2632.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex8.ONE.divide(Double.NaN);
      complex8.isNaN();
      Complex complex12 = Complex.valueOf((-4.357990742470246E217), Double.NaN);
      Complex complex13 = complex12.ZERO.tanh();
      Complex complex14 = complex13.multiply((-2042.0));
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex0.sqrt();
      complex11.getField();
      Complex complex16 = complex11.pow(0.0);
      Complex complex17 = complex16.I.multiply(complex4);
      Complex complex18 = complex16.ZERO.atan();
      assertTrue(complex18.equals((Object)complex13));
      
      complex16.getReal();
      Complex complex19 = complex8.atan();
      Complex complex20 = complex19.pow(complex12);
      Complex complex21 = complex20.ZERO.multiply(0.0);
      assertSame(complex20, complex16);
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertSame(complex12, complex17);
      assertSame(complex20, complex9);
      
      complex19.createComplex((-1688.858462129607), 0.0);
      assertEquals(1.1102230246251564E-16, complex19.getImaginary(), 0.01);
      
      complex7.hashCode();
      Complex complex22 = complex6.cos();
      assertEquals(0.8575532158463934, complex22.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex15));
      assertEquals(-0.0, complex22.getImaginary(), 0.01);
  }
}
