/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:42:51 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1368.03, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tanh();
      complex2.I.readResolve();
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex2.NaN.sin();
      Complex complex5 = complex4.ONE.pow(complex3);
      complex1.NaN.pow(1666.60624739);
      complex0.acos();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.ZERO.pow(complex0);
      Complex complex8 = complex0.ZERO.divide(complex1);
      complex8.NaN.divide(complex3);
      Complex complex9 = complex6.multiply(7);
      complex9.ONE.add(1368.03);
      Complex complex10 = complex2.I.subtract(1666.60624739);
      Complex complex11 = complex1.cos();
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex12.sqrt1z();
      complex0.abs();
      Complex complex15 = complex5.tan();
      complex11.asin();
      complex12.tanh();
      complex5.nthRoot(7);
      complex13.nthRoot(7);
      complex2.sinh();
      complex7.ONE.readResolve();
      complex1.multiply(1.000000000426153);
      complex10.pow(complex1);
      complex14.readResolve();
      complex15.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1950.27853728348), (-20.0));
      Complex complex1 = complex0.sin();
      complex1.ONE.reciprocal();
      complex0.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2324.1194482595);
      complex0.abs();
      Complex complex1 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, 2324.1194482595);
      Complex complex2 = complex0.multiply(2324.1194482595);
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex1.cosh();
      complex1.INF.abs();
      complex0.NaN.toString();
      Complex complex5 = complex2.multiply(878);
      Complex complex6 = complex2.NaN.log();
      Complex complex7 = complex5.ZERO.add(complex1);
      Complex complex8 = complex5.ZERO.createComplex(1380.90715733658, 1.0);
      Complex complex9 = complex2.multiply(complex5);
      complex9.subtract(complex2);
      complex8.ZERO.atan();
      Complex complex10 = complex4.multiply((-1090));
      complex0.getField();
      complex3.subtract((double) (-1090));
      complex8.sinh();
      complex3.subtract(complex5);
      complex7.sin();
      complex3.multiply(2324.1194482595);
      complex8.multiply((-20.0));
      complex10.createComplex((-1183.99629294), (-1183.99629294));
      complex9.acos();
      complex6.subtract((-20.0));
      complex10.atan();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(522.6458880980249);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = Complex.valueOf(1.670170240686275E-5, (-387.567));
      Complex complex6 = complex5.I.divide(complex0);
      Complex complex7 = Complex.valueOf(1.670170240686275E-5, (-387.567));
      complex7.sqrt();
      Complex complex8 = complex1.subtract(complex4);
      Complex complex9 = complex6.createComplex(522.6458880980249, 1.670170240686275E-5);
      Complex complex10 = complex3.multiply((-1));
      complex2.toString();
      Complex.valueOf(3320.691329582);
      Complex complex11 = complex6.sin();
      complex6.abs();
      complex11.I.abs();
      complex2.conjugate();
      complex10.asin();
      Complex complex12 = Complex.valueOf(522.6458880980249, 2.1836166619192508E256);
      Complex complex13 = Complex.valueOf(0.001913341370845043);
      Complex complex14 = complex9.createComplex(3158.48007668, (-212.7886734984));
      complex14.INF.negate();
      complex8.getArgument();
      complex3.getReal();
      complex13.getImaginary();
      complex11.sqrt1z();
      complex3.getImaginary();
      complex10.isInfinite();
      complex0.multiply((-1));
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9798400214266225, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.cos();
      complex1.ZERO.log();
      complex0.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.ZERO;
      complex2.multiply(complex3);
      Complex complex4 = complex2.cosh();
      complex4.NaN.acos();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2294.707, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.sin();
      complex1.getArgument();
      Complex complex2 = complex0.multiply(1521);
      Complex complex3 = complex2.INF.sqrt();
      complex1.INF.abs();
      Complex complex4 = complex0.INF.sin();
      complex4.conjugate();
      Complex complex5 = complex2.ZERO.multiply(2294.707);
      Complex complex6 = complex2.pow(complex1);
      complex5.tan();
      Complex complex7 = complex3.cosh();
      complex7.toString();
      complex6.sinh();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex4.exp();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1093.143), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.asin();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sinh();
      complex1.I.multiply(0.0);
      complex1.atan();
      try { 
        complex2.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.multiply(1.3195548295785448E-262);
      complex3.asin();
      complex1.conjugate();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1.422572183137364), 1264);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.subtract(921.482942630208);
      complex1.abs();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex3.cos();
      complex4.cos();
      complex3.log();
      Complex complex5 = Complex.I;
      complex2.equals(complex5);
      complex5.getField();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf(921.482942630208);
      Complex complex8 = complex7.sinh();
      Complex complex9 = new Complex(20.0);
      complex8.subtract(1.0);
      Complex complex10 = Complex.ONE;
      complex10.sqrt();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.asin();
      Complex complex3 = complex1.conjugate();
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.INF.createComplex((-126.99296234), (-0.7071067811865476));
      Complex complex2 = complex0.ONE.sin();
      complex2.INF.negate();
      complex0.tanh();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.NaN.hashCode();
      complex1.subtract(Double.NaN);
      Complex complex2 = new Complex(Double.NaN, 162.089);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow((-2502.2093838712362));
      Complex complex3 = complex0.add(Double.NaN);
      complex3.getArgument();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.sqrt();
      complex0.subtract(1391.83125983);
      Complex complex2 = complex1.multiply(complex0);
      complex1.abs();
      Complex complex3 = Complex.valueOf(20.0, 870.45);
      Complex complex4 = complex1.cos();
      complex4.cos();
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.I;
      complex6.equals(complex0);
      complex3.getField();
      Complex complex7 = Complex.ZERO;
      complex5.pow(complex6);
      complex3.sinh();
      Complex complex8 = new Complex(20.0);
      complex8.subtract(2691.0);
      complex5.sqrt();
      complex2.tan();
      complex5.pow(complex0);
      complex2.nthRoot(1476);
      Complex.valueOf(1391.83125983);
      complex2.subtract(1.3195548295785448E-262);
      Complex complex9 = new Complex((-1.0));
      complex3.hashCode();
      Complex.valueOf((-820.0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      complex1.INF.getField();
      Complex complex2 = complex0.subtract(920.308362);
      Complex complex3 = complex2.multiply(complex0);
      complex3.abs();
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      complex3.nthRoot(2691);
      complex0.negate();
      complex4.sqrt();
      complex4.tanh();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      complex5.cos();
      Complex complex6 = Complex.INF;
      complex6.cosh();
      complex6.multiply(2691);
      complex2.tan();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.reciprocal();
      complex2.nthRoot(2691);
      Complex.valueOf((double) 2691);
      Complex complex3 = Complex.valueOf((double) 2691);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.tanh();
      complex4.abs();
      Complex.valueOf(3.4674011002723395, (-0.0017086718116605588));
      complex1.log();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.divide(0.3485364317893982);
      Complex complex8 = complex7.cosh();
      complex7.sin();
      Complex complex9 = complex4.createComplex(0.7071067811865476, 465.16874219);
      Complex complex10 = Complex.I;
      Complex complex11 = complex6.divide(complex9);
      complex8.multiply(22.6176342013);
      complex11.conjugate();
      Complex complex12 = complex5.pow(complex4);
      Complex complex13 = new Complex(4.8926595743317624E162, 2012.03846557);
      Complex complex14 = complex13.sqrt1z();
      complex12.subtract(complex3);
      complex14.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-242.07), 2010.99398);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(1448.686, 2010.99398);
      complex4.log();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.divide(2010.99398);
      complex1.cosh();
      complex1.sin();
      complex5.createComplex((-51.525), 1153.1547385297322);
      Complex complex7 = Complex.I;
      complex7.divide(complex0);
      Complex.valueOf(5.3393125705958075E87, (-51.525));
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.I.reciprocal();
      complex9.INF.add(complex6);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.multiply(complex2);
      complex3.toString();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.INF;
      complex4.I.cos();
      Complex complex6 = Complex.valueOf(0.0, (-4.402550702194912E-8));
      complex6.exp();
      complex2.sqrt();
      Complex complex7 = complex4.tanh();
      complex7.reciprocal();
      complex4.nthRoot(37);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(3.141592653589793, 20.0);
      complex2.cos();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.NaN;
      complex2.isInfinite();
      complex2.getField();
      Complex complex8 = Complex.ZERO;
      complex5.pow(complex2);
      complex5.sinh();
      Complex complex9 = new Complex(10.012499999999998);
      complex4.subtract(407.3278398291);
      complex5.sqrt();
      complex5.tan();
      Complex complex10 = Complex.NaN;
      complex10.pow(complex6);
      complex3.nthRoot(1476);
      Complex.valueOf(1211.351);
      complex7.subtract(20.0);
      Complex complex11 = new Complex(1117.548591);
      complex2.hashCode();
      Complex.valueOf((-3066.95162));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(407.3278398291, 407.3278398291);
      complex0.getArgument();
      complex0.ZERO.sin();
      complex0.getField();
      complex0.acos();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.tan();
      Complex complex2 = complex1.INF.subtract(2255.463405128);
      Complex complex3 = complex2.I.multiply(complex1);
      complex2.ZERO.abs();
      Complex complex4 = complex0.multiply(complex1);
      complex4.NaN.cos();
      complex1.INF.cos();
      Complex complex5 = complex0.log();
      complex5.abs();
      complex0.NaN.toString();
      Complex complex6 = complex1.createComplex((-3042.015749234619), 496.3908);
      Complex.valueOf(3028.214);
      Complex complex7 = complex6.NaN.pow(complex0);
      complex4.tanh();
      complex0.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, 496.3908);
      complex0.NaN.log();
      complex3.negate();
      Complex complex8 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex9.sin();
      complex10.NaN.createComplex((-3042.015749234619), 0.0);
      Complex complex11 = Complex.I;
      complex0.divide(complex11);
      complex11.multiply(1.3195548295785448E-262);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      complex11.pow(complex12);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.multiply(complex2);
      complex3.toString();
      complex0.conjugate();
      complex2.tan();
      Complex complex4 = new Complex((-494.98591685));
      complex4.getImaginary();
      Complex complex5 = Complex.INF;
      complex0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.tan();
      complex2.I.acos();
      Complex complex3 = complex1.INF.subtract(2255.463405128);
      complex3.I.multiply(complex1);
      complex3.ZERO.abs();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.NaN.cos();
      complex1.INF.cos();
      Complex complex6 = complex0.log();
      complex6.abs();
      complex0.NaN.toString();
      complex1.equals("org.apache.commons.math3.complex.Complex");
      Complex complex7 = complex1.createComplex((-3042.015749234619), 496.3908);
      Complex complex8 = Complex.valueOf(3028.214);
      complex7.NaN.pow(complex0);
      complex4.tanh();
      complex0.abs();
      Complex complex9 = new Complex((-20.0), 928.7843998071);
      complex8.getImaginary();
      Complex complex10 = new Complex((-3042.015749234619));
      complex5.equals(complex8);
      Complex complex11 = complex9.reciprocal();
      complex11.add((-1.0));
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2294.707));
      Complex complex1 = complex0.INF.divide(complex0);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.createComplex((-2294.707), (-2294.707));
      Complex complex4 = Complex.valueOf((-3604.5173266705365));
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex2.tanh();
      complex5.abs();
      Complex.valueOf(20.0, (-3604.5173266705365));
      complex5.log();
      complex5.divide(6.283185307179586);
      complex4.cosh();
      complex3.sin();
      complex6.createComplex(3028.214, (-2294.707));
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.divide(complex0);
      complex6.multiply((-3604.5173266705365));
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex4.pow(complex2);
      complex9.sqrt1z();
      complex9.conjugate();
      complex8.nthRoot(1347);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-904.8040186381158), (-904.8040186381158));
      Complex complex1 = complex0.add(0.0);
      complex1.multiply(371);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.INF.subtract(2255.463405128);
      Complex complex4 = complex3.I.multiply(complex1);
      complex3.ZERO.abs();
      Complex complex5 = complex0.multiply(complex1);
      complex5.NaN.cos();
      complex1.INF.cos();
      Complex complex6 = complex0.log();
      complex6.abs();
      complex0.NaN.toString();
      Complex complex7 = complex1.createComplex((-3042.015749234619), 496.3908);
      Complex.valueOf(3028.214);
      complex7.NaN.pow(complex0);
      complex5.tanh();
      complex0.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, 496.3908);
      complex0.NaN.log();
      complex4.negate();
      Complex complex8 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex9.sin();
      complex10.NaN.createComplex((-3042.015749234619), 0.0);
      Complex complex11 = Complex.I;
      complex0.divide(complex11);
      Complex complex12 = complex11.multiply(1.3195548295785448E-262);
      complex3.conjugate();
      complex12.pow(complex2);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.reciprocal();
      Complex complex2 = Complex.INF;
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2257.010075), (-2257.010075));
      Complex complex1 = complex0.NaN.conjugate();
      complex1.I.getField();
      complex0.getReal();
      Complex complex2 = complex0.add((-2257.010075));
      Complex complex3 = complex0.INF.add(complex2);
      complex2.I.readResolve();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.INF.add(complex2);
      Complex complex6 = complex2.ZERO.divide((-2257.010075));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.I.multiply(complex7);
      complex0.INF.conjugate();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex2.ZERO.cosh();
      complex7.I.add((-2257.010075));
      Complex complex11 = complex4.negate();
      Complex complex12 = complex7.I.add((-2257.010075));
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex5.add((-2257.010075));
      Complex complex15 = complex14.ZERO.pow((-2257.010075));
      Complex complex16 = complex6.ZERO.divide((-2257.010075));
      complex14.I.reciprocal();
      Complex complex17 = complex6.subtract(complex8);
      complex17.ONE.subtract(complex12);
      complex9.getReal();
      complex6.acos();
      complex11.pow((-2257.010075));
      complex15.readResolve();
      complex1.log();
      complex13.divide(complex3);
      complex16.abs();
      Complex.valueOf(484.12694, 0.6420149920119997);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.557407724654902, 1.557407724654902);
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-904.8040186381158), (-904.8040186381158));
      Complex complex1 = complex0.add(0.0);
      complex1.ONE.tanh();
      complex1.ONE.toString();
      complex0.cos();
      Complex.valueOf(0.2716749946478336);
      complex0.cosh();
      Complex complex2 = Complex.NaN;
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      complex1.NaN.hashCode();
      complex0.ZERO.nthRoot(2691);
      complex0.negate();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.sqrt();
      complex2.tanh();
      complex1.cos();
      Complex complex4 = complex0.cosh();
      complex4.ZERO.reciprocal();
      complex0.pow((-0.9999932418048435));
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex1.subtract(complex0);
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.subtract(complex1);
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = Complex.valueOf(432.7648225, 432.7648225);
      complex5.I.multiply(complex2);
      complex0.cosh();
      complex2.pow((-20.0));
      Complex complex6 = Complex.valueOf((-20.0));
      complex1.INF.exp();
      complex2.cos();
      Complex complex7 = complex6.pow(4.613370086898618E-4);
      complex1.ONE.divide((-1257.112575256));
      complex6.divide(complex5);
      complex6.exp();
      Complex complex8 = complex7.exp();
      complex8.I.pow((-20.0));
      complex2.subtract(0.41065990924835205);
      complex7.atan();
      complex4.multiply(17);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(20.0, 0.0);
      complex2.createComplex(1715.684906349131, 20.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex3.tanh();
      complex3.abs();
      Complex.valueOf(20.0, 2174.07990864);
      complex5.log();
      complex2.negate();
      complex5.divide(3028.214);
      Complex complex6 = complex4.cosh();
      complex2.sin();
      Complex complex7 = complex2.createComplex(3028.214, 1.5707963267948966);
      Complex complex8 = Complex.I;
      complex3.divide(complex0);
      complex1.multiply(2174.07990864);
      complex8.conjugate();
      complex5.pow(complex6);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-904.8040186381158), (-904.8040186381158));
      Complex complex1 = complex0.add(complex0);
      complex0.nthRoot(1429);
      complex1.negate();
      complex0.hashCode();
      complex0.exp();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.reciprocal();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.multiply(complex2);
      complex0.toString();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.createComplex(1.0177335739135742, 1.0177335739135742);
      Complex complex5 = complex1.tan();
      complex0.getImaginary();
      complex3.equals(complex3);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(4335.224655);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.subtract(complex2);
      complex1.sqrt();
      complex3.INF.pow(complex2);
      Complex complex4 = complex2.atan();
      complex4.pow(complex2);
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.9988669524902153, Double.POSITIVE_INFINITY);
      complex1.multiply(2.724061660966311);
      Complex complex2 = Complex.I;
      complex2.conjugate();
      Complex complex3 = complex0.pow(complex2);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = Complex.valueOf(2255.463405128, 2255.463405128);
      Complex complex5 = complex4.I.multiply(complex1);
      complex4.ZERO.abs();
      Complex complex6 = complex0.multiply(complex1);
      complex6.NaN.cos();
      complex1.INF.cos();
      Complex complex7 = Complex.I;
      complex7.abs();
      complex0.NaN.toString();
      complex1.equals("org.apache.commons.math3.complex.Complex");
      Complex complex8 = complex1.createComplex((-3042.015749234619), 496.3908);
      Complex.valueOf(3028.214);
      complex8.NaN.pow(complex0);
      complex6.tanh();
      complex0.abs();
      Complex.valueOf(1.0, 1448.686);
      complex0.NaN.log();
      complex5.negate();
      Complex complex9 = complex3.divide(1.0);
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex10.sin();
      complex11.NaN.createComplex((-3042.015749234619), 0.0);
      Complex complex12 = Complex.I;
      Complex complex13 = complex0.divide(complex12);
      complex13.multiply((-2172));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = new Complex(0.16494746622534714, 0.16494746622534714);
      complex2.add(complex3);
      complex1.toString();
      Complex complex4 = complex0.conjugate();
      complex1.createComplex((-1509.0376), (-20.0));
      Complex complex5 = Complex.valueOf(0.0, (-1509.0376));
      complex5.INF.pow(0.16494746622534714);
      complex5.tan();
      complex1.getImaginary();
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      complex0.ONE.readResolve();
      Complex complex1 = complex0.createComplex(870.78590861375, 870.78590861375);
      Complex complex2 = complex1.I.atan();
      complex2.ONE.cos();
      complex0.hashCode();
      Complex complex3 = Complex.valueOf(870.78590861375);
      complex1.I.getArgument();
      Complex complex4 = (Complex)complex1.readResolve();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex1.sinh();
      Complex complex7 = new Complex(811.9296, 1.5707963267948966);
      complex7.subtract(811.9296);
      complex0.sqrt();
      Complex complex8 = complex6.tan();
      complex0.pow(complex3);
      complex4.tan();
      complex4.subtract(1.184154459111628E-8);
      complex5.hashCode();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex3.I.reciprocal();
      complex0.readResolve();
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.INF.cosh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.ONE.divide(complex7);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex9.ONE.asin();
      complex10.NaN.add(0.0);
      complex0.NaN.getField();
      Complex complex11 = complex10.ZERO.sqrt();
      complex11.equals(complex4);
      Object object0 = new Object();
      complex5.equals("org.apache.commons.math3.complex.Complex");
      complex7.atan();
      complex6.divide(complex4);
      complex5.divide(complex11);
      Complex complex12 = new Complex(0.0);
      complex12.getImaginary();
      try { 
        complex10.nthRoot((-321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -321
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      complex1.NaN.hashCode();
      int int0 = 2691;
      complex0.ZERO.nthRoot(2691);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.add((double) 2691);
      complex0.getField();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.pow(complex2);
      complex5.sinh();
      Complex complex6 = complex3.subtract((double) 2691);
      complex4.sqrt();
      Complex complex7 = Complex.valueOf((double) 2691);
      complex7.tan();
      complex3.pow(complex1);
      complex6.tan();
      // Undeclared exception!
      complex5.nthRoot(2691);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.I.reciprocal();
      complex0.readResolve();
      complex0.log();
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.ONE.divide(complex5);
      Complex complex7 = complex6.ONE.tan();
      complex5.negate();
      Complex complex8 = Complex.ONE;
      complex7.exp();
      Complex complex9 = complex4.sqrt();
      complex6.tanh();
      complex1.cos();
      Complex complex10 = Complex.ONE;
      complex10.cosh();
      Complex complex11 = new Complex(3101.29014, 3101.29014);
      complex11.pow(1707.085434817);
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(856.32466615);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.tanh();
      complex2.getField();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.add(complex3);
      complex1.sinh();
      Complex complex5 = complex4.multiply(856.32466615);
      Complex complex6 = complex2.asin();
      complex6.tanh();
      complex5.negate();
      complex4.cos();
      complex3.readResolve();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1083.835031779971));
      Complex complex2 = complex1.pow((-1083.835031779971));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.INF;
      complex4.acos();
      complex3.reciprocal();
      Complex complex5 = complex3.multiply(complex1);
      complex5.toString();
      complex3.conjugate();
      complex5.createComplex((-1083.835031779971), Double.POSITIVE_INFINITY);
      complex3.tan();
      complex1.getImaginary();
      Object object0 = new Object();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex3.I.reciprocal();
      complex0.readResolve();
      complex0.log();
      Complex complex5 = complex2.INF.cosh();
      Complex complex6 = complex5.ONE.divide(complex2);
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex8.NaN.add(0.0);
      complex0.NaN.getField();
      Complex complex10 = complex8.ZERO.sqrt();
      Complex complex11 = complex10.NaN.pow(complex1);
      complex11.NaN.sinh();
      Complex complex12 = complex1.subtract((-40.3));
      complex12.NaN.sqrt();
      complex12.I.tan();
      complex12.pow(complex2);
      Complex complex13 = complex12.tan();
      complex9.nthRoot(929);
      complex0.subtract((-1479.3));
      complex6.hashCode();
      complex13.sinh();
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tan();
      complex2.I.acos();
      Complex complex3 = complex1.INF.subtract(2255.463405128);
      Complex complex4 = complex3.I.multiply(complex1);
      complex3.ZERO.abs();
      Complex complex5 = complex0.multiply(complex1);
      complex5.NaN.cos();
      complex1.INF.cos();
      Complex complex6 = complex0.log();
      complex6.abs();
      complex0.NaN.toString();
      complex1.equals("org.apache.commons.math3.complex.Complex");
      complex1.createComplex((-3042.015749234619), 496.3908);
      complex1.sqrt();
      Complex complex7 = complex2.pow(complex6);
      complex3.sinh();
      complex2.subtract((-230.48192));
      complex7.sqrt();
      Complex complex8 = complex3.tan();
      Complex complex9 = new Complex(0.0, (-811.9296));
      complex9.pow(complex3);
      Complex complex10 = complex1.tan();
      complex3.nthRoot(929);
      complex8.subtract(Double.POSITIVE_INFINITY);
      complex4.hashCode();
      complex0.sinh();
      complex10.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = (Complex)complex0.readResolve();
      complex0.log();
      Complex complex6 = complex2.INF.cosh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.ONE.divide(complex7);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex9.ONE.asin();
      complex10.NaN.add(0.0);
      complex0.NaN.getField();
      Complex complex11 = complex10.ZERO.sqrt();
      Complex complex12 = complex11.NaN.pow(complex1);
      complex12.NaN.sinh();
      Complex complex13 = complex1.subtract((-40.3));
      complex13.NaN.sqrt();
      complex13.I.tan();
      Complex complex14 = complex13.pow(complex2);
      complex14.subtract(Double.POSITIVE_INFINITY);
      complex8.hashCode();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex15 = complex4.divide(complex5);
      complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.createComplex(870.78590861375, 870.78590861375);
      Complex complex3 = complex2.I.atan();
      complex3.ONE.cos();
      Complex complex4 = Complex.valueOf(870.78590861375);
      complex4.hashCode();
      Complex.valueOf(2.18148413750896E-4);
      complex2.getArgument();
      complex4.readResolve();
      Complex complex5 = Complex.ONE;
      complex1.equals(complex5);
      Object object0 = new Object();
      Object object1 = new Object();
      complex1.equals(object1);
      complex2.atan();
      complex1.divide(complex2);
      complex0.divide(complex3);
      Complex complex6 = new Complex(2350.176219606);
      complex6.getImaginary();
      complex6.nthRoot(266);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.createComplex(870.78590861375, 870.78590861375);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.ONE.cos();
      complex0.hashCode();
      Complex.valueOf(870.78590861375);
      complex4.getArgument();
      complex2.readResolve();
      Complex complex5 = Complex.ONE;
      complex5.equals(complexField0);
      Object object0 = new Object();
      complex4.equals(complex3);
      Complex complex6 = complex5.atan();
      complex0.divide(complex2);
      complex0.divide(complex1);
      complex6.getImaginary();
      complex6.nthRoot(266);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(1.2300209999084473);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.exp();
      complex0.divide(complex1);
      Complex complex3 = complex1.sqrt1z();
      complex1.toString();
      complex2.acos();
      complex2.negate();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.INF.tan();
      complex5.ONE.multiply(1.2300209999084473);
      Complex complex6 = complex4.createComplex(1.2300209999084473, 2409.9697);
      Complex complex7 = Complex.INF;
      complex3.multiply(complex7);
      complex6.atan();
      complex4.tan();
      complex1.multiply((-424));
      Complex.valueOf(1.2300209999084473);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.I.reciprocal();
      complex0.readResolve();
      complex0.log();
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.ONE.divide(complex5);
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex8.NaN.add(0.0);
      complex0.NaN.getField();
      Complex complex10 = complex8.ZERO.sqrt();
      Complex complex11 = complex10.NaN.pow(complex1);
      complex11.NaN.sinh();
      Complex complex12 = complex1.subtract((-40.3));
      Complex complex13 = complex12.NaN.sqrt();
      complex12.I.tan();
      Complex complex14 = complex12.pow(complex2);
      complex12.tan();
      complex9.nthRoot(929);
      complex14.subtract(Double.POSITIVE_INFINITY);
      complex6.hashCode();
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2168.7946);
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.reciprocal();
      complex2.hashCode();
      complex1.INF.toString();
      Complex complex3 = complex0.subtract(complex2);
      complex3.asin();
      Complex complex4 = complex0.log();
      complex4.abs();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-738.2289513));
      Complex complex1 = complex0.pow((-738.2289513));
      Complex complex2 = complex1.ONE.asin();
      complex2.ONE.acos();
      Complex complex3 = complex0.asin();
      complex3.ZERO.sqrt1z();
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.NaN;
      complex4.INF.divide(complex5);
      complex3.sin();
      complex0.add((-738.2289513));
      complex2.multiply(complex3);
      Complex.valueOf(654.377083);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2540.611938782, 2540.611938782);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.INF.negate();
      Complex complex3 = complex1.I.reciprocal();
      complex3.pow((-2254.73));
      complex3.INF.readResolve();
      complex0.getReal();
      complex0.I.multiply(1);
      complex0.ZERO.divide(2540.611938782);
      complex1.readResolve();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 1.0);
      Complex complex1 = complex0.pow((-28.36344259863));
      complex0.pow(20.0);
      Complex complex2 = complex1.acos();
      complex2.readResolve();
      Complex complex3 = complex0.I.negate();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.NaN.atan();
      complex2.ONE.atan();
      complex2.nthRoot(804);
      complex0.cosh();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex((-1.0), 0.0);
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.pow(1.0);
      Complex complex5 = complex4.INF.reciprocal();
      complex4.ZERO.asin();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.I.cos();
      complex7.NaN.exp();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex0.pow(complex3);
      Complex complex10 = complex8.multiply(1);
      complex10.ONE.sqrt1z();
      Complex complex11 = complex10.cosh();
      complex10.ONE.reciprocal();
      complex3.acos();
      Complex complex12 = Complex.valueOf((-940.65), (-2605.5460937363687));
      complex12.ZERO.getField();
      complex2.isNaN();
      complex8.abs();
      complex9.abs();
      Complex complex13 = complex0.sinh();
      complex13.ONE.sqrt();
      Complex complex14 = complex6.cosh();
      complex0.INF.subtract(0.0);
      complex11.hashCode();
      Complex complex15 = complex3.tanh();
      Object object0 = complex13.readResolve();
      complex15.ZERO.divide(1039.9880415);
      complex3.equals(object0);
      complex8.hashCode();
      complex15.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex0.toString();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.I.multiply(complex2);
      complex5.nthRoot(1769);
      complex3.conjugate();
      Complex complex6 = complex3.tanh();
      complex6.INF.divide(0.0);
      complex0.sinh();
      complex0.abs();
      Complex complex7 = complex2.subtract(0.0);
      Complex complex8 = complex7.I.pow((double) 1769);
      complex8.I.getField();
      Complex complex9 = complex7.I.add(complex0);
      Complex complex10 = complex1.sinh();
      complex10.ZERO.acos();
      complex10.abs();
      Complex complex11 = complex2.INF.add(complex5);
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      complex11.ZERO.subtract(complex12);
      complex4.NaN.pow(1474.04363);
      complex4.getImaginary();
      complex5.nthRoot(542);
      complex3.add(Double.NaN);
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-155.9398), (-155.9398));
      Complex complex1 = complex0.tanh();
      complex1.INF.pow(complex0);
      complex1.INF.exp();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(0.0, 2351.176219606);
      Complex complex3 = complex2.ONE.subtract(2351.176219606);
      complex2.atan();
      complex3.createComplex(2351.176219606, 2536.056683486);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.subtract((-1889.438942491061));
      complex0.readResolve();
      Complex complex3 = complex2.cos();
      complex3.INF.divide(complex1);
      complex3.I.asin();
      complex2.readResolve();
      complex1.tan();
      Complex complex4 = complex0.log();
      complex4.cosh();
      complex1.sin();
      complex0.tan();
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1146.0089, 1146.0089);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.INF.divide(complex2);
      complex3.NaN.atan();
      complex3.ZERO.add(complex2);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.ZERO;
      complex1.add(complex5);
      Complex complex6 = complex0.NaN.atan();
      complex6.I.sinh();
      complex0.asin();
      complex4.I.sinh();
      complex4.INF.pow(0.0);
      Complex complex7 = complex4.add(complex1);
      complex4.asin();
      complex7.conjugate();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-1460.2));
      Complex complex1 = complex0.I.add((-1460.2));
      Complex complex2 = complex1.ZERO.acos();
      complex2.I.sinh();
      Complex complex3 = complex1.INF.log();
      Complex.valueOf((-1460.2), 0.0);
      complex3.ZERO.log();
      complex1.NaN.hashCode();
      complex0.getImaginary();
      complex0.getImaginary();
      complex0.pow(2.681370735168457);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.tanh();
      complex2.sqrt();
      complex0.abs();
      complex0.abs();
      Complex complex3 = complex0.tanh();
      complex3.readResolve();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(4808.75166311667, 1.0833697012353316E-7);
      complex0.getField();
      Complex.valueOf((-1912.8324588129), 4808.75166311667);
      Complex complex1 = complex0.sinh();
      complex1.atan();
      complex0.NaN.tan();
      complex0.pow((-1098.318085));
      Complex.valueOf((-1098.318085), 4808.75166311667);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      complex1.INF.subtract(2402.189112);
      Complex complex2 = complex1.add(complex0);
      complex2.INF.multiply(complex0);
      Complex complex3 = complex0.INF.cos();
      complex0.ZERO.hashCode();
      complex0.NaN.pow(complex2);
      Complex complex4 = complex0.acos();
      complex4.reciprocal();
      complex2.INF.tan();
      complex4.multiply((-92.96979161));
      Complex complex5 = complex3.sinh();
      complex5.ONE.getField();
      complex1.getReal();
      complex5.abs();
      complex2.multiply(6.283185307179586);
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(522.6458880980249);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.cos();
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.NaN.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex0.NaN.negate();
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex2);
      assertSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = Complex.valueOf(1.670170240686275E-5, (-387.567));
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex5.I.divide(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = Complex.valueOf(1.670170240686275E-5, (-387.567));
      assertEquals((-387.567), complex7.getImaginary(), 0.01);
      assertEquals(1.670170240686275E-5, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertFalse(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      
      Complex complex8 = complex1.subtract(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex8);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = complex6.createComplex(522.6458880980249, 1.670170240686275E-5);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(522.6458880980249, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(1.670170240686275E-5, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      
      Complex complex10 = complex3.multiply((-1));
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex8);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex10);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex7);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex5);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex8);
      assertSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      
      String string0 = complex2.toString();
      assertEquals("(NaN, NaN)", string0);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex11 = Complex.valueOf(3320.691329582);
      assertEquals(3320.691329582, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex7));
      
      Complex complex12 = complex6.sin();
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0019133425382625861, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex5);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      
      double double0 = complex6.abs();
      assertEquals(0.001913341370845043, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex5));
      
      double double1 = complex12.I.abs();
      assertEquals(1.0, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0019133425382625861, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex5);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex13 = complex2.conjugate();
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertTrue(complex13.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex13, complex12);
      assertSame(complex13, complex3);
      assertNotSame(complex13, complex7);
      assertSame(complex13, complex4);
      assertSame(complex13, complex10);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertSame(complex13, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex8);
      assertSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex14 = complex10.asin();
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex12);
      assertSame(complex14, complex3);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex11);
      assertSame(complex14, complex10);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertSame(complex14, complex13);
      assertSame(complex14, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertSame(complex2, complex8);
      assertSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex8);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex13);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex12);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex14);
      assertNotSame(complex10, complex11);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertSame(complex10, complex8);
      assertSame(complex10, complex13);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      
      Complex complex15 = Complex.valueOf(522.6458880980249, 2.1836166619192508E256);
      assertEquals(2.1836166619192508E256, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(522.6458880980249, complex15.getReal(), 0.01);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex0);
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex0));
      
      Complex complex16 = Complex.valueOf(0.001913341370845043);
      assertFalse(complex16.isInfinite());
      assertEquals(0.001913341370845043, complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isNaN());
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex3);
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex3));
      
      Complex complex17 = complex9.createComplex(3158.48007668, (-212.7886734984));
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-212.7886734984), complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(3158.48007668, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(522.6458880980249, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(1.670170240686275E-5, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex13);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex17);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex16));
      
      Complex complex18 = complex17.INF.negate();
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-212.7886734984), complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(3158.48007668, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex18.getImaginary(), 0.01);
      assertTrue(complex18.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(522.6458880980249, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(1.670170240686275E-5, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex2);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex6);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex13);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex17);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex17));
      
      double double2 = complex8.getArgument();
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertSame(complex4, complex14);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex12);
      assertSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex18);
      assertSame(complex4, complex13);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex12);
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex9);
      assertSame(complex8, complex10);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex17);
      assertSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex13);
      assertSame(complex8, complex14);
      assertSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex18));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex17));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex15));
      
      double double3 = complex3.getReal();
      assertEquals(Double.NaN, double3, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex15);
      assertSame(complex2, complex8);
      assertSame(complex2, complex13);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex8);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex13);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex17);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex17));
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = complex16.getImaginary();
      assertEquals(0.0, double4, 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(0.001913341370845043, complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isNaN());
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex3);
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex18));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex3));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      Complex complex19 = complex12.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.670170240686275E-5, complex5.getReal(), 0.01);
      assertEquals((-387.567), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.001913341370845043, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals(1.000001830438159, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0019133425382625861, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex19);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex17);
      assertNotSame(complex12, complex18);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex19);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex15);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex17));
      assertFalse(complex12.equals((Object)complex18));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex16));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex14));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex15));
      
      double double5 = complex3.getImaginary();
      assertEquals(Double.NaN, double5, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex15);
      assertSame(complex2, complex8);
      assertSame(complex2, complex13);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex8);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex19);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex13);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex17);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex7));
      
      boolean boolean0 = complex10.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.4162241721252373, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex15);
      assertSame(complex2, complex8);
      assertSame(complex2, complex13);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex8);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex19);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex13);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex17);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex12);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex18);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex14);
      assertNotSame(complex10, complex11);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex19);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex17);
      assertSame(complex10, complex8);
      assertSame(complex10, complex13);
      
      Complex complex20 = complex0.multiply((-1));
      assertFalse(complex0.isInfinite());
      assertEquals(522.6458880980249, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals((-522.6458880980249), complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex14);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      
      Complex complex1 = Complex.I;
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.tan();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.I.acos();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex3.getImaginary(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex1.INF.subtract(2255.463405128);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex4.I.multiply(complex1);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals((-1.0), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      
      double double0 = complex4.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex6 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      
      Complex complex7 = complex6.NaN.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      
      Complex complex8 = complex1.INF.cos();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      
      Complex complex9 = complex0.log();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertTrue(complex9.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      
      double double1 = complex9.abs();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertTrue(complex9.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = complex0.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      
      boolean boolean0 = complex1.equals("org.apache.commons.math3.complex.Complex");
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex10 = complex1.createComplex((-3042.015749234619), 496.3908);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals((-3042.015749234619), complex10.getReal(), 0.01);
      assertEquals(496.3908, complex10.getImaginary(), 0.01);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      
      Complex complex11 = Complex.valueOf(3028.214);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(3028.214, complex11.getReal(), 0.01);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex7));
      
      Complex complex12 = complex10.NaN.pow(complex0);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals((-3042.015749234619), complex10.getReal(), 0.01);
      assertEquals(496.3908, complex10.getImaginary(), 0.01);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex2));
      assertTrue(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      
      Complex complex13 = complex6.tanh();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex9);
      assertSame(complex13, complex12);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex7);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex2));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex12));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      
      double double2 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex7);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, 1448.686);
      assertFalse(complex14.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex14.getReal(), 0.01);
      assertEquals(1448.686, complex14.getImaginary(), 0.01);
      assertTrue(complex14.isInfinite());
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      
      Complex complex15 = complex0.NaN.log();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex5);
      assertSame(complex15, complex7);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex3);
      assertSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertSame(complex15, complex12);
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex5));
      assertTrue(complex15.equals((Object)complex8));
      
      Complex complex16 = complex5.negate();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-1.0), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex15);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex15));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex8));
      
      Complex complex17 = complex3.divide(Double.POSITIVE_INFINITY);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex16);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex16);
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex16));
      
      Complex complex18 = complex17.I.cosh();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex16);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex16);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex16);
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex16));
      
      Complex complex19 = complex18.sin();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertFalse(complex19.isNaN());
      assertEquals(0.5143952585235492, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex16);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex19);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex16);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex19);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex16);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex1);
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex18));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex1));
      
      Complex complex20 = complex19.NaN.createComplex((-3042.015749234619), 0.0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertFalse(complex19.isNaN());
      assertEquals(0.5143952585235492, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertFalse(complex20.isNaN());
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals((-3042.015749234619), complex20.getReal(), 0.01);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex16);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex19);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex20);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex16);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex19);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex20);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex16);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex1);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex5);
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex19));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex18));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex19));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex5));
      
      Complex complex21 = Complex.I;
      assertEquals(1.0, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex14);
      assertSame(complex21, complex1);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex5);
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex5));
      
      Complex complex22 = complex0.divide(complex21);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(1.0, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertTrue(complex22.isNaN());
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertFalse(complex22.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex20);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex14);
      assertSame(complex21, complex1);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex22);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex7);
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex5));
      assertTrue(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex3));
      assertFalse(complex22.equals((Object)complex0));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex16));
      assertTrue(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex21));
      assertFalse(complex22.equals((Object)complex1));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex11));
      assertTrue(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex19));
      assertTrue(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex17));
      assertFalse(complex22.equals((Object)complex20));
      assertTrue(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex2));
      
      Complex complex23 = complex21.multiply(1.3195548295785448E-262);
      assertEquals(1.0, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(0.0, complex23.getReal(), 0.01);
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
      assertEquals(1.3195548295785448E-262, complex23.getImaginary(), 0.01);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex14);
      assertSame(complex21, complex1);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex23);
      assertNotSame(complex21, complex22);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex10);
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex15));
      assertFalse(complex23.equals((Object)complex9));
      assertFalse(complex23.equals((Object)complex5));
      assertFalse(complex23.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex2));
      assertFalse(complex23.equals((Object)complex20));
      assertFalse(complex23.equals((Object)complex3));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex13));
      assertFalse(complex23.equals((Object)complex17));
      assertFalse(complex23.equals((Object)complex0));
      assertFalse(complex23.equals((Object)complex19));
      assertFalse(complex23.equals((Object)complex12));
      assertFalse(complex23.equals((Object)complex16));
      assertFalse(complex23.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex7));
      assertFalse(complex23.equals((Object)complex18));
      assertFalse(complex23.equals((Object)complex6));
      assertFalse(complex23.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex1));
      assertFalse(complex23.equals((Object)complex4));
      assertFalse(complex23.equals((Object)complex8));
      assertFalse(complex23.equals((Object)complex10));
      
      Complex complex24 = complex4.conjugate();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex24.getImaginary(), 0.01);
      assertTrue(complex24.isInfinite());
      assertFalse(complex24.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex24.getReal(), 0.01);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex24);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex21);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex24);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex23);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex22);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex3);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex10);
      assertNotSame(complex24, complex13);
      assertNotSame(complex24, complex9);
      assertNotSame(complex24, complex18);
      assertNotSame(complex24, complex8);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex16);
      assertNotSame(complex24, complex12);
      assertNotSame(complex24, complex19);
      assertNotSame(complex24, complex11);
      assertNotSame(complex24, complex2);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex21);
      assertNotSame(complex24, complex20);
      assertNotSame(complex24, complex22);
      assertNotSame(complex24, complex14);
      assertNotSame(complex24, complex6);
      assertNotSame(complex24, complex0);
      assertNotSame(complex24, complex17);
      assertNotSame(complex24, complex5);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex15);
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex22));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      
      Complex complex25 = complex23.pow(complex2);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(0.0, complex23.getReal(), 0.01);
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
      assertEquals(1.3195548295785448E-262, complex23.getImaginary(), 0.01);
      assertEquals(0.25471725409604196, complex25.getReal(), 0.01);
      assertFalse(complex25.isInfinite());
      assertEquals((-0.16281638813059235), complex25.getImaginary(), 0.01);
      assertFalse(complex25.isNaN());
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex25);
      assertNotSame(complex1, complex24);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex21);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex24);
      assertNotSame(complex2, complex23);
      assertNotSame(complex2, complex25);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex17);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex20);
      assertSame(complex21, complex1);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex24);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex23);
      assertNotSame(complex21, complex22);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex25);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex9);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex24);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex25);
      assertNotSame(complex23, complex1);
      assertNotSame(complex25, complex21);
      assertNotSame(complex25, complex6);
      assertNotSame(complex25, complex7);
      assertNotSame(complex25, complex2);
      assertNotSame(complex25, complex18);
      assertNotSame(complex25, complex12);
      assertNotSame(complex25, complex4);
      assertNotSame(complex25, complex8);
      assertNotSame(complex25, complex14);
      assertNotSame(complex25, complex24);
      assertNotSame(complex25, complex11);
      assertNotSame(complex25, complex10);
      assertNotSame(complex25, complex23);
      assertNotSame(complex25, complex5);
      assertNotSame(complex25, complex15);
      assertNotSame(complex25, complex0);
      assertNotSame(complex25, complex17);
      assertNotSame(complex25, complex20);
      assertNotSame(complex25, complex16);
      assertNotSame(complex25, complex3);
      assertNotSame(complex25, complex22);
      assertNotSame(complex25, complex9);
      assertNotSame(complex25, complex19);
      assertNotSame(complex25, complex1);
      assertNotSame(complex25, complex13);
      
      Complex complex26 = complex0.sqrt1z();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex26.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex26.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex26.getReal(), 0.01);
      assertFalse(complex26.isInfinite());
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex26);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex25);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex24);
      assertNotSame(complex26, complex22);
      assertNotSame(complex26, complex5);
      assertNotSame(complex26, complex3);
      assertNotSame(complex26, complex1);
      assertNotSame(complex26, complex16);
      assertNotSame(complex26, complex9);
      assertNotSame(complex26, complex19);
      assertNotSame(complex26, complex13);
      assertNotSame(complex26, complex20);
      assertNotSame(complex26, complex2);
      assertNotSame(complex26, complex0);
      assertNotSame(complex26, complex10);
      assertNotSame(complex26, complex25);
      assertNotSame(complex26, complex18);
      assertNotSame(complex26, complex21);
      assertNotSame(complex26, complex6);
      assertNotSame(complex26, complex8);
      assertNotSame(complex26, complex14);
      assertNotSame(complex26, complex11);
      assertNotSame(complex26, complex12);
      assertNotSame(complex26, complex4);
      assertNotSame(complex26, complex23);
      assertNotSame(complex26, complex7);
      assertNotSame(complex26, complex17);
      assertNotSame(complex26, complex24);
      assertNotSame(complex26, complex15);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      
      ComplexField complexField0 = complex0.I.getField();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      
      ComplexField complexField1 = complex0.getField();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertSame(complexField1, complexField0);
      
      Complex complex1 = complex0.sin();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.NaN.negate();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      
      Complex complex3 = complex1.ONE.log();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex3.ONE.sinh();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex1.ZERO.subtract(0.0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex3));
      
      Complex complex6 = complex5.INF.sqrt1z();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      
      Complex complex7 = complex2.ONE.divide(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = Complex.NaN;
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex6));
      
      Complex complex9 = complex7.divide(complex8);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex6));
      
      String string0 = complex1.toString();
      assertEquals("(NaN, NaN)", string0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      
      Complex complex10 = (Complex)complex1.readResolve();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex1));
      assertTrue(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex5));
      
      Complex complex11 = complex9.pow(0.0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex10);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertSame(complex11, complex2);
      assertSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex10));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex9));
      assertTrue(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex10));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex6));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex1));
      assertTrue(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex4));
      
      Complex complex12 = complex11.ONE.sinh();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(1.1752011936438014, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex12);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex10);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex1);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex10);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertSame(complex11, complex2);
      assertSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex2);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex10));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex9));
      assertTrue(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex10));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex6));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex1));
      assertTrue(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex6));
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex2));
      
      Complex complex13 = complex3.tan();
      assertFalse(complex13.isInfinite());
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex12);
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex3));
      assertTrue(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex1));
      assertTrue(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      
      Complex complex14 = complex8.reciprocal();
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex14, complex0);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex12);
      assertSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex3);
      assertSame(complex14, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex14);
      assertNotSame(complex8, complex13);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      
      Complex complex15 = complex7.INF.divide(0.0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex15, complex8);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertSame(complex15, complex9);
      assertNotSame(complex15, complex0);
      assertSame(complex15, complex11);
      assertSame(complex15, complex2);
      assertNotSame(complex15, complex5);
      assertSame(complex15, complex14);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertSame(complex2, complex14);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      
      Complex complex16 = Complex.valueOf((-2582.3), 0.0);
      assertEquals((-2582.3), complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex3);
      
      Complex complex17 = complex16.ONE.reciprocal();
      assertEquals((-2582.3), complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertFalse(complex17.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(1.0, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex3);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex3);
      
      Complex complex18 = complex12.cosh();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(1.773775678340353, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(1.1752011936438014, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex16);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex6);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex14);
      assertNotSame(complex8, complex13);
      assertSame(complex8, complex15);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex9, complex18);
      assertSame(complex9, complex15);
      assertNotSame(complex9, complex13);
      assertSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertSame(complex9, complex14);
      assertNotSame(complex9, complex17);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex11, complex13);
      assertSame(complex11, complex15);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex17);
      assertSame(complex11, complex2);
      assertSame(complex11, complex14);
      assertSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex18);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex17);
      
      Complex complex19 = complex15.log();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertTrue(complex19.isNaN());
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex15, complex8);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertSame(complex15, complex9);
      assertNotSame(complex15, complex0);
      assertSame(complex15, complex11);
      assertSame(complex15, complex2);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex16);
      assertSame(complex15, complex19);
      assertNotSame(complex15, complex17);
      assertSame(complex15, complex14);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex18);
      assertSame(complex2, complex19);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex16);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex0);
      assertSame(complex19, complex9);
      assertNotSame(complex19, complex16);
      assertSame(complex19, complex14);
      assertSame(complex19, complex2);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex1);
      assertSame(complex19, complex15);
      assertNotSame(complex19, complex13);
      assertSame(complex19, complex8);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex12);
      assertSame(complex19, complex11);
      assertNotSame(complex19, complex17);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      
      double double0 = complex6.getReal();
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex11);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex17);
      
      Complex complex20 = (Complex)complex2.readResolve();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertTrue(complex20.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex18);
      assertSame(complex2, complex19);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex16);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex9);
      
      boolean boolean0 = complex0.isInfinite();
      assertTrue(boolean0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      
      Complex complex21 = complex15.multiply(Double.NaN);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertTrue(complex21.isNaN());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex15, complex8);
      assertSame(complex15, complex21);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertSame(complex15, complex9);
      assertNotSame(complex15, complex0);
      assertSame(complex15, complex11);
      assertSame(complex15, complex2);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex16);
      assertSame(complex15, complex19);
      assertNotSame(complex15, complex17);
      assertSame(complex15, complex14);
      assertNotSame(complex15, complex20);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex18);
      assertSame(complex2, complex21);
      assertSame(complex2, complex19);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex16);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertSame(complex21, complex8);
      assertSame(complex21, complex19);
      assertSame(complex21, complex15);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex20);
      assertSame(complex21, complex11);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex0);
      assertSame(complex21, complex9);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex16);
      assertSame(complex21, complex14);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex5);
      assertSame(complex21, complex2);
      
      Complex complex22 = (Complex)complex5.readResolve();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      assertFalse(complex22.isNaN());
      assertEquals(0.0, complex22.getReal(), 0.01);
      assertFalse(complex22.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex11);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex15);
      
      boolean boolean1 = complex9.equals(complex22);
      assertFalse(boolean1);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      assertFalse(complex22.isNaN());
      assertEquals(0.0, complex22.getReal(), 0.01);
      assertFalse(complex22.isInfinite());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex18);
      assertSame(complex2, complex21);
      assertSame(complex2, complex19);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex16);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex11);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertSame(complex8, complex21);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex17);
      assertSame(complex8, complex19);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex14);
      assertNotSame(complex8, complex13);
      assertSame(complex8, complex15);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex22);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex15);
      assertNotSame(complex9, complex18);
      assertSame(complex9, complex15);
      assertSame(complex9, complex19);
      assertNotSame(complex9, complex13);
      assertSame(complex9, complex21);
      assertSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex20);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertSame(complex9, complex14);
      assertNotSame(complex9, complex17);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      
      Complex complex23 = complex17.multiply(1562.36072117251);
      assertEquals((-2582.3), complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertFalse(complex17.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(1.0, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex23.isInfinite());
      assertEquals(1562.36072117251, complex23.getReal(), 0.01);
      assertEquals(-0.0, complex23.getImaginary(), 0.01);
      assertFalse(complex23.isNaN());
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex22);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex23);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex21);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex3);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex19);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex21);
      assertNotSame(complex17, complex20);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex22);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex23);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex3);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex11);
      
      Complex complex24 = complex7.add(434.8388456136);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex24.isNaN());
      assertFalse(complex24.isInfinite());
      assertEquals(434.8388456136, complex24.getReal(), 0.01);
      assertEquals(0.0, complex24.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex24);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex15);
      assertSame(complex2, complex21);
      assertNotSame(complex2, complex18);
      assertSame(complex2, complex19);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex23);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex24);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex16);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex11);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex24);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex24, complex5);
      assertNotSame(complex24, complex18);
      assertNotSame(complex24, complex11);
      assertNotSame(complex24, complex15);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex6);
      assertNotSame(complex24, complex13);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex10);
      assertNotSame(complex24, complex22);
      assertNotSame(complex24, complex16);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex19);
      assertNotSame(complex24, complex21);
      assertNotSame(complex24, complex9);
      assertNotSame(complex24, complex12);
      assertNotSame(complex24, complex2);
      assertNotSame(complex24, complex0);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex20);
      assertNotSame(complex24, complex17);
      assertNotSame(complex24, complex14);
      assertNotSame(complex24, complex8);
      
      Complex complex25 = Complex.valueOf((-20.0), 0.0);
      assertEquals(0.0, complex25.getImaginary(), 0.01);
      assertEquals((-20.0), complex25.getReal(), 0.01);
      assertFalse(complex25.isInfinite());
      assertFalse(complex25.isNaN());
      assertNotSame(complex25, complex15);
      assertNotSame(complex25, complex21);
      assertNotSame(complex25, complex6);
      assertNotSame(complex25, complex1);
      assertNotSame(complex25, complex13);
      assertNotSame(complex25, complex5);
      assertNotSame(complex25, complex3);
      assertNotSame(complex25, complex4);
      assertNotSame(complex25, complex9);
      assertNotSame(complex25, complex20);
      assertNotSame(complex25, complex17);
      assertNotSame(complex25, complex0);
      assertNotSame(complex25, complex19);
      assertNotSame(complex25, complex24);
      assertNotSame(complex25, complex11);
      assertNotSame(complex25, complex7);
      assertNotSame(complex25, complex16);
      assertNotSame(complex25, complex2);
      assertNotSame(complex25, complex10);
      assertNotSame(complex25, complex8);
      assertNotSame(complex25, complex12);
      assertNotSame(complex25, complex14);
      assertNotSame(complex25, complex18);
      assertNotSame(complex25, complex22);
      assertNotSame(complex25, complex23);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = Complex.valueOf((-2626.17145833534), (-2626.17145833534));
      assertEquals((-2626.17145833534), complex1.getReal(), 0.01);
      assertEquals((-2626.17145833534), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.NaN.reciprocal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      double double0 = complex0.getReal();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      complex2.hashCode();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.add(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      
      Complex complex4 = complex2.add(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex4, complex1);
      assertSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertNotNull(complex4);
      
      Complex complex5 = complex4.sqrt();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex5);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex4, complex1);
      assertSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertSame(complex5, complex2);
      assertSame(complex5, complex4);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertNotNull(complex5);
      
      Complex complex6 = complex5.ZERO.multiply(2597);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex5);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex2);
      assertSame(complex5, complex4);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertNotNull(complex6);
      
      Complex complex7 = complex1.asin();
      assertEquals((-2626.17145833534), complex1.getReal(), 0.01);
      assertEquals((-2626.17145833534), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-8.913003116158906), complex7.getImaginary(), 0.01);
      assertEquals((-0.7853981452730391), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertNotNull(complex7);
      
      Complex complex8 = complex7.INF.sin();
      assertEquals((-2626.17145833534), complex1.getReal(), 0.01);
      assertEquals((-2626.17145833534), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-8.913003116158906), complex7.getImaginary(), 0.01);
      assertEquals((-0.7853981452730391), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertNotNull(complex8);
      
      Complex complex9 = complex6.asin();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex5);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex7);
      assertSame(complex5, complex2);
      assertSame(complex5, complex4);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertNotNull(complex9);
      
      boolean boolean0 = complex7.isInfinite();
      assertFalse(boolean0);
      assertEquals((-2626.17145833534), complex1.getReal(), 0.01);
      assertEquals((-2626.17145833534), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-8.913003116158906), complex7.getImaginary(), 0.01);
      assertEquals((-0.7853981452730391), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex10 = complex4.multiply(763);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex5);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex5);
      assertNotSame(complex10, complex7);
      assertSame(complex10, complex5);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex3);
      assertSame(complex10, complex4);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertNotNull(complex10);
      
      Complex complex11 = complex10.ONE.acos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex5);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex11);
      assertSame(complex10, complex5);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex3);
      assertSame(complex10, complex4);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex6);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertTrue(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex9));
      assertNotNull(complex11);
      
      Complex complex12 = complex6.INF.acos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex5);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertSame(complex5, complex2);
      assertSame(complex5, complex4);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertSame(complex5, complex12);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex6);
      assertSame(complex12, complex3);
      assertSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex7);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex2);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex9));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex11));
      assertNotNull(complex12);
      
      boolean boolean1 = complex3.isInfinite();
      assertFalse(boolean1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex5);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex4);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertTrue(boolean1 == boolean0);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex8));
      
      Complex complex13 = (Complex)complex2.readResolve();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex12));
      assertTrue(complex13.equals((Object)complex2));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex5));
      assertTrue(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertTrue(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex13);
      
      complex5.hashCode();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex9);
      assertSame(complex4, complex3);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex10);
      assertSame(complex5, complex4);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertSame(complex5, complex12);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex13));
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex14 = complex11.divide(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex14);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertSame(complex14, complex5);
      assertSame(complex14, complex2);
      assertSame(complex14, complex3);
      assertSame(complex14, complex4);
      assertNotSame(complex14, complex6);
      assertSame(complex14, complex10);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex9);
      assertSame(complex14, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex11);
      assertSame(complex3, complex10);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex8);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex14);
      assertSame(complex3, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex14);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex9);
      assertSame(complex4, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex13);
      assertSame(complex10, complex14);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex12);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex11);
      assertSame(complex10, complex5);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex3);
      assertSame(complex10, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex1);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex13));
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex6));
      assertTrue(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertTrue(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertTrue(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex1));
      assertNotNull(complex14);
      
      double double1 = complex14.NaN.abs();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex14);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertSame(complex14, complex5);
      assertSame(complex14, complex2);
      assertSame(complex14, complex3);
      assertSame(complex14, complex4);
      assertNotSame(complex14, complex6);
      assertSame(complex14, complex10);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex9);
      assertSame(complex14, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex4);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex11);
      assertSame(complex3, complex10);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex8);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex14);
      assertSame(complex3, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex14);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex9);
      assertSame(complex4, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex13);
      assertSame(complex10, complex14);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex12);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex11);
      assertSame(complex10, complex5);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex3);
      assertSame(complex10, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex1);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex13));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex6));
      assertTrue(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertTrue(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertTrue(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex14));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex1));
      
      Complex complex15 = Complex.valueOf(0.0, Double.NaN);
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertSame(complex15, complex4);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex0);
      assertSame(complex15, complex12);
      assertNotSame(complex15, complex11);
      assertSame(complex15, complex2);
      assertSame(complex15, complex5);
      assertSame(complex15, complex3);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex13);
      assertSame(complex15, complex10);
      assertNotSame(complex15, complex1);
      assertSame(complex15, complex14);
      assertNotSame(complex15, complex7);
      assertFalse(complex15.equals((Object)complex9));
      assertTrue(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex1));
      assertTrue(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertNotNull(complex15);
      
      Complex complex16 = complex15.pow((-2991.54));
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertSame(complex15, complex4);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex0);
      assertSame(complex15, complex16);
      assertSame(complex15, complex12);
      assertNotSame(complex15, complex11);
      assertSame(complex15, complex2);
      assertSame(complex15, complex5);
      assertSame(complex15, complex3);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex13);
      assertSame(complex15, complex10);
      assertNotSame(complex15, complex1);
      assertSame(complex15, complex14);
      assertNotSame(complex15, complex7);
      assertSame(complex16, complex4);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex6);
      assertSame(complex16, complex10);
      assertNotSame(complex16, complex7);
      assertSame(complex16, complex14);
      assertSame(complex16, complex2);
      assertSame(complex16, complex15);
      assertSame(complex16, complex3);
      assertSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex8);
      assertSame(complex16, complex12);
      assertFalse(complex15.equals((Object)complex9));
      assertTrue(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex1));
      assertTrue(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex9));
      assertTrue(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertTrue(complex16.equals((Object)complex8));
      assertNotNull(complex16);
      
      Complex complex17 = complex6.createComplex(763, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(763.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex10);
      assertSame(complex2, complex14);
      assertSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex15);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex17);
      assertSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex14);
      assertSame(complex4, complex12);
      assertSame(complex4, complex16);
      assertNotSame(complex4, complex9);
      assertSame(complex4, complex3);
      assertSame(complex4, complex15);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex6);
      assertSame(complex5, complex16);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex14);
      assertSame(complex5, complex10);
      assertSame(complex5, complex4);
      assertSame(complex5, complex15);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex7);
      assertSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertSame(complex5, complex12);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex13));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex13));
      assertTrue(complex6.equals((Object)complex9));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex14));
      assertTrue(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex12));
      assertNotNull(complex17);
      
      Complex complex18 = Complex.valueOf((double) 763, (double) 763);
      assertEquals(763.0, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isNaN());
      assertEquals(763.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex15);
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex15));
      assertNotNull(complex18);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(string0);
      
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.ONE.divide(0.36832553148269653);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(2.7149896342360367, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.atan();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex1.reciprocal();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(2.7149896342360367, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex3.isInfinite());
      assertEquals(0.36832553148269653, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      
      Complex complex4 = complex2.negate();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertNotNull(complex4);
      
      Complex complex5 = complex4.sinh();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex2));
      assertNotNull(complex5);
      
      Complex complex6 = complex5.I.multiply(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex2));
      assertNotNull(complex6);
      
      Complex complex7 = complex3.subtract((-2458.0012727));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(2.7149896342360367, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex3.isInfinite());
      assertEquals(0.36832553148269653, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(2458.3695982314825, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertNotNull(complex7);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ONE.asin();
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = Complex.ZERO;
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex1.NaN.subtract(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      
      List<Complex> list0 = complex0.I.nthRoot(7);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(list0);
      assertFalse(list0.contains(complex1));
      
      Complex complex4 = complex1.INF.multiply(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertNotNull(complex4);
      
      Complex complex5 = complex0.ZERO.subtract(2.329035966595791E-211);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.329035966595791E-211), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertNotNull(complex5);
      
      Complex complex6 = complex0.sqrt();
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(0.7071067811865476, complex6.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertNotNull(complex6);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      
      Complex complex7 = Complex.valueOf((-2534.925995279));
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals((-2534.925995279), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertNotNull(complex7);
      
      Complex complex8 = complex7.ZERO.add((double) 7);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals((-2534.925995279), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(7.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertNotNull(complex8);
      
      Complex complex9 = Complex.valueOf(0.0, (-251.02629664903));
      assertEquals((-251.02629664903), complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertNotNull(complex9);
      
      double double0 = complex9.getImaginary();
      assertEquals((-251.02629664903), double0, 0.01);
      assertEquals((-251.02629664903), complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      
      Complex complex10 = complex9.add(complex6);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(0.7071067811865476, complex6.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals((-251.02629664903), complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.7071067811865476, complex10.getReal(), 0.01);
      assertEquals((-250.31918986784345), complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex6);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertNotNull(complex10);
      
      Complex complex11 = Complex.valueOf((-2534.925995279));
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-2534.925995279), complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertTrue(complex11.equals((Object)complex7));
      assertNotNull(complex11);
      
      String string0 = complex10.toString();
      assertEquals("(0.7071067811865476, -250.31918986784345)", string0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(0.7071067811865476, complex6.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals((-251.02629664903), complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.7071067811865476, complex10.getReal(), 0.01);
      assertEquals((-250.31918986784345), complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex11);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex11));
      assertNotNull(string0);
      
      Complex complex12 = complex11.tanh();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals((-1.0), complex12.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-2534.925995279), complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertTrue(complex11.equals((Object)complex7));
      assertNotNull(complex12);
      
      Complex complex13 = complex11.multiply(0);
      assertFalse(complex13.isInfinite());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-2534.925995279), complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertTrue(complex11.equals((Object)complex7));
      assertNotNull(complex13);
      
      Complex complex14 = complex0.tan();
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.7615941559557649, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex1));
      assertNotNull(complex14);
      
      Complex complex15 = complex13.createComplex((-444.6), (-114.7852));
      assertFalse(complex13.isInfinite());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals((-114.7852), complex15.getImaginary(), 0.01);
      assertEquals((-444.6), complex15.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-2534.925995279), complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex14);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex11);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex14));
      assertTrue(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex2));
      assertNotNull(complex15);
      
      Complex complex16 = complex11.sqrt1z();
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(2534.925798034575, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-2534.925995279), complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex2);
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex14));
      assertTrue(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex15));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex2));
      assertNotNull(complex16);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(87.0, 87.0);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.NaN.conjugate();
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.reciprocal();
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertEquals(0.005747126436781609, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-0.005747126436781609), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex3 = complex0.I.add(87.0);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertEquals(87.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      
      Complex complex4 = complex3.INF.multiply(complex1);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(87.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertNotNull(complex4);
      
      Complex complex5 = complex4.log();
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(87.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertTrue(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex5);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex5);
      assertNotSame(complex5, complex0);
      assertSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertNotNull(complex5);
      
      double double0 = complex3.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertEquals(87.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex5));
      
      Complex complex6 = complex1.ZERO.exp();
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex6);
      assertSame(complex1, complex5);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertNotNull(complex6);
      
      boolean boolean1 = complex0.equals((Object) null);
      assertFalse(boolean1);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = complex1.isInfinite();
      assertFalse(boolean2);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex6);
      assertSame(complex1, complex5);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Complex complex7 = complex2.pow(129.519232459);
      assertEquals(87.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(87.0, complex0.getImaginary(), 0.01);
      assertEquals(0.005747126436781609, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-0.005747126436781609), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.8562774142842697E-271), complex7.getImaginary(), 0.01);
      assertEquals(7.362469555938407E-272, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertNotNull(complex7);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cosh();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.atan();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-2294.707));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.pow((-2294.707));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.INF.divide(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.ZERO.acos();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      
      Complex complex4 = complex1.I.reciprocal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertNotNull(complex4);
      
      Complex complex5 = complex2.INF.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertNotNull(complex5);
      
      String string0 = complex0.toString();
      assertEquals("(-2294.707, 0.0)", string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertNotNull(string0);
      
      Complex complex6 = complex0.conjugate();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-2294.707), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertNotNull(complex6);
      
      Complex complex7 = complex6.NaN.createComplex((-2294.707), (-2294.707));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-2294.707), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-2294.707), complex7.getReal(), 0.01);
      assertEquals((-2294.707), complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertNotNull(complex7);
      
      Complex complex8 = complex0.ZERO.tan();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertNotNull(complex8);
      
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      
      boolean boolean0 = complex1.equals(complex5);
      assertTrue(boolean0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2294.707), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = Complex.I;
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.ZERO.add(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      
      Complex complex4 = (Complex)complex3.I.readResolve();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      
      Complex complex5 = complex3.I.sin();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(1.1752011936438014, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertNotNull(complex5);
      
      Complex complex6 = complex0.ZERO.subtract(complex2);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertNotNull(complex6);
      
      Complex complex7 = complex6.NaN.atan();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertNotNull(complex7);
      
      Complex complex8 = complex0.I.pow(complex2);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.20787957635076193, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertNotNull(complex8);
      
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      
      Complex complex9 = complex0.tan();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex0);
      assertSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertNotNull(complex9);
      
      ComplexField complexField0 = complex9.getField();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex0);
      assertSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertNotNull(complexField0);
      
      ComplexField complexField1 = complex8.getField();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.20787957635076193, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertSame(complexField1, complexField0);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertNotNull(complexField1);
      
      double double0 = complex9.getArgument();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex0);
      assertSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      
      Complex complex10 = Complex.valueOf((-1.0));
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals((-1.0), complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertNotNull(complex10);
      
      try { 
        complex0.nthRoot((-911));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -911
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      ComplexField complexField0 = complex0.INF.getField();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotNull(complexField0);
      
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.createComplex(870.78590861375, 870.78590861375);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.I.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      
      Complex complex4 = complex3.ONE.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertNotNull(complex4);
      
      complex0.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      
      Complex complex5 = Complex.valueOf(870.78590861375);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(870.78590861375, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertNotNull(complex5);
      
      double double0 = complex2.I.getArgument();
      assertEquals(1.5707963267948966, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      
      Complex complex6 = (Complex)complex2.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(870.78590861375, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(870.78590861375, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex2));
      assertNotNull(complex6);
      
      boolean boolean0 = complex2.equals(complex6);
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(870.78590861375, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(870.78590861375, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = complex0.equals(object0);
      assertFalse(boolean1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(boolean1 == boolean0);
      
      Complex complex7 = complex0.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertNotNull(complex7);
      
      Complex complex8 = complex2.divide(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertNotNull(complex8);
      
      Complex complex9 = complex0.divide(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex9.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertNotNull(complex9);
      
      double double1 = complex8.getImaginary();
      assertEquals(0.0, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      
      List<Complex> list0 = complex9.nthRoot(266);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex9.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertNotNull(list0);
      assertFalse(list0.contains(complex0));
      assertTrue(list0.contains(complex3));
      
      Complex complex10 = complex8.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(870.78590861375, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(870.78590861375, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertNotNull(complex10);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-1666.705457705425), (-1666.705457705425));
      assertEquals((-1666.705457705425), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1666.705457705425), complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.createComplex((-1666.705457705425), (-1666.705457705425));
      assertEquals((-1666.705457705425), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1666.705457705425), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1666.705457705425), complex1.getImaginary(), 0.01);
      assertEquals((-1666.705457705425), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.INF.divide(6.283185307179586);
      assertEquals((-1666.705457705425), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1666.705457705425), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1666.705457705425), complex1.getImaginary(), 0.01);
      assertEquals((-1666.705457705425), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.NaN.divide((-1666.705457705425));
      assertEquals((-1666.705457705425), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1666.705457705425), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1666.705457705425), complex1.getImaginary(), 0.01);
      assertEquals((-1666.705457705425), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      
      Complex complex4 = complex0.reciprocal();
      assertEquals((-1666.705457705425), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1666.705457705425), complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2.9999301777553216E-4), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(2.9999301777553216E-4, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      
      Complex complex5 = complex1.divide((-1666.705457705425));
      assertEquals((-1666.705457705425), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1666.705457705425), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1666.705457705425), complex1.getImaginary(), 0.01);
      assertEquals((-1666.705457705425), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertNotNull(complex5);
      
      Complex complex6 = complex5.subtract(complex4);
      assertEquals((-1666.705457705425), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1666.705457705425), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1666.705457705425), complex1.getImaginary(), 0.01);
      assertEquals((-1666.705457705425), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-2.9999301777553216E-4), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(2.9999301777553216E-4, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1.0002999930177756, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.9997000069822245, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertNotNull(complex6);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-870.9728128));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.add((-2910.6));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.cos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.7305647019759611), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.I.negate();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.7305647019759611), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      
      Complex complex4 = complex2.I.add((-870.9728128));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.7305647019759611), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals((-870.9728128), complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertNotNull(complex4);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      
      Complex complex5 = complex2.I.acos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.7305647019759611), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertNotNull(complex5);
      
      Complex complex6 = complex2.NaN.add(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.7305647019759611), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertNotNull(complex6);
      
      Complex complex7 = complex0.createComplex(0.0, 1157.067);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertNotNull(complex7);
      
      complex2.hashCode();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.7305647019759611), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      
      Complex complex8 = complex0.multiply(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex1));
      assertNotNull(complex8);
      
      String string0 = complex7.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertNotNull(string0);
      
      Complex complex9 = complex7.asin();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(7.746791001295063, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertNotNull(complex9);
      
      complex9.NaN.hashCode();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(7.746791001295063, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      
      Complex complex10 = complex9.ZERO.sin();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(7.746791001295063, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertNotNull(complex10);
      
      double double0 = complex9.getImaginary();
      assertEquals(7.746791001295063, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(7.746791001295063, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      
      ComplexField complexField0 = complex0.getField();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertNotNull(complexField0);
      
      Complex complex11 = complex8.multiply(1157.067);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex1));
      assertNotNull(complex11);
      
      Complex complex12 = complex11.INF.pow(complex10);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(7.746791001295063, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex12);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex2);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex11);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex3));
      assertTrue(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertNotNull(complex12);
      
      double double1 = complex7.getReal();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex13 = complex11.negate();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertTrue(complex13.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex13);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex12));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex12));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex1));
      assertNotNull(complex13);
      
      Complex complex14 = complex10.reciprocal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(7.746791001295063, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex6);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex9);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex11);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex8));
      assertTrue(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertNotNull(complex14);
      
      Complex complex15 = complex13.log();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertTrue(complex13.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals((-2.356194490192345), complex15.getImaginary(), 0.01);
      assertTrue(complex15.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex13);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex7);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex9);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex14);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex14));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertNotNull(complex15);
      
      Complex complex16 = Complex.ZERO;
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertNotNull(complex16);
      
      Complex complex17 = complex14.multiply(complex16);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertTrue(complex17.isNaN());
      assertEquals(1157.067, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(7.746791001295063, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex6);
      assertSame(complex14, complex17);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex15);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex12);
      assertSame(complex17, complex14);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex8);
      assertSame(complex17, complex6);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex11);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex17);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex14.equals((Object)complex8));
      assertTrue(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex13));
      assertTrue(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex16));
      assertFalse(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex14));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertNotNull(complex17);
      
      Complex complex18 = complex1.divide(2.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-870.9728128), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex18.getImaginary(), 0.01);
      assertTrue(complex18.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex18.getReal(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex18);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex10);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex15));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex6));
      assertTrue(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex0));
      assertTrue(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex14));
      assertTrue(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex10));
      assertNotNull(complex18);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      double double0 = complex0.getReal();
      assertEquals(2.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.tanh();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.9640275800758169, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double1 = complex0.getReal();
      assertEquals(2.0, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      
      Complex complex2 = Complex.valueOf((-1283.7193461672355), (-7.177274244758699E-91));
      assertEquals((-7.177274244758699E-91), complex2.getImaginary(), 0.01);
      assertEquals((-1283.7193461672355), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.multiply(1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.tanh();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      ComplexField complexField0 = complex2.getField();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complexField0);
      
      Complex complex3 = complex2.add(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      
      Complex complex4 = complex3.ZERO.sinh();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertNotNull(complex4);
      
      Complex complex5 = complex3.ONE.multiply(1.0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertNotNull(complex5);
      
      Complex complex6 = complex3.asin();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(1.5707963267948966, complex6.getReal(), 0.01);
      assertEquals((-1.1668440849213708), complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertNotNull(complex6);
      
      Complex complex7 = complex4.tanh();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertNotNull(complex7);
      
      Complex complex8 = complex4.negate();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex7));
      assertNotNull(complex8);
      
      Complex complex9 = complex2.cos();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertEquals(0.7237368419565787, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertNotNull(complex9);
      
      Complex complex10 = (Complex)complex9.readResolve();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertEquals(0.7237368419565787, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.7237368419565787, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex8));
      assertNotNull(complex10);
      
      boolean boolean0 = complex6.equals(complex10);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(1.5707963267948966, complex6.getReal(), 0.01);
      assertEquals((-1.1668440849213708), complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.7237368419565787, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.7237368419565787, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-880.324287958011), (-880.324287958011));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-880.324287958011), complex0.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add(0.0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-880.324287958011), complex0.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-880.324287958011), complex1.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      String string0 = complex1.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-880.324287958011), complex0.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-880.324287958011), complex1.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(string0);
      
      Complex complex2 = complex0.pow(0.0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-880.324287958011), complex0.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      String string1 = complex2.toString();
      assertEquals("(1.0, -0.0)", string1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-880.324287958011), complex0.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Complex complex3 = complex2.NaN.divide(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-880.324287958011), complex0.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-880.324287958011), complex1.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      
      List<Complex> list0 = complex1.INF.nthRoot(46);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-880.324287958011), complex0.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-880.324287958011), complex1.getImaginary(), 0.01);
      assertEquals((-880.324287958011), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertNotNull(list0);
      assertFalse(list0.contains(complex1));
      
      try { 
        complex1.nthRoot((-1418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,418
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = new Complex(0.0, (-2082.505114));
      assertFalse(complex2.isNaN());
      assertEquals((-2082.505114), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      boolean boolean0 = complex0.equals(complex2);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals((-2082.505114), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex1.divide((-193.8060412743));
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.005159797875364821), complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.I.log();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.multiply(1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      boolean boolean0 = complex2.isNaN();
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.divide(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cos();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.ZERO.divide(0.0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex1.INF.atan();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      
      complex0.ZERO.hashCode();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex4 = complex1.reciprocal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      
      Complex complex5 = complex4.ZERO.log();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertNotNull(complex5);
      
      Complex complex6 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertNotNull(complex6);
      
      double double0 = complex1.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex7 = complex1.negate();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertNotNull(complex7);
      
      Complex complex8 = complex7.ZERO.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertNotNull(complex8);
      
      double double1 = complex2.getReal();
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      
      Complex complex9 = complex8.negate();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex6));
      assertTrue(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertNotNull(complex9);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      
      Complex complex10 = complex8.divide(complex6);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-1.0), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertSame(complex10, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertNotNull(complex10);
      
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertNotNull(string0);
      
      double double2 = complex9.getImaginary();
      assertEquals(-0.0, double2, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex6));
      assertTrue(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex0.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ZERO.add(2691.599769529111);
      Complex complex7 = complex0.ONE.negate();
      assertEquals((-1.0), complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex8.ONE.exp();
      Object object0 = new Object();
      complex8.equals(object0);
      Complex.valueOf(0.0);
      List<Complex> list0 = complex2.nthRoot(268);
      assertEquals(268, list0.size());
      assertTrue(list0.contains(complex9));
      
      Complex complex11 = complex10.divide(complex8);
      complex11.ZERO.abs();
      assertTrue(complex8.equals((Object)complex4));
      assertSame(complex11, complex8);
      
      Complex complex12 = complex3.sqrt1z();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(1.0000000000000002, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex3.sin();
      assertEquals(0.9877659459927356, complex13.getReal(), 0.01);
      
      Complex complex14 = complex1.add(complex5);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex6));
      assertEquals((-1.0), complex14.getImaginary(), 0.01);
      assertEquals(1.0, complex14.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex5.I.multiply(90);
      assertEquals(90.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.NaN.sin();
      Complex complex8 = complex4.sqrt();
      complex1.ZERO.hashCode();
      Complex complex9 = complex4.multiply((-4299.01));
      complex9.hashCode();
      complex0.hashCode();
      Complex complex10 = complex4.negate();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex10.divide(Double.NaN);
      Complex complex13 = complex12.tan();
      assertSame(complex12, complex13);
      
      complex9.createComplex(Double.NaN, 0.0);
      Complex complex14 = complex9.divide(0.0);
      complex11.getField();
      assertSame(complex11, complex14);
      
      Complex complex15 = complex7.pow(complex4);
      assertSame(complex15, complex3);
      
      Complex complex16 = complex9.atan();
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.nthRoot((-3984));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,984
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2333.581317485);
      complex0.ONE.abs();
      complex0.getImaginary();
      Complex complex1 = complex0.reciprocal();
      complex1.abs();
      Complex complex2 = complex1.asin();
      assertEquals((-4.285258721869105E-4), complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ZERO.divide(0.0);
      Complex complex5 = complex4.NaN.tanh();
      assertSame(complex5, complex4);
      
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.ONE.createComplex(0.0, 1.0);
      Complex complex8 = complex7.I.add(2259.82397393201);
      assertEquals(2259.82397393201, complex8.getReal(), 0.01);
      
      complex7.ZERO.exp();
      assertEquals((-0.014637723274167815), complex6.getImaginary(), 0.01);
      
      Complex complex9 = complex1.subtract((-4.3991443996021166E113));
      Complex complex10 = complex9.ONE.sin();
      assertEquals(0.8414709848078965, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      complex9.multiply(2333.581317485);
      Complex complex11 = complex9.ZERO.atan();
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(4.3991443996021166E113, complex9.getReal(), 0.01);
      
      Complex complex12 = complex1.multiply((-30.90265084));
      Complex complex13 = complex12.pow(complex1);
      assertEquals(1.0006716353753082, complex13.getReal(), 0.01);
      assertEquals(0.001854328679258954, complex13.getImaginary(), 0.01);
      assertEquals(-0.0, complex12.getReal(), 0.01);
  }
}
