/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:01:02 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1668.4095072536493);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.multiply(724);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex((-272.6362), (-20.0));
      complex5.tan();
      complex4.toString();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ONE;
      complex7.add(complex3);
      complex7.nthRoot(1447);
      Complex complex8 = new Complex(724);
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(8896667.964632684, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex1.sin();
      complex2.divide(2071.999517374405);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2045222521));
      Complex complex2 = complex1.INF.cosh();
      complex1.toString();
      complex2.asin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.ZERO.sqrt();
      complex0.readResolve();
      Complex complex5 = complex0.tan();
      complex5.exp();
      complex4.pow((-1521.62));
      complex3.I.readResolve();
      complex0.add((-1521.62));
      complex3.atan();
      try { 
        complex3.nthRoot((-274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -274
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(3.7773219E-316, 3.7773219E-316);
      complex1.I.add(3.7773219E-316);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(8896665.11618488);
      Complex complex1 = new Complex(8896665.11618488);
      Complex complex2 = complex1.divide(Double.NaN);
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = new Complex(20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2957.3571));
      Complex complex1 = Complex.I;
      complex1.getArgument();
      Complex complex2 = complex0.pow(81.95756324858023);
      complex2.cos();
      Complex complex3 = complex2.log();
      complex3.NaN.cosh();
      complex2.nthRoot(1350);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2865.927358, 465.6923393361585);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.atan();
      complex2.I.getArgument();
      complex1.INF.subtract(complex0);
      Complex complex3 = complex0.cos();
      Complex.valueOf((-1564.61686339601));
      complex0.I.abs();
      complex0.add((-1840.785212763222));
      complex3.getField();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(4304.5631038442, 793.64504);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-81186.5501289762));
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1795.8685), Double.NaN);
      complex0.multiply((-4042));
      Complex complex1 = complex0.multiply((-4042));
      complex1.asin();
      complex0.tan();
      Complex.valueOf(9.959152908532152E194);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-2152.28161));
      Complex complex1 = complex0.ONE.sqrt1z();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-4042));
      Complex complex2 = complex1.I.multiply((-4042));
      Complex.valueOf((double) (-4042));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.tan();
      complex3.divide(complex1);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-840.16309133741));
      Complex complex3 = complex0.pow((-1118.9354521402));
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.equals(complex4);
      complex3.ONE.conjugate();
      try { 
        complex2.nthRoot((-2040109465));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,040,109,465
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3437.27);
      complex0.multiply(complex1);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.multiply((-4042));
      Complex complex1 = new Complex((-4042));
      complex1.ZERO.multiply((double) (-4042));
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2.1083014672301448E-8));
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf((-2.1083014672301448E-8));
      complex1.pow((-20.0));
      Complex complex4 = Complex.valueOf((-2.1083014672301448E-8));
      complex4.equals(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-20.0), (-3695.12224422382));
      Object object0 = new Object();
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(2026.0);
      complex0.asin();
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-2.1083014672301448E-8));
      Complex complex3 = complex2.pow((-2152.28161));
      complex1.cosh();
      Complex complex4 = new Complex(908.93650352, (-1593.0));
      Complex complex5 = complex3.subtract(complex0);
      complex5.toString();
      complex5.reciprocal();
      Complex complex6 = Complex.valueOf((-2152.28161), (-1280.0417343751983));
      complex6.tan();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex((-2439.6156799505193), (-2439.6156799505193));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.acos();
      complex1.createComplex((-2439.6156799505193), 241.2629367);
      complex3.getArgument();
      complex1.readResolve();
      complex3.add(4097.911537890859);
      Complex.valueOf((-0.6157826537786634), 2.3628911680801783E297);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      complex1.readResolve();
      complex2.ZERO.add(Double.NaN);
      Complex complex3 = complex2.tanh();
      complex3.negate();
      complex3.INF.add(Double.NaN);
      Complex complex4 = complex1.asin();
      complex1.getArgument();
      Complex complex5 = complex1.cos();
      complex5.NaN.hashCode();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.28161));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.I.asin();
      complex3.hashCode();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = Complex.valueOf((-2152.28161));
      Complex complex6 = Complex.valueOf((-1029.0000805769));
      Complex complex7 = complex1.ONE.reciprocal();
      complex6.getArgument();
      complex7.ZERO.sin();
      Complex complex8 = complex7.I.subtract((-2152.28161));
      Complex complex9 = complex8.ONE.exp();
      complex9.ONE.exp();
      complex4.ONE.readResolve();
      Complex complex10 = complex7.NaN.conjugate();
      complex10.ONE.conjugate();
      complex1.hashCode();
      complex0.asin();
      Complex complex11 = complex1.asin();
      complex1.INF.subtract((-2665.667427938));
      complex3.isNaN();
      complex1.multiply(complex4);
      complex3.getArgument();
      complex7.getImaginary();
      complex2.isNaN();
      Complex complex12 = complex11.subtract((-984.86));
      complex12.NaN.sqrt1z();
      complex12.tanh();
      complex12.pow((-1029.0000805769));
      complex1.getField();
      complex0.conjugate();
      complex1.pow(complex5);
      complex2.multiply(3.141592653589793);
      complex11.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex0.tanh();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.asin();
      complex6.equals(complex2);
      complex2.getField();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-4042));
      Complex complex2 = complex1.I.multiply((-4042));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.ZERO;
      complex0.asin();
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex(0.9352853987476755, (-1924.4142941266002));
      complex7.subtract(complex5);
      complex6.toString();
      Complex complex9 = Complex.NaN;
      complex4.reciprocal();
      Complex complex10 = complex4.tan();
      Complex complex11 = Complex.valueOf(1.1752011936438014, (-1924.4142941266002));
      complex11.toString();
      complex10.add(complex1);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.asin();
      Complex complex2 = Complex.valueOf(20.0, (-1.2331734465703708));
      Complex complex3 = complex0.createComplex(67.1974, (-159243.52485816658));
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex2.add(complex4);
      complex3.tanh();
      Complex complex6 = Complex.valueOf((-159243.52485816658), 67.1974);
      complex6.asin();
      Complex complex7 = complex5.asin();
      complex7.I.subtract(564.3456828209887);
      Complex complex8 = complex2.atan();
      complex1.sin();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.multiply(complex5);
      complex10.divide(complex4);
      complex0.divide((-159243.52485816658));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2712.08737367);
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex((-3528.58092), 0.38147878390499695);
      complex2.asin();
      Complex complex3 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex1.createComplex(0.49539655935838334, (-838.208057768121));
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ZERO;
      complex5.add(complex1);
      Complex complex6 = complex4.tanh();
      complex3.asin();
      complex1.asin();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.sin();
      Complex complex9 = Complex.INF;
      complex1.multiply(complex9);
      complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.28161));
      complex0.tanh();
      complex0.ONE.asin();
      Complex complex1 = Complex.valueOf(706.146, 20.0);
      complex1.pow(1395.6);
      complex1.log();
      complex0.multiply((-1650));
      Complex complex2 = new Complex(0.3715078542256971, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(2152.28161);
      Complex complex4 = Complex.ZERO;
      complex3.add((double) 724);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.28161));
      Complex complex1 = complex0.tanh();
      complex0.ONE.asin();
      Complex complex2 = Complex.valueOf(706.146, 20.0);
      Complex complex3 = complex2.createComplex(358.8355183684382, 1395.6);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.pow(2.0);
      complex3.log();
      complex0.multiply(7);
      complex1.multiply(1295.1743);
      Complex complex6 = Complex.ZERO;
      complex6.add((-1248.952));
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(0.9352853987476755);
      complex3.ZERO.exp();
      complex3.NaN.negate();
      Complex complex4 = Complex.valueOf(0.9352853987476755, 0.9352853987476755);
      Complex complex5 = Complex.valueOf(0.9352853987476755);
      Complex complex6 = Complex.ONE;
      complex1.equals(complex2);
      complex2.readResolve();
      Complex.valueOf(0.9352853987476755, 0.9352853987476755);
      complex1.equals(complex4);
      complex2.abs();
      complex1.isInfinite();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-260.64609), (-260.64609));
      complex2.subtract((-260.64609));
      complex0.exp();
      Complex complex3 = new Complex((-260.64609), (-2.134387988350615E-80));
      complex3.exp();
      Complex complex4 = Complex.valueOf((-2.134387988350615E-80));
      complex4.conjugate();
      complex3.hashCode();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex4.asin();
      complex2.acos();
      Complex complex7 = Complex.ZERO;
      complex7.subtract(complex5);
      complex6.toString();
      Complex complex8 = Complex.NaN;
      complex3.reciprocal();
      Complex complex9 = Complex.INF;
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-4042));
      Complex complex2 = complex1.I.multiply((-4042));
      complex0.ONE.getField();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.atan();
      complex0.sin();
      complex4.readResolve();
      complex4.cos();
      Complex complex5 = complex3.tanh();
      complex2.subtract(complex5);
      complex2.tan();
      complex4.add((double) (-4030));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-9.036933434595339E-8), (-2555.0));
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(20.0, (-9.036933434595339E-8));
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.ZERO.createComplex(20.0, 20.0);
      Complex complex4 = Complex.valueOf((-1444.750940553309));
      Complex complex5 = complex2.I.tanh();
      Complex complex6 = complex4.I.log();
      Complex complex7 = complex2.ONE.asin();
      complex7.ZERO.asin();
      Complex complex8 = complex4.acos();
      complex8.NaN.atan();
      complex8.sin();
      complex4.getReal();
      complex5.getField();
      complex1.getImaginary();
      complex3.tanh();
      complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.subtract(0.9352853987476755);
      complex3.ZERO.exp();
      complex3.NaN.negate();
      complex2.NaN.conjugate();
      Complex.valueOf(0.9352853987476755);
      Complex.valueOf(0.9352853987476755);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex0.tanh();
      complex0.log();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex6.atan();
      complex9.sin();
      complex7.getReal();
      Complex complex11 = Complex.I;
      complex8.sinh();
      complex10.getField();
      complex5.getImaginary();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.28161));
      complex0.tanh();
      complex0.ONE.asin();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = Complex.valueOf(706.146, 20.0);
      Complex complex3 = complex2.createComplex(358.8355183684382, 1395.6);
      complex0.subtract(complex2);
      complex2.createComplex(Double.NaN, (-5.63383579957466E77));
      Complex complex4 = complex0.pow(0.11862641298045717);
      Complex complex5 = Complex.valueOf(1475.511885389, 20.0);
      Object object0 = new Object();
      complex5.equals(object0);
      complex1.readResolve();
      complex5.atan();
      complex4.equals(complex1);
      complex3.tan();
      complex3.sin();
      complex4.readResolve();
      complex4.tanh();
      complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-4042));
      Complex complex2 = complex1.I.multiply((-4042));
      Complex complex3 = complex0.subtract((double) (-4042));
      complex3.exp();
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf(2.782159649779516);
      complex5.readResolve();
      complex2.conjugate();
      complex4.hashCode();
      Complex complex6 = complex5.asin();
      complex3.asin();
      complex0.tan();
      Complex complex7 = complex3.acos();
      Complex complex8 = Complex.ZERO;
      complex7.subtract(complex8);
      complex7.toString();
      Complex complex9 = Complex.NaN;
      complex0.reciprocal();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      int int0 = (-1688);
      try { 
        complex0.INF.nthRoot((-1688));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,688
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.03139105), (-4.03139105));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(1604.9147763381677);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.exp();
      complex4.readResolve();
      Complex complex5 = complex4.conjugate();
      complex3.hashCode();
      complex5.asin();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex5.tan();
      complex6.acos();
      Complex complex8 = complex4.subtract(complex0);
      complex7.toString();
      Complex complex9 = Complex.NaN;
      Complex complex10 = new Complex((-4.03139105), (-4.03139105));
      complex6.pow(complex10);
      Complex complex11 = Complex.INF;
      complex11.getReal();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0036, 2363.0);
      Complex complex2 = complex1.asin();
      complex2.hashCode();
      Complex complex3 = new Complex(2363.0);
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = Complex.valueOf(1314.49419543);
      Complex complex6 = Complex.valueOf(189.344794493716);
      complex0.reciprocal();
      complex4.getArgument();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex6.subtract(189.344794493716);
      Complex complex9 = complex2.exp();
      Complex complex10 = complex9.exp();
      complex5.readResolve();
      Complex complex11 = complex5.conjugate();
      complex10.hashCode();
      complex7.asin();
      Complex complex12 = new Complex(1.7991060813894693E185, 2363.0);
      Complex complex13 = complex12.asin();
      complex3.tan();
      complex11.acos();
      complex10.subtract(complex8);
      complex1.toString();
      Complex complex14 = Complex.NaN;
      complex7.pow(complex1);
      Complex complex15 = Complex.INF;
      complex2.getReal();
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.createComplex(1257.32413189799, 1.9069552421569824);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = new Complex(1257.32413189799);
      complex4.createComplex(1257.32413189799, 1.9069552421569824);
      Complex.valueOf(303.6445422799967);
      complex3.add(complex0);
      Complex complex5 = complex0.tanh();
      complex3.log();
      Complex complex6 = complex1.asin();
      Complex complex7 = new Complex(303.6445422799967);
      Complex complex8 = complex5.acos();
      Complex complex9 = complex4.atan();
      complex8.sin();
      complex6.getReal();
      complex9.sinh();
      complex4.getField();
      complex8.getImaginary();
      Complex complex10 = new Complex((-681.685033797));
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(0.0);
      complex1.sinh();
      complex2.pow(0.0);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.724219106106896E111));
      complex0.INF.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.pow((-3.5966064858620067E-8));
      complex1.ZERO.tan();
      complex1.ZERO.cos();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      complex3.ONE.multiply(3169.0);
      Complex complex4 = Complex.valueOf((-7.724219106106896E111), (-7.724219106106896E111));
      complex4.ZERO.readResolve();
      Complex complex5 = complex4.ZERO.multiply(565.8789675);
      complex5.tanh();
      Complex.valueOf(1015.0, (-2252.9478421353137));
      Complex complex6 = complex0.negate();
      Complex.valueOf((-7.724219106106896E111), 0.0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.divide(complex7);
      complex8.NaN.getArgument();
      complex7.multiply((-2252.9478421353137));
      complex4.readResolve();
      Complex complex9 = Complex.valueOf(565.8789675);
      complex9.subtract(complex2);
      Complex complex10 = complex3.multiply(148);
      complex10.ONE.toString();
      complex3.sin();
      complex4.sqrt();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.subtract(0.9352853987476755);
      complex3.ZERO.exp();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex2.NaN.conjugate();
      Complex complex6 = Complex.valueOf(0.9352853987476755);
      Complex complex7 = complex0.ZERO.pow(0.9352853987476755);
      complex1.equals(complex2);
      complex2.readResolve();
      complex5.INF.atan();
      complex1.equals(complex5);
      complex1.tan();
      complex5.sin();
      complex6.readResolve();
      Complex complex8 = complex2.cos();
      complex4.tanh();
      complex7.subtract(complex8);
      complex1.tan();
      complex1.add(0.9352853987476755);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.INF.multiply((-2054));
      complex3.INF.getArgument();
      complex3.I.multiply(643);
      complex2.ZERO.toString();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ONE.readResolve();
      Complex complex5 = Complex.valueOf((double) (-2054));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex1.multiply(2068.0);
      complex7.I.multiply(complex5);
      Complex complex9 = new Complex(0.7853981633974483);
      Complex complex10 = complex7.sin();
      complex10.ZERO.pow(complex1);
      complex4.getArgument();
      Complex complex11 = complex1.ZERO.tan();
      complex4.NaN.atan();
      complex1.isNaN();
      Complex complex12 = complex6.add(0.0);
      complex6.log();
      complex1.getArgument();
      complex11.toString();
      Complex complex13 = complex7.tan();
      complex13.NaN.cosh();
      complex7.cosh();
      complex13.add(complex8);
      complex12.subtract(complex5);
      complex12.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      complex0.ONE.add(0.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex(2876.5114781271, (-1630.15));
      complex3.isNaN();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex1.add(complex3);
      complex5.isNaN();
      complex5.abs();
      Complex complex6 = complex0.tan();
      complex2.subtract(0.0);
      complex5.pow(2288.0);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.ZERO;
      complex8.exp();
      complex0.conjugate();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = complex9.subtract(complex8);
      Complex complex11 = complex1.pow(complex10);
      complex11.getReal();
      complex7.sqrt();
      complex8.cos();
      complex4.abs();
      complex10.getImaginary();
      complex4.getField();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.isNaN();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sinh();
      Complex complex1 = complex0.ONE.pow(2033.0);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.INF.divide(complex1);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 2033.0);
      complex0.sinh();
      Complex complex1 = complex0.pow(2033.0);
      Complex complex2 = complex1.divide(20.0);
      complex1.subtract(complex0);
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.28161));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.I.asin();
      complex3.hashCode();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = Complex.valueOf((-2152.28161));
      Complex complex6 = Complex.valueOf((-1029.0000805769));
      Complex complex7 = complex1.ONE.reciprocal();
      complex6.getArgument();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex7.I.subtract((-2152.28161));
      Complex complex10 = complex9.ONE.exp();
      complex10.ONE.exp();
      complex4.ONE.readResolve();
      complex7.NaN.conjugate();
      complex1.hashCode();
      Complex complex11 = complex0.asin();
      complex1.asin();
      complex7.I.atan();
      Complex complex12 = complex5.tan();
      complex2.acos();
      complex8.subtract(complex12);
      complex12.toString();
      Complex complex13 = Complex.NaN;
      complex13.pow(complex11);
      Complex complex14 = Complex.INF;
      complex14.getReal();
      complex4.reciprocal();
      complex2.createComplex(Double.POSITIVE_INFINITY, (-1029.0000805769));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sinh();
      complex0.ONE.pow(2033.0);
      Complex complex1 = complex0.divide((-2687.4));
      // Undeclared exception!
      complex1.nthRoot(1014403460);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-9.036933434595339E-8), (-2555.0));
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(20.0, (-9.036933434595339E-8));
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.ZERO.createComplex(20.0, 20.0);
      Complex complex4 = complex1.multiply((-1018));
      Complex complex5 = complex0.reciprocal();
      complex4.getImaginary();
      complex3.exp();
      complex1.getImaginary();
      complex1.pow(complex4);
      complex2.abs();
      complex1.isInfinite();
      Complex complex6 = complex5.asin();
      complex1.atan();
      Complex complex7 = new Complex((-2555.0), 4822.58006235512);
      complex7.reciprocal();
      complex6.subtract(4822.58006235512);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.pow(2033.0);
      complex1.atan();
      complex2.INF.divide(Double.POSITIVE_INFINITY);
      complex2.I.subtract(complex0);
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.add(0.0);
      complex1.divide(complex3);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3800.67827517323);
      Complex complex2 = complex1.INF.pow(3800.67827517323);
      Complex complex3 = complex1.ZERO.log();
      complex3.INF.multiply(724);
      Complex complex4 = complex0.multiply(3800.67827517323);
      complex4.I.divide(complex3);
      complex4.ONE.multiply(complex3);
      Complex complex5 = complex4.ONE.tan();
      complex5.ONE.acos();
      Complex complex6 = complex0.subtract(complex1);
      complex2.INF.multiply(complex0);
      complex0.toString();
      complex6.pow(complex1);
      complex2.getReal();
      complex2.subtract((-924.914));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(3.2231452986239366E-298);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.I.sqrt1z();
      complex3.ZERO.cosh();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex4.NaN.sqrt();
      complex5.log();
      Complex complex6 = Complex.NaN;
      complex6.multiply(724);
      Complex complex7 = complex6.multiply((double) 724);
      complex4.divide(complex3);
      Complex complex8 = Complex.valueOf(3.2231452986239366E-298, Double.NaN);
      complex8.multiply(complex1);
      Complex complex9 = complex7.tan();
      complex2.acos();
      Complex complex10 = new Complex(3.2231452986239366E-298);
      complex9.toString();
      complex9.pow(complex10);
      complex10.getReal();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3800.67827517323);
      Complex complex2 = complex1.INF.pow(3800.67827517323);
      Complex complex3 = complex2.sqrt1z();
      complex3.hashCode();
      Complex complex4 = complex1.multiply(183);
      complex2.getField();
      Complex complex5 = complex3.cos();
      Complex complex6 = new Complex(183, 183);
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = complex4.asin();
      Complex complex9 = complex0.multiply(183);
      complex9.multiply(complex0);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex1.divide(2.6090455055236816);
      complex2.subtract(2.6090455055236816);
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex7.add(complex8);
      Complex complex14 = complex10.sin();
      Complex complex15 = complex11.sinh();
      complex6.hashCode();
      complex5.toString();
      complex8.divide(complex13);
      complex8.acos();
      complex7.cosh();
      complex2.negate();
      complex14.hashCode();
      complex5.divide((-642.2455537));
      complex15.pow(complex5);
      complex15.add(1636.274861704134);
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(3.216046320616945E29);
      complex0.I.hashCode();
      complex0.ZERO.pow(491.39982564);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tan();
      complex2.isNaN();
      Complex complex3 = complex0.NaN.add(complex2);
      complex1.isNaN();
      complex2.abs();
      Complex complex4 = Complex.valueOf(Double.NaN, 491.39982564);
      Complex complex5 = complex1.subtract(3.216046320616945E29);
      Complex complex6 = complex5.ONE.pow(3.216046320616945E29);
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.I.conjugate();
      complex5.ONE.subtract(complex3);
      Complex complex8 = complex2.pow(complex4);
      complex8.getReal();
      complex2.ONE.sqrt();
      Complex complex9 = complex8.cos();
      complex9.abs();
      complex1.getImaginary();
      complex0.getField();
      complex6.isNaN();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.ONE.add(0.0);
      Complex complex3 = complex2.multiply(1248);
      Complex complex4 = complex0.pow((-1.7375090618655787E103));
      Complex complex5 = Complex.valueOf((-1.7375090618655787E103));
      Complex complex6 = Complex.ONE;
      complex6.getImaginary();
      complex3.acos();
      complex1.multiply(1367);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = new Complex((-1143.0));
      Complex complex9 = complex8.negate();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.subtract(complex10);
      Complex complex12 = complex4.tanh();
      complex10.multiply(complex7);
      complex9.pow(complex0);
      complex12.multiply(3549.638946837868);
      complex5.multiply(0.0);
      complex1.add((double) 1248);
      complex11.divide(complex1);
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-9.036933434595339E-8), (-2555.0));
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(20.0, (-9.036933434595339E-8));
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.ZERO.createComplex(20.0, 20.0);
      Complex complex4 = complex3.sinh();
      complex3.pow(4681.574);
      complex3.divide(5238.23224);
      complex4.subtract(complex0);
      complex2.divide(3549.638946837868);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(1604.9147763381677);
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(1604.9147763381677);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.log();
      Complex complex6 = complex4.multiply(1);
      complex6.asin();
      complex1.acos();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex5.sin();
      Complex complex9 = Complex.I;
      complex9.getReal();
      complex1.sinh();
      complex3.NaN.asin();
      complex3.equals(complex2);
      complex3.nthRoot(1);
      Complex.valueOf((-909.92219), (-909.92219));
      complex8.readResolve();
      complex8.abs();
      complex2.getArgument();
      complex4.createComplex(Double.NaN, 1604.9147763381677);
      complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-949.0), 0.0);
      complex0.isInfinite();
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = new Complex(0.0, 1576.996359381);
      complex2.abs();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.reciprocal();
      complex0.getImaginary();
      complex4.exp();
      Complex complex7 = new Complex(1576.996359381);
      complex7.getImaginary();
      Complex complex8 = complex1.pow(complex6);
      complex5.abs();
      complex1.isInfinite();
      complex8.asin();
      complex8.atan();
      Complex complex9 = new Complex((-2091.4234791099), 1768.2181);
      complex9.reciprocal();
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1600.0), 1.9162893295288086);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.multiply(931);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = Complex.valueOf(1.9162893295288086);
      complex4.ZERO.cos();
      complex4.ONE.cos();
      Complex complex5 = complex0.add(complex1);
      complex5.NaN.readResolve();
      complex2.ZERO.conjugate();
      complex4.isInfinite();
      Complex.valueOf(0.0);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex6.acos();
      complex7.toString();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex8.I.add(1.0);
      Complex complex10 = complex8.ONE.divide(complex2);
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex6.ZERO.atan();
      complex12.ONE.divide((-3167.3797062971));
      complex11.NaN.cosh();
      complex6.getField();
      complex2.abs();
      complex0.add(388.97728);
      complex10.sin();
      complex9.multiply((-3167.3797062971));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.sin();
      complex0.getImaginary();
      complex0.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex.valueOf(0.0);
      complex1.ZERO.log();
      Complex complex3 = complex2.ZERO.sqrt();
      complex1.isInfinite();
      complex3.hashCode();
      complex0.ONE.hashCode();
      complex3.exp();
      complex0.ONE.divide(1458.73270008807);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.28161));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.I.asin();
      complex3.hashCode();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = Complex.valueOf((-2152.28161));
      Complex complex6 = Complex.valueOf((-1029.0000805769));
      Complex complex7 = complex1.ONE.reciprocal();
      complex6.getArgument();
      complex7.ZERO.sin();
      Complex complex8 = complex7.I.subtract((-2152.28161));
      Complex complex9 = complex8.ONE.exp();
      complex9.ONE.exp();
      complex4.ONE.readResolve();
      complex7.NaN.conjugate();
      complex1.hashCode();
      complex0.asin();
      Complex complex10 = complex1.asin();
      complex1.INF.subtract((-2665.667427938));
      complex3.isNaN();
      complex1.multiply(complex4);
      complex3.getArgument();
      complex7.getImaginary();
      complex2.isNaN();
      Complex complex11 = complex10.subtract((-984.86));
      complex11.NaN.sqrt1z();
      complex11.tanh();
      complex11.pow((-1029.0000805769));
      complex1.getField();
      complex0.conjugate();
      complex1.pow(complex5);
      complex2.multiply(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.INF.multiply((-2054));
      complex3.INF.getArgument();
      complex3.I.multiply(643);
      complex2.ZERO.toString();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ONE.readResolve();
      Complex complex5 = Complex.valueOf((double) (-2054));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex1.multiply(2068.0);
      complex5.ONE.exp();
      Complex complex9 = complex7.sin();
      complex9.ZERO.pow(complex1);
      complex4.getArgument();
      Complex complex10 = complex1.ZERO.tan();
      complex4.NaN.atan();
      complex1.isNaN();
      Complex complex11 = complex6.add(0.0);
      complex6.log();
      complex1.getArgument();
      complex10.toString();
      Complex complex12 = complex7.tan();
      complex7.cosh();
      complex12.add(complex8);
      complex11.subtract(complex5);
      complex11.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.03139105), (-4.03139105));
      Complex complex1 = new Complex(773.0301111725355, 1604.9147763381677);
      Complex complex2 = complex0.divide(complex1);
      complex2.subtract(complex0);
      complex2.multiply(1358);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2304.5749014);
      complex0.I.nthRoot(2164);
      complex1.ONE.toString();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.ONE.createComplex((-618.58385), 514.6815096);
      Complex complex4 = complex0.tan();
      complex4.INF.acos();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.INF.multiply(2164);
      Complex.valueOf(514.6815096, (-2162.82431537));
      complex0.add(complex1);
      complex0.ZERO.sqrt();
      complex4.getImaginary();
      complex4.isNaN();
      complex1.ZERO.readResolve();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex7.NaN.tanh();
      complex1.sqrt();
      Complex complex9 = complex1.acos();
      complex3.cosh();
      complex9.ONE.abs();
      Complex complex10 = complex2.add(complex3);
      complex6.NaN.pow(complex9);
      complex10.reciprocal();
      complex6.subtract(2304.5749014);
      Complex complex11 = complex9.exp();
      complex7.add(0.0);
      complex11.isNaN();
      complex8.sin();
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.903230345984362E-11), (-3.903230345984362E-11));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1800.8411), (-1800.8411));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.divide((-4630.7601));
      Complex.valueOf(3203.0527642);
      complex2.ONE.pow(complex1);
      Complex complex3 = complex0.atan();
      complex3.isNaN();
      complex3.NaN.reciprocal();
      complex3.createComplex(5.082190670014963E-262, (-1800.8411));
      complex1.sin();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.add(complex1);
      complex3.NaN.readResolve();
      Complex complex4 = complex3.subtract(complex0);
      complex4.ONE.nthRoot(252);
      Complex complex5 = complex4.divide(complex0);
      Complex.valueOf((-1366.71269988353));
      complex2.I.getArgument();
      Complex complex6 = complex1.subtract(complex0);
      complex6.INF.sinh();
      complex0.hashCode();
      Complex complex7 = complex5.exp();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-949.0), 0.0);
      complex0.isInfinite();
      complex0.I.readResolve();
      Complex complex1 = new Complex(0.0, 1576.996359381);
      complex1.abs();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.sqrt();
      complex0.pow(complex1);
      complex0.INF.sin();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.exp();
      complex5.ONE.hashCode();
      complex0.NaN.multiply((-2212));
      complex6.INF.add(complex0);
      complex1.I.multiply(0.0);
      Complex complex7 = new Complex(0.0);
      complex6.ONE.pow(complex7);
      complex3.hashCode();
      complex3.toString();
      Complex complex8 = complex4.sin();
      complex8.ZERO.reciprocal();
      Complex complex9 = complex5.sqrt1z();
      complex0.log();
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1484.5));
      Complex complex2 = complex0.ONE.tanh();
      complex2.INF.hashCode();
      Complex.valueOf((-267.419741338));
      complex0.add(complex1);
      complex0.tanh();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(3.2231452986239366E-298);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex3.ZERO.multiply(complex0);
      complex5.NaN.sqrt();
      Complex complex6 = complex4.ZERO.sqrt1z();
      complex6.ONE.hashCode();
      complex3.INF.multiply(183);
      complex4.INF.getField();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex4.asin();
      complex9.multiply(183);
      Complex complex10 = complex9.ONE.multiply(complex4);
      complex10.asin();
      complex7.NaN.divide((-642.2455537));
      complex9.INF.subtract((-4822.58006235512));
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex1.add(complex11);
      complex2.sin();
      complex7.sinh();
      complex12.hashCode();
      complex0.toString();
      Complex complex13 = complex0.divide(complex12);
      complex13.ONE.acos();
      Complex complex14 = complex6.cosh();
      complex14.ONE.negate();
      complex9.I.hashCode();
      Complex complex15 = complex8.divide(3.2231452986239366E-298);
      complex15.pow(complex9);
      complex13.add(3.2231452986239366E-298);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-4042));
      complex1.I.multiply((-4042));
      complex0.ONE.getField();
      complex0.abs();
      complex0.isNaN();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.readResolve();
      complex0.ONE.add(0.0);
      Complex complex1 = Complex.ONE;
      complex1.I.exp();
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.atan();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.conjugate();
      Complex complex1 = Complex.valueOf(1627.92053);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.ONE.cosh();
      complex2.ONE.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.NaN.log();
      complex0.isInfinite();
      Complex.valueOf(1.0);
      complex3.I.getField();
      Complex complex5 = complex4.I.pow(1.0);
      complex5.I.divide(complex4);
      Complex.valueOf(1.5007857288519654E-41);
      Complex complex6 = complex0.pow(1.0);
      Complex complex7 = complex6.add(1.0);
      complex3.multiply((-2032.06638095));
      Complex complex8 = complex4.exp();
      complex6.readResolve();
      complex8.cosh();
      complex6.atan();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.NaN.nthRoot(2309);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.INF.multiply(7);
      Complex complex4 = complex3.ONE.pow((double) 2309);
      complex4.INF.sqrt1z();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.I.negate();
      complex6.ONE.reciprocal();
      Complex complex7 = complex5.INF.add(0.0);
      Complex complex8 = complex5.INF.atan();
      complex2.subtract((double) 2309);
      Complex complex9 = complex2.sqrt1z();
      complex9.ONE.hashCode();
      complex9.cosh();
      Complex complex10 = Complex.valueOf((-689.955351723), (-876.668));
      complex8.INF.exp();
      complex8.ZERO.multiply((double) 7);
      complex7.ONE.subtract(complex10);
      complex2.add((-1178.54));
      complex0.add(4.233371554108682E-94);
      Complex complex11 = complex7.multiply(2309);
      complex2.add(complex11);
      complex8.acos();
      complex11.sinh();
      complex6.hashCode();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(3.216046320616945E29);
      complex0.ZERO.pow(491.39982564);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tan();
      complex2.isNaN();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex0.NaN.add(complex2);
      complex1.isNaN();
      complex2.abs();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.subtract(3.216046320616945E29);
      Complex complex7 = complex6.ONE.pow(3.216046320616945E29);
      Complex complex8 = complex0.I.sqrt();
      Complex complex9 = complex5.I.exp();
      complex8.I.conjugate();
      complex6.ONE.subtract(complex4);
      Complex complex10 = complex2.pow(complex5);
      complex10.getReal();
      complex3.ONE.sqrt();
      Complex complex11 = complex10.cos();
      complex11.abs();
      complex3.getImaginary();
      complex9.getField();
      complex7.isNaN();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.INF.sinh();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.I.multiply(1);
      complex0.I.reciprocal();
      complex0.getImaginary();
      Complex complex4 = complex0.exp();
      complex1.getImaginary();
      complex4.pow(complex1);
      complex1.abs();
      complex1.isInfinite();
      complex2.asin();
      Complex complex5 = complex3.atan();
      complex5.reciprocal();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.724219106106896E111));
      complex0.INF.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.pow((-3.5966064858620067E-8));
      complex1.ZERO.tan();
      complex1.ZERO.cos();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      complex3.ONE.multiply(3169.0);
      Complex complex4 = Complex.valueOf((-7.724219106106896E111), (-7.724219106106896E111));
      complex4.ZERO.readResolve();
      Complex complex5 = complex4.ZERO.multiply(565.8789675);
      complex5.tanh();
      Complex.valueOf(1015.0, (-2252.9478421353137));
      Complex complex6 = complex0.negate();
      Complex.valueOf((-7.724219106106896E111), 0.0);
      Complex complex7 = new Complex((-2252.9478421353137), 1015.0);
      Complex complex8 = complex6.divide(complex7);
      complex8.NaN.getArgument();
      complex7.multiply((-2252.9478421353137));
      complex4.readResolve();
      Complex complex9 = Complex.valueOf(565.8789675);
      complex9.subtract(complex2);
      Complex complex10 = complex3.multiply(148);
      complex10.ONE.toString();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.sinh();
      complex3.NaN.multiply(1);
      complex4.multiply(complex2);
      Complex complex5 = complex0.divide(complex4);
      complex5.INF.multiply(complex4);
      Complex complex6 = complex5.sqrt();
      complex6.multiply(0);
      Complex.valueOf(886.2);
      complex3.multiply(0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = Complex.NaN;
      complex2.ZERO.multiply(complex3);
      Complex complex4 = complex2.cos();
      complex4.NaN.negate();
      complex0.ONE.add(0.0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3800.67827517323);
      Complex complex2 = complex1.INF.pow(3800.67827517323);
      Complex complex3 = complex1.ZERO.log();
      complex3.INF.multiply(724);
      Complex complex4 = complex0.multiply(3800.67827517323);
      complex4.I.divide(complex3);
      complex4.ONE.multiply(complex3);
      Complex complex5 = complex4.ONE.tan();
      complex5.ONE.acos();
      Complex complex6 = complex0.subtract(complex1);
      complex0.toString();
      complex6.pow(complex1);
      complex2.getReal();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-374.482));
      Complex complex1 = complex0.acos();
      complex1.ZERO.multiply((-374.482));
      Complex complex2 = complex1.ONE.createComplex((-374.482), (-374.482));
      complex2.NaN.nthRoot(12);
      Complex.valueOf((-374.482));
      Complex complex3 = complex2.I.acos();
      complex3.INF.getField();
      Complex complex4 = Complex.valueOf(1751.2353361, (-374.482));
      complex4.ZERO.nthRoot(1);
      Complex complex5 = complex0.NaN.divide((-374.482));
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex8.INF.multiply((-374.482));
      complex6.INF.createComplex(1751.2353361, 20.0);
      Complex complex10 = complex6.NaN.sqrt1z();
      Complex complex11 = complex6.negate();
      Complex complex12 = complex11.asin();
      complex12.NaN.asin();
      complex12.ZERO.log();
      Complex complex13 = complex7.negate();
      Object object0 = new Object();
      complex9.equals(object0);
      Complex complex14 = Complex.valueOf((-1834.3906), 7.840210076743552E-8);
      Complex complex15 = complex14.ONE.sinh();
      complex13.INF.nthRoot(1);
      complex10.pow((double) 1);
      complex15.exp();
      complex13.cos();
      complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.asin();
      Complex complex1 = complex0.INF.sqrt();
      complex1.I.hashCode();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.NaN.getField();
      complex0.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.log();
      complex4.NaN.hashCode();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.NaN.log();
      complex9.hashCode();
      complex1.readResolve();
      complex5.getImaginary();
      Complex complex10 = complex6.INF.sqrt();
      complex10.NaN.log();
      Complex complex11 = complex7.sinh();
      complex4.add(complex9);
      complex11.sqrt1z();
      Complex complex12 = new Complex(0.0, 1.0);
      Complex complex13 = complex11.divide(complex12);
      complex6.isNaN();
      complex13.multiply(1.0);
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-268.232), 3506.978213);
      complex0.INF.log();
      complex0.getImaginary();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(1202.2563, 1202.2563);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex1.ZERO.exp();
      Complex complex5 = complex1.INF.conjugate();
      complex5.NaN.reciprocal();
      complex5.I.getArgument();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.I.createComplex(1202.2563, 1202.2563);
      complex7.ZERO.exp();
      complex7.NaN.sinh();
      Complex complex8 = complex0.INF.cos();
      Complex complex9 = complex6.divide(1202.2563);
      Complex complex10 = complex0.pow(complex6);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.ZERO.sin();
      Complex complex13 = complex6.sin();
      Complex complex14 = complex13.negate();
      complex4.sqrt1z();
      complex8.divide(complex14);
      complex10.multiply(complex6);
      complex12.acos();
      complex9.acos();
      complex14.sin();
      complex0.asin();
      Complex.valueOf(1.5707963267948966);
      complex3.toString();
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.ONE.toString();
      complex1.NaN.nthRoot(1);
      complex1.I.getArgument();
      complex1.ONE.log();
      complex0.getField();
      complex1.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex1.divide((-2493.2));
      Complex complex2 = Complex.valueOf((-807.696740262483));
      complex2.NaN.multiply(17);
      complex0.isInfinite();
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-9.036933434595339E-8), (-2555.0));
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(20.0, (-9.036933434595339E-8));
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.ZERO.createComplex(20.0, 20.0);
      Complex complex4 = Complex.valueOf((-1444.750940553309));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.NaN.add(complex5);
      complex6.I.tanh();
      complex4.I.log();
      Complex complex7 = complex4.ONE.multiply(1);
      complex2.ONE.asin();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.NaN.atan();
      complex8.sin();
      complex6.getReal();
      complex9.INF.sinh();
      complex6.equals(complex7);
      complex8.ONE.nthRoot(1);
      Complex complex10 = Complex.valueOf((double) 1, (-9.036933434595339E-8));
      complex3.readResolve();
      complex9.abs();
      complex2.getArgument();
      complex10.createComplex(Double.NaN, 0.11430476605892181);
      complex6.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(3230.22579467, 3230.22579467);
      Complex complex1 = Complex.valueOf(3230.22579467);
      complex0.isNaN();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.negate();
      complex1.NaN.acos();
      Complex complex4 = complex0.pow(complex2);
      complex2.toString();
      Complex complex5 = complex1.ZERO.multiply(536.14811);
      complex5.I.conjugate();
      complex4.divide(802.150584940713);
      Complex complex6 = complex4.acos();
      complex1.getImaginary();
      complex0.sqrt1z();
      complex4.getArgument();
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = complex7.NaN.reciprocal();
      complex8.I.sinh();
      complex8.sinh();
      complex0.NaN.divide(1743.346);
      complex4.getField();
      int int0 = (-4733);
      try { 
        complex6.nthRoot((-4733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,733
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sinh();
      Complex complex1 = complex0.ONE.pow(2033.0);
      complex1.INF.divide(Double.POSITIVE_INFINITY);
      complex1.I.subtract(complex0);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sinh();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-1002.5428419712));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.acos();
      complex2.I.getField();
      complex0.hashCode();
      Complex complex4 = complex1.log();
      Complex complex5 = complex0.ZERO.multiply((-80));
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.divide(complex1);
      complex0.INF.getField();
      Complex complex8 = complex7.I.subtract(complex0);
      Complex complex9 = complex7.NaN.multiply(1248);
      complex8.NaN.pow(0.0);
      Complex.valueOf(0.0);
      complex2.getImaginary();
      complex0.acos();
      Complex complex10 = complex4.multiply((-1568));
      Complex complex11 = complex10.ONE.multiply(complex9);
      complex7.negate();
      Complex complex12 = complex6.subtract(complex7);
      Complex complex13 = complex3.tanh();
      complex12.multiply(complex10);
      assertSame(complex6, complex11);
      
      Complex complex14 = complex4.pow(complex3);
      Complex complex15 = complex3.multiply(0.0);
      assertTrue(complex15.equals((Object)complex8));
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      
      complex14.multiply(0.0);
      Complex complex16 = complex13.add(0.0);
      assertEquals((-0.08609933514440239), complex16.getImaginary(), 0.01);
      assertTrue(complex16.equals((Object)complex13));
      
      Complex complex17 = complex1.divide(complex3);
      assertNotSame(complex17, complex2);
      
      Complex complex18 = complex5.log();
      assertEquals((-3.141592653589793), complex18.getImaginary(), 0.01);
  }
}
