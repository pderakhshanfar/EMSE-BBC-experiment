/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:44:29 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      complex0.acos();
      complex1.multiply((-16));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(5.205969622575851E-174, Double.POSITIVE_INFINITY);
      complex0.NaN.add((-362.2699));
      Complex complex1 = Complex.valueOf(5.205969622575851E-174, 687.6222);
      Complex complex2 = complex0.multiply(complex1);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.NaN.conjugate();
      Complex complex2 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex2.INF.getArgument();
      Complex complex3 = complex0.I.multiply(1235);
      Complex complex4 = complex0.subtract(1.4219324087E-313);
      complex4.NaN.readResolve();
      Complex complex5 = complex4.createComplex(1.4219324087E-313, 1.4219324087E-313);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.sinh();
      complex0.conjugate();
      complex5.sqrt1z();
      Complex complex8 = Complex.valueOf(1.4219324087E-313);
      complex4.log();
      complex4.divide(complex8);
      complex7.pow(complex6);
      complex7.atan();
      complex3.divide(3390.713);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.NaN.divide(0.0);
      Complex complex5 = complex2.INF.add((-2012873.2625640002));
      complex0.multiply(7);
      Complex complex6 = complex0.subtract(complex2);
      complex6.ONE.sin();
      complex1.ONE.exp();
      Complex complex7 = complex1.acos();
      complex2.INF.log();
      Complex complex8 = complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex5.add(complex3);
      Complex complex10 = Complex.valueOf((-993.1665531));
      complex8.cosh();
      complex8.multiply(7);
      complex2.subtract(complex8);
      complex4.multiply(7);
      complex7.exp();
      complex4.add(complex9);
      complex5.ZERO.add(4838.0014518);
      Complex complex11 = complex9.negate();
      complex10.acos();
      Complex.valueOf(20.0);
      complex11.sqrt1z();
      Complex complex12 = Complex.valueOf(6178.959999999999, Double.POSITIVE_INFINITY);
      complex10.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.createComplex(755.1898508873197, 4.036548930895323E-269);
      Complex complex1 = Complex.valueOf(3725.39857497, 20.0);
      Complex complex2 = Complex.I;
      complex2.ONE.cos();
      complex0.abs();
      Complex complex3 = complex1.tan();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(3.280586734644871E82);
      Complex complex2 = complex1.ONE.pow(3.280586734644871E82);
      complex0.NaN.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.divide(complex3);
      complex1.readResolve();
      Complex complex5 = complex3.INF.createComplex(3.280586734644871E82, 1738.90719829875);
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex4.sin();
      complex3.ZERO.log();
      complex7.I.getField();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex8.multiply((-1));
      complex9.negate();
      Complex complex10 = complex4.createComplex(3.280586734644871E82, 748.0);
      complex1.abs();
      Complex complex11 = complex8.sqrt();
      complex11.toString();
      complex0.sinh();
      Complex complex12 = complex0.NaN.pow(complex2);
      Complex.valueOf((double) (-1), (-4081735.3475847202));
      complex12.subtract((-3453.87962025077));
      complex10.NaN.add(complex3);
      Complex.valueOf((-2179.169852549505), (double) (-1));
      complex10.sqrt();
      complex10.getField();
      complex8.multiply(525);
      complex3.sqrt();
      Complex complex13 = complex5.asin();
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, (-20.60805117005153));
      complex1.ONE.exp();
      complex0.cos();
      Complex complex2 = complex0.ZERO.divide(2088.09);
      Complex complex3 = complex1.I.negate();
      complex0.hashCode();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(1367.912775);
      complex3.hashCode();
      Complex complex6 = complex2.cos();
      complex3.sqrt1z();
      complex6.getArgument();
      complex3.sqrt1z();
      Complex complex7 = complex3.tan();
      Complex complex8 = Complex.ZERO;
      complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = Complex.valueOf(3.1602385560000002E7);
      complex0.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = new Complex(3.1602385560000002E7);
      Complex complex4 = Complex.valueOf(5.1500902632092514E-8, 5.1500902632092514E-8);
      Complex complex5 = complex4.conjugate();
      complex2.hashCode();
      complex5.cos();
      Complex complex6 = complex5.sqrt1z();
      complex3.getArgument();
      complex6.sqrt1z();
      complex3.tan();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2810.8);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.NaN.cos();
      complex2.NaN.multiply(1.0);
      Complex complex4 = complex1.INF.multiply(complex2);
      Complex complex5 = complex0.add(2810.8);
      complex5.toString();
      complex1.sinh();
      Complex complex6 = complex5.INF.multiply(complex1);
      complex2.I.hashCode();
      Complex complex7 = complex5.sqrt1z();
      complex7.INF.tan();
      Complex complex8 = complex1.add(complex0);
      complex8.getField();
      complex8.ONE.acos();
      Complex complex9 = complex5.subtract(complex0);
      Complex complex10 = complex1.createComplex(2.0, (-873.8105058));
      complex4.INF.readResolve();
      complex10.ONE.tan();
      complex0.NaN.pow(2810.8);
      complex5.cosh();
      complex9.conjugate();
      complex10.getImaginary();
      complex4.exp();
      Complex complex11 = complex8.atan();
      complex11.NaN.tanh();
      Complex complex12 = complex11.ZERO.reciprocal();
      complex0.multiply(2810.8);
      Complex complex13 = complex4.createComplex((-8.316530604593264E105), (-8.316530604593264E105));
      complex13.I.pow(1539.664319);
      complex12.sqrt();
      complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.abs();
      Complex complex2 = new Complex((-20.0), 1.0);
      complex2.tanh();
      Complex complex3 = complex0.acos();
      complex3.multiply(102);
      complex1.readResolve();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-1.0), 9.113713162029408E267);
      Complex complex2 = complex1.exp();
      complex1.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide((-1.0));
      Complex complex5 = complex1.tan();
      complex5.negate();
      Complex complex6 = Complex.valueOf(0.5963221788406372);
      complex3.hashCode();
      complex2.negate();
      Complex complex7 = new Complex(1.9984629230157296);
      Complex complex8 = new Complex(9.113713162029408E267);
      complex8.conjugate();
      complex6.hashCode();
      complex6.cos();
      complex1.sqrt1z();
      complex2.getArgument();
      complex4.sqrt1z();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.ZERO.toString();
      complex1.abs();
      Complex complex2 = complex1.tanh();
      complex0.acos();
      Complex complex3 = complex2.multiply(complex0);
      complex0.createComplex(Double.POSITIVE_INFINITY, 20.0);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.equals(complex0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.abs();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      complex0.ONE.exp();
      Complex complex1 = complex0.ZERO.divide(0.5963221788406372);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.I.negate();
      Complex.valueOf(0.5963221788406372);
      Complex complex4 = Complex.INF;
      complex4.hashCode();
      complex0.negate();
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = complex0.tan();
      complex1.conjugate();
      complex2.hashCode();
      complex6.cos();
      complex3.sqrt1z();
      complex5.getArgument();
      Complex complex7 = Complex.ZERO;
      complex7.sqrt1z();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.getReal();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(1367.912775, 511.3875375328664);
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.divide((-1243.743952));
      Complex complex6 = complex5.tan();
      Complex complex7 = complex1.negate();
      Complex.valueOf(1001840.6399917994);
      complex1.hashCode();
      complex7.negate();
      Complex complex8 = new Complex((-1243.743952));
      complex6.tan();
      Complex complex9 = complex4.conjugate();
      complex8.hashCode();
      complex4.cos();
      complex9.sqrt1z();
      complex2.getArgument();
      complex9.sqrt1z();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-1829.8350669453575));
      Complex complex1 = complex0.negate();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-626.0), Double.POSITIVE_INFINITY);
      complex0.multiply(0.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      Complex complex1 = complex0.I.cosh();
      complex0.getImaginary();
      complex0.ONE.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.log();
      complex2.NaN.hashCode();
      Complex complex4 = complex0.reciprocal();
      complex1.ONE.acos();
      Complex complex5 = complex1.ZERO.negate();
      complex0.getField();
      complex0.subtract(complex1);
      complex1.sqrt();
      complex2.pow(complex5);
      complex3.nthRoot(650);
      complex3.subtract(complex4);
      complex5.multiply((-2521));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, (-1695.0));
      Complex complex1 = Complex.valueOf((-4121896.0488738054), 5.205969622575851E-174);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.multiply(550.1353527391898);
      Complex complex4 = Complex.I;
      complex0.acos();
      complex3.toString();
      complex1.pow(2707.628100457638);
      complex3.sqrt();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-6208.363749968939));
      Complex complex1 = complex0.log();
      complex1.abs();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(complex1);
      complex3.NaN.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.divide(0.5963221788406372);
      Complex complex5 = Complex.valueOf((-20.0), (-20.0));
      Complex complex6 = complex5.tan();
      Complex complex7 = complex4.negate();
      Complex complex8 = Complex.valueOf(4177.915);
      complex6.hashCode();
      Complex complex9 = complex5.negate();
      Complex complex10 = new Complex(1237.134907921813);
      complex2.tan();
      complex1.conjugate();
      complex7.hashCode();
      complex5.cos();
      complex2.sqrt1z();
      complex8.getArgument();
      complex9.sqrt1z();
      complex3.tan();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      complex0.sin();
      double double0 = (-20.0);
      complex1.INF.tan();
      try { 
        complex1.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = (Complex)complex1.NaN.readResolve();
      complex1.multiply(669);
      Complex complex3 = complex1.sqrt1z();
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.divide(complex0);
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, (-20.60805117005153));
      complex1.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      complex0.tanh();
      complex2.equals(")");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(30.67);
      complex1.acos();
      Complex complex2 = complex0.log();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      complex0.isInfinite();
      complex0.getReal();
      Complex complex2 = complex0.subtract((double) 669);
      complex1.multiply(669);
      complex2.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      complex0.isInfinite();
      complex0.getReal();
      Complex complex2 = Complex.I;
      complex2.abs();
      Complex complex3 = complex0.sinh();
      complex1.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf((-5.150590480969644E-8), 1.0);
      Complex complex6 = Complex.valueOf((-5.150590480969644E-8));
      complex5.pow(complex6);
      Complex complex7 = new Complex((-2998.0208981760456), (-2998.0208981760456));
      Complex complex8 = complex7.divide((-0.6));
      Complex complex9 = complex3.reciprocal();
      complex8.reciprocal();
      complex9.sqrt1z();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, (-20.60805117005153));
      complex1.ONE.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.INF.pow((-1576.601666535));
      complex4.ZERO.conjugate();
      Complex complex5 = complex3.ZERO.divide(0.5963221788406372);
      Complex complex6 = complex5.I.tan();
      complex6.I.negate();
      Complex.valueOf(0.5963221788406372);
      complex0.hashCode();
      complex5.subtract(0.5963221788406372);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex0.tanh();
      complex8.equals(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = Complex.valueOf((-4121896.0488738054), 134.983798);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.multiply(134.983798);
      complex2.subtract((-4121896.0488738054));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      complex3.divide(3.6582513195302256E192);
      complex2.getArgument();
      Complex complex6 = complex4.subtract(134.983798);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.add(complex0);
      complex5.tan();
      Complex complex9 = complex2.conjugate();
      complex0.hashCode();
      Complex complex10 = Complex.valueOf(1367.912775, (-2697.849492195318));
      complex10.cos();
      complex9.sqrt1z();
      complex8.hashCode();
      complex1.sqrt1z();
      complex10.tan();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3711958590112228E-9, (-3427.61));
      Complex complex1 = new Complex(1.3711958590112228E-9, (-3427.61));
      complex1.hashCode();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex4.I.divide(complex1);
      complex5.INF.abs();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.tan();
      complex7.hashCode();
      Complex complex8 = complex6.atan();
      complex8.INF.negate();
      Complex complex9 = complex8.I.add((-3427.61));
      Complex complex10 = complex9.ONE.acos();
      complex10.INF.cos();
      complex2.NaN.add(complex3);
      Complex complex11 = Complex.valueOf(1910.133701126817);
      Complex complex12 = Complex.valueOf((-3427.61));
      complex11.hashCode();
      complex7.multiply(2049870754);
      complex2.getField();
      complex7.acos();
      complex3.multiply(complex1);
      complex11.getField();
      Complex complex13 = complex12.negate();
      complex5.asin();
      complex13.readResolve();
      complex7.sin();
      complex3.tanh();
      complex13.multiply((-7.756800301729815E-9));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.tan();
      Complex complex1 = complex0.ONE.log();
      complex1.ONE.abs();
      Complex complex2 = new Complex(4.458001565878111E-114, 5.669184079525E-24);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.asin();
      complex4.I.sqrt();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex3.acos();
      complex6.getArgument();
      Complex complex8 = complex4.INF.sinh();
      complex4.NaN.asin();
      Complex.valueOf((-1111.53), 5.669184079525E-24);
      Complex complex9 = complex7.atan();
      Complex complex10 = complex5.exp();
      complex10.ONE.subtract(1.0);
      complex10.ZERO.atan();
      complex6.getImaginary();
      complex8.divide(complex9);
      complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, 0.0);
      Complex complex2 = complex1.ONE.exp();
      complex2.INF.atan();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.sin();
      complex4.I.divide(complex1);
      Complex complex5 = complex4.ZERO.divide(0.5963221788406372);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = Complex.valueOf(0.5963221788406372);
      complex0.hashCode();
      Complex complex9 = complex4.INF.negate();
      complex9.ONE.sin();
      Complex complex10 = complex9.tan();
      complex0.conjugate();
      complex7.hashCode();
      complex6.cos();
      complex5.sqrt1z();
      complex8.getArgument();
      Complex.valueOf(2088.09);
      Complex complex11 = Complex.I;
      complex11.divide(complex7);
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex1.INF.createComplex(20.0, 5.205969622575851E-174);
      Complex complex3 = complex1.NaN.atan();
      complex1.toString();
      complex1.I.negate();
      complex1.NaN.getField();
      Complex complex4 = new Complex(0, 0);
      complex4.ZERO.getField();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex4.exp();
      complex7.I.sqrt1z();
      complex7.isNaN();
      Complex complex8 = complex6.multiply((double) 0);
      complex8.NaN.sqrt1z();
      complex3.getReal();
      Object object0 = new Object();
      complex7.ZERO.hashCode();
      complex1.equals(object0);
      complex0.sin();
      Complex complex9 = complex8.atan();
      complex4.sqrt();
      Complex complex10 = Complex.valueOf(1.819629430770874);
      complex2.subtract(complex10);
      complex2.atan();
      Complex complex11 = Complex.INF;
      complex11.hashCode();
      complex9.sqrt1z();
      Complex complex12 = new Complex(0, Double.NaN);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = Complex.ZERO;
      complex2.hashCode();
      complex1.negate();
      Complex complex4 = complex2.sin();
      Complex complex5 = new Complex((-0.8813735870195429), 0.0);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.conjugate();
      complex5.ONE.tanh();
      complex1.hashCode();
      complex4.cos();
      Complex complex8 = complex0.sqrt1z();
      complex8.getArgument();
      Complex.valueOf((-2218.2748));
      complex7.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = Complex.valueOf((-4121896.0488738054), 134.983798);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.multiply(134.983798);
      complex2.subtract((-4121896.0488738054));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.divide(3.6582513195302256E192);
      complex2.getArgument();
      complex4.subtract(134.983798);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.add(complex0);
      complex5.tan();
      Complex complex9 = complex2.conjugate();
      complex0.hashCode();
      Complex complex10 = Complex.valueOf(1367.912775, (-2697.849492195318));
      complex10.cos();
      Complex complex11 = complex9.sqrt1z();
      complex8.getArgument();
      Complex.valueOf(1367.912775);
      complex6.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, 0.0);
      complex1.ONE.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.ZERO.divide(0.5963221788406372);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.I.negate();
      Complex.valueOf(0.5963221788406372);
      complex0.hashCode();
      Complex complex7 = complex3.INF.negate();
      complex7.ONE.sin();
      complex7.tan();
      Complex complex8 = complex0.conjugate();
      complex6.hashCode();
      complex5.cos();
      complex8.sqrt1z();
      complex0.getArgument();
      Complex.valueOf(0.5963221788406372);
      complex0.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.sinh();
      complex0.getField();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.tanh();
      complex5.exp();
      Complex complex6 = complex3.sqrt1z();
      complex4.isNaN();
      complex5.multiply(1923.6350671231564);
      Complex complex7 = complex6.sqrt1z();
      complex3.getReal();
      Object object0 = new Object();
      complex5.hashCode();
      complex6.equals("LN_MANT");
      complex3.log();
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex((-393.0));
      complex8.abs();
      Complex complex9 = complex3.sinh();
      complex1.cosh();
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.I;
      complex9.pow(complex11);
      complex6.divide(1923.6350671231564);
      complex2.reciprocal();
      complex4.reciprocal();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.asin();
      complex2.readResolve();
      Complex complex5 = Complex.INF;
      complex5.getArgument();
      complex1.toString();
      Complex complex6 = Complex.I;
      complex6.readResolve();
      Complex complex7 = complex0.INF.sqrt();
      complex7.ONE.getField();
      Complex complex8 = complex5.asin();
      complex5.multiply(complex1);
      complex1.pow(0.7853981633974483);
      complex6.exp();
      complex4.subtract(complex1);
      Complex complex9 = complex8.subtract(2768.65);
      complex9.cos();
      complex8.atan();
      Complex complex10 = new Complex(0.0, (-166.0));
      Complex complex11 = complex2.pow(complex3);
      complex11.INF.divide((-166.0));
      complex11.multiply(490);
      Complex complex12 = Complex.NaN;
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, 0.0);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.ZERO.divide(0.5963221788406372);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = Complex.valueOf(0.5963221788406372);
      complex7.hashCode();
      Complex complex9 = complex5.negate();
      complex0.sin();
      complex0.subtract(complex4);
      complex8.toString();
      Complex complex10 = complex9.divide(0.5963221788406372);
      complex2.log();
      complex10.getReal();
      complex4.getArgument();
      complex2.getReal();
      complex6.atan();
      Complex.valueOf(486.405413522198);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex1.INF.createComplex(20.0, 5.205969622575851E-174);
      complex1.NaN.atan();
      complex1.toString();
      complex0.cos();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = new Complex(20.0);
      Complex complex6 = Complex.INF;
      complex6.add(20.0);
      complex3.acos();
      Complex complex7 = complex2.asin();
      complex0.sin();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.exp();
      Complex complex10 = complex8.createComplex((-61.2515876993464), 5.205969622575851E-174);
      complex4.ONE.divide(complex7);
      complex9.pow((-3.00901028043488E-38));
      complex5.tanh();
      complex10.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(1.7516300678253174);
      Complex complex1 = complex0.createComplex(1.7516300678253174, 1.7516300678253174);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.divide(0.41997434161402614);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex1.negate();
      Complex complex8 = Complex.valueOf(0.5963221788406372);
      complex6.INF.sqrt1z();
      complex5.hashCode();
      Complex complex9 = complex8.negate();
      complex7.sin();
      complex9.subtract(complex8);
      complex6.toString();
      complex8.divide(1.5131274403756834E-4);
      Complex complex10 = complex6.log();
      complex2.getReal();
      Complex complex11 = Complex.INF;
      complex11.getArgument();
      complex3.getReal();
      Complex complex12 = Complex.INF;
      complex12.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.pow(5929.19015574);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.pow(complex1);
      complex1.INF.abs();
      complex0.NaN.nthRoot(526);
      Complex complex3 = complex0.sin();
      complex0.INF.abs();
      Complex complex4 = complex0.ZERO.sqrt();
      complex4.abs();
      complex2.sin();
      complex4.subtract(complex1);
      Complex complex5 = Complex.INF;
      complex5.toString();
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      complex5.log();
      complex5.getReal();
      complex6.getArgument();
      complex5.getReal();
      complex3.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 684;
      complex0.ONE.nthRoot(684);
      complex0.equals(complex0);
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 0;
      Complex complex1 = complex0.INF.multiply(0);
      complex0.nthRoot(1155);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      // Undeclared exception!
      complex0.nthRoot(2146019787);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf(599.0, 599.0);
      Complex complex4 = complex3.cos();
      complex0.divide(complex2);
      Complex complex5 = complex3.negate();
      complex2.sinh();
      complex5.add(20.0);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex3.sin();
      complex6.exp();
      complex8.createComplex(3297.3056124718396, (-1250.665098392));
      complex1.pow((-1250.665098392));
      complex0.tanh();
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.3297532796859741, 0.3297532796859741);
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ONE.readResolve();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex2.NaN.subtract(2.0);
      complex3.NaN.abs();
      complex3.I.toString();
      complex2.INF.abs();
      Complex complex4 = Complex.valueOf(2.0, 0.3297532796859741);
      Complex complex5 = new Complex(3680.7378804448, (-1800.59));
      complex2.multiply(complex5);
      Complex complex6 = complex4.add(2.0);
      Complex complex7 = complex4.INF.pow(complex2);
      Complex complex8 = complex6.I.tan();
      complex8.add(complex7);
      Complex complex9 = complex0.add(complex4);
      Complex complex10 = complex9.NaN.atan();
      complex1.divide(2.0);
      complex10.sin();
      Complex.valueOf((-2555.21522077726), (-649.118385));
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow((-6.284125161007433E-8));
      complex2.asin();
      complex1.isNaN();
      Complex complex3 = complex1.cosh();
      complex3.ONE.getField();
      complex1.exp();
      Complex complex4 = complex2.NaN.createComplex(506.8, 4.466959125843237E-8);
      complex4.NaN.getField();
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex0.exp();
      double double0 = (-528.7547615814);
      Complex complex7 = complex6.NaN.createComplex(4.466959125843237E-8, (-528.7547615814));
      complex7.ONE.toString();
      complex4.conjugate();
      complex5.I.pow((-528.7547615814));
      Complex complex8 = complex2.asin();
      complex8.INF.cosh();
      complex6.sinh();
      complex0.getReal();
      complex2.isNaN();
      try { 
        complex5.nthRoot((-2598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,598
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.exp();
      complex3.sqrt1z();
      complex0.isNaN();
      Complex complex4 = complex1.multiply(6.283185307179586);
      Complex complex5 = complex4.sqrt1z();
      complex3.getReal();
      Object object0 = new Object();
      complex0.hashCode();
      complex4.equals(object0);
      Complex complex6 = complex0.log();
      complex1.pow(6.000235114895513E123);
      complex6.abs();
      Complex complex7 = new Complex(2.718281828459045, 906.4202882160296);
      Complex complex8 = complex7.cosh();
      Complex complex9 = Complex.INF;
      complex9.pow(complex2);
      Complex complex10 = complex5.divide((-393.0));
      complex8.reciprocal();
      complex10.reciprocal();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      complex1.multiply(complex0);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.reciprocal();
      complex2.abs();
      Complex complex6 = complex4.acos();
      complex4.getReal();
      complex3.divide(complex6);
      complex5.abs();
      Complex complex7 = Complex.INF;
      complex7.sinh();
      complex1.abs();
      complex1.abs();
      Complex complex8 = Complex.valueOf(0.29573754064215824);
      complex5.divide(0.7615941559557649);
      complex8.getArgument();
      Complex complex9 = complex1.exp();
      complex4.getReal();
      complex0.pow(1466.0);
      complex9.toString();
      complex0.reciprocal();
      complex9.readResolve();
      Complex complex10 = Complex.valueOf((-3873.412708148956), 0.7615941559557649);
      complex6.abs();
      complex3.getImaginary();
      Complex complex11 = new Complex(1466.0);
      complex11.reciprocal();
      complex9.divide(complex10);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, 0.0);
      complex1.ONE.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.sin();
      double double0 = 0.5963221788406372;
      Complex complex4 = complex3.ZERO.divide(0.5963221788406372);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.pow(complex1);
      complex1.INF.abs();
      complex0.NaN.nthRoot(512);
      Complex complex3 = complex0.sin();
      complex0.INF.abs();
      Complex complex4 = complex0.ZERO.sqrt();
      complex4.abs();
      complex2.sin();
      complex4.subtract(complex1);
      Complex complex5 = new Complex(512);
      complex5.toString();
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      complex5.log();
      complex5.getReal();
      complex6.getArgument();
      complex5.getReal();
      complex3.atan();
      Complex.valueOf(512.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.sqrt1z();
      complex1.abs();
      complex3.getField();
      complex0.atan();
      complex3.INF.tanh();
      complex3.hashCode();
      complex4.sqrt1z();
      Complex complex5 = new Complex((-6.176151635685492), 1.3880165998346134E260);
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-240.5694388522));
      Complex complex1 = complex0.INF.exp();
      complex0.NaN.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.INF.add(0.0);
      complex3.I.hashCode();
      complex3.abs();
      Complex complex4 = Complex.valueOf(599.0, 0.0);
      complex4.sinh();
      complex4.abs();
      complex4.abs();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex3.divide(3237.6);
      complex1.getArgument();
      Complex complex7 = new Complex(599.0);
      Complex complex8 = complex7.exp();
      complex7.getReal();
      Complex complex9 = complex8.pow(Double.NaN);
      complex5.toString();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = Complex.NaN;
      complex11.readResolve();
      Complex.valueOf(3237.6, (-1.2351697477129173E-65));
      complex1.abs();
      complex9.getImaginary();
      Complex complex12 = complex6.reciprocal();
      Complex complex13 = complex9.divide(complex10);
      complex5.sqrt();
      complex13.getArgument();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.ZERO.divide(0.5963221788406372);
      complex5.I.tan();
      Complex complex6 = Complex.valueOf(0.9719054624828396);
      complex1.readResolve();
      complex5.isNaN();
      Complex complex7 = complex4.pow(complex0);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex5.atan();
      complex9.sqrt();
      Complex.valueOf(1367.912775);
      Complex complex10 = Complex.valueOf((-733.9), 1367.912775);
      complex10.subtract(complex4);
      complex8.pow(complex2);
      Complex complex11 = complex6.multiply(0);
      complex1.nthRoot(150);
      complex8.isNaN();
      complex2.atan();
      complex11.pow(1548.8016117921);
      complex11.multiply((-784.872081871));
      complex7.multiply((-733.9));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex((-1.0), 0.0);
      Complex complex2 = complex1.createComplex((-1.0028661472061573E-7), 0.0);
      Complex complex3 = complex2.exp();
      complex0.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.divide((-1.0));
      Complex complex6 = complex1.tan();
      complex2.negate();
      Complex.valueOf((-1334.94228366378));
      complex2.hashCode();
      complex5.negate();
      Complex complex7 = Complex.NaN;
      complex7.sin();
      Complex complex8 = Complex.INF;
      complex8.subtract(complex3);
      complex7.toString();
      complex6.divide((-1076.297662008766));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.log();
      complex4.getReal();
      complex10.getReal();
      Complex complex11 = Complex.valueOf((double) 512);
      complex11.atan();
      Complex.valueOf(516.569640052);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      complex0.NaN.pow(complex1);
      complex1.INF.abs();
      complex0.NaN.nthRoot(512);
      Complex complex2 = complex0.sin();
      complex0.INF.abs();
      Complex complex3 = complex0.ZERO.sqrt();
      complex3.abs();
      Complex complex4 = complex2.I.createComplex(2504.779336, 0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex4.INF.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.pow((-1289.88481762315));
      complex6.abs();
      Complex complex7 = Complex.NaN;
      complex7.sinh();
      complex2.cosh();
      Complex complex8 = Complex.INF;
      complex8.negate();
      complex5.pow(complex7);
      complex3.divide((-1289.88481762315));
      Complex complex9 = complex3.reciprocal();
      complex4.reciprocal();
      Complex complex10 = complex9.sqrt1z();
      complex10.abs();
      complex4.multiply(512);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-240.5694388522));
      Complex complex1 = complex0.INF.exp();
      complex0.NaN.hashCode();
      Complex complex2 = Complex.valueOf((-240.5694388522));
      Complex complex3 = complex2.acos();
      complex3.getArgument();
      Complex complex4 = complex3.subtract(1287.177702);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = Complex.valueOf((-8.937957126662392E-8));
      complex7.readResolve();
      complex0.isNaN();
      Complex complex8 = complex4.pow(complex3);
      Complex complex9 = complex6.sin();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex9.sqrt();
      Complex.valueOf((-4514.248666));
      Complex complex12 = Complex.ONE;
      complex12.subtract(complex10);
      complex2.pow(complex0);
      Complex complex13 = complex1.multiply(0);
      Complex complex14 = new Complex((-1738.90719829875), 1369.077853263441);
      complex14.nthRoot(1);
      complex11.isNaN();
      complex0.atan();
      complex13.pow((-8.937957126662392E-8));
      complex8.multiply((-8.937957126662392E-8));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((double) 1, (double) 1);
      complex1.NaN.multiply((-578));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.multiply(1);
      complex3.ONE.subtract(complex1);
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = new Complex((-578), 1167.86294);
      Complex complex6 = complex5.sinh();
      complex4.abs();
      complex5.abs();
      Complex complex7 = complex1.multiply(complex5);
      Complex complex8 = complex5.divide(Double.NaN);
      complex8.getArgument();
      Complex complex9 = complex7.exp();
      complex9.getReal();
      Complex complex10 = Complex.valueOf((double) 1, 0.0);
      Complex complex11 = complex10.pow((-481.13679929343357));
      complex2.toString();
      complex6.reciprocal();
      complex10.readResolve();
      Complex.valueOf(0.0, 3.965171513035854E23);
      complex11.abs();
      complex11.getImaginary();
      complex3.reciprocal();
      complex6.divide(complex8);
      Complex complex12 = Complex.ZERO;
      complex12.sqrt();
      complex7.getArgument();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex3.multiply(complex1);
      complex5.ONE.atan();
      complex2.ONE.exp();
      Complex complex6 = Complex.ZERO;
      complex6.ONE.reciprocal();
      complex6.abs();
      Complex complex7 = complex0.acos();
      complex1.getReal();
      Complex complex8 = complex1.divide(complex7);
      complex8.NaN.abs();
      Complex complex9 = Complex.valueOf(20.0, Double.NaN);
      Complex complex10 = complex7.conjugate();
      complex9.asin();
      complex7.multiply(153);
      Complex complex11 = complex4.divide(5.721951534729663E-8);
      complex10.divide(complex7);
      Complex.valueOf(2.1782039447564253E47, Double.NaN);
      complex11.reciprocal();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 878.517744376;
      Complex complex0 = new Complex(0.0, 878.517744376);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.cosh();
      complex1.NaN.hashCode();
      Complex complex3 = complex0.INF.atan();
      complex3.atan();
      Complex complex4 = complex0.acos();
      complex3.INF.hashCode();
      complex0.abs();
      Complex complex5 = Complex.valueOf(878.517744376, 0.0);
      complex0.equals(complex4);
      Complex complex6 = complex2.add(0.0);
      complex6.subtract(0.0);
      Complex complex7 = complex5.asin();
      int int0 = (-635);
      try { 
        complex7.ZERO.nthRoot((-635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-903.53));
      Complex complex1 = complex0.I.tan();
      complex1.NaN.negate();
      Complex complex2 = complex0.ONE.tan();
      complex2.ZERO.cosh();
      complex1.NaN.abs();
      Complex complex3 = complex0.sinh();
      complex3.abs();
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex6.pow((-903.53));
      Complex complex8 = complex7.I.acos();
      complex4.ZERO.sinh();
      complex8.I.toString();
      complex3.NaN.reciprocal();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex7.atan();
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex11.ZERO.exp();
      complex12.ONE.reciprocal();
      complex12.ZERO.add(complex9);
      Complex complex13 = complex0.createComplex((-903.53), (-903.53));
      complex13.I.sin();
      Complex complex14 = complex10.acos();
      complex0.pow(Double.NaN);
      complex6.subtract((-903.53));
      Complex complex15 = complex14.acos();
      Complex complex16 = complex7.conjugate();
      complex16.ONE.createComplex(2584.5889647022173, Double.NaN);
      Complex complex17 = complex9.asin();
      complex5.conjugate();
      complex16.cos();
      complex7.conjugate();
      complex4.subtract(complex15);
      complex17.conjugate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1435.6002314143386);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.cosh();
      complex1.ZERO.cos();
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex0.multiply(complex1);
      complex2.negate();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex1.add(1435.6002314143386);
      complex0.ZERO.acos();
      complex6.I.asin();
      Complex complex7 = complex4.sin();
      complex7.NaN.exp();
      Complex complex8 = complex7.createComplex(1435.6002314143386, 1435.6002314143386);
      complex7.INF.multiply(1435.6002314143386);
      complex7.ZERO.sqrt();
      complex5.subtract(1435.6002314143386);
      complex8.negate();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.I.readResolve();
      complex1.INF.getArgument();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.pow(0.7853981633974483);
      complex2.cos();
      Complex complex4 = complex2.multiply(44);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.INF.cosh();
      complex5.INF.divide(complex0);
      Complex complex7 = complex4.multiply((double) 44);
      Complex complex8 = complex3.subtract(complex4);
      complex8.ZERO.sqrt();
      Complex complex9 = complex7.INF.exp();
      complex1.cos();
      complex1.subtract(complex9);
      complex3.getField();
      complex3.acos();
      complex6.sqrt();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.I.pow(complex1);
      complex2.INF.abs();
      Complex complex3 = complex0.createComplex((-20.0), (-20.0));
      Complex complex4 = complex2.ZERO.tanh();
      complex2.ZERO.divide(2511.8907903586487);
      complex3.ZERO.getArgument();
      Complex complex5 = Complex.valueOf((-20.0));
      Complex complex6 = complex5.ZERO.pow(complex2);
      complex6.I.subtract(complex4);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.divide((-20.0));
      complex8.I.subtract(complex0);
      complex8.ZERO.sqrt();
      complex8.INF.toString();
      complex5.ZERO.log();
      complex5.toString();
      complex5.negate();
      complex0.subtract((-20.0));
      Complex complex9 = complex4.subtract(0.0);
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex0.log();
      complex11.ZERO.nthRoot(1952);
      Complex complex12 = complex3.multiply(complex0);
      complex4.abs();
      Complex complex13 = Complex.valueOf(0.664920449256897, Double.POSITIVE_INFINITY);
      complex13.ONE.cosh();
      complex6.getImaginary();
      complex12.sqrt();
      complex12.multiply(complex10);
      complex10.add((double) 1952);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.tanh();
      complex0.hashCode();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.add(complex1);
      complex3.I.toString();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex5.ONE.multiply(complex1);
      Complex complex7 = complex6.I.asin();
      complex6.ONE.readResolve();
      Complex complex8 = complex0.subtract((-31.68));
      complex8.INF.getArgument();
      complex1.toString();
      complex2.readResolve();
      complex6.asin();
      Complex complex9 = complex7.multiply(complex5);
      complex7.pow((-31.68));
      Complex complex10 = complex5.exp();
      complex10.INF.subtract(complex7);
      complex1.subtract(0.0);
      Complex complex11 = complex6.cos();
      complex7.I.atan();
      Complex complex12 = new Complex((-166.0), 1203.9);
      Complex complex13 = complex9.pow(complex12);
      complex13.multiply(490);
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      complex1.ONE.multiply(86.326);
      complex1.ONE.getField();
      Complex complex2 = complex0.conjugate();
      complex2.INF.multiply(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.NaN.pow(complex3);
      complex4.ONE.nthRoot(354);
      try { 
        complex4.NaN.nthRoot((-2609));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,609
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-240.5694388522));
      Complex complex1 = complex0.INF.exp();
      complex0.NaN.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.INF.add(0.0);
      complex3.I.hashCode();
      complex0.readResolve();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex4.exp();
      ComplexField complexField0 = complex0.I.getField();
      complex0.readResolve();
      complex2.cos();
      complex5.getField();
      complex0.multiply(2852);
      complex2.equals(complexField0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.exp();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.I.sqrt1z();
      complex3.I.abs();
      complex1.getField();
      complex1.INF.atan();
      complex0.hashCode();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.log();
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.INF.pow(0.0);
      complex0.tanh();
      complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1344.0);
      complex0.getArgument();
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = Complex.valueOf((-1825.1), 1344.0);
      complex0.hashCode();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.tan();
      complex2.I.nthRoot(1455);
      complex0.equals(complex3);
      Complex complex5 = complex2.multiply((-1.0));
      complex4.I.atan();
      complex1.toString();
      complex4.NaN.nthRoot(83);
      complex3.isInfinite();
      complex1.getImaginary();
      complex3.sqrt1z();
      complex5.I.readResolve();
      complex5.NaN.multiply(1.817649308779104E117);
      complex5.I.acos();
      complex0.pow(complex4);
      Complex complex6 = complex5.cosh();
      complex6.nthRoot(1455);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(0.0);
      complex0.I.nthRoot(621);
      Complex complex2 = complex0.divide((-3701.2956183882));
      complex2.isInfinite();
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex2.cosh();
      complex3.ZERO.cos();
      Complex complex5 = Complex.valueOf((-2585.8597958547), (double) 621);
      complex5.NaN.getField();
      Complex complex6 = complex4.ONE.exp();
      complex6.ZERO.nthRoot(3402);
      Complex complex7 = complex2.ONE.cos();
      complex7.I.createComplex(0.0, (-3701.2956183882));
      complex7.NaN.reciprocal();
      Complex complex8 = complex2.atan();
      complex6.nthRoot(621);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.ZERO.add(complex1);
      Complex complex11 = complex10.pow(complex0);
      complex11.NaN.atan();
      complex2.multiply((-3701.2956183882));
      complex9.nthRoot(1);
      complex2.multiply(complex8);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 684;
      complex0.ONE.nthRoot(684);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.17595365643501282, 0.0);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.multiply(570);
      Complex complex3 = new Complex(3537.279890486, 911.0);
      complex1.ZERO.cosh();
      Complex complex4 = complex3.ZERO.conjugate();
      complex3.ONE.getArgument();
      complex4.ONE.hashCode();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.subtract(2078.8);
      Complex complex8 = complex2.INF.sqrt();
      complex5.pow(2078.8);
      complex7.I.hashCode();
      complex1.getField();
      complex1.multiply(911.0);
      complex0.isInfinite();
      complex5.isInfinite();
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex3.ONE.reciprocal();
      complex10.hashCode();
      complex0.getReal();
      complex2.sinh();
      complex1.sqrt1z();
      complex5.divide(0.17595365643501282);
      complex9.toString();
      complex4.hashCode();
      complex8.getImaginary();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.511474847793579, 1.511474847793579);
      Complex complex1 = Complex.valueOf(4.278345398213486E-9, 1.511474847793579);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.ZERO.negate();
      complex0.divide(3597.3033068);
      complex0.ONE.getArgument();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.divide(1.2549416560182509E-8);
      Complex complex5 = complex0.sinh();
      complex5.readResolve();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.add(complex6);
      complex7.ONE.readResolve();
      complex5.I.multiply(1);
      complex2.subtract(complex6);
      complex5.log();
      complex5.add(complex4);
      complex3.readResolve();
      complex4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.NaN.asin();
      complex2.INF.acos();
      Complex complex3 = complex1.ZERO.sin();
      complex3.I.divide(2159.2817538685363);
      complex1.ZERO.hashCode();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.negate();
      complex5.sqrt();
      complex0.ONE.pow((-2765.10928));
      Complex complex6 = Complex.valueOf(0.6296497583389282, 20.0);
      complex6.NaN.add(complex5);
      Complex complex7 = complex0.sqrt1z();
      complex4.I.exp();
      Complex complex8 = complex7.multiply(complex6);
      complex8.NaN.hashCode();
      complex5.exp();
      complex2.tanh();
      Complex complex9 = complex4.multiply(1);
      complex9.createComplex((-2734.8622523), (-2734.8622523));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 872.18991656;
      Complex complex0 = Complex.valueOf(872.18991656);
      Complex complex1 = null;
      complex0.I.getField();
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
      complex1.I.getField();
      Complex complex2 = complex1.I.atan();
      complex2.I.getField();
      Complex complex3 = complex0.add(6.283185307179586);
      complex3.divide((-773.6134));
      Complex complex4 = complex0.add(complex3);
      complex4.ZERO.createComplex((-773.6134), 6.283185307179586);
      Complex complex5 = complex4.NaN.log();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex2.NaN.subtract(0.20660123229026794);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.NaN.pow((-773.6134));
      complex7.ONE.getArgument();
      complex0.I.divide(complex4);
      Complex complex8 = complex2.cos();
      Complex complex9 = complex5.log();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex11.ZERO.sinh();
      complex7.toString();
      Complex complex13 = complex8.tanh();
      complex2.getField();
      complex4.toString();
      complex13.multiply(231);
      Complex complex14 = complex0.conjugate();
      Complex.valueOf(0.0);
      complex12.getImaginary();
      complex10.divide((-773.6134));
      complex6.readResolve();
      complex14.isNaN();
      complex13.reciprocal();
      complex9.multiply(231);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.I.acos();
      complex1.ZERO.hashCode();
      Complex complex4 = complex0.ZERO.pow(complex1);
      complex0.isInfinite();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.multiply((-1.6729355321895212E-7));
      complex4.conjugate();
      complex6.hashCode();
      complex5.INF.asin();
      Complex complex7 = complex2.createComplex((-1.6729355321895212E-7), (-868.94541));
      complex7.NaN.getField();
      complex3.hashCode();
      complex2.ONE.pow((-868.94541));
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.pow(complex4);
      Complex complex10 = complex1.multiply(1851.141481516627);
      complex10.reciprocal();
      Complex complex11 = complex2.sin();
      complex5.isInfinite();
      complex9.ONE.nthRoot(1);
      Complex complex12 = complex11.createComplex((-1.6729355321895212E-7), 2356.695336081882);
      Complex complex13 = complex12.ONE.asin();
      Complex complex14 = complex3.asin();
      Complex complex15 = complex14.multiply(1851.141481516627);
      complex12.INF.readResolve();
      complex2.multiply(complex9);
      complex9.getReal();
      complex15.sqrt1z();
      complex13.divide(0.0);
      complex14.reciprocal();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.createComplex(200.0779389145, 1);
      complex2.I.nthRoot(1);
      complex1.hashCode();
      complex1.NaN.readResolve();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.createComplex(2.0, 1);
      complex1.nthRoot(1);
      Complex complex6 = complex0.atan();
      complex5.hashCode();
      Complex complex7 = complex1.INF.add(complex3);
      complex7.NaN.hashCode();
      complex6.nthRoot(1);
      Complex complex8 = complex5.multiply((-250.2381534948));
      complex8.ONE.sqrt();
      complex8.negate();
      complex3.multiply(complex5);
      Complex complex9 = complex0.pow(complex5);
      complex9.ZERO.log();
      complex1.add(200.0779389145);
      Complex complex10 = complex1.asin();
      complex10.ZERO.tan();
      complex3.createComplex(0.0, 0.0);
      complex3.abs();
      complex7.acos();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.cos();
      complex1.NaN.multiply((-1827.68380355466));
      Complex complex2 = complex0.NaN.subtract(0.0);
      complex2.NaN.acos();
      Complex complex3 = complex0.divide((-2697.849492195318));
      complex3.getArgument();
      complex0.INF.subtract(0.0);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex3.tan();
      complex5.NaN.conjugate();
      complex5.hashCode();
      complex3.ONE.cos();
      complex4.sqrt1z();
      complex4.getArgument();
      Complex complex6 = Complex.valueOf(0.0);
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.sqrt();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(1551.4893732003582);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ZERO.pow(0.0);
      complex3.asin();
      complex5.ZERO.cosh();
      complex0.hashCode();
      Complex complex6 = complex0.NaN.subtract(complex4);
      Complex.valueOf(1256.4514605, 1.7177505493164062);
      complex1.equals(complex0);
      complex3.ZERO.cosh();
      Complex complex7 = Complex.valueOf(1.7177505493164062, 1256.4514605);
      complex7.NaN.toString();
      complex4.isInfinite();
      Complex complex8 = complex6.I.divide(complex4);
      complex6.NaN.sqrt();
      Complex complex9 = complex0.createComplex(0.0, 1.7177505493164062);
      complex2.isNaN();
      complex3.add(complex5);
      complex5.sin();
      complex9.add(complex6);
      complex6.getImaginary();
      complex8.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      complex0.ONE.getField();
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      complex1.ZERO.sinh();
      Complex.valueOf(45.20386461354595, 0.3916988968849182);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(0.0, (-4055.032016574));
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.asin();
      complex5.ONE.reciprocal();
      complex4.I.readResolve();
      complex3.INF.abs();
      Complex complex6 = complex0.ZERO.add(complex2);
      complex6.NaN.cos();
      int int0 = (-616);
      complex6.tan();
      try { 
        complex0.nthRoot((-616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -616
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      complex0.NaN.pow(complex1);
      complex1.INF.abs();
      complex0.NaN.nthRoot(512);
      Complex complex2 = complex0.sin();
      complex0.INF.abs();
      Complex complex3 = complex0.ZERO.sqrt();
      complex3.abs();
      Complex complex4 = complex2.I.createComplex(2504.779336, 0.0);
      complex4.ZERO.reciprocal();
      complex4.INF.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.reciprocal();
      complex3.pow(complex1);
      complex3.divide(2099.6990249325054);
      complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4483.06913405143), (-4483.06913405143));
      complex0.getArgument();
      complex0.ONE.abs();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.conjugate();
      complex2.INF.hashCode();
      complex0.equals((Object) null);
      Complex complex3 = complex0.I.conjugate();
      complex3.NaN.add((-2.356194490192345));
      complex2.I.multiply((-2.356194490192345));
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex0.add(1.0);
      complex8.ONE.multiply(complex7);
      Complex complex9 = complex2.ZERO.add(1.0);
      complex1.abs();
      Complex complex10 = complex2.ZERO.tan();
      complex10.ONE.hashCode();
      complex2.sinh();
      Complex complex11 = complex2.sin();
      Complex complex12 = complex2.NaN.divide((-4483.06913405143));
      Complex complex13 = complex11.subtract(complex6);
      complex1.getReal();
      complex8.sinh();
      Complex complex14 = complex9.createComplex(0.0, 0.0);
      complex14.I.atan();
      complex13.exp();
      complex7.isNaN();
      complex4.multiply(complex12);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.4248080849647522);
      Complex complex1 = Complex.valueOf(0.4248080849647522);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ONE.sinh();
      Complex.valueOf(487.0);
      complex3.nthRoot(1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.reciprocal();
      complex2.NaN.add(0.0);
      Complex complex7 = Complex.valueOf(20.0, 20.0);
      Complex complex8 = complex0.multiply(complex7);
      complex7.INF.createComplex(1, 0.4248080849647522);
      complex1.INF.abs();
      Complex complex9 = complex4.INF.pow((double) 1);
      complex9.ONE.readResolve();
      Complex complex10 = complex8.NaN.sinh();
      complex10.ONE.add((-1278.20175298272));
      complex4.reciprocal();
      complex8.readResolve();
      complex6.divide(complex10);
      complex10.getImaginary();
      Complex complex11 = complex5.subtract(complex1);
      complex3.getArgument();
      complex3.getArgument();
      complex11.cos();
      Complex.valueOf((-1182.0443052177));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2.2185957416622524E-48);
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.INF.multiply(complex1);
      complex0.ONE.divide(1225.75019614837);
      Complex complex3 = complex0.tanh();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1079.0731));
      Complex complex1 = new Complex((-1079.0731), (-1079.0731));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.cos();
      complex1.I.hashCode();
      Complex complex4 = complex3.pow(complex2);
      complex2.sin();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((double) 1, (double) 1);
      complex1.NaN.multiply((-578));
      complex0.I.subtract(complex1);
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex2.NaN.log();
      Complex.valueOf(634.9079, 2311.898248);
      Complex complex4 = complex2.conjugate();
      complex4.asin();
      complex4.ONE.multiply(1049);
      complex4.ZERO.divide((-882.258));
      complex2.divide(complex0);
      Complex.valueOf((double) (-578), 634.9079);
      complex3.reciprocal();
      Complex.valueOf((-1775.443118));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0);
      complex1.INF.createComplex(20.0, 5.205969622575851E-174);
      Complex complex2 = complex1.NaN.atan();
      complex1.toString();
      Complex complex3 = complex1.I.negate();
      complex1.NaN.getField();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.add(1.819629430770874);
      complex4.ZERO.getField();
      Complex complex6 = complex4.multiply(complex0);
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex4.exp();
      complex8.I.sqrt1z();
      complex1.isNaN();
      Complex complex9 = complex7.multiply((double) 0);
      complex9.NaN.sqrt1z();
      complex2.getReal();
      Object object0 = new Object();
      complex8.ZERO.hashCode();
      complex1.equals(object0);
      Complex complex10 = complex8.ZERO.log();
      Complex complex11 = complex5.pow((-393.0));
      complex8.abs();
      Complex complex12 = complex7.sinh();
      complex12.ONE.cosh();
      Complex complex13 = Complex.INF;
      complex3.pow(complex13);
      complex1.divide(0.0);
      complex6.reciprocal();
      complex11.reciprocal();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1639.4);
      complex0.log();
      Complex complex1 = complex0.ZERO.exp();
      complex1.I.readResolve();
      complex1.INF.sin();
      Complex complex2 = Complex.valueOf((-1225.802092));
      complex2.NaN.asin();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.I.acos();
      Complex.valueOf(20.0, (-2582.9988316746));
      Complex complex5 = complex3.I.pow((-2424.514753267396));
      complex3.readResolve();
      Complex complex6 = complex1.pow(complex0);
      complex3.reciprocal();
      complex5.getArgument();
      Complex complex7 = complex1.conjugate();
      complex4.getField();
      Complex complex8 = complex3.cos();
      complex7.reciprocal();
      Complex complex9 = complex2.sqrt1z();
      complex9.ONE.pow((-0.8085725416309594));
      complex3.add(complex9);
      Complex.valueOf((-2358.48), (-2424.514753267396));
      complex4.getReal();
      Complex.valueOf(0.0);
      Complex complex10 = complex5.multiply(complex6);
      complex6.NaN.log();
      complex10.exp();
      complex8.divide(complex6);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-178.44017924));
      double double0 = 678.2;
      Complex complex1 = complex0.ONE.add(678.2);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.createComplex((-178.44017924), 2.0);
      Complex complex4 = complex2.ZERO.tanh();
      complex4.I.log();
      Complex complex5 = complex2.pow(complex3);
      complex5.NaN.divide(complex2);
      complex5.NaN.getArgument();
      complex1.getArgument();
      complex2.subtract(complex0);
      complex0.log();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(745.0244, 745.0244);
      Complex complex1 = complex0.NaN.multiply(745.0244);
      complex1.INF.createComplex(Double.NaN, 0.14686977863311768);
      complex1.cosh();
      complex0.add(1.6711060014400145E-276);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-668.397255));
      Complex complex1 = Complex.valueOf(4364.467858313288, 1524.94748041671);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.sinh();
      complex2.I.multiply(complex3);
      complex0.getArgument();
      complex0.nthRoot(429);
      complex1.ONE.log();
      Complex complex4 = complex0.createComplex(3.141592653589793, 1655.312);
      Complex complex5 = complex4.createComplex(0.0, 3.141592653589793);
      complex4.getReal();
      Complex complex6 = complex5.asin();
      complex5.I.multiply((-2397));
      Complex complex7 = complex5.asin();
      complex5.isNaN();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.createComplex(0.0, 1524.94748041671);
      complex9.NaN.multiply(complex7);
      Complex complex10 = complex7.multiply(complex1);
      complex10.NaN.asin();
      complex10.ONE.reciprocal();
      Complex complex11 = complex5.subtract((-668.397255));
      complex11.ZERO.exp();
      complex2.getField();
      complex3.acos();
      complex7.sin();
      complex6.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-1612.2555338));
      Complex complex1 = complex0.NaN.multiply(275);
      complex1.NaN.divide(0.0);
      complex1.ZERO.toString();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.nthRoot(1);
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex1.exp();
      complex0.isInfinite();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      complex1.ZERO.cos();
      complex0.I.divide(complex1);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.divide(0.0);
      complex3.I.sin();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1367.912775, 2088.09);
      Complex complex1 = complex0.createComplex(2088.09, 0.0);
      complex1.ONE.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.ZERO.divide(0.5963221788406372);
      Complex complex5 = complex4.I.tan();
      complex5.I.negate();
      Complex.valueOf(0.5963221788406372);
      complex0.hashCode();
      Complex complex6 = complex3.INF.negate();
      complex6.ONE.sin();
      try { 
        complex6.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf(428.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.NaN.sqrt();
      complex2.ZERO.log();
      complex1.getReal();
      complex1.cos();
      Complex.valueOf((-1471.17));
      complex3.NaN.cosh();
      complex3.createComplex(428.0, (-990.4901088571));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex5.ONE.atan();
      assertEquals(0.7853981633974483, complex6.getReal(), 0.01);
      
      complex2.ONE.exp();
      Complex complex7 = complex1.ONE.tanh();
      Complex complex8 = complex7.ONE.reciprocal();
      double double0 = complex7.abs();
      assertEquals(0.7615941559557649, double0, 0.01);
      
      Complex complex9 = complex0.acos();
      complex1.getReal();
      Complex complex10 = complex1.divide(complex9);
      complex10.NaN.abs();
      Complex complex11 = complex10.ONE.sinh();
      complex1.abs();
      complex9.abs();
      complex11.multiply(complex9);
      Complex complex12 = complex9.divide(1.8011719796199461);
      complex0.getArgument();
      Complex complex13 = complex11.exp();
      double double1 = complex12.getReal();
      assertEquals(0.8720968039522469, double1, 0.01);
      assertEquals((-0.4893333879230766), complex12.getImaginary(), 0.01);
      
      Complex complex14 = complex11.pow(1401.6761356696875);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      complex11.toString();
      Complex complex15 = complex4.reciprocal();
      complex15.readResolve();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex16 = Complex.valueOf((-3873.412708148956), 0.7615941559557649);
      assertEquals(0.7615941559557649, complex16.getImaginary(), 0.01);
      
      complex5.abs();
      complex13.getImaginary();
      Complex complex17 = complex1.reciprocal();
      Complex complex18 = complex11.divide(complex2);
      Complex complex19 = complex8.sqrt();
      assertTrue(complex19.equals((Object)complex4));
      
      double double2 = complex18.getArgument();
      assertSame(complex18, complex17);
      assertSame(complex10, complex5);
      assertEquals(Double.NaN, double2, 0.01);
  }
}
