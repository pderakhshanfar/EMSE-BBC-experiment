/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:03:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.hashCode();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.multiply(7);
      complex4.nthRoot(7);
      complex4.multiply(complex1);
      Complex complex5 = complex2.multiply(7);
      Complex complex6 = new Complex(1443.24, (-484.19371279));
      complex6.divide(complex4);
      complex6.abs();
      complex4.multiply((-2830.39));
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      double double0 = 56.80763038;
      Complex complex2 = complex1.INF.divide(56.80763038);
      double double1 = Double.NaN;
      Complex complex3 = complex2.divide(Double.NaN);
      complex3.NaN.conjugate();
      try { 
        complex2.nthRoot((-1579));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,579
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sqrt();
      complex0.add(Double.NaN);
      complex0.NaN.pow(Double.NaN);
      try { 
        complex0.nthRoot((-1724));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,724
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(44.819820335566554, Double.NaN);
      Complex complex2 = complex1.tan();
      complex0.sin();
      Complex complex3 = complex0.add(0.301261305809021);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.multiply(44.819820335566554);
      Complex complex6 = complex4.pow(complex1);
      complex2.cos();
      Complex complex7 = Complex.valueOf((-541.713), (-20.0));
      complex4.divide(complex5);
      complex3.subtract(6.283185307179586);
      complex6.readResolve();
      complex6.sin();
      complex7.toString();
      int int0 = (-288);
      try { 
        complex4.nthRoot((-288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -288
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.divide((-7.171796605211277E-8));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-247.41009209583444), (-20.0));
      complex0.nthRoot(2761);
      complex0.tan();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.INF.divide(0.4950772523880005);
      complex2.ZERO.cosh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.reciprocal();
      complex5.INF.abs();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ZERO.negate();
      complex0.atan();
      Complex complex8 = complex3.atan();
      complex3.exp();
      complex8.ONE.log();
      Complex complex9 = complex6.INF.conjugate();
      complex8.abs();
      complex7.getField();
      complex1.ZERO.sqrt1z();
      Complex complex10 = complex9.add(1.3894095722177564);
      complex10.sqrt();
      complex3.createComplex((-188.581821107), 639.774831);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(20.0, 20.0);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.NaN.subtract(complex1);
      complex2.tan();
      complex4.add((-1753.684));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-250.8182316129534));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ONE;
      complex2.conjugate();
      complex0.abs();
      complex2.multiply(7);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(821.04818054724);
      Complex complex1 = complex0.ONE.pow(821.04818054724);
      complex1.reciprocal();
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-643.4138649), 248.3493899);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.INF;
      complex3.cosh();
      Complex complex5 = complex2.add(complex0);
      Complex.valueOf(248.3493899);
      complex1.cos();
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.ZERO;
      complex7.getField();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = new Complex((-2675.921137692911));
      complex9.multiply(complex6);
      complex8.tanh();
      Complex.valueOf((-2675.921137692911));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.pow(complex0);
      complex3.abs();
      Complex complex4 = complex3.subtract(282.0025131767249);
      Complex complex5 = complex3.subtract(complex0);
      complex2.INF.multiply(331);
      Complex.valueOf((-4501.316), 3.763440821250647E-9);
      complex2.subtract(3.763440821250647E-9);
      complex5.tanh();
      complex5.sin();
      complex4.subtract(282.0025131767249);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(complex0);
      complex0.divide(5.210368279953895E-4);
      Complex complex2 = Complex.valueOf((-2555.585121564937), Double.POSITIVE_INFINITY);
      complex0.hashCode();
      complex1.tanh();
      complex2.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.log();
      complex0.readResolve();
      complex1.nthRoot(686);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.conjugate();
      complex3.abs();
      complex2.multiply(963);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(2.7106814809424793E-8);
      Complex complex2 = complex0.add(complex1);
      complex2.I.getArgument();
      Complex complex3 = complex1.NaN.sqrt();
      complex3.subtract(complex0);
      complex3.I.pow(2.7106814809424793E-8);
      Complex complex4 = complex1.add((-1086.7060847307));
      Complex complex5 = complex4.I.cosh();
      Complex.valueOf((-754.7374555901631));
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex0.acos();
      complex5.NaN.subtract(2.7106814809424793E-8);
      Complex complex8 = complex7.multiply(1253);
      complex5.ZERO.divide(complex2);
      Complex complex9 = complex8.ONE.pow(complex5);
      complex8.ONE.createComplex(1253, 1.5707963267948966);
      complex9.ZERO.tan();
      complex8.conjugate();
      Complex.valueOf((-1086.7060847307), 20.0);
      complex7.toString();
      Complex complex10 = complex7.subtract((double) 1253);
      Complex complex11 = complex10.log();
      complex0.readResolve();
      complex6.abs();
      complex11.sqrt1z();
      complex0.divide(complex11);
      try { 
        complex10.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      complex1.ZERO.tanh();
      Complex.valueOf((double) 2783);
      complex1.nthRoot(2783);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      complex3.tan();
      complex2.equals(complex3);
      Complex complex4 = complex0.log();
      complex4.I.add((double) 2783);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.sin();
      complex0.getField();
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3319.04, (-624.338050861));
      complex1.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.pow(complex4);
      complex3.abs();
      Complex complex6 = complex0.subtract(0.9126365759632116);
      Complex complex7 = Complex.valueOf(693.7415390729097);
      Complex complex8 = complex7.subtract(complex5);
      Complex complex9 = complex5.atan();
      Complex complex10 = Complex.INF;
      complex10.add(complex6);
      complex3.cos();
      complex0.getField();
      Complex complex11 = complex10.sqrt();
      complex11.INF.tanh();
      Complex complex12 = complex9.multiply(complex3);
      Complex complex13 = Complex.NaN;
      complex13.tanh();
      Complex complex14 = Complex.valueOf(1.5548923015594482);
      complex3.pow(complex14);
      Complex complex15 = Complex.ZERO;
      complex10.log();
      complex8.getArgument();
      Complex.valueOf(1.4674010949874283, 693.7415390729097);
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(complex0);
      complex0.log();
      complex1.log();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      complex0.getField();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.sqrt();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.ONE.negate();
      complex1.hashCode();
      Complex complex4 = complex0.tanh();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex0.divide(1.6822396399177342E-9);
      complex0.multiply(complex1);
      Complex complex5 = Complex.INF;
      Complex.valueOf(0.22626367211341858, Double.NaN);
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3855.054549215202));
      Complex complex2 = complex0.acos();
      Object object0 = new Object();
      Complex complex3 = Complex.valueOf(0.4158278703689575, 786.7275);
      Complex complex4 = complex3.pow(685.855555961178);
      complex1.reciprocal();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = Complex.valueOf((-3855.054549215202), 0.024031034420175068);
      complex2.divide(complex7);
      complex6.log();
      complex4.log();
      complex5.multiply((-43));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.getField();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.sqrt();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex4.getField();
      complex1.hashCode();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(0.0);
      complex7.abs();
      complex1.asin();
      complex3.negate();
      complex6.subtract(Double.POSITIVE_INFINITY);
      complex3.multiply(complex2);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.log();
      Complex complex5 = complex1.subtract(1.0);
      complex5.INF.cosh();
      complex4.NaN.nthRoot(2876);
      Complex.valueOf((-984.302));
      Complex complex6 = complex5.ZERO.sqrt();
      complex6.ZERO.getField();
      Complex complex7 = complex5.multiply((-4039.1222895));
      Complex complex8 = complex7.reciprocal();
      complex8.ZERO.subtract((-2079.7836807425674));
      complex1.sin();
      Complex complex9 = complex4.add(complex0);
      complex0.subtract((-984.302));
      complex2.sqrt();
      complex3.NaN.cos();
      complex0.cosh();
      Object object0 = complex1.readResolve();
      complex4.equals(object0);
      Complex complex10 = Complex.valueOf(1702.90358975);
      complex9.divide(complex10);
      Complex.valueOf(5.771457643937893E237);
      complex9.createComplex((-2620.501168045), 0.11113807559013367);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.subtract(complex1);
      Complex complex3 = complex2.acos();
      Object object0 = new Object();
      complex3.hashCode();
      complex0.readResolve();
      complex0.equals(complex2);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.acos();
      complex4.createComplex((-20.0), Double.POSITIVE_INFINITY);
      complex5.toString();
      complex0.cosh();
      complex5.subtract(4451.2);
      complex0.cos();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(4.3395642731417883E11);
      complex0.INF.getArgument();
      Complex complex1 = Complex.valueOf((-1.7375090618655787E103));
      Complex complex2 = complex0.acos();
      Object object0 = new Object();
      complex0.hashCode();
      Object object1 = complex2.readResolve();
      complex1.equals(object1);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.atan();
      complex4.createComplex((-7.796557225750673E-258), (-805.65157361959));
      Complex complex5 = Complex.valueOf((-805.65157361959));
      complex5.toString();
      complex4.cosh();
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3853.807044490371), (-3853.807044490371));
      Complex complex2 = complex1.cos();
      complex1.toString();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = Complex.valueOf((-3853.807044490371));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.acos();
      complex3.getArgument();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = Complex.ZERO;
      complex0.equals(complex10);
      Complex complex11 = complex5.cos();
      complex11.tanh();
      complex9.pow(complex1);
      complex0.abs();
      Complex complex12 = complex3.subtract((-1634.50416602));
      Complex complex13 = complex1.subtract(complex4);
      complex5.atan();
      Complex complex14 = complex0.add(complex12);
      Complex complex15 = Complex.ZERO;
      complex15.cos();
      complex4.getField();
      complex0.sqrt();
      complex12.multiply(complex4);
      complex13.tanh();
      Complex complex16 = new Complex((-1634.50416602), Double.POSITIVE_INFINITY);
      Complex complex17 = Complex.INF;
      complex14.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-4083.4));
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.NaN;
      complex4.cos();
      Complex complex5 = new Complex(147.96, (-4083.4));
      Complex complex6 = complex4.subtract(complex5);
      complex5.tan();
      Complex complex7 = complex0.add((-4083.4));
      complex3.subtract(2.0);
      complex4.sin();
      complex2.exp();
      Complex complex8 = new Complex((-0.5113252103366475));
      complex8.pow(1.2204489707946777);
      Complex complex9 = complex5.multiply((-0.5113252103366475));
      Complex.valueOf(1.2204489707946777);
      complex9.createComplex((-20.0), (-0.5113252103366475));
      complex1.cosh();
      complex6.atan();
      Complex.valueOf((-20.0), (-0.5113252103366475));
      Complex complex10 = new Complex((-3905.4394881526));
      complex7.divide(complex10);
      Complex complex11 = Complex.valueOf((-1.9546569053899882E-262), (-1949.96949));
      complex11.log();
      complex6.log();
      complex8.multiply(446);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.pow(complex3);
      complex1.abs();
      Complex complex5 = complex0.subtract((-20.0));
      complex0.subtract(complex3);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex5.add(complex6);
      complex4.cos();
      complex7.getField();
      Complex complex8 = complex4.sqrt();
      complex3.multiply(complex0);
      complex2.tanh();
      Complex complex9 = complex2.divide(4.339564273141788E12);
      complex9.INF.multiply(complex0);
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.valueOf((-1025.606700492), 945.348);
      complex8.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = new Complex(6.283185307179586, 1602.293102007395);
      Complex complex3 = complex0.ZERO.sinh();
      complex2.I.cosh();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex2.exp();
      Complex.valueOf(2.0, 5.609633562926319E-4);
      Complex.valueOf(1602.293102007395, 6.283185307179586);
      Complex complex8 = Complex.valueOf(1602.293102007395);
      complex8.ONE.exp();
      Complex complex9 = Complex.I;
      complex0.equals(complex9);
      Complex complex10 = complex3.add((-1353.77));
      complex10.subtract((-1353.77));
      complex4.tanh();
      complex0.negate();
      complex1.cosh();
      Complex.valueOf(6.283185307179586, 1602.293102007395);
      complex7.negate();
      Complex complex11 = complex6.cosh();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-156.843550583), (-156.843550583));
      Complex complex1 = new Complex((-156.843550583), (-3905.4394881526));
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.I.subtract((-3905.4394881526));
      complex5.NaN.log();
      complex5.subtract((-2384.0804));
      Complex complex6 = complex4.ONE.sinh();
      complex6.ONE.getArgument();
      Complex complex7 = complex0.ONE.sinh();
      Complex complex8 = complex6.ZERO.exp();
      Complex complex9 = complex0.tan();
      complex7.ZERO.add(0.0);
      Complex complex10 = complex9.ZERO.tan();
      complex10.INF.nthRoot(2335);
      complex9.negate();
      Complex complex11 = complex3.multiply(499);
      complex2.sinh();
      Complex complex12 = complex4.sqrt();
      complex1.pow(2.018584871269913);
      Complex complex13 = complex12.multiply(0.0);
      Complex complex14 = complex3.multiply((-156.843550583));
      complex14.NaN.reciprocal();
      Complex complex15 = complex11.cosh();
      complex15.createComplex((-3905.4394881526), Double.NaN);
      complex13.divide(2243.06045);
      complex7.multiply(436);
      complex8.add((-156.843550583));
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.INF.subtract((-3266.0));
      complex0.atan();
      Complex complex3 = complex0.INF.pow(4.6097680405580995E-243);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = new Complex(0.6043586730957031, 0.0);
      complex6.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.NaN);
      complex4.pow(complex2);
      Complex complex7 = Complex.ZERO;
      complex0.reciprocal();
      Complex complex8 = Complex.INF;
      complex8.multiply(0);
      Complex complex9 = complex8.multiply(0);
      complex4.getArgument();
      complex5.sinh();
      Complex complex10 = Complex.I;
      complex10.multiply(0);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      complex0.getField();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.sqrt();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      complex1.add((-1.0));
      Complex complex5 = complex1.conjugate();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = Complex.NaN;
      complex3.cosh();
      Complex complex8 = complex7.atan();
      complex4.multiply((-2569));
      complex8.getArgument();
      complex3.add(complex5);
      Complex complex9 = Complex.I;
      complex3.pow(complex4);
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(891.3196098, 2.0);
      complex0.INF.toString();
      complex0.isNaN();
      complex0.cos();
      Complex complex1 = complex0.acos();
      complex1.INF.tan();
      Complex complex2 = complex0.reciprocal();
      complex0.getField();
      complex0.negate();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex.valueOf((double) 2783);
      complex1.nthRoot(2783);
      Complex complex2 = Complex.I;
      complex1.pow((double) 2783);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.tan();
      complex4.sqrt();
      Complex complex5 = Complex.valueOf((-754.7374555901631), (double) 2783);
      complex5.divide(complex2);
      complex0.log();
      complex1.log();
      complex1.sqrt();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.acos();
      complex0.ZERO.getArgument();
      Complex.valueOf(20.0);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.I.cos();
      complex3.ONE.negate();
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = complex2.tan();
      complex4.ONE.add(20.0);
      Complex complex6 = complex5.I.subtract(20.0);
      complex6.ONE.sin();
      complex6.NaN.exp();
      Complex complex7 = complex1.pow(20.0);
      Complex complex8 = complex7.multiply(20.0);
      Complex complex9 = Complex.valueOf(20.0);
      Complex complex10 = complex9.createComplex(0.0, 0.0);
      complex10.INF.cosh();
      complex8.ZERO.atan();
      Complex complex11 = Complex.valueOf(435.131772978, (-1.1165866833118273E-8));
      Complex complex12 = new Complex((-3905.4394881526));
      complex11.divide(complex12);
      complex8.log();
      complex3.log();
      complex7.multiply(446);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex.valueOf((double) 2783);
      complex1.nthRoot(2783);
      Complex complex2 = Complex.I;
      complex1.pow((double) 2783);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sqrt();
      complex1.toString();
      Complex complex6 = Complex.INF;
      complex6.pow((double) 2783);
      Complex complex7 = complex0.subtract(2.0438671112060547);
      complex5.atan();
      complex0.nthRoot(1260);
      complex5.exp();
      Complex complex8 = complex4.asin();
      Complex complex9 = Complex.NaN;
      complex4.subtract(complex7);
      Complex complex10 = new Complex(4.339564273141788E12, (-1728.991726955644));
      complex10.getArgument();
      complex6.cos();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      complex0.getField();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex5.tan();
      Complex complex7 = new Complex((-2074.1666941), (-2074.1666941));
      Complex complex8 = complex7.subtract(complex5);
      Complex complex9 = complex6.add(Double.POSITIVE_INFINITY);
      complex0.subtract((-3427.5055828360855));
      complex7.sin();
      Complex complex10 = complex5.exp();
      complex6.pow((-20.0));
      complex1.multiply((-20.0));
      Complex.valueOf((-3427.5055828360855));
      Complex complex11 = complex9.createComplex((-796.959474), 0.6487176418304443);
      complex1.cosh();
      complex11.atan();
      complex2.toString();
      Complex complex12 = complex5.pow((-4113.8));
      complex12.getReal();
      complex3.isNaN();
      complex5.sinh();
      complex5.tanh();
      Complex complex13 = new Complex(Double.NaN);
      complex13.subtract(complex11);
      complex8.add(complex4);
      complex10.getReal();
      complex1.sqrt();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3853.807044490371));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex1.add((-3853.807044490371));
      complex6.subtract(6.283185307179586);
      Complex complex9 = new Complex(6.283185307179586);
      complex9.sin();
      complex3.exp();
      complex1.pow(6.283185307179586);
      Complex complex10 = new Complex((-1634.51174631287), (-3853.807044490371));
      complex10.multiply(3906.12173157656);
      Complex.valueOf(3.655589133934081E-8);
      complex7.createComplex(3.655589133934081E-8, 0.0);
      Complex complex11 = complex7.cosh();
      Complex complex12 = complex1.atan();
      complex9.toString();
      complex9.pow(678.544727);
      complex6.getReal();
      complex7.isNaN();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex8.tanh();
      complex11.subtract(complex5);
      Complex complex15 = complex4.add(complex0);
      complex8.getReal();
      complex13.sqrt();
      complex15.reciprocal();
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3853.807044490371));
      complex0.nthRoot(313);
      Complex complex2 = Complex.I;
      complex1.pow((-3853.807044490371));
      Complex complex3 = new Complex((-5.451390316294111E-8), 313);
      Complex complex4 = complex3.tan();
      complex1.sqrt();
      Complex.valueOf(2.0, (double) 313);
      Complex complex5 = new Complex((-5.451390316294111E-8));
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex6.log();
      complex0.log();
      complex7.multiply(315);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex.valueOf((double) 2783);
      complex1.nthRoot(2783);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow((double) 2783);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.tan();
      complex5.sqrt();
      Complex complex6 = Complex.valueOf((-754.7374555901631), (double) 2783);
      Complex complex7 = complex6.divide(complex2);
      complex3.nthRoot(307);
      Complex complex8 = complex7.exp();
      complex5.asin();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.ZERO;
      complex10.subtract(complex8);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(1.3810978455418157);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex3.subtract(complex5);
      complex1.tan();
      Complex complex7 = complex3.add((-20.0));
      complex5.subtract((-1025.606700492));
      Complex complex8 = complex6.sin();
      complex7.exp();
      Complex complex9 = complex4.pow(2.1987686050231372E-7);
      complex7.multiply(Double.NaN);
      Complex complex10 = Complex.valueOf((-20.0));
      complex7.createComplex((-343.8047714), 0.0);
      Complex complex11 = Complex.ONE;
      complex11.cosh();
      complex3.atan();
      complex4.toString();
      Complex complex12 = complex10.pow(Double.NaN);
      Complex complex13 = complex12.subtract((-20.0));
      complex11.atan();
      complex9.nthRoot(333);
      complex1.exp();
      Complex complex14 = new Complex(2.1987686050231372E-7, (-1025.606700492));
      complex14.asin();
      Complex complex15 = Complex.NaN;
      complex8.subtract(complex2);
      complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.acos();
      complex0.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(20.0);
      complex1.sin();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.NaN.subtract(complex1);
      Complex complex6 = complex4.tan();
      complex5.ZERO.subtract(complex4);
      Complex complex7 = complex5.ONE.add(20.0);
      Complex complex8 = complex6.I.subtract(20.0);
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex8.NaN.exp();
      Complex complex11 = complex1.pow(20.0);
      Complex complex12 = complex11.multiply(20.0);
      Complex complex13 = Complex.valueOf(20.0);
      Complex complex14 = complex13.createComplex(0.0, 0.0);
      complex14.INF.cosh();
      complex12.ZERO.atan();
      complex5.toString();
      Complex complex15 = complex2.pow(20.0);
      complex5.getReal();
      complex13.isNaN();
      complex13.sinh();
      complex4.tanh();
      Complex complex16 = complex9.subtract(complex10);
      complex14.add(complex15);
      complex16.getReal();
      complex7.sqrt();
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.equals(complex0);
      complex0.NaN.divide((-20.0));
      Complex complex1 = complex0.asin();
      complex1.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tan();
      complex0.getField();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sqrt();
      complex2.multiply(complex3);
      Complex complex4 = Complex.ZERO;
      complex4.acos();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex3.multiply((-1));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sqrt();
      complex8.atan();
      complex7.toString();
      Complex complex9 = complex7.tan();
      complex7.add(complex6);
      complex9.divide((double) (-1));
      complex6.sqrt();
      Complex complex10 = complex9.multiply(complex5);
      complex4.sqrt();
      complex10.subtract(complex6);
      complex10.toString();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex.valueOf((double) 2783);
      complex1.nthRoot(2783);
      Complex complex2 = complex0.negate();
      complex1.pow((double) 2783);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.tan();
      complex0.sqrt();
      complex4.divide(250.0780531);
      Complex complex5 = Complex.valueOf((double) 2783, 0.0);
      complex4.hashCode();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex3.createComplex((-1971.5021), 3.688253867361245);
      Complex complex8 = Complex.INF;
      complex6.multiply(complex5);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.tan();
      complex1.getField();
      Complex complex4 = Complex.valueOf(0.0);
      complex3.sqrt();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex6.hashCode();
      complex2.acos();
      Complex complex8 = complex4.createComplex((-4903.0), 0.0);
      Complex complex9 = Complex.INF;
      complex7.multiply(complex2);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      complex0.log();
      complex1.multiply((-2630));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(891.3196098, 2.0);
      complex0.INF.toString();
      complex0.isNaN();
      complex0.conjugate();
      Complex complex1 = new Complex(891.3196098, 2.0);
      complex0.abs();
      Complex complex2 = complex1.log();
      complex2.getReal();
      Complex complex3 = new Complex(891.3196098, 557.873123);
      Complex complex4 = complex3.createComplex(813.4240247046853, 2283.243);
      complex4.cosh();
      Complex complex5 = complex1.cosh();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf((-773.029138));
      Complex complex4 = complex1.subtract(complex3);
      complex2.tan();
      Complex complex5 = complex1.add((-773.029138));
      Complex complex6 = complex3.subtract((-773.029138));
      Complex complex7 = complex4.sin();
      Complex complex8 = complex7.exp();
      complex8.pow((-399.0));
      Complex complex9 = complex3.multiply((-773.029138));
      Complex.valueOf((-773.029138));
      complex8.createComplex(1.0, (-399.0));
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex6.atan();
      Complex complex12 = Complex.NaN;
      complex12.toString();
      Complex complex13 = complex9.pow((-773.029138));
      complex11.subtract((-865.87021146));
      complex8.atan();
      complex0.nthRoot(333);
      complex2.exp();
      Complex complex14 = complex10.asin();
      Complex complex15 = Complex.NaN;
      complex14.subtract(complex13);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tan();
      complex2.getField();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.I.sqrt();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex5 = Complex.ZERO;
      complex1.createComplex((-4903.0), 0.0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.multiply(complex6);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-188.581821107), (-188.581821107));
      complex0.divide(complex1);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.log();
      complex3.reciprocal();
      complex2.multiply(2331);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ZERO;
      complex1.getArgument();
      complex3.sinh();
      complex4.multiply(2844);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      complex0.getField();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex5 = complex0.tanh();
      complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(759.566395153);
      complex5.pow(complex6);
      Complex complex7 = Complex.ZERO;
      complex7.reciprocal();
      complex7.multiply(0);
      complex3.multiply(0);
      complex0.getArgument();
      complex4.sinh();
      complex7.multiply(1038);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.NaN.add(0.0);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.acos();
      complex4.getField();
      Complex.valueOf((-4480.795155));
      complex1.ZERO.negate();
      complex4.nthRoot(916);
      complex4.acos();
      complex4.getField();
      complex2.acos();
      complex3.createComplex(0.7071067811865476, (-1.3810978455418157));
      Complex complex5 = Complex.INF;
      complex5.multiply(complex4);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      complex1.I.tan();
      complex0.getField();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.subtract((-2297.899047136));
      complex2.pow(0.0);
      complex4.getImaginary();
      Complex complex5 = new Complex((-2297.899047136), 2970.619376014);
      complex5.sin();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.divide(0.0);
      Complex.valueOf(0.0, 471.428);
      Complex complex4 = Complex.I;
      complex4.hashCode();
      complex0.acos();
      complex1.createComplex((-1313.2517065), 0.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.INF;
      complex3.multiply(complex6);
      complex2.cos();
      complex1.getReal();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.divide((-2187.854401304275));
      Complex complex4 = complex0.cos();
      complex4.acos();
      complex2.getField();
      Complex.valueOf((-2187.854401304275));
      Complex complex5 = new Complex(2544.9885826062095);
      Complex complex6 = complex5.negate();
      complex0.nthRoot(916);
      complex4.acos();
      complex5.getField();
      complex3.tanh();
      complex6.multiply((double) 916);
      complex0.pow(complex1);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.multiply(1948);
      complex6.getArgument();
      complex8.sinh();
      Complex complex9 = Complex.ZERO;
      complex9.multiply(916);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex.valueOf((double) 2783);
      complex1.nthRoot(2783);
      Complex complex2 = Complex.I;
      complex1.pow((double) 2783);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.tan();
      complex4.sqrt();
      Complex complex5 = Complex.valueOf((-754.7374555901631), (double) 2783);
      complex5.divide(complex2);
      complex0.log();
      complex1.log();
      complex1.multiply(2783);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.cos();
      Complex complex1 = Complex.valueOf((-188.581821107), (-188.581821107));
      Complex complex2 = new Complex((-406.7126270379));
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.acos();
      Complex complex5 = new Complex((-9.517971970450354E15));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex3.multiply(1);
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex8.atan();
      complex8.ONE.acos();
      complex7.toString();
      complex9.tan();
      Complex complex10 = Complex.valueOf((-188.581821107));
      Complex complex11 = complex10.add(complex7);
      Complex complex12 = complex6.divide((-9.517971970450354E15));
      complex11.sqrt();
      Complex complex13 = Complex.valueOf(794445.6468140242);
      complex12.multiply(complex13);
      Complex complex14 = Complex.I;
      complex14.sqrt();
      complex2.subtract(complex4);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tan();
      complex0.getField();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.sqrt();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      complex2.acos();
      complex4.multiply((-2630));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.acos();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.cos();
      complex4.acos();
      complex0.getField();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      complex1.negate();
      complex1.nthRoot(593);
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.ONE;
      complex7.getField();
      complex2.tanh();
      complex5.multiply(1693.143);
      complex5.pow(complex7);
      complex5.reciprocal();
      complex2.multiply(593);
      complex2.multiply(916);
      complex6.sinh();
      Complex complex8 = new Complex(2869.75869414177, 1.4674011002723395);
      complex8.multiply(1948);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(3049.160917694258, 3049.160917694258);
      Complex complex1 = Complex.ZERO;
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.negate();
      complex0.getField();
      Complex complex4 = Complex.valueOf(0.0, 3049.160917694258);
      Complex.valueOf(1321.7927018074);
      complex2.multiply(0.0);
      complex3.negate();
      complex2.equals(complex1);
      Complex complex5 = complex4.divide(3049.160917694258);
      complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2244183812423448E-7, 2.6735267639160156);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.atan();
      complex2.I.tanh();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex0.ZERO.divide(2.6735267639160156);
      Complex complex5 = complex4.INF.sqrt();
      complex4.NaN.nthRoot(1);
      complex4.ONE.readResolve();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex0.NaN.add((-1785.12822));
      Complex complex8 = complex7.ZERO.divide(complex6);
      complex8.I.abs();
      complex7.tan();
      Complex complex9 = complex0.INF.divide(1.2244183812423448E-7);
      complex9.INF.pow((-1785.12822));
      complex8.ONE.multiply(complex5);
      complex9.ONE.getArgument();
      Complex complex10 = complex0.divide(2.6735267639160156);
      Complex complex11 = complex0.sqrt1z();
      complex11.INF.asin();
      complex9.exp();
      Complex complex12 = complex4.sin();
      complex12.readResolve();
      complex3.pow(complex8);
      Complex complex13 = complex9.reciprocal();
      complex13.INF.hashCode();
      complex10.getField();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.NaN.pow((-459.5295));
      Complex complex3 = complex2.createComplex(20.0, 20.0);
      complex3.sinh();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-55.65262352));
      complex0.ZERO.multiply((-2482));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.NaN.tan();
      complex2.I.pow(complex1);
      Complex complex3 = complex2.sinh();
      complex3.ONE.multiply(1409);
      Complex complex4 = complex0.I.add(0.0);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex4.ZERO.asin();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.I.pow(complex5);
      complex10.INF.readResolve();
      Complex complex11 = complex4.divide(complex6);
      Complex complex12 = complex0.INF.sin();
      Complex complex13 = complex5.multiply(4248);
      Complex complex14 = complex5.add(complex0);
      complex14.NaN.getArgument();
      complex14.isNaN();
      Complex complex15 = complex11.tan();
      complex15.cosh();
      Complex complex16 = complex14.multiply(complex13);
      complex16.pow(complex1);
      Complex complex17 = Complex.valueOf((-55.65262352), (-55.65262352));
      complex17.ZERO.add(complex2);
      complex4.multiply((-55.65262352));
      complex12.tanh();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-835.746350271483), 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.ONE.hashCode();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.negate();
      complex3.I.toString();
      complex3.toString();
      Complex complex5 = complex1.ZERO.subtract((-835.746350271483));
      complex3.hashCode();
      complex3.getArgument();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.ZERO.pow(complex0);
      complex7.ZERO.hashCode();
      Complex complex8 = complex5.pow(complex0);
      complex7.INF.conjugate();
      complex7.pow(0.0);
      Complex complex9 = complex5.conjugate();
      complex9.NaN.divide(complex5);
      complex7.cosh();
      complex0.sqrt1z();
      complex8.sin();
      complex4.createComplex((-835.746350271483), 20.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(3162.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = new Complex(3162.0, 1693.143);
      Complex complex3 = complex0.pow(complex2);
      complex2.log();
      complex1.toString();
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.log();
      Complex complex1 = Complex.valueOf(2169.953222610357, 2169.953222610357);
      complex1.ZERO.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.asin();
      complex3.ONE.readResolve();
      complex2.INF.createComplex(1.0, 2169.953222610357);
      Complex complex4 = complex3.ONE.divide((-2365.19139818168));
      complex2.readResolve();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(891.3196098, 2.0);
      complex0.INF.toString();
      complex0.isNaN();
      Complex complex1 = complex0.conjugate();
      complex1.acos();
      complex0.abs();
      complex0.asin();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2283.9321696675), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.I.acos();
      complex2.ONE.nthRoot(1876);
      complex1.ONE.createComplex((-390.3365001924828), (-777.059865477));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex4.NaN.sqrt();
      complex0.divide(complex3);
      complex3.toString();
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      complex6.ONE.cosh();
      Complex complex7 = complex0.multiply((-3089.7163912488627));
      complex3.INF.sinh();
      complex7.ONE.atan();
      complex7.ZERO.hashCode();
      Complex complex8 = complex0.tan();
      complex8.atan();
      complex2.acos();
      complex5.getArgument();
      complex2.createComplex(0.0, Double.NaN);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(347.6651725);
      Complex complex1 = complex0.INF.multiply(347.6651725);
      Complex complex2 = complex1.I.subtract(1.0);
      Complex complex3 = complex2.NaN.multiply(347.6651725);
      Complex complex4 = complex3.ZERO.multiply(287);
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ZERO.pow(0.0);
      Complex complex8 = complex5.I.atan();
      complex7.INF.add((double) 287);
      Complex complex9 = new Complex(1.0);
      complex6.ZERO.multiply(complex9);
      complex6.equals("");
      Complex complex10 = complex7.tanh();
      complex10.NaN.cos();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex10.sinh();
      complex7.exp();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex13.tan();
      complex13.asin();
      complex11.conjugate();
      complex14.isNaN();
      complex3.sin();
      complex12.getArgument();
      Complex complex15 = Complex.valueOf(20.0);
      Complex complex16 = complex15.add(complex3);
      complex4.divide(complex16);
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-750.50326213462), 284.153265129861);
      Complex complex1 = complex0.divide((-750.50326213462));
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex2.ZERO.log();
      complex3.conjugate();
      complex1.equals("Z-D~x#iVMZp");
      Complex complex4 = complex1.multiply(284.153265129861);
      Complex complex5 = Complex.valueOf(284.153265129861, (-750.50326213462));
      Complex complex6 = complex4.subtract((-750.50326213462));
      complex6.toString();
      Complex.valueOf((-750.50326213462));
      complex5.ZERO.negate();
      Complex.valueOf(2901.09934645726);
      complex5.sqrt1z();
      Complex complex7 = complex5.subtract(671.3511);
      complex7.I.asin();
      complex1.divide((-750.50326213462));
      complex4.tan();
      Complex.valueOf(1925.864777385651);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-250.8182316129534), 2.016791373353671E-194);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      Complex complex1 = Complex.valueOf((-370.0));
      Complex complex2 = complex0.subtract((-98.06414970743218));
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf((-370.0), 20.0);
      complex4.INF.getArgument();
      Complex complex5 = complex3.I.exp();
      complex1.equals(complex2);
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.ONE.subtract(0.0);
      complex7.INF.sqrt1z();
      Complex complex8 = complex4.multiply(17);
      complex8.isNaN();
      Complex complex9 = complex5.sinh();
      complex0.cosh();
      Complex.valueOf(0.0, 20.0);
      complex9.divide(56.484081736);
      Complex complex10 = complex2.subtract(complex9);
      complex10.ONE.conjugate();
      complex9.tanh();
      complex5.asin();
      complex2.reciprocal();
      complex2.createComplex(0.0, (-63.520536));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.reciprocal();
      int int0 = 7;
      Complex complex3 = complex2.ONE.multiply(7);
      complex2.ZERO.cos();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = null;
      try { 
        complex4.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add((-801.62472));
      Complex complex2 = complex0.multiply(1.0);
      complex2.getField();
      Complex complex3 = complex2.multiply(1);
      complex3.ZERO.getField();
      Complex complex4 = complex2.ZERO.sqrt();
      complex2.I.getArgument();
      complex2.toString();
      complex2.readResolve();
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.ONE.pow(complex5);
      Complex complex8 = complex1.add(complex6);
      Complex complex9 = Complex.ZERO;
      complex6.I.add(complex9);
      Complex complex10 = complex6.I.tanh();
      complex10.ONE.multiply(1.5707963267948966);
      Complex complex11 = Complex.valueOf(6.283185307179586);
      complex10.I.tanh();
      Complex complex12 = complex8.ZERO.subtract((-420.428008666));
      complex12.ZERO.log();
      Complex complex13 = complex12.NaN.pow(complex7);
      Complex complex14 = new Complex(1);
      complex13.I.divide(complex14);
      complex6.exp();
      complex3.exp();
      complex11.sin();
      Complex.valueOf(6.283185307179586, 1.5707963267948966);
      complex1.sqrt();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.NaN.divide(2.316005229949951);
      complex1.I.multiply(919.005442);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.add(919.005442);
      complex0.tanh();
      complex0.createComplex(0.0, 0.0);
      complex3.subtract(4179.2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.multiply(1838.46);
      Complex complex3 = complex2.I.createComplex(1838.46, 0.0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.subtract(complex6);
      complex7.NaN.add(complex3);
      complex5.tanh();
      complex6.negate();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.NaN.tan();
      complex9.ZERO.tanh();
      Complex complex10 = complex4.reciprocal();
      complex10.nthRoot(1);
      Complex.valueOf(1838.46, 1838.46);
      complex2.isInfinite();
      complex7.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.acos();
      complex0.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.I.cos();
      complex4.ONE.negate();
      Complex complex5 = complex0.NaN.subtract(complex1);
      Complex complex6 = complex3.tan();
      complex5.ONE.add(20.0);
      Complex complex7 = complex6.I.subtract(20.0);
      complex7.ONE.sin();
      complex7.NaN.exp();
      Complex complex8 = complex1.pow(20.0);
      Complex complex9 = complex8.multiply(20.0);
      Complex complex10 = Complex.valueOf(20.0);
      Complex complex11 = complex10.createComplex(0.0, 0.0);
      complex11.INF.cosh();
      Complex complex12 = complex9.ZERO.atan();
      complex5.toString();
      complex2.pow(20.0);
      Complex complex13 = complex1.subtract(2.0438671112060547);
      Complex complex14 = complex8.atan();
      complex12.nthRoot(333);
      complex14.exp();
      Complex complex15 = complex8.asin();
      Complex complex16 = Complex.NaN;
      complex15.ONE.subtract(complex16);
      complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.NaN.divide((-20.0));
      Complex complex1 = complex0.asin();
      complex1.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.add((-2091.0));
      complex2.I.subtract(0.0);
      complex1.multiply((-1176.98993612634));
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.multiply(6.283185307179586);
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex3.I.pow(complex1);
      complex2.reciprocal();
      Complex complex6 = complex3.add(6.283185307179586);
      complex5.isNaN();
      complex2.NaN.abs();
      Complex complex7 = complex6.pow(6.283185307179586);
      complex7.cos();
      Complex complex8 = Complex.NaN;
      complex3.divide(complex8);
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9162893295288086);
      Complex complex1 = Complex.INF;
      complex1.INF.getField();
      Complex complex2 = complex0.I.pow(complex1);
      complex0.multiply(complex2);
      Complex complex3 = complex2.ZERO.divide(0.0);
      complex0.getField();
      complex0.pow(complex2);
      Complex complex4 = Complex.valueOf(1.9162893295288086);
      Complex complex5 = complex1.cosh();
      complex5.subtract(1.9162893295288086);
      complex1.ZERO.readResolve();
      Complex complex6 = new Complex(0.0, (-3533.0331916372));
      complex4.ONE.subtract(complex6);
      Complex complex7 = Complex.valueOf(1.9162893295288086);
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex8.add(complex7);
      complex0.isNaN();
      complex4.multiply(complex9);
      complex5.sin();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      double double0 = (-2187.854401304275);
      Complex complex3 = complex2.ONE.divide((-2187.854401304275));
      complex3.NaN.hashCode();
      Complex complex4 = complex0.acos();
      complex4.ZERO.multiply((-197.8936133));
      Complex complex5 = complex4.I.sinh();
      complex5.ONE.tanh();
      complex0.reciprocal();
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.I.subtract(complex3);
      complex4.ZERO.log();
      complex0.getArgument();
      complex1.equals(complex0);
      complex3.cosh();
      Complex.valueOf((-1463.723342774306), 1.5707963267948966);
      complex2.getField();
      complex1.toString();
      Complex complex5 = complex3.log();
      complex5.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(306.4778);
      Complex complex1 = complex0.I.tan();
      complex1.NaN.add(complex0);
      complex0.isInfinite();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-188.581821107), (-188.581821107));
      complex0.divide(complex1);
      Complex complex2 = complex0.log();
      complex2.INF.log();
      complex0.multiply((-2630));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-487.9996554816026), 1688.46532);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
      Complex.valueOf(0.5387523174285889);
      complex0.I.conjugate();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.acos();
      complex3.reciprocal();
      complex3.getField();
      complex3.negate();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex0.ONE.getArgument();
      Complex complex2 = complex1.NaN.subtract(0.0);
      complex2.pow(0.0);
      complex0.getImaginary();
      complex2.sin();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex7.ZERO.sinh();
      complex8.ONE.divide(complex7);
      complex8.ONE.hashCode();
      Complex complex9 = complex8.reciprocal();
      complex9.abs();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex4.ZERO.subtract(0.0);
      Complex complex12 = complex0.cosh();
      complex1.I.exp();
      complex10.nthRoot(1842);
      Complex complex13 = complex6.log();
      complex13.ZERO.multiply(1842);
      Complex complex14 = complex5.atan();
      complex14.getReal();
      complex13.isNaN();
      complex1.I.sinh();
      complex4.tanh();
      complex1.subtract(complex12);
      complex11.add(complex1);
      complex1.getReal();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.multiply(2669);
      complex0.sinh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 0;
      complex0.INF.exp();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.acos();
      complex2.INF.hashCode();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.cos();
      complex4.I.multiply(37);
      Complex complex5 = complex2.multiply(37);
      complex3.abs();
      complex0.sqrt1z();
      Complex complex6 = complex5.sqrt1z();
      complex5.NaN.acos();
      complex2.multiply(1);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      int int0 = (-1277);
      try { 
        complex2.ZERO.nthRoot((-1277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,277
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-3853.807044490371));
      Complex complex1 = complex0.acos();
      Object object0 = new Object();
      complex0.I.hashCode();
      complex1.equals(object0);
      Complex complex2 = complex0.atan();
      complex0.acos();
      Complex complex3 = complex0.createComplex((-3853.807044490371), (-3853.807044490371));
      complex3.ONE.toString();
      complex0.I.cosh();
      complex2.subtract(4451.2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex0.sinh();
      complex5.ZERO.abs();
      complex5.ONE.tan();
      complex0.ZERO.negate();
      Complex complex6 = complex4.ONE.multiply(0.0);
      complex6.I.acos();
      complex5.I.exp();
      complex5.NaN.add(0.0);
      complex5.toString();
      Complex complex7 = complex0.tan();
      complex1.getImaginary();
      complex7.ONE.readResolve();
      complex7.readResolve();
      Complex complex8 = complex1.subtract((-1462.9));
      complex7.log();
      Complex complex9 = Complex.valueOf(0.0, (-1462.9));
      complex9.ONE.toString();
      Complex complex10 = complex8.NaN.negate();
      complex1.ONE.add(complex5);
      Complex complex11 = complex2.pow(0.0);
      complex8.hashCode();
      complex4.getArgument();
      complex1.sinh();
      Complex complex12 = complex4.conjugate();
      Complex complex13 = complex10.cosh();
      complex4.getArgument();
      complex13.getImaginary();
      complex12.getImaginary();
      try { 
        complex11.nthRoot((-438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -438
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.createComplex((-4744.207), (-4744.207));
      complex0.INF.tan();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = Complex.valueOf((-4.996854125490041E297));
      Complex complex4 = complex1.NaN.conjugate();
      complex4.NaN.multiply(complex2);
      complex0.INF.readResolve();
      Complex complex5 = complex3.ZERO.tan();
      complex3.readResolve();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex1.divide(complex5);
      complex7.ZERO.conjugate();
      complex9.atan();
      Complex.valueOf((-4.996854125490041E297));
      complex9.hashCode();
      complex8.multiply(complex7);
      Complex complex10 = complex6.reciprocal();
      complex10.ZERO.add(complex3);
      complex6.add(20.0);
      Complex complex11 = complex7.cos();
      complex0.getArgument();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 5100;
      // Undeclared exception!
      complex0.ZERO.nthRoot(5100);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tan();
      complex0.getField();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.sqrt();
      assertEquals(0.7071067811865475, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex7 = complex2.acos();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-0.7023967071298747), complex7.getImaginary(), 0.01);
      
      complex1.createComplex((-4903.0), 0.0);
      assertNotSame(complex1, complex5);
      
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.multiply(complex8);
      Complex complex10 = complex9.cos();
      assertTrue(complex10.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = Complex.valueOf(567.574311183, 0.0);
      assertEquals(567.574311183, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sinh();
      complex0.hashCode();
      Complex complex4 = complex0.asin();
      assertSame(complex4, complex1);
      assertFalse(complex4.equals((Object)complex2));
      assertNotSame(complex4, complex3);
  }
}
