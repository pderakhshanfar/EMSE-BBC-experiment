/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:19:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1.0857572226543142E-10), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.pow(2379989.59714644);
      complex2.INF.multiply(2379989.59714644);
      complex1.multiply(complex0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1.285159987981792E19, (-2815.6740911317393));
      complex0.pow(1.285159987981792E19);
      complex0.exp();
      complex1.acos();
      Complex complex2 = Complex.ONE;
      try { 
        complex2.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      complex0.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.multiply(Double.NaN);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex3.tan();
      complex7.subtract(complex6);
      complex6.nthRoot(37);
      Complex complex8 = Complex.NaN;
      complex8.atan();
      Complex complex9 = complex4.sqrt();
      complex9.I.subtract((double) 37);
      complex2.pow(0.16005131677194784);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(460.496291746047, 460.496291746047);
      Complex complex3 = complex2.sqrt1z();
      complex2.pow(complex3);
      complex3.sin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.multiply(849);
      complex4.equals(complex1);
      Complex complex7 = complex2.multiply(complex4);
      complex4.negate();
      complex4.multiply(1135.0);
      Complex complex8 = Complex.valueOf(1244.70943, 1135.0);
      Complex complex9 = complex8.log();
      complex1.getField();
      Complex complex10 = new Complex(1135.0, (-3531.1));
      complex10.subtract(complex7);
      complex5.getField();
      Complex complex11 = complex2.sqrt1z();
      complex11.I.asin();
      complex5.getField();
      complex9.divide((double) 849);
      Complex complex12 = complex6.tanh();
      complex1.reciprocal();
      complex8.atan();
      complex12.log();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1397);
      complex0.pow((double) 1397);
      Complex complex1 = new Complex(5.611398197002426, 20.0);
      complex1.tan();
      complex1.toString();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3635.76511074, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      complex1.toString();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1397);
      Complex complex1 = complex0.pow((double) 1397);
      Complex complex2 = Complex.INF;
      complex1.sinh();
      Complex complex3 = new Complex(1397, Double.NaN);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex0.toString();
      complex0.readResolve();
      Complex complex2 = new Complex(1.414213562373095, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      complex2.sqrt();
      Complex complex4 = complex1.multiply(1.414213562373095);
      Complex complex5 = new Complex(519.98045, 6239.0);
      complex0.sin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf((-601.22603), (-1089.0374128080684));
      Complex complex8 = new Complex((-601.22603), 1.414213562373095);
      Complex complex9 = complex4.pow(complex8);
      Complex complex10 = Complex.I;
      complex10.tanh();
      complex6.tan();
      Complex complex11 = complex9.add(complex7);
      complex3.add(Double.NaN);
      complex6.pow((-470.9621));
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1, 1);
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(1.949300880034352E206);
      complex2.sqrt();
      Complex complex3 = new Complex(745.28, 745.28);
      complex3.sqrt();
      complex2.sin();
      Complex complex4 = Complex.NaN;
      Complex.valueOf((double) 1, (-1089.0374128080684));
      Complex complex5 = Complex.I;
      Complex.valueOf(1.949300880034352E206, 761.246);
      complex5.tanh();
      complex5.tan();
      Complex complex6 = new Complex(1.949300880034352E206);
      Complex complex7 = Complex.valueOf(5.978002467397905E-8, (-20.0));
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      complex0.I.toString();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.ONE;
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex2 = Complex.INF;
      complex2.multiply(2.0);
      Complex complex3 = new Complex((-939.5), 519.98045);
      Complex complex4 = complex3.sin();
      complex3.pow(complex0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.valueOf(20.0, (double) (-673));
      Complex complex7 = Complex.I;
      complex3.pow(complex1);
      Complex complex8 = complex6.tanh();
      complex7.tan();
      complex3.add(complex4);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(3.426282345243592E-8, 2.0);
      List<Complex> list0 = complex0.nthRoot(37);
      complex0.equals(list0);
      complex0.isNaN();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex((-20.0), 0.0);
      Complex complex3 = complex2.reciprocal();
      complex3.multiply(1170);
      complex2.tanh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      complex1.NaN.subtract((-2172.7));
      complex1.nthRoot(1);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3333.85429139569, 3333.85429139569);
      Complex complex1 = complex0.acos();
      complex0.reciprocal();
      complex0.multiply((-2126));
      complex1.tanh();
      Complex.valueOf(3333.85429139569);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex((-2.5113270522478854E-277));
      Complex complex6 = new Complex(1.0058765411376953, 1.0058765411376953);
      complex3.toString();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.sin();
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.valueOf(1466.0);
      Complex complex12 = Complex.valueOf((-2748.48859300779));
      complex12.isNaN();
      complex6.divide(Double.NaN);
      Complex complex13 = complex7.cosh();
      complex13.conjugate();
      complex8.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex(6.283185307179586, 3635.76511074);
      Complex complex3 = complex2.negate();
      complex3.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex4 = Complex.valueOf((-2748.48859300779), 1219.7583908085064);
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.valueOf(0.2658022288340798, 0.8813735870195429);
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.ONE;
      Complex.valueOf((-1413.3));
      complex7.isNaN();
      complex5.divide(6.283185307179586);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.equals(complex0);
      Complex complex1 = complex0.tan();
      complex1.createComplex((-973.1023801), (-973.1023801));
      complex1.toString();
      complex0.abs();
      Complex.valueOf((-973.1023801), Double.NaN);
      Complex complex2 = complex0.tanh();
      complex2.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.INF;
      complex1.nthRoot(2886);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.hashCode();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.tan();
      complex0.hashCode();
      Complex complex2 = complex0.sin();
      complex2.toString();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex2.multiply((-1089.0374128080684));
      Complex complex5 = Complex.ONE;
      complex4.multiply((double) 1);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 2.3442378838418366E212);
      complex3.toString();
      Complex complex7 = Complex.ZERO;
      complex6.sin();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.ONE;
      complex9.readResolve();
      Complex complex10 = Complex.ONE;
      Complex.valueOf(2.3442378838418366E212);
      complex6.isNaN();
      complex9.divide(2219.627569240791);
      complex3.getField();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(0.4228905439376831);
      complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.NaN.add(57.397376866163526);
      Complex complex4 = complex2.I.add(complex0);
      Complex complex5 = complex0.exp();
      complex5.cos();
      complex1.cosh();
      complex3.abs();
      complex2.I.multiply(complex4);
      Complex complex6 = complex1.cosh();
      complex3.divide((-1.4015110811648513E195));
      complex6.createComplex(1.5707963267948966, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.equals(complex0);
      Complex complex1 = complex0.tan();
      complex1.nthRoot(1);
      Complex complex2 = Complex.NaN;
      complex1.add(complex2);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-3400.774047510951));
      complex0.abs();
      complex1.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.INF;
      complex2.multiply((-2.5113270522478854E-277));
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex((-2.5113270522478854E-277));
      Complex complex6 = new Complex(1.5707963267948966, (-445.249855));
      complex0.I.toString();
      Complex complex7 = Complex.ZERO;
      complex7.sin();
      Complex complex8 = Complex.INF;
      complex0.I.readResolve();
      Complex complex9 = Complex.ONE;
      Complex.valueOf(2219.627569240791);
      complex2.isNaN();
      complex9.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.multiply((-1073840305));
      Complex complex2 = new Complex((-20.0), (-1.0857572226543142E-10));
      complex1.negate();
      Complex complex3 = complex1.createComplex(1908.1738158973105, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.add(complex1);
      complex3.getArgument();
      complex4.sinh();
      Complex complex5 = complex0.subtract(430.9);
      Complex complex6 = new Complex(1619.0);
      complex3.subtract(complex5);
      complex4.sinh();
      complex3.exp();
      Complex complex7 = complex0.cos();
      complex7.sinh();
      complex0.sqrt();
      complex2.negate();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(3.347954541376715E-8, (-207.6));
      Complex complex1 = Complex.valueOf(5.540622484676759E34);
      Complex complex2 = complex1.INF.sinh();
      complex2.INF.hashCode();
      Complex complex3 = new Complex((-1.0), 3.347954541376715E-8);
      Complex complex4 = complex0.add(complex3);
      complex4.INF.reciprocal();
      complex4.ONE.hashCode();
      Complex complex5 = Complex.valueOf((-207.6), 2483.58243);
      complex5.I.exp();
      Complex complex6 = complex0.ZERO.multiply(complex3);
      complex6.ONE.tan();
      Complex complex7 = complex0.conjugate();
      complex7.INF.hashCode();
      Complex complex8 = complex1.pow(complex0);
      complex0.conjugate();
      complex1.cosh();
      complex1.divide((-1213.9355));
      complex7.readResolve();
      complex5.subtract((-908.8933250272));
      Complex.valueOf((-1213.9355));
      Complex complex9 = complex8.cosh();
      complex9.multiply((-1.0));
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-3400.774047510951));
      complex0.abs();
      complex1.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.INF;
      complex2.abs();
      Complex.valueOf(3635.76511074, 3635.76511074);
      complex3.tanh();
      complex0.atan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      complex0.multiply((-673));
      Complex complex1 = new Complex(6.283185307179586, 3635.76511074);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.createComplex(0.0, (-1.0857572226543142E-10));
      Complex.valueOf((-2748.48859300779), (double) (-673));
      complex2.NaN.tanh();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = Complex.valueOf(1908.2397691362464, (-939.5));
      Complex complex8 = Complex.INF;
      complex8.pow(complex4);
      Complex complex9 = complex2.tanh();
      complex6.ZERO.subtract((-1.5096182622106617E-105));
      complex8.sin();
      complex6.tan();
      complex7.add(complex5);
      complex3.getImaginary();
      Complex complex10 = Complex.INF;
      complex10.conjugate();
      complex3.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex(6.020987699394643, 3635.76511074);
      complex1.abs();
      complex2.hashCode();
      Complex complex3 = Complex.NaN;
      complex1.divide(complex3);
      Complex complex4 = Complex.INF;
      complex4.abs();
      Complex complex5 = Complex.valueOf((double) (-673), 3635.76511074);
      complex5.tanh();
      Complex complex6 = Complex.INF;
      complex6.atan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, 3635.76511074);
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex(6.020987699394643, 3635.76511074);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex5 = complex4.add(complex3);
      complex0.getArgument();
      complex5.sinh();
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = Complex.INF;
      complex3.abs();
      Complex.valueOf(0.0, 3635.76511074);
      complex4.tanh();
      complex6.atan();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex(6.283185307179586, 3635.76511074);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex5 = Complex.valueOf((-2748.48859300779), 1219.7583908085064);
      complex4.subtract(810.36628665);
      Complex complex6 = new Complex((-388.740252));
      complex6.subtract(complex3);
      complex4.sinh();
      complex0.exp();
      Complex complex7 = complex4.cos();
      complex1.getImaginary();
      complex5.acos();
      complex0.sinh();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.multiply((-2165));
      complex1.isNaN();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex5.add(complex3);
      complex4.subtract(0.0);
      Complex complex7 = new Complex((-73.0507957419), (-570.037539973367));
      Complex complex8 = complex7.multiply(2446869.91952802);
      Complex complex9 = complex1.multiply(0.0);
      Complex complex10 = Complex.ONE;
      complex0.multiply(0.0);
      Complex complex11 = new Complex(1444.8292821230527, 2446869.91952802);
      Complex complex12 = complex6.sin();
      complex6.pow(complex11);
      complex8.sqrt1z();
      Complex complex13 = Complex.valueOf(0.0, (-681.9));
      Complex complex14 = complex8.pow(complex9);
      Complex complex15 = complex14.tanh();
      complex3.sin();
      complex4.tan();
      complex12.add(complex13);
      complex15.getImaginary();
      complex15.conjugate();
      complex14.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.INF.add((-1.0));
      Complex complex2 = complex0.tan();
      complex2.hashCode();
      complex1.sin();
      complex2.toString();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      complex0.cos();
      complex3.equals("(-1.557407724654902, 0.0)");
      complex1.tanh();
      complex3.sinh();
      complex0.conjugate();
      complex0.divide((double) 0);
      complex1.multiply(complex2);
      Complex complex4 = new Complex((-1.0));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex(6.283185307179586, 3635.76511074);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex5 = complex3.subtract(1523.5820274);
      complex5.multiply(0.0);
      complex2.sin();
      complex1.pow(complex4);
      Complex complex6 = Complex.valueOf(1.1165241398059789E-8, Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex((-673), (-2978.1088));
      complex4.pow(complex7);
      Complex complex8 = Complex.ZERO;
      complex8.tanh();
      Complex complex9 = Complex.ONE;
      complex6.subtract(complex2);
      complex7.sin();
      Complex complex10 = complex4.tan();
      complex5.add(complex10);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      complex0.hashCode();
      Complex complex3 = complex0.sin();
      complex3.toString();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex3.multiply((-1089.0374128080684));
      Complex complex6 = Complex.ONE;
      complex5.multiply((double) 1);
      Complex complex7 = new Complex(1619.0, 519.98045);
      complex2.sin();
      complex7.pow(complex0);
      Complex complex8 = complex4.sqrt1z();
      Complex.valueOf(0.9526977053447616, (-361.71435729));
      Complex complex9 = Complex.I;
      complex9.pow(complex1);
      Complex complex10 = complex5.tanh();
      complex0.sin();
      complex10.tan();
      complex8.add(complex5);
      complex8.getImaginary();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.INF.add((-1.0));
      Complex complex3 = complex0.I.reciprocal();
      complex0.multiply(0);
      complex1.isNaN();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.pow(complex4);
      complex2.add(complex0);
      Complex complex6 = complex5.subtract((-0.3633607491763842));
      Complex complex7 = complex5.multiply((-73.0507957419));
      Complex complex8 = complex4.cos();
      complex4.equals("");
      complex7.tanh();
      complex3.sinh();
      complex4.I.add(1270.6489578);
      Complex complex9 = Complex.ONE;
      complex9.conjugate();
      Complex complex10 = Complex.INF;
      complex10.divide((-73.0507957419));
      Complex complex11 = new Complex((-5914.55500765093));
      complex6.multiply(complex11);
      complex8.cos();
      complex4.reciprocal();
      complex0.pow((-5914.55500765093));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(382.89, (-2682.9945347302));
      complex0.getField();
      Complex complex1 = complex0.cos();
      complex1.INF.subtract((-2682.9945347302));
      Complex complex2 = new Complex((-546.186358599), (-411.0014879));
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.sin();
      complex4.INF.divide(complex0);
      Complex complex5 = complex1.log();
      complex5.INF.createComplex((-411.0014879), Double.NaN);
      complex0.I.conjugate();
      complex1.NaN.getField();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.ONE.createComplex((-2682.9945347302), 2.541716645820813E-6);
      complex7.readResolve();
      complex1.equals(complex5);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex0.sinh();
      complex2.negate();
      Complex complex10 = complex9.ONE.add(complex7);
      complex10.multiply((-2649.5829555121286));
      complex9.atan();
      complex9.toString();
      complex6.log();
      complex8.negate();
      Complex complex11 = Complex.NaN;
      complex1.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-5914.55500765093), (-5914.55500765093));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.negate();
      complex3.exp();
      Complex complex4 = complex1.sinh();
      complex1.exp();
      Complex complex5 = complex0.pow((-210.87059568));
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.sqrt1z();
      complex5.abs();
      complex4.getReal();
      complex7.pow(230.2821);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ONE.atan();
      complex3.negate();
      complex0.getArgument();
      Complex complex4 = complex1.acos();
      complex1.asin();
      complex0.sqrt1z();
      complex1.sinh();
      complex1.reciprocal();
      Complex complex5 = complex4.multiply(1.5707963267948966);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1785.969897, (-3632.953742060886));
      Complex complex1 = complex0.divide((-18.4292036732051));
      Complex complex2 = complex0.negate();
      complex1.getArgument();
      complex0.acos();
      complex2.asin();
      complex2.sqrt1z();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sinh();
      complex0.reciprocal();
      Complex complex5 = new Complex((-18.4292036732051));
      complex5.multiply(0.9998309255752266);
      complex4.sqrt1z();
      complex2.toString();
      Complex.valueOf((-743.0), 20.0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 3635.76511074;
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex(6.283185307179586, 3635.76511074);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex5 = complex4.add(complex3);
      complex5.tan();
      complex1.exp();
      complex4.asin();
      complex1.log();
      try { 
        complex3.nthRoot((-673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -673
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(8.623968972387222E211);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex1.ONE.nthRoot(17);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      complex0.multiply((-673));
      Complex complex1 = new Complex(6.283185307179586, 3635.76511074);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex4 = complex3.add(complex2);
      complex0.getArgument();
      Complex complex5 = complex4.tan();
      complex4.exp();
      complex5.asin();
      Complex complex6 = Complex.ONE;
      complex6.log();
      complex2.nthRoot(3158);
      complex6.getImaginary();
      Complex complex7 = Complex.I;
      complex7.createComplex((-0.2528735039141413), (-1.0857572226543142E-10));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide((-743.0));
      complex1.readResolve();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.subtract(20.0);
      Complex complex4 = (Complex)complex3.readResolve();
      complex0.equals(complex4);
      Complex complex5 = complex0.multiply((-7044.2075));
      complex5.ONE.add((-2659.6643619488714));
      complex0.conjugate();
      Complex complex6 = Complex.I;
      complex6.subtract(20.0);
      complex6.divide(complex0);
      Complex complex7 = Complex.ZERO;
      complex7.acos();
      complex3.asin();
      complex7.sin();
      complex0.atan();
      complex3.getImaginary();
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-5914.55500765093), (-5914.55500765093));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.negate();
      complex3.exp();
      complex1.equals(complex0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.ZERO.acos();
      complex4.exp();
      Complex complex6 = complex0.pow((-210.87059568));
      Complex.valueOf(0.5850973129272461);
      Complex complex7 = complex0.sqrt1z();
      complex6.abs();
      complex5.getReal();
      complex7.pow(230.2821);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.I.sin();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.subtract(443.52812);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.atan();
      complex3.toString();
      Complex complex6 = complex1.I.subtract(443.52812);
      complex0.nthRoot(1);
      complex5.I.exp();
      Complex complex7 = Complex.valueOf((-72.6278370694897), (-825.505545104006));
      Complex complex8 = complex7.INF.cos();
      complex7.ONE.toString();
      complex6.sqrt();
      complex1.sinh();
      Complex complex9 = complex4.sin();
      Complex complex10 = Complex.valueOf((-72.6278370694897));
      complex10.pow(complex9);
      complex6.sqrt1z();
      Complex complex11 = Complex.valueOf((-72.6278370694897), (-8.678466172071259E-9));
      Complex complex12 = Complex.INF;
      complex2.pow(complex12);
      complex9.tanh();
      complex8.subtract(complex11);
      complex7.sin();
      complex4.tan();
      Complex complex13 = Complex.valueOf((-961.15), (-961.15));
      complex13.add(complex0);
      Complex complex14 = Complex.I;
      complex14.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.INF.add((-1.0));
      complex0.I.reciprocal();
      complex0.multiply(0);
      complex1.isNaN();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex2.add(complex0);
      complex4.subtract(0.0);
      Complex complex6 = complex4.multiply((-73.0507957419));
      complex6.multiply(0.0);
      complex3.negate();
      Complex complex7 = Complex.valueOf((-1454.83618244), (-1.0));
      complex5.pow(complex7);
      complex1.negate();
      complex7.createComplex(0.0, (-73.0507957419));
      Complex complex8 = complex1.tan();
      double double0 = 0.0;
      complex3.divide((-3251.47));
      complex4.add(complex8);
      complex1.sinh();
      complex5.isInfinite();
      // Undeclared exception!
      complex8.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.multiply((-673));
      Complex complex2 = new Complex(6.283185307179586, 3635.76511074);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.createComplex(0.0, (-1.0857572226543142E-10));
      Complex complex5 = complex4.add(complex3);
      complex0.getArgument();
      complex5.sinh();
      Complex complex6 = complex5.subtract((-3823.5452156299));
      Complex complex7 = new Complex((-1.0857572226543142E-10));
      complex5.subtract(complex2);
      Complex complex8 = complex1.sinh();
      complex8.exp();
      complex4.cos();
      complex8.getImaginary();
      complex6.acos();
      complex1.sinh();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.nthRoot(86);
      complex0.abs();
      Complex complex2 = complex0.reciprocal();
      complex2.ONE.readResolve();
      complex2.ONE.acos();
      Complex complex3 = complex0.I.subtract(1659.6397436567);
      complex2.equals("+>CZr:MJ");
      Complex complex4 = complex3.multiply(2.414213562373095);
      complex1.conjugate();
      complex3.subtract(Double.NaN);
      complex3.divide(complex4);
      complex2.acos();
      complex4.asin();
      Complex complex5 = new Complex(0.0, 3324.5407);
      complex5.sin();
      Complex complex6 = Complex.INF;
      complex6.atan();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.nthRoot(86);
      complex0.abs();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.divide((double) 86);
      complex1.abs();
      complex1.hashCode();
      Complex complex4 = Complex.INF;
      complex1.divide(complex4);
      complex0.readResolve();
      complex2.abs();
      Complex complex5 = complex0.divide(1.0);
      complex3.tanh();
      complex5.atan();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide((-743.0));
      complex1.readResolve();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.subtract(20.0);
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex0.multiply((-7044.2075));
      complex0.conjugate();
      Complex complex4 = Complex.I;
      complex4.subtract(20.0);
      complex4.divide(complex0);
      Complex complex5 = Complex.ZERO;
      complex5.acos();
      complex3.asin();
      complex5.sin();
      complex0.atan();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex1.abs();
      Complex complex2 = new Complex(0.5403023058681398);
      Complex complex3 = complex2.pow((-780.3545747885694));
      complex3.toString();
      Complex complex4 = complex1.log();
      complex1.isInfinite();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex3.asin();
      complex4.negate();
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = Complex.valueOf(0.2378782033920288, 0.029671030702969583);
      complex8.pow(complex7);
      complex6.conjugate();
      complex7.getArgument();
      complex2.getArgument();
      complex3.getArgument();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.multiply(1);
      complex2.ONE.negate();
      complex1.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex1.add(complex0);
      complex3.NaN.getArgument();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex4.ZERO.subtract((-3823.5452156299));
      Complex complex6 = complex5.I.divide(0.0);
      complex6.NaN.getField();
      complex1.subtract(complex3);
      Complex complex7 = complex4.divide((-1.1030897183911054E-8));
      complex4.tanh();
      complex7.atan();
      Complex complex8 = Complex.NaN;
      complex8.sinh();
      complex7.createComplex((-743.0), 2618.017681682825);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide((-743.0));
      Complex complex2 = complex1.ZERO.divide(20.0);
      complex0.abs();
      complex2.ONE.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = (Complex)complex1.readResolve();
      complex0.I.abs();
      complex4.ONE.exp();
      Complex complex5 = complex3.sinh();
      complex4.exp();
      Complex complex6 = Complex.valueOf(1.0, (-1660.826801));
      complex6.cos();
      complex5.getImaginary();
      complex4.acos();
      complex5.sinh();
      complex1.sqrt();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.nthRoot(86);
      complex0.abs();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.reciprocal();
      complex3.multiply(1659.6397436567);
      complex4.log();
      complex6.equals(complex7);
      complex0.subtract(complex5);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(317.790893449);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.pow(complex1);
      complex0.add(complex2);
      Complex complex3 = complex1.subtract(317.790893449);
      Complex complex4 = complex2.multiply(317.790893449);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.pow(complex5);
      complex4.sqrt1z();
      Complex.valueOf((-73.0507957419), (-225.6466193));
      Complex complex7 = complex6.pow(complex3);
      complex7.tanh();
      complex3.subtract(complex6);
      complex3.sin();
      complex0.tan();
      complex4.add(complex0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.INF.add((-1.0));
      Complex complex3 = complex0.I.reciprocal();
      complex0.multiply(0);
      complex1.isNaN();
      complex0.subtract(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.atan();
      complex6.add((double) 0);
      complex4.multiply(complex0);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.divide(complex0);
      complex1.multiply(complex0);
      complex2.nthRoot(1);
      complex2.exp();
      Complex.valueOf((-3750.45710018), 3.530656968851287E-8);
      Complex complex3 = complex0.cos();
      complex1.toString();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.multiply((-825.505545104006));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.pow(complex1);
      complex8.negate();
      Complex complex9 = complex4.createComplex((-825.505545104006), 0.0);
      complex5.tan();
      Complex complex10 = Complex.NaN;
      complex10.divide(0.0);
      complex4.add(complex9);
      Complex complex11 = Complex.INF;
      complex11.sinh();
      complex11.isInfinite();
      complex0.nthRoot(4377);
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sin();
      complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.subtract(443.52812);
      Complex complex4 = complex3.cosh();
      complex4.atan();
      complex3.toString();
      Complex complex5 = complex1.I.subtract(443.52812);
      complex1.reciprocal();
      complex2.tan();
      complex0.exp();
      Complex complex6 = complex5.asin();
      complex6.log();
      complex4.nthRoot(7);
      complex3.getImaginary();
      Complex complex7 = Complex.I;
      complex7.createComplex((-1.2277120342804144E295), 1275);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.tanh();
      complex0.I.sqrt1z();
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex0.INF.divide(complex1);
      complex0.getField();
      Complex complex5 = complex1.NaN.exp();
      Complex.valueOf(0.0);
      Complex complex6 = complex5.NaN.cos();
      complex5.getField();
      Complex complex7 = complex0.multiply(0.0);
      complex7.getReal();
      Complex complex8 = complex4.cosh();
      complex8.readResolve();
      Complex complex9 = complex7.atan();
      complex2.pow(Double.POSITIVE_INFINITY);
      complex7.cos();
      complex9.cos();
      complex3.sqrt1z();
      Complex complex10 = complex6.sinh();
      complex10.isNaN();
      Complex complex11 = new Complex(1253.093220457091, (-930.63545625716));
      complex10.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.I.sin();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.subtract(443.52812);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.atan();
      complex3.toString();
      complex1.I.subtract(443.52812);
      complex0.nthRoot(1);
      complex5.I.exp();
      Complex complex6 = Complex.valueOf((-72.6278370694897), (-825.505545104006));
      complex6.INF.cos();
      complex6.ONE.toString();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.I.multiply(0.0);
      complex8.negate();
      complex2.pow(complex1);
      complex5.negate();
      complex4.createComplex(1, 443.52812);
      Complex complex9 = complex3.tan();
      complex9.I.divide(0.0);
      complex9.INF.add(complex8);
      complex4.sinh();
      complex9.isInfinite();
      try { 
        complex5.nthRoot((-84));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -84
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex0.subtract(2461.17);
      Complex complex5 = complex2.subtract(2461.17);
      complex4.sinh();
      Complex complex6 = complex0.I.reciprocal();
      complex6.ONE.cosh();
      complex3.I.conjugate();
      Complex complex7 = complex5.subtract(6.283185307179586);
      complex3.hashCode();
      complex3.getField();
      complex3.multiply(complex7);
      Complex complex8 = null;
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.INF.add((-1.0));
      complex0.I.reciprocal();
      Complex complex3 = complex0.multiply(0);
      complex1.isNaN();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex2.add(complex0);
      complex5.subtract(0.0);
      Complex complex7 = complex5.multiply((-73.0507957419));
      complex7.INF.sin();
      complex7.ZERO.pow(complex6);
      complex0.INF.sqrt1z();
      Complex complex8 = Complex.valueOf((-1.0), (-4129.24));
      complex8.pow(complex1);
      complex0.tanh();
      Complex complex9 = complex3.subtract(complex6);
      Complex complex10 = complex9.sin();
      complex10.tan();
      complex10.add(complex5);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1349.1865913077), (-1349.1865913077));
      Complex complex1 = complex0.add(0.5238267183303833);
      complex0.ZERO.createComplex(0.5238267183303833, (-2357.1599592173));
      complex0.isInfinite();
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex.valueOf((-1349.1865913077), 0.0);
      complex2.ONE.createComplex(0.0, 0.5238267183303833);
      complex1.add(complex0);
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex1.multiply(complex0);
      complex0.INF.asin();
      complex1.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.subtract(3444.148754828678);
      Complex complex5 = complex4.ONE.add(1.4573285967670963E-107);
      complex0.multiply((-536));
      Complex complex6 = complex4.ONE.subtract(complex0);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex1.tanh();
      complex1.multiply(complex7);
      Complex complex10 = Complex.I;
      complex10.INF.hashCode();
      complex9.equals(complex10);
      complex10.multiply(complex5);
      complex2.toString();
      Complex complex11 = complex10.subtract(complex8);
      complex11.cosh();
      complex6.conjugate();
      Complex complex12 = complex4.cos();
      complex7.sinh();
      complex12.sqrt1z();
      complex11.add(0.0);
      complex9.nthRoot(625);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.multiply(1);
      complex2.ONE.negate();
      Complex complex3 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex4 = complex1.add(complex0);
      complex4.NaN.getArgument();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex5.ZERO.subtract((-3823.5452156299));
      complex6.I.divide(0.0);
      complex1.subtract(complex4);
      Complex complex7 = complex1.sinh();
      complex0.exp();
      complex1.cos();
      complex3.getImaginary();
      complex2.acos();
      Complex complex8 = complex7.sinh();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex1.abs();
      Complex complex2 = complex0.pow(27.305013);
      complex2.ZERO.toString();
      Complex complex3 = complex0.log();
      complex0.isInfinite();
      Complex complex4 = complex1.cosh();
      complex4.asin();
      Complex complex5 = complex1.NaN.negate();
      Complex complex6 = complex1.multiply(complex4);
      complex1.pow(complex2);
      complex1.conjugate();
      complex5.ZERO.add(complex3);
      complex5.getArgument();
      complex5.getArgument();
      complex6.getArgument();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(317.790893449);
      Complex complex1 = complex0.I.cos();
      complex1.INF.sinh();
      Complex complex2 = Complex.INF;
      complex2.atan();
      complex2.INF.add(2.2038806519542315E-267);
      complex0.multiply(complex2);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(833.244298832211);
      Complex complex1 = complex0.negate();
      complex0.sinh();
      complex0.conjugate();
      complex1.add(1042.0);
      complex1.asin();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double double0 = 1876.80447754338;
      Complex complex0 = Complex.valueOf(1876.80447754338);
      complex0.INF.cos();
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.INF.conjugate();
      complex1.ZERO.divide(0.0);
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.I.sqrt1z();
      complex0.NaN.exp();
      complex0.abs();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.NaN.multiply(Double.NaN);
      complex7.INF.multiply(2846);
      complex6.ZERO.cosh();
      complex1.abs();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.ONE.sin();
      complex9.ZERO.negate();
      Complex.valueOf(0.0);
      Complex complex10 = complex4.sqrt1z();
      complex0.exp();
      complex5.readResolve();
      Complex complex11 = complex10.conjugate();
      complex10.NaN.toString();
      Complex complex12 = new Complex(Double.NaN, 2846);
      complex11.I.divide(complex12);
      complex5.add(complex10);
      complex5.asin();
      complex2.cos();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = (-3746.49);
      Complex complex0 = new Complex((-3746.49));
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(680.9561898458);
      complex0.exp();
      Complex complex1 = Complex.valueOf(3.280586734644871E82, 1170.53106);
      complex1.ONE.acos();
      complex1.createComplex(680.9561898458, 1170.53106);
      Complex complex2 = complex0.tan();
      complex0.tanh();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.I.createComplex(3.280586734644871E82, 81.94);
      try { 
        complex5.ZERO.nthRoot((-1336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,336
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-1.2277120342804144E295));
      complex0.getArgument();
      complex0.pow(2169.8885726319186);
      Complex complex1 = Complex.valueOf(6.283185307179586, (-5231.22052));
      complex1.INF.cosh();
      Complex complex2 = Complex.valueOf((-5231.22052));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.acos();
      complex3.ONE.subtract(3.141592653589793);
      complex2.NaN.sqrt1z();
      complex0.abs();
      complex4.sqrt1z();
      complex1.pow(complex2);
      complex4.createComplex(0.0, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(303.387899);
      Complex complex1 = complex0.INF.pow(303.387899);
      Complex complex2 = complex1.INF.multiply(1176);
      Complex complex3 = complex1.INF.tan();
      complex3.INF.toString();
      complex3.exp();
      Complex complex4 = complex0.I.cos();
      complex4.ONE.getField();
      Complex complex5 = complex4.I.multiply(1176);
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex0.ZERO.add(complex4);
      Complex complex8 = Complex.valueOf(303.387899, 0.0);
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex8.NaN.multiply(complex0);
      complex10.I.conjugate();
      complex0.ONE.divide(0.0);
      complex9.multiply(0);
      complex1.isInfinite();
      complex2.readResolve();
      complex8.subtract(complex6);
      Complex complex11 = complex9.atan();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex12.reciprocal();
      complex8.abs();
      complex11.exp();
      complex8.isInfinite();
      complex13.multiply(1176);
      complex7.subtract((double) 0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.INF.abs();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf((-1584.21644), (-1584.21644));
      complex2.I.reciprocal();
      complex3.ZERO.multiply(1083);
      Complex.valueOf(1044.353, Double.POSITIVE_INFINITY);
      complex1.NaN.pow(complex3);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.ZERO.tan();
      Complex complex6 = complex4.add(Double.POSITIVE_INFINITY);
      complex3.INF.negate();
      complex1.I.log();
      complex4.abs();
      Complex complex7 = complex3.divide(complex2);
      complex7.sinh();
      complex3.readResolve();
      Complex complex8 = complex4.negate();
      complex8.I.log();
      complex6.cos();
      complex1.conjugate();
      Complex.valueOf((-3688.1726), 1044.353);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide((-743.0));
      Complex complex2 = complex1.ZERO.divide(20.0);
      complex0.abs();
      complex2.ONE.hashCode();
      Complex complex3 = complex0.divide(complex1);
      complex1.readResolve();
      complex0.I.abs();
      complex1.divide(20.0);
      Complex complex4 = complex2.tanh();
      complex4.atan();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-956.9231915852));
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.INF.tan();
      complex0.INF.getField();
      Complex complex3 = complex0.NaN.pow(complex2);
      complex3.NaN.exp();
      Complex complex4 = Complex.valueOf((-956.9231915852), 0.0);
      Complex complex5 = complex4.NaN.pow(complex1);
      Complex complex6 = complex5.NaN.tanh();
      complex6.ONE.conjugate();
      complex1.ZERO.negate();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.INF.log();
      complex7.ZERO.tan();
      complex0.equals(object0);
      Complex complex8 = complex0.NaN.cos();
      Complex complex9 = complex0.divide((-870.99));
      complex4.getImaginary();
      complex8.subtract(0.0);
      complex9.cosh();
      complex8.equals(complex9);
      complex4.add(3346.4272885613);
      Complex complex10 = complex5.pow(1159.8);
      Complex complex11 = complex10.INF.sin();
      complex1.getReal();
      complex4.reciprocal();
      complex1.toString();
      complex11.hashCode();
      Complex.valueOf(3346.4272885613);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(complex1);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5991.487230583466, 5991.487230583466);
      Complex complex1 = complex0.NaN.add(5991.487230583466);
      Complex complex2 = complex1.ZERO.subtract(5991.487230583466);
      complex2.NaN.sin();
      Complex complex3 = complex0.log();
      complex3.INF.sqrt1z();
      Complex complex4 = complex0.createComplex(5991.487230583466, (-1.6754164785291923E-136));
      complex4.add((-1.6754164785291923E-136));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(3635.76511074, (-939.5));
      Complex complex1 = complex0.tan();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.I.sin();
      complex2.INF.toString();
      Object object0 = complex1.readResolve();
      complex2.I.cos();
      complex0.equals(object0);
      complex2.I.tanh();
      try { 
        complex2.nthRoot((-250));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -250
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.sqrt();
      complex5.INF.divide(complex3);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.ZERO.negate();
      Complex complex9 = complex7.I.exp();
      complex7.pow(1949.75630028);
      Complex complex10 = complex1.divide(complex6);
      Complex complex11 = complex10.tanh();
      complex2.acos();
      Complex complex12 = complex9.subtract(1949.75630028);
      complex3.negate();
      complex12.getField();
      complex11.tan();
      complex0.cosh();
      complex8.sinh();
      complex4.toString();
      Complex complex13 = complex0.cos();
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.sinh();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.negate();
      complex1.getArgument();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.sqrt1z();
      complex6.I.sinh();
      Complex complex7 = complex1.reciprocal();
      complex7.multiply((-20.0));
      complex2.log();
      complex1.equals((Object) null);
      complex0.subtract(complex1);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.toString();
      complex0.getArgument();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.multiply(complex1);
      complex0.NaN.hashCode();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.divide((-6.038239639506472E-32));
      complex3.ONE.atan();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.createComplex((-6.038239639506472E-32), (-6.038239639506472E-32));
      complex0.I.readResolve();
      complex4.isNaN();
      Complex complex6 = complex0.cosh();
      complex5.ONE.atan();
      Complex complex7 = complex5.createComplex(20.0, (-6.038239639506472E-32));
      Complex.valueOf(1653.01, (-3484.297148187489));
      complex6.getArgument();
      Complex.valueOf(0.0);
      complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1067.6506));
      Complex complex1 = Complex.valueOf((-1067.6506), (-3624.81422980757));
      complex0.NaN.add(complex1);
      complex0.equals("3+ou]/YDh*=#D");
      complex1.toString();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.INF.divide(complex0);
      complex1.multiply(complex0);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.I.tan();
      complex3.exp();
      Complex complex4 = complex2.asin();
      complex4.I.log();
      complex1.I.nthRoot(1275);
      complex1.getImaginary();
      complex0.createComplex((-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(20.0);
      Complex.valueOf(20.0);
      complex1.NaN.exp();
      Complex complex2 = Complex.valueOf((-173.71681404), (-173.71681404));
      Complex complex3 = complex0.INF.reciprocal();
      Complex complex4 = complex3.I.tanh();
      complex4.cosh();
      Complex complex5 = complex2.pow((-3.951314467739045E140));
      complex5.ONE.tan();
      Complex complex6 = complex0.INF.sin();
      Complex complex7 = complex0.multiply(0);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex7.sinh();
      complex9.NaN.asin();
      Complex complex10 = complex7.subtract(complex6);
      Complex complex11 = complex10.NaN.divide(complex2);
      complex9.ZERO.asin();
      Complex complex12 = complex8.I.sinh();
      complex12.INF.log();
      complex7.getArgument();
      Complex complex13 = complex8.cos();
      Complex complex14 = complex6.divide(complex13);
      complex14.ZERO.subtract(0.0);
      Complex complex15 = complex9.tan();
      Complex complex16 = complex15.NaN.cos();
      complex9.negate();
      complex8.subtract(complex11);
      complex1.multiply(282);
      Complex complex17 = complex3.cos();
      complex17.INF.add(complex16);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.negate();
      complex2.ONE.abs();
      Complex complex3 = complex0.multiply((-2628.308));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.NaN.cosh();
      complex5.NaN.cos();
      Complex complex6 = complex3.subtract((-2063.7));
      Complex complex7 = complex6.asin();
      assertEquals((-8.325402889058832), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.ZERO.tanh();
      Complex complex9 = complex8.cosh();
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex3.NaN.sqrt();
      complex0.isInfinite();
      Complex complex11 = complex5.exp();
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex11.ZERO.acos();
      complex13.INF.cosh();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      complex14.ONE.toString();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex15 = complex6.atan();
      Complex complex16 = complex15.INF.sqrt();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(1.5703117602776064, complex15.getReal(), 0.01);
      
      Complex complex17 = complex2.tan();
      Complex complex18 = complex3.sinh();
      assertEquals(-0.0, complex18.getReal(), 0.01);
      
      complex4.readResolve();
      complex12.createComplex(0.0, (-2063.7));
      assertTrue(complex11.equals((Object)complex16));
      
      Complex complex19 = complex0.tan();
      assertEquals(0.0, complex19.getReal(), 0.01);
      
      double double0 = complex17.getArgument();
      assertTrue(complex1.equals((Object)complex19));
      assertSame(complex17, complex10);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 0.0;
      complex0.pow(0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-2945.1962388452944), (-2945.1962388452944));
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-2945.1962388452944), complex1.getReal(), 0.01);
      assertEquals((-2945.1962388452944), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(8.623968972387222E211);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.divide(complex1);
      List<Complex> list0 = complex1.ONE.nthRoot(17);
      assertEquals(17, list0.size());
      
      Complex complex4 = complex1.sin();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.pow((-192.1233841373441));
      assertNotSame(complex6, complex3);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertEquals(0.0, complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.conjugate();
      complex2.NaN.abs();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.divide(complex0);
      complex1.abs();
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex5.ONE.subtract(complex2);
      Complex complex7 = complex2.ZERO.sinh();
      Complex complex8 = complex3.ZERO.cosh();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex1.exp();
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex2.log();
      double double0 = complex4.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex11 = complex9.sqrt();
      assertSame(complex11, complex3);
      
      Complex complex12 = complex10.multiply(1366);
      complex12.acos();
      assertSame(complex12, complex6);
      
      Complex complex13 = complex10.divide(Double.NaN);
      complex7.createComplex((-451.7285398450549), 2307.663358993);
      assertFalse(complex0.equals((Object)complex4));
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertSame(complex1, complex13);
  }
}
