/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:27:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.25673801176584E-159);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cos();
      complex0.readResolve();
      complex1.getArgument();
      complex1.nthRoot(747);
      complex2.tan();
      Complex complex3 = Complex.ZERO;
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(3.5759315936869937E-9, 3.5759315936869937E-9);
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      Complex complex2 = Complex.INF;
      int int0 = (-1503);
      Complex complex3 = complex2.multiply((-1503));
      Complex complex4 = complex1.divide((-5.730160886217076E-90));
      Complex complex5 = new Complex((-5.730160886217076E-90));
      complex5.getArgument();
      Complex complex6 = Complex.valueOf((double) 128, (-1132.0));
      complex3.divide(3.6938826366068014E-196);
      Complex complex7 = complex0.acos();
      complex0.readResolve();
      complex4.cosh();
      complex7.abs();
      complex7.tan();
      complex1.pow(complex0);
      complex0.log();
      complex6.sqrt();
      Complex complex8 = Complex.INF;
      complex2.pow(complex8);
      Complex complex9 = Complex.ZERO;
      try { 
        complex9.nthRoot((-1503));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,503
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex0.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0041766691618124E-5, Double.POSITIVE_INFINITY);
      complex0.multiply(2001);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-4.7559175309753334E156));
      Complex complex2 = new Complex((-4.7559175309753334E156), 1.0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(0.6389714479446411, Double.POSITIVE_INFINITY);
      complex4.atan();
      complex1.log();
      complex0.getField();
      complex3.acos();
      complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4581.422375756), (-4581.422375756));
      complex0.add(complex1);
      complex0.abs();
      Complex complex2 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      complex2.INF.add(complex3);
      complex0.multiply(complex2);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-4.7559175309753334E156));
      Complex complex2 = new Complex((-4.7559175309753334E156), 1.0);
      complex1.multiply(3573);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1370);
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf(2.812076759125914E-8, Double.POSITIVE_INFINITY);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-550.781848955));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.tan();
      complex2.NaN.sqrt1z();
      Complex complex5 = complex0.multiply(5916.509403193298);
      Complex complex6 = complex5.INF.pow(complex3);
      Complex complex7 = complex5.I.tanh();
      complex2.exp();
      complex7.INF.sin();
      complex2.createComplex(1141.9599, (-2039.4196575448));
      complex4.exp();
      Complex complex8 = complex0.multiply(Double.NaN);
      complex0.exp();
      Complex complex9 = Complex.valueOf(5916.509403193298, (-1671.6746461));
      complex6.add(11340.599911821244);
      complex8.nthRoot(1675);
      complex9.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-5670.3);
      Complex complex0 = Complex.valueOf((-5670.3));
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1.3576009457645088);
      Complex complex1 = complex0.multiply((-840905918));
      Complex.valueOf(1.3576009457645088);
      complex1.asin();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1739.8666));
      Complex complex1 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      complex1.NaN.getArgument();
      complex1.ZERO.abs();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt1z();
      complex3.exp();
      complex4.ONE.cosh();
      complex3.cosh();
      Complex complex5 = Complex.valueOf((-2446.07889), (-1739.8666));
      Complex complex6 = complex1.I.add((-627.0624187631805));
      complex6.I.sinh();
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.sin();
      Complex complex11 = complex2.multiply(269);
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex9.add(Double.POSITIVE_INFINITY);
      complex13.tan();
      complex12.ZERO.conjugate();
      complex10.pow((-2263.1983343));
      complex5.log();
      complex1.subtract(complex12);
      Complex.valueOf((-2263.1983343));
      Complex complex14 = complex2.pow((-627.0624187631805));
      complex3.multiply(0.0);
      complex7.sqrt1z();
      complex7.cosh();
      complex14.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(6.131094170752636E189);
      complex0.nthRoot(815);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(6.131094170752636E189, (-992.8));
      Complex complex1 = new Complex((-954.86), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      complex2.reciprocal();
      complex0.nthRoot(2651);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.854771398921902E-70, 2.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-947.277));
      complex0.I.log();
      Complex complex2 = (Complex)complex0.readResolve();
      complex2.ZERO.acos();
      complex0.equals(complex2);
      complex0.equals(complex1);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(56.7587194511836);
      complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 146.1744);
      Complex complex2 = new Complex(2.0, Double.NaN);
      complex1.tanh();
      Complex complex3 = complex2.reciprocal();
      complex3.nthRoot(2651);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.multiply((-701.204));
      Complex complex3 = complex2.pow(complex1);
      complex1.I.tan();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex2.pow(complex5);
      Complex complex7 = complex0.atan();
      complex0.divide(0.0);
      complex4.cosh();
      complex3.getField();
      complex7.exp();
      Complex complex8 = complex6.exp();
      Complex complex9 = Complex.NaN;
      complex1.toString();
      complex3.cos();
      Complex complex10 = Complex.NaN;
      complex10.ONE.getField();
      complex10.multiply(1929);
      complex4.tan();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2613.9690374031265);
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.INF.createComplex(2613.9690374031265, (-744.5750710711483));
      Complex complex5 = complex4.I.asin();
      complex5.acos();
      complex0.abs();
      Complex complex6 = complex3.exp();
      complex6.I.add(complex2);
      complex1.ZERO.multiply(7);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.conjugate();
      Complex complex1 = complex0.divide((-947.277));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.0, 20.0);
      Complex complex2 = Complex.valueOf(2442.912655, 5.333371443528904E204);
      complex2.sqrt1z();
      complex2.conjugate();
      complex1.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      complex2.asin();
      complex1.createComplex((-1.0), 2146.455307644133);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-5670.31120379142));
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.multiply((-151));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(20.0);
      complex1.conjugate();
      Complex complex2 = Complex.ZERO;
      complex0.cos();
      Complex complex3 = complex0.createComplex((-947.277), (-947.277));
      Complex complex4 = complex3.tan();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-789), 2141.5597);
      Complex complex1 = Complex.valueOf((double) (-789), (double) (-789));
      complex1.ONE.sqrt1z();
      Complex complex2 = complex1.ZERO.conjugate();
      complex0.sin();
      try { 
        complex2.nthRoot((-789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -789
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.divide((-947.277));
      complex0.multiply(17);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(5916.509403193298);
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex.valueOf((-20.0));
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.subtract((-20.0));
      complex1.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex.valueOf((-20.0));
      complex1.toString();
      Complex complex3 = complex1.reciprocal();
      complex1.multiply((-1.0));
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.conjugate();
      Complex complex1 = new Complex(6.131094170752636E189);
      complex1.cos();
      complex0.nthRoot(965);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.cos();
      complex3.tan();
      Complex complex5 = new Complex(0.0, (-2561.43677));
      complex5.isNaN();
      complex3.multiply(complex0);
      Complex complex6 = Complex.ZERO;
      complex6.sqrt1z();
      complex2.add(complex3);
      complex4.conjugate();
      complex3.asin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.valueOf(1.2790195941925049, 1.2790195941925049);
      Complex complex2 = complex1.subtract(1.2790195941925049);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.cos();
      complex2.tan();
      complex2.abs();
      Complex complex6 = new Complex(1.2790195941925049);
      complex5.pow(complex3);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.isNaN();
      Complex complex3 = complex2.add(Double.NaN);
      complex3.abs();
      complex3.getField();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex complex4 = complex2.multiply((-3810.168));
      complex1.toString();
      Complex complex5 = Complex.ZERO;
      complex5.reciprocal();
      complex4.nthRoot(849);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356, 5916.50934);
      Complex complex1 = complex0.sqrt1z();
      complex0.hashCode();
      complex1.getArgument();
      Complex complex2 = complex1.sin();
      complex2.equals((Object) null);
      complex1.hashCode();
      complex1.asin();
      complex0.getField();
      Complex complex3 = Complex.valueOf((-3566.81));
      complex3.toString();
      Complex complex4 = complex1.reciprocal();
      complex4.multiply(3436.2346938318356);
      complex4.toString();
      complex0.createComplex((-3750.375016184811), 2615.5636);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(663.03502);
      complex0.ZERO.abs();
      complex0.INF.readResolve();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.NaN.multiply((-908.72902));
      Complex complex5 = complex4.I.add(0.0);
      complex5.ONE.tan();
      complex5.ONE.hashCode();
      complex3.ONE.abs();
      Complex complex6 = complex2.ONE.multiply(961);
      complex6.ONE.exp();
      Complex complex7 = complex3.acos();
      complex0.INF.asin();
      Complex.valueOf(0.0, (-1051.07));
      Complex complex8 = complex2.divide(complex3);
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex6.pow(0.0);
      complex9.multiply(0.0);
      complex9.nthRoot(961);
      complex10.acos();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1911.04776, (-3697.03511829158));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(complex0);
      complex1.toString();
      complex1.getArgument();
      complex0.getField();
      complex0.acos();
      Complex complex3 = complex2.asin();
      Complex complex4 = new Complex(2262.5954181467023);
      Complex complex5 = complex4.tanh();
      complex3.multiply((-3697.03511829158));
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex2.asin();
      complex5.pow(complex7);
      complex5.atan();
      Complex complex8 = complex6.cosh();
      complex3.getField();
      complex8.exp();
      complex3.exp();
      Complex complex9 = Complex.NaN;
      complex1.toString();
      complex8.cos();
      complex0.multiply(1267);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-120.96659));
      Complex complex2 = new Complex((-120.96659));
      complex2.sinh();
      Complex complex3 = Complex.valueOf((-120.96659), (-120.96659));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = new Complex(950.4324362);
      complex5.toString();
      complex5.getArgument();
      complex4.getField();
      Complex complex6 = complex0.acos();
      complex6.asin();
      Complex complex7 = Complex.INF;
      complex7.tanh();
      complex4.multiply((-120.96659));
      Complex complex8 = complex3.pow(complex6);
      Complex complex9 = Complex.valueOf((-120.96659));
      complex9.asin();
      Complex complex10 = Complex.I;
      Complex complex11 = complex8.pow(complex10);
      Complex complex12 = complex2.atan();
      complex10.divide((-701.204));
      complex12.cosh();
      complex1.getField();
      complex3.exp();
      Complex complex13 = complex11.exp();
      complex13.NaN.sinh();
      Complex complex14 = Complex.NaN;
      complex3.toString();
      complex6.cos();
      complex6.multiply(46);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.113946677051906E252, 3.21524291478425E7);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.add((-1771.6));
      complex0.toString();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex((-1.1109834472051523E-8), 2.113946677051906E252);
      complex5.divide(complex3);
      Complex complex6 = Complex.valueOf((-2444.06060747));
      complex3.multiply(complex4);
      Complex complex7 = Complex.valueOf((-20.0));
      complex7.hashCode();
      complex3.add(complex4);
      complex6.sqrt();
      complex1.createComplex(805.0, (-4038.0382706068344));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356);
      Complex complex1 = new Complex(1804, 3436.2346938318356);
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf((double) 1804);
      complex2.isNaN();
      Complex complex4 = complex1.ZERO.add((double) 1804);
      complex1.abs();
      complex4.equals(complex1);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.I;
      Object object0 = complex7.readResolve();
      complex6.equals(object0);
      Complex complex8 = complex7.multiply(3880.9953454099336);
      Complex.valueOf(2.5187968110874885E-38, (-4873.249564529));
      complex3.hashCode();
      Complex complex9 = new Complex((-3.726946038150935E-291), (-3.726946038150935E-291));
      complex2.tanh();
      complex0.reciprocal();
      complex8.nthRoot(964);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      complex1.I.nthRoot(127);
      complex1.NaN.getArgument();
      Complex complex2 = complex0.subtract((-330.561));
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((double) 127);
      Complex complex4 = complex3.tan();
      complex0.toString();
      Complex complex5 = complex4.sin();
      complex0.ZERO.divide(3436.2346938318356);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex0.ZERO.add(complex5);
      Complex complex9 = complex7.I.asin();
      Complex complex10 = complex0.createComplex((-330.561), 2030.974245041);
      complex4.ZERO.tanh();
      Complex complex11 = complex10.INF.subtract(complex8);
      complex11.ZERO.multiply(127);
      complex9.getArgument();
      Complex complex12 = complex6.atan();
      complex12.cos();
      complex7.divide(complex10);
      Complex complex13 = Complex.valueOf(712.765984748);
      complex13.ZERO.nthRoot(127);
      complex1.readResolve();
      complex3.log();
      complex9.acos();
      complex4.conjugate();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356, 5916.50934);
      Complex complex1 = complex0.sqrt1z();
      complex0.divide(complex1);
      Complex complex2 = complex0.cosh();
      complex1.pow(5916.50934);
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.835454246739619E-8), (-3.835454246739619E-8));
      Complex complex1 = new Complex((-2633.3806447), (-3.835454246739619E-8));
      complex1.I.createComplex(Double.POSITIVE_INFINITY, (-549.0));
      Complex complex2 = complex1.ZERO.cosh();
      complex2.ZERO.tan();
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex3.hashCode();
      complex0.INF.getField();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.add(complex0);
      Complex complex6 = complex0.multiply(complex4);
      complex5.I.getArgument();
      Complex complex7 = complex4.ZERO.conjugate();
      complex4.NaN.sinh();
      Complex complex8 = complex5.ONE.createComplex(1504.57377910426, 1504.57377910426);
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex0.divide((-3.835454246739619E-8));
      complex10.ONE.acos();
      Complex complex11 = complex7.ZERO.sqrt1z();
      complex5.reciprocal();
      Complex complex12 = complex0.exp();
      complex12.multiply(3995);
      complex5.createComplex((-6288.87431309405), 6.283185307179586);
      complex7.divide(0.9999999999999981);
      complex8.equals(complex9);
      Complex complex13 = complex6.tan();
      complex4.tanh();
      complex13.subtract(1504.57377910426);
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.log();
      Complex complex2 = complex1.subtract((-20.0));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.I;
      complex2.tan();
      complex2.abs();
      Complex complex5 = new Complex(20.0);
      complex3.abs();
      complex5.divide((-913.8418677533195));
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356);
      Complex complex1 = new Complex((-1.5700577174464625), (-1.5700577174464625));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.cos();
      complex0.tan();
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.cos();
      complex3.tan();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, (-2561.43677));
      complex5.isNaN();
      complex3.multiply(complex0);
      Complex complex6 = Complex.ZERO;
      complex6.sqrt1z();
      complex2.add(complex3);
      complex4.conjugate();
      complex3.asin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.INF.abs();
      complex0.ONE.hashCode();
      complex0.I.getArgument();
      complex0.INF.sin();
      complex0.equals(complex1);
      complex0.hashCode();
      Complex complex2 = complex0.I.asin();
      complex0.getField();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.toString();
      complex1.reciprocal();
      complex3.multiply(1.5707963267948966);
      complex2.toString();
      complex2.createComplex(0.0, (-5403.8849049));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.createComplex(Double.NaN, (-1.0074984709952582E-234));
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf((-889.21716863106));
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex5 = new Complex(56.7587194511836, 56.7587194511836);
      complex5.pow(complex2);
      Complex complex6 = complex1.atan();
      complex4.equals(complex0);
      Complex complex7 = complex0.multiply((-1.0));
      Complex complex8 = Complex.valueOf((-3148.163464833866), 2961.03190074);
      complex8.INF.add((-224.433));
      complex0.hashCode();
      complex7.INF.sqrt1z();
      Complex complex9 = new Complex((-4873.249564529), 0.35471993684768677);
      complex6.tanh();
      complex7.reciprocal();
      complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1920.12702), (-1920.12702));
      complex0.log();
      Complex complex2 = complex1.subtract((-1920.12702));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.I;
      complex4.cos();
      complex2.tan();
      complex2.abs();
      Complex complex5 = new Complex(1920.12702);
      complex3.abs();
      complex5.divide((-913.8418677533195));
      Complex.valueOf((-1920.12702));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex.valueOf((-1890.521614), 2.5286958775281306E-8);
      double double0 = (-0.2499999997677497);
      Complex complex0 = Complex.valueOf((-1890.521614));
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(20.0);
      complex0.sqrt();
      Complex complex2 = complex1.sqrt();
      complex2.hashCode();
      Complex complex3 = Complex.ZERO;
      complex3.sqrt();
      complex2.createComplex(3021.3560112, 0.0);
      // Undeclared exception!
      complex2.nthRoot(952355861);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(2262.5954181467023);
      Complex complex1 = complex0.sinh();
      complex1.abs();
      Complex complex2 = complex0.asin();
      complex1.getImaginary();
      Complex complex3 = new Complex(Double.NaN);
      complex3.multiply(1.6231601238250732);
      complex3.multiply(1.0);
      Complex complex4 = Complex.valueOf(2.5286958775281306E-8, (-3911.85));
      Complex complex5 = complex2.divide(complex4);
      complex5.toString();
      complex2.getField();
      complex2.reciprocal();
      Complex complex6 = new Complex(2.0);
      complex6.subtract(1.182947553294933E7);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 20.0);
      Complex complex2 = complex0.add(92.0);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.add(1.2790195941925049);
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex0.createComplex(20.0, 1.2790195941925049);
      complex1.isInfinite();
      complex5.pow(complex3);
      complex2.getReal();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.cos();
      complex0.multiply(complex8);
      complex5.subtract(92.0);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.ONE.hashCode();
      complex0.I.getArgument();
      Complex complex2 = complex0.INF.sin();
      complex0.equals(complex1);
      complex0.hashCode();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex0.createComplex(0.0, 682.0);
      Complex complex6 = Complex.NaN;
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex7 = complex4.pow(complex5);
      complex7.atan();
      complex6.equals(complex4);
      complex2.multiply(1.0);
      Complex.valueOf(4.0058349389318626E-10, 1.5707963267948966);
      complex0.hashCode();
      Complex complex8 = complex2.tanh();
      complex7.reciprocal();
      complex8.nthRoot(964);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      complex0.ONE.hashCode();
      complex0.I.getArgument();
      complex0.INF.sin();
      complex0.equals(object0);
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.createComplex(712.765984748, 712.765984748);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.valueOf((-1.0));
      complex5.equals(complex4);
      Complex complex6 = complex3.pow(complex4);
      Complex complex7 = complex1.atan();
      complex1.equals(complex6);
      complex1.multiply((-4873.249564529));
      Complex.valueOf(1.0, 1.4655652424334198);
      complex3.hashCode();
      Complex complex8 = new Complex(1.5707963267948966, 1.908818244934082);
      complex8.tanh();
      complex3.reciprocal();
      complex7.nthRoot(964);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356);
      Complex complex1 = complex0.ONE.multiply(1804);
      complex0.sinh();
      Complex complex2 = Complex.valueOf((double) 1804);
      complex2.isNaN();
      complex1.getField();
      complex1.hashCode();
      Complex complex3 = Complex.valueOf((double) 1804);
      Complex complex4 = Complex.ONE;
      complex4.sqrt();
      complex2.sqrt();
      complex3.hashCode();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.createComplex(1162.826, (-3384.83516690685));
      complex4.nthRoot(1804);
      complex6.getArgument();
      Complex complex7 = complex2.multiply((-4270.76716));
      complex3.getReal();
      complex2.isInfinite();
      complex7.tanh();
      complex1.exp();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356);
      Complex complex1 = complex0.ONE.multiply(1804);
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf((double) 1804);
      complex3.isNaN();
      complex1.ZERO.add((double) 1804);
      complex1.abs();
      complex1.getField();
      Complex complex4 = Complex.valueOf(3436.2346938318356);
      complex4.INF.toString();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.sinh();
      complex0.abs();
      Complex complex7 = complex1.asin();
      complex2.getImaginary();
      complex7.ONE.multiply(1.0);
      Complex complex8 = complex2.multiply((-500.8967818));
      complex8.ZERO.conjugate();
      Complex complex9 = complex0.divide(complex7);
      complex0.ONE.sqrt1z();
      complex9.toString();
      complex1.ONE.getField();
      complex3.reciprocal();
      complex6.divide(Double.NaN);
      complex7.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(2262.5954181467023);
      Complex complex1 = complex0.ONE.multiply((-1353.8954256021952));
      Complex complex2 = Complex.valueOf(Double.NaN, (-1353.8954256021952));
      Complex complex3 = complex1.multiply(1353.8954256021952);
      complex3.subtract(complex2);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex0.tanh();
      complex1.multiply((-2590.816002331542));
      complex1.cos();
      complex6.createComplex(3976044.8973433585, (-1252.89102));
      complex4.abs();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-5670.31120379142));
      Complex complex1 = new Complex((-5670.31120379142));
      complex0.I.sinh();
      Complex complex2 = complex0.multiply(complex1);
      complex0.NaN.toString();
      complex0.getArgument();
      complex2.getField();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.asin();
      complex0.ONE.tanh();
      Complex complex5 = complex1.multiply((-701.204));
      complex5.pow(complex0);
      complex1.asin();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex6.ONE.atan();
      complex7.divide(3.141592653589793);
      Complex complex8 = complex6.cosh();
      complex8.NaN.getField();
      complex4.exp();
      complex4.exp();
      Complex complex9 = Complex.NaN;
      complex9.toString();
      Complex complex10 = complex8.divide((-5670.31120379142));
      complex10.createComplex(4.247240125405735E-8, (-2.19717006713618E-8));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.valueOf(1.2790195941925049, 1.2790195941925049);
      complex0.log();
      Complex complex2 = complex1.subtract(1.2790195941925049);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.ZERO;
      complex4.cos();
      complex2.tan();
      complex2.abs();
      Complex complex5 = new Complex(1.2790195941925049);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(2.5286958775281306E-8, 0.0);
      Complex.valueOf((-0.2499999997677497));
      complex0.getField();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(22.83879660133548);
      complex2.I.sqrt();
      Complex complex3 = complex1.cos();
      complex0.log();
      complex0.atan();
      Complex complex4 = new Complex((-0.2499999997677497), 0.0);
      complex3.nthRoot(7);
      complex4.isNaN();
      Complex complex5 = new Complex((-864.44037244281), 2.5286958775281306E-8);
      complex5.multiply(complex1);
      complex0.sqrt1z();
      complex2.add(complex0);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.tan();
      complex1.abs();
      complex0.pow(complex3);
      Complex complex5 = Complex.NaN;
      complex5.add(complex3);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356);
      Complex complex1 = complex0.ONE.multiply(1804);
      Complex complex2 = complex0.sinh();
      complex2.I.multiply(367);
      Complex complex3 = Complex.valueOf((double) 1804);
      complex3.isNaN();
      Complex complex4 = complex1.ZERO.add((double) 1804);
      complex1.abs();
      complex1.getField();
      Complex complex5 = Complex.valueOf(3436.2346938318356);
      complex5.INF.toString();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex6.sinh();
      complex0.abs();
      Complex complex8 = complex1.asin();
      complex8.pow(complex7);
      complex4.atan();
      complex3.equals("(Infinity, Infinity)");
      Complex complex9 = complex0.multiply(1804.0);
      Complex.valueOf((-1328.588471233891), (-1703.96));
      complex5.hashCode();
      complex9.tanh();
      complex8.reciprocal();
      complex0.nthRoot(1804);
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ONE.subtract((-20.0));
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.NaN.conjugate();
      Complex.valueOf((-2953.81419));
      complex6.I.divide(complex1);
      Complex.valueOf(20.0, 20.0);
      Complex complex7 = complex5.I.add(0.0);
      complex7.I.negate();
      Complex complex8 = complex3.add((-20.0));
      complex0.getImaginary();
      Complex complex9 = complex0.subtract(complex1);
      complex2.createComplex(540.629000099, 0.0);
      complex5.reciprocal();
      complex6.pow(complex0);
      complex8.getReal();
      complex3.log();
      complex9.cos();
      complex6.createComplex(0.0, (-422.3331));
      complex8.abs();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex0.getReal();
      Complex complex2 = complex1.sinh();
      complex2.NaN.atan();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex2.I.divide(1334.4646);
      complex4.NaN.negate();
      Complex complex5 = complex2.ZERO.multiply(3390.0288639);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.pow(Double.NaN);
      complex8.tanh();
      complex8.I.hashCode();
      complex7.sin();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = Complex.valueOf(3390.0288639, 3390.0288639);
      complex9.INF.createComplex(3430.2432, Double.NaN);
      complex9.ONE.multiply(complex5);
      complex8.multiply(complex6);
      complex0.createComplex(729.589369025, 3390.0288639);
      complex9.getImaginary();
      complex10.toString();
      complex1.add(0.12384103238582611);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-855.62), (-855.62));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.subtract(0.0);
      Complex complex4 = complex3.I.add(complex0);
      Complex.valueOf(329.0, (-855.62));
      complex3.NaN.subtract((-855.62));
      Complex complex5 = complex4.INF.sin();
      complex1.asin();
      complex1.toString();
      complex5.ONE.add(complex2);
      complex3.equals("(-1.5702119550950415, -5.843714337788426E-4)");
      complex3.acos();
      Complex complex6 = complex5.NaN.multiply(1072);
      complex5.I.abs();
      complex2.isNaN();
      complex5.divide(0.0);
      complex6.INF.abs();
      complex4.tan();
      complex5.tan();
      complex6.sin();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      complex0.ONE.hashCode();
      complex0.I.getArgument();
      complex0.INF.sin();
      complex0.equals(object0);
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      complex1.I.subtract(complex0);
      complex1.ONE.createComplex(1.0, 0.0);
      Complex complex2 = Complex.NaN;
      complex0.equals(complex2);
      complex2.I.pow(complex1);
      Complex complex3 = complex2.atan();
      complex3.equals(object0);
      complex2.multiply(0.0);
      Complex complex4 = Complex.valueOf(0.0, 1.5707963267948966);
      complex4.INF.hashCode();
      complex4.tanh();
      complex2.reciprocal();
      complex0.nthRoot(964);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.sin();
      complex2.hashCode();
      complex0.INF.nthRoot(1783);
      Complex complex3 = complex0.sqrt();
      complex2.INF.readResolve();
      complex3.INF.toString();
      complex3.getImaginary();
      complex0.getReal();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.ONE.exp();
      complex4.ONE.toString();
      complex2.hashCode();
      complex4.isNaN();
      Complex.valueOf((double) 1783);
      Complex complex6 = complex3.sin();
      complex6.asin();
      complex3.isInfinite();
      complex4.multiply(Double.NaN);
      complex2.divide(complex3);
      Complex complex7 = complex3.tan();
      Complex.valueOf(415.18, 1.129833459854126);
      Complex complex8 = Complex.valueOf(3.071569248856111E-202, Double.NaN);
      complex8.INF.pow(complex7);
      complex4.sinh();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(155.75360445, 271.6);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.ZERO.divide(271.6);
      complex0.ZERO.subtract(complex1);
      Complex.valueOf(155.75360445, 3715.8642);
      Complex complex4 = complex0.asin();
      complex2.add(complex4);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1456.1598);
      Complex complex1 = Complex.INF;
      complex1.NaN.tanh();
      Complex complex2 = Complex.valueOf((-156.29978));
      Complex complex3 = complex0.multiply(complex1);
      complex0.hashCode();
      complex1.add(complex2);
      complex2.sqrt();
      complex3.createComplex(3529.19241, 3529.19241);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ONE.subtract((-20.0));
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.sqrt1z();
      complex4.ONE.getArgument();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.NaN.conjugate();
      Complex.valueOf((-2953.81419));
      complex6.I.divide(complex1);
      Complex complex7 = Complex.valueOf(20.0, 20.0);
      Complex complex8 = complex5.I.add(0.0);
      complex8.I.negate();
      Complex complex9 = complex3.add((-20.0));
      complex0.getImaginary();
      Complex complex10 = complex0.subtract(complex1);
      complex2.createComplex(540.629000099, 0.0);
      complex5.reciprocal();
      complex9.isInfinite();
      complex6.pow(complex0);
      complex9.getReal();
      Complex complex11 = complex3.log();
      complex10.cos();
      complex2.multiply(complex7);
      complex9.subtract((-2953.81419));
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-5670.31120379142));
      Complex complex1 = new Complex((-5670.31120379142));
      complex0.I.sinh();
      Complex complex2 = complex0.multiply(complex1);
      complex0.NaN.toString();
      complex0.getArgument();
      complex2.getField();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.asin();
      complex0.ONE.tanh();
      Complex complex5 = complex1.multiply((-701.204));
      complex5.pow(complex0);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex7.ONE.atan();
      complex8.divide(3.141592653589793);
      Complex complex9 = complex7.cosh();
      complex9.NaN.getField();
      complex4.exp();
      complex4.exp();
      Complex.valueOf((-5670.31120379142), 4.247240125405735E-8);
      complex7.ONE.multiply(0.0);
      complex2.subtract(complex6);
      complex5.INF.add(complex7);
      Complex complex10 = complex3.divide(complex5);
      complex10.INF.tanh();
      Complex complex11 = complex10.multiply(4.247240125405735E-8);
      complex11.cos();
      complex3.createComplex((-3453.822), 3.141592653589793);
      complex5.abs();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.log();
      complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.cos();
      complex2.tan();
      complex2.abs();
      complex0.pow(complex3);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.exp();
      Complex complex1 = complex0.add((-218.7));
      complex1.ONE.toString();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = Complex.INF;
      complex2.I.divide(complex3);
      Complex complex4 = complex2.INF.cos();
      complex4.INF.log();
      complex0.ONE.atan();
      complex1.I.sqrt1z();
      try { 
        complex1.nthRoot((-190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -190
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1462.8, 0.4818955063819885);
      Complex complex1 = Complex.valueOf(1462.8, (-1340.3676));
      complex1.ZERO.divide(0.0);
      Complex complex2 = Complex.valueOf((-5.617718879466363E-299), 0.0);
      complex2.INF.multiply(1123);
      Complex complex3 = new Complex(0.0, 1462.8);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.add(complex3);
      complex5.getField();
      complex3.getArgument();
      Complex complex6 = complex4.negate();
      complex6.NaN.multiply(2197.0);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex5.tan();
      complex8.INF.atan();
      Complex complex9 = complex0.tanh();
      complex9.ZERO.atan();
      Complex.valueOf((-5.617718879466363E-299), (-5.617718879466363E-299));
      complex5.abs();
      complex7.toString();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.atan();
      complex1.cos();
      complex0.I.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.add(complex0);
      complex3.ZERO.add((-207.7524718381));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex5.INF.exp();
      Complex complex9 = complex8.NaN.pow(0.0);
      Complex complex10 = complex9.INF.negate();
      complex4.isInfinite();
      complex8.ZERO.cosh();
      Complex complex11 = complex4.multiply(complex7);
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex12.negate();
      complex13.INF.asin();
      complex0.tan();
      complex7.isInfinite();
      complex11.sqrt1z();
      complex10.toString();
      Complex.valueOf((-578.14001248), (-733.8566624));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.2346938318356);
      Complex complex1 = complex0.ONE.multiply(1804);
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf((double) 1804);
      complex3.isNaN();
      complex1.ZERO.add((double) 1804);
      complex1.abs();
      complex1.getField();
      Complex complex4 = Complex.valueOf(3436.2346938318356);
      complex4.INF.toString();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.sinh();
      complex0.abs();
      Complex complex7 = complex1.asin();
      complex2.getImaginary();
      complex7.ONE.multiply(1.0);
      complex2.multiply((-500.8967818));
      Complex complex8 = complex0.divide(complex7);
      complex0.ONE.sqrt1z();
      complex8.toString();
      complex1.ONE.getField();
      complex3.reciprocal();
      complex7.subtract(Double.NaN);
      complex6.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply(357);
      Complex.valueOf((double) 357, (-2393.754758705853));
      complex1.INF.pow(complex0);
      complex1.NaN.log();
      Complex complex2 = complex0.INF.multiply((-497));
      complex2.ZERO.asin();
      complex2.I.sqrt();
      Complex complex3 = complex0.createComplex((-299.27291254), (-299.27291254));
      Complex complex4 = complex3.tan();
      complex4.ZERO.toString();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-1441.181329633156));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.multiply(252);
      complex2.NaN.subtract(complex0);
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex1.ZERO.log();
      Complex complex6 = complex5.I.tanh();
      complex0.ONE.sqrt1z();
      Complex complex7 = complex5.I.negate();
      Complex complex8 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex9 = complex8.multiply(complex0);
      complex9.I.getArgument();
      Complex complex10 = complex8.cos();
      complex10.NaN.multiply((-1441.181329633156));
      complex0.isInfinite();
      Complex.valueOf((-1441.181329633156));
      Complex complex11 = Complex.valueOf((-1441.181329633156));
      complex11.I.multiply(0.0);
      complex6.NaN.tanh();
      complex4.isNaN();
      complex6.divide(complex11);
      complex7.subtract(complex5);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(2327.1, 0.0);
      complex1.getField();
      complex1.ZERO.getField();
      complex0.subtract(complex1);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.add(complex2);
      complex3.hashCode();
      Complex complex4 = complex2.pow(complex1);
      complex4.divide((-1695.28));
      Complex complex5 = complex2.subtract(complex0);
      complex1.NaN.sinh();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex6.conjugate();
      complex8.INF.negate();
      complex7.NaN.acos();
      complex8.reciprocal();
      complex8.pow(complex3);
      complex6.NaN.divide(complex7);
      complex3.toString();
      complex6.getReal();
      Complex complex9 = Complex.ONE;
      complex5.pow(complex9);
      complex4.asin();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      complex0.NaN.readResolve();
      complex0.ZERO.nthRoot(1);
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.add((double) 1);
      Complex complex4 = complex2.ONE.tan();
      Complex complex5 = complex2.INF.asin();
      Complex complex6 = complex2.NaN.log();
      Complex complex7 = complex0.INF.log();
      complex6.NaN.cosh();
      complex6.I.subtract(complex0);
      Complex complex8 = complex5.NaN.acos();
      complex0.ONE.tanh();
      Complex complex9 = complex2.multiply((-250));
      Complex complex10 = complex9.ZERO.sqrt();
      complex3.getArgument();
      complex5.isNaN();
      Complex complex11 = Complex.valueOf((double) (-250));
      complex11.ONE.getArgument();
      complex5.equals(complex4);
      complex1.hashCode();
      complex0.subtract((double) (-250));
      complex6.createComplex(4.466959125843237E-8, (-797.4326749342));
      complex7.isNaN();
      complex8.equals("vmzT, @leKu&*#yD@>3");
      Object object0 = new Object();
      complex10.equals(object0);
      complex10.nthRoot(331);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-1989));
      Complex complex2 = complex1.INF.multiply((-1929.008717416));
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex1.INF.multiply((double) (-1989));
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.sqrt1z();
      complex6.I.asin();
      complex5.INF.toString();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.sin();
      complex8.INF.getArgument();
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex9.I.divide((double) (-1989));
      complex4.getImaginary();
      complex1.hashCode();
      complex3.cos();
      complex3.atan();
      complex7.tan();
      complex2.cosh();
      complex9.sinh();
      complex10.pow((-1.3210039516811888E-8));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      complex1.tanh();
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.676321029663086, 0.0);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ONE.add(complex2);
      complex0.abs();
      Complex complex4 = complex0.I.sqrt();
      complex0.ONE.conjugate();
      complex4.I.add(complex0);
      complex0.multiply(988.877);
      complex1.ONE.divide(988.877);
      complex0.tan();
      Complex complex5 = complex0.divide(complex4);
      complex1.pow(complex5);
      Complex complex6 = complex4.atan();
      complex6.ZERO.getArgument();
      Complex complex7 = complex6.ONE.tanh();
      complex1.log();
      Complex complex8 = complex1.negate();
      complex3.ONE.add(complex6);
      complex0.getReal();
      complex4.isInfinite();
      complex3.sqrt1z();
      complex7.acos();
      complex8.getArgument();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2569.3967261), 1791.643);
      complex0.NaN.hashCode();
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.nthRoot(1);
      complex0.getField();
      Complex complex3 = Complex.valueOf(1791.643);
      complex3.ONE.multiply(complex1);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.add(complex2);
      Complex complex7 = complex4.divide((-2569.3967261));
      complex3.I.sqrt1z();
      Complex complex8 = complex5.multiply((-2569.3967261));
      complex0.readResolve();
      complex5.subtract(841.2960433888);
      complex7.asin();
      Complex complex9 = complex8.divide(0.0);
      Complex complex10 = complex8.conjugate();
      complex10.ONE.getArgument();
      complex7.pow(0.0);
      complex7.subtract(1185.9203);
      complex6.sinh();
      complex9.atan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(2.5286958775281306E-8, 0.0);
      Complex.valueOf((-0.2499999997677497));
      complex0.getField();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.I.sqrt();
      Complex complex3 = complex2.ONE.sqrt();
      complex3.hashCode();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex3.ONE.createComplex(321.2493056, (-3384.83516690685));
      complex1.nthRoot(17);
      complex4.getArgument();
      Complex complex6 = complex3.multiply(0.0);
      complex5.getReal();
      complex0.isInfinite();
      complex3.tanh();
      complex5.exp();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2113.135297968192), (-2113.135297968192));
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.INF.sin();
      complex0.ZERO.exp();
      complex2.multiply((-1057));
      Complex complex3 = complex2.ONE.atan();
      complex3.ONE.toString();
      complex3.ONE.abs();
      Complex complex4 = complex3.I.sinh();
      complex0.INF.subtract(complex4);
      Complex complex5 = complex0.pow((-1520.48));
      Complex complex6 = complex0.pow(complex5);
      complex6.cos();
      complex2.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3818.3298919));
      Complex complex1 = complex0.asin();
      complex0.I.pow(complex1);
      Complex complex2 = complex0.ZERO.sinh();
      complex2.ONE.hashCode();
      complex1.abs();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = complex4.INF.divide(0.0);
      Complex complex6 = Complex.valueOf((-3818.3298919));
      complex0.nthRoot(2836);
      complex1.getArgument();
      Complex complex7 = complex3.divide(complex0);
      Complex complex8 = complex7.INF.negate();
      complex8.ZERO.createComplex(5.7455368446308694E197, 0.0);
      complex6.equals(complex1);
      complex3.divide(complex7);
      complex8.tanh();
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.NaN.exp();
      complex4.ZERO.abs();
      complex4.INF.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      complex3.I.readResolve();
      complex5.NaN.multiply(complex0);
      Complex complex6 = complex5.INF.cosh();
      complex6.ONE.readResolve();
      Complex complex7 = complex2.negate();
      complex0.multiply(complex2);
      complex1.hashCode();
      complex7.negate();
      complex4.getField();
      complex4.readResolve();
      Complex complex8 = complex2.divide(complex7);
      complex6.reciprocal();
      complex1.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      try { 
        complex2.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(56.7587194511836, 0.0);
      complex0.multiply((-3.219119568928366E-9));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-553.506042823));
      complex0.cos();
      complex0.I.multiply(830);
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
      complex1.getImaginary();
      complex1.NaN.multiply(0);
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.tan();
      complex0.multiply(complex1);
      Complex complex2 = complex1.ONE.pow(0.33675122261047363);
      complex2.NaN.nthRoot(1900);
      Complex complex3 = complex1.INF.sinh();
      complex3.NaN.atan();
      try { 
        complex3.ZERO.nthRoot((-590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -590
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.840064709376958E-194, (-735.979664941472));
      complex0.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      complex2.ZERO.tan();
      Complex complex3 = complex2.subtract(732.8311488);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.multiply(20.0);
      Complex complex7 = complex6.ONE.multiply(complex0);
      Complex complex8 = complex7.ONE.pow(0.0);
      complex8.NaN.log();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.I.acos();
      complex10.INF.readResolve();
      complex9.I.log();
      complex4.subtract(complex0);
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex0.cosh();
      complex12.isInfinite();
      Complex.valueOf(1321.386290202);
      Complex complex13 = complex12.conjugate();
      complex13.NaN.abs();
      Complex complex14 = complex1.INF.divide(complex11);
      complex14.I.sqrt1z();
      complex9.isNaN();
      Complex complex15 = Complex.INF;
      complex1.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex.valueOf(0.0, 3968.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ONE.pow(complex1);
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex2.abs();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = Complex.valueOf(1.8508157176809255, 3968.0);
      Complex complex7 = Complex.valueOf(1.8508157176809255, 67.446564017);
      complex7.getArgument();
      complex7.hashCode();
      Complex complex8 = complex1.ONE.createComplex(1.8508157176809255, 1.8508157176809255);
      Complex complex9 = Complex.valueOf(1911.571358);
      Complex complex10 = complex9.ZERO.add(complex7);
      Complex complex11 = complex1.multiply(1);
      complex1.reciprocal();
      complex10.subtract(complex8);
      Complex complex12 = complex5.tan();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(6.334119167042189, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      Complex complex13 = complex3.conjugate();
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex13.equals((Object)complex3));
      assertEquals(1.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex11.reciprocal();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertEquals(1.8508157176809255, complex14.getReal(), 0.01);
      
      Complex complex15 = complex6.divide(67.446564017);
      Complex complex16 = complex15.asin();
      assertEquals(4.6636801246010314E-4, complex16.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.reciprocal();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.conjugate();
      assertFalse(complex4.isInfinite());
      assertEquals(2.4785912770698397, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1252.893308544563);
      Complex complex1 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.pow((-629.724751));
      complex0.isNaN();
      List<Complex> list0 = complex1.nthRoot(179);
      assertTrue(complex1.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(list0.contains(complex3));
      assertEquals(1, list0.size());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      
      Complex complex4 = complex3.createComplex((-1.0), 179);
      Complex complex5 = complex4.tan();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex2.ONE.add(complex5);
      complex4.ZERO.cosh();
      Complex complex7 = complex0.INF.createComplex(1.6861720085144043, 0.0);
      Complex complex8 = complex7.INF.pow(complex2);
      Complex complex9 = complex0.acos();
      complex1.getArgument();
      complex2.readResolve();
      complex1.readResolve();
      Complex complex10 = complex3.sin();
      complex0.ONE.divide(0.0);
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex11.NaN.sqrt1z();
      Complex complex13 = complex9.createComplex(0.684319257736206, 6.283185307179586);
      complex13.I.subtract(0.0);
      assertSame(complex9, complex8);
      
      complex1.hashCode();
      Complex complex14 = complex10.tan();
      assertTrue(complex1.equals((Object)complex12));
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex14.getReal(), 0.01);
      assertTrue(complex10.equals((Object)complex6));
  }
}
