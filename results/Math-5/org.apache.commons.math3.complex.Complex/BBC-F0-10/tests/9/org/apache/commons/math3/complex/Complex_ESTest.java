/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:53:02 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0112214979786464E-43, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.nthRoot(1328);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tanh();
      complex3.NaN.sqrt1z();
      complex1.tanh();
      complex2.getField();
      Complex complex4 = Complex.NaN;
      complex2.sin();
      Complex complex5 = Complex.ONE;
      try { 
        complex5.nthRoot((-1072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,072
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      complex0.multiply(1064);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(429.1266513);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.divide(3.645589202313973E-8);
      Complex complex3 = complex2.ONE.add(complex0);
      complex0.cos();
      Complex complex4 = Complex.valueOf(429.1266513);
      Complex complex5 = complex0.cosh();
      complex5.INF.negate();
      complex4.nthRoot(1652);
      Complex complex6 = complex3.createComplex(729.43740779, 1652);
      complex6.NaN.subtract((double) 1652);
      Complex complex7 = complex5.log();
      complex7.I.cosh();
      complex5.toString();
      complex5.sqrt1z();
      Complex complex8 = complex5.multiply(1502);
      complex1.toString();
      complex8.subtract((double) 1652);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.sin();
      complex0.tan();
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-22.5390339933671));
      Complex complex1 = new Complex((-20.0));
      complex0.NaN.pow(complex1);
      complex0.NaN.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.sin();
      complex3.pow(complex0);
      complex2.tan();
      complex3.asin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ZERO.add(0.09761576354503632);
      complex0.ZERO.add(complex1);
      Complex complex3 = complex0.acos();
      complex3.INF.asin();
      complex0.ONE.getField();
      complex0.getReal();
      complex0.readResolve();
      complex0.abs();
      complex0.abs();
      complex0.hashCode();
      Complex complex4 = new Complex((-57.6106540194), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-22.5390339933671));
      Complex complex1 = complex0.NaN.conjugate();
      complex1.INF.sqrt1z();
      complex0.ONE.sin();
      Complex complex2 = complex0.tan();
      complex2.abs();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-23.738558132177353));
      Complex complex1 = complex0.multiply(1298);
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.41421356237309515, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex0.nthRoot(262);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-23.738558132177353), (-23.738558132177353));
      Complex complex1 = complex0.tan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(2762.1);
      complex1.readResolve();
      complex1.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex(2762.1, 1.0);
      Complex complex4 = complex3.pow(complex1);
      complex2.multiply(complex4);
      complex0.sinh();
      Complex complex5 = complex3.multiply(complex0);
      complex3.readResolve();
      Complex complex6 = Complex.ZERO;
      complex6.getField();
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.NaN.acos();
      Complex complex7 = complex5.exp();
      complex2.asin();
      complex1.sqrt();
      complex7.sqrt();
      Complex complex8 = Complex.ONE;
      complex8.atan();
      complex3.toString();
      Complex complex9 = Complex.NaN;
      complex7.nthRoot(1967);
      complex5.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = new Complex(23.738558132177353, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      complex1.createComplex(Double.POSITIVE_INFINITY, 1778.862);
      complex2.getField();
      Complex complex3 = Complex.I;
      Complex.valueOf(23.738558132177353, (-20.0));
      complex2.sqrt();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.NaN;
      complex5.ZERO.sqrt();
      complex5.conjugate();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex((-1421.1452705790819), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = Complex.valueOf((-1421.1452705790819));
      complex5.sqrt1z();
      Complex complex6 = complex3.tan();
      Complex complex7 = Complex.NaN;
      complex1.reciprocal();
      complex3.tan();
      Complex complex8 = new Complex((-8.268079863986927));
      Complex complex9 = complex4.subtract(complex3);
      Complex complex10 = complex6.tan();
      Complex.valueOf((-8.268079863986927));
      complex10.tanh();
      complex1.getArgument();
      complex3.multiply((-270.687));
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1078.5536881749));
      Complex complex2 = new Complex(698.0, (-1078.5536881749));
      complex2.acos();
      Complex complex3 = complex2.createComplex(0.0012777606440863565, (-1.0));
      complex1.getField();
      Complex complex4 = Complex.I;
      complex1.subtract(complex3);
      Complex complex5 = Complex.ONE;
      complex5.tan();
      Complex.valueOf(698.0);
      complex1.tanh();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex.valueOf(2748.52);
      Complex complex1 = Complex.valueOf((-2110.287758438516));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.asin();
      Complex complex5 = new Complex(178.8668027, 3542.1879868443093);
      Complex complex6 = complex5.cosh();
      complex6.ONE.divide(178.8668027);
      complex3.nthRoot(37);
      complex3.abs();
      Complex complex7 = complex4.createComplex(2098.059089658567, 20.0);
      complex3.getField();
      complex7.subtract(complex1);
      complex7.tan();
      Complex.valueOf(2207.16680684);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex((-1421.1452705790819), Double.POSITIVE_INFINITY);
      complex3.subtract(complex2);
      Complex complex4 = Complex.valueOf((-1421.1452705790819));
      complex4.sqrt1z();
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.NaN;
      complex1.createComplex((-1.642361029990822E65), 1.0);
      complex3.getField();
      try { 
        complex5.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(0.6471850872039795);
      complex2.tanh();
      complex0.reciprocal();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1079.5536881749, 1079.5536881749);
      complex1.multiply((-23.738558132177353));
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex((-1421.1452705790819), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = Complex.valueOf((-1421.1452705790819));
      complex5.sqrt1z();
      complex3.tan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.reciprocal();
      complex3.tan();
      Complex complex8 = new Complex((-8.268079863986927));
      complex8.cosh();
      complex7.getField();
      Complex complex9 = complex0.subtract(complex5);
      complex4.tan();
      Complex complex10 = complex7.divide((-1421.1452705790819));
      complex3.divide(complex6);
      complex4.readResolve();
      Complex.valueOf((-1421.1452705790819), 1150.0);
      complex8.getImaginary();
      complex10.multiply((-1518500250));
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex11.acos();
      complex9.getImaginary();
      complex9.multiply((-661));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(913.301957);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.tan();
      complex0.INF.multiply((-1907.0));
      Complex complex5 = complex3.multiply(592573071);
      Complex complex6 = complex5.I.pow(complex0);
      Complex complex7 = complex6.INF.add((double) 592573071);
      complex2.I.sinh();
      Complex complex8 = complex7.NaN.divide((-835.8069339346438));
      complex3.sinh();
      complex1.readResolve();
      Complex complex9 = complex5.conjugate();
      complex0.I.tan();
      complex1.divide(913.301957);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex9.multiply(913.301957);
      complex11.ONE.multiply((-1932.1887154569733));
      Complex complex12 = complex8.I.subtract(complex10);
      complex12.I.subtract((-14.58372211));
      Complex complex13 = complex4.subtract(20.0);
      complex2.multiply((-1932.1887154569733));
      complex2.pow(complex8);
      Complex complex14 = Complex.valueOf(Double.NaN);
      complex14.ZERO.divide(complex6);
      complex7.nthRoot(592573071);
      Complex complex15 = complex8.sinh();
      complex15.ZERO.subtract(complex13);
      Complex complex16 = complex9.acos();
      complex16.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(2076.268499037);
      Complex complex1 = complex0.I.tanh();
      complex0.toString();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ONE.multiply(817);
      complex3.NaN.sin();
      Complex.valueOf((double) 817, 2076.268499037);
      complex3.I.abs();
      complex0.NaN.tanh();
      complex1.equals(complex2);
      Complex complex4 = complex2.multiply(complex1);
      complex1.NaN.getArgument();
      complex4.INF.cos();
      complex0.NaN.acos();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = new Complex(817);
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex5.sinh();
      complex8.ZERO.sqrt();
      Complex complex9 = complex1.acos();
      complex9.INF.divide(2028.45273856254);
      complex8.abs();
      complex7.INF.getArgument();
      complex1.pow(complex6);
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.sqrt1z();
      complex0.INF.sqrt();
      Complex complex4 = Complex.valueOf((-1948.729204779491));
      Complex complex5 = complex4.acos();
      complex1.cosh();
      Complex complex6 = complex0.createComplex((-1289.0), (-4556.6341278));
      complex3.getField();
      complex3.subtract(complex2);
      complex5.tan();
      Complex complex7 = Complex.valueOf((-1289.0));
      Complex complex8 = complex6.sin();
      complex7.conjugate();
      complex8.divide((-1289.0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.tan();
      complex0.ZERO.hashCode();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.add((-1289.0));
      Object object0 = complex2.readResolve();
      complex2.hashCode();
      Complex complex5 = Complex.valueOf((-1289.0), (-1289.0));
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex3.multiply(complex6);
      Complex complex8 = complex7.sinh();
      complex3.multiply(complex8);
      complex5.readResolve();
      complex3.getField();
      complex0.equals(complex4);
      complex3.exp();
      Complex complex9 = complex4.asin();
      complex6.atan();
      object0.toString();
      complex9.createComplex((-5.295976637760759), (-1289.0));
      complex8.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex2.subtract(Double.NaN);
      Complex complex7 = complex3.add(complex5);
      Complex complex8 = Complex.ZERO;
      complex6.getField();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex6.createComplex((-733.6564023673551), (-6437.8162338));
      complex4.getField();
      complex7.subtract(complex3);
      Complex complex11 = new Complex(1409.39262, (-733.6564023673551));
      complex11.equals("MiuXwS9x&|P.}-J->Q");
      complex9.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.ZERO;
      complex0.divide(complex12);
      complex8.asin();
      complex4.sqrt();
      complex10.atan();
      complex1.toString();
      Complex complex13 = Complex.NaN;
      Complex complex14 = new Complex((-1316.7997450831465));
      try { 
        complex14.nthRoot((-2173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,173
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-7.877917738262007E-9));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.asin();
      complex2.ZERO.subtract(0.0);
      Complex complex4 = complex2.ZERO.add(complex0);
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex4.tan();
      complex5.hashCode();
      Complex complex9 = complex7.exp();
      complex8.asin();
      Complex complex10 = complex1.sqrt();
      complex7.atan();
      complex10.toString();
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ZERO;
      complex1.getImaginary();
      Complex complex3 = complex1.sinh();
      Complex complex4 = Complex.valueOf((-1408.9090672), (-234.0));
      Complex complex5 = complex0.log();
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex5.tan();
      Complex complex9 = Complex.NaN;
      complex0.reciprocal();
      complex8.tan();
      Complex complex10 = Complex.INF;
      complex10.hashCode();
      complex0.exp();
      complex10.asin();
      complex2.sqrt();
      complex1.atan();
      complex7.toString();
      Complex complex11 = Complex.I;
      complex11.nthRoot(1053);
      complex2.asin();
      complex7.asin();
      complex5.sqrt();
      Complex complex12 = Complex.NaN;
      complex12.atan();
      complex6.toString();
      Complex complex13 = Complex.NaN;
      complex13.nthRoot(1053);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex.valueOf((-1289.0));
      Complex complex1 = Complex.valueOf((-2816.3198549534), (-2816.3198549534));
      Complex complex2 = complex0.divide(complex1);
      complex2.getReal();
      complex2.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex(0.5403023058681398);
      complex4.NaN.tanh();
      Complex complex5 = Complex.NaN;
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(305.6367461, 305.6367461);
      double double0 = 1548.76;
      Complex complex1 = new Complex(1548.76, 305.6367461);
      complex1.pow((-2955.880058060557));
      try { 
        complex0.nthRoot((-500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -500
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1271.369562), (-150.7129998458));
      complex0.sqrt1z();
      Complex complex1 = complex0.INF.subtract((-1271.369562));
      Complex complex2 = complex0.tanh();
      complex1.getImaginary();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1271.369562));
      complex4.log();
      Complex complex5 = complex4.NaN.subtract(complex1);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.tan();
      complex1.reciprocal();
      Complex complex8 = complex7.tan();
      complex7.ZERO.abs();
      complex3.hashCode();
      complex7.exp();
      complex1.asin();
      Complex complex9 = complex2.sqrt();
      complex9.atan();
      complex3.toString();
      complex2.nthRoot(1);
      Complex complex10 = complex7.asin();
      complex6.tanh();
      complex6.sqrt();
      Complex complex11 = Complex.INF;
      complex11.getArgument();
      complex10.exp();
      complex8.toString();
      complex2.conjugate();
      complex5.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1271.369562), (-169.82434270380267));
      Complex complex1 = new Complex((-20.0), 2939.06002012);
      Complex complex2 = complex1.asin();
      complex2.ONE.multiply(507);
      Complex complex3 = complex1.createComplex((-3992.174589), 0.7773585086071495);
      complex3.atan();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1271.369562), (-150.7129998458));
      complex0.sqrt1z();
      Complex complex1 = complex0.INF.subtract((-1271.369562));
      complex0.tanh();
      complex1.getImaginary();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1271.369562));
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.NaN.subtract(complex1);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.tan();
      complex1.reciprocal();
      Complex complex8 = complex7.tan();
      complex2.hashCode();
      Complex complex9 = complex7.createComplex(7.072134900723156E-4, 1.0);
      complex1.getField();
      complex6.subtract(complex5);
      Complex complex10 = Complex.valueOf(7.072134900723156E-4, 7.072134900723156E-4);
      Complex complex11 = complex10.tan();
      complex11.equals(complex9);
      complex5.divide(7.072134900723156E-4);
      complex1.divide(complex8);
      complex5.readResolve();
      complex1.getImaginary();
      complex4.multiply((-1));
      complex10.acos();
      complex9.getImaginary();
      complex9.multiply(37);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-7.877917738262007E-9));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex2.ZERO.subtract(0.0);
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = Complex.ZERO;
      complex3.NaN.getField();
      Complex complex7 = complex0.cosh();
      complex7.ONE.createComplex((-1316.7997450831465), 4.501188264957416E-99);
      complex2.getField();
      complex0.I.subtract(complex6);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-1316.7997450831465));
      complex7.equals(complex0);
      complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.divide(complex7);
      complex3.readResolve();
      complex4.getImaginary();
      complex3.multiply(770);
      Complex complex10 = complex2.acos();
      complex10.ZERO.abs();
      complex1.getImaginary();
      complex9.multiply((-813208370));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.tan();
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = Complex.valueOf((-1948.729204779491));
      Complex complex7 = complex6.acos();
      complex1.cosh();
      Complex complex8 = complex0.createComplex((-1289.0), (-4556.6341278));
      complex4.getField();
      Complex complex9 = complex4.subtract(complex3);
      Complex complex10 = complex7.tan();
      complex9.equals("?aoI\r<wC16.");
      complex3.divide((-20.0));
      complex2.divide(complex10);
      complex8.readResolve();
      Complex complex11 = Complex.valueOf(1150.0, 4.501188264957416E-99);
      complex11.getImaginary();
      complex7.multiply((-599));
      complex1.acos();
      complex3.getImaginary();
      complex5.multiply((-2632));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      complex1.subtract(complex0);
      Complex complex2 = Complex.valueOf(6.283185307179586);
      complex1.tanh();
      complex2.hashCode();
      complex0.subtract(complex2);
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = complex3.tanh();
      complex1.hashCode();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf(2460.1, (-2899.658));
      Complex complex7 = complex6.tanh();
      complex7.I.sqrt();
      complex5.getArgument();
      Complex complex8 = complex0.exp();
      complex4.toString();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.tan();
      complex1.reciprocal();
      complex2.tan();
      Complex complex4 = Complex.valueOf((-5.188364552285819E-8), 0.8040389898578132);
      complex4.hashCode();
      Complex complex5 = complex3.sin();
      complex5.multiply((-0.3295807783045232));
      complex1.tan();
      complex2.isNaN();
      complex0.toString();
      complex2.createComplex((-20.0), (-0.9060367009005804));
      Complex complex6 = Complex.valueOf((double) 4389, (-5.188364552285819E-8));
      Complex complex7 = complex6.multiply(948);
      complex7.multiply(complex0);
      Complex.valueOf((-5.188364552285819E-8), (-20.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.tanh();
      Complex.valueOf((-1289.0));
      Complex complex4 = complex0.log();
      complex1.getField();
      Complex complex5 = complex4.reciprocal();
      complex3.tan();
      Complex complex6 = complex3.add(complex2);
      Complex complex7 = complex0.subtract(complex1);
      Complex.valueOf((-2513.129825));
      complex7.tanh();
      complex6.hashCode();
      Complex complex8 = complex3.subtract(complex5);
      complex1.tanh();
      complex5.hashCode();
      Complex complex9 = Complex.valueOf(3.8288623079292884E293);
      Complex complex10 = complex9.atan();
      complex10.tanh();
      complex1.getArgument();
      complex5.exp();
      complex2.toString();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      complex0.getField();
      Complex complex2 = Complex.NaN;
      Object object0 = complex2.readResolve();
      complex2.getField();
      complex1.equals(object0);
      Complex complex3 = complex0.exp();
      complex3.asin();
      complex0.sqrt();
      Complex complex4 = complex3.atan();
      complex4.toString();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.valueOf((double) (-2036954998), (double) 1);
      try { 
        complex6.nthRoot((-4370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,370
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.3295807783045232);
      complex0.asin();
      Complex complex1 = Complex.ONE;
      complex1.createComplex(0.3295807783045232, 1.8231868743896484);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-3026.8));
      Complex complex5 = complex3.log();
      complex4.getField();
      complex4.reciprocal();
      Complex complex6 = Complex.valueOf((-3026.8), 0.0);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex5.add(complex0);
      complex2.subtract(complex6);
      Complex complex9 = Complex.valueOf(0.0);
      complex9.tanh();
      Complex complex10 = Complex.valueOf(2.0);
      complex10.hashCode();
      Complex complex11 = complex8.subtract(complex6);
      Complex complex12 = complex4.tanh();
      complex7.hashCode();
      complex11.atan();
      Complex complex13 = complex9.tanh();
      complex13.getArgument();
      complex12.exp();
      complex11.toString();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.hashCode();
      Complex complex1 = complex0.pow(1562.786185195287);
      Complex complex2 = complex1.NaN.negate();
      complex2.INF.acos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.sin();
      complex4.toString();
      complex5.abs();
      Complex complex6 = complex1.pow(1562.786185195287);
      Complex complex7 = complex4.multiply(0);
      Complex complex8 = complex7.I.subtract((double) 0);
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex5.divide(1562.786185195287);
      complex4.atan();
      Complex.valueOf(0.0);
      Complex complex11 = complex1.pow(complex4);
      Complex complex12 = complex11.sin();
      complex4.subtract(complex10);
      complex12.ZERO.cosh();
      complex3.ONE.getField();
      Object object0 = complex12.readResolve();
      complex11.equals(object0);
      Complex complex13 = complex0.add(1562.786185195287);
      Complex complex14 = Complex.I;
      Complex complex15 = complex9.reciprocal();
      complex15.multiply(0);
      complex3.pow(0.0);
      complex6.exp();
      Complex complex16 = new Complex(Double.NaN);
      complex6.pow((-1437.84612545));
      complex13.isNaN();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-491.46));
      complex0.readResolve();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.sinh();
      complex3.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex2.ZERO.divide(complex1);
      complex0.getField();
      complex1.multiply(Double.NaN);
      Complex complex5 = Complex.INF;
      complex5.divide(complex0);
      Complex.valueOf((-491.46), Double.NaN);
      Object object0 = new Object();
      complex4.getImaginary();
      complex3.multiply((-727));
      complex5.acos();
      complex5.getImaginary();
      complex3.multiply((-727));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3743.6110854202448), (-3743.6110854202448));
      Complex complex2 = complex0.ZERO.createComplex((-3743.6110854202448), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.I.add((-0.4622538023874885));
      complex1.I.readResolve();
      complex0.ONE.hashCode();
      Complex complex6 = complex1.INF.sin();
      Complex complex7 = complex6.ONE.pow(complex1);
      complex7.INF.multiply(complex3);
      Complex complex8 = complex1.I.sinh();
      Complex complex9 = complex0.multiply(complex1);
      complex9.getField();
      complex9.INF.readResolve();
      complex9.getField();
      complex1.equals(complex9);
      Complex complex10 = complex9.exp();
      complex10.asin();
      Complex complex11 = complex0.sqrt();
      complex11.ZERO.atan();
      complex3.INF.toString();
      complex6.nthRoot(1);
      Complex complex12 = complex9.asin();
      complex0.nthRoot(1);
      Complex complex13 = complex4.pow(complex6);
      Complex complex14 = complex13.ONE.pow((-0.4622538023874885));
      complex3.nthRoot(1);
      complex8.divide(complex5);
      complex6.INF.negate();
      complex9.getReal();
      complex8.reciprocal();
      complex12.divide(complex4);
      complex14.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1271.369562), (-150.7129998458));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.asin();
      complex3.subtract((-956.776086999506));
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = Complex.ONE;
      complex4.cosh();
      Complex complex6 = new Complex((-1271.369562), (-1316.7997450831465));
      Complex complex7 = complex6.createComplex((-1316.7997450831465), 1289.0);
      Complex complex8 = Complex.INF;
      complex6.getField();
      Complex complex9 = complex4.subtract(complex7);
      Complex complex10 = complex2.tan();
      complex9.equals(complex10);
      complex6.sqrt1z();
      Complex complex11 = complex0.tan();
      complex11.cosh();
      Complex complex12 = complex2.pow(0.0);
      complex9.getField();
      complex12.toString();
      complex4.tanh();
      complex10.sqrt();
      complex4.isNaN();
      Complex.valueOf((-1854.0), 4.501188264957416E-99);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2805.0), (-7.877917738262007E-9));
      complex0.ONE.sqrt();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.asin();
      complex1.subtract(0.0);
      Complex complex3 = new Complex((-7.877917738262007E-9), (-2805.0));
      Complex complex4 = complex3.add(complex1);
      complex1.acos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.createComplex((-3518.8413478), 0.0);
      complex0.getField();
      Complex complex7 = Complex.INF;
      complex7.subtract(complex5);
      Complex complex8 = complex0.tan();
      Object object0 = complex7.readResolve();
      complex8.equals(object0);
      Complex complex9 = complex7.sqrt1z();
      complex9.tan();
      complex2.cosh();
      complex6.pow(18417.658169480044);
      complex8.getField();
      complex9.toString();
      complex0.tanh();
      complex4.sqrt();
      complex9.isNaN();
      Complex.valueOf(29.2074, 0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-2805.0), (-7.877917738262007E-9));
      Complex complex1 = complex0.ONE.sqrt();
      complex0.sin();
      Complex complex2 = new Complex(0.0);
      complex2.asin();
      complex0.subtract((-0.7615941559557649));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.acos();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.createComplex((-0.7615941559557649), (-1.0));
      complex5.getField();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.I;
      complex5.tan();
      complex5.equals(complex7);
      complex4.sqrt1z();
      complex6.tan();
      Complex complex10 = Complex.INF;
      complex10.cosh();
      Complex complex11 = complex0.pow(6.283185307179586);
      complex5.getField();
      complex11.toString();
      complex8.tanh();
      complex10.sqrt();
      Complex complex12 = Complex.ZERO;
      complex12.isNaN();
      Complex.valueOf(4.501188264957416E-99, (-1.0));
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1271.369562), (-150.7129998458));
      Complex complex1 = complex0.sqrt1z();
      complex1.toString();
      Complex complex2 = complex0.INF.subtract((-1271.369562));
      Complex complex3 = complex0.tanh();
      complex2.getImaginary();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1271.369562));
      complex5.log();
      complex5.NaN.subtract(complex2);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.tan();
      complex2.reciprocal();
      Complex complex8 = complex7.tan();
      complex4.hashCode();
      complex8.INF.sin();
      complex7.multiply((-150.7129998458));
      complex2.tan();
      complex7.isNaN();
      complex8.toString();
      complex6.createComplex(709.15634, 1.05387548454467E-309);
      Complex complex9 = complex0.multiply(4389);
      complex9.ZERO.multiply(complex6);
      complex7.getReal();
      complex8.reciprocal();
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.tan();
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.add((-1289.0));
      complex2.readResolve();
      complex2.hashCode();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex3.multiply(complex6);
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex3.multiply(complex8);
      complex7.getField();
      complex5.readResolve();
      complex3.getField();
      complex0.equals(complex4);
      complex3.exp();
      complex4.asin();
      complex5.sqrt();
      complex0.atan();
      complex9.toString();
      int int0 = 1;
      Complex complex10 = Complex.NaN;
      try { 
        complex10.nthRoot((-2036954998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,036,954,998
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3743.6110854202448), (-3743.6110854202448));
      Complex complex2 = complex0.ZERO.createComplex((-3743.6110854202448), Double.POSITIVE_INFINITY);
      complex2.ZERO.negate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex3.atan();
      complex1.abs();
      Complex complex7 = complex5.cos();
      complex6.subtract(complex1);
      Complex complex8 = complex4.acos();
      Complex complex9 = complex1.subtract(complex8);
      Complex complex10 = complex7.divide((-2.8029247917762686E7));
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.divide(complex8);
      complex8.readResolve();
      complex10.getImaginary();
      complex9.multiply((-2121));
      Complex complex13 = new Complex(0.0);
      complex13.acos();
      complex1.getImaginary();
      complex13.multiply((-2121));
      Complex complex14 = Complex.ONE;
      complex12.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.tan();
      complex0.ZERO.hashCode();
      complex0.asin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.subtract(complex3);
      complex5.sqrt1z();
      complex2.tan();
      complex5.reciprocal();
      complex5.tan();
      complex2.hashCode();
      complex3.sin();
      complex5.multiply((-1296.829097));
      Complex complex6 = complex5.tan();
      complex6.isNaN();
      complex2.toString();
      Complex.valueOf((-2167.184162565), 1.05387548454467E-309);
      Complex complex7 = new Complex((-2167.184162565), (-1289.0));
      complex6.multiply(4389);
      complex6.multiply(complex1);
      Complex.valueOf((-2570.94125), (-2979.1279));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3743.6110854202448), (-3743.6110854202448));
      Complex complex2 = complex0.ZERO.createComplex((-3743.6110854202448), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.I.add(0.0);
      complex1.I.readResolve();
      complex0.ONE.hashCode();
      Complex complex6 = complex1.INF.sin();
      Complex complex7 = complex6.ONE.pow(complex1);
      complex7.INF.multiply(complex3);
      Complex complex8 = complex1.I.sinh();
      Complex complex9 = complex0.multiply(complex1);
      complex9.getField();
      complex9.INF.readResolve();
      complex9.getField();
      complex8.isInfinite();
      Complex complex10 = complex9.exp();
      complex10.asin();
      Complex complex11 = complex0.sqrt();
      complex11.ZERO.atan();
      complex3.INF.toString();
      complex6.nthRoot(1);
      Complex complex12 = complex9.asin();
      complex0.nthRoot(1);
      Complex complex13 = complex4.pow(complex6);
      complex13.ONE.pow(0.0);
      complex3.nthRoot(1);
      complex8.divide(complex5);
      complex9.getReal();
      complex8.reciprocal();
      complex12.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-2805.0), (-7.877917738262007E-9));
      Complex complex1 = Complex.valueOf((-7.877917738262007E-9), (-2805.0));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex2.ZERO.subtract(0.0);
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ONE.createComplex((-1316.7997450831465), 4.501188264957416E-99);
      complex2.getField();
      Complex complex9 = complex0.I.subtract(complex6);
      complex9.I.tan();
      complex4.isInfinite();
      Complex complex10 = complex0.sqrt1z();
      complex10.ZERO.tan();
      complex10.I.cosh();
      complex1.add((-1316.7997450831465));
      complex9.log();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex6.multiply(0);
      complex9.pow((double) 0);
      complex8.exp();
      complex3.tanh();
      complex5.pow((-23.69));
      complex12.isNaN();
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3743.6110854202448), (-3743.6110854202448));
      Complex complex2 = complex0.ZERO.createComplex((-3743.6110854202448), Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.INF;
      complex1.divide(complex6);
      complex2.abs();
      complex2.nthRoot(2431);
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.subtract(complex9);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.tan();
      Complex complex1 = complex0.subtract((-1.0));
      Complex complex2 = Complex.valueOf(2.792046157580119E-8);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((-1.0), (-2168.65));
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.I;
      complex5.getField();
      complex5.getField();
      complex0.abs();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.acos();
      complex1.getArgument();
      complex3.cosh();
      complex2.hashCode();
      complex4.isInfinite();
      Complex complex8 = complex4.reciprocal();
      complex0.tan();
      complex7.getField();
      complex2.createComplex(3135.0162062286972, 1.256828068633383E-7);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1271.369562), (-150.7129998458));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.subtract((-1271.369562));
      Complex complex3 = complex0.tanh();
      complex2.getImaginary();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1271.369562));
      complex5.log();
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.tan();
      complex2.reciprocal();
      complex8.tan();
      complex4.hashCode();
      Complex complex9 = complex8.exp();
      complex2.asin();
      Complex complex10 = complex3.sqrt();
      complex10.atan();
      complex4.toString();
      complex3.nthRoot(1);
      Complex complex11 = complex8.asin();
      complex1.nthRoot(709);
      complex0.pow(complex6);
      complex10.pow(2208.205446542643);
      complex4.nthRoot(709);
      complex0.divide(complex6);
      complex3.getReal();
      complex9.reciprocal();
      complex6.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex2.tanh();
      complex4.INF.multiply(1.0);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.ZERO.divide((-1.0));
      Complex.valueOf(0.0, 0.0);
      complex0.I.sqrt();
      complex7.ZERO.subtract(complex2);
      complex0.sqrt1z();
      complex7.add((-1.0));
      complex1.sqrt1z();
      complex5.reciprocal();
      Complex.valueOf(0.0);
      complex4.readResolve();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1271.369562), (-150.7129998458));
      complex0.sqrt1z();
      Complex complex1 = complex0.INF.subtract((-1271.369562));
      complex0.tanh();
      complex1.getImaginary();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1271.369562));
      complex3.log();
      complex3.NaN.subtract(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.tan();
      complex1.reciprocal();
      Complex complex6 = complex5.tan();
      complex2.hashCode();
      complex6.INF.sin();
      complex5.multiply((-150.7129998458));
      complex1.tan();
      complex5.isNaN();
      complex6.toString();
      complex4.createComplex(709.15634, 1.05387548454467E-309);
      Complex complex7 = complex0.multiply(4389);
      complex7.ZERO.multiply(complex4);
      Complex.valueOf((-2570.94125), (-2570.94125));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ZERO.add(0.09761576354503632);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.acos();
      complex4.INF.asin();
      complex0.ONE.getField();
      complex0.getReal();
      complex0.readResolve();
      complex0.abs();
      complex0.abs();
      complex0.hashCode();
      complex3.subtract((-57.6106540194));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getArgument();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex0.I.pow(complex2);
      complex0.I.reciprocal();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf(3.3683846288580648E-199);
      complex5.ZERO.multiply(2439);
      Complex complex6 = complex1.ZERO.multiply(2439);
      Complex complex7 = complex0.I.pow(0.0);
      complex7.ZERO.acos();
      complex1.createComplex(0.0, 1855.93708);
      Complex.valueOf(1.3548138612715822E-9, 1681.545717);
      Complex complex8 = complex6.INF.atan();
      complex8.ONE.subtract(complex4);
      complex4.I.toString();
      complex4.INF.hashCode();
      complex4.NaN.abs();
      Complex complex9 = complex0.subtract(complex3);
      complex9.NaN.atan();
      complex1.equals(complex4);
      Complex complex10 = complex0.sqrt();
      complex6.atan();
      complex1.cos();
      Complex complex11 = complex10.subtract(complex6);
      complex11.INF.divide(Double.NaN);
      complex2.subtract(1855.93708);
      complex0.conjugate();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.792046157580119E-8), (-2.792046157580119E-8));
      Complex complex1 = new Complex((-2.792046157580119E-8), (-2.792046157580119E-8));
      Complex complex2 = complex0.ZERO.createComplex((-2.792046157580119E-8), (-2.792046157580119E-8));
      complex2.tan();
      Complex complex3 = complex0.pow(complex1);
      complex1.isInfinite();
      complex3.divide((-2.792046157580119E-8));
      int int0 = (-1517);
      try { 
        complex1.NaN.nthRoot((-1517));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,517
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-2805.0), (-7.877917738262007E-9));
      complex0.ONE.sqrt();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.asin();
      complex1.ZERO.subtract(0.0);
      complex1.ZERO.add(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.cosh();
      complex4.ONE.createComplex((-1316.7997450831465), 4.501188264957416E-99);
      complex1.getField();
      Complex complex5 = complex0.I.subtract(complex3);
      complex5.I.tan();
      complex4.equals(complex0);
      Complex complex6 = complex0.sqrt1z();
      complex6.ZERO.tan();
      Complex complex7 = complex6.I.cosh();
      complex7.ZERO.pow(0.0);
      complex3.getField();
      complex6.toString();
      complex2.tanh();
      complex1.sqrt();
      complex3.isNaN();
      Complex.valueOf(0.0, (-366.9462995972));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.I.divide((-1933.8854439536));
      complex0.hashCode();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.INF.conjugate();
      complex5.toString();
      complex0.cosh();
      complex2.abs();
      complex5.asin();
      complex5.sqrt1z();
      complex3.pow(complex2);
      complex0.getField();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1289.0));
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.ZERO.tan();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.sqrt1z();
      complex0.INF.sqrt();
      Complex complex4 = complex3.I.atan();
      complex0.ZERO.abs();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.subtract(complex0);
      complex2.I.acos();
      complex4.subtract(complex2);
      Complex complex7 = complex3.divide((-112.8748539));
      Complex complex8 = complex4.divide(complex5);
      complex8.readResolve();
      complex6.getImaginary();
      complex6.multiply((-727));
      complex7.acos();
      complex8.getImaginary();
      complex2.multiply((-727));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.ONE.cosh();
      complex3.NaN.abs();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.NaN.sqrt1z();
      complex0.cos();
      complex1.divide(complex0);
      Complex complex6 = complex4.pow(complex5);
      int int0 = (-1619);
      try { 
        complex6.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6275664567947388);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.multiply(0.6275664567947388);
      Complex complex4 = complex3.NaN.cosh();
      complex4.NaN.reciprocal();
      complex0.I.asin();
      complex0.isNaN();
      complex1.exp();
      complex0.tan();
      complex0.INF.log();
      Complex complex5 = complex0.add(535.2011209);
      complex5.readResolve();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ZERO;
      complex1.NaN.subtract(Double.NaN);
      Complex complex3 = complex0.INF.add(complex2);
      complex1.NaN.negate();
      complex3.I.subtract(Double.POSITIVE_INFINITY);
      complex3.ZERO.readResolve();
      Complex complex4 = Complex.valueOf((-4.35799392139009E85), (-4.35799392139009E85));
      complex4.INF.negate();
      complex0.getField();
      complex0.getField();
      complex0.abs();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.acos();
      complex6.ONE.getArgument();
      complex1.cosh();
      complex1.hashCode();
      complex3.isInfinite();
      complex2.reciprocal();
      Complex complex7 = complex3.tan();
      complex7.ONE.getField();
      complex4.createComplex(Double.NaN, Double.NaN);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add(complex1);
      Complex complex2 = complex0.pow((-1068.84));
      complex2.ZERO.sqrt1z();
      complex1.getReal();
      complex2.tanh();
      complex1.subtract(0.0);
      Complex.valueOf((-1.6379825102473853E-8));
      Complex.valueOf(40.1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ONE.log();
      complex0.getField();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex7.ONE.add(complex3);
      complex8.INF.subtract(complex7);
      Complex.valueOf(6.283185307179586);
      Complex complex9 = complex8.I.tanh();
      complex9.ONE.hashCode();
      complex6.ZERO.subtract(complex2);
      complex1.tanh();
      complex6.INF.hashCode();
      Complex complex10 = complex1.atan();
      complex10.tanh();
      complex6.getArgument();
      complex5.ONE.exp();
      complex7.toString();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3743.6110854202448), (-3743.6110854202448));
      Complex complex2 = complex0.ZERO.createComplex((-3743.6110854202448), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.I.add(0.0);
      complex1.I.readResolve();
      complex0.ONE.hashCode();
      Complex complex6 = complex1.INF.sin();
      Complex complex7 = complex6.ONE.pow(complex1);
      complex7.INF.multiply(complex3);
      Complex complex8 = complex1.I.sinh();
      Complex complex9 = complex0.multiply(complex1);
      complex9.getField();
      complex9.INF.readResolve();
      complex9.getField();
      complex1.equals(complex9);
      Complex complex10 = complex9.exp();
      complex10.asin();
      Complex complex11 = complex0.sqrt();
      complex11.ZERO.atan();
      complex3.INF.toString();
      complex6.nthRoot(1);
      Complex complex12 = complex9.asin();
      complex0.nthRoot(1);
      Complex complex13 = complex4.pow(complex6);
      complex13.ONE.pow(0.0);
      complex3.nthRoot(1);
      complex8.divide(complex5);
      complex9.getReal();
      complex8.reciprocal();
      complex12.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-1.8021197722549054E-8));
      complex0.divide(335.34);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.I.divide(complex0);
      complex0.cos();
      Complex complex4 = Complex.valueOf((-2510.86989));
      complex4.ZERO.tan();
      Complex complex5 = complex4.I.divide((-719.281249182));
      complex5.INF.add((-2510.86989));
      complex2.divide(complex4);
      Complex complex6 = complex2.negate();
      complex6.readResolve();
      complex3.add(complex6);
      Complex complex7 = complex5.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex7.getReal();
      Complex.valueOf(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-517.4926972678162), 0.0);
      Complex complex1 = complex0.subtract((-517.4926972678162));
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.log();
      complex3.I.cosh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.negate();
      complex4.subtract(complex5);
      complex4.multiply((-3839.81498104204));
      complex0.nthRoot(1315);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.ZERO.conjugate();
      complex0.ONE.divide((-1.0));
      complex2.INF.tanh();
      Complex complex3 = complex0.I.add(1988.31548);
      complex3.ONE.atan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.ZERO.sqrt();
      complex6.NaN.abs();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex7.log();
      complex8.reciprocal();
      complex7.getArgument();
      complex5.toString();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.pow(complex0);
      complex4.ZERO.pow(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex5.cosh();
      complex5.ONE.divide(0.0);
      Complex complex8 = complex0.multiply(complex5);
      complex7.abs();
      complex1.hashCode();
      complex2.sqrt();
      complex8.sqrt1z();
      complex4.atan();
      complex1.negate();
      Complex.valueOf(Double.NaN);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-335.0), (-335.0));
      Complex complex1 = new Complex((-335.0));
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.createComplex((-335.0), (-335.0));
      complex4.NaN.getField();
      Complex complex5 = complex4.I.acos();
      complex5.ONE.multiply(0.0);
      Complex complex6 = complex0.cosh();
      complex1.abs();
      complex6.sin();
      complex6.I.readResolve();
      Complex complex7 = Complex.valueOf((-1167.7832331631641));
      Complex complex8 = complex7.atan();
      complex2.toString();
      complex1.negate();
      complex6.ONE.conjugate();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex3.multiply(complex9);
      complex10.ONE.getArgument();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex11.NaN.sin();
      complex3.toString();
      complex8.isInfinite();
      Complex complex13 = complex6.negate();
      complex13.INF.asin();
      complex12.isInfinite();
      complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(476.67793, 0.0);
      complex0.toString();
      Complex complex1 = complex0.I.tanh();
      complex0.nthRoot(2165);
      Complex complex2 = complex1.I.pow(0.0);
      complex2.ONE.hashCode();
      complex1.acos();
      complex1.ZERO.multiply(complex0);
      complex2.createComplex(20.0, 0.0);
      complex0.ONE.getArgument();
      complex0.getField();
      Complex complex3 = complex0.atan();
      complex3.abs();
      complex3.I.sqrt();
      complex3.ONE.createComplex(476.67793, 0.0);
      Complex.valueOf(0.0, (-1623.23991));
      try { 
        complex3.I.nthRoot((-156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -156
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ZERO.sqrt();
      complex1.NaN.abs();
      complex0.isNaN();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.INF.multiply((-617.760341741));
      complex3.I.nthRoot(1073);
      Complex complex5 = complex3.ZERO.subtract(complex0);
      complex3.NaN.readResolve();
      Complex complex6 = complex2.ZERO.tanh();
      Complex complex7 = complex1.createComplex(1919.24, (-2838.8));
      Complex complex8 = complex7.I.tan();
      complex2.toString();
      complex6.acos();
      complex7.abs();
      complex6.negate();
      complex8.ONE.negate();
      Complex complex9 = complex1.sqrt();
      complex8.pow((-2838.8));
      complex8.atan();
      complex1.cosh();
      complex9.tanh();
      complex4.atan();
      complex5.getImaginary();
      Complex.valueOf(1629.68, 1629.68);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex1.ZERO.tanh();
      Complex complex2 = complex0.pow(complex1);
      complex2.getArgument();
      Complex complex3 = complex2.multiply(411);
      complex3.I.toString();
      Complex complex4 = complex2.multiply(0);
      complex4.ZERO.tan();
      Complex complex5 = complex2.divide(0.0);
      complex0.multiply(0);
      complex3.multiply(411);
      complex3.pow(complex2);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-491.46));
      complex1.readResolve();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ZERO.createComplex(0.0, 0.0);
      complex2.ZERO.divide(complex1);
      complex0.getField();
      Complex complex5 = complex1.multiply(Double.NaN);
      complex5.I.nthRoot(1);
      complex1.log();
      complex4.toString();
      complex1.asin();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.hashCode();
      Complex complex1 = complex0.pow(1562.786185195287);
      Complex complex2 = complex1.NaN.negate();
      complex2.INF.acos();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.sin();
      complex4.toString();
      complex5.abs();
      Complex complex6 = complex1.pow(1562.786185195287);
      Complex complex7 = complex4.multiply(0);
      Complex complex8 = complex7.I.subtract((double) 0);
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex5.divide(1562.786185195287);
      Complex complex11 = complex4.atan();
      complex11.INF.asin();
      Complex complex12 = complex1.pow(complex4);
      Complex complex13 = complex12.sin();
      complex4.subtract(complex10);
      complex13.ZERO.cosh();
      complex3.ONE.getField();
      Object object0 = complex13.readResolve();
      complex12.equals(object0);
      Complex complex14 = complex0.add(1562.786185195287);
      complex13.log();
      Complex complex15 = complex9.reciprocal();
      complex15.multiply(0);
      complex3.pow(0.0);
      Complex complex16 = complex6.exp();
      complex16.INF.tanh();
      complex6.pow((-1437.84612545));
      complex14.isNaN();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.0112214979786464E-43);
      complex0.I.acos();
      complex0.ONE.createComplex(1.0112214979786464E-43, (-1.0));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.cosh();
      complex2.sqrt();
      complex2.I.conjugate();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.ONE.sqrt1z();
      complex0.isNaN();
      complex0.cos();
      complex0.createComplex(Double.NaN, 2198.8756720327046);
      complex0.add((-830.604));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(947);
      complex1.ZERO.nthRoot(905);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.negate();
      complex1.isNaN();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex0.ZERO.sin();
      complex1.equals(complex0);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex7.cos();
      complex9.negate();
      Complex.valueOf(2707.7);
      Complex.valueOf(Double.NaN, 4926.3943132);
      complex1.tanh();
      complex9.NaN.multiply(complex3);
      complex0.isInfinite();
      Complex complex10 = complex9.subtract(complex0);
      complex9.atan();
      complex8.atan();
      complex6.cosh();
      Complex complex11 = complex4.divide((-20.0));
      complex11.NaN.nthRoot(905);
      complex11.exp();
      complex6.multiply(0.04168701738764507);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(3.652892398145774E-153);
      complex0.ONE.getField();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.sqrt1z();
      complex5.NaN.add(514.607253941);
      Complex complex6 = complex3.tan();
      complex6.ZERO.conjugate();
      Complex complex7 = complex3.pow(complex1);
      complex7.ONE.sqrt1z();
      Complex complex8 = complex5.cosh();
      complex8.getImaginary();
      Complex.valueOf(514.607253941, 514.607253941);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex1.NaN.pow((-2222.2028510025));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.cosh();
      complex4.asin();
      complex2.getField();
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply((-900));
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex3.INF.subtract(0.0);
      complex2.ONE.nthRoot(1307);
      complex4.ZERO.multiply(complex2);
      complex1.exp();
      complex3.ONE.multiply((-900));
      complex0.toString();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.ZERO.multiply(0.0);
      Complex complex7 = complex0.subtract(15.86762309009);
      complex0.ZERO.abs();
      complex0.tanh();
      complex1.readResolve();
      Complex.valueOf(15.86762309009, 9.739345931419228E280);
      complex7.isInfinite();
      complex0.abs();
      Complex complex8 = complex5.tan();
      complex8.ONE.multiply(complex6);
      Complex complex9 = Complex.ZERO;
      complex0.INF.negate();
      complex0.divide(complex9);
      Complex complex10 = complex0.pow(complex6);
      complex7.cosh();
      complex10.conjugate();
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(305.6367461, 305.6367461);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.I.sqrt();
      complex2.ZERO.conjugate();
      Complex complex3 = complex0.subtract((-464.784295760996));
      complex3.ONE.sqrt();
      Complex.valueOf(0.0);
      complex1.ONE.abs();
      complex0.INF.getArgument();
      Complex complex4 = complex3.INF.add((-464.784295760996));
      Complex complex5 = complex3.ONE.pow(complex0);
      Complex complex6 = complex5.I.asin();
      complex1.getImaginary();
      complex1.nthRoot(696);
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex5.I.pow(complex4);
      complex7.toString();
      Complex complex8 = complex7.I.pow(complex1);
      complex6.toString();
      Complex complex9 = complex1.add((-902.2497349366664));
      complex9.ONE.pow(1.0);
      complex4.hashCode();
      complex9.ONE.asin();
      complex9.cosh();
      complex9.sqrt();
      complex8.divide(0.0);
      complex4.subtract(complex3);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(2550);
      Complex complex4 = complex2.I.cos();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.atan();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = (Complex)complex3.INF.readResolve();
      assertTrue(complex8.isInfinite());
      
      Complex complex9 = complex5.NaN.multiply(complex2);
      double double0 = complex9.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = complex2.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex10 = complex6.NaN.conjugate();
      complex10.INF.getArgument();
      Complex complex11 = complex5.createComplex((-1815.74317755473), 0.0);
      List<Complex> list0 = complex3.nthRoot(4093);
      assertTrue(list0.contains(complex9));
      
      complex5.I.subtract(1765.78199846525);
      List<Complex> list1 = complex0.nthRoot(4093);
      assertTrue(list1.contains(complex8));
      
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex12.I.subtract((-1815.74317755473));
      assertEquals(1815.74317755473, complex13.getReal(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(1815.7429021853693, complex12.getImaginary(), 0.01);
      
      Complex complex14 = complex7.sqrt();
      Complex complex15 = Complex.valueOf((-288.2219665941943));
      complex1.getField();
      complex2.getField();
      Complex complex16 = complex1.subtract(complex15);
      assertSame(complex16, complex5);
      
      complex2.getField();
      Complex complex17 = complex14.sinh();
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex17.getReal(), 0.01);
      
      Complex complex18 = complex3.divide(125.04813);
      assertSame(complex18, complex9);
      
      complex0.exp();
      Complex complex19 = Complex.valueOf((-1815.74317755473));
      assertEquals(0.0, complex19.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      complex1.createComplex((-1.0), (-1.0));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.atan();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
  }
}
