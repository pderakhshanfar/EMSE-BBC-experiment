/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:50:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(38.598515203838886, 5002361.252800001);
      Complex complex2 = new Complex(7.37567604176979E-8, (-20.0));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.valueOf((-1132.612634509), (-516.0));
      complex0.reciprocal();
      complex3.sin();
      Complex complex6 = complex2.acos();
      complex3.multiply(1586);
      Complex complex7 = complex4.multiply(complex6);
      complex2.tan();
      complex7.nthRoot(1586);
      complex5.divide(complex1);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.ZERO.cos();
      complex2.ONE.readResolve();
      complex2.I.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.createComplex(2999.30274184, (-508.33996));
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.ONE.subtract((-508.33996));
      Complex complex7 = complex6.NaN.tanh();
      complex7.ZERO.toString();
      Complex complex8 = complex4.subtract(complex3);
      complex8.ONE.sinh();
      complex1.divide(complex4);
      complex3.multiply(8.974417915105033E-9);
      complex1.cos();
      complex5.NaN.readResolve();
      complex5.ONE.sqrt1z();
      Complex complex9 = complex5.log();
      Complex complex10 = Complex.valueOf(8.974417915105033E-9);
      Complex complex11 = complex9.conjugate();
      complex11.abs();
      complex8.conjugate();
      complex10.multiply(7);
      complex0.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex0.multiply(1255);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1.6653345369377348E-16, Double.NaN);
      Complex complex1 = complex0.acos();
      complex1.abs();
      complex0.createComplex((-20.0), 1653.9);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.NaN.readResolve();
      Complex complex2 = complex1.tanh();
      complex1.NaN.atan();
      complex2.createComplex(0.999994131847949, 20.0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-7.200576448156497E307));
      complex1.tanh();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      complex1.multiply(complex0);
      Complex.valueOf(Double.NaN);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex1.multiply(complex0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(8.199017104859901E79, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex1.tan();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(8.199017104859901E79, Double.POSITIVE_INFINITY);
      double double0 = (-1904.698089404);
      Complex complex1 = Complex.valueOf((-1904.698089404), 2283.76938275);
      Complex complex2 = complex1.multiply(complex0);
      int int0 = (-2147483647);
      try { 
        complex2.nthRoot((-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,147,483,647
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(8.199017104859901E79, Double.POSITIVE_INFINITY);
      complex0.tan();
      complex0.multiply(18.17904269041939);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.asin();
      Complex complex2 = complex1.atan();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1719.7555808297), 2.240619971364864E-14);
      complex1.ONE.multiply((-1719.7555808297));
      Complex complex2 = complex1.acos();
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(1.1407159749774197E23, 20.0);
      complex1.ZERO.sin();
      Complex complex2 = new Complex(1.8214070796966553, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.tan();
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.log();
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex4 = Complex.ONE;
      complex1.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = Complex.I;
      complex7.cosh();
      complex6.toString();
      complex4.divide(complex0);
      Complex complex8 = Complex.I;
      complex8.ONE.multiply(complex4);
      complex1.getImaginary();
      complex6.reciprocal();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(18.179042690419386, 18.179042690419386);
      complex0.ONE.createComplex((-237.2064813853), 18.179042690419386);
      Complex complex1 = complex0.tanh();
      complex0.abs();
      Complex complex2 = Complex.ONE;
      complex2.abs();
      complex1.pow(18.179042690419386);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex0.tanh();
      Complex complex2 = new Complex((-20.0));
      complex2.tanh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.sinh();
      complex0.pow(complex1);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.ONE.multiply(1553933766);
      complex2.getField();
      Complex complex4 = complex0.divide(Double.NaN);
      Complex complex5 = complex0.divide(Double.NaN);
      Complex complex6 = complex4.asin();
      Complex complex7 = complex4.add(Double.NaN);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.ZERO.toString();
      complex4.INF.log();
      complex5.multiply(364);
      complex7.readResolve();
      complex6.atan();
      complex5.divide(complex0);
      complex3.tanh();
      complex5.conjugate();
      complex0.toString();
      complex1.divide(Double.NaN);
      Complex.valueOf(1885.86133, (double) 364);
      complex1.cos();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract((-293.38916));
      complex0.toString();
      complex0.toString();
      complex2.nthRoot(1);
      Complex complex3 = new Complex(1959.1745, (-1453.8192362100726));
      Complex complex4 = complex3.multiply(0);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.createComplex(709.22802, 709.22802);
      Complex complex4 = complex2.cosh();
      Complex complex5 = new Complex(0.7165729688979205, 0.7165729688979205);
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.valueOf((-2460.55));
      complex7.toString();
      Complex complex9 = complex3.divide(complex7);
      complex9.ZERO.sqrt();
      complex2.acos();
      complex8.getImaginary();
      complex6.reciprocal();
      Complex complex10 = Complex.valueOf(0.0, 1.2550633697348567E-8);
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1272.009469034, 1272.009469034);
      Complex complex2 = new Complex(1272.009469034, 1272.009469034);
      Complex complex3 = complex1.exp();
      double double0 = 1424.837017240898;
      complex3.createComplex(1424.837017240898, 1424.837017240898);
      Complex complex4 = complex0.cosh();
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = complex1.multiply(complex3);
      complex5.isNaN();
      complex2.reciprocal();
      complex2.add(complex1);
      Complex complex6 = Complex.INF;
      complex4.abs();
      complex6.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(complex0);
      complex1.cosh();
      Complex.valueOf((-1.3907979640327008E88));
      complex1.toString();
      // Undeclared exception!
      complex2.nthRoot(304220);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.divide(complex1);
      complex0.toString();
      Complex complex4 = complex0.subtract(0.0);
      Complex.valueOf((-2513.565), Double.NaN);
      complex1.INF.negate();
      Complex complex5 = complex1.I.divide(1893.5982888102033);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.valueOf(Double.NaN, (-2362.26));
      Complex.valueOf(0.0, 0.0);
      complex7.getField();
      Complex complex8 = complex1.tan();
      complex8.ONE.hashCode();
      complex8.NaN.add((-2513.565));
      Complex complex9 = complex4.asin();
      Complex complex10 = complex4.asin();
      complex10.ZERO.acos();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = new Complex(0.0, 0.0);
      complex12.INF.tan();
      Complex.valueOf(3353.2837, 1206.68449);
      complex8.multiply(complex12);
      complex3.log();
      Complex complex13 = Complex.INF;
      complex9.subtract(complex13);
      complex9.multiply(951);
      complex11.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.getArgument();
      Complex complex3 = complex1.ONE.createComplex(0.0, 709.22802);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.asin();
      complex2.isNaN();
      Complex complex7 = new Complex((-0.853373615615911), 3835.0008595727);
      complex7.reciprocal();
      complex2.add(complex4);
      complex0.sqrt();
      complex3.abs();
      Complex complex8 = Complex.ONE;
      complex3.ONE.multiply(586);
      complex8.divide(619.40324919165);
      complex6.divide(complex5);
      complex7.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 1119.098;
      Complex complex0 = new Complex(1119.098);
      Complex complex1 = Complex.ONE;
      complex0.toString();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex2.getArgument();
      Complex complex3 = complex2.createComplex((-1292.499), Double.NaN);
      complex3.cosh();
      complex3.add(complex2);
      Complex complex4 = new Complex(Double.NaN);
      complex0.toString();
      complex4.nthRoot(166);
      Complex complex5 = Complex.valueOf(2.0, (-1292.499));
      complex5.divide(complex4);
      Complex complex6 = complex3.acos();
      complex6.subtract(complex2);
      complex2.getImaginary();
      complex5.reciprocal();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      complex2.exp();
      complex1.pow(complex2);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.multiply((-2966.24523788555));
      complex2.hashCode();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex2.nthRoot(1279);
      complex5.sin();
      complex4.createComplex(89.269859103097, 89.269859103097);
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.abs();
      Complex complex5 = complex2.INF.add((-679.24688625));
      Complex complex6 = complex5.INF.multiply(complex1);
      complex6.INF.divide(complex5);
      complex2.ZERO.createComplex(1865.8733204, 2.0331612641483288);
      complex6.ONE.add((-679.24688625));
      Complex complex7 = complex0.I.sqrt();
      complex1.I.getArgument();
      Complex.valueOf(1.5707963267948966, (-679.24688625));
      Complex complex8 = complex0.tan();
      complex8.ZERO.abs();
      Complex complex9 = complex0.atan();
      complex8.abs();
      complex8.subtract(complex9);
      Complex complex10 = complex1.divide(2675.295078047);
      complex10.I.subtract(complex0);
      complex10.add(complex8);
      Complex complex11 = complex7.acos();
      complex11.I.cosh();
      complex11.I.nthRoot(1343);
      Complex complex12 = complex5.log();
      complex12.NaN.acos();
      complex12.NaN.getArgument();
      Complex complex13 = Complex.valueOf(1.0);
      complex13.tan();
      complex7.sqrt();
      complex3.exp();
      complex0.equals("7sl+b^;NKKd>@mtgl");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.multiply(complex1);
      complex0.INF.getField();
      Complex complex4 = complex2.exp();
      complex1.pow(complex3);
      Complex.valueOf((-828.7356));
      Complex.valueOf(1198.98585945407);
      Complex complex5 = Complex.NaN;
      complex4.tan();
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-2161.839351889744));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-750.092989256));
      Complex complex2 = complex0.sqrt();
      complex2.subtract((-293.38916));
      complex2.isInfinite();
      complex1.toString();
      complex2.equals(complex0);
      complex0.nthRoot(628);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.cos();
      complex3.readResolve();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.asin();
      complex2.isNaN();
      Complex complex6 = complex3.reciprocal();
      complex4.add(complex1);
      Complex complex7 = complex6.sqrt();
      complex5.abs();
      complex7.divide((-1764.5));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.INF;
      complex1.multiply(1);
      Complex complex2 = complex0.sinh();
      complex2.ONE.abs();
      complex2.getReal();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.valueOf(709.22802, 709.22802);
      complex0.ONE.toString();
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.getArgument();
      Complex complex3 = new Complex((-2347));
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex1.exp();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.subtract(complex4);
      complex4.tan();
      complex1.multiply(5.621509038251498E-9);
      complex8.hashCode();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.NaN.tanh();
      complex3.INF.conjugate();
      Complex complex4 = Complex.I;
      complex0.cosh();
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex1.cosh();
      Complex complex7 = Complex.I;
      complex7.toString();
      complex2.nthRoot(1);
      complex4.divide(complex7);
      complex6.acos();
      complex5.getImaginary();
      complex0.reciprocal();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.multiply(complex1);
      complex2.exp();
      Complex complex4 = Complex.NaN;
      complex4.pow(complex3);
      Complex.valueOf((-828.7356));
      Complex complex5 = Complex.NaN;
      complex3.tan();
      complex4.multiply((-2966.24523788555));
      complex2.hashCode();
      Complex complex6 = new Complex(696.917, 1.8214070796966553);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ONE;
      complex0.toString();
      complex0.hashCode();
      complex1.isNaN();
      complex0.toString();
      complex1.sin();
      Complex complex2 = complex0.exp();
      complex1.INF.abs();
      Complex complex3 = complex0.pow((-750.092989256));
      Complex complex4 = complex0.multiply((-487.380435937321));
      complex4.getArgument();
      complex0.subtract(complex0);
      complex1.isNaN();
      Complex complex5 = complex2.sqrt1z();
      complex3.atan();
      complex5.abs();
      complex0.sqrt();
      complex1.negate();
      Complex complex6 = Complex.INF;
      complex1.divide(complex6);
      Complex complex7 = complex3.multiply((-1440));
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1075.22, 1075.22);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.INF;
      complex3.toString();
      Complex complex4 = complex3.log();
      complex4.hashCode();
      complex0.isNaN();
      complex2.toString();
      complex2.sin();
      Complex complex5 = complex0.exp();
      complex2.pow(2447.73747531041);
      Complex complex6 = complex1.multiply((-1518.43254));
      complex3.getArgument();
      Complex complex7 = complex4.subtract(complex1);
      complex7.NaN.subtract(0.7853981633974483);
      complex5.isNaN();
      Complex complex8 = Complex.ZERO;
      complex8.sqrt1z();
      complex6.atan();
      complex3.abs();
      Complex complex9 = Complex.ONE;
      complex9.sqrt();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.negate();
      Complex complex12 = Complex.INF;
      complex8.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.atan();
      complex2.abs();
      complex1.sqrt();
      complex0.negate();
      Complex complex3 = Complex.INF;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2447.73747531041, 2447.73747531041);
      complex0.isInfinite();
      complex0.ONE.toString();
      Complex complex1 = Complex.valueOf(2447.73747531041, 3955.46762699024);
      Complex complex2 = complex1.add(3955.46762699024);
      complex0.tanh();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ONE;
      complex0.ONE.toString();
      complex0.ONE.pow(complex1);
      complex0.getArgument();
      Complex complex2 = complex1.ONE.createComplex(0.0, 709.22802);
      Complex complex3 = complex0.cosh();
      complex2.add(complex0);
      Complex complex4 = complex3.multiply(complex2);
      complex4.asin();
      complex1.tanh();
      Complex.valueOf((-1638.17834430102), (-1638.17834430102));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = complex1.multiply(complex3);
      complex3.asin();
      complex5.isNaN();
      complex2.reciprocal();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex6.sqrt();
      complex4.abs();
      complex7.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1075.22, 1075.22);
      Complex complex2 = complex0.add(complex1);
      complex2.reciprocal();
      Complex complex3 = complex0.atan();
      complex0.NaN.log();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.conjugate();
      complex0.getArgument();
      complex7.hashCode();
      Complex complex8 = Complex.valueOf(1075.22, 1075.22);
      complex8.ONE.negate();
      complex5.sinh();
      complex1.subtract(0.0);
      complex6.pow(1075.22);
      Complex.valueOf((-1184.0), 0.0);
      complex1.nthRoot(1212);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.getArgument();
      Complex complex3 = complex1.ONE.createComplex(0.0, 709.22802);
      complex0.cosh();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.cosh();
      complex0.toString();
      complex3.nthRoot(1);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex4.acos();
      complex6.getImaginary();
      complex5.reciprocal();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.multiply(complex2);
      complex4.multiply(11);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex2.subtract(complex3);
      Complex complex8 = complex4.tan();
      complex8.multiply(1273.1);
      complex1.add(complex6);
      complex7.hashCode();
      Complex complex9 = Complex.valueOf((double) (-2335), (double) (-2335));
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.log();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex3.sqrt();
      complex6.negate();
      Complex complex8 = complex5.conjugate();
      complex7.getArgument();
      complex6.hashCode();
      Complex.valueOf((-2447.99542), (-3706.9054419171607));
      complex8.negate();
      complex6.sinh();
      complex4.subtract(Double.NaN);
      complex4.pow(2801.32844274943);
      Complex.valueOf((-300.51898534007), 0.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      complex1.ZERO.exp();
      Complex complex2 = complex0.INF.add((-1764.5));
      Complex complex3 = complex0.cos();
      complex3.getArgument();
      Complex complex4 = complex2.createComplex(3.4768552372676957E-6, (-1135.221202192));
      complex4.cosh();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = new Complex(3409.4470637524487);
      Complex complex7 = complex6.asin();
      complex5.divide(complex7);
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.sinh();
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(1119.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex0.pow(complex3);
      complex0.readResolve();
      complex4.multiply(complex0);
      complex0.asin();
      complex0.isNaN();
      complex5.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY, 515.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1698.4, 1698.4);
      Complex complex1 = Complex.I;
      complex1.INF.tan();
      Complex complex2 = complex0.I.pow(complex1);
      complex2.INF.multiply((-3572.0));
      complex0.getField();
      complex0.createComplex(1698.4, (-604.64));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.INF.add((-123.042));
      Complex complex4 = complex0.cos();
      complex4.add(0.0018646327352237926);
      complex2.subtract(complex1);
      Complex complex5 = complex3.subtract(399.9);
      Complex complex6 = complex5.subtract((-716.3467071876532));
      Complex complex7 = complex4.negate();
      complex2.readResolve();
      complex7.add((-1669.3315743));
      complex2.subtract(0.0018646327352237926);
      Complex.valueOf((-1698.4));
      Complex complex8 = Complex.I;
      complex8.subtract(complex7);
      Complex complex9 = Complex.NaN;
      complex9.add(complex3);
      complex0.sqrt();
      complex6.abs();
      complex4.divide(1294.28);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.ZERO.sqrt1z();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.subtract((-9.51761338269325E-9));
      complex3.abs();
      Complex complex5 = complex3.subtract(Double.NaN);
      complex0.isInfinite();
      complex4.toString();
      complex5.multiply(337.23959);
      complex1.add(complex5);
      complex5.hashCode();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(268.14932, 268.14932);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.reciprocal();
      complex0.atan();
      complex4.atan();
      Complex complex5 = complex3.log();
      Complex complex6 = complex4.cosh();
      complex6.sqrt();
      Complex complex7 = complex0.negate();
      complex2.conjugate();
      complex7.getArgument();
      complex0.hashCode();
      complex3.ZERO.multiply((-2.356194490192345));
      Complex.valueOf((-2.356194490192345), 3607.74764);
      complex2.negate();
      complex5.sinh();
      Complex complex8 = complex1.subtract((-3179.379));
      complex8.pow(43.076581987);
      Complex.valueOf(1.5707963267948966, 391.69536658888);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1075.22, 1075.22);
      Complex complex2 = complex0.log();
      complex0.tanh();
      complex0.multiply(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.add((-1718.4));
      complex2.tan();
      Complex complex5 = complex0.tan();
      complex2.cos();
      complex3.createComplex(1075.22, (-1.847872222755186E-7));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.add((-20.0));
      complex6.subtract(complex2);
      Complex complex8 = complex0.subtract(520.984584585947);
      Complex complex9 = complex4.subtract((-20.0));
      complex5.negate();
      complex7.readResolve();
      complex8.add((-190.0368));
      Complex complex10 = Complex.I;
      complex10.subtract(2.2856938448387544E-49);
      Complex complex11 = Complex.valueOf(1075.22);
      complex6.subtract(complex11);
      complex4.add(complex0);
      complex9.sqrt();
      complex0.abs();
      complex3.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(1119.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      complex1.ONE.log();
      Complex complex4 = complex2.INF.log();
      complex4.NaN.hashCode();
      complex0.isNaN();
      complex0.toString();
      complex2.INF.sin();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.pow((-750.092989256));
      Complex complex7 = complex5.INF.multiply(0.0);
      complex5.getArgument();
      complex3.subtract(complex1);
      complex4.isNaN();
      Complex complex8 = complex7.subtract(1418.456392496031);
      Complex.valueOf(1119.0);
      Complex complex9 = complex8.subtract(complex5);
      complex0.add(complex9);
      complex1.sqrt();
      complex6.abs();
      complex3.divide(1418.456392496031);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.ZERO.exp();
      Complex complex2 = Complex.valueOf((-1764.5), (-123.042));
      Complex complex3 = complex0.cos();
      complex3.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.asin();
      complex4.isNaN();
      complex2.reciprocal();
      complex2.multiply(complex3);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1075.22, 1075.22);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.NaN.log();
      complex2.cosh();
      complex4.createComplex(6.283185307179586, 1075.22);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.add(1075.22);
      Complex complex8 = complex7.subtract(complex0);
      complex4.subtract(1214.101904362977);
      complex3.subtract(2595.0);
      Complex complex9 = complex6.negate();
      complex8.readResolve();
      Complex complex10 = complex9.add(1.0);
      complex5.subtract(1075.22);
      Complex.valueOf(2407.777);
      Complex complex11 = Complex.ONE;
      complex8.subtract(complex11);
      complex7.add(complex3);
      complex10.sqrt();
      complex5.abs();
      Complex complex12 = Complex.valueOf(Double.NaN, 1.0);
      complex12.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1290.8592455));
      complex0.toString();
      Complex complex1 = Complex.ONE;
      complex1.pow(complex0);
      complex0.getArgument();
      complex0.createComplex(444.20784161197025, 444.20784161197025);
      complex0.cosh();
      Complex complex2 = complex0.reciprocal();
      complex2.asin();
      Complex complex3 = complex1.divide(complex0);
      complex0.multiply(1);
      complex0.sinh();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(1119.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.ONE.log();
      complex0.pow(complex3);
      complex1.getArgument();
      complex2.createComplex(356.24448912, 1242.481168);
      Complex complex5 = complex0.cosh();
      complex1.reciprocal();
      complex2.asin();
      complex4.divide(complex2);
      Complex complex6 = complex3.multiply(1);
      complex5.sinh();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex2 = complex1.log();
      complex0.hashCode();
      complex1.isNaN();
      complex2.toString();
      complex1.sin();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.pow((-750.092989256));
      Complex complex5 = complex1.multiply((-487.380435937321));
      complex5.getArgument();
      complex0.subtract(complex2);
      complex4.isNaN();
      Complex complex6 = complex3.sqrt1z();
      complex4.atan();
      complex6.abs();
      complex0.sqrt();
      complex1.negate();
      Complex complex7 = Complex.INF;
      complex1.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.divide((-9.51761338269325E-9));
      Complex complex3 = complex0.subtract((-9.51761338269325E-9));
      complex2.abs();
      complex2.subtract(1.0506835692847031E8);
      complex0.isInfinite();
      complex1.ONE.toString();
      complex3.toString();
      Complex complex4 = (Complex)complex2.readResolve();
      complex1.equals(complex4);
      complex1.conjugate();
      Complex complex5 = complex4.sqrt();
      complex5.tanh();
      Complex.valueOf(0.0, 2.1859129781586158E123);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.atan();
      Complex complex3 = new Complex((-564.0846906459196));
      Complex complex4 = complex1.divide(complex3);
      complex2.ZERO.tan();
      Complex complex5 = complex3.sinh();
      complex2.log();
      Complex complex6 = complex4.log();
      complex2.hashCode();
      complex1.isNaN();
      complex4.toString();
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.exp();
      complex0.pow((-750.092989256));
      complex8.multiply((-1.1030897183911054E-8));
      complex5.getArgument();
      Complex complex10 = Complex.ONE;
      complex10.subtract(complex5);
      complex8.isNaN();
      complex9.sqrt1z();
      complex5.atan();
      Complex complex11 = Complex.valueOf((-1.1030897183911054E-8));
      complex11.abs();
      complex7.sqrt();
      Complex complex12 = complex7.negate();
      Complex complex13 = Complex.ZERO;
      complex12.divide(complex13);
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      complex1.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.createComplex(-0.0, (-2296.2));
      complex3.ZERO.subtract(complex1);
      Complex complex4 = Complex.valueOf((-247.7579273632061), 0.0);
      complex4.ONE.add(0.0);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex5.createComplex(0.0, 0.0);
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.ZERO.subtract(complex8);
      Complex complex10 = complex7.ZERO.pow(complex1);
      Complex complex11 = complex10.NaN.divide(complex6);
      Complex complex12 = complex11.NaN.subtract((-247.7579273632061));
      complex12.NaN.multiply(complex9);
      Complex complex13 = complex7.NaN.reciprocal();
      complex7.NaN.abs();
      complex6.getArgument();
      complex2.negate();
      Complex complex14 = complex3.atan();
      complex1.multiply(complex7);
      Complex.valueOf((-2296.2), 6.283185307179586);
      complex7.nthRoot(1);
      complex10.sqrt();
      complex14.createComplex(Double.NaN, 1);
      complex3.reciprocal();
      complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(709.22802);
      Complex complex1 = Complex.ONE;
      complex0.ONE.toString();
      complex0.ONE.pow(complex1);
      complex0.getArgument();
      complex1.ONE.createComplex(0.0, 709.22802);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.reciprocal();
      complex3.NaN.asin();
      complex1.divide(complex0);
      Complex complex4 = complex1.multiply(1);
      complex4.sinh();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1413.8282));
      Complex complex1 = complex0.I.negate();
      complex0.atan();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf((-235.128), 0.0);
      Complex complex3 = complex2.sqrt1z();
      complex3.NaN.divide(complex0);
      Complex complex4 = complex0.divide((-1055.13900333251));
      complex4.readResolve();
      complex4.INF.multiply(0.0);
      complex4.pow(complex1);
      complex1.asin();
      complex1.ONE.cosh();
      complex0.getReal();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex0.getField();
      Complex complex2 = complex0.ONE.sinh();
      complex1.NaN.negate();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.exp();
      Complex.valueOf(1825.90523732564, (-2.850217520533226E-270));
      Complex complex6 = complex4.sin();
      complex4.add(complex5);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex8.NaN.sin();
      complex9.ONE.asin();
      Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex7.ZERO.multiply(1);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex3.multiply(complex11);
      complex10.ZERO.negate();
      complex12.pow(complex0);
      complex11.nthRoot(7);
      Complex complex13 = complex11.multiply(complex6);
      Complex complex14 = complex10.reciprocal();
      complex13.abs();
      complex11.add(complex14);
      Complex complex15 = complex13.sin();
      complex4.log();
      complex12.isInfinite();
      complex15.isInfinite();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-3157.127004623999));
      Complex complex1 = complex0.pow((-3157.127004623999));
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = Complex.ONE;
      complex2.ONE.pow(complex3);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.nthRoot(1);
      Complex complex1 = new Complex((-973.41007392));
      Complex complex2 = complex1.ONE.conjugate();
      complex0.ZERO.atan();
      Complex complex3 = complex2.ONE.add((double) 1);
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex2.ONE.negate();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex1.ZERO.atan();
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex7.NaN.exp();
      complex9.NaN.toString();
      complex1.ONE.createComplex(20.0, 20.0);
      Complex complex10 = complex0.pow(complex1);
      Complex complex11 = complex0.multiply(complex10);
      complex11.NaN.asin();
      complex11.asin();
      Complex complex12 = complex10.subtract((-973.41007392));
      complex12.NaN.multiply(complex10);
      Complex.valueOf(0.0);
      complex3.subtract((-973.41007392));
      complex8.ZERO.nthRoot(385);
      Object object0 = new Object();
      complex3.equals(object0);
      complex8.multiply(2.0);
      complex4.toString();
      complex6.isNaN();
      complex3.isInfinite();
      Complex.valueOf(0.0);
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.ONE.subtract(0.6548244953155518);
      complex1.ZERO.getField();
      Complex complex4 = complex2.ONE.add(0.0);
      Complex complex5 = complex4.INF.conjugate();
      complex0.ZERO.multiply(0);
      Complex complex6 = complex0.add((-2392.33441));
      complex6.NaN.acos();
      Complex complex7 = complex1.multiply((-2145));
      complex7.INF.cos();
      complex6.log();
      complex3.hashCode();
      complex5.getReal();
      complex4.acos();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-2349.0768759044), (-1398.5));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(2525.798499, 1.5627006743114285E-7);
      Complex complex5 = complex4.INF.pow(complex0);
      Complex complex6 = complex3.multiply(complex2);
      complex6.ZERO.getArgument();
      complex5.getField();
      Complex complex7 = complex0.multiply(1139);
      Complex complex8 = complex7.ONE.tan();
      complex8.ZERO.sqrt();
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex9.negate();
      Complex.valueOf(0.0);
      Complex complex11 = complex1.negate();
      complex5.cos();
      Complex complex12 = complex11.cos();
      Complex.valueOf(2525.798499);
      complex12.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.add(0.0);
      complex0.multiply(complex8);
      complex10.conjugate();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.acos();
      Complex complex1 = complex0.reciprocal();
      complex0.ONE.hashCode();
      Complex complex2 = complex0.I.multiply(1880);
      Complex complex3 = complex2.ONE.createComplex(1880, 1880);
      complex0.getReal();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.subtract(Double.NaN);
      complex4.ZERO.reciprocal();
      complex0.sin();
      complex4.acos();
      Complex complex7 = complex5.sinh();
      complex7.getReal();
      complex7.multiply(Double.NaN);
      complex5.I.acos();
      Complex.valueOf(5.162248481759758E164);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.divide(complex8);
      Complex complex10 = complex9.I.sinh();
      complex7.I.reciprocal();
      complex10.ZERO.multiply(complex1);
      complex2.createComplex(Double.NaN, Double.NaN);
      Complex complex11 = complex5.tanh();
      complex11.NaN.multiply(complex7);
      complex3.isNaN();
      complex5.add(Double.NaN);
      complex6.tan();
      complex4.pow(1410.47158801);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.add(31.394623);
      complex0.ONE.sin();
      complex0.toString();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.ONE.tan();
      complex0.getImaginary();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.valueOf(31.394623);
      complex6.ONE.divide(1.0);
      Complex complex7 = complex1.ONE.sinh();
      complex3.abs();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex5.subtract(31.394623);
      complex9.ONE.negate();
      complex3.isNaN();
      complex9.hashCode();
      complex8.hashCode();
      Complex complex10 = complex7.sin();
      complex10.INF.pow(Double.NaN);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-1764.5), (-1764.5));
      Complex complex1 = complex0.acos();
      complex1.ZERO.exp();
      Complex complex2 = complex0.INF.add((-123.042));
      Complex complex3 = complex0.cos();
      complex3.readResolve();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.asin();
      complex4.isNaN();
      complex2.reciprocal();
      complex2.multiply(complex3);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(3826.616, 270.217931611);
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.divide(complex0);
      Complex complex2 = complex0.exp();
      complex2.ZERO.hashCode();
      Complex complex3 = complex2.ONE.multiply((-2062));
      complex2.ZERO.hashCode();
      complex1.NaN.sin();
      int int0 = 0;
      Complex complex4 = complex0.multiply(0);
      complex4.ONE.toString();
      complex2.NaN.getArgument();
      complex2.I.multiply(0);
      Complex complex5 = complex4.sin();
      complex4.multiply((double) (-2062));
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.INF.sinh();
      complex7.ONE.getArgument();
      complex5.NaN.tanh();
      complex2.getReal();
      complex6.abs();
      complex6.getField();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.ZERO.reciprocal();
      complex9.ZERO.conjugate();
      try { 
        complex4.nthRoot((-1106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,106
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.conjugate();
      Complex.valueOf(0.0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.divide(complex0);
      complex5.INF.divide(complex3);
      Complex complex6 = complex5.ONE.log();
      complex6.tanh();
      Complex complex7 = complex4.ONE.multiply(0.0);
      Complex complex8 = complex1.tanh();
      complex8.acos();
      Complex complex9 = complex0.pow((-1.0));
      Complex complex10 = complex3.cosh();
      complex10.ONE.acos();
      complex10.ZERO.multiply((-666));
      complex9.cos();
      complex3.getArgument();
      Complex complex11 = complex1.divide(complex9);
      complex2.multiply(complex0);
      complex7.pow(complex2);
      complex1.subtract(complex8);
      complex11.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      complex1.ZERO.asin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.sqrt();
      complex0.multiply(1);
      Complex complex4 = complex3.ZERO.atan();
      complex4.INF.subtract(complex2);
      complex3.ZERO.readResolve();
      Complex complex5 = complex3.ZERO.divide(730.4956869145);
      Complex complex6 = new Complex(2361.23873, 1);
      complex6.ZERO.createComplex(0.0, 2361.23873);
      complex5.add(complex6);
      Complex complex7 = complex3.NaN.sin();
      complex7.nthRoot(2209);
      Complex complex8 = Complex.valueOf((-20.0));
      complex0.ZERO.log();
      Complex complex9 = complex0.I.sqrt();
      complex9.ONE.negate();
      complex9.ONE.cosh();
      complex2.reciprocal();
      complex8.ONE.add(2361.23873);
      complex2.ZERO.readResolve();
      complex2.getImaginary();
      complex8.acos();
      complex2.multiply(Double.NaN);
      complex2.createComplex(357.765523549, 357.765523549);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      complex1.I.sin();
      Complex complex2 = complex1.NaN.subtract(380.3);
      complex0.I.divide(380.3);
      Complex complex3 = complex0.subtract(2.0);
      complex3.sqrt();
      complex3.NaN.toString();
      Complex complex4 = complex3.add(3132.758485544);
      complex0.add(complex4);
      Object object0 = new Object();
      complex4.equals(object0);
      complex0.multiply(380.3);
      Complex.valueOf(3132.758485544, 2764.756680026559);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.ONE.createComplex(1, 1);
      Complex complex2 = complex0.negate();
      complex1.ZERO.nthRoot(1);
      complex0.INF.nthRoot(1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.INF.reciprocal();
      complex6.pow(148.675977465);
      complex6.ONE.getField();
      complex3.add(complex4);
      complex4.INF.tan();
      Complex complex7 = Complex.valueOf((-1986.28100328432), (-816.2958));
      complex7.ZERO.sin();
      complex4.createComplex(0.0, (-2540.2328627952));
      complex0.sqrt1z();
      Complex complex8 = complex4.exp();
      complex8.I.createComplex(0.0, 0.0);
      complex8.ONE.conjugate();
      complex4.sqrt1z();
      complex0.exp();
      complex1.asin();
      complex1.isInfinite();
      complex4.asin();
      complex5.sqrt();
      Complex complex9 = complex8.createComplex(1, (-2540.2328627952));
      complex9.createComplex((-2540.2328627952), (-2829.7666441185715));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.sin();
      complex0.ONE.nthRoot(974);
      Complex complex3 = complex0.NaN.divide((double) 974);
      complex2.multiply(complex3);
      complex0.INF.getArgument();
      complex0.INF.toString();
      complex0.toString();
      Complex complex4 = complex1.add(1.0);
      Complex complex5 = complex4.NaN.cosh();
      complex2.equals(complex1);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex1.exp();
      complex5.I.add(complex6);
      Complex complex8 = Complex.valueOf(0.0, (-4018.077322));
      complex2.ONE.add(complex8);
      complex3.sinh();
      Complex complex9 = complex6.tanh();
      complex4.multiply(974);
      complex6.createComplex(974, 0.0);
      complex5.exp();
      complex8.getArgument();
      complex2.pow(1.0);
      complex7.negate();
      complex9.getImaginary();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.907, 5.907);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.ZERO.createComplex(5.907, 5.907);
      complex0.hashCode();
      Complex complex4 = complex1.divide(complex0);
      complex0.divide(5.907);
      complex4.NaN.negate();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex0.INF.multiply(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      complex6.I.sqrt();
      complex2.getField();
      Complex complex8 = complex7.divide(2172.3);
      complex8.ZERO.log();
      complex8.I.cosh();
      complex3.I.multiply((-1));
      Complex complex9 = complex7.sinh();
      complex9.ONE.conjugate();
      complex2.I.negate();
      complex6.abs();
      complex3.readResolve();
      complex6.log();
      complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.481106736845E-57);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(3.481106736845E-57);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.I.divide(3.481106736845E-57);
      complex2.I.getArgument();
      Complex complex5 = complex4.I.multiply(3.481106736845E-57);
      complex1.NaN.pow(complex0);
      Complex complex6 = complex1.add(3.481106736845E-57);
      Complex complex7 = complex0.multiply(3.481106736845E-57);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex1.cos();
      complex6.ZERO.asin();
      Complex complex10 = Complex.NaN;
      complex10.ZERO.sinh();
      Complex complex11 = complex10.I.pow(3.481106736845E-57);
      complex11.I.multiply(65);
      complex9.ZERO.add(complex10);
      complex0.toString();
      Complex complex12 = complex6.pow(complex7);
      Complex complex13 = complex12.pow((-1895.44178084));
      complex13.I.negate();
      complex12.NaN.tan();
      Complex complex14 = complex8.sqrt();
      complex14.NaN.readResolve();
      Complex complex15 = complex3.multiply(3.481106736845E-57);
      Complex complex16 = complex8.sinh();
      complex9.acos();
      Complex complex17 = complex15.conjugate();
      complex17.I.add(complex11);
      complex16.isNaN();
      complex17.isNaN();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(1329.0832357447);
      Complex complex2 = complex0.sin();
      complex1.INF.subtract(0.0);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex4.ZERO.abs();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex1.add(1329.0832357447);
      complex2.NaN.toString();
      Complex complex7 = complex6.I.cosh();
      complex4.ZERO.acos();
      Complex complex8 = complex0.sinh();
      complex8.INF.hashCode();
      complex3.toString();
      complex4.NaN.cosh();
      complex6.multiply(153.56029178347902);
      complex2.pow(complex1);
      complex0.asin();
      Complex complex9 = complex0.subtract(0.0);
      complex3.tanh();
      Complex complex10 = complex7.sqrt1z();
      complex10.ZERO.add(0.0);
      Complex complex11 = complex9.divide(complex4);
      complex3.tan();
      complex2.sqrt();
      Complex.valueOf((-5373.7297040811));
      complex11.subtract(complex9);
      complex3.cosh();
      complex11.hashCode();
      complex5.acos();
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.NaN.sqrt();
      complex0.getField();
      complex1.sin();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex3.INF.acos();
      complex0.nthRoot(1);
      complex0.hashCode();
      Complex complex6 = complex1.sqrt1z();
      complex6.NaN.getField();
      complex1.hashCode();
      complex3.nthRoot(1);
      complex5.equals(complex6);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex4.sqrt1z();
      complex3.ONE.asin();
      Complex complex9 = complex5.subtract((double) 1);
      complex2.NaN.asin();
      complex9.ZERO.subtract(0.0);
      complex7.INF.acos();
      Complex complex10 = complex8.ONE.divide((-5.885186277410878E-9));
      Complex.valueOf((-5.885186277410878E-9));
      complex7.tan();
      complex8.asin();
      complex10.readResolve();
      Complex complex11 = complex0.sinh();
      complex11.add(0.0);
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.divide((-9.51761338269325E-9));
      Complex complex4 = complex0.subtract((-9.51761338269325E-9));
      complex3.abs();
      complex3.subtract(1.0506835692847031E8);
      complex0.isInfinite();
      complex4.toString();
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.INF.reciprocal();
      complex2.abs();
      Complex complex6 = complex3.cosh();
      complex1.getArgument();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.negate();
      complex0.sqrt();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-83.578));
      complex0.tan();
      complex0.exp();
      complex0.getArgument();
      Complex complex2 = complex1.conjugate();
      complex1.tan();
      complex0.abs();
      complex2.pow(2980.67411660845);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf(964.070835, 0.0);
      complex1.sqrt();
      complex1.NaN.createComplex(1.34217729E8, 1.34217729E8);
      complex0.pow(2793.4024207);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ONE.sqrt();
      complex4.ONE.tanh();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3034.276));
      Complex complex1 = complex0.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex1.subtract((-3034.276));
      Complex complex5 = complex4.NaN.sqrt();
      complex4.ONE.readResolve();
      complex4.INF.getArgument();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.INF.subtract(complex3);
      complex2.multiply((-286));
      complex5.sqrt1z();
      complex2.readResolve();
      complex7.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(268.14932, 268.14932);
      Complex complex1 = complex0.I.cos();
      complex1.INF.divide(complex0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.multiply(complex2);
      complex0.INF.atan();
      Complex complex5 = complex3.add(268.14932);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex0.ZERO.tan();
      Complex complex8 = complex7.ZERO.cos();
      complex2.ZERO.createComplex(3.4637009373878283E-174, 0.0);
      Complex complex9 = Complex.ZERO;
      complex6.INF.add(1294.28);
      complex5.INF.subtract(complex9);
      Complex complex10 = complex6.ZERO.subtract(0.0);
      complex10.ONE.subtract(2407.777);
      complex2.NaN.negate();
      complex4.NaN.readResolve();
      Complex complex11 = complex5.add(268.14932);
      complex11.subtract(268.14932);
      Complex complex12 = Complex.valueOf(268.14932);
      complex5.subtract(complex4);
      Complex complex13 = complex2.add(complex12);
      complex13.sqrt();
      complex13.abs();
      complex8.divide(274.0885628575957);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(444.20784161197025, 2.7865534085810115E-8);
      Complex complex1 = complex0.exp();
      complex1.conjugate();
      Complex complex2 = complex1.asin();
      complex2.readResolve();
      complex0.multiply((-279));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.atan();
      complex0.readResolve();
      Complex complex3 = complex2.multiply(6.283185307179586);
      Complex complex4 = complex3.sinh();
      Complex.valueOf(6.283185307179586);
      complex4.ZERO.reciprocal();
      Complex complex5 = complex2.multiply(6.283185307179586);
      complex4.isInfinite();
      Complex complex6 = complex3.INF.sqrt1z();
      Complex complex7 = complex5.multiply((-259));
      complex7.NaN.createComplex(3181.4371, (-2525.6));
      complex3.add(complex5);
      complex6.getArgument();
      complex2.sqrt();
      Complex complex8 = complex6.subtract(complex3);
      complex8.NaN.cosh();
      complex1.divide(complex8);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex1.tanh();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.INF.conjugate();
      complex2.ZERO.multiply(complex0);
      complex0.ONE.multiply((-2335));
      Complex complex4 = complex3.INF.pow(complex2);
      complex4.INF.subtract(complex0);
      complex3.ZERO.tan();
      Complex complex5 = complex2.ZERO.subtract(complex1);
      complex5.I.toString();
      int int0 = (-139);
      try { 
        complex1.nthRoot((-139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -139
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1325.741812101169, 1325.741812101169);
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex3.sqrt1z();
      complex2.INF.subtract(complex1);
      Complex complex5 = complex3.I.exp();
      complex0.equals(object0);
      complex4.INF.cos();
      Complex complex6 = complex1.ONE.subtract(1325.741812101169);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex1.sinh();
      complex8.NaN.add((-1066.95346239));
      complex0.subtract(complex4);
      complex6.pow(1325.741812101169);
      complex8.pow(complex5);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3652.605880542, (-760.0091940382296));
      Complex complex1 = complex0.NaN.log();
      complex0.I.readResolve();
      complex1.ZERO.sin();
      Complex complex2 = complex1.I.pow((-760.0091940382296));
      complex1.ONE.abs();
      complex2.NaN.sin();
      complex0.add(3652.605880542);
      complex2.toString();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8555183410644531);
      complex0.I.readResolve();
      complex0.getArgument();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-859.274873082878), 0.0);
      Complex complex1 = Complex.ONE;
      complex1.I.negate();
      Complex.valueOf(0.0, (-859.274873082878));
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.ONE.sin();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.ONE.multiply(17);
      complex4.readResolve();
      complex4.INF.toString();
      complex0.sqrt();
      Complex complex5 = complex0.divide(complex3);
      complex1.exp();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(3073.472895864005);
      Complex complex1 = Complex.valueOf(0.0, 3073.472895864005);
      complex0.NaN.subtract(complex1);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      complex2.sinh();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.cos();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.ONE.cosh();
      complex4.INF.exp();
      Complex complex5 = complex0.tan();
      complex2.ZERO.add(0.0);
      complex5.INF.multiply(complex1);
      Complex complex6 = complex5.I.add(complex2);
      complex5.I.cosh();
      complex5.I.toString();
      complex0.nthRoot(1);
      complex0.divide(complex4);
      complex5.acos();
      complex6.getImaginary();
      complex3.divide(complex2);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.210951328277588);
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1585.925030791));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.multiply(0.0);
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex3.I.sin();
      assertEquals(1.1752011936438014, complex4.getImaginary(), 0.01);
      
      complex3.NaN.getArgument();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.I.createComplex(0.0, 0.0);
      complex8.getImaginary();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      complex8.getArgument();
      Complex complex11 = complex1.cos();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex10.log();
      Complex complex13 = complex12.ONE.pow(complex9);
      Complex complex14 = complex13.ONE.cosh();
      Complex complex15 = complex8.multiply(complex6);
      Complex complex16 = complex7.divide(complex10);
      complex15.toString();
      Complex complex17 = complex5.atan();
      assertSame(complex17, complex16);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      
      complex2.subtract(complex7);
      Complex complex18 = complex2.multiply(complex7);
      complex10.toString();
      complex0.exp();
      Complex complex19 = complex9.conjugate();
      Complex complex20 = complex19.NaN.acos();
      Complex complex21 = complex18.multiply(8.98079409878202E234);
      Complex complex22 = complex14.tan();
      complex22.readResolve();
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      assertEquals(36.071404402473284, complex22.getReal(), 0.01);
      assertTrue(complex13.equals((Object)complex11));
      
      Complex complex23 = complex12.multiply(4.566672575206695E-8);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.equals((Object)complex21));
      assertFalse(complex10.equals((Object)complex20));
      assertEquals(Double.POSITIVE_INFINITY, complex23.getReal(), 0.01);
  }
}
