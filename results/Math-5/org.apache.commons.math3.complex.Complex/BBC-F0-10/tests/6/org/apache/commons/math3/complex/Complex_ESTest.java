/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:49:51 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = Complex.valueOf((double) 7, (-6.788169932297778E170));
      Complex complex3 = complex1.tan();
      complex3.ZERO.cosh();
      complex0.nthRoot(2486);
      Complex.valueOf((-6.788169932297778E170));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 7.868447965383903E-63);
      complex0.I.multiply(7.868447965383903E-63);
      Complex complex1 = complex0.ONE.subtract(7.868447965383903E-63);
      Complex complex2 = complex0.I.reciprocal();
      complex1.NaN.abs();
      Complex complex3 = complex0.subtract(0.3594330038102771);
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex3.equals(complex1);
      Complex complex5 = complex4.multiply(1523);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex3.createComplex((-1133.294457322), Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.multiply(complex6);
      complex2.subtract(300336.1637383348);
      complex5.ZERO.readResolve();
      complex8.ZERO.tan();
      Complex complex9 = complex1.reciprocal();
      complex9.equals((Object) null);
      complex7.ZERO.atan();
      complex5.I.pow(0.3594330038102771);
      Complex complex10 = complex5.pow(2.414213562373095);
      complex2.add(complex10);
      complex3.toString();
      complex7.negate();
      complex1.asin();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-9.045));
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5322494618529475E15, 2.5322494618529475E15);
      Complex complex1 = complex0.negate();
      complex0.subtract(complex1);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.createComplex(8292386.600988511, 8292386.600988511);
      complex2.I.getField();
      complex2.ONE.tanh();
      complex0.readResolve();
      Complex complex4 = complex0.multiply(2706.58173);
      complex1.I.add(2963.096955);
      complex4.I.multiply(2.5322494618529475E15);
      Complex complex5 = Complex.valueOf(109.2, 0.6905817003766437);
      complex1.readResolve();
      complex5.I.getArgument();
      Complex complex6 = complex5.createComplex((-4243.039450631463), 453.0583739);
      complex6.I.subtract(complex1);
      complex6.toString();
      complex4.NaN.readResolve();
      complex1.tan();
      complex2.divide(complex4);
      complex0.readResolve();
      Complex complex7 = complex3.sqrt();
      complex0.asin();
      complex2.tanh();
      complex7.multiply(complex0);
      Complex.valueOf(1.266124730926393E15);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2036.220346744, 2036.220346744);
      complex0.ZERO.sqrt();
      Complex complex1 = complex0.NaN.pow((-20.0));
      Complex.valueOf(2036.220346744, 1939.853869);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.asin();
      complex0.exp();
      complex0.add(7.116529297140491E7);
      Complex complex4 = complex3.cos();
      complex3.tan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex5.sin();
      complex7.add(7.116529297140491E7);
      complex0.subtract(7.116529297140491E7);
      complex0.subtract(complex7);
      complex1.ZERO.acos();
      Complex.valueOf(7.116529297140491E7, (-8.741139170029572E-9));
      complex4.sin();
      complex2.sin();
      complex6.abs();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(complex0);
      Complex complex1 = complex0.conjugate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.subtract(45.514456926415946);
      complex0.NaN.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.I.divide((-3971.422800988618));
      Complex complex3 = complex0.multiply(45.514456926415946);
      complex3.NaN.conjugate();
      complex0.toString();
      complex0.NaN.subtract(3.552713678800501E-15);
      Complex complex4 = complex0.conjugate();
      complex4.I.multiply(7);
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex2.subtract(45.514456926415946);
      Complex complex7 = complex6.NaN.createComplex(3.552713678800501E-15, 0.4349733591079712);
      Complex complex8 = complex7.INF.divide(complex5);
      complex5.I.subtract(complex6);
      complex8.NaN.divide(complex7);
      complex0.abs();
      complex5.acos();
      try { 
        complex6.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      complex0.sinh();
      Complex complex1 = complex0.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3282890219894906E230));
      complex0.INF.getField();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.ONE.multiply(2145885396);
      complex1.nthRoot(2145885396);
      Complex complex3 = complex2.NaN.divide(complex1);
      complex0.ONE.asin();
      complex1.I.getArgument();
      Complex complex4 = complex0.pow(1.1551692104697154E-8);
      complex2.hashCode();
      Complex complex5 = Complex.valueOf((-1.3282890219894906E230), 6.283185307179586);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex4.I.subtract(complex1);
      Complex complex8 = complex7.NaN.multiply((-1259));
      Complex complex9 = complex8.acos();
      complex7.NaN.pow(complex1);
      Complex complex10 = complex0.reciprocal();
      complex2.reciprocal();
      Complex complex11 = complex9.add((-352.6179282));
      complex11.INF.readResolve();
      complex3.subtract(complex0);
      complex0.acos();
      complex10.divide(915.119651);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.acos();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.readResolve();
      Complex complex2 = Complex.ZERO;
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex.valueOf(20.0, 20.0);
      complex0.tanh();
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.acos();
      complex2.ONE.createComplex((-584071.6388636669), (-584071.6388636669));
      Complex complex4 = complex2.divide(Double.POSITIVE_INFINITY);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex0.pow(Double.POSITIVE_INFINITY);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.acos();
      complex2.ZERO.negate();
      complex1.abs();
      complex1.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.subtract(Double.NaN);
      Complex complex5 = complex4.ZERO.acos();
      complex5.I.add(complex1);
      Complex complex6 = complex1.INF.log();
      complex6.NaN.asin();
      complex1.INF.add(Double.NaN);
      Complex complex7 = complex1.pow(Double.NaN);
      complex3.toString();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.pow(Double.NaN);
      complex9.ZERO.sqrt1z();
      complex8.add(complex1);
      Complex.valueOf((double) (-5322));
      try { 
        complex0.nthRoot((-5322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,322
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(196);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex1.divide(complex3);
      Complex complex4 = new Complex((-33.7), (-1740093.628338));
      Complex complex5 = complex4.cosh();
      complex3.pow(complex5);
      complex5.add(complex0);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      complex0.I.multiply(196);
      complex0.exp();
      Complex complex1 = complex0.acos();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(2.0);
      Complex complex3 = complex1.divide(complex2);
      complex3.INF.cosh();
      Complex complex4 = complex1.pow(complex0);
      complex1.add(complex0);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.ONE.tanh();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      complex0.createComplex(0.12372243469459224, (-2653.7322));
      complex2.ZERO.exp();
      complex1.conjugate();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-555.788), (-555.788));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf((-555.788), 1.8089985847473145);
      complex2.isInfinite();
      Complex complex4 = Complex.ZERO;
      complex3.tanh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex((-972.0), Double.NaN);
      complex1.log();
      complex7.divide(1.000000000000013);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-555.788), (-555.788));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.reciprocal();
      complex1.add(Double.NaN);
      Complex complex3 = new Complex((-555.788));
      complex3.isInfinite();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = Complex.ZERO;
      complex6.add(complex3);
      complex5.sinh();
      complex7.createComplex((-555.788), 1.6747356805175311E193);
      complex5.createComplex((-555.788), Double.NaN);
      Complex complex9 = Complex.I;
      complex9.getField();
      complex1.acos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex.valueOf(172.51300176, (-1.0));
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.acos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(6.823612979731878E-8, (-2511.2854135632));
      complex2.multiply(653.922891);
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.abs();
      complex0.readResolve();
      Object object0 = new Object();
      complex1.equals(complex0);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(16.103117191152485, 1.227621078491211);
      Complex complex2 = complex1.tanh();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex1.reciprocal();
      complex4.ZERO.cosh();
      complex2.getReal();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.ONE;
      Complex.valueOf(1.227621078491211);
      Complex complex7 = complex0.multiply(16.103117191152485);
      Complex complex8 = complex5.subtract(complex2);
      complex8.negate();
      complex6.tanh();
      complex8.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.add(172.51300176);
      complex2.isInfinite();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.tanh();
      complex4.divide(complex1);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.NaN;
      complex2.add(complex7);
      complex5.sinh();
      complex3.createComplex((-1.6114314525832115E-7), (-1.6114314525832115E-7));
      Complex complex8 = complex5.createComplex(1.8089985847473145, 2743.2349624806);
      complex5.getField();
      Complex complex9 = Complex.I;
      complex9.acos();
      complex4.sqrt();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.log();
      complex1.ZERO.divide(complex0);
      Complex complex2 = Complex.valueOf(1356.0, 1356.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.cos();
      complex0.toString();
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = complex6.sin();
      complex7.NaN.sqrt1z();
      Complex complex8 = complex6.atan();
      complex8.cosh();
      Complex.valueOf(1356.0);
      Complex complex9 = complex6.sinh();
      complex9.INF.divide((-145.0));
      complex5.toString();
      Complex complex10 = complex3.add(1356.0);
      Complex complex11 = Complex.I;
      complex10.ZERO.getArgument();
      complex6.I.add(complex11);
      complex4.NaN.acos();
      complex10.NaN.atan();
      Complex complex12 = complex8.createComplex(Double.POSITIVE_INFINITY, (-1680.444000788));
      complex6.subtract(Double.POSITIVE_INFINITY);
      complex12.add(1356.0);
      complex0.asin();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(932.763, 932.763);
      Complex complex1 = Complex.I;
      complex1.sqrt();
      Complex complex2 = Complex.ONE;
      Complex.valueOf(932.763, Double.NaN);
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      complex3.getImaginary();
      Complex complex4 = Complex.I;
      Object object0 = new Object();
      Complex complex5 = Complex.I;
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(172.51300176, (-1.0));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      complex2.nthRoot(1159);
      complex1.readResolve();
      complex1.sin();
      Complex complex3 = complex0.cosh();
      complex1.isInfinite();
      complex2.getArgument();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1200.851), (-1200.851));
      double double0 = 1.8089985847473145;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(2.5871706674611595E-4);
      double double1 = 1443.3;
      Complex complex3 = complex2.add(1443.3);
      complex0.isInfinite();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.I;
      complex1.tanh();
      complex5.divide(complex3);
      Complex complex6 = Complex.ZERO;
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      complex2.add(complex1);
      Complex complex3 = complex2.sinh();
      complex2.createComplex(0.0, 0.0);
      complex2.createComplex(6.283185307179586, 6.283185307179586);
      complex2.getField();
      complex2.acos();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-555.788), (-555.788));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.reciprocal();
      complex1.nthRoot(3394);
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(0.9999981430377881, 0.9999981430377881);
      Complex complex5 = complex4.sin();
      complex1.cosh();
      complex2.isInfinite();
      complex3.nthRoot(651);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-555.788), (-555.788));
      Complex complex1 = Complex.NaN;
      complex0.getField();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.add(complex0);
      complex1.toString();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.pow(complex0);
      complex4.tanh();
      complex6.cos();
      complex6.reciprocal();
      complex7.nthRoot(2206);
      complex6.readResolve();
      complex7.sin();
      complex4.isInfinite();
      complex7.nthRoot(2206);
      Complex complex8 = Complex.INF;
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(2.187487435090023);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.tanh();
      complex2.readResolve();
      Complex complex4 = Complex.valueOf((-518.9));
      Complex complex5 = complex4.reciprocal();
      complex5.abs();
      complex2.getReal();
      complex2.sqrt();
      Complex complex6 = complex1.add(complex2);
      complex3.exp();
      Complex.valueOf(0.0017959927469598763, Double.NaN);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.sqrt1z();
      complex4.createComplex(0.975136081243196, 1442.5612246);
      complex5.getArgument();
      complex2.abs();
      complex6.getImaginary();
      complex8.equals(complex3);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex0.ONE.exp();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.INF.multiply(0.0);
      complex2.ONE.pow(2936.976);
      Complex complex4 = complex2.I.asin();
      complex4.NaN.abs();
      Complex complex5 = complex0.INF.divide(complex3);
      Complex complex6 = complex5.NaN.subtract(0.0);
      complex3.INF.add(2936.976);
      complex0.I.sqrt();
      Complex complex7 = complex2.INF.sin();
      Complex complex8 = complex0.ONE.pow(complex2);
      complex7.cosh();
      complex1.isInfinite();
      complex6.nthRoot(516);
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-555.788), (-555.788));
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(1.8089985847473145, 1.227621078491211);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = (Complex)complex3.readResolve();
      Complex complex6 = complex2.reciprocal();
      complex0.abs();
      complex2.toString();
      complex6.getReal();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex2.add(complex6);
      Complex complex9 = complex5.exp();
      Complex.valueOf(0.37848885034270857, 2.1858142063550155E-134);
      complex7.acos();
      Complex complex10 = Complex.NaN;
      complex9.sqrt1z();
      complex5.createComplex((-723.875994965161), 2.0736172194624895E-222);
      complex3.getArgument();
      complex8.abs();
      complex10.getImaginary();
      Complex complex11 = Complex.NaN;
      complex11.equals(complex4);
      complex10.sqrt();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.reciprocal();
      complex0.abs();
      complex0.getReal();
      complex0.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf(1.0, (-1473.33099));
      Complex complex7 = complex2.acos();
      complex5.sqrt1z();
      Complex complex8 = complex7.createComplex(853.1734302964651, 148.3);
      complex5.getArgument();
      complex4.abs();
      complex1.getImaginary();
      Complex.valueOf(148.3);
      Object object0 = new Object();
      Complex complex9 = new Complex(148.3);
      complex8.equals(complex9);
      complex6.sqrt();
      complex6.pow(Double.NaN);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = new Complex(492.324755602949, (-1246.09));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.multiply(complex2);
      complex4.isInfinite();
      Complex complex5 = Complex.ONE;
      complex5.hashCode();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.tanh();
      Complex complex8 = Complex.INF;
      complex2.divide(complex8);
      Complex complex9 = complex7.add(complex8);
      complex1.sinh();
      Complex complex10 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex10.createComplex((-20.0), 1323.972836890612);
      complex10.createComplex(20.0, 6.283185307179586);
      complex7.getField();
      complex9.acos();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 7.868447965383903E-63);
      complex0.I.multiply(1448.382);
      Complex complex1 = complex0.ONE.subtract(7.868447965383903E-63);
      complex0.I.reciprocal();
      double double0 = 0.3594330038102771;
      complex1.NaN.abs();
      Complex complex2 = complex0.subtract(0.3594330038102771);
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.equals(complex1);
      complex3.multiply(1523);
      complex2.reciprocal();
      Complex complex4 = complex2.createComplex((-1133.294457322), 1448.382);
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(177.35560491048662, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = Complex.ONE;
      complex1.reciprocal();
      complex1.I.abs();
      complex0.getReal();
      Complex complex4 = Complex.INF;
      complex4.nthRoot(1371);
      complex4.tan();
      Complex complex5 = complex0.pow(complex1);
      Complex.valueOf(1316.0, 1532.346579);
      complex0.multiply(1379);
      complex5.sinh();
      Complex complex6 = Complex.I;
      complex2.hashCode();
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = new Complex((-617800.601888), (-1945.623492013));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.tanh();
      complex1.readResolve();
      complex1.reciprocal();
      Complex complex4 = Complex.ONE;
      complex4.abs();
      Complex complex5 = Complex.INF;
      complex5.getReal();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = new Complex(1.0225689628581036E-86);
      Complex complex8 = complex7.add(complex2);
      complex8.NaN.pow(complex7);
      Complex complex9 = new Complex(1.0225689628581036E-86, 1.0225689628581036E-86);
      Complex.valueOf(1215.84, 1215.84);
      complex7.acos();
      Complex complex10 = new Complex(92.548026481742, 555.788);
      complex10.sqrt1z();
      complex6.createComplex(1183.7884968956953, (-1945.623492013));
      complex3.getArgument();
      complex2.abs();
      complex2.getImaginary();
      Complex complex11 = new Complex(661.0, 1215.84);
      complex9.equals(complex11);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(177.35560491048662, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tanh();
      complex2.INF.readResolve();
      complex1.I.abs();
      complex0.getReal();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.add(complex2);
      Complex.valueOf(177.35560491048662, 1442.5612246);
      complex4.ONE.acos();
      complex0.NaN.sqrt1z();
      Complex complex5 = complex0.createComplex(177.35560491048662, 2.0);
      complex5.NaN.getArgument();
      complex5.abs();
      complex0.getImaginary();
      complex1.equals(complex1);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.createComplex(0.0, 80.0);
      complex2.ONE.add(0.0);
      complex1.abs();
      complex0.divide(1.4142135623730951);
      complex2.sqrt1z();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 80.0);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex1.multiply(2147482800);
      complex0.hashCode();
      Complex complex6 = Complex.ONE;
      complex6.reciprocal();
      complex5.readResolve();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-555.788), (-555.788));
      Complex complex1 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex2 = complex0.add(complex1);
      complex1.toString();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.pow(complex5);
      complex6.tanh();
      Complex complex7 = complex3.cos();
      complex1.NaN.multiply(7307);
      Complex complex8 = complex1.reciprocal();
      complex0.add(24.17671157985685);
      Complex complex9 = Complex.I;
      complex9.sqrt1z();
      complex7.subtract((double) 7307);
      complex8.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(172.51300176, (-1.0));
      Complex.valueOf(1502.90399);
      Complex complex1 = complex0.ZERO.multiply(812);
      complex1.NaN.subtract(complex0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(177.35560491048662, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tanh();
      complex2.INF.readResolve();
      Complex complex3 = complex1.reciprocal();
      complex1.I.abs();
      complex0.getReal();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.add(complex2);
      complex4.I.exp();
      Complex.valueOf(177.35560491048662, 1442.5612246);
      Complex complex6 = complex0.acos();
      complex3.sqrt1z();
      Complex complex7 = complex6.createComplex(1057.6807523, (-542.25649));
      complex7.getArgument();
      complex0.abs();
      complex7.getImaginary();
      complex0.equals(complex5);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-555.788), (-555.788));
      Complex complex1 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex2 = complex0.add(complex1);
      complex1.toString();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.pow(complex5);
      complex6.tanh();
      complex3.cos();
      complex5.reciprocal();
      complex2.nthRoot(2206);
      complex6.readResolve();
      complex4.sin();
      complex6.isInfinite();
      complex5.nthRoot(1383);
      Complex complex7 = Complex.INF;
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-542.25649), (-542.25649));
      Complex complex1 = complex0.subtract((-542.25649));
      Complex complex2 = Complex.valueOf((-542.25649));
      Complex complex3 = complex2.INF.multiply((-542.25649));
      complex3.I.cos();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.divide(1084.4887);
      complex0.hashCode();
      Complex complex6 = complex0.NaN.sinh();
      complex6.I.abs();
      Complex complex7 = complex1.pow(121.7659384642608);
      complex7.INF.asin();
      Object object0 = new Object();
      complex4.NaN.abs();
      complex6.equals(object0);
      Complex complex8 = complex4.multiply((-1300));
      complex8.INF.conjugate();
      complex5.isNaN();
      complex4.sqrt();
      Complex complex9 = complex5.ZERO.sinh();
      Complex complex10 = complex9.I.multiply(complex8);
      complex8.I.negate();
      complex0.getField();
      complex5.isInfinite();
      complex1.isNaN();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-555.788), (-555.788));
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(1.8089985847473145, 1.227621078491211);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.tanh();
      complex3.readResolve();
      Complex complex5 = complex2.reciprocal();
      complex0.abs();
      complex0.getReal();
      complex1.sqrt();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.add(complex0);
      complex3.exp();
      Complex.valueOf((-358.95), (-0.20784701252195456));
      complex0.acos();
      Complex complex8 = complex0.sqrt1z();
      complex5.createComplex(1.6927716732025146, 2457.555976);
      complex4.getArgument();
      complex4.abs();
      complex7.getImaginary();
      Complex complex9 = Complex.I;
      Object object0 = new Object();
      complex9.equals(object0);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-555.788), (-555.788));
      Complex complex1 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex2 = complex0.add(complex1);
      complex1.toString();
      Complex complex3 = complex2.conjugate();
      complex2.sqrt();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf((-555.788));
      complex5.tanh();
      Complex complex6 = complex3.cos();
      complex6.INF.atan();
      complex1.NaN.multiply(7307);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex3.NaN.atan();
      complex3.abs();
      complex3.pow(complex5);
      Complex complex9 = complex7.tan();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.NaN.divide(complex2);
      Complex complex12 = complex9.I.divide(complex10);
      Complex complex13 = complex0.sqrt1z();
      complex2.I.negate();
      complex13.ZERO.negate();
      Complex.valueOf((-456.30314), (-555.788));
      complex13.subtract(complex1);
      complex12.readResolve();
      complex7.sin();
      complex11.getField();
      complex11.log();
      complex10.multiply(1295);
      Complex complex14 = Complex.NaN;
      complex10.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-555.788));
      Complex complex1 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex2 = complex0.add(complex1);
      complex1.toString();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.pow(complex5);
      complex6.tanh();
      complex3.cos();
      complex1.NaN.multiply(7309);
      Complex complex7 = complex3.sinh();
      complex3.abs();
      complex3.pow(complex6);
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.INF;
      complex9.NaN.divide(complex2);
      Complex complex10 = complex8.I.divide(complex9);
      Complex complex11 = complex0.sqrt1z();
      complex2.I.negate();
      complex11.ZERO.negate();
      Complex.valueOf(0.0, 3712.6229283674);
      complex4.subtract(complex3);
      complex4.readResolve();
      complex7.sin();
      complex4.getField();
      complex9.log();
      complex8.multiply((-420));
      Complex complex12 = Complex.NaN;
      complex10.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.createComplex(0.9298734950321937, 0.9298734950321937);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = new Complex((-456.30314));
      complex6.abs();
      complex6.divide((-3.7979660725865874E274));
      complex5.sqrt1z();
      Complex complex7 = complex4.pow(complex5);
      complex4.NaN.subtract(0.9298734950321937);
      complex7.multiply(1);
      complex5.hashCode();
      complex3.reciprocal();
      complex0.readResolve();
      complex5.conjugate();
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-5.207000323380292E-8));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ONE.multiply(1342);
      Complex complex3 = complex2.ZERO.subtract((-1.889488909834863E-8));
      Complex complex4 = Complex.valueOf(2031.68583313);
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex0.multiply(1);
      complex0.hashCode();
      complex5.reciprocal();
      complex2.readResolve();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.ONE.negate();
      complex0.ONE.createComplex((-1.0), (-1.0));
      complex1.reciprocal();
      complex1.nthRoot(3400);
      Complex complex2 = new Complex((-1796.85243630881), 0.9871086951291462);
      complex2.ONE.exp();
      complex2.readResolve();
      complex1.sin();
      Complex complex3 = Complex.valueOf((-1796.85243630881));
      complex3.cosh();
      Complex complex4 = Complex.valueOf(3.141839556519699E-4);
      complex4.isInfinite();
      // Undeclared exception!
      complex1.nthRoot(3400);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      complex1.negate();
      Complex complex3 = complex0.reciprocal();
      complex2.abs();
      complex3.divide(Double.NaN);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex2.pow(complex5);
      complex6.multiply(251);
      complex4.reciprocal();
      complex3.readResolve();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8);
      complex0.I.hashCode();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.tan();
      complex1.INF.abs();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex2.NaN.exp();
      complex3.atan();
      Complex complex5 = complex0.pow(2357.9224);
      complex0.abs();
      complex3.getArgument();
      Complex complex6 = Complex.valueOf(1.573691633515306E-8);
      Complex complex7 = complex6.I.tanh();
      complex7.I.readResolve();
      complex7.I.exp();
      complex4.equals(complex6);
      complex5.nthRoot(1);
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-505.886046085));
      complex0.I.acos();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.sinh();
      complex0.getField();
      Complex complex3 = complex1.ZERO.multiply(1435);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex1.negate();
      complex4.ONE.getArgument();
      Complex complex6 = complex5.I.tan();
      complex0.NaN.hashCode();
      complex3.I.sinh();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.ONE.exp();
      complex0.getReal();
      Complex complex9 = complex2.subtract(complex4);
      complex2.pow(2244.33342);
      complex5.getReal();
      complex3.tanh();
      Complex complex10 = complex0.asin();
      complex10.sqrt1z();
      complex9.multiply(1435);
      complex6.isInfinite();
      complex8.equals(complex1);
      complex0.pow(complex6);
      complex7.divide((-505.886046085));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.tan();
      complex1.ZERO.add(0.0);
      complex2.INF.add(complex1);
      Complex complex3 = Complex.valueOf(9.420348186357043E-9, 0.0);
      Complex complex4 = complex0.atan();
      complex4.INF.tanh();
      complex0.isInfinite();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      complex7.pow(0.0);
      complex1.readResolve();
      complex6.divide(complex3);
      complex1.abs();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.atan();
      complex2.ONE.getField();
      Complex complex3 = complex1.ONE.divide(complex0);
      complex1.ZERO.sqrt();
      complex3.INF.nthRoot(2821);
      complex0.readResolve();
      complex3.divide(complex1);
      complex0.readResolve();
      double double0 = 0.0;
      complex1.tanh();
      complex3.divide(0.0);
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(3229.952744, 3229.952744);
      complex0.equals(complex1);
      Complex complex2 = complex0.acos();
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(177.35560491048662, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tanh();
      complex2.INF.readResolve();
      Complex complex3 = complex1.reciprocal();
      complex1.I.abs();
      complex0.getReal();
      Complex complex4 = complex1.sqrt();
      complex4.add(complex2);
      Complex complex5 = complex4.I.exp();
      Complex.valueOf(177.35560491048662, 1442.5612246);
      complex5.ONE.acos();
      complex0.NaN.sqrt1z();
      Complex complex6 = complex0.createComplex(177.35560491048662, 2.0);
      complex6.NaN.getArgument();
      complex6.abs();
      complex0.getImaginary();
      complex3.equals(complex1);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.ONE.exp();
      Complex complex2 = complex1.ONE.sinh();
      complex2.ZERO.add(complex1);
      complex0.abs();
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      complex3.ZERO.sinh();
      complex1.abs();
      complex1.conjugate();
      Complex complex4 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.subtract(complex4);
      complex4.nthRoot(262);
      Complex complex6 = complex0.pow(0.0);
      complex4.I.subtract(3903.7879);
      complex4.getField();
      complex4.exp();
      complex6.abs();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      complex2.ZERO.reciprocal();
      complex2.nthRoot(3400);
      complex2.readResolve();
      Complex complex3 = complex1.sin();
      complex3.cosh();
      complex3.isInfinite();
      complex1.nthRoot(651);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.sinh();
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.NaN.toString();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.INF.acos();
      complex0.hashCode();
      complex0.getReal();
      complex3.toString();
      complex2.readResolve();
      Complex complex4 = Complex.valueOf((-1422.8), 0.0);
      complex4.I.multiply(complex2);
      Complex complex5 = complex3.multiply((-1422.8));
      complex5.INF.pow(0.0);
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.INF.log();
      complex7.ONE.getField();
      Complex complex8 = complex1.atan();
      complex8.ONE.add(1970.3272558);
      Complex complex9 = complex8.acos();
      complex9.NaN.readResolve();
      complex9.conjugate();
      complex0.cosh();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.065941333770752, 2.065941333770752);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.exp();
      complex1.hashCode();
      Complex complex5 = complex4.multiply((-400));
      Complex complex6 = Complex.valueOf(1828.3196996741462, 2.065941333770752);
      Complex complex7 = complex6.INF.createComplex(1828.3196996741462, 1828.3196996741462);
      complex7.I.createComplex((-400), 1828.3196996741462);
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.valueOf(59.1);
      complex3.ONE.atan();
      complex4.I.add(complex2);
      Complex complex10 = complex9.INF.cosh();
      complex10.I.atan();
      complex3.INF.sinh();
      complex5.pow((double) (-400));
      Complex complex11 = complex0.cos();
      Complex complex12 = complex6.add(complex8);
      Complex complex13 = complex12.cos();
      Complex complex14 = complex10.tan();
      complex14.ZERO.pow(complex8);
      complex11.abs();
      complex9.multiply((-400));
      complex4.divide(0.0);
      Complex complex15 = complex1.createComplex(3.9119768476464842, (-1345.988));
      complex15.ONE.negate();
      complex6.hashCode();
      complex14.log();
      complex13.cosh();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4831.316));
      Complex complex1 = complex0.INF.reciprocal();
      complex1.INF.pow(complex0);
      Complex complex2 = complex1.NaN.subtract(0.0);
      complex0.getImaginary();
      Complex complex3 = complex2.subtract(complex1);
      complex3.sqrt();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-583.3769677));
      Complex complex1 = complex0.INF.createComplex(0.0, (-1984.3671136));
      Complex complex2 = complex1.NaN.createComplex(318.80741027134, (-1984.3671136));
      Complex complex3 = complex0.ONE.atan();
      complex0.INF.asin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.ZERO.sqrt1z();
      complex2.I.atan();
      complex0.add(complex4);
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.ONE.sqrt1z();
      complex0.add((-583.3769677));
      complex2.pow(complex6);
      complex2.multiply(418);
      complex7.add(318.80741027134);
      complex2.isInfinite();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex3.NaN.asin();
      complex4.INF.multiply((-90));
      complex1.I.readResolve();
      complex0.ZERO.nthRoot(1);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex0.multiply(0);
      complex6.sinh();
      complex1.log();
      complex7.hashCode();
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      complex1.ZERO.toString();
      Complex complex2 = complex0.ONE.add(0.0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.divide(145.0);
      complex0.ONE.asin();
      complex4.getImaginary();
      Complex complex5 = complex0.add(complex4);
      complex4.add(complex1);
      complex2.getImaginary();
      Complex complex6 = complex3.subtract(145.0);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.INF.sinh();
      complex8.ZERO.sin();
      complex7.sin();
      complex5.multiply(complex7);
      Complex complex9 = complex6.divide(complex2);
      complex9.NaN.cos();
      Complex complex10 = complex6.exp();
      complex5.exp();
      Complex complex11 = complex10.multiply(3295);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1157.30378252489);
      Complex complex1 = Complex.valueOf(1157.30378252489, 4467.85264255123);
      complex1.NaN.getField();
      complex0.ZERO.getField();
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.cosh();
      Complex complex3 = complex1.ONE.tanh();
      complex0.readResolve();
      complex3.I.negate();
      Complex complex4 = Complex.valueOf((-4023.5403), 4467.85264255123);
      complex0.getReal();
      complex1.subtract(1157.30378252489);
      Complex complex5 = complex4.I.log();
      complex5.ZERO.reciprocal();
      complex5.NaN.hashCode();
      complex1.log();
      Complex complex6 = complex0.sqrt1z();
      complex6.getReal();
      try { 
        complex2.nthRoot((-748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -748
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(375.11);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.pow(complex1);
      complex0.negate();
      complex1.NaN.divide(complex0);
      complex3.I.subtract(complex0);
      complex3.INF.readResolve();
      Complex complex4 = complex0.log();
      complex4.NaN.getArgument();
      complex1.log();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sinh();
      Complex complex1 = complex0.ZERO.multiply(206);
      Complex complex2 = complex1.ZERO.divide((double) 206);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.sinh();
      complex4.NaN.asin();
      complex4.INF.cosh();
      Complex.valueOf((double) 206);
      Complex complex5 = complex2.divide((double) 206);
      complex5.ONE.cos();
      Complex complex6 = complex3.tanh();
      complex3.sin();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.INF.reciprocal();
      complex0.tan();
      complex2.multiply((-518.9));
      complex0.asin();
      complex1.log();
      complex1.multiply(1035);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex.valueOf(1295.6243214799, 1295.6243214799);
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.NaN.cos();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3830.3531608), (-3830.3531608));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.multiply((-554));
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex0.asin();
      complex2.INF.pow(complex3);
      complex2.readResolve();
      Complex complex7 = complex6.I.multiply(1675);
      complex7.I.readResolve();
      complex1.ZERO.add((double) (-554));
      Complex complex8 = complex1.ZERO.pow(complex0);
      complex1.isNaN();
      complex3.abs();
      complex7.INF.readResolve();
      complex4.isNaN();
      complex7.equals("d3Z`t4~<\"<^Xz #ZFP");
      complex4.subtract(complex5);
      complex8.getReal();
      Complex complex9 = complex8.reciprocal();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      complex1.ONE.sinh();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.divide(1658.094943801725);
      complex3.NaN.getField();
      Complex complex4 = complex0.exp();
      complex4.NaN.cosh();
      Complex complex5 = complex0.sqrt1z();
      complex5.ZERO.tanh();
      Complex.valueOf((-1166.4357937637));
      complex4.atan();
      complex3.getField();
      complex1.toString();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = Complex.valueOf(1.0469679832458496);
      complex0.I.multiply((-332.600364407241));
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex0.multiply(complex3);
      complex0.I.abs();
      Complex complex6 = complex1.ZERO.createComplex(1.0469679832458496, 0.0);
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex6.INF.pow(1.0469679832458496);
      complex8.NaN.log();
      complex8.NaN.toString();
      Complex complex9 = complex6.INF.sinh();
      complex7.ONE.readResolve();
      complex7.NaN.sin();
      complex2.pow(complex5);
      complex5.nthRoot(1056);
      complex2.hashCode();
      complex1.equals((Object) null);
      Complex complex10 = complex4.tanh();
      complex10.tan();
      complex10.I.subtract((-1007.18457695331));
      complex5.getImaginary();
      complex10.hashCode();
      complex5.cosh();
      complex6.hashCode();
      complex6.subtract(complex9);
      Complex.valueOf(347.871195186379);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.ZERO.multiply(complex0);
      complex4.add(complex1);
      Complex complex5 = complex1.add(complex2);
      complex5.ONE.createComplex((-2190.2), (-2399.418623354));
      complex5.INF.getField();
      Complex complex6 = complex1.pow(complex2);
      complex6.ZERO.tanh();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.pow(complex0);
      Complex complex9 = complex2.NaN.cosh();
      complex8.NaN.exp();
      Complex.valueOf(0.0, 2.0);
      complex3.INF.asin();
      Complex complex10 = Complex.valueOf((-1865.1072726557543));
      complex8.equals("");
      complex0.ONE.tanh();
      Complex complex11 = complex3.conjugate();
      complex11.I.sin();
      complex11.ONE.sqrt();
      complex2.isNaN();
      Complex complex12 = complex3.conjugate();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex13.INF.negate();
      complex12.toString();
      complex10.add(0.0);
      complex9.subtract(2.0);
      complex14.multiply(1121);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(2491.02353);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.atan();
      complex3.I.hashCode();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      complex2.ZERO.getField();
      complex0.isInfinite();
      Complex complex5 = complex0.multiply(2491.02353);
      complex1.isNaN();
      Complex complex6 = Complex.valueOf((-3524.0190769), (-3524.0190769));
      Complex complex7 = complex6.ZERO.add(2491.02353);
      Complex complex8 = complex7.ZERO.sinh();
      complex1.isInfinite();
      Complex.valueOf(469.485818483, 469.485818483);
      complex1.divide(complex5);
      Complex complex9 = complex8.tan();
      complex8.NaN.divide(0.0);
      complex5.divide(2491.02353);
      Complex complex10 = complex7.createComplex((-3524.0190769), 2491.02353);
      complex10.acos();
      Complex complex11 = complex9.pow(469.485818483);
      complex11.sinh();
      complex11.I.getArgument();
      complex3.multiply(494);
      complex4.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      complex1.ZERO.cos();
      complex1.INF.multiply(4399.7599);
      Complex complex2 = Complex.valueOf(Double.NEGATIVE_INFINITY);
      complex2.ONE.tanh();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.equals(complex3);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.valueOf(20.0, 4399.7599);
      Complex complex7 = complex5.ONE.tanh();
      Complex complex8 = complex7.NaN.log();
      complex5.atan();
      Complex complex9 = complex3.multiply(107);
      complex9.reciprocal();
      complex6.getArgument();
      complex8.multiply(1.7884841356632925E49);
      complex3.getReal();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide((-4370.649585539337));
      complex1.INF.toString();
      Complex complex2 = complex1.divide((-4370.649585539337));
      Complex complex3 = complex2.INF.asin();
      complex3.ZERO.hashCode();
      complex3.ZERO.acos();
      Complex complex4 = complex0.INF.sin();
      complex0.INF.getField();
      complex4.NaN.getField();
      Complex complex5 = complex0.cos();
      complex1.I.multiply(complex3);
      Complex complex6 = complex5.I.subtract(complex4);
      complex6.NaN.log();
      complex0.getField();
      complex2.cos();
      complex2.subtract(complex1);
      complex5.toString();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.sinh();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      complex1.ONE.pow(2936.976);
      Complex complex3 = complex1.I.asin();
      complex3.NaN.abs();
      Complex complex4 = complex0.INF.divide(complex2);
      complex4.NaN.subtract(0.0);
      Complex complex5 = complex0.I.sqrt();
      complex1.INF.sin();
      complex0.ONE.pow(complex1);
      complex0.multiply(2038);
      complex1.tan();
      Complex complex6 = Complex.valueOf(0.0);
      complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = (-2287.04239);
      Complex complex0 = Complex.valueOf((-1.0), (-2287.04239));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.divide(complex1);
      complex3.multiply(complex2);
      Complex complex4 = complex3.ONE.conjugate();
      int int0 = (-741);
      try { 
        complex4.I.nthRoot((-741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -741
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.ONE.negate();
      complex0.ONE.createComplex((-1.0), (-1.0));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.reciprocal();
      complex3.abs();
      complex2.divide((-1.0));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.I.multiply(1);
      complex0.hashCode();
      complex4.reciprocal();
      complex0.readResolve();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      complex0.ONE.multiply((-972.0580692138569));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ZERO.divide((-972.0580692138569));
      complex0.multiply(complex2);
      complex1.sinh();
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-1200.851), (-1200.851));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.NaN.add((-1200.851));
      complex1.multiply(complex0);
      complex0.isInfinite();
      complex0.I.hashCode();
      Complex complex3 = Complex.ZERO;
      complex3.I.tanh();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex5.I.sinh();
      complex5.NaN.createComplex(0.0, (-1200.851));
      complex3.createComplex((-1200.851), (-1200.851));
      complex2.getField();
      complex1.acos();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-542.25649), (-542.25649));
      Complex complex1 = complex0.subtract((-542.25649));
      Complex complex2 = Complex.valueOf((-542.25649));
      Complex complex3 = complex2.INF.multiply((-542.25649));
      complex3.I.cos();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.divide(1084.4887);
      complex0.hashCode();
      Complex complex6 = complex0.NaN.sinh();
      complex6.I.abs();
      Complex complex7 = complex1.pow(121.7659384642608);
      complex7.INF.asin();
      Object object0 = new Object();
      complex4.NaN.abs();
      complex6.equals(object0);
      Complex complex8 = complex4.multiply((-1300));
      complex8.INF.conjugate();
      complex5.isNaN();
      complex4.sqrt();
      Complex complex9 = complex5.ZERO.sinh();
      complex9.I.multiply(complex8);
      complex0.getField();
      complex5.isInfinite();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-555.788), (-555.788));
      Complex complex1 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex2 = complex0.add(complex1);
      complex1.toString();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex6.tanh();
      assertEquals((-0.9988741582503989), complex7.getReal(), 0.01);
      assertEquals((-0.003214457504039015), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex3.cos();
      assertEquals((-3.474062339391704E240), complex8.getReal(), 0.01);
      assertEquals(1.1355401722729437E241, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex1.NaN.multiply(7307);
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex3.NaN.atan();
      assertSame(complex11, complex9);
      
      complex3.abs();
      complex3.pow(complex6);
      Complex complex12 = complex10.tan();
      Complex complex13 = Complex.INF;
      complex13.NaN.divide(complex2);
      Complex complex14 = complex12.I.divide(complex13);
      Complex complex15 = complex0.sqrt1z();
      complex2.I.negate();
      complex15.ZERO.negate();
      assertEquals(555.7884498119807, complex15.getReal(), 0.01);
      assertEquals((-555.7875501883833), complex15.getImaginary(), 0.01);
      
      Complex complex16 = Complex.valueOf(0.0, 3712.6229283674);
      Complex complex17 = complex4.subtract(complex3);
      assertEquals(565.523644810032, complex17.getReal(), 0.01);
      
      complex4.readResolve();
      Complex complex18 = complex10.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex18.getImaginary(), 0.01);
      
      complex4.getField();
      Complex complex19 = complex13.log();
      assertEquals(Double.POSITIVE_INFINITY, complex19.getReal(), 0.01);
      
      Complex complex20 = complex12.multiply((-420));
      assertEquals((-420.0), complex20.getImaginary(), 0.01);
      
      Complex complex21 = Complex.NaN;
      complex14.pow(complex21);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.equals((Object)complex16));
      assertEquals(1.1816387260546308E240, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.subtract((-1092.7419));
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex0.add((-1092.7419));
      Complex complex5 = complex1.tanh();
      assertSame(complex5, complex4);
      
      Complex complex6 = complex1.ZERO.subtract(complex0);
      Complex complex7 = complex2.createComplex((-1092.7419), (-2729.0));
      assertSame(complex2, complex3);
      
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.ONE.negate();
      assertFalse(complex9.isInfinite());
      assertSame(complex8, complex6);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals((-1.0), complex9.getReal(), 0.01);
      
      Complex complex10 = complex1.log();
      assertSame(complex10, complex5);
      assertFalse(complex10.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1969.781), 0.0);
      Complex complex1 = Complex.valueOf((-1969.781), 0.0);
      Complex complex2 = complex1.INF.exp();
      assertTrue(complex2.isNaN());
      
      Complex complex3 = complex0.subtract(complex1);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1969.781), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.add(1841.94391);
      Complex complex2 = complex1.ONE.subtract((-480.3414133262));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex1.subtract(complex4);
      double double0 = complex2.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertEquals(481.3414133262, complex2.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf(1841.94391, (-837.76));
      Complex complex7 = complex6.pow(complex5);
      assertSame(complex7, complex1);
      assertEquals(1841.94391, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-837.76), complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
  }
}
