/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:59:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.32385972507074634, 0.32385972507074634);
      Complex complex2 = new Complex(1987.428567, (-7.81295459930537E-72));
      Complex complex3 = complex2.pow(2.414213562373095);
      Complex complex4 = complex3.acos();
      complex3.sqrt();
      Complex complex5 = complex2.multiply(2950);
      complex0.tan();
      Complex complex6 = new Complex(381.9977382, 6.283185307179586);
      Complex complex7 = complex3.sqrt();
      complex6.getArgument();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.I;
      Complex complex10 = complex4.sinh();
      complex1.acos();
      complex5.cosh();
      complex10.hashCode();
      complex7.tan();
      complex10.nthRoot(2950);
      Complex complex11 = complex1.log();
      complex11.NaN.getField();
      Complex complex12 = Complex.valueOf(381.9977382, 4.2905524794606875E-36);
      complex12.atan();
      complex6.pow(4.2905524794606875E-36);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1060.4);
      complex0.tan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(273, Double.POSITIVE_INFINITY);
      complex0.multiply(273);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(273, Double.POSITIVE_INFINITY);
      complex0.multiply((double) 273);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = new Complex((-21.411283404471117), (-166.9282508));
      complex0.hashCode();
      complex0.tan();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2010.263229));
      complex0.readResolve();
      Complex complex1 = complex0.divide((-2010.263229));
      complex1.cosh();
      Complex complex2 = complex0.createComplex(2.0, Double.POSITIVE_INFINITY);
      complex2.NaN.readResolve();
      complex1.multiply(complex2);
      complex2.getField();
      Complex complex3 = complex2.sqrt();
      complex0.divide(2.0);
      complex3.multiply((-2010.263229));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(273, Double.POSITIVE_INFINITY);
      complex0.hashCode();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(9.96515154838562E-8, 9.96515154838562E-8);
      int int0 = 2081642218;
      // Undeclared exception!
      complex0.nthRoot(2081642218);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.add(1.0);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = Complex.ONE;
      complex6.nthRoot(1022);
      complex4.hashCode();
      complex3.abs();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.subtract((double) 1022);
      complex8.multiply(complex5);
      Complex.valueOf(Double.NaN, 498.174224);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 498.174224);
      complex9.getField();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex5.subtract(0.3877306580543518);
      complex7.readResolve();
      Complex.valueOf(1.0);
      complex10.add(1.0);
      complex0.multiply(881);
      Complex complex12 = Complex.I;
      Complex complex13 = Complex.NaN;
      complex13.getImaginary();
      complex11.getReal();
      complex7.getField();
      Complex complex14 = Complex.I;
      complex14.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex0.I.createComplex(2.72972449891179E-45, 2.72972449891179E-45);
      Complex complex2 = complex1.multiply(2023);
      complex2.I.hashCode();
      Complex complex3 = complex2.exp();
      complex3.NaN.subtract(complex0);
      complex1.atan();
      complex3.readResolve();
      complex1.subtract((double) 2023);
      Complex.valueOf(1608.210043312565);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.825712712114668E-10, 4.825712712114668E-10);
      Complex complex1 = complex0.pow((-7.81295459930537E-72));
      Complex complex2 = complex0.acos();
      complex0.ONE.divide((-1517.0));
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = new Complex(4.825712712114668E-10);
      complex3.divide(complex4);
      complex1.acos();
      complex2.hashCode();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.I.subtract(28.10504714443048);
      complex1.I.multiply(complex0);
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(complex1);
      complex1.equals(complex0);
      complex3.exp();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4861.0);
      complex0.pow(1.0008915595451275);
      Complex complex1 = new Complex(4861.0, 4861.0);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 11.61598703288748);
      complex0.hashCode();
      Complex complex1 = new Complex((-1160226168), (-1160226168));
      complex1.NaN.atan();
      Complex complex2 = complex1.pow(complex0);
      complex2.I.getField();
      Complex complex3 = Complex.valueOf((-806.15399402));
      complex3.NaN.getField();
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 1044.2594047563;
      Complex complex0 = Complex.valueOf(1044.2594047563, 1044.2594047563);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = Complex.ZERO;
      complex1.getField();
      complex0.abs();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.multiply(complex3);
      complex4.negate();
      Complex complex5 = complex1.cosh();
      complex4.cos();
      Complex complex6 = complex1.tanh();
      Complex complex7 = new Complex(0.0);
      complex6.conjugate();
      complex5.multiply((-1228.55016));
      complex0.reciprocal();
      complex2.exp();
      complex6.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(414.018506881884);
      Complex complex1 = new Complex(1022);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ZERO.pow(414.018506881884);
      Complex complex3 = complex0.add((double) 1022);
      Complex complex4 = complex3.ZERO.subtract(complex0);
      complex0.I.nthRoot(1022);
      complex0.pow(complex1);
      complex4.getField();
      Complex complex5 = Complex.valueOf((double) 1022);
      Complex complex6 = Complex.ZERO;
      complex2.getField();
      complex5.abs();
      Complex complex7 = Complex.INF;
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 11.61598703288748);
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-1160226168));
      complex1.NaN.atan();
      Complex complex2 = new Complex(6.228360532517162E-8, 2126.041925775422);
      Complex complex3 = complex1.sinh();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-577.0));
      complex0.INF.abs();
      Complex complex2 = complex0.pow((-2174.60276054372));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.NaN.multiply(0.6461620330810547);
      complex5.cos();
      Complex complex6 = complex5.ZERO.createComplex(1.0, 0.6461620330810547);
      Complex complex7 = complex4.NaN.tan();
      complex3.pow(complex4);
      complex4.atan();
      complex2.ONE.reciprocal();
      complex0.acos();
      complex3.reciprocal();
      Complex complex8 = complex1.cos();
      complex8.ZERO.conjugate();
      Complex complex9 = complex4.pow(0.6461620330810547);
      complex8.tan();
      complex5.ZERO.divide(complex7);
      complex9.divide(complex1);
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 11.61598703288748);
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-1160226168));
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.pow(complex0);
      complex3.I.getField();
      Complex complex4 = Complex.valueOf(11.61598703288748, (-3971.4157841282013));
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex1.sqrt1z();
      complex1.abs();
      complex2.getArgument();
      complex0.readResolve();
      complex6.exp();
      complex2.sqrt();
      Complex.valueOf(1.5518584251403809);
      complex3.createComplex((-3.4829517943661266E-9), (-2648.35));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.ONE;
      complex3.tanh();
      complex3.toString();
      Complex.valueOf((-855.2379406585151));
      Complex complex9 = new Complex(Double.NaN);
      Complex complex10 = complex5.asin();
      complex8.readResolve();
      complex10.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.I.pow(20.0);
      Complex complex2 = complex1.I.pow(1044483.0);
      complex2.I.readResolve();
      complex0.I.conjugate();
      complex2.ONE.conjugate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.valueOf(5.5996586041611455E262, (-491.718187628325));
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex7.ONE.sinh();
      complex5.ONE.reciprocal();
      Complex complex9 = complex4.pow(complex6);
      complex5.add(20.0);
      Complex complex10 = complex3.divide(855.0);
      complex9.getField();
      complex8.sinh();
      complex10.tanh();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(907.6, (-6.22836197265283E-8));
      Complex complex1 = Complex.I;
      Complex.valueOf((-749.980516965966));
      Complex complex2 = complex1.conjugate();
      Complex.valueOf(233.95001494);
      complex1.multiply(3.4688299108856403E-133);
      Complex complex3 = complex2.reciprocal();
      complex3.exp();
      complex2.createComplex((-749.980516965966), (-6.22836197265283E-8));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(414.018506881884);
      Complex complex1 = new Complex(414.018506881884, (-82.2));
      Complex complex2 = complex1.multiply((-1160226168));
      complex0.atan();
      Complex complex3 = complex1.pow(complex0);
      complex2.getField();
      Complex complex4 = Complex.valueOf(700.608658927);
      complex3.getField();
      complex2.abs();
      Complex complex5 = complex4.multiply(complex2);
      complex3.multiply((-806.15399402));
      complex2.negate();
      complex2.cosh();
      Complex complex6 = complex5.cos();
      complex4.tanh();
      Complex.valueOf((-3894701.25), (-82.2));
      Complex complex7 = new Complex((-3894701.25));
      complex6.tan();
      Complex complex8 = Complex.valueOf(700.608658927, 0.002157059827482044);
      complex8.tanh();
      Complex complex9 = Complex.ZERO;
      complex4.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 11.61598703288748);
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-1160226168));
      complex1.NaN.atan();
      Complex complex2 = complex1.pow(complex0);
      complex2.I.getField();
      Complex complex3 = Complex.valueOf((-806.15399402));
      complex3.NaN.getField();
      complex1.ZERO.abs();
      Complex complex4 = complex1.INF.multiply(complex3);
      Complex complex5 = complex4.ZERO.multiply(0.0);
      complex1.negate();
      Complex complex6 = complex5.cosh();
      complex1.cos();
      complex5.tanh();
      Complex complex7 = Complex.valueOf(1190.9820473247928, 746.9);
      Complex complex8 = new Complex(0.0);
      complex6.tan();
      complex0.tanh();
      complex7.readResolve();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.exp();
      complex1.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(612.431, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cosh();
      complex0.toString();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.subtract((-4.7208848667217906E221));
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = new Complex((-4.7208848667217906E221));
      complex0.getField();
      complex3.tanh();
      Complex complex7 = Complex.NaN;
      complex6.readResolve();
      complex0.conjugate();
      Complex complex8 = complex6.multiply(complex5);
      Complex complex9 = complex0.add((-4.7208848667217906E221));
      complex7.multiply((-2098));
      Complex complex10 = complex8.tan();
      complex10.getImaginary();
      complex3.getReal();
      complex9.getField();
      Complex.valueOf(1.0663697110471944E-8);
      complex4.getImaginary();
      complex9.asin();
      complex10.atan();
      complex1.add((double) (-2098));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 11.61598703288748);
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-1160226168));
      Complex complex2 = complex1.NaN.atan();
      complex2.ONE.reciprocal();
      Complex complex3 = complex1.pow(complex0);
      complex3.toString();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.conjugate();
      complex6.sin();
      complex5.negate();
      complex1.cosh();
      Complex complex7 = complex2.cos();
      complex7.tanh();
      Complex.valueOf(746.9, (double) (-1160226168));
      complex2.add(1.5625030994415283);
      complex4.tan();
      Complex complex8 = complex3.tanh();
      Complex complex9 = Complex.valueOf(0.3662964701652527, (-1.0));
      complex9.divide(complex8);
      complex8.subtract(11.61598703288748);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2260.122974173));
      Complex complex1 = new Complex((-2260.122974173), (-2260.122974173));
      complex0.hashCode();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.INF.divide(complex2);
      complex3.getField();
      Complex complex5 = Complex.valueOf(415.563283229419);
      complex1.getField();
      complex5.abs();
      Complex complex6 = Complex.valueOf((-1147.65122), (-806.15399402));
      complex1.multiply(complex6);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.pow((-1469.298332571));
      Complex complex9 = complex4.add((-806.15399402));
      complex1.tan();
      complex7.INF.sinh();
      complex9.getArgument();
      Complex.valueOf((-813.921574));
      complex8.getReal();
      Complex complex10 = complex2.divide((-806.15399402));
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2140.0217897614);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.conjugate();
      complex2.add(2140.0217897614);
      complex1.sqrt();
      Complex complex3 = Complex.valueOf(6088.031511495);
      complex2.createComplex(582.425476144573, 5598.945);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(5598.945);
      complex6.tanh();
      complex0.toString();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(0.46670228242874146);
      Complex complex8 = Complex.valueOf(2.0);
      complex8.asin();
      complex3.readResolve();
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(5598.945, 0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.sqrt1z();
      complex2.getField();
      complex0.cos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.pow(5598.945);
      Complex complex6 = Complex.valueOf((-1749.3), (-1749.3));
      complex6.sinh();
      Complex complex7 = Complex.I;
      complex2.tanh();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.reciprocal();
      complex4.conjugate();
      Complex complex10 = complex5.pow(complex3);
      Complex complex11 = complex8.add(complex7);
      complex10.subtract(complex7);
      complex4.multiply(complex11);
      Complex complex12 = Complex.I;
      complex12.cosh();
      complex5.getArgument();
      Complex.valueOf(0.0);
      Complex complex13 = complex4.sinh();
      complex9.sqrt1z();
      complex13.multiply(363);
      complex3.divide(0.9999999999258005);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 11.61598703288748);
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-1160226168));
      complex1.NaN.atan();
      Complex complex2 = complex1.pow(complex0);
      complex2.I.getField();
      Complex complex3 = Complex.valueOf((-806.15399402));
      complex3.NaN.getField();
      complex1.ZERO.abs();
      Complex complex4 = complex1.INF.multiply(complex3);
      Complex complex5 = complex4.ZERO.multiply(0.0);
      complex5.multiply(1.6260850497928914E-4);
      Complex complex6 = complex4.ONE.pow(0.0);
      Complex complex7 = complex0.tan();
      Complex.valueOf(0.0);
      Complex complex8 = complex1.atan();
      complex8.acos();
      complex6.abs();
      complex8.cosh();
      complex2.multiply(1.8597132378953187E-240);
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.INF;
      complex10.multiply(complex8);
      complex1.abs();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(414.018506881884);
      Complex complex1 = new Complex(1022);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ZERO.pow(414.018506881884);
      Complex complex4 = new Complex(414.018506881884);
      complex4.getField();
      Complex complex5 = Complex.I;
      complex5.cos();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.add(complex4);
      Complex complex8 = Complex.ONE;
      Complex.valueOf((double) 1022, 414.018506881884);
      Complex complex9 = complex2.pow(complex6);
      complex1.sqrt1z();
      complex3.abs();
      complex8.getArgument();
      complex7.readResolve();
      complex2.exp();
      complex9.sqrt();
      Complex complex10 = Complex.valueOf(29.261543716258632);
      complex9.createComplex(0.46670228242874146, 29.261543716258632);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.ONE;
      complex12.tanh();
      complex4.toString();
      Complex.valueOf(0.46670228242874146);
      Complex complex13 = new Complex(4063.892219226);
      complex10.asin();
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(414.018506881884);
      Complex complex1 = new Complex(1022);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ZERO.pow(414.018506881884);
      Complex complex4 = complex0.add((double) 1022);
      complex4.ZERO.subtract(complex0);
      complex0.I.nthRoot(1022);
      complex0.hashCode();
      complex0.abs();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.subtract((double) 1022);
      Complex complex7 = complex6.INF.multiply(complex4);
      complex7.NaN.getField();
      Complex complex8 = complex0.NaN.tanh();
      Complex complex9 = complex5.subtract(4861.0);
      complex9.isInfinite();
      Complex complex10 = complex5.I.atan();
      complex10.readResolve();
      complex5.sin();
      complex1.sqrt1z();
      complex1.cosh();
      Complex complex11 = complex2.multiply(414.018506881884);
      Complex complex12 = Complex.ONE;
      complex11.multiply(complex7);
      complex3.abs();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(5598.945, 0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.sqrt1z();
      complex2.getField();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.tanh();
      complex5.add(complex3);
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.valueOf(6.283185307179586, 5598.945);
      complex4.pow(complex7);
      Complex complex8 = complex5.sqrt1z();
      complex0.abs();
      complex7.getArgument();
      complex1.readResolve();
      complex7.exp();
      complex5.sqrt();
      Complex complex9 = Complex.valueOf(397.25749364239);
      Complex complex10 = complex9.createComplex(29.261543716258632, (-1.0));
      Complex complex11 = Complex.ZERO;
      complex8.tanh();
      complex10.toString();
      Complex.valueOf(1.569674118473579);
      Complex complex12 = new Complex(1.5707963267948966);
      complex12.asin();
      complex10.readResolve();
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(1101.8, 1101.8);
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = new Complex(1101.8, 1101.8);
      complex3.divide(complex6);
      complex4.getField();
      Complex complex8 = complex6.sinh();
      Complex complex9 = Complex.valueOf(1101.8);
      complex9.tanh();
      complex4.multiply(complex7);
      complex7.isInfinite();
      Complex complex10 = Complex.ZERO;
      complex8.divide(complex10);
      Complex complex11 = complex1.atan();
      complex11.add(1101.8);
      complex2.toString();
      Complex complex12 = new Complex(9.510567165169581E-4);
      complex8.multiply(complex12);
      complex2.nthRoot(252);
      complex8.isInfinite();
      complex0.sinh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 4.111645931319645E-8);
      Complex complex1 = complex0.exp();
      complex0.reciprocal();
      Complex complex2 = complex0.subtract(4.111645931319645E-8);
      complex1.asin();
      Complex complex3 = complex0.log();
      complex3.ONE.multiply(2.0);
      Complex complex4 = Complex.valueOf(27.178731428378224, 802.3);
      Complex complex5 = complex2.cos();
      Complex complex6 = Complex.valueOf(2474.054772493);
      complex3.hashCode();
      Complex complex7 = complex1.multiply(complex6);
      complex7.I.sqrt1z();
      complex5.sinh();
      complex4.abs();
      complex0.negate();
      Complex complex8 = Complex.I;
      complex8.pow((-2260.122974173));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.cos();
      Complex complex1 = Complex.valueOf(0.0, 1125.20349374);
      complex1.cos();
      Complex complex2 = Complex.valueOf((-3245.574897038162));
      complex2.hashCode();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.multiply(complex2);
      complex3.sinh();
      complex4.abs();
      complex2.pow(3540.121917);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(414.018506881884);
      Complex complex1 = new Complex(1022);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ZERO.pow(414.018506881884);
      Complex complex4 = complex0.add((double) 1022);
      complex4.ZERO.subtract(complex0);
      complex0.I.nthRoot(1022);
      complex0.hashCode();
      complex0.abs();
      complex4.INF.add(2.0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.subtract((double) 1022);
      Complex complex7 = complex6.INF.multiply(complex4);
      complex7.NaN.getField();
      complex0.NaN.tanh();
      Complex complex8 = complex5.subtract(4861.0);
      complex8.isInfinite();
      complex1.conjugate();
      complex4.multiply(complex6);
      Complex.valueOf(414.018506881884, (-1462.1930334));
      complex3.add(2.0);
      complex0.multiply((-1052));
      Complex complex9 = Complex.I;
      complex9.tan();
      Complex complex10 = Complex.INF;
      complex10.getImaginary();
      complex0.getReal();
      complex3.getField();
      complex9.getImaginary();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.cosh();
      complex0.asin();
      Complex complex5 = complex4.sqrt();
      complex3.nthRoot(3286);
      complex1.getArgument();
      complex5.INF.sqrt1z();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.I;
      complex7.multiply((-1.0));
      complex5.subtract(complex3);
      Complex complex8 = Complex.valueOf(0.0);
      complex6.divide(complex8);
      complex1.subtract((-2.9535446262017846E-9));
      Complex complex9 = Complex.valueOf((-1.0), (-1714.546));
      complex9.getArgument();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.sinh();
      complex11.divide((-683.86227373319));
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(11.61598703288748, 11.61598703288748);
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-1160226168));
      complex1.NaN.atan();
      Complex complex2 = complex1.pow(complex0);
      complex2.I.getField();
      Complex complex3 = Complex.valueOf((-806.15399402));
      complex3.NaN.getField();
      complex1.ZERO.abs();
      Complex complex4 = complex1.INF.multiply(complex3);
      Complex complex5 = complex4.ZERO.multiply(0.0);
      complex5.multiply(1.6260850497928914E-4);
      Complex complex6 = complex4.ONE.pow(0.0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex1.sqrt();
      Complex.valueOf(11.61598703288748, 2286.78456);
      Complex complex10 = complex7.exp();
      Complex complex11 = complex8.reciprocal();
      complex8.subtract((-2260.122974173));
      complex0.asin();
      Complex complex12 = complex6.log();
      Complex.valueOf(27.178731428378224, 2474.054772493);
      complex0.I.cos();
      Complex complex13 = Complex.valueOf(1.6260850497928914E-4);
      complex13.ONE.hashCode();
      complex10.multiply(complex11);
      Complex complex14 = complex12.sinh();
      complex14.abs();
      complex3.negate();
      complex9.pow((-806.15399402));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1.6259920998287064E77), (-1242.62));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex3.createComplex((-2413.6215), (-2413.6215));
      complex4.NaN.hashCode();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex2.ONE.exp();
      complex4.NaN.toString();
      Complex complex7 = complex2.divide(1.0);
      Complex complex8 = complex6.ONE.sinh();
      Complex complex9 = complex8.I.sqrt1z();
      complex7.INF.cos();
      complex6.isNaN();
      complex2.readResolve();
      complex9.acos();
      Complex complex10 = complex4.multiply((-731.571));
      complex5.cos();
      Complex complex11 = complex10.sin();
      complex9.abs();
      complex3.divide(complex11);
      complex4.sin();
      complex7.reciprocal();
      Complex complex12 = complex2.pow((-156.676));
      complex4.multiply(1.4142135623730951);
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.cosh();
      complex4.ZERO.toString();
      Complex complex5 = complex0.cos();
      complex5.ONE.toString();
      complex5.getField();
      complex3.toString();
      Complex complex6 = Complex.valueOf((-889986.1826513424), (-2286.540176667979));
      complex3.readResolve();
      complex6.equals(complex0);
      complex5.atan();
      Complex complex7 = complex6.acos();
      complex4.abs();
      complex6.cosh();
      complex2.multiply((-4.948973160958133E-121));
      Complex complex8 = Complex.ONE;
      complex8.multiply(complex7);
      Complex.valueOf((-2286.540176667979));
      complex2.abs();
      complex4.log();
      complex4.sin();
      complex5.multiply((-1160090519));
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.cos();
      complex2.exp();
      Complex complex3 = complex2.pow(Double.NaN);
      Complex complex4 = new Complex(Double.NaN, 2.0);
      Complex complex5 = complex4.sinh();
      complex0.asin();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex0.reciprocal();
      complex5.subtract((-2149.311508949296));
      Complex complex8 = complex7.conjugate();
      complex3.pow(complex7);
      Complex complex9 = Complex.valueOf((-690.0));
      Complex complex10 = complex1.add(complex9);
      Complex complex11 = complex3.subtract(complex0);
      complex2.multiply(complex11);
      Complex complex12 = complex1.cosh();
      complex5.getArgument();
      Complex.valueOf(1816.884815);
      complex1.sinh();
      complex12.sqrt1z();
      complex3.multiply(827);
      complex10.getImaginary();
      complex6.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(611.9454, 611.9454);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.log();
      complex1.readResolve();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex5.sqrt();
      complex7.nthRoot(3286);
      complex1.getArgument();
      complex4.pow(complex3);
      Complex complex9 = Complex.ONE;
      complex9.negate();
      complex4.getField();
      complex2.toString();
      Complex.valueOf(0.0, 0.0);
      complex6.readResolve();
      complex8.equals(complex0);
      complex4.atan();
      Complex complex10 = complex2.acos();
      complex6.abs();
      Complex complex11 = complex7.cosh();
      complex11.multiply((-1694.0680719085942));
      Complex complex12 = Complex.ONE;
      complex10.multiply(complex0);
      complex3.abs();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(1101.8, 1101.8);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.sqrt1z();
      complex5.getField();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex6.add(complex5);
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf(1101.8, 1101.8);
      complex4.pow(complex10);
      Complex complex11 = complex1.sqrt1z();
      complex1.abs();
      complex5.getArgument();
      complex6.readResolve();
      Complex complex12 = complex1.exp();
      complex12.sqrt();
      Complex complex13 = complex8.createComplex(29.261543716258632, 1.5707963267948966);
      Complex complex14 = Complex.ZERO;
      complex14.tanh();
      complex7.toString();
      Complex.valueOf(1.5707963267948966);
      complex9.asin();
      Object object0 = complex11.readResolve();
      complex13.equals(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf((-20.0));
      complex0.createComplex((-20.0), (-20.0));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.cosh();
      complex4.ZERO.toString();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.subtract(4861.0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.multiply(complex7);
      complex8.getField();
      complex7.tanh();
      Complex complex9 = complex3.subtract(1365.398637159);
      Complex complex10 = Complex.INF;
      complex10.isInfinite();
      Complex complex11 = complex0.atan();
      complex5.readResolve();
      complex11.sin();
      complex6.sqrt1z();
      complex6.getField();
      complex5.acos();
      complex9.readResolve();
      complex8.isNaN();
      complex8.add((-3536.36659));
      complex10.divide((-2774.4607));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3521.2);
      Complex complex1 = complex0.INF.multiply(3521.2);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.I.multiply(3521.2);
      complex3.NaN.multiply(1745);
      complex3.INF.readResolve();
      Complex complex4 = complex1.NaN.add((-1.0));
      complex4.INF.asin();
      Complex complex5 = complex0.negate();
      complex5.ZERO.multiply((-616));
      complex5.I.abs();
      Complex complex6 = complex0.conjugate();
      complex6.NaN.multiply((-1.0));
      Complex complex7 = Complex.valueOf((-1.0));
      complex7.I.abs();
      Complex complex8 = complex0.INF.divide(complex2);
      Complex complex9 = complex0.sinh();
      complex9.getField();
      complex7.abs();
      complex5.multiply((double) (-616));
      complex8.add(1.0);
      complex2.conjugate();
      complex2.subtract(complex7);
      Complex complex10 = Complex.valueOf(3868.6475891721257, 1.0);
      complex10.ZERO.acos();
      complex0.log();
      Complex complex11 = Complex.ZERO;
      complex8.multiply(complex11);
      complex8.createComplex(1.0, 1.5337786674499512);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.I.getField();
      complex0.isInfinite();
      Complex complex2 = complex0.add(Double.NaN);
      complex0.readResolve();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.ONE.reciprocal();
      complex2.hashCode();
      complex3.getArgument();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.divide(0.0);
      complex6.I.tan();
      complex0.createComplex(Double.NaN, 0.0);
      complex3.sinh();
      complex1.getImaginary();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.negate();
      complex8.ONE.exp();
      complex1.sin();
      complex8.conjugate();
      complex5.createComplex(0.0, 0.0);
      complex4.exp();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.tanh();
      Complex complex1 = complex0.INF.createComplex(0.0, (-2861.5864876922883));
      Complex complex2 = complex0.NaN.acos();
      complex2.NaN.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex4.log();
      Complex complex8 = complex7.add(complex1);
      complex8.I.multiply(complex0);
      complex8.ONE.getField();
      complex0.getField();
      Complex complex9 = complex2.atan();
      complex9.ZERO.subtract(complex2);
      complex4.sqrt1z();
      complex3.subtract(complex1);
      complex6.getReal();
      complex7.getImaginary();
      Complex complex10 = complex7.add(complex5);
      complex2.abs();
      complex5.sqrt1z();
      Complex complex11 = complex0.acos();
      complex11.NaN.getField();
      complex2.negate();
      complex10.multiply(1081);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.pow(complex0);
      Complex complex3 = complex0.INF.cosh();
      complex3.multiply(complex1);
      Complex complex4 = complex0.pow(complex2);
      complex2.sinh();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex5.INF.add(complex0);
      complex6.ZERO.asin();
      complex6.NaN.add(2.0);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.ONE.add(complex5);
      complex8.NaN.exp();
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.multiply(complex1);
      complex2.INF.log();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.negate();
      complex0.getField();
      Complex complex7 = complex5.NaN.cosh();
      Complex complex8 = Complex.ZERO;
      complex0.cos();
      complex2.ONE.add(complex8);
      Complex complex9 = complex5.sin();
      Complex complex10 = complex6.cos();
      complex4.log();
      Complex complex11 = complex10.sinh();
      complex11.INF.add(complex2);
      complex9.atan();
      Complex complex12 = Complex.valueOf(570.585331682);
      complex7.asin();
      Complex.valueOf((-631.9));
      complex12.divide((-5427.91502));
      complex3.readResolve();
      complex2.subtract((-5427.91502));
      complex11.hashCode();
      complex2.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex.valueOf(20.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.pow(2753.41836294);
      complex3.sinh();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.tanh();
      complex5.ZERO.reciprocal();
      complex5.INF.subtract(20.0);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.NaN.pow(complex4);
      complex4.ZERO.add(complex7);
      Complex complex8 = complex4.subtract(complex0);
      Complex complex9 = complex8.I.multiply(complex2);
      complex4.cosh();
      complex9.getArgument();
      Complex complex10 = Complex.valueOf((-2572.6220969097));
      complex10.sinh();
      complex4.sqrt1z();
      complex0.multiply(874);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getImaginary();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      complex1.abs();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.createComplex((-104.80292846169), (-417.71739373127));
      Complex complex3 = complex0.INF.sinh();
      complex2.INF.hashCode();
      complex2.abs();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex2.cos();
      complex5.INF.sqrt1z();
      Complex complex6 = complex4.multiply(591.729);
      complex6.ONE.toString();
      complex2.hashCode();
      complex5.NaN.exp();
      complex6.getArgument();
      complex5.sqrt();
      complex1.isNaN();
      Complex complex7 = complex3.multiply(2059);
      Complex.valueOf(1099.349821365, Double.POSITIVE_INFINITY);
      complex7.abs();
      complex5.asin();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(746.9, 611.9454);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.log();
      complex1.readResolve();
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex3.I.cos();
      complex4.NaN.add(complex3);
      complex2.INF.sqrt1z();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.ZERO.sqrt();
      complex6.INF.nthRoot(3286);
      complex5.getArgument();
      Complex complex7 = complex2.pow(complex5);
      Complex complex8 = complex0.negate();
      complex8.NaN.getField();
      complex2.ZERO.toString();
      Complex complex9 = Complex.valueOf((double) 3286, 0.0);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex10 = complex3.atan();
      complex10.I.acos();
      complex6.abs();
      complex7.cosh();
      complex2.multiply((-1055.276512));
      Complex complex11 = Complex.ONE;
      complex6.multiply(complex11);
      complex9.abs();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2661.0);
      complex0.NaN.getField();
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.createComplex(2815.0, 0.0);
      Complex complex3 = Complex.valueOf(2815.0, 2.5243410574836706E106);
      Complex complex4 = complex3.reciprocal();
      complex2.ONE.conjugate();
      Complex complex5 = complex2.tan();
      complex2.NaN.multiply(complex3);
      complex1.abs();
      Complex complex6 = complex5.pow((-616.9));
      complex6.ONE.add(2661.0);
      Complex complex7 = complex3.multiply(Double.NaN);
      complex7.ZERO.pow(2.5243410574836706E106);
      complex4.multiply(0.0);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1.6259920998287064E77), (-1242.62));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex3.createComplex((-2413.6215), (-2413.6215));
      complex4.NaN.hashCode();
      complex0.add(0.0);
      Complex complex5 = complex2.ONE.exp();
      complex4.NaN.toString();
      Complex complex6 = complex2.divide(1.0);
      Complex complex7 = complex5.ONE.sinh();
      complex7.I.sqrt1z();
      Complex complex8 = complex6.INF.cos();
      complex5.isNaN();
      complex2.readResolve();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.multiply(0.0);
      complex1.ZERO.cos();
      Complex complex11 = complex10.ZERO.sin();
      complex11.ONE.abs();
      Complex complex12 = complex8.divide(complex0);
      complex8.sin();
      complex12.reciprocal();
      complex3.pow(380.3244192822);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(414.018506881884);
      Complex complex1 = new Complex(1022);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ZERO.pow(414.018506881884);
      Complex complex4 = complex0.add((double) 1022);
      complex4.ZERO.subtract(complex0);
      complex0.I.nthRoot(1022);
      complex0.hashCode();
      complex0.abs();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.subtract((double) 1022);
      Complex complex7 = complex6.INF.multiply(complex4);
      complex7.NaN.getField();
      complex0.NaN.tanh();
      Complex complex8 = complex5.subtract(4861.0);
      complex8.isInfinite();
      Complex complex9 = complex5.I.atan();
      complex9.readResolve();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex1.sqrt1z();
      complex8.getField();
      complex10.acos();
      complex3.readResolve();
      complex3.isNaN();
      complex3.add(414.018506881884);
      complex11.divide(414.018506881884);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf(686.12504266, 20.0);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.NaN.asin();
      complex3.add(1583.72996563305);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.INF.cosh();
      complex5.INF.readResolve();
      complex1.getReal();
      Complex complex6 = complex1.subtract(complex4);
      Complex complex7 = complex6.ONE.multiply(complex0);
      Complex complex8 = complex7.I.cos();
      Complex complex9 = complex1.ONE.acos();
      complex9.NaN.acos();
      Complex complex10 = complex2.divide(complex1);
      complex10.NaN.conjugate();
      complex10.INF.divide(complex8);
      complex10.isInfinite();
      Complex complex11 = complex1.reciprocal();
      complex9.multiply(complex4);
      complex9.getReal();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex11.INF.log();
      Complex complex14 = complex1.multiply(complex11);
      complex14.asin();
      complex12.multiply((-336));
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf((-20.0));
      complex0.createComplex((-20.0), (-20.0));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf(1.5640296936035156, (-1262.3941470682116));
      Complex complex2 = complex1.ZERO.subtract(0.0);
      complex2.I.nthRoot(774);
      complex1.I.getArgument();
      Complex complex3 = complex2.ZERO.add(1.5640296936035156);
      complex2.I.exp();
      Complex complex4 = complex0.add(288.89);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.ONE.multiply((-1262.3941470682116));
      Complex complex8 = complex5.I.acos();
      complex5.ZERO.readResolve();
      Complex complex9 = complex4.NaN.subtract(complex5);
      complex9.INF.abs();
      Complex complex10 = complex4.add(complex5);
      Complex complex11 = complex4.negate();
      complex11.hashCode();
      complex7.divide(complex2);
      Complex complex12 = complex8.reciprocal();
      complex8.ZERO.pow(3.572270133517001E-67);
      complex2.cosh();
      complex12.hashCode();
      complex1.ZERO.tan();
      complex0.negate();
      complex4.ZERO.reciprocal();
      Complex complex13 = complex12.cos();
      complex12.I.add(complex8);
      complex3.add(complex10);
      complex13.getReal();
      complex1.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.NaN.subtract((-2505.00749));
      Complex complex4 = complex3.ZERO.divide(333.1861479895);
      complex3.I.toString();
      Complex complex5 = complex0.multiply(309);
      complex5.readResolve();
      Complex complex6 = complex5.divide((-2505.00749));
      complex6.I.hashCode();
      complex6.ZERO.multiply((-3897));
      complex6.I.sinh();
      complex2.NaN.sin();
      complex5.ZERO.reciprocal();
      Complex complex7 = complex5.I.subtract((-4759.3390231036));
      Complex complex8 = complex6.add(4818.907246358495);
      complex8.getImaginary();
      Complex complex9 = complex8.cos();
      complex9.ONE.sqrt1z();
      complex9.I.abs();
      Complex complex10 = complex2.asin();
      Complex complex11 = Complex.valueOf(333.1861479895);
      complex11.ZERO.sinh();
      Complex complex12 = complex9.pow((-9.441842771290538E-300));
      Complex complex13 = complex11.reciprocal();
      complex11.add(333.1861479895);
      complex12.multiply((-3897));
      Complex.valueOf(-0.0);
      complex0.conjugate();
      complex13.pow(complex7);
      complex10.add(complex4);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.sin();
      complex0.ONE.conjugate();
      Complex complex2 = complex0.multiply(4368);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.I.add(complex2);
      complex4.I.hashCode();
      complex3.I.abs();
      Complex complex5 = complex3.createComplex(1.329969882965088, 4368);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex6.ZERO.cos();
      complex1.isInfinite();
      complex6.reciprocal();
      complex6.isNaN();
      complex5.toString();
      complex5.createComplex(1.329969882965088, 1.329969882965088);
      complex6.add(1.329969882965088);
      complex7.getImaginary();
      Complex.valueOf(39.3592003);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex0.add(70.1774892609503);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(789.096, 789.096);
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.createComplex(789.096, 450.9039339);
      Complex complex4 = complex3.NaN.sqrt();
      complex0.INF.divide((-1551.1));
      Complex complex5 = complex1.pow((double) 1);
      complex5.NaN.sin();
      complex4.NaN.createComplex(450.9039339, 1805.32);
      complex0.divide(971.9239);
      Complex complex6 = complex3.ZERO.add((double) 1);
      Complex complex7 = Complex.valueOf((-1122.4));
      complex7.NaN.multiply(2131.7);
      complex5.ZERO.abs();
      complex4.getReal();
      complex0.equals(complex5);
      complex3.subtract(complex2);
      complex3.tan();
      Complex complex8 = Complex.valueOf((-3.348471032333413E-8), 1.0);
      complex3.asin();
      complex8.exp();
      complex6.divide(0.04860413819551468);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4392.612198423901);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.ONE.exp();
      Complex.valueOf(0.0, 4392.612198423901);
      complex3.ONE.sqrt1z();
      Complex complex4 = complex1.I.multiply((-850.0897));
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = complex0.exp();
      complex6.ZERO.createComplex(0.0, 0.0);
      complex0.sqrt1z();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(814.0, (-1202.0));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex0.sqrt();
      complex2.ONE.toString();
      complex2.I.multiply(294);
      Complex.valueOf((double) 294, 2114.5784050901375);
      Complex complex6 = complex1.reciprocal();
      complex4.ZERO.getArgument();
      complex2.isInfinite();
      complex5.toString();
      complex4.multiply(complex6);
      complex1.getReal();
      complex2.toString();
      Complex complex7 = complex4.divide(complex0);
      complex6.conjugate();
      complex7.I.conjugate();
      complex2.atan();
      Complex complex8 = complex7.tan();
      complex1.getReal();
      complex8.getArgument();
      Complex.valueOf((-1792.0));
      complex8.cosh();
      complex8.subtract((-814.0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow(20.0);
      Complex complex2 = complex1.asin();
      complex0.I.abs();
      complex2.INF.hashCode();
      complex0.getImaginary();
      Complex complex3 = complex0.ZERO.divide(complex2);
      complex3.ZERO.multiply((-2903));
      Complex complex4 = complex2.NaN.negate();
      complex4.I.conjugate();
      complex0.isInfinite();
      Complex complex5 = complex1.negate();
      complex5.abs();
      Complex complex6 = complex2.divide((-4434.00845446774));
      complex1.isNaN();
      complex6.createComplex(0.0, (-4434.00845446774));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(2272.726300767028, (-966.966));
      complex1.ONE.conjugate();
      Complex complex2 = complex0.pow(2272.726300767028);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.sqrt();
      complex5.abs();
      complex1.getImaginary();
      complex3.ONE.sin();
      complex4.add((-2336.79));
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getField();
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex.valueOf(581.1872511376577, 581.1872511376577);
      Complex complex3 = complex0.add(Double.NaN);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.conjugate();
      complex2.add(581.1872511376577);
      complex1.pow(581.1872511376577);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-943.39132), 1.4322981952798675E-8);
      Complex complex1 = complex0.INF.atan();
      complex1.I.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf((-943.39132), (-943.39132));
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.sqrt1z();
      complex5.NaN.getField();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex4.tanh();
      complex7.INF.add(complex3);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex4.pow(complex8);
      Complex complex10 = complex3.sqrt1z();
      complex0.abs();
      complex4.getArgument();
      complex2.readResolve();
      Complex complex11 = complex9.INF.exp();
      complex3.sqrt();
      complex2.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex10.tanh();
      complex9.toString();
      Complex.valueOf(0.0);
      complex5.asin();
      complex6.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(907.6, (-6.22836197265283E-8));
      Complex complex2 = complex1.ZERO.sqrt();
      complex2.INF.multiply((-1714.546));
      complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex0.ZERO.subtract(0.0);
      complex0.getArgument();
      complex1.NaN.sinh();
      complex1.divide((-6.22836197265283E-8));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.conjugate();
      complex0.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.ONE.multiply((-3620.278862902777));
      complex2.createComplex((-199.425622), (-199.425622));
      complex4.createComplex(1859.093, 0.0);
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(480.5755207442681);
      Complex complex1 = complex0.NaN.sinh();
      complex1.abs();
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.divide((-2528.1697084));
      complex2.I.toString();
      Complex complex3 = complex0.divide((-2727.822));
      Complex complex4 = complex3.NaN.exp();
      complex0.readResolve();
      Complex complex5 = complex4.I.multiply(complex3);
      complex3.getImaginary();
      Complex complex6 = Complex.valueOf(0.0, 480.5755207442681);
      complex6.INF.tan();
      Complex complex7 = complex0.exp();
      complex7.abs();
      complex7.add(Double.NaN);
      Complex complex8 = complex4.tan();
      complex8.exp();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.NaN.tan();
      complex9.getArgument();
      Object object0 = new Object();
      Complex complex11 = complex5.add(complex10);
      complex11.INF.sin();
      complex4.INF.subtract((-2727.822));
      complex0.equals(object0);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double double0 = (-2260.122974173);
      Complex complex0 = Complex.valueOf((-2260.122974173));
      complex0.ONE.readResolve();
      complex0.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.subtract((-2260.122974173));
      complex2.INF.divide(complex1);
      complex2.INF.toString();
      Complex complex3 = complex2.INF.multiply(complex0);
      complex3.INF.conjugate();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.NaN.cosh();
      complex6.I.cos();
      complex1.tanh();
      int int0 = 0;
      Complex complex7 = complex5.INF.multiply(0);
      complex7.NaN.sqrt();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.cos();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, (-99.2824653228));
      Complex complex1 = complex0.acos();
      complex1.hashCode();
      complex0.INF.sinh();
      Complex complex2 = complex1.sqrt1z();
      complex2.ONE.pow(complex1);
      Complex complex3 = complex2.pow((-99.2824653228));
      Complex complex4 = complex3.NaN.multiply(complex2);
      try { 
        complex4.nthRoot((-463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -463
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(5598.945, 0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      complex0.ONE.pow(complex2);
      Complex complex3 = new Complex(6.943684261645378E-10, 5598.945);
      Complex complex4 = complex2.ZERO.divide(complex3);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex3.NaN.sinh();
      Complex.valueOf(6.943684261645378E-10);
      Complex complex6 = complex0.tanh();
      complex5.multiply(complex6);
      complex6.equals(complexField0);
      complex6.divide(complex3);
      Complex complex7 = complex2.atan();
      complex3.add(2693.13353218);
      complex5.toString();
      Complex complex8 = complex5.multiply(complex6);
      complex7.nthRoot(252);
      complex4.isInfinite();
      complex8.sinh();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(612.431, 0.0);
      Complex complex1 = new Complex(6.283185307179586, 0.0);
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ONE.asin();
      complex2.atan();
      complex0.multiply((-3106.5487329));
      complex0.atan();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3285.310395802901), (-3285.310395802901));
      complex0.NaN.readResolve();
      complex0.ONE.hashCode();
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.valueOf(2.0, 0.0);
      complex1.getArgument();
      complex0.subtract(2.0);
      complex1.acos();
      complex0.tanh();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-2230.3705665956), 1.0);
      Complex complex1 = complex0.ONE.exp();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.INF.asin();
      complex2.NaN.subtract(complex0);
      complex2.ZERO.add(complex0);
      int int0 = (-51);
      try { 
        complex0.nthRoot((-51));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -51
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getArgument();
      complex0.INF.toString();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.valueOf(2.0);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex1.multiply((-4529));
      complex0.INF.add(1.5707963267948966);
      complex4.pow(complex3);
      Complex.valueOf((double) 0);
      complex2.ONE.multiply(881.4153037567985);
      complex1.INF.sinh();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.hashCode();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex1.acos();
      complex5.ZERO.cosh();
      complex6.add(0.0);
      complex5.ONE.asin();
      complex2.conjugate();
      complex7.getArgument();
      Complex complex8 = complex5.acos();
      complex8.multiply((-4436));
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(700.3);
      Complex complex1 = complex0.I.cosh();
      complex0.tanh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.NaN.conjugate();
      complex1.nthRoot(412);
      complex3.getField();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex2.sin();
      complex6.I.hashCode();
      complex6.NaN.atan();
      complex2.getArgument();
      complex4.abs();
      complex1.readResolve();
      complex2.INF.createComplex(700.3, 45.02927236393);
      Complex complex7 = complex1.INF.atan();
      complex7.divide(700.3);
      Complex complex8 = complex6.add(complex4);
      complex3.ZERO.divide(complex4);
      complex6.ONE.subtract(Double.NaN);
      Complex complex9 = complex8.ZERO.multiply((-393));
      complex9.cos();
      complex5.subtract(0.0);
      complex2.abs();
      complex4.readResolve();
      complex3.abs();
      complex2.sqrt();
      complex6.sqrt();
      complex9.divide(1426.9788191087598);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(7.296670293275653E-10);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.createComplex(7.296670293275653E-10, 7.296670293275653E-10);
      Complex complex3 = complex1.NaN.subtract(7.296670293275653E-10);
      Complex.valueOf((-1.5314373779304356E296));
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex5.ONE.divide(7.296670293275653E-10);
      complex6.INF.createComplex((-1084.2612475), 7.296670293275653E-10);
      complex4.reciprocal();
      complex1.hashCode();
      Complex complex7 = complex3.acos();
      complex7.subtract(7.296670293275653E-10);
      complex4.isNaN();
      complex4.getReal();
      Complex complex8 = complex3.tanh();
      Complex complex9 = Complex.ONE;
      complex8.ONE.multiply(complex9);
      complex2.subtract(1131.37746872);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      complex1.ZERO.readResolve();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-27.83160389));
      Complex complex1 = Complex.valueOf(0.0, (-20.0));
      Complex complex2 = complex1.negate();
      complex0.abs();
      Complex complex3 = complex0.asin();
      complex3.sqrt();
      complex2.multiply(0.0);
      Complex complex4 = complex3.multiply(1889);
      complex4.ONE.toString();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex0.asin();
      complex1.add(complex5);
      complex3.multiply(complex7);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tanh();
      complex1.ZERO.add(0.0);
      Complex complex2 = complex1.ZERO.asin();
      complex1.INF.acos();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = Complex.valueOf((-7.187922490287331E-8), (-836.4241865));
      complex4.INF.hashCode();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.exp();
      assertEquals((-0.6893131739076761), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.INF.conjugate();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex7.createComplex((-836.4241865), 0.0);
      Complex complex10 = complex7.subtract((-7.187922490287331E-8));
      Complex complex11 = complex3.atan();
      List<Complex> list0 = complex9.nthRoot(237);
      assertFalse(list0.contains(complex2));
      assertEquals(237, list0.size());
      assertTrue(complex7.equals((Object)complex10));
      
      Complex complex12 = complex4.tanh();
      assertEquals((-0.9514810309544351), complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex11.NaN.log();
      Complex complex14 = complex2.ONE.cos();
      Complex complex15 = complex14.NaN.divide(0.0);
      assertEquals(0.5403023058681398, complex14.getReal(), 0.01);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      complex4.getField();
      Complex complex16 = complex1.createComplex(0.0, 0.0);
      Complex complex17 = complex11.subtract((-7.187922490287331E-8));
      Complex complex18 = complex17.ONE.tan();
      assertFalse(complex18.isInfinite());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      complex5.sqrt1z();
      Complex complex19 = complex8.sinh();
      Complex complex20 = complex2.multiply(237);
      complex1.subtract(complex13);
      assertSame(complex3, complex15);
      
      Complex complex21 = complex0.atan();
      assertTrue(complex21.equals((Object)complex20));
      
      Complex complex22 = complex5.acos();
      assertEquals(-0.0, complex22.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      
      complex16.subtract((double) 237);
      assertTrue(complex1.equals((Object)complex19));
      
      complex0.acos();
      assertTrue(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.tanh();
      complex2.reciprocal();
      Complex complex3 = complex0.cosh();
      complex3.ZERO.toString();
      Complex complex4 = complex0.cos();
      complex4.ONE.toString();
      complex4.getField();
      try { 
        complex0.nthRoot((-2456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,456
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
