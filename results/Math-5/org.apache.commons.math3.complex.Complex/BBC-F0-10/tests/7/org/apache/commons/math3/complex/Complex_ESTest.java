/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:51:14 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1198.2369), Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 20.0);
      complex0.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      complex3.conjugate();
      Complex complex4 = Complex.ZERO;
      complex4.abs();
      complex1.tan();
      Complex complex5 = Complex.valueOf((-1.8486753106117249E-7), (-20.0));
      complex4.sqrt();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2287.0, 2287.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt();
      complex1.ONE.pow(complex0);
      complex2.INF.pow(2287.0);
      complex2.ZERO.conjugate();
      complex2.INF.abs();
      complex2.tan();
      Complex complex3 = Complex.valueOf(2287.0, Double.POSITIVE_INFINITY);
      complex3.I.subtract(complex1);
      complex3.sqrt();
      complex3.tan();
      complex3.multiply(475);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 372.20418058);
      complex1.readResolve();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1955.5229286));
      Complex complex1 = complex0.sqrt();
      complex1.abs();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex0.multiply((-3177));
      complex2.NaN.add(4.474337413910728);
      complex2.reciprocal();
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.501958653081136, 2.501958653081136);
      Complex complex1 = new Complex(2.501958653081136);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Complex complex6 = complex5.multiply(117);
      Complex complex7 = complex4.divide((-6251628.633022299));
      complex6.getField();
      Complex complex8 = complex7.atan();
      complex1.exp();
      Complex complex9 = complex8.createComplex(352.77459669739, (-2240.5));
      complex3.negate();
      complex5.log();
      complex1.add(0.9999999999997257);
      Complex complex10 = Complex.NaN;
      complex2.createComplex(2.501958653081136, 0.9999999999997257);
      Complex complex11 = Complex.ONE;
      complex11.sqrt();
      Complex complex12 = Complex.I;
      int int0 = 1073741824;
      // Undeclared exception!
      complex9.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(2481.96075828, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      complex1.tan();
      Complex complex2 = Complex.INF;
      complex0.cos();
      Complex complex3 = Complex.valueOf(6278520.945925643, 255.1);
      complex3.multiply((-2505.6978959814055));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sin();
      Complex complex1 = complex0.cos();
      complex1.pow(complex0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex(2.380207061767578);
      complex3.tan();
      Complex complex4 = Complex.valueOf(2.380207061767578, Double.POSITIVE_INFINITY);
      complex4.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1824.0), (double) 1078);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.multiply(352.77459669739);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.multiply(1078);
      Complex complex6 = complex3.divide((-1824.0));
      complex4.getField();
      Complex complex7 = complex1.atan();
      complex6.exp();
      Complex complex8 = complex2.createComplex((-1048.46998093), (-1824.0));
      Complex complex9 = complex0.negate();
      complex9.log();
      Complex complex10 = complex5.add(1945.7459647);
      complex10.toString();
      complex7.createComplex((-2802.0416), 401.0);
      complex8.sqrt();
      Complex.valueOf((double) (-571), 401.0);
      try { 
        complex2.nthRoot((-571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -571
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1049);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.atan();
      complex0.getArgument();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2.8401159516008676E283, 4587.247099333235);
      Complex complex1 = Complex.valueOf(4587.247099333235, (-20.800340418692194));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.tanh();
      complex0.atan();
      complex3.pow(complex0);
      Complex complex4 = Complex.ZERO;
      complex0.tan();
      Complex complex5 = new Complex(2.8401159516008676E283, 2.8401159516008676E283);
      complex0.add(157.3019342);
      Complex complex6 = complex0.asin();
      complex6.sin();
      complex0.subtract(2074.9225883132412);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2268.0, 2268.0);
      Complex complex2 = Complex.valueOf((-1.0), (-20.0));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.tanh();
      complex3.sinh();
      Complex complex5 = complex2.add((-498.908));
      Complex complex6 = new Complex((-670.1298989518), 2268.0);
      complex6.conjugate();
      Complex complex7 = new Complex((-178.115520065), (-1.0));
      complex0.sin();
      complex2.negate();
      complex4.pow(complex0);
      Complex complex8 = Complex.ZERO;
      complex5.tan();
      Complex complex9 = new Complex(432.0516663224618, 1860.26);
      complex3.add(1.0);
      complex0.asin();
      complex3.sin();
      complex1.subtract((-178.115520065));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex2.multiply(complex1);
      complex6.sqrt();
      complex0.conjugate();
      complex3.sinh();
      Complex complex8 = Complex.valueOf((-1858.774885956838), (-1858.774885956838));
      Complex complex9 = complex8.divide(complex4);
      complex9.hashCode();
      complex8.conjugate();
      complex0.getArgument();
      complex7.INF.pow(1.5707963267948966);
      complex4.abs();
      Complex complex10 = Complex.ONE;
      complex10.getReal();
      complex7.getArgument();
      Complex complex11 = new Complex((-1858.774885956838), Double.NaN);
      Complex complex12 = new Complex(1.5102059381179028E-8, 1682.1267047);
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.divide(complex1);
      complex1.ONE.cosh();
      complex0.I.negate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex2.multiply(complex0);
      complex0.sqrt();
      Complex complex7 = new Complex(1.5681731393505105);
      Complex complex8 = complex7.conjugate();
      complex8.I.sinh();
      Complex.valueOf(1.5681731393505105, 1.5681731393505105);
      Complex complex9 = complex5.divide(complex6);
      complex8.hashCode();
      complex3.conjugate();
      complex4.getArgument();
      complex9.abs();
      complex8.getReal();
      complex5.getArgument();
      Complex complex10 = new Complex(-0.0, 0.0);
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(3348.885511084, 3348.885511084);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.add(131.052866423158);
      complex0.ZERO.add(complex1);
      Complex complex4 = complex3.NaN.tan();
      Complex.valueOf(131.052866423158);
      complex4.pow((-1.0));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8401159516008676E283);
      complex0.divide(2.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(2.8401159516008676E283, 4587.247099333235);
      Complex complex1 = complex0.sinh();
      complex1.INF.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.8333333333333334);
      Complex complex1 = Complex.valueOf((-20.0), (-1722.1996800583));
      complex0.atan();
      complex1.tanh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.add(0.0);
      Complex.valueOf(0.8333333333333334, (-20.800340418692194));
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.negate();
      Complex complex8 = Complex.ZERO;
      complex0.tanh();
      complex8.hashCode();
      Complex.valueOf(2426.13503, 2.8401159516008676E283);
      complex7.readResolve();
      complex4.equals(complex8);
      complex0.exp();
      complex5.multiply((-1073740712));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(3569.20083327);
      Complex.valueOf(3569.20083327);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(2.0, 3569.20083327);
      Complex complex3 = complex2.reciprocal();
      complex0.hashCode();
      Complex complex4 = complex3.multiply(1463.2242068);
      complex1.getArgument();
      complex3.tan();
      complex0.isNaN();
      complex4.add(3110.7);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.conjugate();
      Complex complex1 = Complex.valueOf((-1976.649892));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.log();
      Complex complex5 = complex0.sin();
      complex4.conjugate();
      // Undeclared exception!
      complex5.nthRoot(958797704);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.107226967119929E-15));
      Complex complex1 = new Complex((-4.107226967119929E-15), 538.6592);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.pow(complex3);
      complex4.I.log();
      Complex complex5 = Complex.valueOf((-4.107226967119929E-15), (-1.0));
      complex1.NaN.divide((-4298.9081114167));
      Complex complex6 = complex5.ZERO.pow(complex0);
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex7 = complex5.multiply((-231));
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex0.negate();
      complex9.I.tanh();
      complex9.ZERO.hashCode();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex6.add(complex10);
      complex11.ONE.hashCode();
      complex6.acos();
      complex5.tanh();
      complex0.abs();
      complex2.multiply(929.94268476324);
      complex8.toString();
      Complex complex12 = complex7.cosh();
      complex12.divide(929.94268476324);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = new Complex(20.0, (-2987.944499901402));
      Complex complex3 = complex2.atan();
      Complex complex4 = new Complex(20.0, 20.0);
      complex4.tanh();
      complex4.hashCode();
      complex1.pow((-7.225829));
      Complex complex5 = complex3.sinh();
      complex5.NaN.conjugate();
      complex1.add((-2987.944499901402));
      complex2.sin();
      complex4.negate();
      complex1.negate();
      Complex complex6 = complex2.tan();
      complex4.abs();
      complex6.NaN.log();
      complex6.multiply(4.359814911831241E-4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(2.8401159516008676E283, 4587.247099333235);
      Complex complex1 = Complex.valueOf(4587.247099333235, (-20.800340418692194));
      Complex complex2 = complex1.atan();
      complex2.tanh();
      complex2.pow((-670.1298989518));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.add(2426.13503);
      Complex complex6 = Complex.valueOf(2426.13503, 620.734268007597);
      Complex complex7 = complex4.sin();
      complex1.negate();
      complex1.negate();
      complex5.tan();
      Complex complex8 = Complex.ZERO;
      complex0.abs();
      Complex complex9 = complex4.tanh();
      complex7.hashCode();
      Complex complex10 = Complex.valueOf(2.8401159516008676E283, 4587.247099333235);
      Object object0 = complex2.readResolve();
      complex10.equals(object0);
      complex6.exp();
      complex9.multiply(570);
      complex9.add(complex3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2.8401159516008676E283, 4587.247099333235);
      Complex complex1 = Complex.valueOf(4587.247099333235, 2.0);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.pow((-670.1298989518));
      complex2.sinh();
      Complex complex5 = complex0.add((-449.783580928658));
      Complex complex6 = Complex.valueOf(1643.7, (-0.8364288087425561));
      complex0.sin();
      complex3.negate();
      Complex complex7 = complex6.negate();
      complex5.tan();
      Complex complex8 = Complex.ZERO;
      complex3.abs();
      Complex complex9 = complex7.tanh();
      complex2.hashCode();
      complex9.equals(complex4);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.add(8.43835682327257E26);
      complex0.readResolve();
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.conjugate();
      complex0.getArgument();
      complex0.nthRoot(2927);
      complex2.sqrt();
      complex3.divide(complex2);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2016.0147));
      Complex complex1 = Complex.valueOf(3569.20083327);
      complex0.pow(complex1);
      Complex complex2 = complex0.log();
      complex2.I.sin();
      Complex complex3 = complex0.pow((-2016.0147));
      Complex complex4 = complex0.reciprocal();
      complex3.hashCode();
      complex4.isNaN();
      complex0.getArgument();
      complex3.multiply(1);
      Complex complex5 = Complex.ZERO;
      complex4.tan();
      complex1.conjugate();
      complex3.add(Double.NaN);
      complex0.asin();
      complex0.sin();
      complex1.subtract((-1590.66854));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.conjugate();
      Complex complex1 = Complex.valueOf((-1976.649892));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.INF.atan();
      complex3.add((-1001.549428209));
      complex1.sin();
      Complex complex5 = complex1.negate();
      complex3.negate();
      complex1.tan();
      complex0.abs();
      Complex complex6 = Complex.INF;
      complex6.tanh();
      complex4.hashCode();
      complex5.equals((Object) null);
      complex2.exp();
      complex0.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-381.11114797272), 6.283185307179586);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tanh();
      complex1.pow((-381.11114797272));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.add(1.0);
      complex2.sin();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex3.tan();
      complex7.abs();
      Complex complex8 = complex6.tanh();
      complex8.hashCode();
      complex8.equals(complex4);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2016.0147));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.add((-2016.0147));
      complex3.sin();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.negate();
      complex3.tan();
      complex4.abs();
      complex5.tanh();
      complex0.hashCode();
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.valueOf((-2338.782229077574));
      complex2.pow(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.sin();
      complex2.pow(3569.20083327);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = Complex.valueOf(0.0018528938770172947);
      complex6.hashCode();
      complex0.isNaN();
      complex3.getArgument();
      complex4.INF.cos();
      complex5.multiply(1);
      complex1.tan();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1695.5052139195));
      Complex complex1 = complex0.INF.createComplex((-1695.5052139195), (-1.0));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.negate();
      complex2.equals(complex1);
      Complex complex4 = complex2.multiply(10);
      Complex complex5 = complex2.ONE.pow(complex3);
      Complex complex6 = complex0.asin();
      complex2.abs();
      complex3.sqrt1z();
      complex4.conjugate();
      Complex complex7 = complex3.cos();
      complex3.NaN.multiply(complex4);
      complex7.INF.atan();
      Complex complex8 = Complex.valueOf(1.5707960896636455, (double) 10);
      complex0.subtract(complex8);
      complex3.I.abs();
      Complex complex9 = complex2.sqrt1z();
      complex8.ZERO.hashCode();
      Complex.valueOf((-1695.5052139195));
      Complex complex10 = complex5.divide((double) 10);
      Complex complex11 = complex3.acos();
      complex11.ONE.sinh();
      Complex complex12 = complex10.multiply((-1.2739193588215264E7));
      complex12.negate();
      complex8.getField();
      complex6.sqrt1z();
      complex9.divide(complex5);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2171.5653823));
      Complex complex1 = complex0.ONE.conjugate();
      complex1.NaN.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.tanh();
      complex2.NaN.negate();
      Complex complex4 = Complex.valueOf(7616052.4728841465, 7616052.4728841465);
      complex3.I.abs();
      Complex complex5 = complex4.sin();
      complex5.I.reciprocal();
      complex5.I.asin();
      complex5.ONE.sqrt1z();
      complex2.subtract(7616052.4728841465);
      try { 
        complex0.nthRoot((-1484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,484
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1695.5052139195));
      Complex complex1 = complex0.INF.createComplex((-1695.5052139195), (-1.0));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.negate();
      complex2.equals(complex1);
      Complex complex4 = complex2.multiply(1);
      Complex complex5 = complex2.ONE.pow(complex3);
      Complex complex6 = complex0.asin();
      complex2.abs();
      complex3.sqrt1z();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex3.cos();
      complex8.INF.atan();
      Complex complex9 = Complex.valueOf(1.5707960896636455, (double) 1);
      complex0.subtract(complex9);
      complex3.I.abs();
      complex2.sqrt1z();
      Complex.valueOf((-1695.5052139195));
      Complex complex10 = complex5.divide((double) 1);
      Complex complex11 = complex3.acos();
      complex11.ONE.sinh();
      Complex complex12 = complex10.multiply((-1.2739193588215264E7));
      complex12.negate();
      complex9.getField();
      complex6.sqrt1z();
      Complex complex13 = complex7.divide(1238.25571);
      complex13.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.atan();
      complex0.divide(complex1);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex4.ZERO.multiply(complex2);
      complex6.conjugate();
      complex3.cosh();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex3.exp();
      complex7.asin();
      complex3.acos();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.cos();
      complex8.subtract(complex10);
      Complex complex11 = complex10.cos();
      complex5.nthRoot(1106);
      complex11.cos();
      complex4.sqrt();
      complex2.equals(complex6);
      complex3.multiply(0.0);
      complex6.acos();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      Complex complex1 = complex0.I.multiply(1.0315548713040775E-9);
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.INF.log();
      complex3.I.cos();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex2.tanh();
      complex4.getArgument();
      Complex complex7 = complex0.asin();
      Complex.valueOf(1.0315548713040775E-9, 0.0);
      Complex complex8 = complex5.createComplex((-2288.586951918), 1354.785615326718);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.add((-464.871756543));
      complex10.exp();
      complex1.multiply((-30));
      complex6.sqrt();
      complex7.pow(1.0315548713040775E-9);
      Complex complex11 = new Complex(0.0, (-1469.441181154398));
      complex11.sinh();
      Complex complex12 = Complex.NaN;
      complex12.getArgument();
      complex2.getArgument();
      complex11.reciprocal();
      complex9.getImaginary();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.sinh();
      complex2.ONE.toString();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = new Complex(0.5110208988189697, 993.0);
      Complex complex5 = complex2.ONE.cos();
      complex4.NaN.cosh();
      Complex complex6 = complex3.ZERO.cosh();
      complex4.NaN.nthRoot(1209);
      Complex complex7 = complex0.subtract(complex4);
      complex7.ZERO.nthRoot(1);
      Complex complex8 = Complex.valueOf(0.0, Double.NaN);
      Complex complex9 = complex6.divide(Double.NaN);
      complex7.cosh();
      Complex complex10 = complex8.add(complex4);
      Complex complex11 = new Complex((-217.647125));
      complex11.cosh();
      Complex complex12 = complex9.conjugate();
      complex5.sqrt1z();
      Complex complex13 = complex10.conjugate();
      complex13.cos();
      complex12.readResolve();
      complex10.multiply((-2147483122));
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.sinh();
      complex2.ONE.toString();
      Complex complex3 = complex2.ONE.multiply(complex0);
      complex2.sqrt();
      Complex complex4 = new Complex(0.5110208988189697, 993.0);
      complex2.ONE.cos();
      Complex complex5 = complex4.NaN.cosh();
      complex4.NaN.nthRoot(1209);
      Complex complex6 = complex0.subtract(complex4);
      complex6.ZERO.nthRoot(1209);
      Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = complex4.divide((-217.647125));
      Complex complex8 = complex3.cosh();
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.INF;
      complex9.add(complex10);
      complex8.cosh();
      complex3.conjugate();
      complex8.sqrt1z();
      complex7.conjugate();
      complex4.cos();
      complex10.readResolve();
      complex4.multiply((-2599));
      complex3.getImaginary();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), 0.45932674407958984);
      complex0.isInfinite();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sin();
      complex1.pow(3310.14);
      complex2.reciprocal();
      complex2.getReal();
      Complex complex4 = complex3.subtract(3310.14);
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2016.0147));
      Complex complex1 = Complex.valueOf(3569.20083327);
      complex0.pow(complex1);
      Complex complex2 = complex1.createComplex((-2016.0147), (-1232.0));
      Complex complex3 = Complex.valueOf(0.0);
      complex3.isNaN();
      complex3.add(0.0);
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.0);
      double double1 = (-2.327375671320742E-9);
      Complex complex1 = new Complex((-2.327375671320742E-9));
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), 0.45932674407958984);
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(0.45932674407958984, 0.0);
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.add(complex3);
      complex4.hashCode();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.conjugate();
      complex6.sqrt1z();
      complex2.conjugate();
      complex5.cos();
      complex3.readResolve();
      complex0.multiply(1200);
      complex3.getImaginary();
      try { 
        complex2.nthRoot((-2000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,000
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.conjugate();
      Complex complex1 = Complex.valueOf((-1976.649892));
      Complex complex2 = complex1.INF.tanh();
      complex2.I.reciprocal();
      Complex complex3 = complex1.INF.atan();
      complex3.I.log();
      complex3.ONE.atan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.valueOf((-1049.239731), (-1049.239731));
      Complex complex6 = Complex.valueOf((-34.584), (-1049.239731));
      Complex complex7 = complex6.createComplex((-1469.441181154398), 1953.3589546);
      complex1.tan();
      complex5.add((-1976.649892));
      complex4.exp();
      complex0.I.log();
      complex3.multiply(1084);
      Complex complex8 = complex0.sqrt();
      complex8.pow((double) (-30));
      complex4.sinh();
      complex5.getArgument();
      complex5.getArgument();
      complex4.reciprocal();
      complex1.getImaginary();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), 0.45932674407958984);
      complex0.isInfinite();
      Complex complex1 = complex0.add((-189.539846));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply((-30));
      Complex complex4 = Complex.INF;
      complex4.sqrt();
      complex3.pow((-189.539846));
      complex2.sinh();
      complex1.getArgument();
      complex1.getArgument();
      complex4.reciprocal();
      complex0.getImaginary();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex1.multiply(1);
      Complex complex5 = Complex.valueOf((double) 1, (double) 1);
      complex1.negate();
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex1.pow(complex0);
      complex7.INF.toString();
      complex6.log();
      Complex complex8 = Complex.INF;
      complex8.sin();
      Complex complex9 = complex3.pow(1.0);
      Complex complex10 = complex5.reciprocal();
      complex10.getReal();
      complex4.subtract(1414.0);
      complex8.subtract(complex9);
      Complex.valueOf(0.5);
      complex9.pow(1518.08086826);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.sinh();
      complex2.ONE.toString();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = new Complex(0.5110208988189697, 993.0);
      complex2.ONE.cos();
      complex4.NaN.cosh();
      complex3.ZERO.cosh();
      complex4.NaN.nthRoot(1209);
      Complex complex5 = complex0.subtract(complex4);
      complex5.ZERO.nthRoot(1);
      Complex complex6 = Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = complex4.divide((-217.647125));
      complex7.NaN.cosh();
      Complex complex8 = complex7.add(complex5);
      Complex complex9 = complex8.cosh();
      complex2.ONE.conjugate();
      complex9.ONE.sqrt1z();
      Complex complex10 = complex6.conjugate();
      complex10.cos();
      complex8.multiply(7);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.INF.createComplex(1899.3900181811712, 1899.3900181811712);
      complex0.ONE.hashCode();
      complex0.conjugate();
      complex0.getArgument();
      complex0.nthRoot(2927);
      Complex complex5 = complex4.cos();
      complex2.sqrt();
      Object object0 = complex5.readResolve();
      complex1.equals(object0);
      complex2.multiply(5.32346341339996E-260);
      Complex complex6 = complex4.acos();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = new Complex(993.0, 0.5110208988189697);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.divide(993.0);
      Complex complex5 = complex4.subtract(complex0);
      complex1.abs();
      Complex complex6 = complex5.tan();
      complex6.ZERO.getField();
      complex4.hashCode();
      complex1.isInfinite();
      Complex complex7 = complex5.createComplex((-727.203), (-727.203));
      complex7.isNaN();
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.sqrt();
      complex0.ZERO.toString();
      complex0.equals("");
      Complex complex3 = complex1.cos();
      complex0.INF.conjugate();
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex3.NaN.tan();
      complex0.pow(0.0);
      complex1.getImaginary();
      complex1.negate();
      complex1.tan();
      complex5.ZERO.atan();
      Complex complex6 = complex2.log();
      complex3.hashCode();
      complex6.isInfinite();
      complex5.multiply(0.0);
      complex3.hashCode();
      complex4.NaN.multiply(0);
      Complex complex7 = Complex.valueOf(Double.NEGATIVE_INFINITY, 1571.4709163);
      complex7.ZERO.conjugate();
      Complex complex8 = complex3.add(complex4);
      complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.createComplex(1210.159, 1210.159);
      Complex complex4 = complex3.cosh();
      complex2.NaN.pow(20.0);
      complex0.ZERO.getField();
      complex1.NaN.readResolve();
      Complex complex5 = Complex.valueOf((-1508.9147825810892), (-1508.9147825810892));
      Complex complex6 = complex5.add((-1508.9147825810892));
      complex2.log();
      complex3.conjugate();
      complex1.abs();
      complex0.log();
      complex6.tanh();
      Complex complex7 = complex4.add(0.9689123630523682);
      complex7.NaN.cosh();
      complex7.I.multiply(0);
      complex4.subtract(1210.159);
      complex4.add(619.39937850358);
      complex3.cos();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(3145.56, 3.67972590471072E-8);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.INF.divide(3145.56);
      complex1.NaN.subtract(complex0);
      complex0.abs();
      complex0.tan();
      complex0.hashCode();
      complex0.isInfinite();
      Complex complex3 = complex2.createComplex(3145.56, (-727.203));
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-632.0), (-632.0));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.atan();
      complex2.getField();
      complex3.getReal();
      Complex complex4 = complex2.NaN.multiply(complex0);
      Complex.valueOf(0.0, (-632.0));
      Complex complex5 = complex0.cos();
      complex5.NaN.subtract(0.0);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.atan();
      complex1.NaN.divide(complex7);
      Complex complex8 = complex6.ONE.add(complex3);
      complex2.INF.sinh();
      complex6.equals(complex3);
      complex3.reciprocal();
      complex6.asin();
      complex4.asin();
      complex1.sin();
      complex1.sqrt();
      complex1.atan();
      complex3.sinh();
      Complex complex9 = complex1.conjugate();
      complex9.I.pow(complex2);
      complex0.log();
      complex8.sinh();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-2759.719817822843));
      complex0.readResolve();
      complex0.ZERO.readResolve();
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex2 = complex1.NaN.conjugate();
      complex2.INF.log();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.multiply(complex0);
      complex4.ONE.getField();
      Complex complex5 = Complex.valueOf((-4865.7));
      complex5.INF.cosh();
      Complex complex6 = complex5.NaN.cos();
      complex6.NaN.tan();
      Complex complex7 = complex3.divide(2.0);
      complex7.INF.readResolve();
      Complex complex8 = complex7.ONE.subtract(0.0);
      Complex complex9 = complex7.I.tan();
      complex9.I.multiply(complex5);
      complex8.tanh();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex5.sqrt();
      complex8.I.readResolve();
      complex5.getReal();
      complex11.hashCode();
      complex8.isNaN();
      complex5.getArgument();
      complex0.multiply(1);
      complex3.tan();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 141.94082138);
      complex0.getArgument();
      complex0.ONE.tanh();
      Complex complex1 = Complex.valueOf(1.0707499980926514, (-1537.63));
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex.valueOf((-99.1), 0.0);
      Complex complex3 = complex1.ZERO.multiply(1.0707499980926514);
      complex2.NaN.toString();
      complex3.I.multiply((-318.238928));
      Complex complex4 = Complex.valueOf(1.5567068799597272, 3395.496647477293);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      complex0.equals(complex1);
      complex4.getReal();
      Complex complex6 = complex0.asin();
      complex3.ONE.pow(complex2);
      Complex complex7 = complex6.negate();
      complex7.INF.abs();
      Complex complex8 = complex7.INF.reciprocal();
      complex5.getArgument();
      Complex complex9 = complex3.multiply((-2538));
      complex9.multiply(5243.019771405307);
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2287.09);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-241.830895));
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex0.ONE.multiply(complex1);
      complex3.ZERO.getField();
      Complex complex6 = complex0.INF.negate();
      complex2.readResolve();
      complex2.INF.getArgument();
      complex3.ZERO.getField();
      Complex complex7 = complex1.add(2287.09);
      complex7.INF.sinh();
      complex7.I.abs();
      complex7.toString();
      complex1.getImaginary();
      complex2.getField();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex9.NaN.add(complex4);
      Complex complex11 = complex9.ZERO.tan();
      complex11.I.negate();
      complex11.log();
      Complex.valueOf(1530.52101846, 0.0);
      complex1.readResolve();
      complex8.multiply(1);
      complex6.nthRoot(1);
      complex10.getArgument();
      complex11.divide(complex5);
      complex1.getReal();
      complex0.getArgument();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.atan();
      complex0.divide(complex1);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex3.tan();
      complex4.ZERO.conjugate();
      complex4.ZERO.multiply(complex2);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.divide(complex1);
      complex6.tanh();
      complex5.getArgument();
      complex5.asin();
      Complex complex7 = Complex.valueOf(0.0, (-2288.586951918));
      complex7.ZERO.createComplex(Double.NaN, (-1469.441181154398));
      complex6.INF.tan();
      complex2.add(1013.861134672);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.multiply((-30));
      Complex complex10 = complex0.sqrt();
      complex3.pow(1013.861134672);
      complex10.I.sinh();
      complex1.getArgument();
      complex1.getArgument();
      complex10.reciprocal();
      complex9.getImaginary();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.I.negate();
      complex2.ONE.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.multiply(complex4);
      complex4.abs();
      Complex complex6 = complex4.ONE.add(complex5);
      Complex complex7 = complex4.INF.reciprocal();
      complex4.cos();
      complex3.ONE.toString();
      complex4.multiply(Double.NaN);
      complex3.isInfinite();
      Complex complex8 = complex1.sin();
      complex4.atan();
      complex4.sinh();
      complex5.cos();
      Complex complex9 = complex0.asin();
      complex9.ONE.getField();
      complex9.readResolve();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex10.ONE.exp();
      complex11.INF.atan();
      complex11.INF.add(complex5);
      complex8.acos();
      complex4.getImaginary();
      complex9.sin();
      complex5.NaN.divide(Double.POSITIVE_INFINITY);
      complex8.hashCode();
      complex4.equals("PR?=");
      complex6.reciprocal();
      complex8.reciprocal();
      complex0.nthRoot(3907);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = 1833.0057170805;
      Complex complex0 = new Complex(1833.0057170805);
      complex0.ONE.log();
      Complex complex1 = complex0.NaN.conjugate();
      complex1.INF.multiply(17);
      try { 
        complex0.nthRoot((-2520));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,520
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cos();
      complex0.I.abs();
      complex0.ZERO.sinh();
      complex0.hashCode();
      complex0.isInfinite();
      complex0.sinh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.atan();
      complex3.INF.sinh();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      complex0.I.multiply(1.0315548713040775E-9);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.log();
      complex2.I.cos();
      Complex complex3 = complex0.I.conjugate();
      complex3.cosh();
      complex3.acos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex6.subtract(complex0);
      complex1.exp();
      complex6.NaN.cos();
      complex6.nthRoot(1106);
      complex8.cos();
      complex7.sqrt();
      complex3.equals(complex5);
      Complex complex9 = complex6.multiply(0.0);
      complex8.acos();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-2016.0147));
      Complex complex1 = Complex.valueOf(3569.20083327);
      complex0.pow(complex1);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.sin();
      complex0.pow((-2016.0147));
      Complex complex4 = complex0.reciprocal();
      complex1.getReal();
      complex4.subtract((-2016.0147));
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.valueOf((-1976.649892));
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex2.INF.atan();
      Complex complex6 = complex5.I.log();
      complex5.ONE.atan();
      complex6.ZERO.tanh();
      complex4.getArgument();
      complex0.sqrt1z();
      complex1.subtract(complex4);
      Complex complex7 = complex0.sqrt1z();
      complex7.ONE.getField();
      complex7.NaN.sinh();
      complex2.divide((-1.5707963267948966));
      complex4.cos();
      complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double double0 = (-2500.7942860176595);
      Complex complex0 = new Complex((-2500.7942860176595));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.atan();
      complex3.INF.add(0.0);
      complex2.INF.readResolve();
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex4.INF.pow(complex1);
      complex5.NaN.abs();
      complex4.NaN.abs();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(199.6106075);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = complex3.NaN.cos();
      complex4.I.getArgument();
      complex0.ONE.abs();
      Complex complex6 = complex2.NaN.asin();
      complex6.ZERO.conjugate();
      Complex complex7 = complex3.INF.multiply(complex0);
      complex1.getReal();
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.hashCode();
      complex0.ONE.subtract(1.5707963267948966);
      complex3.exp();
      Complex complex8 = complex7.cosh();
      complex8.ONE.cos();
      complex8.ZERO.asin();
      Complex complex9 = complex4.asin();
      complex9.I.subtract(complex8);
      complex3.log();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-2036.85569), (-2036.85569));
      complex0.readResolve();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.divide((-2036.85569));
      Complex complex4 = complex2.subtract(complex0);
      complex4.readResolve();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex2.atan();
      Complex complex7 = complex1.createComplex(1.6894686222076416, 3.495384792953975E-252);
      Complex.valueOf((-2036.85569), (-2036.85569));
      complex7.isNaN();
      complex3.sqrt();
      complex5.sin();
      Complex.valueOf((-2036.85569), (-98.1965));
      complex6.add(6832.696805);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.tan();
      complex3.I.multiply((double) 1);
      complex1.INF.reciprocal();
      Complex complex4 = Complex.valueOf((-20.0), (-3231.0798479910095));
      Complex complex5 = complex0.createComplex(2334.06155314883, 2334.06155314883);
      complex5.multiply(1);
      complex2.tan();
      complex0.conjugate();
      complex4.divide(complex0);
      Complex.valueOf((-3231.0798479910095), (double) 1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.INF.add((-2044.2003053074));
      complex1.INF.pow(0.6080870628356934);
      complex0.NaN.getArgument();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.multiply((-45));
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex5.multiply((-45));
      complex3.ZERO.log();
      Complex complex8 = complex0.add(complex3);
      complex7.INF.acos();
      Complex complex9 = complex8.sqrt();
      complex9.INF.createComplex(6.283185307179586, 6.283185307179586);
      complex9.equals(complex2);
      complex7.getImaginary();
      complex5.isNaN();
      complex8.acos();
      complex1.abs();
      complex6.NaN.add(complex0);
      complex5.reciprocal();
      complex5.isNaN();
      complex4.multiply(complex0);
      complex6.createComplex(0.0, 0.6080870628356934);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.INF;
      complex1.ONE.negate();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.ONE.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = new Complex(Double.NaN, (-1804.66));
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.ZERO.cos();
      complex8.I.multiply(complex6);
      Complex complex9 = complex4.INF.multiply(complex2);
      complex0.ONE.divide(complex5);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex9.cosh();
      complex12.ONE.log();
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex13 = complex12.multiply(874.409);
      complex4.ONE.sinh();
      complex13.INF.sin();
      complex9.readResolve();
      complex11.sinh();
      complex3.cosh();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.conjugate();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.INF.reciprocal();
      complex1.ZERO.tanh();
      complex0.ONE.reciprocal();
      complex1.reciprocal();
      Complex complex3 = complex2.ZERO.atan();
      complex3.NaN.log();
      Complex complex4 = complex3.ZERO.divide(0.0);
      Complex complex5 = complex2.ONE.add((-1014.23261));
      complex5.I.sqrt();
      complex0.negate();
      complex0.abs();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex4.ZERO.acos();
      complex0.I.nthRoot(541);
      complex6.ONE.abs();
      Complex complex8 = complex5.tanh();
      complex8.I.sin();
      complex8.ONE.atan();
      Complex complex9 = Complex.valueOf((-1397.0564076), (-34.18936));
      complex9.I.getField();
      Complex complex10 = complex1.sinh();
      complex0.tan();
      Complex complex11 = complex4.multiply(complex10);
      Complex complex12 = Complex.INF;
      complex11.equals(complex12);
      Complex complex13 = complex4.acos();
      complex5.conjugate();
      complex13.log();
      complex5.divide((-1180.0727816413));
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex1.multiply(1);
      Complex.valueOf((double) 1, (double) 1);
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.valueOf((-2860.858144199901), 0.0);
      Complex complex7 = complex6.INF.pow(0.0);
      complex6.I.sin();
      Complex complex8 = complex5.ZERO.multiply(7);
      complex5.INF.multiply(complex3);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex6.add(complex9);
      complex10.I.tan();
      Complex complex11 = complex2.pow(6.283185307179586);
      Complex.valueOf(0.0, (-2860.858144199901));
      Complex complex12 = Complex.valueOf((-2.44242319E-315));
      complex11.NaN.tanh();
      complex5.log();
      complex4.reciprocal();
      complex1.getImaginary();
      complex4.multiply(complex5);
      complex4.multiply((-2.44242319E-315));
      complex8.sinh();
      Complex complex13 = complex12.pow(complex2);
      complex13.INF.divide(0.0);
      complex2.log();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(2197.246);
      Complex complex1 = Complex.valueOf(2197.246, 2197.246);
      Complex complex2 = complex1.sinh();
      complex1.I.readResolve();
      Complex complex3 = complex0.divide(2466.07623062704);
      complex3.INF.pow(complex1);
      Complex complex4 = complex3.I.sqrt();
      complex4.I.subtract(79.0);
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex0.multiply(1.389719009399414);
      Complex complex7 = complex5.I.add(2466.07623062704);
      Complex complex8 = complex6.sin();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex9.ZERO.subtract((-1428.7224));
      complex9.INF.asin();
      complex0.abs();
      complex8.subtract(621.8621074132092);
      complex7.conjugate();
      complex7.getReal();
      complex7.atan();
      complex2.tan();
      complex10.getReal();
      Complex complex11 = Complex.ONE;
      complex8.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.NaN.abs();
      complex0.ONE.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex0.NaN.multiply(complex6);
      Complex.valueOf(2.3375763256988976E-7);
      complex5.sin();
      complex4.readResolve();
      complex6.createComplex(2100.2821795114537, Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.isNaN();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.subtract(Double.NaN);
      complex8.divide(Double.NaN);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.divide(469.120464717);
      complex0.nthRoot(642);
      complex0.ONE.sqrt();
      complex0.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.pow((-626.1759275485101));
      Complex complex3 = complex1.multiply(642);
      Complex complex4 = complex3.NaN.add(Double.NaN);
      double double0 = 1519.028988;
      Complex complex5 = Complex.valueOf((double) 642, 1519.028988);
      Complex complex6 = complex4.sqrt();
      complex1.isInfinite();
      complex0.cos();
      complex4.readResolve();
      complex6.tanh();
      Complex complex7 = Complex.valueOf((-0.1428571423679182));
      complex0.multiply(0.0);
      complex3.isNaN();
      Complex complex8 = complex3.tanh();
      complex8.ZERO.subtract(complex5);
      complex6.sqrt();
      Complex complex9 = complex2.add(complex0);
      complex9.INF.sqrt1z();
      complex1.pow((-1636.79605));
      complex7.toString();
      try { 
        complex8.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      complex3.I.getArgument();
      complex4.NaN.cosh();
      Complex complex5 = Complex.valueOf(0.0, 1.5707963267948966);
      complex4.I.add(complex3);
      complex3.INF.readResolve();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ZERO.getField();
      Complex complex7 = complex6.NaN.add(0.0);
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex8.ZERO.pow(0.0);
      complex10.I.abs();
      Complex.valueOf(0.0);
      complex1.getField();
      Complex complex11 = complex8.add((-212.0));
      Complex complex12 = complex11.I.divide(complex6);
      complex1.isNaN();
      complex11.add(0.0);
      Complex complex13 = complex6.asin();
      complex13.divide(complex8);
      complex4.hashCode();
      complex2.ONE.exp();
      Complex complex14 = complex13.multiply((-114));
      Complex complex15 = complex14.I.cosh();
      complex13.reciprocal();
      complex9.pow(complex7);
      complex5.sqrt();
      complex6.equals(complex2);
      complex15.divide(1.5707963267948966);
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.sinh();
      complex2.ONE.toString();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = new Complex(0.5110208988189697, 993.0);
      complex2.ONE.cos();
      complex4.NaN.cosh();
      complex3.ZERO.cosh();
      complex4.NaN.nthRoot(1209);
      Complex complex5 = complex0.subtract(complex4);
      complex5.ZERO.nthRoot(1);
      Complex complex6 = Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = complex4.divide((-217.647125));
      complex7.NaN.cosh();
      Complex complex8 = complex7.add(complex5);
      Complex complex9 = complex8.cosh();
      complex2.ONE.conjugate();
      complex9.ONE.sqrt1z();
      Complex complex10 = complex6.conjugate();
      complex10.cos();
      complex10.readResolve();
      complex3.multiply(1209);
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), 0.45932674407958984);
      complex0.isInfinite();
      complex0.INF.createComplex(0.0, 0.0);
      complex0.isNaN();
      Complex complex1 = complex0.add(0.45932674407958984);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.0, 1926.24);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.acos();
      double double1 = 0.0;
      complex2.subtract(0.0);
      double double2 = 0.0;
      Complex.valueOf(1.0, 0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex0.ZERO.multiply(complex4);
      complex5.pow(1.0);
      complex3.INF.add(1.0);
      complex5.INF.atan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.multiply(complex6);
      complex7.getField();
      Complex complex8 = complex2.divide(654.5207100072);
      Complex complex9 = complex8.acos();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.NaN.conjugate();
      Complex complex11 = complex8.NaN.acos();
      Complex complex12 = complex9.INF.subtract(complex1);
      complex12.NaN.tan();
      complex8.reciprocal();
      complex3.sin();
      complex7.getArgument();
      try { 
        complex11.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.INF.createComplex(1899.3900181811712, 1899.3900181811712);
      complex0.ONE.hashCode();
      Complex complex5 = complex0.conjugate();
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex0.getArgument();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      complex0.getReal();
      complex0.getArgument();
      Complex complex6 = complex3.tan();
      assertFalse(complex0.equals((Object)complex5));
      assertSame(complex6, complex3);
      assertFalse(complex6.equals((Object)complex4));
      assertSame(complex6, complex2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.cosh();
      complex2.INF.subtract(0.0);
      Complex complex3 = complex1.ONE.reciprocal();
      complex3.NaN.getField();
      complex0.getImaginary();
      Complex complex4 = complex0.cos();
      complex4.ZERO.getArgument();
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      complex5.INF.tanh();
      complex5.ONE.abs();
      Complex complex6 = complex5.I.pow(complex1);
      complex6.ZERO.tanh();
      complex3.I.getField();
      complex1.toString();
      complex4.tan();
      complex1.hashCode();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.ONE.reciprocal();
      complex4.ONE.hashCode();
      complex8.ONE.createComplex(0.0, (-746.8122853838));
      complex2.INF.negate();
      complex3.multiply((-2080));
      try { 
        complex8.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
