/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:20:19 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = Complex.I;
      complex3.log();
      complex3.INF.readResolve();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = Complex.ZERO;
      complex1.getField();
      complex0.reciprocal();
      Complex complex6 = complex0.add(complex3);
      Complex complex7 = complex6.INF.cosh();
      complex7.ONE.sqrt();
      Complex complex8 = complex3.sin();
      complex8.NaN.pow(complex1);
      Complex complex9 = complex8.createComplex((-205.79858315956), Double.POSITIVE_INFINITY);
      complex2.multiply(complex1);
      complex1.isNaN();
      Complex.valueOf(1807.269233839, Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.multiply(complex9);
      complex10.I.pow(complex8);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-3.1443E-10), (-3.1443E-10));
      Complex complex1 = new Complex((-3.1443E-10), Double.POSITIVE_INFINITY);
      Complex.valueOf(0.9999999999999998, 20.0);
      Complex complex2 = Complex.ZERO;
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(9.903174064539538E203, 617.33912024605);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.pow((-3072.2683380378));
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.I;
      complex5.pow(complex4);
      complex0.getArgument();
      complex3.sinh();
      Complex complex6 = new Complex(3798.6284, (-3072.2683380378));
      Complex complex7 = complex6.tan();
      complex7.NaN.pow(complex0);
      complex3.conjugate();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.INF.add(6.283185307179586);
      Complex.valueOf(1.0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.INF.add(1.0);
      complex5.cosh();
      Complex complex6 = complex0.INF.createComplex((-1998.206634245205), 1.0000000000000004);
      Complex complex7 = complex4.ZERO.divide((-56.7));
      complex7.pow(complex6);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex4.reciprocal();
      complex9.ONE.sqrt();
      Complex complex10 = complex8.createComplex(1.0, 4.0447634595724164E195);
      complex10.acos();
      complex10.nthRoot(1);
      complex3.add((-56.7));
      complex4.sinh();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 5.326182134294869E-8);
      Complex complex1 = complex0.tanh();
      complex1.NaN.nthRoot(4474);
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.readResolve();
      complex1.ZERO.readResolve();
      complex1.getField();
      Complex complex3 = complex0.sin();
      Complex.valueOf(1.626681160546142E-6);
      Complex complex4 = complex0.cos();
      complex3.readResolve();
      complex4.ZERO.conjugate();
      Complex complex5 = complex4.NaN.multiply((double) 4474);
      complex0.sqrt();
      Complex complex6 = complex4.sin();
      Complex complex7 = Complex.valueOf((double) 4474);
      complex6.abs();
      complex0.tanh();
      Complex.valueOf(0.39684961487564246, 860.53700800647);
      complex7.tanh();
      Complex complex8 = complex0.multiply(4474);
      complex8.multiply(0);
      complex5.sqrt1z();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.I.asin();
      Complex complex2 = new Complex(3.1838092090922606E287);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      complex0.nthRoot(2146729270);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(493.088089, 493.088089);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.subtract(493.088089);
      complex2.NaN.log();
      complex2.ZERO.getArgument();
      complex1.pow(3165.04);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.144331429489291E-10), (-3.144331429489291E-10));
      Complex complex1 = complex0.acos();
      complex0.sqrt1z();
      complex1.tan();
      complex1.toString();
      Complex complex2 = complex1.tan();
      complex1.multiply((-0.7615941559557649));
      complex2.readResolve();
      complex1.multiply(2822.346);
      complex1.abs();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(1.708073418273571);
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.exp();
      Complex complex2 = complex1.tan();
      complex2.multiply((-1785.960791843634));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-17.1162020293146), (-17.1162020293146));
      Complex complex1 = complex0.cosh();
      complex0.getReal();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.asin();
      complex1.sqrt();
      complex1.equals(complex3);
      Complex complex4 = complex2.subtract((-17.1162020293146));
      complex4.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.reciprocal();
      complex0.I.divide(complex1);
      Complex complex2 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(319.91, (-20.0));
      complex1.multiply(complex0);
      Complex complex2 = complex1.divide(complex0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1732.649857261877), (-1689.4991959165));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.INF.add(complex3);
      Complex complex5 = complex4.INF.subtract(2.0);
      Complex complex6 = complex5.NaN.tan();
      complex6.cos();
      complex2.INF.tan();
      complex0.add(complex1);
      complex0.add((-472.9549864750502));
      complex0.getImaginary();
      Complex.valueOf(76621.8968760785, (-0.38109784554181547));
      Complex complex7 = complex1.log();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(513.22);
      complex0.getReal();
      Complex complex1 = complex0.sinh();
      complex1.negate();
      complex1.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(513.22);
      complex3.equals(complex4);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.subtract(513.22);
      complex5.tan();
      Complex complex8 = complex2.sqrt1z();
      complex8.getArgument();
      Complex complex9 = complex8.cos();
      complex7.cosh();
      Complex complex10 = complex4.negate();
      Complex complex11 = complex8.multiply(1.5707963267948966);
      complex3.hashCode();
      complex9.exp();
      Complex complex12 = Complex.valueOf(953.7181, 0.0);
      complex0.sin();
      complex10.add(complex11);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-569.099598368), Double.NaN);
      Complex complex1 = Complex.NaN;
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-3.144331429489291E-10), (-3.144331429489291E-10));
      Complex complex1 = complex0.cosh();
      complex0.getReal();
      complex1.sinh();
      Complex complex2 = complex1.createComplex((-3.144331429489291E-10), (-3.144331429489291E-10));
      complex0.INF.createComplex(Double.NaN, (-3.144331429489291E-10));
      complex2.I.atan();
      complex1.acos();
      complex2.multiply((-6569));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      complex0.exp();
      Complex.valueOf(Double.NaN, (-20.0));
      Complex complex1 = Complex.I;
      complex1.sin();
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.multiply(complex0);
      complex1.tan();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(696.8018379010572, 947.87283494);
      Complex complex1 = Complex.valueOf(696.8018379010572, 696.8018379010572);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.NaN;
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-17.1162020293146), (-17.1162020293146));
      complex0.readResolve();
      Complex complex1 = complex0.subtract((-17.1162020293146));
      complex1.readResolve();
      complex0.divide((-17.1162020293146));
      complex0.readResolve();
      Complex complex2 = complex1.acos();
      complex1.getField();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf((-17.1162020293146));
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex4.cosh();
      complex3.sqrt();
      complex0.sin();
      Complex complex7 = complex3.pow(complex6);
      Complex complex8 = complex2.createComplex((-17.1162020293146), 0.0);
      complex8.multiply(complex5);
      complex2.divide(complex7);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      complex0.NaN.atan();
      Complex complex3 = complex2.subtract((-20.0));
      complex0.readResolve();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex4.asin();
      complex2.readResolve();
      complex2.acos();
      Complex complex6 = complex5.multiply(6.283185307179586);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1166.88));
      complex0.readResolve();
      complex1.readResolve();
      complex0.readResolve();
      Complex complex2 = Complex.I;
      complex2.getField();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.pow(complex3);
      complex4.createComplex((-205.79858315956), 2503.5652);
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.negate();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex1.ONE.add(complex2);
      complex2.INF.readResolve();
      complex2.INF.divide(Double.POSITIVE_INFINITY);
      Object object0 = complex2.readResolve();
      Complex complex3 = ((Complex) object0).NaN.asin();
      complex3.ZERO.tan();
      complex0.readResolve();
      complex1.acos();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.nthRoot(4512);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1897.2071074613, (-987.0303724));
      Complex complex2 = complex0.cosh();
      complex0.getReal();
      complex1.sinh();
      Complex complex3 = complex2.negate();
      complex0.asin();
      complex0.sqrt();
      Complex complex4 = Complex.ONE;
      complex1.equals(complex4);
      complex1.cosh();
      Complex complex5 = Complex.ONE;
      complex5.subtract(1897.2071074613);
      complex1.tan();
      Complex complex6 = Complex.ZERO;
      complex6.getArgument();
      complex4.divide(0.0);
      complex3.cos();
      complex0.cosh();
      complex3.negate();
      complex4.exp();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.getReal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.negate();
      complex3.asin();
      Complex complex5 = complex3.sqrt();
      complex3.equals(complex5);
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.subtract(8.57145);
      complex2.tan();
      complex4.getArgument();
      complex8.divide((-2650.846167232722));
      complex1.cos();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.negate();
      complex7.exp();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      complex0.NaN.atan();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = (Complex)complex2.INF.readResolve();
      Complex complex4 = complex2.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = (Complex)complex2.readResolve();
      complex1.asin();
      Complex complex6 = new Complex(3498.8624740484, 3498.8624740484);
      complex6.readResolve();
      Complex complex7 = complex5.acos();
      complex4.getField();
      complex3.reciprocal();
      Complex complex8 = complex5.add(complex0);
      complex8.cosh();
      complex6.multiply(complex7);
      complex0.sin();
      Complex.valueOf((-279.3));
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ZERO;
      complex2.getArgument();
      Complex complex3 = complex0.divide((-271.844688245));
      complex0.cos();
      Complex complex4 = complex3.cosh();
      complex2.negate();
      complex4.multiply((-1071349497));
      complex1.exp();
      complex4.sin();
      complex3.log();
      Complex complex5 = Complex.I;
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.10993985831737518, 0.10993985831737518);
      Complex complex1 = complex0.I.tanh();
      complex0.getImaginary();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.ONE.tan();
      complex5.ZERO.toString();
      Complex complex6 = complex1.tan();
      complex6.ZERO.abs();
      Complex complex7 = complex6.divide(205.79858315956);
      Complex complex8 = complex7.tanh();
      complex0.sqrt1z();
      Complex complex9 = Complex.valueOf(0.10993985831737518);
      complex9.INF.hashCode();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex3.divide(complex0);
      complex10.ZERO.sinh();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex12.divide(complex8);
      complex13.INF.multiply(2242);
      complex13.cos();
      complex1.getImaginary();
      complex11.atan();
      complex7.divide((-1292.051729));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.INF.readResolve();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex0.readResolve();
      complex2.acos();
      complex1.getField();
      complex0.reciprocal();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.ONE.sqrt();
      complex2.sin();
      complex3.pow(complex6);
      Complex complex7 = complex3.createComplex(0.0, (-196.31399081662));
      Complex complex8 = Complex.INF;
      complex8.multiply(complex7);
      Complex complex9 = Complex.valueOf((-20.0), (-205.79858315956));
      complex4.divide(complex9);
      Complex complex10 = Complex.NaN;
      complex10.tanh();
      complex8.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.INF.readResolve();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = (Complex)complex3.readResolve();
      complex0.readResolve();
      complex2.acos();
      complex1.getField();
      complex0.reciprocal();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex6.ONE.sqrt();
      complex7.INF.add(complex4);
      Complex complex8 = new Complex((-3519.4774739), Double.POSITIVE_INFINITY);
      complex8.NaN.pow((-3519.4774739));
      complex8.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.multiply(485);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-3.144331429489291E-10), (-3.144331429489291E-10));
      Complex complex1 = complex0.cosh();
      complex0.getReal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.sqrt();
      complex1.equals(complex4);
      Complex complex6 = complex2.cosh();
      complex3.subtract((-3.144331429489291E-10));
      Complex complex7 = complex0.tan();
      complex5.getArgument();
      Complex complex8 = complex6.divide((-3.144331429489291E-10));
      Complex complex9 = complex3.cos();
      complex2.cosh();
      complex8.negate();
      complex7.exp();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.cosh();
      Complex complex2 = new Complex(1.8810608386993408, 2466.2808813426);
      complex2.getReal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.negate();
      complex0.sqrt();
      Complex complex5 = complex4.asin();
      complex1.sqrt();
      complex5.equals(complex0);
      complex4.tan();
      Complex complex6 = Complex.ZERO;
      complex6.getArgument();
      Complex complex7 = complex4.divide((-271.844688245));
      complex0.cos();
      complex0.cosh();
      complex4.negate();
      complex7.exp();
      Complex complex8 = complex6.sin();
      complex2.log();
      complex8.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.createComplex((-8.335545536862392E-8), (-8.335545536862392E-8));
      complex2.isNaN();
      complex2.ZERO.exp();
      complex2.ZERO.hashCode();
      complex2.INF.getField();
      Complex complex3 = complex2.ZERO.subtract((-8.335545536862392E-8));
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.getField();
      Complex complex5 = complex2.sqrt();
      complex5.nthRoot(173);
      Complex complex6 = Complex.valueOf((-8.335545536862392E-8), (double) 173);
      complex6.ZERO.tanh();
      complex5.toString();
      Complex complex7 = complex6.divide(483.04143193043);
      complex3.cos();
      complex6.cosh();
      complex3.negate();
      complex7.exp();
      complex5.sin();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      complex1.getReal();
      Complex complex3 = complex0.sinh();
      complex0.negate();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.ZERO;
      complex6.equals(complex2);
      complex5.I.cosh();
      complex3.subtract(Double.NaN);
      complex0.tan();
      complex5.getArgument();
      complex6.divide(Double.NaN);
      complex5.cos();
      complex6.cosh();
      complex1.negate();
      complex4.exp();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide((-3705.92316));
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex1.ONE.createComplex((-3705.92316), 20.0);
      complex3.ONE.subtract(409.902623948);
      complex3.I.hashCode();
      complex3.ONE.tan();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.negate();
      complex1.ZERO.subtract(complex2);
      Complex complex7 = complex6.ONE.subtract(complex5);
      complex7.I.add(complex6);
      complex0.INF.toString();
      Complex complex8 = complex0.divide((-4694.85));
      Complex complex9 = complex0.sinh();
      complex5.ONE.pow(complex4);
      Complex complex10 = complex8.ONE.sqrt1z();
      Complex complex11 = complex8.log();
      complex11.NaN.getField();
      complex5.abs();
      Complex complex12 = complex8.pow((-4694.85));
      Complex complex13 = complex8.acos();
      complex10.abs();
      complex12.divide(complex9);
      complex2.acos();
      complex12.toString();
      complex1.getImaginary();
      Complex complex14 = complex2.sqrt();
      complex13.tanh();
      Object object0 = complex11.readResolve();
      complex0.equals(object0);
      complex14.tan();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1229497.2416888366));
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.multiply(1.5707963267948966);
      complex1.toString();
      complex0.toString();
      complex0.I.tan();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.multiply((-1229497.2416888366));
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = Complex.valueOf(1229497.2416888366);
      Complex complex7 = complex0.pow(complex6);
      Complex.valueOf(1.5707963267948966, (-1229497.2416888366));
      Complex complex8 = complex7.ZERO.divide(1229497.2416888366);
      Complex complex9 = complex8.cos();
      complex9.INF.conjugate();
      complex8.hashCode();
      complex5.NaN.tan();
      Complex complex10 = complex2.exp();
      complex10.NaN.conjugate();
      complex10.ONE.nthRoot(71);
      complex5.readResolve();
      complex4.nthRoot(4513);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex((-1108.82741745));
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 9.956860681280245E-10);
      complex0.nthRoot(524);
      Complex complex3 = complex1.sqrt1z();
      complex0.getField();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.exp();
      complex4.nthRoot(829);
      complex5.createComplex(0.9999999999999897, 160.426144844);
      Complex complex6 = Complex.valueOf(25.559851113650964);
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.tan();
      complex9.ZERO.sqrt1z();
      complex3.sinh();
      complex7.subtract(complex6);
      Complex complex10 = Complex.NaN;
      complex4.createComplex((-205.79858315956), 9.956860681280245E-10);
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.NaN;
      Complex complex13 = Complex.valueOf((-178.57656490585956));
      complex13.divide(complex2);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(3252);
      Complex complex2 = complex1.pow((double) 3252);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.exp();
      complex2.cos();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex6.subtract(complex7);
      Complex complex9 = Complex.NaN;
      complex5.hashCode();
      complex8.abs();
      complex0.subtract(complex3);
      complex5.isInfinite();
      Complex complex10 = Complex.INF;
      complex7.asin();
      Complex complex11 = new Complex(Double.NaN, 3252);
      complex11.sqrt1z();
      complex11.pow(complex6);
      complex10.multiply(Double.NaN);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.negate();
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = (Complex)complex3.INF.readResolve();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = (Complex)complex3.readResolve();
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex3.acos();
      complex4.getField();
      Complex complex8 = complex1.reciprocal();
      complex4.add(complex2);
      complex7.cosh();
      Complex complex9 = complex5.sqrt();
      complex6.sin();
      complex9.pow(complex5);
      complex0.createComplex((-205.79858315956), (-2298.935835208));
      Complex complex10 = complex2.multiply(complex8);
      complex3.divide(complex4);
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.INF.readResolve();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = (Complex)complex3.readResolve();
      complex0.readResolve();
      complex2.acos();
      complex1.getField();
      complex0.reciprocal();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex6.ONE.sqrt();
      complex7.INF.add(complex4);
      Complex complex8 = new Complex((-3519.4774739), Double.POSITIVE_INFINITY);
      complex8.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
      complex1.I.abs();
      Complex complex2 = new Complex(1.0);
      complex2.getReal();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.negate();
      complex3.asin();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = Complex.I;
      complex1.equals((Object) null);
      complex4.cosh();
      Complex complex7 = complex5.subtract(1.0);
      complex4.tan();
      complex5.getArgument();
      complex6.divide(1.0);
      complex4.cos();
      complex3.cosh();
      complex7.negate();
      Complex complex8 = Complex.ZERO;
      complex8.exp();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(896.4977702842);
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf((-479.7539466), 1585.218375742131);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.pow(1585.218375742131);
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex5.exp();
      complex4.getReal();
      complex9.readResolve();
      complex1.negate();
      complex0.createComplex(1585.218375742131, 71.0);
      complex4.sinh();
      Complex complex10 = complex8.multiply(71.0);
      Complex complex11 = complex7.divide(1.8500902652740479);
      complex10.pow(complex3);
      Complex complex12 = complex11.multiply(complex0);
      complex2.divide(complex1);
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.toString();
      complex0.getField();
      Complex complex1 = complex0.subtract(1593.9412004463575);
      Complex complex2 = complex0.conjugate();
      complex1.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sqrt();
      complex3.nthRoot(173);
      Complex complex5 = Complex.valueOf(1630.041576, (double) 173);
      Complex complex6 = complex5.tanh();
      complex2.toString();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex7.atan();
      complex1.isNaN();
      complex4.subtract(1630.041576);
      Complex complex9 = complex1.multiply((-5.0));
      complex8.add(1630.041576);
      complex9.reciprocal();
      complex2.add((double) 173);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.createComplex(687.951624, 0.0);
      complex3.INF.multiply(0.0);
      Complex complex4 = Complex.valueOf(687.951624);
      complex4.INF.divide(complex3);
      complex1.NaN.toString();
      complex2.ZERO.toString();
      Complex complex5 = complex1.reciprocal();
      complex2.NaN.nthRoot(968);
      Complex complex6 = complex5.ONE.cos();
      complex2.sin();
      complex2.INF.nthRoot(968);
      complex5.divide(complex1);
      Complex complex7 = Complex.NaN;
      object0.hashCode();
      complex4.abs();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex8.subtract(complex9);
      complex6.isInfinite();
      Complex complex10 = Complex.INF;
      complex7.asin();
      Complex complex11 = new Complex(687.951624, (-1610.489987042));
      complex4.pow(complex11);
      complex9.multiply(342.788409091);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex((-1108.82741745));
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 9.956860681280245E-10);
      complex0.nthRoot(524);
      Complex complex3 = complex1.sqrt1z();
      complex0.getField();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.exp();
      complex4.nthRoot(829);
      Complex complex6 = complex5.createComplex(0.9999999999999897, 160.426144844);
      Complex complex7 = Complex.valueOf(25.559851113650964);
      Complex complex8 = complex0.pow(complex7);
      Complex complex9 = complex7.tanh();
      complex9.tan();
      complex3.sinh();
      Complex complex10 = complex8.subtract(complex7);
      Complex complex11 = Complex.NaN;
      complex11.hashCode();
      complex3.abs();
      Complex complex12 = complex6.subtract(complex4);
      complex4.isInfinite();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.asin();
      complex14.pow(complex10);
      complex12.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.ONE.getField();
      complex1.INF.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.sinh();
      complex3.NaN.divide(Double.NaN);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.sqrt();
      complex3.ONE.cos();
      complex0.ZERO.sinh();
      Complex complex6 = Complex.I;
      complex6.hashCode();
      complex5.add(complex2);
      complex0.divide(4281.566988144828);
      complex5.getImaginary();
      complex2.multiply(953);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(25.559851113650964, 25.559851113650964);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.cosh();
      complex1.getReal();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex4.INF.asin();
      complex6.I.sqrt();
      complex1.equals(complex0);
      complex2.subtract(25.559851113650964);
      Complex complex7 = Complex.INF;
      complex3.getArgument();
      complex0.divide(483.04143193043);
      complex1.cos();
      Complex complex8 = complex5.cosh();
      complex8.ONE.negate();
      complex8.ONE.exp();
      Complex complex9 = complex5.sin();
      complex9.ZERO.abs();
      complex9.log();
      complex4.multiply(514);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.INF.readResolve();
      Complex complex4 = complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex4.I.getField();
      complex3.readResolve();
      complex0.readResolve();
      complex2.acos();
      complex1.getField();
      Complex complex5 = complex0.reciprocal();
      complex5.ONE.multiply(Double.POSITIVE_INFINITY);
      complex0.add(complex3);
      Complex complex6 = Complex.I;
      complex6.ONE.sqrt();
      Complex complex7 = complex3.sin();
      complex7.NaN.pow(complex1);
      complex7.createComplex((-205.79858315956), 0.0);
      complex2.multiply(complex1);
      complex7.divide(complex3);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(109.318706989);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = Complex.valueOf(1505.8782117);
      complex3.createComplex((-1836.0), 4290.2338);
      Complex complex6 = complex4.sinh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.multiply(1505.8782117);
      complex5.divide((-1836.0));
      Complex complex9 = Complex.ZERO;
      complex9.pow(complex3);
      complex1.multiply(complex6);
      complex0.isNaN();
      Complex.valueOf(1084.853105275549, 1387.92022054039);
      complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex1.I.abs();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.NaN.pow((-784.9269));
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf((-784.9269), 0.0);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.I.reciprocal();
      complex8.ZERO.pow((-365.5));
      Complex complex9 = complex2.reciprocal();
      complex9.INF.cosh();
      Complex complex10 = complex1.exp();
      complex7.getReal();
      complex6.readResolve();
      Complex complex11 = complex4.negate();
      complex11.NaN.createComplex(Double.POSITIVE_INFINITY, (-1836.0));
      complex3.sinh();
      complex0.multiply(1084.853105275549);
      complex1.divide((-784.9269));
      complex10.pow(complex4);
      complex10.multiply(complex2);
      complex9.divide(complex1);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.INF.readResolve();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      Complex complex4 = (Complex)complex0.readResolve();
      complex2.acos();
      complex1.getField();
      complex0.reciprocal();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.INF.cosh();
      complex6.ONE.sqrt();
      Complex complex7 = complex3.sin();
      complex7.NaN.pow(complex1);
      Complex complex8 = complex7.createComplex((-205.79858315956), 0.0);
      complex2.multiply(complex1);
      complex1.isNaN();
      Complex.valueOf(1807.269233839, Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.multiply(complex8);
      complex9.I.pow(complex7);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = new Complex((-7.188526769607005E-8));
      complex1.abs();
      complex0.readResolve();
      Complex complex2 = complex0.atan();
      complex1.atan();
      Complex complex3 = complex2.createComplex(0.0, (-20.0));
      complex3.multiply((-7.188526769607005E-8));
      Complex complex4 = Complex.I;
      complex1.divide(complex4);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex1.I.abs();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.NaN.pow((-784.9269));
      Complex complex5 = complex0.atan();
      Complex.valueOf((-784.9269), 0.0);
      Complex complex6 = complex0.subtract(0.5180262327194214);
      Complex complex7 = complex5.conjugate();
      complex3.getField();
      Complex complex8 = complex2.sqrt();
      complex8.nthRoot(173);
      Complex complex9 = Complex.valueOf(Double.NaN, 0.5180262327194214);
      complex9.ONE.createComplex(877.231424, 145.3497972);
      complex0.tanh();
      complex8.toString();
      Complex complex10 = complex6.divide(complex7);
      complex4.atan();
      complex0.isNaN();
      complex8.subtract((-1626.6));
      complex10.multiply(7.389056205749512);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.createComplex((-8.335545536862392E-8), (-8.335545536862392E-8));
      complex2.isNaN();
      Complex complex3 = complex2.ZERO.exp();
      complex2.ZERO.hashCode();
      complex2.INF.getField();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = new Complex(1.0002468196250736);
      Complex complex7 = complex6.pow((-8.335545536862392E-8));
      Complex complex8 = new Complex((-8.335545536862392E-8), 1.0002468196250736);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex2.exp();
      complex9.getReal();
      complex7.readResolve();
      complex0.negate();
      complex11.createComplex(1.0002468196250736, (-1836.0));
      complex5.sinh();
      complex10.multiply(1.0002468196250736);
      Complex complex12 = complex4.divide((-8.33143230731525E-8));
      try { 
        complex12.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      complex1.getReal();
      Complex complex3 = complex0.sinh();
      complex0.negate();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.I;
      complex6.equals(complex2);
      complex5.I.cosh();
      complex3.subtract(Double.NaN);
      complex0.tan();
      complex5.getArgument();
      complex6.divide(Double.NaN);
      complex5.cos();
      Complex complex7 = complex6.cosh();
      complex1.negate();
      complex4.exp();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-3.144331429489291E-10), (-3.144331429489291E-10));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.createComplex(1.2340981629677117E-4, 1.2340981629677117E-4);
      complex2.isNaN();
      Complex complex3 = Complex.valueOf(1.2340981629677117E-4, (-3434.1258567756));
      Complex complex4 = complex3.exp();
      complex0.hashCode();
      complex1.getField();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.subtract((-3434.1258567756));
      Complex complex7 = complex2.conjugate();
      complex6.getField();
      Complex complex8 = complex7.sqrt();
      complex8.nthRoot(173);
      Complex complex9 = Complex.valueOf((double) 173, 2.4504875209567056);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.tanh();
      complex9.toString();
      complex3.divide(complex6);
      complex2.atan();
      complex4.isNaN();
      complex11.subtract((-3434.1258567756));
      Complex complex12 = complex7.multiply((-1.0188117475357564E-260));
      complex12.NaN.subtract((-399.0));
      Complex complex13 = Complex.I;
      complex13.sqrt();
      complex1.abs();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.multiply(complex0);
      complex0.abs();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.pow(1.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = new Complex((-784.9269));
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex2.pow((-1187.267688237828));
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex6.exp();
      complex0.getReal();
      complex6.readResolve();
      Complex complex11 = complex7.negate();
      complex11.createComplex((-784.9269), 0.0);
      Complex complex12 = new Complex((-1836.0));
      complex12.sinh();
      complex12.multiply((-20.0));
      complex1.divide((-1187.267688237828));
      complex9.pow(complex4);
      complex8.multiply(complex10);
      Complex complex13 = new Complex((-1187.267688237828));
      complex13.isNaN();
      Complex.valueOf(1404.9417092, (-1187.267688237828));
      complex13.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(896.4977702842);
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tan();
      complex2.multiply(complex0);
      complex0.sin();
      Complex.valueOf(1.0562105178833008);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(896.4977702842, (-649.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.tanh();
      complex2.NaN.add(1710.63939063);
      complex1.INF.abs();
      complex1.add((-649.0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(896.4977702842);
      Complex complex1 = complex0.negate();
      complex1.asin();
      Complex complex2 = complex1.tanh();
      complex2.log();
      Complex complex3 = Complex.valueOf((-1444.8772));
      complex3.subtract(complex0);
      complex2.isNaN();
      Complex complex4 = new Complex((-1.8743503835906292));
      complex4.getReal();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.toString();
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf(0.0, Double.NaN);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.reciprocal();
      complex3.pow(Double.NaN);
      Complex complex6 = complex1.reciprocal();
      complex1.cosh();
      Complex complex7 = complex6.exp();
      complex6.getReal();
      complex5.readResolve();
      Complex complex8 = complex7.negate();
      complex4.createComplex((-365.5), (-1836.0));
      complex8.sinh();
      Complex complex9 = new Complex((-365.5), 0.36838833043119945);
      complex9.multiply(20.0);
      complex0.divide(1292.040403);
      Complex complex10 = complex9.pow(complex1);
      complex2.multiply(complex3);
      complex1.isNaN();
      Complex.valueOf((-583.508474), 481.01725947311655);
      complex10.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.I.toString();
      complex0.readResolve();
      Complex complex2 = complex1.NaN.multiply((-2042.13));
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.exp();
      complex4.multiply(complex1);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex0.NaN.sqrt();
      Complex complex7 = complex4.NaN.conjugate();
      complex4.I.createComplex((-2042.13), (-2042.13));
      complex6.ZERO.subtract(complex5);
      complex0.toString();
      Complex complex8 = complex0.pow(20.0);
      complex8.getField();
      complex1.getField();
      complex1.getReal();
      complex6.atan();
      complex3.divide(complex6);
      complex1.cosh();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(871.0, (-1.0));
      Complex complex1 = complex0.INF.multiply((-1.0));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex1.pow(complex3);
      complex5.ONE.pow(complex2);
      complex3.isInfinite();
      complex2.abs();
      complex4.createComplex(4259.1507513, (-2294.092932));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1047.0431944), (-1047.0431944));
      Complex complex1 = complex0.ONE.divide((-1047.0431944));
      Complex complex2 = complex1.I.multiply((-1047.0431944));
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex2.I.reciprocal();
      Complex complex4 = complex0.ONE.multiply(7);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.INF.cosh();
      complex8.I.readResolve();
      Complex complex9 = complex4.NaN.sinh();
      Complex complex10 = complex8.INF.exp();
      complex10.INF.nthRoot(7);
      complex4.asin();
      Complex complex11 = complex7.divide(0.0);
      Complex complex12 = complex5.multiply(7);
      Complex complex13 = Complex.valueOf((-1047.0431944));
      Complex complex14 = complex13.INF.sinh();
      complex14.I.sinh();
      complex14.ZERO.asin();
      complex11.I.getField();
      complex11.add(complex13);
      Complex complex15 = complex11.ONE.createComplex((-1047.0431944), 3716.88311);
      complex12.subtract(complex5);
      complex11.nthRoot(7);
      complex3.isInfinite();
      Complex complex16 = complex4.ONE.exp();
      complex16.cosh();
      complex0.exp();
      complex9.multiply((double) 7);
      complex11.abs();
      complex6.sqrt1z();
      complex15.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.INF.acos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      complex2.ZERO.getArgument();
      Complex complex4 = complex0.createComplex(7.586808748646825E-281, 7.586808748646825E-281);
      Complex complex5 = complex0.exp();
      complex4.NaN.add(complex3);
      Complex complex6 = Complex.valueOf(0.0);
      complex4.ONE.add(complex6);
      complex1.tanh();
      complex6.ONE.atan();
      Complex complex7 = complex5.ZERO.sin();
      complex7.I.add((-2197.209077523));
      Complex complex8 = complex4.negate();
      Complex.valueOf(0.0, (-2197.209077523));
      complex8.ZERO.multiply(complex3);
      complex8.getField();
      Complex complex9 = complex8.createComplex(7.586808748646825E-281, 0.0);
      complex0.getArgument();
      complex2.getField();
      Complex.valueOf((-139.745774273164), 0.0);
      Complex complex10 = complex3.sin();
      complex10.exp();
      complex9.getImaginary();
      complex3.acos();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.exp();
      Complex.valueOf(1244.039067926288, 1244.039067926288);
      Complex complex3 = Complex.valueOf(6.591143677421159E-251);
      Complex complex4 = complex0.ZERO.subtract(0.40220457315444946);
      Complex complex5 = complex4.INF.tan();
      complex5.ZERO.cosh();
      Complex complex6 = complex1.I.cosh();
      complex3.ONE.divide(complex0);
      Complex complex7 = complex3.negate();
      complex7.INF.multiply(complex4);
      Complex complex8 = complex6.ZERO.sin();
      complex8.INF.subtract(1244.039067926288);
      complex1.sin();
      complex3.nthRoot(1814);
      complex2.getImaginary();
      complex4.readResolve();
      Complex complex9 = complex6.tan();
      complex3.multiply(0.0);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.INF.readResolve();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex0.readResolve();
      complex2.acos();
      complex1.getField();
      complex0.reciprocal();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.INF.cosh();
      complex5.ONE.sqrt();
      Complex complex6 = complex3.sin();
      complex6.NaN.pow(complex1);
      complex6.createComplex((-205.79858315956), 0.0);
      complex2.multiply(complex1);
      complex6.divide(complex3);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-3.144331429489291E-10), (-3.144331429489291E-10));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.cosh();
      complex1.getReal();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex4.INF.asin();
      complex6.I.sqrt();
      complex1.equals(complex0);
      complex2.subtract((-3.144331429489291E-10));
      complex0.tan();
      complex3.getArgument();
      complex0.divide(483.04143193043);
      complex1.cos();
      Complex complex7 = complex5.cosh();
      complex7.ONE.negate();
      complex7.ONE.exp();
      Complex complex8 = complex5.sin();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-7.40238661307607E-8));
      Complex complex2 = complex0.subtract(47.11523735758);
      complex2.ONE.abs();
      Complex complex3 = complex2.NaN.subtract(complex0);
      complex3.INF.hashCode();
      Complex complex4 = Complex.valueOf((-1884.660191794462));
      Complex complex5 = complex4.NaN.pow((-1197.99944488244));
      complex1.readResolve();
      Complex complex6 = complex4.tan();
      complex6.multiply(474);
      complex1.divide(complex4);
      complex1.cosh();
      complex4.getImaginary();
      complex1.hashCode();
      complex5.equals(complex6);
      complex6.isInfinite();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(535.6291931041516, 535.6291931041516);
      Complex complex1 = Complex.INF;
      complex0.NaN.multiply(complex1);
      complex0.isInfinite();
      complex0.INF.acos();
      complex0.NaN.divide(2.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.divide(0.0);
      complex3.NaN.getField();
      complex3.asin();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3968.152);
      Complex complex1 = Complex.valueOf(0.0, (-923.65116916415));
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex.valueOf(3.0, 0.0);
      complex2.INF.add(complex1);
      complex2.ONE.atan();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.I.exp();
      complex4.I.log();
      complex0.getField();
      Complex complex5 = complex0.subtract(3968.152);
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex5.ONE.multiply((-20.0));
      Complex complex8 = complex3.negate();
      complex6.ONE.sqrt();
      complex8.I.readResolve();
      Complex complex9 = complex8.multiply(complex7);
      Complex complex10 = Complex.valueOf(0.0);
      complex8.equals(complex1);
      complex4.INF.log();
      complex9.cosh();
      Complex complex11 = complex6.divide((-20.0));
      complex11.nthRoot(564);
      Complex.valueOf(0.0);
      complex10.pow(0.0);
      complex4.atan();
      complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(896.4977702842, (-649.0));
      Complex complex1 = complex0.sinh();
      complex1.add((-649.0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.5144298076629639, 1.5144298076629639);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.multiply(366);
      complex0.equals(complex1);
      Complex complex5 = complex1.divide(complex0);
      complex0.getField();
      complex0.hashCode();
      Complex complex6 = complex5.atan();
      complex6.ONE.add(complex4);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex6.ZERO.cosh();
      complex9.NaN.divide(complex0);
      complex5.NaN.cosh();
      Complex complex10 = complex6.acos();
      complex10.abs();
      complex7.asin();
      Complex complex11 = complex6.atan();
      complex1.atan();
      complex8.log();
      complex2.readResolve();
      complex4.readResolve();
      complex11.isInfinite();
      complex6.subtract(1590.4);
      complex0.nthRoot(366);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.abs();
      complex0.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.createComplex(687.951624, 0.0);
      complex3.INF.multiply(0.0);
      Complex complex4 = complex1.ONE.divide(complex2);
      complex4.INF.divide(complex3);
      complex1.NaN.toString();
      complex2.ZERO.toString();
      Complex complex5 = complex1.reciprocal();
      complex2.NaN.nthRoot(968);
      complex5.ONE.cos();
      complex2.sin();
      complex2.INF.nthRoot(968);
      complex5.divide(complex1);
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex1.subtract(687.951624);
      complex2.conjugate();
      complex0.atan();
      complex6.toString();
      complex7.divide(complex0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      complex1.NaN.multiply(755);
      complex0.isInfinite();
      Complex complex2 = Complex.valueOf(0.0, 0.1384023129940033);
      complex2.ONE.subtract((-1514.3385));
      complex0.hashCode();
      Complex complex3 = Complex.valueOf((double) 755);
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = Complex.valueOf(0.0, (double) 755);
      complex6.isNaN();
      complex6.isInfinite();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.I.tan();
      complex9.INF.nthRoot(755);
      complex7.reciprocal();
      complex2.sinh();
      complex3.readResolve();
      complex4.toString();
      complex0.add((-1243.7742694664));
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.NaN.add(1060.5);
      complex3.I.readResolve();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.reciprocal();
      complex6.ONE.cos();
      complex7.NaN.subtract(1706.2373);
      complex7.pow((-994.8347769));
      complex6.getImaginary();
      complex0.I.getField();
      complex8.atan();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex6.INF.multiply(1447);
      complex10.I.getArgument();
      Complex complex11 = complex2.add(complex8);
      Complex complex12 = complex0.divide(complex6);
      complex11.ONE.getArgument();
      complex0.I.hashCode();
      complex12.I.sinh();
      complex11.conjugate();
      Complex complex13 = complex5.add(complex9);
      complex13.INF.sin();
      Complex complex14 = complex8.exp();
      complex14.I.conjugate();
      complex5.reciprocal();
      complex1.toString();
      complex9.subtract(complex2);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(3.557678449715009E128);
      complex0.ONE.atan();
      Complex complex2 = complex0.reciprocal();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1955.222504));
      complex0.sqrt();
      complex0.getReal();
      Complex complex1 = complex0.tan();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(74.4772360519828);
      Complex complex1 = complex0.ONE.divide(74.4772360519828);
      complex0.getReal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ZERO.sqrt();
      complex3.NaN.multiply(17);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.ZERO.subtract(complex1);
      Complex complex6 = complex2.ONE.subtract(complex0);
      Complex complex7 = complex2.I.sqrt();
      Complex complex8 = complex7.INF.sqrt();
      Complex complex9 = complex8.NaN.sqrt1z();
      complex6.NaN.sqrt();
      complex8.NaN.sinh();
      complex2.I.abs();
      complex0.multiply(complex1);
      complex6.subtract(1.0);
      complex6.createComplex(74.4772360519828, 1415.4805896);
      complex7.subtract(0.0);
      Complex complex10 = complex5.exp();
      complex10.abs();
      complex9.multiply(17);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex5.ONE.sqrt();
      complex5.I.tan();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex2.ZERO.subtract((-2588.01986884555));
      complex8.INF.toString();
      Complex complex9 = complex7.pow(Double.POSITIVE_INFINITY);
      complex7.sqrt();
      complex7.getField();
      complex3.negate();
      complex9.getArgument();
      complex6.createComplex(0.0, 2203.034);
      complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.tan();
      complex2.add((-1751.8378));
      Complex complex3 = complex0.NaN.createComplex((-825.410091932289), (-825.410091932289));
      Complex complex4 = complex3.add(complex0);
      complex4.INF.hashCode();
      Complex complex5 = complex1.I.subtract(20.0);
      complex5.I.atan();
      complex0.NaN.subtract(complex5);
      complex0.getField();
      complex1.I.abs();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex1.negate();
      complex1.multiply(20.0);
      Complex.valueOf(1.0, (-135.0));
      Complex complex8 = new Complex(1.7346076965332031);
      complex8.ONE.sinh();
      Complex complex9 = complex0.multiply(complex8);
      complex9.tan();
      complex7.toString();
      complex2.acos();
      complex0.multiply(0);
      complex7.conjugate();
      complex9.hashCode();
      Complex complex10 = complex6.tan();
      complex10.tan();
      complex8.add((-135.0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.add(1879.461);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.ZERO.divide(1879.461);
      complex5.I.hashCode();
      complex1.ZERO.conjugate();
      Complex complex6 = Complex.valueOf(1879.461, (-30.057944));
      Complex complex7 = complex6.NaN.cos();
      complex6.ZERO.multiply(280);
      complex7.ZERO.pow((-30.057944));
      complex6.NaN.conjugate();
      complex1.asin();
      Complex complex8 = complex3.acos();
      complex0.nthRoot(110);
      complex0.getImaginary();
      Complex complex9 = complex2.cos();
      complex1.asin();
      Complex complex10 = complex1.subtract(695.1879661917194);
      complex10.divide(0.0);
      complex8.add(6.283185307179586);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.createComplex((-8.335545536862392E-8), (-8.335545536862392E-8));
      complex2.isNaN();
      complex2.ZERO.exp();
      complex2.ZERO.hashCode();
      complex2.INF.getField();
      Complex complex3 = complex2.ZERO.subtract((-8.335545536862392E-8));
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.getField();
      Complex complex5 = complex2.sqrt();
      complex5.nthRoot(173);
      Complex complex6 = Complex.valueOf((-8.335545536862392E-8), (double) 173);
      complex6.ZERO.tanh();
      complex5.toString();
      complex1.divide(complex5);
      Complex complex7 = complex0.atan();
      complex1.isNaN();
      complex7.subtract(1340.619468);
      complex0.multiply(1012.6629);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1949.93), (-4980.1728642));
      complex0.I.multiply((-4980.1728642));
      complex0.ONE.getArgument();
      complex0.getArgument();
      complex0.ONE.getArgument();
      complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.I.sinh();
      Complex complex4 = complex1.createComplex((-1949.93), 0.0);
      Complex complex5 = complex4.NaN.add(0.0);
      complex5.NaN.divide((-1.9439871944964622));
      Complex complex6 = Complex.valueOf((-1949.93), 0.0);
      Complex complex7 = complex6.sqrt();
      complex7.NaN.conjugate();
      int int0 = 0;
      try { 
        complex5.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(129.597363, 129.597363);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.acos();
      complex1.INF.readResolve();
      Complex complex3 = complex0.sin();
      complex3.I.acos();
      complex0.hashCode();
      complex3.divide(complex2);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1172.29937));
      complex0.ONE.getField();
      complex0.ZERO.tan();
      complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-442.8313109897274));
      Complex complex3 = complex2.cosh();
      complex3.multiply(1904);
      try { 
        complex1.nthRoot((-2012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,012
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex1.I.abs();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.NaN.pow((-784.9269));
      complex0.atan();
      Complex complex5 = Complex.valueOf((-784.9269), 0.0);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.I.reciprocal();
      complex7.ZERO.pow((-365.5));
      Complex complex8 = complex2.reciprocal();
      complex8.INF.cosh();
      Complex complex9 = complex1.exp();
      complex6.getReal();
      complex5.readResolve();
      Complex complex10 = complex4.negate();
      complex10.NaN.createComplex(Double.POSITIVE_INFINITY, (-1836.0));
      complex3.sinh();
      complex0.multiply(1084.853105275549);
      Complex complex11 = complex1.divide((-784.9269));
      complex9.pow(complex4);
      complex9.multiply(complex2);
      complex10.isNaN();
      Complex complex12 = Complex.valueOf((-365.5), 1.0);
      complex11.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex0.pow(complex1);
      Complex complex2 = complex0.I.multiply((-1590));
      Complex complex3 = complex0.add(0.5860490798950195);
      Complex complex4 = complex0.NaN.multiply(complex2);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex0.divide((double) (-1590));
      Complex complex7 = complex6.NaN.sin();
      complex7.ONE.add(complex1);
      complex5.exp();
      complex5.pow((double) (-1590));
      complex6.INF.hashCode();
      Complex complex8 = complex2.subtract(0.5860490798950195);
      complex3.ONE.pow(complex6);
      Complex.valueOf(0.5860490798950195);
      complex5.divide(complex8);
      complex0.createComplex((-1590), 707.0);
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      complex2.subtract(complex1);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.I.readResolve();
      Complex complex2 = complex0.ONE.asin();
      complex2.readResolve();
      complex1.ZERO.readResolve();
      Complex complex3 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.asin();
      complex4.NaN.subtract(complex2);
      complex1.ONE.readResolve();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = Complex.valueOf(0.5990082025527954);
      complex1.multiply(complex5);
      complex6.I.exp();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.cosh();
      try { 
        complex0.ONE.nthRoot((-1360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,360
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3257.147, (-104.0671898503581));
      Complex complex1 = complex0.INF.add(3257.147);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.subtract(705.0381208362527);
      complex4.createComplex((-104.0671898503581), 0.0);
      Complex complex5 = complex0.NaN.negate();
      complex0.pow(1181.25275);
      complex2.ONE.getArgument();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = complex7.ONE.exp();
      complex2.ONE.asin();
      complex6.getField();
      complex6.getImaginary();
      complex1.acos();
      Complex.valueOf(0.0, 1181.25275);
      complex2.cos();
      complex8.hashCode();
      complex8.atan();
      complex6.conjugate();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.ONE.getField();
      complex1.INF.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.NaN.divide(Double.NaN);
      Complex complex5 = complex2.atan();
      complex5.sqrt();
      Complex complex6 = complex3.ONE.cos();
      complex0.ZERO.sinh();
      Complex complex7 = complex2.createComplex((-20.0), (-20.0));
      complex7.INF.nthRoot(524);
      Complex complex8 = complex0.sqrt1z();
      complex8.NaN.getField();
      Complex complex9 = complex2.reciprocal();
      complex9.exp();
      complex6.nthRoot(829);
      Complex complex10 = complex6.createComplex(0.0, 0.0);
      Complex complex11 = complex10.pow(complex4);
      complex11.ONE.sin();
      Complex complex12 = complex3.ZERO.tanh();
      Complex complex13 = complex10.tan();
      complex10.sinh();
      Complex complex14 = complex9.subtract(complex10);
      complex5.hashCode();
      complex12.abs();
      complex14.subtract(complex13);
      complex9.isInfinite();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex0.asin();
      complex4.I.sin();
      Complex complex5 = complex4.log();
      complex5.I.conjugate();
      complex5.NaN.subtract((-1275.85916));
      Complex complex6 = complex5.NaN.log();
      complex0.ONE.asin();
      complex4.multiply(134.98492215);
      Complex complex7 = complex3.sin();
      complex7.pow(complex6);
      complex6.subtract(134.98492215);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      complex0.log();
      complex0.multiply(1088.5274782249553);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1265.79, 0.0);
      complex0.ONE.abs();
      Complex complex1 = complex0.divide(1265.79);
      Complex complex2 = Complex.valueOf(1.0);
      complex2.pow(1.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex1.multiply(complex0);
      complex1.isInfinite();
      complex3.pow(complex2);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex((-1108.82741745));
      Complex complex2 = complex1.ONE.pow((-1108.82741745));
      complex2.ONE.hashCode();
      complex0.add(complex1);
      Complex complex3 = complex1.divide(4281.566988144828);
      complex3.getImaginary();
      complex3.multiply((-768));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(109.318706989);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = Complex.valueOf(1505.8782117);
      complex4.subtract(complex5);
      complex0.isNaN();
      complex0.getReal();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.acos();
      complex2.I.subtract((-2.5113270522478854E-277));
      Complex complex3 = complex0.add(0.0);
      complex3.NaN.sin();
      complex3.hashCode();
      int int0 = 0;
      complex0.I.reciprocal();
      complex3.ZERO.add((-1533.389317));
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.5410289764404297, 2.5854805721793077E-8);
      Complex complex1 = complex0.sin();
      complex1.ONE.getField();
      Complex complex2 = complex0.add(0.5800528526306152);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.I.sqrt1z();
      complex4.ZERO.sqrt1z();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.NaN.divide(complex6);
      Complex complex8 = complex4.NaN.add(0.0);
      Complex complex9 = complex5.multiply(1281.881374576);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex0.exp();
      complex2.NaN.toString();
      Complex complex11 = Complex.valueOf(0.0);
      double double0 = complex10.getArgument();
      assertEquals(2.585480572179308E-8, double0, 0.01);
      
      Complex complex12 = complex3.divide(2845.6970758615707);
      assertEquals(3.1345414631182313E-4, complex12.getReal(), 0.01);
      assertEquals((-7.228995997819447E-12), complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex2.log();
      Complex complex14 = complex13.ONE.subtract(0.0);
      assertEquals(1.0, complex14.getReal(), 0.01);
      
      complex7.getArgument();
      assertSame(complex7, complex8);
      
      complex1.hashCode();
      Complex complex15 = complex3.reciprocal();
      Complex complex16 = complex15.sinh();
      assertEquals(4.387688062812147E-8, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex5.cos();
      double double1 = complex17.getArgument();
      assertEquals(-0.0, double1, 0.01);
      
      Complex complex18 = complex1.negate();
      assertEquals((-2.2162201518434597E-8), complex18.getImaginary(), 0.01);
      assertEquals((-0.5150182813416012), complex18.getReal(), 0.01);
      
      Complex complex19 = complex0.asin();
      Complex complex20 = complex19.atan();
      assertEquals(2.3170708592279337E-8, complex20.getImaginary(), 0.01);
      
      complex11.isInfinite();
      boolean boolean0 = complex17.isNaN();
      assertTrue(complex4.equals((Object)complex11));
      assertEquals(0.15594369476537437, complex17.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(boolean0);
  }
}
