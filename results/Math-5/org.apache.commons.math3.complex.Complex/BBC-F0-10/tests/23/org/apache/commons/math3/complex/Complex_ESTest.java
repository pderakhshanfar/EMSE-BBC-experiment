/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:16:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 3762.53709916);
      Complex complex1 = complex0.tanh();
      complex1.acos();
      complex1.add(1.6532396934775547E-16);
      Complex complex2 = Complex.I;
      complex1.subtract(complex2);
      complex1.divide((-811.0592169963958));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.readResolve();
      Complex complex1 = complex0.I.reciprocal();
      complex0.nthRoot(516);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-16.75), (-16.75));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex(Double.NaN);
      complex2.tanh();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-17.477234196333715), (-17.477234196333715));
      Complex complex1 = complex0.subtract((-17.477234196333715));
      complex1.abs();
      complex0.getField();
      Complex complex2 = Complex.valueOf(17.477234196333715, 34.96877856441412);
      complex2.subtract((-4314.0395432912));
      Complex complex3 = complex0.reciprocal();
      complex3.asin();
      complex1.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-16.753159132070305), (-16.753159132070305));
      complex0.subtract(Double.NaN);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.asin();
      complex1.multiply((-1.6745661720946737E-8));
      try { 
        complex2.nthRoot((-477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -477
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.9148113212778526), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.createComplex(20.0, 20.0);
      Complex complex4 = Complex.NaN;
      complex4.add(complex1);
      Complex complex5 = Complex.I;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.368893262241355E-7, 1.368893262241355E-7);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.368893262241355E-7);
      complex1.sqrt();
      Complex complex2 = Complex.ZERO;
      complex2.cos();
      complex2.toString();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ONE;
      complex4.log();
      complex4.multiply(0.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.valueOf((-20.0), 1012.8355300974019);
      Complex complex7 = Complex.valueOf((-1771.8130488873473), (-1621.484272));
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex4.tanh();
      complex2.pow((-1771.8130488873473));
      Complex complex10 = complex7.subtract(complex9);
      complex10.tan();
      Complex complex11 = complex6.negate();
      Complex complex12 = Complex.INF;
      complex11.tanh();
      Complex complex13 = Complex.NaN;
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1771.5651257197997), (-1771.5651257197997));
      complex0.ZERO.hashCode();
      complex0.equals((Object) null);
      Complex complex1 = new Complex((-1771.5651257197997));
      Complex complex2 = complex0.add((-4250.132340882105));
      complex0.cos();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.sinh();
      complex4.ZERO.createComplex(971.97683127986, (-1771.5651257197997));
      Complex complex5 = Complex.NaN;
      complex3.ZERO.divide(complex4);
      Complex complex6 = complex2.ZERO.createComplex(0.0, 1.368893262241355E-7);
      complex1.add(complex4);
      complex6.log();
      Complex.valueOf(0.0, 1.368893262241355E-7);
      Complex complex7 = new Complex(20.0, (-4250.132340882105));
      Complex complex8 = Complex.INF;
      complex6.abs();
      complex8.subtract(Double.POSITIVE_INFINITY);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-595.04956073679));
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      complex2.NaN.divide(complex1);
      complex2.INF.getField();
      complex2.ONE.tan();
      Complex complex3 = complex2.add((-234.02551));
      Complex complex4 = complex3.INF.pow(Double.NaN);
      Complex complex5 = complex2.NaN.tanh();
      complex2.getField();
      complex3.createComplex(Double.NaN, (-635.0227015523));
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex5.multiply(complex6);
      Complex complex9 = complex7.NaN.exp();
      complex9.INF.getField();
      Complex complex10 = complex8.pow(complex5);
      complex6.I.pow(complex2);
      complex5.cos();
      Complex complex11 = complex7.createComplex(2.9731739067444943E32, (-141.698866036862));
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex11.ONE.pow(complex12);
      complex7.divide(Double.NaN);
      complex1.subtract(complex0);
      complex10.subtract(complex7);
      complex2.pow((-595.04956073679));
      complex4.cos();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-651.029604), (-651.029604));
      Complex complex1 = new Complex((-651.029604));
      complex0.pow(complex1);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1771.6), Double.POSITIVE_INFINITY);
      complex0.equals(complex0);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add((-1771.6));
      Complex complex3 = complex2.sinh();
      complex3.ONE.reciprocal();
      complex1.exp();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      complex4.INF.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1787.6984), Double.POSITIVE_INFINITY);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf(2135.0562616641287, 2135.0562616641287);
      complex2.readResolve();
      Complex complex3 = complex2.sqrt();
      complex3.nthRoot(519);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1771.5651257197997), Double.POSITIVE_INFINITY);
      complex0.equals((Object) null);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add((-1771.5651257197997));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex2.ZERO.divide(complex3);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.tan();
      complex2.equals(complex6);
      complex7.multiply(complex5);
      complex8.getArgument();
      complex4.divide((-8502.8691752654));
      Complex complex9 = complex0.exp();
      complex5.acos();
      Complex complex10 = Complex.valueOf((-1771.5651257197997));
      complex9.tan();
      complex10.add(complex4);
      Complex complex11 = Complex.NaN;
      complex7.conjugate();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1771.5651257197997), Double.POSITIVE_INFINITY);
      complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      complex0.ZERO.hashCode();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-717.8546));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1771.5651257197997), Double.POSITIVE_INFINITY);
      complex0.ZERO.hashCode();
      complex0.equals((Object) null);
      Complex complex1 = complex0.multiply(4014);
      complex1.abs();
      Complex complex2 = complex0.add(complex1);
      complex2.multiply((-710));
      complex1.equals("fT(fY`1xwo?");
      Complex complex3 = Complex.valueOf((double) 4014, 11.61598703288748);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex1.I.sinh();
      complex1.NaN.getField();
      complex0.toString();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.cosh();
      complex3.isInfinite();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.I.atan();
      complex2.ONE.subtract(complex0);
      complex7.ZERO.add(complex6);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.ZERO.multiply(complex5);
      complex8.ONE.subtract(0.0);
      complex0.createComplex(0.0, 0.0);
      Complex complex9 = complex0.sqrt();
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.abs();
      Complex complex1 = complex0.NaN.add(complex0);
      complex1.ZERO.multiply(1);
      complex0.equals(complex0);
      Complex complex2 = Complex.valueOf((double) 1, (double) 1);
      complex2.ZERO.exp();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1771.5651257197997), Double.POSITIVE_INFINITY);
      complex0.ZERO.hashCode();
      complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ZERO;
      complex1.cosh();
      complex2.isInfinite();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.subtract(complex3);
      complex4.add(complex1);
      Complex complex5 = Complex.valueOf(2.6676722922838097E190, Double.POSITIVE_INFINITY);
      complex3.multiply(complex5);
      Complex.valueOf(2.6676722922838097E190);
      complex0.tanh();
      complex1.cosh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.multiply((-139.530418957));
      Complex.valueOf(3.81486251792049, 3.81486251792049);
      complex4.getArgument();
      Complex complex8 = Complex.I;
      complex7.tan();
      Complex complex9 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(3.81486251792049, Double.POSITIVE_INFINITY);
      complex0.INF.getArgument();
      Complex complex1 = complex0.add(3.81486251792049);
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.multiply((-514.13357594035));
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.NaN.divide(0.0);
      complex3.ZERO.hashCode();
      complex0.multiply(complex2);
      complex5.I.acos();
      Complex complex6 = complex5.INF.subtract(4782.0);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex5.sqrt();
      complex8.NaN.divide(complex3);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.add(complex9);
      complex10.I.add(complex6);
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex11.multiply(complex3);
      complex11.atan();
      complex7.multiply(4782.0);
      complex4.conjugate();
      complex12.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1627.66957147066, Double.NaN);
      Complex complex1 = complex0.I.divide(Double.NaN);
      complex0.subtract(complex1);
      Complex complex2 = complex0.I.divide(Double.NaN);
      Complex complex3 = complex2.I.negate();
      complex2.hashCode();
      complex2.NaN.multiply(complex3);
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = Complex.valueOf(1627.66957147066, Double.NaN);
      complex0.INF.cos();
      complex5.INF.hashCode();
      complex6.INF.divide(complex2);
      complex4.ONE.negate();
      Complex complex7 = complex5.asin();
      complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1787.6984), Double.POSITIVE_INFINITY);
      complex0.ZERO.hashCode();
      complex0.equals((Object) null);
      Complex complex1 = Complex.valueOf((-4251.4345876327));
      Complex complex2 = complex0.add((-4251.4345876327));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.sinh();
      complex4.ONE.reciprocal();
      complex3.ZERO.divide(complex4);
      Complex complex5 = complex2.ZERO.createComplex(0.0, 1.368893262241355E-7);
      complex3.I.sqrt();
      complex1.add(complex4);
      complex5.log();
      complex0.multiply((-4251.4345876327));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf((-4251.4345876327), 3361.7153202695936);
      Complex complex8 = complex7.conjugate();
      complex8.conjugate();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1275.9379524), 1.5367645598839362E247);
      complex0.hashCode();
      complex1.equals(complex0);
      Complex complex2 = Complex.valueOf(583.0);
      Complex complex3 = complex1.add(1.5367645598839362E247);
      complex1.reciprocal();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.createComplex(1.5367645598839362E247, 1.5367645598839362E247);
      Complex complex9 = complex8.sqrt();
      complex7.add(complex1);
      Complex complex10 = complex9.log();
      complex0.readResolve();
      complex8.reciprocal();
      Complex complex11 = Complex.I;
      complex6.sqrt1z();
      Complex.valueOf(1.5367645598839362E247);
      complex5.log();
      Complex complex12 = complex10.sqrt();
      complex12.ZERO.sqrt();
      complex3.subtract((-1275.9379524));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.subtract(complex4);
      complex0.getField();
      complex5.conjugate();
      complex0.getArgument();
      complex0.cosh();
      complex0.nthRoot(1075);
      complex3.toString();
      complex5.toString();
      Complex complex6 = Complex.NaN;
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex(1298.0, 2632.633);
      complex0.atan();
      Complex complex1 = Complex.valueOf(2632.633, 0.37102460861206055);
      Complex complex2 = Complex.valueOf(2186.46712);
      complex2.getArgument();
      Complex complex3 = complex1.tan();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      complex2.getArgument();
      Complex complex3 = complex1.acos();
      double double0 = 820.0;
      Complex.valueOf(820.0, Double.NaN);
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.I;
      complex2.cosh();
      int int0 = (-2045192454);
      try { 
        complex4.nthRoot((-2045192454));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,192,454
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.valueOf(820.0, (-2839.1183));
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex4.subtract(820.0);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex5.pow(4.0610415723877345E106);
      Complex complex10 = complex5.divide(820.0);
      complex0.tan();
      complex9.equals(complex7);
      complex0.multiply(complex2);
      complex10.getArgument();
      complex8.divide(0.0);
      Complex complex11 = complex3.exp();
      complex6.acos();
      complex11.isNaN();
      complex5.add(complex2);
      Complex complex12 = Complex.NaN;
      complex12.conjugate();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(1);
      Complex complex1 = Complex.I;
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1787.6984), Double.POSITIVE_INFINITY);
      complex0.ZERO.hashCode();
      complex0.equals((Object) null);
      Complex complex1 = Complex.valueOf((-4251.4345876327));
      Complex complex2 = complex0.add((-4251.4345876327));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ONE.reciprocal();
      complex2.ZERO.divide(complex3);
      Complex complex5 = complex3.pow(Double.POSITIVE_INFINITY);
      complex2.divide((-0.9991484461866932));
      Complex complex6 = complex3.tan();
      complex1.equals(complex3);
      Complex complex7 = complex0.multiply(complex0);
      complex6.getArgument();
      complex5.divide(0.0);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.acos();
      Complex complex10 = Complex.valueOf(888.082);
      complex10.isNaN();
      complex5.tan();
      Complex complex11 = new Complex(20.0, (-1237.42768));
      complex11.add(complex4);
      Complex complex12 = Complex.NaN;
      complex9.conjugate();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2929.7015, 2929.7015);
      Complex complex1 = complex0.divide(266.8495183543);
      complex0.equals((Object) null);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.subtract(complex0);
      complex3.getField();
      Complex complex5 = complex0.conjugate();
      complex4.getArgument();
      Complex complex6 = complex3.reciprocal();
      complex0.cosh();
      Complex complex7 = complex5.log();
      complex2.readResolve();
      Complex complex8 = complex6.reciprocal();
      complex1.sqrt1z();
      Complex.valueOf(1166.0464173494);
      complex8.reciprocal();
      complex7.sqrt();
      complex1.multiply(266.8495183543);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.NaN.sinh();
      complex0.isInfinite();
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex2.add(complex0);
      complex7.ZERO.negate();
      Complex.valueOf(1243.561066808099, 2.6015626820520968E-9);
      complex2.multiply(complex1);
      complex6.subtract(1021.311924);
      complex3.tanh();
      Complex complex8 = complex6.cosh();
      complex4.multiply(0.0);
      Complex.valueOf(0.0);
      Complex complex9 = Complex.ZERO;
      complex2.pow(complex9);
      complex3.conjugate();
      Complex complex10 = complex6.conjugate();
      Complex.valueOf(0.0);
      complex4.tanh();
      complex10.subtract(complex8);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex1.I.sinh();
      complex1.NaN.getField();
      complex0.toString();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.cosh();
      complex3.isInfinite();
      complex4.asin();
      complex2.ONE.subtract(complex0);
      Complex complex5 = Complex.valueOf(3.0891604448087654E-25);
      complex5.getField();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.conjugate();
      complex2.getArgument();
      complex6.reciprocal();
      Complex complex8 = new Complex((-813.089417785), 3.0891604448087654E-25);
      complex8.cosh();
      complex4.log();
      complex2.readResolve();
      Complex complex9 = new Complex(0.0, 0.0);
      complex9.reciprocal();
      complex1.sqrt1z();
      Complex.valueOf(3.0891604448087654E-25);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(0.8414709848078965, (-4061.812792467875));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.cosh();
      complex5.isInfinite();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex5.subtract(complex4);
      complex4.add(complex6);
      Complex.valueOf(0.0, 0.0);
      complex4.multiply(complex5);
      complex3.subtract(0.0);
      Complex complex8 = Complex.NaN;
      complex8.tanh();
      complex1.cosh();
      complex0.multiply((-2362.514337612));
      Complex.valueOf((-1719.47));
      complex6.pow(complex3);
      complex8.conjugate();
      Complex complex9 = complex0.conjugate();
      Complex.valueOf(3.4691936127728695E-4);
      complex7.tanh();
      complex9.subtract(complex5);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = new Complex(Double.NaN);
      complex2.INF.conjugate();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex1.ONE.conjugate();
      Complex complex4 = complex1.pow(complex3);
      complex4.INF.exp();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(20.0, 820.0);
      complex3.atan();
      Complex complex4 = Complex.I;
      complex4.cosh();
      complex0.multiply((-639.240407));
      Complex complex5 = Complex.ZERO;
      complex2.conjugate();
      complex5.conjugate();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.divide(complex1);
      complex0.sinh();
      Complex complex3 = Complex.valueOf(0.0);
      complex2.getField();
      Complex complex4 = complex2.conjugate();
      complex4.I.getArgument();
      Complex complex5 = complex3.reciprocal();
      complex2.cosh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.multiply(0.5403023058681398);
      Complex complex9 = complex8.createComplex(0.5403023058681398, 2128.33932131);
      complex9.atan();
      Complex complex10 = new Complex((-686.055604345), 0.0);
      complex10.getArgument();
      complex10.negate();
      complex10.tan();
      complex3.divide((-1744.774309325586));
      complex5.acos();
      complex3.multiply((-1744.774309325586));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex1.I.sinh();
      complex1.NaN.getField();
      complex0.toString();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.sqrt1z();
      complex0.isNaN();
      Complex complex4 = Complex.valueOf((-2.5309995887229526E-146), (-2.5309995887229526E-146));
      Complex complex5 = complex0.createComplex(1.2085883617401123, (-1976.90607));
      Complex.valueOf((-1976.90607), (-1976.90607));
      complex4.sqrt1z();
      complex4.readResolve();
      complex1.sinh();
      complex5.tan();
      complex1.nthRoot(9);
      Complex complex6 = complex3.tan();
      complex2.getField();
      complex4.readResolve();
      complex6.nthRoot(716);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.subtract(complex0);
      complex2.getField();
      Complex complex5 = complex2.conjugate();
      complex5.I.getArgument();
      Complex complex6 = complex4.reciprocal();
      complex2.cosh();
      Complex complex7 = complex6.log();
      complex3.readResolve();
      Complex complex8 = complex7.reciprocal();
      complex8.ZERO.sqrt1z();
      Complex.valueOf(0.0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2205.21092772);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.I.createComplex(6.283185307179586, 2205.21092772);
      complex3.I.getArgument();
      complex0.NaN.sqrt1z();
      complex0.getField();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.readResolve();
      complex0.isInfinite();
      Complex complex7 = Complex.valueOf((-1.7037883786133543E7), 1.5707963267948966);
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex2.subtract(2205.21092772);
      Complex.valueOf(1.5707963267948966, 6.283185307179586);
      complex2.toString();
      complex5.toString();
      complex9.atan();
      complex0.nthRoot(2182);
      Complex.valueOf(39.97498435543818, 3247.907);
      Complex.valueOf((-994.8794382659231));
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1719.47));
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = complex1.reciprocal();
      complex0.acos();
      double double0 = 0.0;
      Complex complex3 = complex2.divide(1313.602965697346);
      complex1.subtract(complex1);
      complex3.hashCode();
      try { 
        complex3.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1719.47), (-1719.47));
      complex0.toString();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3321.141514313);
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = complex1.divide(complex0);
      complex1.createComplex(0.0, 20.0);
      Complex complex3 = complex0.asin();
      complex3.hashCode();
      complex3.getImaginary();
      Complex.valueOf((-2656.025871269894));
      Complex complex4 = new Complex(2.3296151161193848);
      complex4.readResolve();
      complex0.exp();
      complex0.divide(complex2);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.I.sinh();
      complex1.NaN.getField();
      complex0.toString();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.negate();
      complex4.isInfinite();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex3.ONE.subtract(complex0);
      complex7.ZERO.add(complex6);
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex9.ZERO.multiply(complex2);
      Complex complex11 = complex9.ONE.subtract(0.0);
      Complex complex12 = complex5.ZERO.tanh();
      Complex complex13 = complex0.exp();
      complex0.I.pow(0.0);
      complex13.INF.divide(0.0);
      complex10.I.tan();
      complex3.equals(complex1);
      complex0.multiply(complex4);
      complex3.getArgument();
      Complex complex14 = complex10.divide((-2557.1));
      complex14.exp();
      complex1.acos();
      complex12.isNaN();
      complex6.tan();
      complex2.add(complex0);
      complex11.hashCode();
      complex8.log();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1719.47));
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.subtract(complex1);
      complex2.subtract(complex0);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex1.conjugate();
      complex3.tan();
      complex5.readResolve();
      complex6.sqrt();
      complex5.toString();
      complex1.conjugate();
      complex4.add((-1.1255706987475148E-9));
      complex0.add(1719.47);
      Complex complex7 = complex5.atan();
      complex7.add(complex3);
      Complex.valueOf(2105.32);
      Complex complex8 = Complex.ONE;
      // Undeclared exception!
      complex8.nthRoot(2038023718);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex1.ZERO.multiply(569);
      Complex.valueOf(0.0, 0.0);
      complex1.NaN.getArgument();
      Complex complex4 = complex2.divide(complex1);
      complex4.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = complex3.asin();
      Complex complex6 = Complex.valueOf(1502.5203136, (double) 569);
      complex6.hashCode();
      complex1.I.subtract(complex0);
      Complex complex7 = Complex.ZERO;
      complex7.getImaginary();
      Complex.valueOf(1763.23273492);
      Complex complex8 = Complex.ZERO;
      complex2.sqrt();
      complex8.readResolve();
      complex3.exp();
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2929.7015, 2929.7015);
      Complex complex1 = complex0.divide(266.8495183543);
      complex0.equals((Object) null);
      Complex complex2 = complex0.subtract(complex1);
      complex1.isNaN();
      Complex complex3 = complex1.createComplex(466.04464, 2929.7015);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex2.createComplex(266.8495183543, 466.04464);
      complex5.NaN.cosh();
      Complex complex6 = complex5.multiply((-2640.943));
      complex5.nthRoot(522);
      complex6.sqrt1z();
      Complex complex7 = Complex.ONE;
      complex7.isInfinite();
      Complex complex8 = new Complex(0.0, 522);
      complex8.getField();
      Complex.valueOf((-1158.0));
      complex5.pow((-1522.7797858623999));
      complex7.abs();
      Complex complex9 = complex4.acos();
      complex2.conjugate();
      complex9.createComplex((-1522.7797858623999), 20.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2929.7015, 2929.7015);
      Complex complex1 = complex0.divide(266.8495183543);
      complex0.equals((Object) null);
      Complex complex2 = complex0.subtract(complex1);
      complex1.isNaN();
      Complex complex3 = complex1.createComplex(466.04464, 2929.7015);
      complex3.ONE.acos();
      Complex complex4 = complex2.createComplex(266.8495183543, 466.04464);
      complex4.NaN.cosh();
      Complex complex5 = complex4.multiply((-2640.943));
      complex4.nthRoot(522);
      Complex complex6 = complex5.add(0.0);
      complex5.ZERO.subtract(2929.7015);
      complex2.acos();
      Complex complex7 = Complex.valueOf(466.04464, 266.8495183543);
      complex4.pow(complex7);
      Complex complex8 = complex6.conjugate();
      complex1.conjugate();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1719.47));
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = Complex.valueOf(20.0, 1719.47);
      Complex complex3 = complex0.divide(complex2);
      complex3.createComplex((-1719.47), (-3319.92803301));
      Complex complex4 = complex1.asin();
      complex3.hashCode();
      complex2.getImaginary();
      Complex complex5 = Complex.valueOf(466.04471342120763);
      complex5.readResolve();
      Complex complex6 = complex4.exp();
      complex6.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1719.47));
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf((-0.16624879837036133));
      Complex complex4 = complex3.createComplex((-1.0407581736224179E170), 0.0);
      complex4.asin();
      complex1.hashCode();
      complex4.getImaginary();
      Complex.valueOf(1719.47);
      complex2.readResolve();
      complex1.exp();
      Complex complex5 = new Complex(1719.47);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2929.7015, 2929.7015);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sin();
      complex2.tan();
      complex1.toString();
      Complex.valueOf(266.8495183543);
      Complex complex3 = Complex.NaN;
      complex3.getField();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex2.pow(complex3);
      complex5.hashCode();
      complex5.toString();
      complex0.sin();
      complex4.sin();
      Complex complex6 = Complex.I;
      complex6.atan();
      Complex complex7 = Complex.I;
      complex7.getImaginary();
      complex2.createComplex(4.6116819897489439E18, 4.6116819897489439E18);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1719.47));
      complex0.abs();
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      complex0.subtract(complex1);
      complex1.isNaN();
      Complex complex2 = complex0.createComplex(1719.47, 466.04464);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.createComplex(1719.47, 466.04464);
      Complex complex5 = complex3.cosh();
      complex0.multiply(-0.0);
      complex5.nthRoot(522);
      complex0.add((-1082.918787514));
      complex4.subtract((-1719.47));
      Complex complex6 = complex2.acos();
      Complex.valueOf((-1719.47), 6.872350402175489E-10);
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex0.add(complex6);
      complex7.pow(862.959554);
      complex8.sin();
      complex6.exp();
      Complex complex9 = Complex.valueOf(6.872350402175489E-10, -0.0);
      try { 
        complex9.nthRoot((-1526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,526
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      complex1.INF.toString();
      Complex complex2 = complex0.multiply((-2147482710));
      complex2.isInfinite();
      Complex complex3 = complex1.atan();
      Complex.valueOf(0.0);
      complex2.getReal();
      Complex complex4 = complex3.divide((-521.0));
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.valueOf(-0.0, (double) (-2147482710));
      complex7.acos();
      complex6.getField();
      complex4.pow(3379.1838772784577);
      complex7.createComplex(-0.0, (-521.0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1854.1287);
      Complex complex1 = complex0.sinh();
      complex1.INF.toString();
      complex1.ZERO.getField();
      Complex complex2 = complex1.createComplex(318.0, 0.0);
      complex1.isNaN();
      Complex.valueOf(1854.1287);
      Complex complex3 = complex2.subtract(complex0);
      complex2.INF.multiply(0.0);
      complex2.NaN.cos();
      complex3.ONE.getField();
      complex1.nthRoot(531);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.log();
      complex5.ZERO.tan();
      Complex complex6 = complex4.conjugate();
      complex6.ZERO.hashCode();
      Complex complex7 = complex2.exp();
      complex7.sinh();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 651.62033);
      complex0.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.sinh();
      complex3.I.getField();
      Complex complex4 = complex0.acos();
      complex4.ONE.cosh();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.toString();
      complex2.I.multiply(0.0);
      complex1.ONE.log();
      complex1.NaN.add((double) (-1947));
      complex2.ONE.multiply((-1947));
      Complex complex6 = complex4.subtract(complex0);
      complex2.equals(complex6);
      complex1.reciprocal();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex1.ZERO.multiply(569);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex1.NaN.getArgument();
      Complex complex5 = complex0.ONE.subtract(complex4);
      complex5.subtract(complex3);
      complex4.ZERO.reciprocal();
      complex5.NaN.sinh();
      complex0.conjugate();
      complex5.tan();
      complex1.readResolve();
      complex4.sqrt();
      complex1.toString();
      Complex complex6 = complex1.conjugate();
      complex6.ONE.add(623.0);
      complex6.I.add(Double.NaN);
      Complex complex7 = complex2.atan();
      complex4.add(complex0);
      Complex.valueOf(Double.NaN);
      complex7.nthRoot(1263);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1719.47));
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ONE.createComplex(1502.5203136, (-1719.47));
      complex2.INF.asin();
      complex3.ZERO.hashCode();
      complex1.getImaginary();
      Complex.valueOf(1719.47);
      complex3.readResolve();
      complex2.exp();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(9.848636053777669E237, 9.848636053777669E237);
      complex0.isInfinite();
      complex0.ONE.readResolve();
      Complex complex1 = Complex.valueOf(9.848636053777669E237, (-984.49394944));
      complex0.NaN.multiply(1272);
      complex0.equals(complex1);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.conjugate();
      complex0.ZERO.subtract(0.0);
      complex1.NaN.reciprocal();
      complex3.exp();
      complex1.hashCode();
      complex0.toString();
      complex2.hashCode();
      complex1.divide(complex0);
      Complex complex4 = complex2.pow((-1.0));
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(369.323);
      Complex complex1 = complex0.INF.createComplex(1.0770423412322998, 369.323);
      Complex complex2 = complex0.sin();
      complex2.getImaginary();
      Complex complex3 = complex2.add(369.323);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1290.19085761), (-1290.19085761));
      complex0.I.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.INF.cosh();
      complex2.I.createComplex(0.0, (-2362.41369050035));
      Complex.valueOf((-418.57225), (-2.749127978087685E126));
      complex0.I.getArgument();
      complex1.tanh();
      complex2.sqrt();
      Complex complex4 = complex3.multiply((-1290.19085761));
      complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.toString();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.multiply(Double.NaN);
      complex2.INF.conjugate();
      Complex complex3 = complex1.multiply(Double.NaN);
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex.valueOf((-1630.043175932), 0.0);
      Complex complex3 = complex1.I.multiply((-1146));
      Complex complex4 = complex0.NaN.add(complex2);
      Complex complex5 = complex0.ZERO.multiply(complex2);
      Complex complex6 = complex5.ZERO.tan();
      complex2.I.tan();
      complex5.ZERO.getField();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.INF.pow(complex3);
      complex8.ZERO.atan();
      Complex.valueOf(0.0, (-2177.8));
      complex4.cosh();
      complex1.getImaginary();
      Complex complex9 = complex6.ONE.multiply((-1146));
      complex7.multiply(1);
      Complex complex10 = complex6.exp();
      Complex complex11 = Complex.valueOf((-1.0), (-2177.8));
      Complex complex12 = Complex.I;
      complex10.divide(complex12);
      Complex complex13 = complex3.atan();
      complex13.getReal();
      Complex complex14 = complex4.conjugate();
      complex14.NaN.atan();
      complex4.multiply(complex0);
      complex9.log();
      complex11.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1);
      complex0.I.abs();
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.ZERO.sin();
      complex2.ZERO.multiply(1);
      complex1.equals(complex0);
      Complex complex3 = Complex.valueOf((-370.7907369862827), 3669.882044);
      complex3.ONE.readResolve();
      complex1.toString();
      Complex complex4 = complex1.sqrt();
      complex4.multiply(complex1);
      complex3.toString();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.I.sinh();
      complex1.NaN.getField();
      complex0.toString();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.cosh();
      complex4.isInfinite();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex3.ONE.subtract(complex0);
      complex8.ZERO.add(complex7);
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex10.ZERO.multiply(complex6);
      Complex complex12 = complex10.ONE.subtract(0.0);
      Complex complex13 = complex5.ZERO.tanh();
      Complex complex14 = complex0.exp();
      complex6.I.pow(0.0);
      complex14.INF.divide(0.0);
      complex11.I.tan();
      complex3.equals(complex6);
      complex6.multiply(complex4);
      complex3.getArgument();
      Complex complex15 = complex11.divide((-2557.1));
      complex15.exp();
      complex1.acos();
      complex13.isNaN();
      complex7.tan();
      complex2.add(complex0);
      complex12.hashCode();
      complex9.log();
      Complex.valueOf((-2557.1), 0.0);
      complex12.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      complex0.abs();
      Complex complex2 = complex1.ONE.conjugate();
      complex0.getImaginary();
      complex0.isNaN();
      complex2.I.log();
      Complex complex3 = complex1.sqrt();
      complex1.getReal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.pow(complex5);
      complex6.I.exp();
      complex6.I.negate();
      complex6.ZERO.sqrt();
      Complex complex7 = complex5.I.sqrt1z();
      complex0.getField();
      Complex complex8 = complex2.log();
      complex2.toString();
      complex1.subtract(0.0);
      Complex complex9 = complex5.add(complex3);
      complex9.getField();
      complex2.reciprocal();
      complex0.divide(complex8);
      complex5.readResolve();
      Complex complex10 = complex0.tan();
      Complex.valueOf(Double.NaN, 0.0);
      Complex complex11 = Complex.INF;
      complex7.add(complex11);
      complex2.negate();
      complex10.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-193.5680573005294), 863.959554);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.log();
      Complex complex4 = Complex.valueOf(863.959554, 0.0);
      Complex complex5 = complex1.atan();
      complex5.I.pow(complex3);
      complex5.nthRoot(1);
      complex5.NaN.getField();
      complex1.toString();
      complex4.equals(complex1);
      Complex complex6 = complex1.exp();
      complex2.tanh();
      Complex complex7 = Complex.ZERO;
      complex7.subtract(1.9790503978729248);
      complex6.equals(complex7);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.equals(", ");
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.multiply(1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.INF.divide((-1.483283901239408E-9));
      Complex complex5 = complex4.I.divide(complex1);
      complex5.ONE.log();
      complex4.INF.tan();
      Complex complex6 = complex4.I.multiply(1);
      complex6.I.getField();
      Complex complex7 = complex0.pow(complex1);
      complex7.ONE.abs();
      Complex complex8 = complex7.createComplex(Double.NaN, Double.NaN);
      complex0.toString();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex8.sqrt1z();
      complex10.ZERO.add(Double.NaN);
      complex10.I.pow(complex9);
      complex10.cosh();
      Complex complex11 = complex0.sin();
      complex11.ZERO.divide(0.0);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.pow(0.0);
      complex1.NaN.tanh();
      complex0.NaN.sinh();
      Complex complex2 = complex0.multiply(2311.16);
      complex2.INF.pow(0.0029254043474793434);
      Complex.valueOf((-3631.0077233), 2311.16);
      Complex complex3 = complex0.conjugate();
      complex3.subtract(195.48851674);
      complex2.reciprocal();
      Complex.valueOf(0.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.pow(20.0);
      complex0.acos();
      complex0.ZERO.atan();
      complex2.NaN.cosh();
      complex1.multiply((-2547.0681193));
      complex2.pow(complex1);
      Complex complex3 = complex1.conjugate();
      complex3.conjugate();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf((-350.0), (-350.0));
      complex1.I.readResolve();
      complex0.INF.sqrt();
      Complex complex2 = complex0.NaN.cos();
      complex2.I.acos();
      complex0.isInfinite();
      Complex complex3 = complex0.exp();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.divide((-371.619831));
      Complex complex3 = complex1.subtract((-371.619831));
      Complex.valueOf((-371.619831), (-1.0389614239253089E-8));
      Complex complex4 = Complex.valueOf((-371.619831));
      complex3.conjugate();
      complex1.readResolve();
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex0.sqrt();
      Complex.valueOf(462.584592, 2329.504047);
      Complex complex5 = complex0.negate();
      complex5.NaN.nthRoot(47);
      Complex complex6 = complex2.sin();
      complex6.NaN.tan();
      complex3.getField();
      Complex complex7 = complex3.conjugate();
      complex1.sqrt();
      Complex complex8 = complex3.pow(complex4);
      Complex complex9 = complex4.negate();
      complex9.readResolve();
      Complex.valueOf((-1385.975));
      complex2.log();
      complex3.sin();
      complex7.cos();
      Complex complex10 = complex9.log();
      complex10.I.abs();
      complex3.exp();
      Complex complex11 = complex8.createComplex(2329.504047, (-2699.049942));
      complex11.getReal();
      complex3.multiply((-1909.9885119792905));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 303.6787502);
      complex0.INF.readResolve();
      Complex complex1 = Complex.valueOf(2.530870537724554E-8);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex0.tan();
      complex0.getImaginary();
      complex0.readResolve();
      complex0.readResolve();
      Complex complex4 = complex1.ONE.tan();
      Complex complex5 = Complex.valueOf(303.6787502, 303.6787502);
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex2.log();
      Complex complex8 = complex3.ONE.sqrt();
      Complex complex9 = complex1.asin();
      complex4.NaN.sinh();
      complex8.ZERO.conjugate();
      complex2.toString();
      complex3.equals(complexField0);
      complex1.pow(complex3);
      Complex complex10 = Complex.valueOf((-1637.12457), 303.6787502);
      complex6.negate();
      Complex complex11 = complex0.reciprocal();
      complex11.INF.sinh();
      complex7.abs();
      Complex complex12 = complex7.tanh();
      complex12.NaN.log();
      complex0.isNaN();
      complex8.acos();
      complex7.cos();
      complex10.acos();
      complex4.subtract(complex9);
      Object object0 = complex4.readResolve();
      complex12.equals(object0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(1216);
      complex1.multiply(1216);
      complex0.NaN.tanh();
      Complex complex2 = complex0.pow(2.6735267639160156);
      complex2.ONE.readResolve();
      Complex complex3 = new Complex(1216, (-937.2127));
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex2.multiply(1216);
      complex5.I.add(complex4);
      Complex complex7 = complex0.multiply(complex5);
      complex7.ONE.pow(0.0);
      complex0.equals(complex5);
      Complex complex8 = Complex.valueOf(110.54);
      complex8.ZERO.pow(complex4);
      complex7.readResolve();
      complex2.reciprocal();
      complex3.sin();
      complex3.getImaginary();
      complex6.subtract(2.6735267639160156);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2929.7015, 2929.7015);
      Complex complex1 = complex0.divide(266.8495183543);
      complex0.equals((Object) null);
      Complex complex2 = complex0.subtract(complex1);
      complex1.isNaN();
      Complex complex3 = complex1.createComplex(466.04464, 2929.7015);
      complex3.ONE.acos();
      Complex complex4 = complex2.createComplex(266.8495183543, 466.04464);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex4.multiply((-2640.943));
      complex4.nthRoot(522);
      Complex complex7 = complex6.add(0.0);
      complex6.ZERO.subtract(2929.7015);
      complex2.acos();
      Complex.valueOf(466.04464, 266.8495183543);
      Complex complex8 = complex2.sqrt1z();
      complex8.NaN.add(complex5);
      complex8.pow(2929.7015);
      complex7.sin();
      complex4.exp();
      complex4.nthRoot(69);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 2257.27787146;
      Complex complex1 = complex0.pow(2257.27787146);
      Complex complex2 = complex1.add(2257.27787146);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = Complex.valueOf(2257.27787146);
      Complex complex5 = complex4.atan();
      complex5.ZERO.abs();
      complex5.NaN.sqrt();
      complex3.ONE.sqrt();
      complex4.ONE.negate();
      Complex complex6 = complex3.atan();
      complex4.abs();
      Complex complex7 = complex6.createComplex(2257.27787146, 2257.27787146);
      complex7.I.sqrt();
      try { 
        complex7.ZERO.nthRoot((-780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -780
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      complex2.I.acos();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.ZERO.sqrt1z();
      complex0.hashCode();
      Complex complex5 = Complex.NaN;
      complex5.divide(1.0);
      complex4.ONE.add(complex2);
      Complex complex6 = complex3.add(complex5);
      complex6.acos();
      complex4.atan();
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1787.6984), Double.POSITIVE_INFINITY);
      complex0.ZERO.hashCode();
      complex0.equals((Object) null);
      Complex complex1 = Complex.valueOf((-4251.4345876327));
      Complex complex2 = complex0.add(6.283185307179586);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.sinh();
      complex4.ONE.reciprocal();
      complex3.ZERO.divide(complex4);
      complex2.ZERO.createComplex(0.0, 1.368893262241355E-7);
      complex3.I.sqrt();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.NaN.divide(75.5);
      Complex complex8 = complex7.INF.multiply(Double.POSITIVE_INFINITY);
      complex8.createComplex(0.0, 1298.0);
      complex6.atan();
      complex0.getArgument();
      Complex complex9 = complex5.negate();
      complex9.I.tan();
      complex3.divide(0.0);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1174.3234803365892));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ONE.divide((-1174.3234803365892));
      complex0.isNaN();
      Complex.valueOf((-1174.3234803365892), (-1174.3234803365892));
      Complex complex3 = complex0.createComplex((-1174.3234803365892), (-1174.3234803365892));
      Complex complex4 = Complex.valueOf(0.0, (-1174.3234803365892));
      Complex complex5 = complex4.sqrt1z();
      complex3.readResolve();
      complex0.I.sinh();
      complex1.tan();
      complex5.nthRoot(9);
      Complex complex6 = complex0.tan();
      complex2.getField();
      complex6.readResolve();
      complex6.nthRoot(577);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.subtract(403.437);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex1.ZERO.add(Double.NaN);
      Complex complex6 = complex1.divide(0.0);
      complex3.ZERO.nthRoot(1431);
      complex6.ONE.add(1221.8018141923);
      Complex complex7 = complex1.ZERO.subtract(complex4);
      complex7.ZERO.cos();
      Complex complex8 = complex6.pow(complex2);
      complex5.ZERO.getArgument();
      complex8.asin();
      Complex complex9 = complex0.createComplex(0.0, 0.0);
      complex2.ONE.pow((double) 1431);
      Complex complex10 = complex3.multiply(complex2);
      complex9.getImaginary();
      complex3.getField();
      complex5.multiply(complex9);
      Complex complex11 = complex10.sqrt1z();
      complex3.readResolve();
      Complex complex12 = null;
      try { 
        complex11.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3163207769393921, 0.3163207769393921);
      Complex complex1 = complex0.NaN.conjugate();
      complex0.I.getField();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.log();
      complex3.add(0.0);
      complex3.INF.conjugate();
      complex1.ZERO.toString();
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex6.I.acos();
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex8.ZERO.sqrt();
      complex8.hashCode();
      Complex complex10 = complex1.sin();
      complex10.toString();
      complex5.multiply(139);
      complex6.getArgument();
      Complex.valueOf(1184.15222114, 3.5335436928899096E-123);
      complex7.multiply(1624);
      complex7.equals(complexField0);
      complex10.isInfinite();
      complex2.multiply(1624);
      Complex.valueOf((double) 1624, 25.885632470186);
      complex4.conjugate();
      complex4.equals("(0.0, 0.0)");
      complex9.conjugate();
      complex1.pow(1139.526);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.divide(Double.NaN);
      Complex complex3 = complex0.ZERO.pow(Double.NaN);
      complex3.INF.getField();
      Complex complex4 = complex1.createComplex((-2182.92871127993), (-2182.92871127993));
      Complex complex5 = complex4.exp();
      Complex complex6 = complex2.acos();
      complex6.createComplex(0.0, Double.NaN);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex4.add(complex7);
      complex5.I.reciprocal();
      complex7.add((-2182.92871127993));
      Complex complex9 = complex4.add(136.9468);
      complex1.ONE.cos();
      complex9.ONE.getField();
      complex2.multiply(complex5);
      complex7.getImaginary();
      complex0.isNaN();
      complex0.multiply((-1181));
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      complex1.INF.toString();
      Complex complex2 = complex0.multiply(0);
      complex2.isInfinite();
      Complex complex3 = complex1.atan();
      complex1.log();
      complex2.getReal();
      Complex complex4 = complex3.divide((-521.0));
      complex4.NaN.sinh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.acos();
      complex5.getField();
      complex3.pow(0.0);
      complex6.createComplex((-684.8441633540313), 0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.negate();
      complex3.getArgument();
      Complex complex4 = complex0.NaN.reciprocal();
      complex1.getField();
      Complex complex5 = complex2.pow((-2.356194490192345));
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.I.pow(complex4);
      complex2.log();
      complex1.getArgument();
      complex7.hashCode();
      Complex complex8 = complex6.I.sin();
      complex8.getField();
      Complex complex9 = complex1.cosh();
      complex9.equals("~F#nEt[&_B");
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(2.5996166206245285E172, (-3929.256407168129));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6960809230804443, 1.6960809230804443);
      complex0.NaN.createComplex(1329.91732527, 3.35657712457243E-9);
      complex0.I.cosh();
      complex0.getArgument();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3042.84293637);
      Complex complex2 = complex0.I.add(3042.84293637);
      complex2.getField();
      complex0.NaN.log();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.I.cosh();
      Complex complex6 = complex0.atan();
      complex6.I.sinh();
      complex0.add(complex5);
      complex0.INF.nthRoot(1355);
      Complex complex7 = Complex.valueOf((-645.887));
      Complex complex8 = complex0.acos();
      complex8.ONE.multiply((-1));
      Complex complex9 = complex4.divide(complex5);
      complex9.multiply(0.0);
      Complex complex10 = complex8.cosh();
      complex8.I.subtract(complex1);
      complex10.createComplex(3042.84293637, 3042.84293637);
      complex5.getArgument();
      complex7.nthRoot(1355);
      try { 
        complex3.nthRoot((-5860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,860
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add((-2306.46798652));
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex3.I.multiply(0);
      complex6.ONE.sqrt();
      Complex complex7 = complex3.ZERO.conjugate();
      complex2.reciprocal();
      complex5.subtract((double) 0);
      Complex complex8 = complex7.ZERO.multiply(81);
      complex5.INF.pow(0.0);
      Complex complex9 = complex3.INF.createComplex(81, 81);
      Complex complex10 = complex7.I.acos();
      complex2.divide((-1831.7));
      complex7.negate();
      Complex complex11 = complex9.atan();
      Complex complex12 = complex11.tan();
      complex11.INF.conjugate();
      complex12.ONE.tan();
      complex11.INF.createComplex(81, 0);
      complex8.pow(complex9);
      complex7.negate();
      complex5.ONE.nthRoot(17);
      complex1.sqrt1z();
      complex10.getArgument();
      complex5.sin();
      complex12.subtract((double) 81);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      complex1.INF.divide((-1523.3055738217133));
      complex1.NaN.reciprocal();
      complex1.I.divide(0.0);
      complex0.readResolve();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      complex2.NaN.multiply(0);
      Complex complex3 = complex2.ZERO.multiply(2442);
      Complex complex4 = complex3.NaN.sin();
      complex4.ONE.multiply(complex0);
      Complex.valueOf((-1580.62654207822));
      complex1.NaN.nthRoot(477);
      complex0.ZERO.abs();
      complex1.nthRoot(201);
      Complex complex5 = complex2.asin();
      complex5.readResolve();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex2.I.reciprocal();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex6.multiply(1522.94);
      complex9.add(1919.490587292);
      Complex complex10 = complex8.sin();
      complex10.NaN.asin();
      complex0.multiply((-2819));
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(complex0);
      complex0.ONE.getArgument();
      complex2.hashCode();
      complex0.toString();
      Complex complex3 = complex1.I.add(0.0);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.I.sin();
      Complex complex7 = complex5.ONE.sqrt1z();
      Complex complex8 = complex4.NaN.asin();
      complex8.INF.subtract(complex3);
      Complex complex9 = complex8.sqrt1z();
      complex9.INF.sinh();
      Complex complex10 = complex5.createComplex(3188.746, 0.0);
      double double0 = complex4.getReal();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex11 = complex0.multiply(complex1);
      double double1 = complex10.I.abs();
      assertEquals(1.0, double1, 0.01);
      
      Complex complex12 = complex11.reciprocal();
      complex6.isInfinite();
      complex10.getField();
      Complex complex13 = complex11.negate();
      complex13.toString();
      assertTrue(complex13.isInfinite());
      
      Complex complex14 = complex12.tanh();
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertTrue(complex14.equals((Object)complex7));
      
      Complex complex15 = complex8.multiply(1);
      assertSame(complex15, complex9);
      
      Complex complex16 = complex6.sqrt();
      assertEquals(0.7665511051599239, complex16.getImaginary(), 0.01);
      
      complex4.hashCode();
      Complex complex17 = complex0.cosh();
      assertFalse(complex17.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1138.441063502397);
      assertFalse(complex0.isNaN());
      assertEquals(1138.441063502397, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }
}
