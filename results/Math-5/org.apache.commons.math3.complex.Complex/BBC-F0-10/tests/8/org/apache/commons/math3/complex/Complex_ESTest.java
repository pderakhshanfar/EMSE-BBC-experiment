/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:52:21 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.divide(0.0);
      complex3.ONE.exp();
      Complex complex4 = complex1.divide((-2067.513473523857));
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex5.INF.conjugate();
      complex6.ONE.readResolve();
      complex5.hashCode();
      Complex complex7 = complex3.I.reciprocal();
      complex7.atan();
      Complex complex8 = complex1.sqrt1z();
      complex8.atan();
      complex5.multiply((-2067.513473523857));
      complex1.cos();
      try { 
        complex3.nthRoot((-2896));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,896
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-711.3453886032233), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex0.readResolve();
      complex2.getArgument();
      complex2.nthRoot(121);
      complex0.asin();
      Complex complex3 = Complex.NaN;
      complex1.abs();
      Complex complex4 = Complex.valueOf((-970.7345155679454), 0.5941681861877441);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.5578699652567908);
      complex0.tanh();
      complex1.sqrt1z();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-780.8351135487862), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      complex1.getField();
      complex2.sqrt1z();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.pow((-780.8351135487862));
      Complex complex5 = complex1.multiply(complex0);
      complex4.getArgument();
      complex1.nthRoot(121);
      complex5.asin();
      Complex complex6 = new Complex(6.283185307179586);
      complex6.sqrt1z();
      complex3.sinh();
      complex2.createComplex(1.2662018663984825E-17, 1.0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.1218749988429474E239), (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      complex0.ONE.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex.valueOf((-133.3407329229), (-4.1218749988429474E239));
      complex1.NaN.asin();
      complex4.INF.abs();
      complex4.ONE.divide((-4.1218749988429474E239));
      Complex complex5 = complex0.exp();
      Complex.valueOf((-4.1218749988429474E239), (-4.1218749988429474E239));
      Complex complex6 = complex5.ONE.conjugate();
      complex6.INF.hashCode();
      complex1.nthRoot(7);
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.sqrt1z();
      complex9.I.readResolve();
      complex9.INF.getField();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.ZERO.tan();
      complex11.NaN.sqrt();
      complex5.add(complex4);
      Complex complex12 = complex5.atan();
      complex9.acos();
      complex0.tan();
      complex8.tanh();
      complex12.isNaN();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 2286.573450016521);
      Complex complex2 = complex1.tanh();
      complex0.asin();
      complex0.tan();
      complex1.add((-20.0));
      Complex complex3 = new Complex(5.9994277301267294E175);
      complex3.pow(2.31148624420166);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-4.117971654572494E154), 377.442);
      complex0.tanh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 2370.355564177);
      Complex complex1 = complex0.NaN.sqrt();
      complex1.I.sinh();
      Complex complex2 = complex0.I.multiply((-20.0));
      complex2.I.tan();
      Complex complex3 = complex0.negate();
      complex3.divide(0.5478278398513794);
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(2370.355564177, (-20.0));
      Complex complex5 = complex3.cosh();
      complex0.INF.hashCode();
      complex4.INF.tan();
      Complex complex6 = complex3.multiply(1.4674010923676222);
      complex4.abs();
      Complex complex7 = complex5.createComplex(0.5478278398513794, 0.5478278398513794);
      complex5.atan();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex3.ZERO.divide(2370.355564177);
      complex8.INF.hashCode();
      complex9.INF.tan();
      complex9.ZERO.add(1034.323552129401);
      Complex.valueOf(2370.439938202372);
      Complex complex10 = complex8.ONE.createComplex(1.4674010923676222, (-20.0));
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex7.asin();
      complex12.INF.pow(complex8);
      complex11.pow(complex6);
      complex10.divide(642.721198527318);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.negate();
      complex1.getArgument();
      complex1.toString();
      complex0.getField();
      Complex.valueOf((-2.356194490192345));
      complex1.tanh();
      Complex complex2 = Complex.INF;
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.tan();
      Complex.valueOf(20.0);
      complex4.multiply(complex0);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      complex2.asin();
      complex1.sqrt1z();
      Complex complex3 = Complex.valueOf(20.0);
      complex2.acos();
      Complex.valueOf(1915.333281040581);
      Complex complex4 = complex1.tan();
      complex4.tanh();
      complex2.isNaN();
      complex3.abs();
      complex4.abs();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      complex1.isNaN();
      complex1.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      complex3.multiply((-500));
      Complex complex4 = complex3.reciprocal();
      complex4.INF.add(751.88041006287);
      complex4.conjugate();
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      complex2.getField();
      Complex complex3 = complex2.pow(complex1);
      complex1.getArgument();
      Complex complex4 = Complex.I;
      complex1.divide(complex3);
      complex0.multiply((-1973));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = Complex.valueOf(20.0, 1701.55578543);
      Complex complex3 = complex1.tanh();
      complex3.asin();
      complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(20.0);
      Complex.valueOf(3.6258834393265715E-4, 20.0);
      complex1.abs();
      Complex complex5 = complex4.divide((-739.3));
      complex4.atan();
      complex1.reciprocal();
      complex5.multiply(complex2);
      complex3.asin();
      Complex complex6 = new Complex(20.0, 1701.55578543);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1.0000000000000002));
      complex0.abs();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.NaN;
      complex3.I.pow(complex4);
      Complex complex5 = complex2.ZERO.sin();
      complex5.pow(complex0);
      Complex.valueOf(4.042486803683015E-8, 0.0029618371097839147);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex6.ZERO.log();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex9.ZERO.cosh();
      complex1.ONE.divide(complex10);
      complex10.NaN.createComplex(0.0029618371097839147, 4.042486803683015E-8);
      complex6.nthRoot(940);
      complex9.INF.abs();
      Complex complex11 = complex7.cosh();
      complex11.ONE.sqrt();
      complex8.nthRoot(940);
      Complex complex12 = complex0.acos();
      complex12.I.add(0.0029618371097839147);
      complex0.tan();
      complex12.cos();
      complex10.subtract((-20.0));
      complex7.subtract(0.0);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      complex2.getField();
      Complex complex3 = complex2.pow(complex1);
      complex1.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex4.pow(complex0);
      Complex complex8 = Complex.I;
      Complex complex9 = complex1.pow((-20.0));
      Complex.valueOf(2835.734581924485, (-20.0));
      complex3.toString();
      complex6.sqrt();
      complex2.getField();
      complex9.getField();
      complex9.tan();
      complex7.tanh();
      Complex complex10 = new Complex((-9210.985238629097), 1.5707963267948966);
      complex10.isNaN();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex.valueOf(20.0, 1701.55578543);
      Complex complex2 = complex1.tanh();
      complex2.asin();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(20.0);
      Complex.valueOf(3.6258834393265715E-4, 20.0);
      complex1.abs();
      Complex complex5 = complex4.divide((-739.3));
      complex4.atan();
      complex5.sin();
      Complex complex6 = Complex.I;
      Complex complex7 = complex3.tanh();
      try { 
        complex7.nthRoot((-1560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,560
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.valueOf(8.498192212235393E178, 6.5756685527756185);
      complex2.asin();
      complex2.abs();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide((-2.62683511147141E-8));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex1.conjugate();
      complex8.hashCode();
      Complex complex9 = new Complex(8.498192212235393E178);
      complex4.pow(complex6);
      Complex complex10 = complex5.acos();
      complex0.sqrt1z();
      complex10.getField();
      Complex complex11 = complex9.negate();
      complex9.tan();
      complex3.sqrt();
      Complex complex12 = new Complex(0.5403023058681398);
      complex8.add(complex9);
      Complex complex13 = new Complex((-20.0), (-1972.366868588266));
      complex13.atan();
      complex9.acos();
      Complex.valueOf(0.5403023058681398);
      complex12.tan();
      Complex complex14 = complex12.tanh();
      complex11.isNaN();
      complex7.abs();
      complex14.abs();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(689.486958, 689.486958);
      Complex complex3 = complex2.asin();
      complex3.getArgument();
      complex0.divide(689.486958);
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = Complex.valueOf((double) (-500), 689.486958);
      complex6.reciprocal();
      complex5.multiply(complex6);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.cosh();
      Complex.valueOf((-2.62683511147141E-8), (-2.62683511147141E-8));
      Complex complex6 = complex0.asin();
      complex4.abs();
      complex2.divide(Double.NaN);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex5.conjugate();
      complex3.hashCode();
      complex3.nthRoot(946);
      Complex complex10 = new Complex((-2.62683511147141E-8));
      Complex complex11 = complex10.pow(complex7);
      complex4.ONE.readResolve();
      complex6.acos();
      Complex complex12 = complex6.sqrt1z();
      complex11.getField();
      complex4.negate();
      complex9.tan();
      complex1.sqrt();
      Complex complex13 = new Complex((-1972.366868588266));
      complex8.equals(complex4);
      complex11.multiply(complex12);
      complex12.subtract((-1538.852925));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5685958862304688, Double.NaN);
      Complex complex1 = complex0.NaN.multiply(2.5685958862304688);
      Complex complex2 = complex0.I.cos();
      complex2.NaN.exp();
      Complex complex3 = complex1.I.createComplex(2.5685958862304688, 258.1358);
      Complex complex4 = complex2.I.log();
      complex4.ONE.negate();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.multiply(complex5);
      complex4.ZERO.hashCode();
      complex6.ONE.hashCode();
      complex5.exp();
      complex4.tanh();
      Complex complex7 = Complex.valueOf((-3.326791455362767E-8));
      Complex complex8 = complex1.pow(complex5);
      complex8.INF.sin();
      complex8.INF.hashCode();
      complex5.reciprocal();
      complex1.multiply((-1653.4591496));
      Complex complex9 = complex5.atan();
      complex9.I.abs();
      Complex complex10 = complex3.sin();
      complex5.log();
      Complex complex11 = complex1.conjugate();
      Complex complex12 = Complex.valueOf(2.5685958862304688);
      complex12.tanh();
      complex8.add(1.0);
      complex11.multiply(complex7);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.cosh();
      Complex complex6 = Complex.valueOf((-2.62683511147141E-8), (-2.62683511147141E-8));
      complex6.INF.abs();
      Complex complex7 = complex0.asin();
      complex4.abs();
      complex2.divide(Double.NaN);
      Complex complex8 = complex3.exp();
      complex5.atan();
      Complex complex9 = complex5.conjugate();
      complex3.hashCode();
      complex3.nthRoot(946);
      Complex complex10 = new Complex((-2.62683511147141E-8));
      Complex complex11 = complex10.pow(complex8);
      complex7.acos();
      complex7.sqrt1z();
      complex11.getField();
      Complex complex12 = complex4.negate();
      complex9.tan();
      complex1.sqrt();
      Complex complex13 = complex1.tan();
      complex8.sqrt();
      complex13.add(complex5);
      Complex complex14 = new Complex((-1972.366868588266), Double.NaN);
      Complex complex15 = complex12.atan();
      complex5.acos();
      complex0.tan();
      complex9.tanh();
      complex0.isNaN();
      complex15.abs();
      complex15.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.getField();
      Complex complex3 = complex0.pow(complex0);
      complex3.getArgument();
      complex1.divide((-1017.5045041));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(complex2);
      complex1.reciprocal();
      complex3.pow(complex0);
      Complex complex6 = Complex.I;
      complex6.pow(0.0);
      complex3.negate();
      Complex complex7 = Complex.valueOf(924.477, 0.42225050926208496);
      Complex complex8 = complex7.negate();
      complex5.tan();
      complex8.sqrt();
      complex8.add(complex1);
      Complex complex9 = new Complex((-1017.5045041), 2254.60281018);
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.asin();
      complex3.NaN.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.NaN.asin();
      complex4.INF.abs();
      Complex complex6 = complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex3.reciprocal();
      complex8.pow(complex6);
      Complex complex10 = complex2.pow(Double.POSITIVE_INFINITY);
      complex8.negate();
      complex9.getArgument();
      complex0.toString();
      Complex complex11 = complex10.sqrt();
      complex5.getField();
      complex8.getField();
      Complex complex12 = Complex.valueOf(3.3730714236579374E186);
      complex11.tanh();
      complex4.createComplex(732.061509, Double.POSITIVE_INFINITY);
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex4.ONE.cosh();
      Complex complex7 = complex6.INF.divide(Double.POSITIVE_INFINITY);
      complex4.INF.getField();
      complex5.nthRoot(199);
      complex5.exp();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.reciprocal();
      complex9.NaN.hashCode();
      complex9.I.cosh();
      complex6.NaN.readResolve();
      Complex complex10 = complex9.ONE.sqrt();
      complex9.atan();
      Complex complex11 = complex0.tan();
      complex9.ZERO.multiply(complex2);
      complex7.conjugate();
      complex3.add((double) 199);
      complex3.add((-2.8144926807308225E-85));
      complex10.sinh();
      complex3.createComplex((-2.8144926807308225E-85), (-5117.8035202097635));
      complex9.cosh();
      complex11.multiply(17);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.cosh();
      Complex.valueOf((-2.62683511147141E-8), (-2.62683511147141E-8));
      Complex complex6 = complex0.asin();
      complex4.abs();
      Complex complex7 = complex2.divide(Double.NaN);
      Complex complex8 = complex0.divide(Double.NaN);
      Complex complex9 = Complex.I;
      complex6.divide(complex8);
      complex2.reciprocal();
      Complex complex10 = complex4.pow(complex7);
      Complex complex11 = Complex.I;
      complex5.I.exp();
      Complex complex12 = complex6.pow(20.0);
      complex2.negate();
      complex10.getArgument();
      complex12.toString();
      complex9.getField();
      complex5.tan();
      complex8.tanh();
      complex1.createComplex(Double.NaN, 20.0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(4.050833763855709E-193, (-2.9013441705763093E-8));
      complex0.INF.getArgument();
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf((-1541.69));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.sqrt1z();
      complex4.createComplex((-197.54), (-1541.69));
      complex2.readResolve();
      complex0.getField();
      Complex complex5 = complex2.negate();
      complex3.tan();
      Complex complex6 = Complex.valueOf((-197.54));
      complex6.sqrt();
      Complex complex7 = new Complex((-197.54));
      complex0.add(complex7);
      Complex complex8 = new Complex((-2.9013441705763093E-8), 1.1107207345395915);
      complex2.atan();
      Complex complex9 = Complex.valueOf(0.4231152207440782);
      complex9.acos();
      complex3.tan();
      complex8.tanh();
      complex5.isNaN();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.cosh();
      Complex complex6 = Complex.valueOf((-2.62683511147141E-8), (-2.62683511147141E-8));
      Complex complex7 = complex0.asin();
      complex4.abs();
      complex2.divide(Double.NaN);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex5.conjugate();
      complex3.hashCode();
      complex3.nthRoot(946);
      Complex complex11 = new Complex((-2.62683511147141E-8));
      Complex complex12 = complex11.pow(complex8);
      Complex complex13 = complex7.acos();
      complex7.sqrt1z();
      complex9.readResolve();
      complex12.getField();
      complex4.negate();
      complex10.tan();
      complex1.sqrt();
      Complex complex14 = new Complex((-1972.366868588266));
      complex14.add(complex3);
      Complex complex15 = new Complex((-1972.366868588266), 3946.547747);
      Complex complex16 = complex6.atan();
      complex13.acos();
      Complex complex17 = Complex.valueOf(3946.547747);
      complex17.tan();
      complex13.tanh();
      complex14.isNaN();
      complex16.abs();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply((-226.991754801));
      Complex complex3 = complex2.divide(complex1);
      complex3.tan();
      complex3.tanh();
      complex0.isNaN();
      Complex complex4 = new Complex((-1150), 5039.576);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2792.6987689, 2792.6987689);
      Complex complex1 = complex0.pow(2792.6987689);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.NaN.divide(2792.6987689);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.tanh();
      complex5.ZERO.pow((-532.372655));
      complex5.abs();
      complex4.ZERO.sqrt();
      Complex complex6 = complex1.multiply(Double.NaN);
      complex6.INF.nthRoot(7);
      complex6.NaN.sqrt1z();
      complex4.multiply(2146113081);
      Complex.valueOf(1.0);
      complex2.multiply((double) 2146113081);
      complex5.conjugate();
      complex5.nthRoot(2146113081);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex.valueOf(0.7615941559557649);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.ONE.add(complex1);
      complex2.ONE.cos();
      complex2.atan();
      complex1.acos();
      Complex complex4 = complex3.tan();
      complex4.tanh();
      Complex complex5 = new Complex(2930.161, 2930.161);
      complex5.cosh();
      Complex complex6 = Complex.I;
      complex6.tanh();
      complex5.nthRoot(511);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-10.5581534233034));
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.NaN.sin();
      complex1.isNaN();
      complex1.abs();
      Complex complex4 = complex2.subtract(523.9968247740417);
      complex1.sqrt();
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ONE.tanh();
      complex0.asin();
      Complex complex3 = complex1.add((-2.7609457648450225E-8));
      Complex complex4 = complex3.add(4380.5765);
      complex3.abs();
      complex2.tanh();
      complex4.createComplex(4380.5765, 373.9590504629);
      complex1.isInfinite();
      Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.4873090982437134, (-5.301386276260592E-111));
      Complex complex2 = complex1.ZERO.acos();
      complex2.INF.pow(2.0);
      complex0.sinh();
      Complex complex3 = complex0.subtract(1017.5045041);
      complex3.sin();
      Complex complex4 = complex3.cosh();
      complex4.toString();
      complex4.subtract(Double.NaN);
      Complex complex5 = complex0.cosh();
      complex5.cos();
      Complex complex6 = Complex.valueOf((-57864.0963177225), Double.NaN);
      complex6.ONE.exp();
      complex5.divide(complex6);
      complex5.multiply(794);
      complex3.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      complex0.INF.conjugate();
      complex0.ONE.tanh();
      Complex complex1 = complex0.asin();
      complex1.NaN.sqrt1z();
      Complex complex2 = complex0.cosh();
      Complex complex3 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.add(complex5);
      complex2.acos();
      complex6.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(4.050833763855709E-193, (-2.9013441705763093E-8));
      complex0.INF.getArgument();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      complex1.NaN.sinh();
      complex0.nthRoot(1);
      Complex complex3 = complex2.NaN.negate();
      complex2.hashCode();
      complex0.cos();
      complex3.exp();
      complex3.multiply(complex0);
      complex1.subtract(Double.NaN);
      Complex complex4 = Complex.ONE;
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.valueOf((-133.3407329229), Double.POSITIVE_INFINITY);
      complex1.NaN.asin();
      complex5.INF.abs();
      complex0.divide(274.6674024713);
      Complex complex7 = complex2.exp();
      complex3.atan();
      complex4.conjugate();
      Complex complex8 = new Complex(274.6674024713);
      complex8.hashCode();
      complex1.nthRoot(7);
      Complex complex9 = complex1.pow(complex8);
      complex4.acos();
      Complex complex10 = complex8.sqrt1z();
      complex10.readResolve();
      complex1.getField();
      complex7.negate();
      complex10.tan();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = Complex.ONE;
      complex12.add(complex6);
      Complex complex13 = new Complex(0.3606154967576032, 6.123233995736766E-17);
      complex11.atan();
      Complex complex14 = complex11.acos();
      complex11.tan();
      complex14.tanh();
      complex9.isNaN();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(4.050833763855709E-193, (-2.9013441705763093E-8));
      complex0.INF.getArgument();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.sinh();
      complex5.readResolve();
      complex1.equals("");
      complex3.hashCode();
      complex0.cos();
      Complex complex6 = complex4.exp();
      complex6.multiply(complex1);
      complex5.subtract((-2.9013441705763093E-8));
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.I;
      complex2.equals(complex8);
      complex4.reciprocal();
      complex7.multiply(17);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.getField();
      Complex complex3 = new Complex((-2784.5534425658));
      Complex complex4 = complex3.pow(complex0);
      complex4.getArgument();
      complex1.divide((-1017.5045041));
      Complex complex5 = Complex.I;
      complex5.divide(complex2);
      complex1.reciprocal();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.pow(1.6486574885428815);
      Complex complex8 = complex4.negate();
      complex8.getArgument();
      complex0.toString();
      Complex complex9 = complex7.exp();
      complex1.multiply(complex6);
      Complex complex10 = Complex.ZERO;
      complex4.asin();
      Complex complex11 = new Complex((-2784.5534425658));
      complex11.divide(complex9);
      Complex complex12 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.getField();
      Complex complex3 = new Complex((-2784.5534425658));
      Complex complex4 = complex3.pow(complex0);
      complex4.getArgument();
      Complex complex5 = complex1.divide((-1017.5045041));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex4.pow(complex0);
      Complex complex10 = Complex.I;
      complex10.pow(1.6486574885428815);
      complex4.negate();
      complex10.readResolve();
      complex7.getField();
      complex2.negate();
      complex5.tan();
      complex5.sqrt();
      Complex complex11 = new Complex((-453.8496), (-5.730477881659618E-9));
      complex11.add(complex9);
      Complex complex12 = new Complex(1.0E-6, (-0.38109784554181547));
      Complex complex13 = complex4.atan();
      complex10.acos();
      complex5.tan();
      complex8.tanh();
      complex5.isNaN();
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      complex0.ONE.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex.valueOf((-133.3407329229), Double.POSITIVE_INFINITY);
      complex1.NaN.asin();
      complex4.INF.abs();
      complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex5.NaN.atan();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.INF.hashCode();
      complex1.nthRoot(7);
      Complex complex7 = complex3.pow(complex2);
      complex7.acos();
      Complex complex8 = complex1.sqrt1z();
      complex8.I.readResolve();
      Complex complex9 = complex1.reciprocal();
      complex3.asin();
      complex9.readResolve();
      complex6.multiply((-3620.3173217));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-3011.7339), 0.8657694832396586);
      Complex complex1 = Complex.valueOf(1.3130352854993315, (-3011.7339));
      complex1.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sqrt1z();
      complex1.sinh();
      complex1.nthRoot(19);
      Complex complex4 = complex2.negate();
      complex4.hashCode();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex3.exp();
      Complex complex7 = new Complex(1.0000000000000009, 3312.0);
      complex5.multiply(complex7);
      complex6.asin();
      complex6.divide(complex4);
      complex7.multiply(414);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.getField();
      Complex complex3 = new Complex((-2784.5534425658));
      Complex complex4 = complex3.pow(complex0);
      complex4.getArgument();
      Complex complex5 = complex1.divide((-1017.5045041));
      Complex complex6 = Complex.I;
      complex6.divide(complex2);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = Complex.I;
      complex8.readResolve();
      complex1.equals((Object) null);
      complex7.hashCode();
      complex9.cos();
      Complex complex10 = Complex.ONE;
      complex10.exp();
      Complex complex11 = complex5.multiply(complex3);
      Complex complex12 = Complex.ZERO;
      complex5.asin();
      complex11.divide(complex5);
      Complex complex13 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.atan();
      complex0.ONE.add(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.acos();
      complex0.tan();
      Complex complex5 = complex4.tanh();
      complex5.isNaN();
      complex0.abs();
      complex3.subtract(1.0);
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.ONE.add(complex1);
      complex2.ONE.cos();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.tan();
      complex6.tanh();
      complex4.isNaN();
      complex1.abs();
      Complex complex7 = complex6.subtract(1.1752011936438014);
      complex7.INF.sqrt();
      complex5.equals("DEGREES_OF_FREEDOM");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.add(1649.6605956914);
      complex0.nthRoot(7);
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = new Complex(1649.6605956914, 1649.6605956914);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex4.sqrt();
      complex7.hashCode();
      Complex complex8 = Complex.ZERO;
      complex8.cos();
      complex2.exp();
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex5.asin();
      Complex complex11 = Complex.I;
      complex6.divide(complex9);
      complex10.exp();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(4.050833763855709E-193, (-2.9013441705763093E-8));
      complex0.INF.getArgument();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.NaN.sinh();
      complex0.hashCode();
      complex0.nthRoot(2631);
      Complex complex4 = complex0.pow(complex2);
      complex2.acos();
      Complex complex5 = complex0.sqrt1z();
      complex4.readResolve();
      complex5.getField();
      Complex complex6 = new Complex((-2.9013441705763093E-8), 7);
      complex6.negate();
      complex4.tan();
      complex0.sqrt();
      Complex complex7 = complex3.add(complex2);
      Complex complex8 = new Complex(1965.971171755, 1965.971171755);
      Complex complex9 = complex7.atan();
      complex3.acos();
      complex9.tan();
      complex4.tanh();
      Complex complex10 = Complex.ONE;
      complex10.isNaN();
      Complex complex11 = new Complex(4.050833763855709E-193, 1);
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex0.cosh();
      Complex.valueOf((-133.3407329229), Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.NaN.asin();
      complex5.INF.abs();
      Complex complex7 = complex5.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.exp();
      complex8.NaN.atan();
      complex3.pow(complex2);
      Complex complex9 = Complex.I;
      complex4.pow((-3885.595));
      complex7.negate();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.getArgument();
      complex7.toString();
      complex1.sqrt();
      complex6.getField();
      complex0.getField();
      complex3.tan();
      Complex complex11 = complex8.tanh();
      complex11.createComplex(9.362866914115166E-285, 4.050833763855709E-193);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.getField();
      double double0 = (-2784.5534425658);
      Complex complex3 = new Complex((-2784.5534425658));
      Complex complex4 = complex3.pow(complex0);
      complex4.getArgument();
      double double1 = (-1017.5045041);
      complex1.divide((-1017.5045041));
      Complex complex5 = Complex.I;
      complex5.divide(complex2);
      Complex complex6 = complex1.reciprocal();
      complex1.conjugate();
      complex4.hashCode();
      int int0 = 7;
      // Undeclared exception!
      complex6.nthRoot(1357468564);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.ZERO.cos();
      Complex complex1 = complex0.INF.pow(2.9013441705763093E-8);
      Complex complex2 = complex1.I.cos();
      complex1.getArgument();
      Complex complex3 = complex1.I.tanh();
      complex3.ZERO.pow(2.0);
      complex2.I.log();
      complex2.I.getArgument();
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.I.sin();
      complex0.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.sqrt();
      complex3.nthRoot(768);
      complex2.hashCode();
      complex3.getField();
      complex4.add((-1.218609462241927E-9));
      Complex complex5 = complex2.pow(complex4);
      complex4.negate();
      complex5.getArgument();
      complex5.cos();
      Complex complex6 = complex0.divide(complex3);
      complex6.isInfinite();
      complex4.acos();
      complex2.readResolve();
      Complex complex7 = Complex.valueOf(185.5);
      complex7.divide((-1.218609462241927E-9));
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      complex0.ONE.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex.valueOf((-133.3407329229), Double.POSITIVE_INFINITY);
      complex1.NaN.asin();
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf((-3024.9329848));
      complex6.readResolve();
      complex3.multiply(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.pow(Double.POSITIVE_INFINITY);
      complex5.acos();
      complex4.isInfinite();
      Complex complex7 = Complex.INF;
      complex7.subtract(1432.4675);
      Complex complex8 = complex0.asin();
      complex5.multiply((-1));
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.getField();
      Complex complex3 = new Complex((-2784.5534425658));
      Complex complex4 = complex3.pow(complex0);
      complex4.getArgument();
      Complex complex5 = complex1.divide((-1017.5045041));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex1.reciprocal();
      complex4.pow(complex0);
      Complex complex9 = Complex.I;
      complex9.pow(1.6486574885428815);
      Complex complex10 = complex4.negate();
      complex10.getArgument();
      complex0.toString();
      Complex complex11 = complex4.sqrt();
      complex7.getField();
      complex5.getField();
      complex8.tan();
      complex11.tanh();
      complex2.createComplex(4.050833763855709E-193, 7.120586694432509E53);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(4.050833763855709E-193, (-2.9013441705763093E-8));
      complex0.INF.getArgument();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      complex1.NaN.sinh();
      complex0.nthRoot(1267);
      Complex complex3 = complex2.NaN.negate();
      complex0.NaN.nthRoot(1267);
      complex0.hashCode();
      complex2.getField();
      complex3.ZERO.add((double) 1267);
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex4.negate();
      complex5.getArgument();
      complex4.NaN.cos();
      Complex complex6 = complex3.divide(complex1);
      complex6.ZERO.tan();
      complex1.isInfinite();
      Complex complex7 = complex4.acos();
      complex7.ZERO.readResolve();
      Complex complex8 = new Complex(Double.NaN);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(4.050833763855709E-193, (-2.9013441705763093E-8));
      complex0.INF.getArgument();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.NaN.sinh();
      complex0.nthRoot(1);
      Complex complex4 = complex2.NaN.negate();
      complex0.NaN.nthRoot(1);
      complex0.hashCode();
      complex2.getField();
      complex4.ZERO.add((double) 1);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex5.negate();
      complex6.getArgument();
      complex5.NaN.cos();
      complex4.divide(complex1);
      complex1.isInfinite();
      Complex complex7 = complex5.acos();
      complex7.ZERO.readResolve();
      complex2.divide((-2.9013441705763093E-8));
      complex4.atan();
      Complex.valueOf(Double.NaN);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(4024.6214408);
      Complex complex1 = complex0.tanh();
      complex1.createComplex(4024.6214408, 2139.07317212059);
      Complex complex2 = complex0.sqrt1z();
      complex0.getArgument();
      complex0.divide(0.49539655935838334);
      Complex complex3 = Complex.NaN;
      complex2.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.acos();
      complex5.tan();
      complex3.tanh();
      complex5.isNaN();
      complex3.abs();
      complex4.subtract(2.1752011936438014);
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-10.5581534233034));
      Complex complex1 = complex0.ZERO.tan();
      complex1.NaN.sin();
      complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.nthRoot(994);
      complex2.multiply(3883);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex3.add((-2.1899520225809197E-7));
      complex5.ONE.toString();
      complex2.I.sqrt();
      Complex complex6 = complex0.atan();
      complex6.getArgument();
      Complex complex7 = Complex.INF;
      complex6.ONE.cosh();
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.NaN.multiply(17);
      complex9.INF.multiply(complex3);
      complex5.sinh();
      complex1.sqrt();
      complex4.toString();
      complex1.sin();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.createComplex((-2517.0248804712), (-2.1899520225809197E-7));
      Complex complex12 = new Complex((-2.1899520225809197E-7), (-2695.34648));
      Complex complex13 = Complex.NaN;
      complex2.subtract(complex13);
      complex8.readResolve();
      complex13.nthRoot(31);
      complex11.getReal();
      complex11.subtract(6.569676185250389E-264);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      complex0.ONE.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex.valueOf((-133.3407329229), Double.POSITIVE_INFINITY);
      complex1.NaN.asin();
      complex4.INF.abs();
      complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex5.NaN.atan();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.INF.hashCode();
      complex1.nthRoot(7);
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.sqrt1z();
      complex9.I.readResolve();
      complex9.INF.getField();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.ZERO.tan();
      complex11.NaN.sqrt();
      complex3.add(complex6);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY, 7);
      complex12.atan();
      complex3.acos();
      complex1.tan();
      complex12.tanh();
      complex5.isNaN();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.I.sin();
      complex0.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.sqrt();
      complex4.NaN.log();
      complex2.hashCode();
      complex0.NaN.cos();
      complex3.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.asin();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(612.4891133660066, (-1537.548204089176));
      Complex complex2 = Complex.valueOf(2072.7325255061273, 2072.7325255061273);
      complex2.getArgument();
      Complex complex3 = Complex.valueOf(7.120586694432509E53, (-1537.548204089176));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sqrt1z();
      complex2.sinh();
      complex1.nthRoot(234);
      Complex complex6 = complex0.negate();
      complex3.nthRoot(2);
      complex2.hashCode();
      complex0.getField();
      Complex complex7 = complex0.add((double) 2);
      complex6.pow(complex5);
      Complex complex8 = complex3.negate();
      complex5.getArgument();
      Complex complex9 = complex7.cos();
      Complex complex10 = Complex.INF;
      complex6.divide(complex10);
      complex8.isInfinite();
      Complex complex11 = complex10.acos();
      complex11.readResolve();
      complex9.divide(7.120586694432509E53);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.sqrt();
      Object object0 = complex4.readResolve();
      complex0.INF.hashCode();
      complex3.equals(object0);
      Complex complex5 = Complex.valueOf((-20.0));
      Complex complex6 = complex5.atan();
      complex3.divide(1732.6292);
      complex1.getReal();
      complex6.toString();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-133.3407329229));
      Complex complex1 = complex0.INF.conjugate();
      complex0.ONE.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex.valueOf((-133.3407329229), Double.POSITIVE_INFINITY);
      complex1.NaN.asin();
      complex4.INF.abs();
      complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex5.NaN.atan();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.INF.hashCode();
      complex1.nthRoot(7);
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.sqrt1z();
      complex9.I.readResolve();
      complex9.INF.getField();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.ZERO.tan();
      complex11.NaN.sqrt();
      complex5.add(complex4);
      Complex complex12 = complex5.atan();
      complex9.acos();
      complex0.tan();
      complex8.tanh();
      complex12.isNaN();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex2.I.log();
      complex0.sin();
      Complex complex5 = complex0.INF.add(complex4);
      complex0.tanh();
      Complex complex6 = complex0.createComplex((-49.79758), (-3.702271091849158E-8));
      Complex complex7 = complex6.createComplex((-3.702271091849158E-8), 1.0);
      Complex complex8 = complex7.ZERO.multiply(2455);
      Complex complex9 = complex7.INF.reciprocal();
      complex9.I.divide((-4547.773034));
      complex0.cosh();
      Complex complex10 = Complex.valueOf((-1505.6659464174654));
      complex10.ZERO.divide(complex8);
      Complex complex11 = complex1.createComplex((-3.702271091849158E-8), 1.0);
      complex11.NaN.log();
      complex4.reciprocal();
      complex2.getReal();
      complex3.asin();
      complex6.reciprocal();
      complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2071.162212));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.atan();
      complex2.I.abs();
      Complex complex3 = Complex.valueOf(0.0, 1325.46);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.add((-2071.162212));
      complex0.I.createComplex(0.0, (-2071.162212));
      Complex complex6 = complex4.multiply((-2071.162212));
      complex6.divide(1.0);
      complex4.pow(1325.46);
      complex3.pow(complex0);
      complex4.abs();
      complex0.isInfinite();
      complex1.ONE.asin();
      complex3.nthRoot(1);
      Complex complex7 = complex2.sqrt1z();
      complex7.ONE.cos();
      complex5.atan();
      complex0.subtract(2160.972364);
      complex4.tan();
      Complex.valueOf((-2869.0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1535.799732103), (-1535.799732103));
      Complex complex1 = Complex.valueOf((-563.28005041), (-563.28005041));
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex0.sin();
      complex7.NaN.abs();
      Complex complex8 = complex7.I.multiply(1);
      complex8.INF.pow(complex6);
      complex8.ONE.readResolve();
      Complex complex9 = complex0.multiply((-1535.799732103));
      complex1.pow((-1535.799732103));
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.I.log();
      complex11.ZERO.multiply(1432);
      complex9.toString();
      complex1.divide(complex0);
      complex11.isInfinite();
      complex6.multiply(0.0);
      complex6.toString();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.pow(7.054443447243064E-8);
      Complex complex4 = complex3.ZERO.tan();
      complex4.I.getField();
      Complex complex5 = complex3.I.cos();
      complex5.ZERO.sqrt1z();
      complex5.NaN.multiply(7.054443447243064E-8);
      complex0.abs();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex7.I.add((-2339.1978899728642));
      complex6.tan();
      Complex complex9 = complex3.sin();
      complex3.hashCode();
      Complex complex10 = complex2.multiply(7.054443447243064E-8);
      complex6.tan();
      Complex complex11 = complex4.divide(complex6);
      complex8.ZERO.add(complex9);
      complex11.ONE.acos();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex12 = complex10.acos();
      complex12.ZERO.getArgument();
      Complex complex13 = complex6.createComplex(3.9260317944365246E-8, 0.0);
      complex13.abs();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.I.sinh();
      complex2.ONE.sqrt();
      Complex.valueOf((-1483.91334823));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.acos();
      complex4.getField();
      complex4.getArgument();
      complex1.subtract(complex4);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.createComplex(-0.0, -0.0);
      complex3.sqrt1z();
      complex3.getArgument();
      Complex complex7 = complex1.divide((-576.01));
      complex6.tanh();
      complex7.createComplex(-0.0, (-1083.0875915294864));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.pow(0.0);
      Complex complex4 = complex1.I.sin();
      complex4.I.subtract(complex2);
      Complex complex5 = complex2.ZERO.sin();
      complex5.NaN.exp();
      Complex complex6 = complex3.NaN.asin();
      complex6.ZERO.sqrt();
      complex6.ZERO.sin();
      Complex complex7 = complex2.acos();
      int int0 = 1474;
      complex7.ONE.nthRoot(1474);
      Complex complex8 = complex2.multiply(complex7);
      Complex complex9 = Complex.valueOf((double) 1474);
      complex9.exp();
      complex8.isInfinite();
      complex5.isInfinite();
      Complex complex10 = complex5.asin();
      complex3.toString();
      complex0.getReal();
      complex10.divide(1631.2863351232752);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.cos();
      complex12.ZERO.toString();
      complex8.pow(complex11);
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.divide(complex0);
      complex2.ZERO.add(1649.6605956914);
      complex0.nthRoot(7);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      complex4.ZERO.cos();
      Complex complex5 = complex1.ONE.sinh();
      complex5.INF.readResolve();
      complex0.equals(object0);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex0.NaN.sinh();
      complex7.ONE.sqrt();
      complex3.toString();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex4.createComplex(1.0, 1.0);
      Complex complex10 = new Complex(7, 1.49824857711792);
      complex8.subtract(complex10);
      complex10.readResolve();
      complex6.nthRoot(31);
      complex9.getReal();
      complex10.subtract((-2911.0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.createComplex(2433.8077781, 2433.8077781);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex2.INF.multiply((-277));
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.NaN.exp();
      complex7.I.toString();
      Complex complex8 = Complex.valueOf((-128.537211), (-128.537211));
      Complex complex9 = complex8.ONE.sqrt1z();
      complex3.readResolve();
      complex8.acos();
      Object object0 = complex9.readResolve();
      complex2.equals(object0);
      Complex complex10 = complex2.sinh();
      complex9.nthRoot(37);
      complex4.multiply((double) 37);
      complex6.getReal();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-2253.810750158);
      Complex complex1 = complex0.INF.add((-2253.810750158));
      Complex complex2 = complex0.INF.sinh();
      complex2.ZERO.add(complex0);
      complex1.NaN.subtract((-2253.810750158));
      complex2.INF.readResolve();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.add(complex2);
      complex2.I.sqrt1z();
      double double0 = (-2.1899520225809197E-7);
      Complex complex4 = complex3.add((-2.1899520225809197E-7));
      complex4.ONE.toString();
      complex2.I.sqrt();
      Complex complex5 = complex0.atan();
      complex5.getArgument();
      Complex complex6 = Complex.INF;
      complex5.ONE.cosh();
      Complex complex7 = complex0.add(complex6);
      int int0 = 17;
      Complex complex8 = complex7.NaN.multiply(17);
      complex8.INF.multiply(complex3);
      Complex complex9 = complex8.createComplex((-2698.69), (-2698.69));
      int int1 = 0;
      try { 
        complex9.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.getField();
      complex2.cosh();
      complex1.ONE.toString();
      complex1.reciprocal();
      Complex complex3 = complex1.asin();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.I.acos();
      complex1.ZERO.abs();
      complex1.ZERO.exp();
      complex0.getImaginary();
      Complex complex2 = complex0.sinh();
      complex2.NaN.hashCode();
      complex2.divide(1046.7394433);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(5.82190887044604E-84, 5.82190887044604E-84);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(5.82190887044604E-84);
      Complex complex4 = complex3.INF.multiply(1);
      complex4.I.add(complex3);
      Complex complex5 = complex2.INF.pow(complex0);
      complex2.ONE.toString();
      Complex complex6 = complex5.I.add(1.0);
      Complex complex7 = complex0.ONE.sqrt1z();
      Complex complex8 = complex2.subtract((-20.0));
      complex8.ONE.sqrt();
      complex0.cosh();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex9.ONE.atan();
      complex6.toString();
      Complex complex11 = complex7.atan();
      complex11.ZERO.sin();
      Complex complex12 = complex0.sqrt();
      complex12.isNaN();
      Complex.valueOf(1110.7860679, 1524.0);
      complex12.asin();
      Complex.valueOf(0.0, (-1344.71253607019));
      complex9.pow(1.0);
      complex10.multiply(0);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2278.4749146503);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.I.exp();
      complex2.NaN.pow(complex1);
      complex2.INF.readResolve();
      complex0.ZERO.cos();
      complex1.NaN.add((-1.0));
      Complex complex3 = complex0.sin();
      complex3.INF.tan();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1409.10348407), (-1409.10348407));
      complex0.INF.subtract(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      complex1.ONE.createComplex(2.0923361778259277, 2.0923361778259277);
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex3.subtract(1.0972130298614502);
      complex5.ZERO.getArgument();
      Complex complex6 = complex3.negate();
      complex6.INF.asin();
      complex6.ZERO.abs();
      complex6.I.add((-1409.10348407));
      complex0.nthRoot(2322);
      Complex complex7 = complex3.I.tanh();
      complex7.NaN.pow(complex4);
      Complex complex8 = complex0.sqrt();
      complex8.nthRoot(1);
      complex0.subtract((double) 2322);
      Complex complex9 = complex2.ZERO.sin();
      Complex complex10 = complex9.negate();
      complex5.cosh();
      Complex complex11 = complex5.asin();
      complex1.asin();
      complex10.nthRoot(1);
      complex0.sin();
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1375.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.INF.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.pow(complex1);
      complex0.ZERO.asin();
      Complex complex4 = complex2.add(1375.0);
      Complex complex5 = complex1.multiply(986);
      Complex complex6 = complex0.pow((double) 986);
      complex6.I.createComplex(1375.0, 1375.0);
      Complex complex7 = complex5.multiply(0.0);
      complex4.ONE.divide(complex0);
      complex0.add(0.0);
      Complex.valueOf(1375.0, 1.0445707500867073E-7);
      complex6.acos();
      complex3.divide(2.719805132368625E-271);
      complex7.readResolve();
      complex4.acos();
      Complex.valueOf(1.378919824418909E-7);
      complex7.add(1.378919824418909E-7);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.I.sin();
      complex0.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.sqrt();
      complex2.hashCode();
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex5.exp();
      complex6.ONE.multiply(complex4);
      complex0.asin();
      complex1.divide(complex3);
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-10.5581534233034));
      Complex complex1 = complex0.ZERO.tan();
      complex1.NaN.sin();
      complex0.cosh();
      Complex complex2 = complex1.tanh();
      complex2.nthRoot(511);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5035535029701945E-199);
      complex0.getReal();
      complex0.negate();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      complex2.ZERO.readResolve();
      complex2.I.multiply(complex0);
      Complex.valueOf(2.5035535029701945E-199, 2.5035535029701945E-199);
      Complex complex3 = complex1.pow(2.5035535029701945E-199);
      Complex complex4 = complex1.acos();
      complex4.isInfinite();
      complex1.subtract(2.5035535029701945E-199);
      complex4.asin();
      Complex complex5 = complex3.multiply(1701);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex1.atan();
      complex0.ONE.add(complex1);
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-58.904981021));
      Complex complex1 = Complex.valueOf(0.0, (-1.0));
      Complex complex2 = complex1.INF.multiply(720);
      Complex complex3 = complex1.NaN.acos();
      complex3.INF.multiply(complex2);
      Complex complex4 = complex1.cos();
      complex4.I.hashCode();
      complex1.isInfinite();
      complex0.getReal();
      complex0.hashCode();
      Complex.valueOf((double) 720, (-836.2611548));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(671.9, (double) 2961);
      complex0.nthRoot(2961);
      complex1.INF.sqrt();
      complex0.hashCode();
      complex0.divide(671.9);
      Complex complex2 = complex1.multiply(complex0);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex.valueOf(1932.45118039);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.ONE.cosh();
      complex0.subtract(complex3);
      complex1.I.cos();
      Complex complex4 = complex3.negate();
      complex2.atan();
      complex4.ZERO.sqrt1z();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      complex2.ONE.getArgument();
      complex1.I.readResolve();
      Complex complex3 = complex0.INF.multiply(complex1);
      complex3.ONE.abs();
      complex1.toString();
      complex0.INF.multiply(0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.ZERO.subtract(1.0);
      complex4.ZERO.acos();
      Complex complex6 = complex0.pow(complex4);
      complex6.NaN.getArgument();
      Complex complex7 = complex4.divide(0.0);
      complex6.INF.divide(complex3);
      Complex complex8 = complex4.ONE.reciprocal();
      Complex complex9 = complex7.pow(complex1);
      complex7.ONE.pow(Double.NaN);
      complex4.I.negate();
      complex8.ONE.getArgument();
      complex2.ONE.toString();
      complex9.sqrt();
      complex7.getField();
      complex8.getField();
      complex5.tan();
      complex4.tanh();
      complex4.createComplex(1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-2984.7995192486815), (-2984.7995192486815));
      complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex.valueOf((-2984.7995192486815), 0.0);
      complex1.I.getArgument();
      Complex complex2 = complex0.add(complex1);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1491.771628192442), 1.0);
      Complex complex2 = complex1.divide(complex0);
      complex1.ONE.add(complex0);
      Complex complex3 = complex2.NaN.log();
      complex2.divide(complex1);
      Complex complex4 = complex3.I.sin();
      complex0.subtract(complex1);
      complex4.nthRoot(994);
      complex1.multiply(994);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.asin();
      Complex.valueOf((-4179.89813784));
      complex0.NaN.abs();
      Complex complex2 = complex1.createComplex(0.0, 1.0);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = new Complex((-1871.7));
      Complex complex5 = complex1.ZERO.pow(complex4);
      complex3.hashCode();
      complex1.asin();
      Complex complex6 = Complex.valueOf(40.19140625, 0.0);
      complex0.divide(complex6);
      complex5.sqrt1z();
      complex6.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(0.0);
      complex0.divide(0.0);
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1439.478855481561));
      Complex complex1 = Complex.NaN;
      complex1.ZERO.abs();
      Complex complex2 = complex0.pow(6.602496401651853E-9);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex0.I.log();
      complex5.ZERO.reciprocal();
      complex0.pow(complex1);
      complex0.NaN.pow(complex1);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.tan();
      complex0.readResolve();
      Complex complex8 = complex7.ONE.pow(0.0);
      complex7.INF.multiply(6.602496401651853E-9);
      Complex complex9 = complex3.sqrt1z();
      complex9.NaN.tan();
      Complex complex10 = complex9.ZERO.sqrt();
      complex10.INF.cos();
      complex10.ONE.add(0.0);
      complex4.sqrt();
      complex0.divide(1973.17426514879);
      complex1.sqrt1z();
      complex6.INF.tanh();
      complex0.abs();
      Complex complex11 = complex6.divide(0.0);
      Complex complex12 = complex6.createComplex(0.0, 131.0);
      complex3.reciprocal();
      complex8.getReal();
      complex12.conjugate();
      complex4.toString();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(4024.6214408);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex0.getImaginary();
      complex1.INF.sin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex4.subtract(complex2);
      complex5.I.getField();
      Complex complex6 = complex4.I.sqrt1z();
      complex2.ZERO.nthRoot(492);
      Complex complex7 = Complex.valueOf(0.0, 1227.6724387);
      Complex complex8 = complex7.NaN.sin();
      complex8.I.tanh();
      complex8.INF.abs();
      Complex complex9 = complex0.add(complex2);
      complex4.divide(complex8);
      Complex complex10 = complex9.tan();
      complex6.NaN.createComplex(1110.0, 0.0);
      complex10.NaN.hashCode();
      complex10.sin();
      Complex complex11 = complex10.I.tanh();
      complex11.ZERO.toString();
      complex1.readResolve();
      Complex complex12 = Complex.ONE;
      complex12.multiply(complex6);
      complex6.equals(complex12);
      Complex.valueOf((-2699.073011262741), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide((-614.3907249995));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0));
      complex1.I.sin();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.reciprocal();
      complex0.NaN.sqrt();
      complex0.equals(complex1);
      Complex complex4 = complex2.atan();
      complex4.ZERO.divide(1732.6292);
      complex4.getReal();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1650.49537302), (-1650.49537302));
      int int0 = (-482);
      Complex complex1 = Complex.I;
      complex0.NaN.add(complex1);
      try { 
        complex1.NaN.nthRoot((-1913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,913
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.multiply(275.0);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex0.INF.add(complex2);
      Complex complex6 = complex2.NaN.pow(complex4);
      Complex complex7 = complex5.ZERO.cos();
      Complex complex8 = complex7.ONE.sin();
      complex7.getField();
      Complex complex9 = complex7.INF.exp();
      Complex complex10 = complex8.acos();
      assertEquals(0.5707963267948967, complex10.getReal(), 0.01);
      
      complex9.ONE.toString();
      complex7.I.subtract(complex1);
      complex2.ZERO.hashCode();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex5.INF.subtract((-1643.12125286336));
      complex0.isInfinite();
      Complex complex13 = Complex.valueOf(6.283185307179586);
      Complex complex14 = complex12.I.cos();
      assertEquals(1.5430806348152437, complex14.getReal(), 0.01);
      
      complex0.sqrt1z();
      complex7.INF.add((-1643.12125286336));
      Complex complex15 = complex12.reciprocal();
      complex11.getField();
      complex8.getImaginary();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex16 = complex0.ZERO.asin();
      assertTrue(complex16.equals((Object)complex15));
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex13.add((-1661.877823));
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      complex13.add(1692.8197014);
      Complex complex18 = (Complex)complex17.readResolve();
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex4.add((-1.2930091396008281E-8));
      assertTrue(complex3.equals((Object)complex12));
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertSame(complex19, complex11);
      assertSame(complex19, complex6);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2559.28, 2559.28);
      Complex complex2 = Complex.NaN;
      complex0.toString();
      complex2.I.abs();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.divide(136.7329087135152);
      Complex complex5 = Complex.valueOf(136.7329087135152);
      complex4.NaN.subtract(complex0);
      Complex complex6 = complex2.subtract(complex3);
      complex4.INF.multiply((-135.4868450556899));
      Complex complex7 = complex6.multiply(0.0);
      double double0 = complex4.getImaginary();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex8 = complex3.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
      assertFalse(boolean0);
      
      Complex.valueOf(0.0);
      Complex complex9 = complex1.acos();
      assertEquals(0.785398182481668, complex9.getReal(), 0.01);
      
      complex8.sinh();
      assertSame(complex8, complex7);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.ONE.exp();
      complex0.ONE.abs();
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex2.isInfinite();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.multiply(779);
      Complex complex6 = complex2.log();
      assertEquals((-0.1262736940988987), complex6.getReal(), 0.01);
      
      complex0.multiply(complex4);
      Complex complex7 = complex3.INF.cos();
      Complex complex8 = complex7.ZERO.multiply(Double.NaN);
      Complex complex9 = complex5.exp();
      Complex complex10 = complex3.sqrt1z();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(2.5276582243117143, complex10.getImaginary(), 0.01);
      
      complex1.toString();
      complex0.sin();
      Complex complex11 = complex3.atan();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(1.2182829050172777, complex11.getReal(), 0.01);
      
      List<Complex> list0 = complex8.nthRoot(779);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex9);
      assertTrue(list0.contains(complex7));
  }
}
