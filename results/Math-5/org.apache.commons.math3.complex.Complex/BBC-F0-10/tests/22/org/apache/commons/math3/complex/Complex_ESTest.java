/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:16:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1600.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply((-1709));
      complex0.atan();
      complex1.subtract(complex2);
      complex1.multiply((-751.186047458932));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.NaN.sin();
      complex2.subtract(complex0);
      Complex complex4 = complex0.reciprocal();
      complex4.I.add(1.8279051206232177E83);
      complex4.createComplex(764.738371061388, 764.738371061388);
      Complex complex5 = complex4.multiply(2952.7556);
      Complex complex6 = complex0.ZERO.multiply(complex1);
      complex6.ONE.negate();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex7.subtract((-170489.20068983466));
      Complex complex9 = complex4.INF.negate();
      complex9.INF.pow(complex3);
      Complex complex10 = complex9.ZERO.reciprocal();
      complex10.INF.readResolve();
      Complex complex11 = Complex.valueOf(20.0);
      complex11.tanh();
      Complex complex12 = complex5.multiply(complex0);
      complex11.exp();
      complex8.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2873.91253305), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(882.4857830238947, 1088.08348714);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.sqrt();
      complex2.ZERO.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(2121.604229289805, 0.46914875507354736);
      complex2.INF.tanh();
      complex0.conjugate();
      complex3.sqrt();
      complex3.toString();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = new Complex((-1.8662399E7), Double.POSITIVE_INFINITY);
      complex1.add(Double.POSITIVE_INFINITY);
      complex0.pow((-1.8662399E7));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.787906051540986E261);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(2.787906051540986E261);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.ZERO.divide(2.787906051540986E261);
      complex1.ZERO.getArgument();
      Complex complex5 = complex4.NaN.acos();
      complex5.NaN.reciprocal();
      Complex complex6 = Complex.ZERO;
      complex6.ONE.readResolve();
      complex3.asin();
      Complex complex7 = complex1.ONE.divide(complex6);
      complex7.NaN.subtract(complex0);
      complex3.asin();
      complex3.getField();
      Complex complex8 = Complex.valueOf(2.787906051540986E261, 3.1421839887294682);
      complex8.I.readResolve();
      complex8.acos();
      Complex complex9 = complex3.reciprocal();
      complex2.log();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1508772192025259E-158), 1.5231541295722552E-16);
      Complex complex1 = complex0.sqrt1z();
      complex1.sqrt1z();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.1508772192025259E-158), Double.NaN);
      Complex complex1 = complex0.sqrt();
      complex0.sinh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2591153.5932696047, (-20.0));
      Complex complex2 = Complex.NaN;
      complex2.getField();
      Complex complex3 = complex1.add((-2345.380101643145));
      complex2.subtract(complex3);
      Complex complex4 = complex1.acos();
      complex4.NaN.multiply((-3705.6570422016));
      complex2.tan();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-584.185));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2747.7645789369, 2747.7645789369);
      Complex complex1 = complex0.multiply(2747.7645789369);
      complex1.ZERO.getField();
      Complex complex2 = complex0.multiply(complex1);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(194.7506, 194.7506);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.sinh();
      Complex complex4 = Complex.INF;
      complex0.tanh();
      complex3.acos();
      Complex complex5 = Complex.INF;
      complex1.acos();
      complex3.nthRoot(3203);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      Complex.valueOf((-191.770258921053));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(673.5881, 1.9803689272433392E-303);
      Complex complex1 = Complex.ONE;
      complex1.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(1.9803689272433392E-303);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tanh();
      complex5.acos();
      complex2.tan();
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(complex0);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1218.918216, 1218.918216);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf(-0.0, 20.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex((-376.602369427), 4.3198234936686506E-297);
      complex5.sinh();
      Complex complex6 = Complex.ONE;
      complex2.subtract(complex6);
      complex3.tanh();
      complex3.acos();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(2439.8364319999237, (-5395.7805251));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.subtract(1400.0);
      Complex complex3 = complex0.tan();
      complex1.ZERO.getField();
      Complex complex4 = complex3.ONE.pow(2439.8364319999237);
      Complex complex5 = complex0.tan();
      complex5.atan();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.exp();
      complex6.toString();
      Complex.valueOf((-237.69147));
      complex2.reciprocal();
      complex7.sqrt();
      complex4.nthRoot(587);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2448));
      complex0.tan();
      complex1.sin();
      complex0.acos();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(5804.771);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2322.69759627187), (-2322.69759627187));
      complex1.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1123.122628));
      Complex complex1 = Complex.valueOf((-1123.122628));
      Complex complex2 = complex0.sqrt1z();
      complex2.INF.acos();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.tan();
      complex4.NaN.getArgument();
      Complex.valueOf((-1123.122628));
      complex1.divide(399.61890215445817);
      Complex complex5 = complex1.asin();
      complex3.exp();
      complex5.add(complex0);
      complex2.createComplex(Double.NaN, (-1.0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2394.787110178));
      Complex complex2 = complex1.conjugate();
      complex2.pow(complex1);
      Complex complex3 = Complex.valueOf(75.83128171572, (-20.0));
      complex1.add(complex3);
      Complex complex4 = Complex.valueOf((-20.0), 565.4463575);
      complex3.hashCode();
      Complex complex5 = complex3.sinh();
      complex3.I.add(340.882);
      Complex complex6 = complex3.pow(complex0);
      complex4.subtract(complex0);
      complex3.tanh();
      complex4.asin();
      complex5.acos();
      Complex complex7 = Complex.INF;
      complex7.tan();
      complex0.readResolve();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(3543.0798489, (-129.8));
      Complex complex1 = complex0.sqrt();
      complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(0.0, 4.817491674217065E-144);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = Complex.valueOf((-129.8), (-129.8));
      complex4.hashCode();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex5.subtract(complex3);
      complex2.tanh();
      Complex complex8 = complex7.asin();
      complex8.acos();
      complex8.tan();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = Complex.valueOf((-1540.835629358));
      complex0.add(complex4);
      Complex.valueOf(9.872496107367564, (-1355.1301171));
      Complex complex5 = Complex.valueOf(1915.92309, (-1540.835629358));
      complex5.hashCode();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.subtract(complex0);
      complex0.tanh();
      complex7.asin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = Complex.ZERO;
      complex3.conjugate();
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.I.createComplex(37.0, 2455.483722);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.createComplex(448.06151049, 448.06151049);
      Complex complex7 = complex6.I.divide(complex5);
      Complex complex8 = complex6.sqrt1z();
      complex6.toString();
      complex8.NaN.sqrt();
      complex2.NaN.sqrt();
      complex8.nthRoot(37);
      complex6.getField();
      Complex complex9 = complex8.cosh();
      complex9.getField();
      complex2.abs();
      complex1.tan();
      Complex complex10 = complex3.add(2455.483722);
      complex10.ZERO.atan();
      Complex complex11 = complex10.divide((-1377.085663));
      complex11.NaN.sinh();
      complex3.cosh();
      complex6.acos();
      complex2.abs();
      complex5.multiply(720);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(3543.0798489);
      Complex complex1 = Complex.I;
      complex1.multiply((-156));
      complex0.log();
      complex1.subtract((-0.07117385852182823));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.pow(576.04979597232);
      complex2.multiply((double) (-156));
      complex5.exp();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.cosh();
      complex4.I.pow(complex1);
      complex3.sqrt1z();
      complex2.pow(complex1);
      Complex complex5 = Complex.NaN;
      complex5.cos();
      Complex complex6 = complex5.negate();
      complex1.nthRoot(1246);
      Complex complex7 = Complex.NaN;
      complex2.reciprocal();
      Complex.valueOf(2.0, 2889.295218);
      Complex complex8 = new Complex(1.3017595857967525, 1.4394452571868896);
      Complex complex9 = complex8.log();
      complex6.negate();
      Complex complex10 = Complex.NaN;
      complex9.add(77.0823957968);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.asin();
      complex0.nthRoot(727);
      Complex complex4 = complex2.NaN.asin();
      complex3.equals(complex2);
      Complex complex5 = complex0.sqrt();
      complex4.getArgument();
      complex2.readResolve();
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      Complex complex7 = new Complex(1.0, 0.48430514335632324);
      complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex0.nthRoot(727);
      complex2.NaN.asin();
      complex2.equals(complex2);
      complex2.abs();
      complex2.readResolve();
      Complex complex3 = Complex.ONE;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      complex0.conjugate();
      complex2.getArgument();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.ONE;
      complex4.sqrt();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.readResolve();
      complex3.tan();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(3543.0798489);
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.nthRoot(37);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.atan();
      complex2.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, 3543.0798489);
      complex1.multiply(0.001069520739690688);
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex5.sinh();
      complex7.add(0.001069520739690688);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.createComplex((-164460.98624270887), 783.186220556);
      complex2.asin();
      complex4.pow(1997.044732);
      complex4.log();
      complex10.acos();
      complex6.divide(complex5);
      complex10.divide(2.0);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sinh();
      complex3.cosh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.sqrt1z();
      complex4.pow(complex3);
      Complex complex6 = complex2.cos();
      complex5.negate();
      complex4.nthRoot(307);
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.NaN;
      complex8.reciprocal();
      Complex.valueOf(0.19999998807907104, 0.19999998807907104);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 0.19999998807907104);
      Complex complex10 = Complex.ZERO;
      complex10.log();
      complex6.negate();
      Complex complex11 = Complex.ZERO;
      complex0.add(0.052736069308590316);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.3172978393945274;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.multiply(complex0);
      Complex complex2 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.pow(complex2);
      complex4.cos();
      Complex complex5 = complex1.negate();
      complex5.nthRoot(1939);
      Complex complex6 = Complex.NaN;
      complex6.negate();
      complex6.reciprocal();
      Complex complex7 = Complex.valueOf((double) 37, (-405.5391303471329));
      complex5.log();
      complex3.negate();
      Complex complex8 = new Complex((-405.5391303471329), 5.5737717715868425E-8);
      complex8.cos();
      Complex complex9 = complex7.sqrt();
      complex9.toString();
      complex8.sqrt1z();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sinh();
      complex0.cosh();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.INF;
      complex4.sqrt1z();
      complex0.pow(complex3);
      complex4.cos();
      Complex complex5 = complex3.negate();
      complex2.nthRoot(37);
      complex4.negate();
      complex2.reciprocal();
      Complex complex6 = Complex.valueOf(2.0, 2037.021639206472);
      complex6.log();
      complex2.negate();
      complex0.cos();
      complex6.sqrt();
      complex4.toString();
      complex5.sqrt1z();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.sinh();
      complex4.tan();
      Complex complex6 = new Complex(2.0, (-1.0));
      Complex complex7 = complex2.multiply(1);
      Complex complex8 = Complex.valueOf((-1536.859), (double) 1);
      complex6.add(complex4);
      Complex complex9 = complex8.reciprocal();
      complex5.abs();
      complex9.conjugate();
      complex6.tanh();
      Complex complex10 = Complex.NaN;
      complex4.sqrt();
      Complex complex11 = Complex.ZERO;
      complex11.getArgument();
      complex7.readResolve();
      Complex complex12 = new Complex(1, (-1536.859));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      complex0.add(Double.NaN);
      complex0.multiply(2636.439416482);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2.6033812325397097E-8), 1.2553413815681245E7);
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.divide(Double.NaN);
      Complex complex3 = complex0.cos();
      complex1.ZERO.exp();
      complex3.NaN.conjugate();
      complex2.tanh();
      complex2.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.sinh();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.I.pow(complex1);
      complex4.I.sqrt1z();
      Complex complex5 = complex0.pow(complex3);
      complex2.cos();
      Complex complex6 = Complex.I;
      complex6.negate();
      complex3.nthRoot(371);
      Complex complex7 = Complex.NaN;
      complex6.reciprocal();
      Complex.valueOf(0.8337300251311491, 2.0);
      Complex complex8 = complex2.log();
      Complex complex9 = complex5.negate();
      complex9.NaN.createComplex(923.8552196, 2.6283294650465554E-67);
      Complex complex10 = complex0.cos();
      complex8.sqrt();
      complex10.toString();
      Complex complex11 = Complex.I;
      complex0.tanh();
      Complex.valueOf((-1309.0), 8.163307795503792);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex5.I.sqrt1z();
      complex6.ZERO.pow(complex1);
      Complex complex7 = complex2.cos();
      complex1.ONE.negate();
      complex0.nthRoot(37);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex7.reciprocal();
      Complex.valueOf(2.0, 2.0);
      Complex complex10 = new Complex(1.4394452571868896, 0.052736069308590316);
      complex10.log();
      complex6.negate();
      complex3.cos();
      Complex complex11 = complex5.sqrt();
      complex11.toString();
      Complex complex12 = Complex.I;
      complex9.tanh();
      Complex.valueOf((-1897.977968), 113.017518);
      complex4.createComplex(2.0, (-20.0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex4.I.sqrt1z();
      complex5.ZERO.pow(complex0);
      complex1.cos();
      complex0.ONE.negate();
      complex0.nthRoot(37);
      Complex complex6 = Complex.NaN;
      complex4.reciprocal();
      Complex complex7 = Complex.valueOf((-20.0), (-20.0));
      complex0.log();
      complex7.negate();
      complex2.cos();
      complex5.sqrt();
      Complex complex8 = Complex.ONE;
      complex8.toString();
      Complex complex9 = Complex.I;
      complex7.tanh();
      Complex.valueOf((-3149.64804972662), 2.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.I;
      complex0.ONE.sqrt1z();
      complex0.INF.getField();
      complex0.ZERO.sqrt1z();
      complex1.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.subtract(complex2);
      complex4.acos();
      Complex complex5 = complex1.negate();
      complex5.exp();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex5.I.sqrt1z();
      complex6.ZERO.pow(complex1);
      complex2.cos();
      Complex complex7 = complex1.ONE.negate();
      complex0.nthRoot(37);
      Complex complex8 = Complex.NaN;
      complex8.reciprocal();
      Complex complex9 = complex1.log();
      Complex complex10 = complex8.negate();
      complex7.cos();
      complex3.sqrt();
      Complex complex11 = Complex.I;
      complex9.tanh();
      Complex.valueOf(113.017518, (-371.4799517881839));
      complex10.divide(complex6);
      complex11.multiply(37);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(3543.0798489);
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.nthRoot(37);
      complex0.ONE.sin();
      complex0.INF.nthRoot(747);
      complex0.isInfinite();
      Object object0 = complex0.readResolve();
      object0.equals("");
      complex1.sqrt1z();
      complex1.hashCode();
      complex0.nthRoot(1170);
      Complex complex2 = Complex.valueOf((-340.049325504669), (double) 1170);
      complex2.pow(557.0);
      complex1.createComplex(0.0, (-1667.699244851403));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex5.I.sqrt1z();
      complex6.ZERO.pow(complex1);
      complex2.cos();
      Complex complex7 = complex1.ONE.negate();
      complex0.nthRoot(37);
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf(2.0, 2.0);
      complex10.log();
      complex8.negate();
      complex7.cos();
      complex3.sqrt();
      complex8.sqrt();
      complex1.getArgument();
      Complex complex11 = new Complex(0.8414709848078965);
      complex11.readResolve();
      Complex complex12 = new Complex(1909.84972629, 1909.84972629);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1114.6, 1114.6);
      Complex complex2 = complex1.ONE.multiply(1.557407724654902);
      Complex complex3 = complex1.multiply(1709);
      Complex complex4 = complex1.NaN.add(complex0);
      complex4.ONE.abs();
      complex4.NaN.sinh();
      Complex complex5 = complex3.NaN.add(6.841502859109196E-241);
      Complex complex6 = complex3.ONE.createComplex(1.557407724654902, (-307.06729085));
      Complex complex7 = complex1.divide(1.557407724654902);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex0.multiply(complex1);
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex10.negate();
      Complex complex13 = complex9.ONE.subtract((-307.06729085));
      complex2.toString();
      Complex complex14 = complex9.tanh();
      Complex complex15 = complex14.divide(complex2);
      complex1.sqrt();
      complex8.getField();
      complex11.toString();
      complex5.getField();
      complex4.cosh();
      complex12.add(complex13);
      Complex complex16 = complex15.divide((-20.0));
      complex16.INF.conjugate();
      complex6.multiply(complex12);
      Complex.valueOf((-1.1368933260611668E-7));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2838888809969377E-8), 5138.0784352);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex0.toString();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.INF.createComplex(5138.0784352, 5138.0784352);
      complex4.INF.subtract(complex2);
      Complex complex5 = complex3.acos();
      complex5.INF.exp();
      Complex complex6 = complex4.pow((-1219.2));
      complex4.multiply(complex0);
      Complex complex7 = complex5.log();
      complex6.getField();
      complex6.INF.multiply(724);
      complex4.I.hashCode();
      Complex complex8 = complex7.ZERO.pow(complex1);
      complex8.ZERO.multiply(complex1);
      Complex complex9 = complex1.pow(complex6);
      complex9.NaN.getArgument();
      Complex complex10 = complex9.ZERO.pow(complex7);
      complex10.negate();
      Complex complex11 = complex10.multiply(704);
      complex11.add(Double.NaN);
      complex10.ZERO.toString();
      complex5.add((-1219.2));
      Complex complex12 = complex0.cos();
      complex12.ZERO.hashCode();
      complex2.atan();
      complex7.tan();
      Complex complex13 = complex3.divide(complex1);
      Complex complex14 = Complex.ZERO;
      complex13.I.pow(complex14);
      complex4.divide(complex7);
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.divide(complex1);
      complex0.pow(complex1);
      Complex complex3 = complex1.negate();
      complex3.NaN.createComplex(1.987228872666507E-7, 1.987228872666507E-7);
      complex3.INF.atan();
      complex1.log();
      complex3.acos();
      complex3.getReal();
      complex3.reciprocal();
      Complex.valueOf(0.2116905537407856, 0.2116905537407856);
      try { 
        complex0.nthRoot((-232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -232
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(3543.0798489);
      Complex complex1 = complex0.tanh();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(11.734702503577001);
      complex0.nthRoot(3540);
      Complex complex2 = complex0.sin();
      complex1.nthRoot(1036);
      complex0.isInfinite();
      complex2.readResolve();
      complex0.equals((Object) null);
      complex0.ONE.abs();
      complex0.sqrt1z();
      complex2.hashCode();
      int int0 = (-3732);
      // Undeclared exception!
      complex2.nthRoot(747);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.sqrt1z();
      complex2.pow(complex5);
      Complex complex9 = complex3.cos();
      complex1.negate();
      complex0.nthRoot(37);
      complex8.negate();
      complex9.reciprocal();
      Complex.valueOf((double) 37, (-1886.0));
      complex4.log();
      complex2.negate();
      Complex complex10 = complex0.cos();
      complex6.sqrt();
      complex10.toString();
      Complex complex11 = Complex.ONE;
      complex11.sqrt1z();
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex1.cosh();
      complex1.multiply(complex5);
      Complex complex6 = new Complex(2.0);
      complex6.multiply(1380.71139901);
      Object object0 = new Object();
      complex4.equals(object0);
      complex6.getImaginary();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(3543.0798489);
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.nthRoot(37);
      complex1.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.asin();
      complex0.readResolve();
      complex4.abs();
      complex0.acos();
      Complex complex6 = Complex.valueOf((-244.0331359715574), 3543.0798489);
      Complex complex7 = complex2.asin();
      Complex complex8 = Complex.valueOf(0.0, (-4140.68110617033));
      complex6.subtract(complex8);
      complex6.sinh();
      complex3.acos();
      complex5.hashCode();
      Complex complex9 = complex8.multiply(complex0);
      complex8.negate();
      Complex complex10 = complex9.exp();
      complex10.sqrt();
      complex7.abs();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.asin();
      complex2.NaN.multiply(complex1);
      Complex complex3 = complex2.ONE.exp();
      complex3.add(54.187647);
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex4.INF.multiply(complex1);
      complex0.ONE.pow(complex1);
      complex0.INF.toString();
      Complex complex6 = complex0.asin();
      complex5.ZERO.tan();
      complex0.ONE.tanh();
      complex6.isInfinite();
      complex6.sin();
      complex5.divide((-1044.322));
      complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(274.407036);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.add(complex2);
      complex0.toString();
      Complex complex4 = complex2.reciprocal();
      complex3.NaN.subtract(2.829168201470791E294);
      complex1.cosh();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.add(5.014010481958507E150);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.conjugate();
      complex4.ONE.multiply((-30));
      Complex complex5 = complex2.ZERO.multiply(6.283185307179586);
      Complex complex6 = complex5.ONE.asin();
      complex1.I.readResolve();
      Complex complex7 = complex1.add(complex0);
      complex0.isNaN();
      Complex complex8 = complex1.subtract(864.7565504171804);
      complex7.toString();
      Complex complex9 = complex4.multiply(5025);
      complex9.ZERO.getArgument();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex10.I.acos();
      complex12.INF.sin();
      Complex complex13 = complex6.INF.asin();
      Complex complex14 = complex8.reciprocal();
      complex14.ONE.reciprocal();
      Complex complex15 = complex6.sinh();
      Complex complex16 = Complex.NaN;
      Complex complex17 = complex4.pow(complex16);
      complex17.add(0.0);
      complex13.subtract(complex0);
      complex15.getImaginary();
      complex1.sqrt();
      complex11.subtract((double) (-30));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4677834510803223);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.cosh();
      complex2.NaN.abs();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      complex1.ONE.sin();
      Complex complex4 = complex0.multiply((-4188.584150033891));
      Complex complex5 = complex4.NaN.multiply(1);
      complex4.INF.getArgument();
      Complex complex6 = complex4.pow(0.0);
      Complex complex7 = complex6.pow(798.80494576894);
      Complex complex8 = complex5.cosh();
      complex8.INF.conjugate();
      complex7.sin();
      complex7.nthRoot(1);
      complex6.INF.asin();
      Complex complex9 = complex3.conjugate();
      complex9.INF.createComplex((-458.0716), Double.POSITIVE_INFINITY);
      complex4.sin();
      complex0.ONE.multiply((-2297.5545));
      complex5.exp();
      complex6.getArgument();
      complex9.asin();
      complex1.log();
      complex5.divide(0.7853981633974483);
      Complex complex10 = complex6.exp();
      complex10.I.pow(Double.POSITIVE_INFINITY);
      complex7.sin();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-20.0));
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex0.tan();
      complex4.hashCode();
      Complex.valueOf((-20.0), 0.0);
      Complex complex5 = complex4.INF.subtract((-20.0));
      Complex complex6 = complex4.NaN.cosh();
      complex4.multiply(2484.868);
      complex1.abs();
      Complex complex7 = complex4.INF.divide(365.3012538675);
      complex7.ZERO.tanh();
      Complex complex8 = complex3.NaN.multiply(572);
      Complex complex9 = complex6.multiply(572);
      Complex complex10 = complex9.ONE.sqrt();
      Complex complex11 = complex3.log();
      Complex complex12 = complex3.atan();
      complex12.ONE.exp();
      complex9.add(complex11);
      Complex complex13 = complex5.sqrt1z();
      complex13.ZERO.readResolve();
      Complex complex14 = complex10.createComplex(0.0, 572);
      complex14.ONE.readResolve();
      complex14.divide(complex8);
      complex2.add(complex1);
      Complex complex15 = complex6.acos();
      complex9.multiply(complex0);
      complex11.hashCode();
      complex15.asin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, (-3363.416794));
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.toString();
      Complex complex3 = complex2.NaN.divide(0.0);
      complex3.INF.add((-963.538));
      Complex.valueOf(0.0, (-3363.416794));
      complex2.NaN.toString();
      complex3.NaN.divide((-2158.7116564972043));
      complex2.toString();
      complex2.toString();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = new Complex((-244.0331359715574), 0.0);
      Complex complex3 = complex2.ONE.divide((-244.0331359715574));
      complex2.divide(complex1);
      Complex complex4 = complex0.divide(complex2);
      complex1.add(complex3);
      complex1.ZERO.hashCode();
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex3.sinh();
      complex6.NaN.getField();
      complex3.equals(complex1);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex3.INF.pow(complex5);
      complex1.toString();
      Complex complex9 = complex0.createComplex(1.996521234512329, (-1800.2796));
      complex3.negate();
      Complex complex10 = complex1.ZERO.sin();
      complex10.sqrt1z();
      complex6.subtract((-1800.2796));
      Complex complex11 = complex7.multiply(1.996521234512329);
      Complex complex12 = Complex.ZERO;
      complex7.I.add(complex12);
      complex9.add(0.0);
      complex8.sqrt1z();
      complex11.atan();
      complex3.readResolve();
      complex5.subtract((-1304.712166));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = 3543.0798489;
      Complex complex0 = new Complex(3543.0798489);
      double double1 = 0.0;
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.nthRoot(37);
      Complex complex2 = complex0.ONE.sin();
      complex0.INF.nthRoot(747);
      complex0.isInfinite();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex2.ONE.sqrt1z();
      complex0.hashCode();
      try { 
        complex2.nthRoot((-3732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,732
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.ONE.sqrt();
      Complex complex3 = complex0.multiply((-1196));
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.sin();
      complex5.INF.getField();
      Complex complex6 = complex0.ONE.tanh();
      Complex complex7 = complex5.ONE.divide((double) (-1196));
      complex5.I.toString();
      complex2.ZERO.divide(complex0);
      Complex complex8 = complex1.NaN.multiply((double) (-1196));
      Complex complex9 = complex0.sqrt();
      complex2.getImaginary();
      complex2.asin();
      complex0.exp();
      complex9.multiply((double) (-1196));
      complex7.asin();
      Complex complex10 = complex8.sqrt();
      complex10.ZERO.cos();
      complex10.hashCode();
      complex4.pow((double) (-1196));
      complex4.getImaginary();
      complex2.abs();
      complex5.abs();
      complex6.getReal();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.multiply(0.0);
      Complex complex1 = complex0.negate();
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf(0.0);
      complex1.log();
      Complex complex3 = complex2.multiply((-1150.419603193047));
      complex3.ONE.tan();
      complex1.reciprocal();
      Complex complex4 = complex3.exp();
      complex4.ONE.sinh();
      Complex complex5 = complex2.add(1302.374);
      complex1.ONE.subtract((-1150.419603193047));
      Complex complex6 = complex5.INF.tanh();
      complex6.ONE.getArgument();
      int int0 = 0;
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.pow(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.ZERO.subtract(6.283185307179586);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.pow(complex4);
      complex6.nthRoot(7);
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = complex7.add(148.0188889874);
      complex8.toString();
      Complex complex9 = complex4.I.createComplex(148.0188889874, (-2587.430092556407));
      Complex complex10 = complex1.ONE.subtract(complex7);
      complex10.NaN.getField();
      complex5.divide(0.0);
      complex4.toString();
      complex4.asin();
      complex4.isInfinite();
      Complex complex11 = Complex.valueOf(0.0);
      complex11.INF.pow(complex8);
      complex10.getArgument();
      complex11.conjugate();
      complex9.divide(0.0);
      complex2.subtract(0.0);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-2608.2510488825), (-3292.47));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.INF.pow((-2608.2510488825));
      complex0.pow(complex1);
      complex3.conjugate();
      complex2.add((-3292.47));
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(737.61845154797);
      complex0.INF.multiply(737.61845154797);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(18.5826, 2738.4832273349684);
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.exp();
      complex0.ZERO.divide(18.5826);
      complex0.toString();
      Complex complex6 = complex1.conjugate();
      complex6.NaN.multiply(1);
      Complex complex7 = complex0.cosh();
      complex7.nthRoot(434);
      complex0.reciprocal();
      complex3.conjugate();
      complex5.sinh();
      complex2.cos();
      complex3.atan();
      complex2.sinh();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.toString();
      complex0.sin();
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.ZERO.log();
      complex1.ONE.sqrt1z();
      complex1.INF.getField();
      Complex complex3 = complex0.pow(complex1);
      complex3.add(0.0);
      complex3.I.getArgument();
      Complex complex4 = complex3.I.multiply(complex2);
      complex1.ZERO.sqrt1z();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.NaN.asin();
      complex0.readResolve();
      complex2.abs();
      Complex complex7 = complex1.acos();
      Complex.valueOf(1.5707963267948966, 0.0);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex2.subtract(complex7);
      Complex complex10 = complex6.sinh();
      complex9.acos();
      complex6.hashCode();
      Complex complex11 = complex10.multiply(complex4);
      Complex complex12 = complex2.negate();
      complex12.exp();
      Complex complex13 = complex11.sqrt();
      complex13.I.abs();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2710.953116, 6.390098458668406E-8);
      Complex complex1 = complex0.ZERO.cosh();
      complex0.I.getArgument();
      Complex complex2 = complex0.sqrt1z();
      complex2.INF.getArgument();
      complex2.abs();
      Complex complex3 = complex0.add(complex2);
      complex3.multiply(6.390098458668406E-8);
      Complex complex4 = complex2.createComplex(213.895039013862, 2710.953116);
      complex4.INF.acos();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex1.subtract(complex3);
      complex1.I.abs();
      complex6.ZERO.hashCode();
      Complex complex7 = complex6.add(1.5707963267948966);
      complex7.sinh();
      Complex complex8 = complex0.exp();
      complex8.ONE.reciprocal();
      complex7.divide(complex6);
      Complex complex9 = complex4.sinh();
      Object object0 = complex3.readResolve();
      complex7.equals(object0);
      complex9.sqrt();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.exp();
      complex1.ONE.tanh();
      complex1.ZERO.subtract(complex0);
      complex0.I.pow(Double.NaN);
      Complex complex2 = Complex.valueOf(3446.524);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex3.NaN.reciprocal();
      complex4.I.pow(3446.524);
      complex0.subtract((-3230.0));
      complex0.createComplex(0.0, 0.0);
      Complex.valueOf(1346.0);
      complex2.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf(1346.0, (-3230.0));
      complex5.ZERO.sinh();
      complex2.multiply(3446.524);
      complex1.add((-497.099691015379));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.negate();
      complex1.NaN.getField();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex0.sinh();
      complex3.tan();
      complex0.ONE.asin();
      Complex complex5 = complex4.ZERO.sin();
      complex1.I.cos();
      complex2.INF.multiply(complex4);
      complex5.INF.pow(complex4);
      Complex complex6 = complex3.sinh();
      complex5.INF.getArgument();
      complex1.pow(complex4);
      complex4.I.atan();
      complex0.tanh();
      try { 
        complex6.nthRoot((-4209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,209
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.INF.subtract(0.0);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.createComplex(0.0, 1);
      complex1.INF.getArgument();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.add((-1.0));
      Complex complex6 = complex3.NaN.divide(0.0);
      complex6.ONE.sqrt();
      Complex complex7 = complex5.ONE.sin();
      complex5.NaN.nthRoot(1);
      complex3.isNaN();
      complex5.toString();
      complex2.conjugate();
      complex7.hashCode();
      complex4.multiply(complex5);
      complex2.divide(2.426795414605756E-8);
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.createComplex(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex1.ONE.abs();
      complex1.NaN.conjugate();
      complex1.ONE.tanh();
      Complex complex2 = complex1.sqrt();
      complex2.getArgument();
      complex0.readResolve();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.exp();
      complex1.INF.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex2.multiply(1);
      complex1.negate();
      complex2.add(complex4);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.ZERO.createComplex(1, (-20.0));
      Complex complex6 = complex4.reciprocal();
      complex3.ONE.exp();
      complex6.ZERO.asin();
      complex4.INF.pow(Double.NaN);
      Complex complex7 = Complex.valueOf((double) 1, Double.NaN);
      complex6.NaN.multiply((double) 1);
      complex7.I.nthRoot(1);
      Complex complex8 = complex6.subtract(complex4);
      Complex complex9 = complex8.acos();
      complex0.abs();
      complex1.sin();
      complex2.readResolve();
      Complex.valueOf((double) 1);
      complex3.toString();
      complex7.sqrt1z();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex5.I.sqrt1z();
      complex6.ZERO.pow(complex1);
      Complex complex7 = complex2.cos();
      Complex complex8 = complex1.ONE.negate();
      complex0.nthRoot(37);
      Complex complex9 = complex0.negate();
      complex9.reciprocal();
      Complex complex10 = Complex.valueOf(2.0, 2.0);
      Complex complex11 = complex10.log();
      complex9.negate();
      complex8.cos();
      complex3.sqrt();
      complex10.toString();
      complex11.sqrt1z();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = 2206.8758420664;
      Complex complex0 = new Complex(2206.8758420664);
      complex0.ZERO.multiply((-1266));
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(0.0);
      complex1.ONE.log();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = Complex.INF;
      complex4.INF.pow(0.0);
      Complex complex5 = complex3.I.add(complex4);
      complex5.INF.atan();
      Complex complex6 = complex2.subtract((-1.0));
      complex6.ZERO.hashCode();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.log();
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.I.sqrt();
      complex3.ONE.sqrt1z();
      complex0.getArgument();
      Complex complex5 = complex3.multiply(complex0);
      complex5.ZERO.getArgument();
      complex0.ONE.log();
      complex5.ONE.createComplex((-1793.0), 0.0);
      complex5.createComplex(0.0, 0.0);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(1.0);
      complex1.atan();
      Complex complex3 = complex2.NaN.exp();
      Complex.valueOf(2360.9637798, 2360.9637798);
      complex0.ONE.readResolve();
      Complex complex4 = complex1.ZERO.createComplex(256.0, (-343.30511975296));
      complex3.ZERO.getField();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.ONE.atan();
      complex0.isNaN();
      Complex complex7 = complex0.createComplex(256.0, (-455.852854931665));
      Complex complex8 = complex3.ZERO.reciprocal();
      complex8.NaN.log();
      Complex complex9 = complex0.ZERO.add(complex3);
      complex9.I.sin();
      complex9.ZERO.toString();
      complex3.toString();
      Complex complex10 = complex0.sin();
      complex3.equals(complex4);
      Complex complex11 = complex7.add(complex0);
      complex1.readResolve();
      complex6.ZERO.sinh();
      complex5.cosh();
      complex11.conjugate();
      complex10.subtract(2360.9637798);
      try { 
        complex3.nthRoot((-2663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,663
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      complex0.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.negate();
      complex1.divide(1.0);
      complex3.reciprocal();
      Complex.valueOf((-993.8981631376), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.tanh();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      complex1.tanh();
      complex0.I.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.sin();
      complex1.ONE.cos();
      complex3.NaN.subtract(52.93231);
      complex2.readResolve();
      complex1.pow(1130.784349410628);
      Complex.valueOf(52.93231);
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex1.multiply(complex0);
      complex1.add((-2186.80612));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1208.37532, 1293.9187661275);
      Complex complex1 = complex0.ONE.acos();
      try { 
        complex1.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-1911.281971972659));
      Complex complex2 = complex0.ONE.divide(0.0);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.INF.log();
      complex4.NaN.cosh();
      Complex complex5 = complex0.cosh();
      complex5.NaN.tan();
      complex5.ZERO.getArgument();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.ZERO.asin();
      complex3.pow(complex2);
      Complex complex4 = complex1.cosh();
      complex0.INF.multiply(complex2);
      complex0.multiply(1380.71139901);
      complex4.equals(complex0);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex1.ONE.negate();
      Complex complex2 = complex0.ONE.tanh();
      complex2.multiply(0.3817485570907593);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.ONE.log();
      complex3.INF.pow(complex0);
      Complex complex5 = complex1.INF.divide(complex2);
      complex5.sqrt();
      Complex complex6 = complex0.sqrt1z();
      complex6.NaN.multiply(complex1);
      Complex complex7 = Complex.INF;
      complex7.INF.getArgument();
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex10.acos();
      complex11.INF.exp();
      Complex complex12 = Complex.valueOf(0.0, 0.5865923166275024);
      Complex complex13 = complex8.add(complex9);
      complex13.I.multiply(complex4);
      complex8.readResolve();
      Complex complex14 = complex7.sqrt();
      Complex.valueOf(0.7853981633974483);
      complex12.ZERO.sin();
      Complex.valueOf((-20.0), (-574.754));
      complex14.nthRoot(1581);
      complex14.multiply(complex12);
      complex0.tanh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2045.1), (-2045.1));
      Complex complex1 = complex0.ZERO.subtract((-3223.882));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.divide(complex2);
      complex0.INF.sinh();
      Complex complex5 = complex4.sin();
      complex5.ZERO.divide(Double.NaN);
      Complex complex6 = complex4.I.asin();
      complex3.divide(complex2);
      Complex complex7 = complex4.INF.createComplex(1.3093504905700684, 0.0);
      complex7.I.pow(complex6);
      Complex complex8 = complex4.multiply((-1.0));
      Complex complex9 = complex8.add(2553.5658474);
      complex9.pow(2772.84);
      complex4.getImaginary();
      complex3.sin();
      Complex complex10 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.valueOf(713.8);
      complex6.divide(complex11);
      complex0.getImaginary();
      complex1.cos();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.getArgument();
      complex0.getField();
      complex0.ONE.sinh();
      Complex complex1 = complex0.multiply((-840));
      Complex complex2 = complex1.I.cosh();
      complex2.INF.exp();
      Complex complex3 = complex1.ZERO.sinh();
      complex0.isInfinite();
      complex3.asin();
      Complex complex4 = complex2.INF.pow((double) (-840));
      complex0.getImaginary();
      complex2.sinh();
      complex1.pow(Double.POSITIVE_INFINITY);
      complex1.INF.negate();
      Complex complex5 = complex1.cos();
      complex5.equals(complex2);
      complex1.asin();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1910.18977, 1910.18977);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.NaN.atan();
      complex1.NaN.acos();
      complex0.pow(Double.NaN);
      complex1.hashCode();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.cos();
      complex4.pow(Double.NaN);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.add(complex4);
      complex0.toString();
      complex6.I.getField();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex1.multiply((-937.7914671294321));
      Complex complex11 = complex6.log();
      assertSame(complex11, complex8);
      
      Complex complex12 = complex9.ZERO.pow(complex2);
      Complex complex13 = complex7.conjugate();
      Complex complex14 = complex9.sqrt1z();
      assertEquals((-1.0446844714580747), complex14.getImaginary(), 0.01);
      assertEquals(0.016977207437508968, complex14.getReal(), 0.01);
      
      complex12.cosh();
      Complex complex15 = complex4.createComplex(2655.0667065, (-514.295));
      Complex complex16 = complex10.I.sqrt1z();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      complex15.NaN.conjugate();
      Complex complex17 = complex10.negate();
      assertSame(complex17, complex13);
      
      complex12.multiply(1910.18977);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex18 = complex3.sqrt();
      Complex complex19 = complex18.tanh();
      assertNotSame(complex19, complex12);
  }
}
