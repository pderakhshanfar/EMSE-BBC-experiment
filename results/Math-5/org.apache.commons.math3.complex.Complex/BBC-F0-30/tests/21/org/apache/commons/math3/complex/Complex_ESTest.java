/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:14:08 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1419.4, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(307.9215635693124, 307.9215635693124);
      Complex complex1 = complex0.subtract(667.0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.tanh();
      complex2.sqrt1z();
      Complex complex4 = new Complex(307.9215635693124);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex1.pow(6.283185307179586);
      complex1.multiply(201);
      complex5.pow(complex4);
      complex4.tanh();
      complex0.multiply(201);
      complex3.asin();
      Complex complex7 = complex6.tan();
      complex5.acos();
      complex7.divide(358.578939717445);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.readResolve();
      complex1.reciprocal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.createComplex(5.2240336371356666E-9, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.multiply(complex4);
      complex4.pow((-723.9));
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(1492.34272119);
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.ZERO.multiply(642.126);
      Complex complex4 = complex1.ONE.exp();
      complex4.I.sin();
      Complex complex5 = complex0.INF.subtract(1.4674011002723395);
      Complex complex6 = complex5.INF.atan();
      complex6.sinh();
      Complex complex7 = Complex.valueOf(15.7967313047, 15.7967313047);
      complex1.add(complex0);
      Complex complex8 = complex0.multiply(1492.34272119);
      Complex complex9 = complex8.INF.negate();
      complex1.cosh();
      Complex complex10 = complex3.exp();
      complex10.NaN.sin();
      complex10.ONE.pow(complex7);
      Complex complex11 = Complex.valueOf(1.4674011002723395);
      Complex complex12 = complex9.pow(complex11);
      complex12.NaN.acos();
      double double0 = 2173.565521409043;
      complex0.createComplex(2173.565521409043, 1973.085);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.add(Double.NaN);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex1.getField();
      complex0.isNaN();
      Complex complex2 = new Complex((-20.0), (-20.0));
      complex1.sqrt1z();
      Complex complex3 = Complex.NaN;
      complex3.divide((-20.0));
      Complex complex4 = Complex.valueOf((-20.0));
      complex4.tanh();
      complex2.log();
      complex4.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.isNaN();
      Complex complex1 = Complex.valueOf(3976.19993);
      complex1.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = new Complex(20.0, 20.0);
      complex0.subtract(40400.0);
      Complex complex4 = complex1.sqrt1z();
      complex3.tanh();
      Complex complex5 = complex2.createComplex(20.0, (-1.0));
      Complex complex6 = complex0.cosh();
      complex3.pow(20.0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.pow(complex5);
      complex4.tanh();
      complex8.log();
      Complex.valueOf((-1.0), (-1.0));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1427.1453, 1435.04247065978);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex.valueOf(718.684848, (-313.1159));
      complex3.NaN.add(3.4994953877452E-8);
      complex2.INF.toString();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex4.reciprocal();
      complex2.divide(complex5);
      Complex complex7 = complex1.multiply(1.000900703278524);
      Complex complex8 = complex7.ZERO.subtract(complex3);
      complex3.log();
      complex7.reciprocal();
      complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      Complex complex4 = Complex.ONE;
      complex3.getField();
      complex0.isInfinite();
      Complex complex5 = (Complex)complex2.readResolve();
      complex3.reciprocal();
      Complex complex6 = complex2.cos();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex2.tanh();
      complex9.INF.tan();
      complex9.I.multiply(complex2);
      Complex complex10 = complex8.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = complex5.cosh();
      complex4.readResolve();
      Complex complex12 = complex7.negate();
      complex10.getField();
      complex6.tanh();
      complex0.exp();
      complex10.divide(1369.548323);
      complex11.tan();
      complex12.atan();
      complex10.multiply((-0.6905817003766439));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.divide(1.828536033630371);
      Complex complex3 = complex2.NaN.pow(1.828536033630371);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex.valueOf(1.828536033630371, 4.3791842770430786E-218);
      Complex complex5 = complex3.I.multiply(complex1);
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex6.createComplex(1.828536033630371, (-3491.1025818026233));
      complex3.cosh();
      complex5.pow(2984.581256056);
      complex0.multiply(201);
      Complex complex8 = complex2.pow(complex7);
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex5.multiply((-2145700587));
      complex10.asin();
      complex9.tan();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex2.multiply(complex1);
      complex2.asin();
      Complex complex5 = complex3.conjugate();
      complex5.sqrt1z();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex4.exp();
      Complex.valueOf((-1443.37766));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1663.10068, 1663.10068);
      Complex complex1 = Complex.valueOf(64.01, 1663.10068);
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.ONE.divide(0.0);
      Complex complex3 = complex1.NaN.exp();
      complex2.ZERO.multiply(2013.37);
      complex3.hashCode();
      Complex complex4 = complex0.divide(1663.10068);
      complex4.pow(1663.10068);
      complex0.add(complex2);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.I.divide(1.828536033630371);
      Complex complex2 = complex1.multiply((-20.0));
      Complex complex3 = complex1.reciprocal();
      complex3.add(complex2);
      complex1.multiply((-613));
      Complex complex4 = Complex.NaN;
      complex4.isInfinite();
      complex2.tan();
      Complex complex5 = Complex.INF;
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      Complex complex4 = Complex.ONE;
      complex3.getField();
      complex0.isInfinite();
      Complex complex5 = (Complex)complex2.readResolve();
      complex3.reciprocal();
      complex2.cos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex5.cosh();
      complex6.I.pow(1369.548323);
      complex9.I.pow(complex8);
      complex6.tanh();
      complex0.multiply(17);
      complex8.multiply(17);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex0.ONE.tan();
      complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex2 = Complex.ONE;
      complex1.toString();
      Complex complex3 = Complex.ONE;
      complex2.getField();
      complex0.isInfinite();
      complex0.isNaN();
      complex3.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(5.2240336371356666E-9);
      Complex complex4 = new Complex(5.2240336371356666E-9, Double.POSITIVE_INFINITY);
      complex4.multiply(complex2);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      complex3.getField();
      complex0.isInfinite();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex1.tanh();
      double double0 = 2.0;
      Complex complex6 = complex4.createComplex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.pow((-1515.996981843));
      complex6.multiply(201);
      complex8.asin();
      Complex complex10 = Complex.INF;
      complex10.pow(complex6);
      complex5.tanh();
      Complex complex11 = Complex.INF;
      complex11.multiply(201);
      complex10.asin();
      complex0.isInfinite();
      Complex complex12 = complex7.tan();
      complex9.acos();
      complex12.hashCode();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-656.92414845246));
      Complex complex1 = Complex.valueOf((-656.92414845246), (-656.92414845246));
      Complex complex2 = complex0.createComplex((-656.92414845246), 5.2240336371356666E-9);
      complex0.isInfinite();
      complex2.readResolve();
      complex0.reciprocal();
      Complex complex3 = complex1.cos();
      Complex complex4 = new Complex(5.2240336371356666E-9, (-8.794689652049879E-8));
      complex3.subtract(5.2240336371356666E-9);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex4.createComplex((-8.794689652049879E-8), 272.666772546);
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex7.pow((-8.794689652049879E-8));
      complex10.multiply(2145129213);
      Complex complex11 = complex9.pow(complex2);
      complex11.INF.log();
      Complex complex12 = complex8.tanh();
      complex4.multiply((-2045222521));
      complex4.asin();
      complex8.isInfinite();
      complex8.tan();
      Complex complex13 = new Complex(888.00365, 2189512.24);
      complex13.acos();
      complex12.hashCode();
      complex6.divide(1423.3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      Complex complex4 = Complex.ONE;
      complex3.getField();
      complex0.isInfinite();
      Complex complex5 = (Complex)complex2.readResolve();
      complex3.reciprocal();
      complex2.cos();
      Complex complex6 = new Complex(5.2240336371356666E-9, 5.2240336371356666E-9);
      complex2.subtract(5.2240336371356666E-9);
      Complex complex7 = complex3.sqrt1z();
      complex2.tanh();
      complex2.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex5.cosh();
      Complex complex9 = complex6.I.pow(1369.548323);
      complex7.ZERO.multiply(201);
      complex8.divide(complex9);
      complex7.atan();
      complex6.pow(1.0);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.atan();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.sin();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      Complex complex4 = Complex.ONE;
      complex3.getField();
      complex0.isInfinite();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(5.2240336371356666E-9, Double.POSITIVE_INFINITY);
      complex7.pow(complex3);
      complex6.subtract(complex7);
      complex5.pow(5.2240336371356666E-9);
      Complex complex8 = Complex.I;
      complex3.divide(complex6);
      complex2.atan();
      complex8.pow((-631.10073679));
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.366272509098053, 0.366272509098053);
      complex0.INF.abs();
      Complex complex1 = complex0.multiply(0.366272509098053);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.pow(complex1);
      complex3.I.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.NaN.tanh();
      complex3.readResolve();
      Complex complex6 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.divide(complex6);
      Complex complex8 = complex6.negate();
      Complex complex9 = complex1.sqrt1z();
      complex9.INF.atan();
      Complex complex10 = complex7.I.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.ONE.negate();
      complex10.I.sinh();
      complex5.nthRoot(2146461620);
      complex7.reciprocal();
      Complex complex12 = complex8.sqrt();
      complex12.ZERO.pow(complex11);
      complex3.reciprocal();
      Complex.valueOf(3.2921976772303727E158);
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(723.9);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.log();
      complex0.nthRoot(134);
      Complex complex4 = complex1.createComplex(723.9, (-1256.0));
      complex2.hashCode();
      Complex complex5 = complex4.ONE.createComplex(134, 0.8813735870195428);
      complex5.NaN.sqrt();
      Complex complex6 = Complex.valueOf((-2.930722933673069E201));
      complex3.I.sqrt();
      Complex complex7 = Complex.valueOf(3095.21965, 723.9);
      complex7.I.hashCode();
      Complex complex8 = complex2.sinh();
      complex8.NaN.getField();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.pow(complex6);
      complex5.asin();
      complex8.NaN.divide(complex0);
      complex3.multiply((-1387.818));
      complex10.subtract(complex8);
      complex2.divide((-1256.0));
      complex4.sinh();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.017654713159388E-225, 5.2240336371356666E-9);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.acos();
      complex0.INF.acos();
      complex0.ONE.getField();
      Complex complex3 = Complex.valueOf(1424.7838854661, 8.017654713159388E-225);
      Complex complex4 = complex3.I.negate();
      complex4.ZERO.sqrt();
      Complex complex5 = complex3.NaN.atan();
      Complex complex6 = complex5.INF.conjugate();
      complex6.ONE.multiply(complex5);
      complex0.INF.getArgument();
      complex0.I.getArgument();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.ONE.cosh();
      complex8.ZERO.exp();
      complex4.I.reciprocal();
      Complex complex9 = complex5.I.atan();
      complex9.ZERO.cos();
      complex7.ONE.divide(0.7853981633974483);
      Complex complex10 = complex4.log();
      complex3.multiply(complex10);
      complex6.divide(complex4);
      complex2.pow(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      complex1.multiply(0.0);
      complex0.isInfinite();
      complex0.reciprocal();
      complex1.add(complex0);
      // Undeclared exception!
      complex1.nthRoot(5943);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex3 = complex0.reciprocal();
      complex1.add(complex0);
      Complex complex4 = complex3.subtract(3717.2503);
      complex4.subtract(complex1);
      Complex complex5 = complex0.pow((-1.0007973035323852));
      Complex complex6 = Complex.INF;
      complex6.divide(complex2);
      Complex complex7 = complex3.atan();
      complex7.pow(3717.2503);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.multiply(0.0);
      complex0.isInfinite();
      Complex complex3 = complex0.reciprocal();
      complex2.equals(complex3);
      complex3.isNaN();
      complex2.cosh();
      Complex.valueOf((-2.284757011527158));
      Complex complex4 = complex3.reciprocal();
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      Complex complex4 = Complex.ONE;
      complex3.getField();
      complex0.isInfinite();
      Complex complex5 = (Complex)complex2.readResolve();
      complex3.reciprocal();
      Complex complex6 = complex2.cos();
      Complex complex7 = new Complex(5.2240336371356666E-9, 5.2240336371356666E-9);
      complex2.subtract(5.2240336371356666E-9);
      Complex complex8 = complex3.sqrt1z();
      complex2.tanh();
      Complex complex9 = complex8.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex5.cosh();
      complex7.I.pow(1369.548323);
      complex8.ZERO.multiply(201);
      complex10.I.pow(complex9);
      complex7.tanh();
      complex0.multiply(17);
      Complex complex11 = complex6.asin();
      complex11.isInfinite();
      Complex complex12 = complex9.tan();
      complex12.INF.acos();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5010119676589966, 1801.710929);
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex(2.6, 1801.710929);
      complex2.subtract(0.5010119676589966);
      Complex complex3 = complex1.sqrt1z();
      complex3.tanh();
      Complex complex4 = complex2.log();
      Complex.valueOf((-124.739438893));
      Complex complex5 = complex2.createComplex(512.2903, (-1936.4350219468427));
      complex4.cosh();
      complex3.multiply(17);
      complex4.asin();
      complex5.isInfinite();
      Complex.valueOf((-9.522726334561169E100));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      Complex complex4 = Complex.ONE;
      complex3.getField();
      complex0.isInfinite();
      Complex complex5 = (Complex)complex2.readResolve();
      complex3.reciprocal();
      Complex complex6 = complex2.cos();
      Complex complex7 = new Complex(5.2240336371356666E-9, 5.2240336371356666E-9);
      complex2.subtract(5.2240336371356666E-9);
      Complex complex8 = complex3.sqrt1z();
      complex2.tanh();
      complex8.log();
      Complex.valueOf(2324.7);
      complex0.sqrt1z();
      complex6.add((-1845.0029352345334));
      complex5.asin();
      complex8.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(0.0);
      complex0.isInfinite();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.add(complex0);
      complex0.tan();
      complex0.multiply(17);
      complex1.asin();
      complex2.tan();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex3 = Complex.ONE;
      complex1.toString();
      Complex complex4 = complex3.sqrt();
      complex3.toString();
      complex2.sqrt();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.subtract(5.2240336371356666E-9);
      complex4.subtract(complex1);
      complex6.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.multiply((-620));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.divide(complex5);
      complex0.negate();
      complex9.atan();
      complex9.sin();
      complex8.pow((-2674.7695));
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2456.8142778733504));
      complex0.nthRoot(621);
      complex0.atan();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      complex1.cosh();
      Complex.valueOf((-6.437492120743254E-9));
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.tanh();
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      complex1.multiply(0.0);
      complex0.isInfinite();
      Complex complex2 = complex0.reciprocal();
      complex1.add(complex0);
      complex2.I.getArgument();
      Complex complex3 = complex2.tan();
      complex1.tan();
      complex3.multiply(17);
      complex3.asin();
      complex1.isInfinite();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-172.217672847), (-172.217672847));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.divide((-1268.0765));
      Complex complex3 = Complex.valueOf((-172.217672847));
      complex1.NaN.atan();
      Complex complex4 = complex3.divide((-5.5200857974));
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.ZERO.acos();
      complex6.ZERO.nthRoot(3033);
      complex6.INF.cos();
      complex2.divide((-172.217672847));
      complex4.INF.add(1000.5715362354);
      Complex complex7 = complex0.multiply(160);
      complex7.NaN.tanh();
      complex1.readResolve();
      complex1.sin();
      complex0.pow(complex2);
      Complex complex8 = complex7.conjugate();
      complex8.cosh();
      complex0.tanh();
      complex6.sqrt1z();
      complex1.multiply((-1268.0765));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1), (-1.830335419852293E-147));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.cos();
      complex0.toString();
      Complex complex4 = complex3.subtract(complex1);
      complex4.getField();
      complex0.isInfinite();
      complex3.readResolve();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.subtract((-1.830335419852293E-147));
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex2.tanh();
      complex10.log();
      Complex complex11 = Complex.valueOf((-2290.598));
      complex11.createComplex(611.2, 0.38109784554181547);
      complex11.cosh();
      Complex complex12 = complex9.tanh();
      complex2.multiply((-590));
      complex8.asin();
      Complex.valueOf(0.38109784554181547, Double.POSITIVE_INFINITY);
      complex2.isInfinite();
      complex5.tan();
      complex7.hashCode();
      Complex complex13 = Complex.INF;
      Object object0 = new Object();
      complex12.equals(object0);
      Object object1 = new Object();
      complex8.equals(object1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(Double.NaN);
      complex0.nthRoot(1218);
      complex1.sqrt();
      Complex complex2 = complex0.multiply((double) 1218);
      Complex complex3 = new Complex(Double.NaN);
      complex3.multiply(2143857366);
      Complex.valueOf(Double.NaN, 224.37974509);
      Complex complex4 = Complex.NaN;
      complex2.divide(0.4161468365471423);
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1057.732345460133), (-1057.732345460133));
      Complex complex2 = complex1.reciprocal();
      complex0.conjugate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.createComplex(910.043796801, (-1057.732345460133));
      complex3.multiply((-2437));
      Complex.valueOf((-6.437492120743254E-9), 910.043796801);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex5.cosh();
      complex7.getField();
      complex6.acos();
      complex3.isNaN();
      complex1.log();
      complex3.negate();
      complex5.abs();
      Complex complex8 = Complex.valueOf((-1865.01765));
      complex3.sinh();
      complex8.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5841694471584984, 611.2);
      Complex complex1 = complex0.cosh();
      complex1.multiply(0.38109784554181547);
      complex0.isInfinite();
      Complex complex2 = complex0.reciprocal();
      complex1.add(complex2);
      Complex complex3 = new Complex(611.2, 0.5841694471584984);
      Complex complex4 = complex0.tan();
      complex4.multiply(411);
      complex4.asin();
      Complex complex5 = Complex.valueOf(786.92836);
      complex5.isInfinite();
      complex3.tan();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.multiply(0.0);
      complex0.isInfinite();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex1.tan();
      complex6.divide(2868.42520707);
      Complex complex7 = complex5.multiply(17);
      Complex complex8 = complex5.asin();
      complex1.isInfinite();
      complex7.tan();
      complex3.hashCode();
      complex2.equals(complex0);
      complex4.asin();
      complex8.multiply(2200);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.219921));
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.conjugate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ONE.createComplex(60.5853514054, (-2437));
      complex0.multiply((-2437));
      Complex complex4 = Complex.valueOf((-301.219921), (-301.219921));
      Complex complex5 = complex4.subtract(complex0);
      complex2.INF.multiply(complex0);
      complex4.NaN.cosh();
      complex0.getField();
      complex2.acos();
      complex2.isNaN();
      Complex complex6 = complex5.ONE.log();
      complex6.ONE.sin();
      complex0.negate();
      complex3.INF.abs();
      complex4.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.multiply(0.0);
      complex0.isInfinite();
      Complex complex3 = complex0.reciprocal();
      complex2.equals(complex3);
      complex3.isNaN();
      Complex complex4 = complex2.cosh();
      Complex complex5 = Complex.valueOf((-0.9092974268256817));
      Complex complex6 = Complex.I;
      complex5.tanh();
      complex4.equals(complex5);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.21992130171947));
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.conjugate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ONE.createComplex(60.5853514054, (-2437));
      complex0.multiply((-2437));
      Complex complex4 = Complex.valueOf((-301.21992130171947), (-301.21992130171947));
      Complex complex5 = complex4.subtract(complex0);
      complex2.INF.multiply(complex0);
      complex4.NaN.cosh();
      complex0.getField();
      complex2.acos();
      complex2.isNaN();
      complex5.ONE.log();
      complex0.negate();
      complex3.INF.abs();
      Complex.valueOf(0.5941681861877441);
      complex3.sinh();
      Complex complex6 = complex0.exp();
      try { 
        complex6.I.nthRoot((-2437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,437
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.pow(Double.NaN);
      Complex complex3 = complex0.createComplex(Double.NaN, 2.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      complex5.cos();
      Complex complex6 = Complex.ONE;
      complex3.getField();
      Complex complex7 = Complex.ONE;
      complex7.isInfinite();
      complex6.readResolve();
      Complex complex8 = complex3.reciprocal();
      Complex.valueOf(2.0, Double.NaN);
      Complex complex9 = new Complex(2.0, 5.2240336371356666E-9);
      complex7.subtract(2.0);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = Complex.ZERO;
      complex0.tanh();
      complex10.log();
      Complex.valueOf(5.2240336371356666E-9);
      complex2.createComplex(256.391995151, 98.815094015);
      complex9.cosh();
      complex8.tanh();
      Complex complex12 = complex5.multiply(3023);
      complex2.asin();
      complex6.isInfinite();
      complex8.tan();
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex2.conjugate();
      complex0.getReal();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex5.reciprocal();
      complex6.toString();
      complex6.subtract(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.getField();
      complex7.reciprocal();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.cos();
      complex0.toString();
      Complex complex4 = complex0.subtract(complex2);
      complex4.ZERO.getField();
      complex2.isInfinite();
      complex1.readResolve();
      complex0.I.reciprocal();
      Complex complex5 = complex0.cos();
      complex5.INF.sqrt();
      Complex complex6 = complex3.I.subtract(1.2027015686035156);
      complex6.ZERO.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.4161468365471423);
      Complex complex7 = Complex.NaN;
      complex0.divide(0.553508936878643);
      Complex complex8 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.cos();
      complex1.ONE.toString();
      Complex complex5 = complex0.subtract(complex3);
      complex5.ZERO.getField();
      complex3.isInfinite();
      Complex complex6 = (Complex)complex1.readResolve();
      Complex complex7 = complex0.I.reciprocal();
      Complex complex8 = complex0.cos();
      complex8.INF.sqrt();
      Complex complex9 = complex4.I.subtract(1.2027015686035156);
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex8.NaN.tanh();
      complex6.getField();
      complex11.acos();
      complex10.isNaN();
      complex2.log();
      complex2.negate();
      complex8.abs();
      Complex.valueOf((-992.306952460317));
      complex7.sinh();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.cosh();
      complex1.multiply(Double.NaN);
      complex0.isInfinite();
      Complex complex3 = complex2.reciprocal();
      complex2.add(complex1);
      complex0.tan();
      complex3.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.ONE;
      complex0.getField();
      Complex complex2 = new Complex(1.5707963267948966, Double.NaN);
      complex2.isInfinite();
      complex1.readResolve();
      Complex complex3 = complex1.reciprocal();
      complex1.cos();
      Complex complex4 = new Complex(Double.NaN, 1.5707963267948966);
      Complex complex5 = complex4.subtract(1.5707963267948966);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.tanh();
      complex4.log();
      Complex complex8 = Complex.valueOf(2324.7);
      complex8.createComplex(1.5707963267948966, 2324.7);
      complex3.cosh();
      complex8.tanh();
      complex5.multiply(17);
      Complex complex9 = complex7.asin();
      complex6.isInfinite();
      complex9.tan();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.cos();
      complex1.ONE.toString();
      Complex complex4 = complex0.subtract(complex2);
      complex4.ZERO.getField();
      complex2.isInfinite();
      complex1.readResolve();
      complex0.I.reciprocal();
      Complex complex5 = complex0.cos();
      complex5.INF.sqrt();
      Complex complex6 = complex3.I.subtract(1.2027015686035156);
      complex6.ZERO.sqrt1z();
      complex5.NaN.tanh();
      complex4.log();
      Complex.valueOf(1.2027015686035156);
      complex3.createComplex(Double.POSITIVE_INFINITY, (-672.588));
      complex6.ONE.cosh();
      Complex complex7 = Complex.valueOf(1.2027015686035156);
      complex7.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sqrt();
      complex1.toString();
      complex0.sqrt();
      Complex complex3 = complex2.subtract((double) 467);
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = complex0.multiply(467);
      complex1.divide(complex6);
      complex2.negate();
      complex3.atan();
      complex4.sin();
      complex5.pow((-1732.29355071661));
      complex6.sin();
      complex5.multiply(87.996);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.21992130171947));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.valueOf((-301.21992130171947), (-301.21992130171947));
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex3.createComplex(60.5853514054, (-60.5853514054));
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.subtract(complex3);
      complex5.tan();
      complex3.tanh();
      complex1.atan();
      complex6.getArgument();
      complex9.negate();
      complex9.isNaN();
      complex4.sqrt();
      complex7.add(582.229);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.createComplex(Double.POSITIVE_INFINITY, 5.2240336371356666E-9);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.cos();
      complex2.toString();
      Complex complex6 = Complex.ONE;
      complex4.getField();
      complex1.isInfinite();
      complex3.readResolve();
      complex4.reciprocal();
      complex3.cos();
      Complex complex7 = new Complex(5.2240336371356666E-9, 5.2240336371356666E-9);
      complex3.subtract(5.2240336371356666E-9);
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex3.tanh();
      complex8.log();
      Complex.valueOf(2324.7);
      complex1.createComplex(1.0, Double.POSITIVE_INFINITY);
      complex2.cosh();
      Complex complex10 = complex5.tanh();
      complex3.multiply(17);
      complex5.asin();
      complex1.isInfinite();
      complex9.tan();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.21992130171947));
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.conjugate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ONE.createComplex(60.5853514054, (-2437));
      Complex complex4 = complex0.multiply((-2437));
      Complex complex5 = Complex.valueOf((-301.21992130171947), (-301.21992130171947));
      Complex complex6 = complex5.subtract(complex0);
      complex2.INF.multiply(complex0);
      Complex complex7 = complex5.NaN.cosh();
      complex0.getField();
      complex2.acos();
      complex2.isNaN();
      Complex complex8 = complex6.ONE.log();
      Complex complex9 = complex0.negate();
      complex3.INF.abs();
      Complex complex10 = complex9.I.reciprocal();
      complex10.INF.log();
      complex3.asin();
      Complex complex11 = complex7.cosh();
      complex8.tanh();
      complex11.multiply(2600);
      complex5.asin();
      complex8.isInfinite();
      complex7.tan();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.21992130171947));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.ONE.createComplex(60.5853514054, (-2437));
      Complex complex5 = complex0.multiply((-2437));
      Complex complex6 = Complex.INF;
      complex6.nthRoot(2449);
      Complex complex7 = new Complex((-301.21992130171947), (-1063.5431048587354));
      Complex complex8 = complex7.createComplex(864.88311398816, (-301.21992130171947));
      complex1.subtract(complex2);
      complex0.cos();
      complex2.divide((-3.036812739155085));
      complex8.subtract(complex3);
      complex6.tan();
      Complex complex9 = complex5.tanh();
      complex4.atan();
      complex8.getArgument();
      complex4.negate();
      complex9.isNaN();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt();
      complex1.toString();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.INF;
      complex4.subtract((double) 467);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex0.pow((double) 467);
      Complex complex7 = complex1.multiply(467);
      complex5.divide(complex4);
      complex6.negate();
      Complex complex8 = complex4.atan();
      Complex complex9 = complex8.sin();
      Complex complex10 = Complex.valueOf((double) 467, (double) 467);
      Complex complex11 = complex10.pow(87.996);
      complex5.sin();
      Complex complex12 = complex2.conjugate();
      complex10.conjugate();
      complex11.subtract((double) 467);
      complex12.pow(complex10);
      complex8.sin();
      complex7.hashCode();
      Complex complex13 = Complex.valueOf((double) 467);
      complex9.cosh();
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      complex0.getArgument();
      complex1.abs();
      Complex complex2 = complex0.sqrt1z();
      complex2.equals(complex0);
      complex2.isNaN();
      Complex complex3 = complex1.cosh();
      complex1.ZERO.getArgument();
      Complex complex4 = complex0.sqrt();
      complex3.multiply(3312.419);
      complex4.multiply(241);
      Complex complex5 = Complex.valueOf((double) (-296), (double) 241);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex4.subtract(complex6);
      complex7.multiply(complex5);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ZERO.conjugate();
      complex0.getReal();
      Complex complex5 = complex1.divide(complex0);
      complex2.I.reciprocal();
      complex0.toString();
      Complex complex6 = complex1.subtract(complex2);
      complex5.getField();
      complex6.isNaN();
      Complex complex7 = complex4.multiply((-2082));
      complex6.getArgument();
      complex7.getField();
      Complex complex8 = Complex.I;
      complex8.cosh();
      Complex complex9 = Complex.INF;
      complex9.isInfinite();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.21992130171947));
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.conjugate();
      Complex complex2 = complex0.asin();
      complex0.ONE.createComplex(60.5853514054, (-2437));
      complex0.multiply((-2437));
      Complex complex3 = Complex.valueOf((-301.21992130171947), (-301.21992130171947));
      complex3.subtract(complex0);
      Complex complex4 = complex2.INF.multiply(complex0);
      complex4.divide(864.88311398816);
      Complex complex5 = complex3.sin();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.multiply(0.0);
      complex0.isInfinite();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.conjugate();
      complex0.subtract(0.0);
      Complex complex5 = Complex.ONE;
      complex2.pow(complex5);
      complex4.sin();
      complex5.hashCode();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.cosh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.conjugate();
      Complex complex1 = complex0.sqrt();
      complex0.multiply(2.6);
      Complex complex2 = complex1.multiply(38);
      Complex.valueOf(847.5072383975453, (double) (-296));
      Complex complex3 = complex1.divide((double) 38);
      complex1.subtract(complex0);
      complex2.multiply(complex3);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex0.createComplex(740.31, (-4531.44863));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.cos();
      complex3.toString();
      complex2.subtract(complex1);
      complex4.getField();
      complex1.isInfinite();
      complex2.readResolve();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex6.subtract(0.38109784554181547);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex7.log();
      Complex complex12 = Complex.valueOf(740.31);
      complex12.createComplex(0.38109784554181547, Double.POSITIVE_INFINITY);
      complex9.cosh();
      Complex complex13 = complex9.tanh();
      complex8.multiply((-2942));
      Complex complex14 = complex11.asin();
      Complex.valueOf((double) (-2942), 0.0);
      complex10.isInfinite();
      complex6.tan();
      complex13.hashCode();
      Complex complex15 = Complex.INF;
      complex14.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2946.84957048, 2946.84957048);
      complex0.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.NaN;
      complex2.equals(complex3);
      complex3.isNaN();
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.valueOf(1484.0);
      complex5.getArgument();
      complex1.getField();
      complex2.isNaN();
      Complex complex6 = complex5.multiply((-2082));
      complex5.getArgument();
      complex6.getField();
      complex4.cosh();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(1729.7657124014622, 17.0);
      complex0.cosh();
      Complex complex1 = new Complex(0.0010311495412298043, 17.0);
      complex1.multiply((-1747.0));
      Complex complex2 = new Complex((-1.5967172745329108E-8), (-3346.4995445135));
      complex2.isInfinite();
      complex2.multiply((-1747.0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.21992130171947));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.asin();
      complex2.toString();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.subtract((-301.21992130171947));
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex3.pow(864.88311398816);
      complex0.multiply(2042);
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex((-301.21992130171947), 864.88311398816);
      Complex complex10 = complex2.negate();
      Complex complex11 = Complex.INF;
      complex10.sin();
      Complex complex12 = complex11.pow((double) 467);
      Complex complex13 = complex7.sin();
      complex12.conjugate();
      complex13.conjugate();
      complex9.subtract(864.88311398816);
      complex3.pow(complex13);
      complex6.sin();
      Complex complex14 = Complex.ONE;
      complex14.hashCode();
      Complex.valueOf(87.996);
      complex2.cosh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      complex1.ONE.sinh();
      complex0.isNaN();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2919.1650871167853));
      complex0.getReal();
      Complex complex1 = Complex.valueOf((-2919.1650871167853), (-2919.1650871167853));
      complex1.ONE.getField();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.ONE.multiply(2330);
      complex4.nthRoot(2330);
      Complex complex5 = complex0.add((-2548.0152993));
      Complex complex6 = Complex.valueOf((-2919.1650871167853), (-2548.0152993));
      complex6.ONE.subtract(complex4);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.I.atan();
      complex8.ZERO.acos();
      complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(811.8932634063319);
      Complex complex1 = Complex.valueOf(811.8932634063319);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.createComplex(2.0, 2.0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.sqrt();
      complex2.ONE.asin();
      complex5.ZERO.pow(complex1);
      Complex complex6 = Complex.valueOf(417.8885185532, 2.0);
      complex6.I.multiply(0);
      complex6.INF.sin();
      complex4.add(complex5);
      complex2.getReal();
      complex3.cos();
      Complex complex7 = complex4.tan();
      complex3.multiply(0);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      complex0.getArgument();
      complex1.abs();
      Complex complex2 = complex0.sqrt1z();
      complex2.equals(complex0);
      complex2.isNaN();
      Complex complex3 = complex1.cosh();
      complex1.ZERO.getArgument();
      complex3.INF.getField();
      complex3.isNaN();
      Complex complex4 = complex0.multiply((-2082));
      complex4.I.getArgument();
      complex2.getField();
      complex3.cosh();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.cos();
      complex3.getField();
      Complex complex4 = complex0.NaN.createComplex(2.0, (-314.0546732555));
      complex4.ONE.exp();
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex0.divide(2175.07);
      Complex complex8 = complex0.atan();
      complex8.ONE.negate();
      Complex.valueOf(0.0, (-3.193297932837415E-8));
      Complex complex9 = Complex.valueOf(0.0);
      complex9.I.abs();
      complex8.abs();
      complex1.getArgument();
      complex7.toString();
      complex9.add(1.1174279267498045E-159);
      complex6.tan();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.cos();
      complex1.ONE.toString();
      Complex complex4 = complex0.subtract(complex2);
      complex4.ZERO.getField();
      complex2.isInfinite();
      complex1.readResolve();
      complex0.I.reciprocal();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex3.I.subtract(1.2027015686035156);
      complex7.ZERO.sqrt1z();
      complex5.NaN.tanh();
      complex4.log();
      Complex.valueOf(1.2027015686035156);
      complex3.createComplex(Double.POSITIVE_INFINITY, (-672.588));
      complex7.ONE.cosh();
      complex6.tanh();
      Complex complex8 = complex7.multiply(17);
      Complex complex9 = complex0.asin();
      complex7.isInfinite();
      complex8.tan();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.cosh();
      complex1.I.toString();
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf(0.0, 2561.0);
      complex0.I.getField();
      complex2.nthRoot(2449);
      Complex complex3 = complex0.createComplex(43.0, (-1063.5431048587354));
      Complex complex4 = complex3.ZERO.subtract(complex2);
      complex3.NaN.cos();
      complex3.divide((-88.4791));
      Complex complex5 = complex3.subtract(complex0);
      complex5.tan();
      Complex complex6 = complex2.tanh();
      complex6.ZERO.atan();
      complex0.getArgument();
      complex5.negate();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(0.0);
      complex1.NaN.conjugate();
      Complex complex3 = complex1.I.negate();
      complex3.I.reciprocal();
      complex1.ONE.abs();
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0);
      complex1.ZERO.getArgument();
      Complex complex7 = complex0.multiply(complex1);
      complex7.tan();
      complex5.toString();
      complex6.reciprocal();
      Complex.valueOf(0.0);
      complex2.negate();
      complex2.pow((-2964.1));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2414.7658);
      Complex complex1 = Complex.valueOf((-1466.03818));
      complex0.tanh();
      complex0.equals(complex1);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      complex1.INF.pow(0.0);
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex3.I.atan();
      Complex complex5 = Complex.valueOf(1318.628448);
      complex0.NaN.log();
      Complex complex6 = complex0.asin();
      complex0.ONE.readResolve();
      Complex complex7 = complex3.I.subtract(complex4);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.I.subtract(Double.NaN);
      complex1.createComplex(0.0, 0.0);
      complex0.add(complex4);
      complex1.nthRoot(3078);
      complex2.subtract(complex3);
      complex9.negate();
      complex8.exp();
      complex6.subtract(complex5);
      complex5.add(3066.0);
      complex7.subtract((-2006.383397418));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-5.607991635038776E-29));
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.add(98.815094015);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.tan();
      complex1.ONE.sin();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.sqrt();
      complex5.toString();
      Complex complex6 = complex0.NaN.sqrt();
      Complex complex7 = complex6.INF.subtract((double) 467);
      Complex complex8 = complex4.ZERO.subtract(complex2);
      complex1.I.pow(87.996);
      Complex complex9 = complex1.multiply(467);
      Complex complex10 = complex3.divide(complex9);
      Complex complex11 = complex10.NaN.negate();
      complex11.INF.atan();
      complex4.INF.sin();
      Complex complex12 = complex4.pow(98.815094015);
      complex12.ZERO.sin();
      complex12.INF.conjugate();
      Complex complex13 = complex4.conjugate();
      complex13.subtract(98.815094015);
      complex1.pow(complex3);
      Complex complex14 = complex2.sin();
      complex14.ONE.hashCode();
      Complex.valueOf(87.996);
      complex7.cosh();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.ONE.subtract(complex0);
      complex1.createComplex(510.0, 510.0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      complex1.I.sqrt1z();
      complex0.I.multiply((-1159.8616468491));
      Complex complex2 = complex1.pow(1674.539597);
      complex2.ZERO.divide(1674.539597);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.ONE.abs();
      complex0.getReal();
      complex0.INF.multiply((-3967));
      complex2.getArgument();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(3881.723878, 3881.723878);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.ZERO.reciprocal();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ONE.log();
      complex4.negate();
      Complex complex5 = complex3.ONE.atan();
      complex0.getArgument();
      complex1.isNaN();
      complex1.atan();
      complex5.conjugate();
      Complex complex6 = complex2.reciprocal();
      complex6.multiply(complex1);
      complex6.sqrt();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 1893.22598;
      Complex complex0 = Complex.valueOf(1893.22598, 1893.22598);
      double double1 = 20.0;
      Complex complex1 = new Complex(20.0, 1893.22598);
      Complex complex2 = complex0.divide(complex1);
      Complex.valueOf(20.0);
      int int0 = (-686);
      complex2.INF.multiply((-686));
      complex0.tan();
      Complex complex3 = complex1.INF.tan();
      try { 
        complex3.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(3774.2172858, 20.0);
      complex0.getArgument();
      Complex complex3 = complex1.pow(1.5707963267948966);
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.reciprocal();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex3.NaN.subtract(20.0);
      complex5.I.tan();
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex7.multiply(complex3);
      complex8.I.getField();
      Complex complex9 = complex5.ONE.tan();
      complex2.tanh();
      complex8.ONE.hashCode();
      Complex complex10 = complex2.atan();
      complex1.INF.abs();
      complex10.INF.add(0.0);
      complex1.NaN.sqrt1z();
      complex10.ONE.hashCode();
      complex9.cos();
      complex2.hashCode();
      complex9.negate();
      complex3.getReal();
      complex8.sqrt1z();
      complex7.getArgument();
      Complex complex11 = complex4.atan();
      complex11.ONE.add(20.0);
      complex9.pow(complex0);
      complex0.tan();
      complex3.multiply(complex9);
      complex0.createComplex((-3166.2456245441563), (-3303.5943));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      complex1.pow(0.0);
      Complex complex2 = Complex.valueOf((-2082.278769), 1.6993968486785889);
      complex2.divide(2.571105480194092);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      complex0.hashCode();
      complex0.getArgument();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex3.I.subtract(complex1);
      complex0.pow(complex4);
      complex6.ONE.exp();
      Complex complex7 = complex2.INF.conjugate();
      complex7.ZERO.divide(complex2);
      complex2.NaN.hashCode();
      Complex complex8 = complex0.createComplex(1.5707963267948966, 1.5707963267948966);
      complex8.NaN.getField();
      complex4.I.sinh();
      Complex complex9 = complex8.reciprocal();
      complex9.I.tanh();
      Complex complex10 = complex1.multiply(2206);
      complex6.I.pow((-317.9904934333));
      complex6.getImaginary();
      complex10.pow(complex4);
      complex10.isInfinite();
      complex0.multiply(complex1);
      complex6.tan();
      complex1.isNaN();
      complex5.add(Double.NaN);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 262.221272);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.multiply(complex1);
      complex1.getArgument();
      Complex complex4 = complex3.ZERO.pow(complex1);
      complex4.NaN.nthRoot(536);
      Complex complex5 = complex1.atan();
      complex4.I.acos();
      Complex complex6 = complex3.asin();
      Complex complex7 = Complex.valueOf(262.221272);
      complex2.ONE.add(262.221272);
      Complex complex8 = complex7.I.asin();
      complex6.reciprocal();
      complex1.abs();
      complex6.I.cosh();
      complex4.tan();
      Complex complex9 = complex1.subtract((-1821.019217562));
      complex5.INF.divide(Double.NaN);
      complex2.equals(complex9);
      complex0.subtract(complex3);
      Complex complex10 = complex6.multiply((-1925));
      complex5.readResolve();
      complex10.divide(1.0);
      complex0.sinh();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-489.552988642742));
      complex0.divide((-489.552988642742));
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-7.461209161105275E-9));
      complex0.INF.multiply((-7.461209161105275E-9));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.tan();
      complex4.I.atan();
      Complex complex5 = complex4.I.divide(complex3);
      Complex complex6 = complex2.INF.sqrt();
      complex5.ZERO.toString();
      Complex complex7 = complex1.acos();
      complex7.I.divide(complex6);
      Complex.valueOf(Double.NaN);
      Complex complex8 = complex2.acos();
      complex8.NaN.subtract((-7.461209161105275E-9));
      complex0.hashCode();
      complex7.getReal();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.multiply((-237));
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.INF.add(complex5);
      complex2.INF.log();
      complex3.I.getArgument();
      Complex complex7 = complex2.sqrt1z();
      complex7.NaN.readResolve();
      Complex complex8 = complex7.ONE.negate();
      complex7.NaN.sqrt1z();
      complex8.ONE.createComplex(20.0, 1.5707963267948966);
      Complex complex9 = complex8.ZERO.createComplex(5.672812341879918E178, (-237));
      complex9.asin();
      complex1.nthRoot(4435);
      complex0.I.exp();
      Complex complex10 = complex1.sin();
      complex1.sqrt1z();
      Complex complex11 = complex7.add(complex3);
      complex11.conjugate();
      complex3.conjugate();
      Complex complex12 = complex10.acos();
      Complex complex13 = complex1.ONE.conjugate();
      complex13.I.createComplex(0.0, 20.0);
      Complex.valueOf((-1013.96619578677), 1.126326877851684E-7);
      complex6.conjugate();
      complex7.isNaN();
      complex4.tan();
      complex12.add((double) 4435);
      complex10.createComplex((-1013.96619578677), 400.8);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(927.0571829274);
      Complex complex3 = complex2.INF.subtract(complex0);
      complex1.getImaginary();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.ONE.atan();
      complex5.cos();
      complex4.INF.asin();
      complex4.getImaginary();
      complex4.pow(complex1);
      complex3.getImaginary();
      complex0.sinh();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2101.9604));
      complex0.getArgument();
      Complex complex1 = complex0.multiply(407);
      complex0.pow(0.0);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.061380386352539);
      complex0.nthRoot(600);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-346.0));
      Complex complex1 = complex0.negate();
      complex0.NaN.multiply(1283);
      Complex complex2 = complex0.tan();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.3936771750450134, 332.498342085161);
      complex1.NaN.sinh();
      complex1.INF.tanh();
      complex0.pow(complex1);
      Complex complex2 = complex1.sin();
      complex2.hashCode();
      complex2.hashCode();
      complex1.cosh();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.390098458668406E-8, 6.390098458668406E-8);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.ZERO.pow(complex2);
      complex0.INF.toString();
      Complex complex4 = complex3.INF.divide(complex1);
      complex4.I.conjugate();
      Complex complex5 = complex1.tan();
      complex5.subtract((-2290.4576));
      complex5.ONE.multiply(6.390098458668406E-8);
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.ONE.multiply((-270));
      complex1.multiply((-515));
      complex7.getReal();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sinh();
      Complex complex1 = complex0.multiply(1032);
      complex0.INF.sqrt1z();
      Complex complex2 = complex0.add(0.0);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = complex4.ZERO.tanh();
      complex4.ONE.atan();
      complex0.ONE.add(complex5);
      complex0.getImaginary();
      complex1.NaN.sinh();
      Complex complex6 = complex2.createComplex(3.139132557537509E-17, 6.283185307179586);
      complex0.readResolve();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ZERO.divide(complex4);
      Complex.valueOf(0.0, 3.139132557537509E-17);
      Complex complex9 = complex8.INF.sqrt1z();
      complex6.isInfinite();
      Complex complex10 = complex3.atan();
      complex3.getField();
      complex10.cosh();
      complex9.tan();
      complex9.tanh();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1033.0, 225.2887434924309);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ZERO.conjugate();
      complex0.getReal();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex2.I.reciprocal();
      complex0.toString();
      Complex complex7 = complex1.subtract(complex2);
      Complex complex8 = complex6.sqrt();
      complex8.NaN.multiply(0.0);
      complex5.multiply((-296));
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex9.INF.divide((double) (-296));
      Complex complex10 = complex7.subtract(complex4);
      complex6.multiply(complex5);
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.abs();
      Complex complex1 = complex0.INF.log();
      complex1.ZERO.add(0.0);
      Complex complex2 = Complex.valueOf((-2532.6), (-2532.6));
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex1.I.divide((-2532.6));
      complex4.negate();
      Complex complex5 = complex3.NaN.divide((-2532.6));
      complex3.ONE.abs();
      Complex complex6 = complex0.multiply((-3718));
      Complex complex7 = Complex.valueOf(1.0, (double) (-3718));
      complex7.INF.tan();
      complex6.readResolve();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex1.divide((double) (-3718));
      complex1.hashCode();
      complex2.getArgument();
      complex2.add(complex9);
      complex9.negate();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex0.NaN.pow(1.0);
      complex10.hashCode();
      complex10.ZERO.exp();
      complex10.I.add((-2.356194490192345));
      Complex complex12 = complex3.atan();
      complex12.ONE.multiply((-2034.84485943));
      complex8.divide(1.0);
      complex5.subtract(complex11);
      Complex complex13 = complex6.exp();
      complex13.getImaginary();
      try { 
        complex11.nthRoot((-3718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,718
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(864.88311398816, (-301.21992130171947));
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.conjugate();
      assertEquals(3.5912689083186084E-4, complex1.getImaginary(), 0.01);
      assertEquals(0.0010311495412298043, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ONE.createComplex(60.5853514054, (-2437));
      complex0.multiply((-2437));
      Complex complex4 = Complex.valueOf((-301.21992130171947), (-301.21992130171947));
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex2.INF.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      
      complex4.NaN.cosh();
      complex0.getField();
      Complex complex7 = complex2.acos();
      assertEquals(2.7271886459393437, complex7.getImaginary(), 0.01);
      
      complex2.isNaN();
      Complex complex8 = complex5.ONE.log();
      Complex complex9 = complex0.negate();
      complex3.INF.abs();
      Complex complex10 = complex9.I.reciprocal();
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      complex3.asin();
      complex9.abs();
      Complex complex11 = complex3.multiply((-1));
      complex5.getImaginary();
      complex4.log();
      Complex complex12 = complex11.pow((-2894.14765046));
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertTrue(complex12.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double1 = 2131.453;
      complex0.asin();
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(1563.063);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.createComplex(1563.063, 0.0);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex3.isInfinite());
      assertEquals(1563.063, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }
}
