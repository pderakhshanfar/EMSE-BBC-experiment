/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:16:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.7731153));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.cos();
      complex1.INF.toString();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.add(complex0);
      Complex complex5 = complex4.ONE.divide((-700.7731153));
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.multiply((-700.7731153));
      Complex complex8 = complex7.NaN.subtract((-700.7731153));
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex10.ONE.log();
      complex11.I.getArgument();
      Complex complex12 = complex9.sin();
      Complex complex13 = complex0.INF.cosh();
      complex8.ONE.nthRoot(135);
      Complex complex14 = complex0.multiply(complex12);
      complex12.abs();
      Complex complex15 = complex14.cosh();
      Complex.valueOf((double) 135, 169.5185653583453);
      Complex complex16 = complex15.sqrt1z();
      complex5.nthRoot(135);
      complex16.nthRoot(135);
      Complex complex17 = complex3.divide(complex9);
      complex17.ZERO.sqrt1z();
      complex1.sin();
      complex13.getField();
      Complex.valueOf(1115.2236960449, (-5.188364552285819E-8));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(9.63800244281386E-15, (-448.756318503));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex0.ONE.pow(complex2);
      Complex complex3 = complex2.negate();
      complex3.NaN.hashCode();
      Complex complex4 = complex1.INF.subtract(complex0);
      complex4.INF.add(complex3);
      Complex complex5 = complex1.log();
      complex5.NaN.tanh();
      Complex complex6 = Complex.valueOf((-448.756318503), Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.NaN.cosh();
      Complex.valueOf((-0.9495202852364554));
      Complex.valueOf((-448.756318503));
      Complex complex8 = complex5.asin();
      complex8.ONE.pow((-448.756318503));
      complex8.readResolve();
      complex1.readResolve();
      Complex complex9 = complex1.pow((-448.756318503));
      complex9.INF.divide(complex3);
      complex5.reciprocal();
      Complex complex10 = complex1.createComplex(2471.0, 0.04805115711232358);
      complex10.atan();
      Complex.valueOf(0.04805115711232358);
      complex6.multiply(76.1592);
      complex7.tan();
      complex0.exp();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(456.303, (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-943.90545));
      Complex complex1 = Complex.valueOf((-943.90545), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.ZERO.multiply(complex2);
      complex1.ZERO.multiply(947);
      Complex complex4 = complex1.INF.sin();
      complex4.ZERO.createComplex(20.08580977084969, (-3331.277905311956));
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.tan();
      complex1.abs();
      Complex complex7 = complex6.atan();
      complex0.NaN.nthRoot(947);
      complex6.I.subtract(3040.7);
      complex7.multiply((-1502));
      Complex complex8 = complex7.add((double) 947);
      Complex.valueOf((-943.90545));
      complex5.cosh();
      complex8.negate();
      complex1.exp();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(732);
      Complex complex1 = Complex.valueOf((double) 732, Double.POSITIVE_INFINITY);
      complex1.INF.abs();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 737.0827608825);
      Complex complex1 = Complex.valueOf(609.88664437);
      complex1.tan();
      Complex complex2 = complex0.tanh();
      complex1.multiply(complex2);
      complex1.multiply(526);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-799.17704), 71.91);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.subtract(complex1);
      complex2.I.readResolve();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.INF.add(0.034552380442619324);
      complex5.INF.tan();
      complex5.I.cos();
      Complex complex6 = complex2.divide(complex3);
      complex1.INF.readResolve();
      complex6.multiply(0.034552380442619324);
      complex2.pow((-2007.955));
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tan();
      Complex complex1 = Complex.valueOf(750.43, 750.43);
      Complex complex2 = complex1.atan();
      complex2.divide(1471.687979345912);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.INF;
      complex4.createComplex((-2.2572324971090483), 1471.687979345912);
      complex3.sqrt();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.tan();
      Complex complex6 = Complex.valueOf(4.091704288360009E306);
      Complex complex7 = Complex.ONE;
      complex7.toString();
      Complex complex8 = complex6.pow((-1542.6829785473294));
      complex8.multiply(750.43);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(3.19462030745197E44);
      Complex complex2 = Complex.NaN;
      complex1.ONE.subtract(complex2);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-16.483));
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.add((-16.483));
      Complex complex7 = complex5.exp();
      complex0.INF.multiply(complex3);
      complex7.NaN.nthRoot(46);
      Complex complex8 = complex0.subtract(complex2);
      complex5.add((double) 46);
      Complex complex9 = complex4.add((double) 46);
      Complex complex10 = Complex.ONE;
      complex10.INF.createComplex(Double.NaN, 46);
      Complex complex11 = complex1.ZERO.multiply(complex10);
      Complex complex12 = complex5.ONE.pow(complex2);
      Complex complex13 = complex5.acos();
      complex13.ONE.negate();
      complex11.INF.toString();
      complex9.ONE.sin();
      complex5.add(complex2);
      Complex complex14 = complex9.add((double) 46);
      complex7.nthRoot(46);
      complex9.nthRoot(167);
      complex6.asin();
      complex14.sqrt1z();
      complex8.negate();
      complex12.log();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-965.493961111), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(3093.46);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.createComplex(84.0, 3093.46);
      complex0.ONE.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.log();
      complex4.INF.add(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.08961215615272522);
      Complex.valueOf(0.08961215615272522, 3093.46);
      Complex complex6 = complex4.multiply(3093.46);
      complex4.ZERO.asin();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.add(complex1);
      Complex complex9 = complex5.negate();
      complex8.negate();
      Complex complex10 = complex2.subtract(84.0);
      Complex complex11 = complex10.tanh();
      complex3.log();
      Complex complex12 = complex10.I.sqrt1z();
      complex12.NaN.divide(complex7);
      complex5.sinh();
      Complex complex13 = new Complex(3093.46);
      Complex complex14 = complex11.add(complex13);
      complex14.equals(complex9);
      Complex complex15 = complex3.conjugate();
      complex15.INF.add(complex13);
      complex7.tanh();
      complex15.atan();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(14.6861984436672, 20.0);
      Complex complex1 = complex0.tan();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex0.nthRoot(1746);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex.valueOf((-16.02319366491398), (-16.02319366491398));
      Complex complex0 = Complex.valueOf((-7.692065092509875E58));
      complex0.multiply(268);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-265.885), (-265.885));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-265.885), (-265.885));
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.exp();
      complex5.INF.pow(complex3);
      Complex complex6 = complex4.multiply((-679));
      complex6.readResolve();
      complex4.INF.readResolve();
      Complex complex7 = complex0.conjugate();
      complex7.ONE.getArgument();
      Complex complex8 = complex7.ONE.add(complex1);
      Complex complex9 = complex6.pow(complex7);
      complex9.readResolve();
      Complex complex10 = complex8.divide(complex4);
      Complex.valueOf((-1316.3));
      Complex complex11 = complex9.cos();
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex12.INF.multiply(760);
      complex1.multiply((-1190));
      complex10.nthRoot(2229);
      complex0.readResolve();
      complex13.tanh();
      complex12.acos();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex1.readResolve();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex0.sqrt();
      complex5.ZERO.multiply(0.42319912171599805);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex6.pow(complex2);
      Complex complex8 = complex3.tanh();
      complex8.INF.getArgument();
      complex7.sqrt1z();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.reciprocal();
      complex10.NaN.getField();
      Complex complex11 = complex5.cosh();
      complex9.ZERO.createComplex((-3352.2122821984), 0.0);
      complex6.exp();
      Complex complex12 = complex3.acos();
      complex12.ZERO.tanh();
      Complex complex13 = Complex.valueOf(1051.2852012889318);
      Complex complex14 = complex9.cosh();
      complex14.I.cosh();
      complex10.tan();
      Complex.valueOf(0.0, 1346.0019137011238);
      complex5.acos();
      complex13.sqrt1z();
      complex11.subtract((-1490.10608));
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-250.2885496576), (-250.2885496576));
      complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.pow(2351.87151);
      complex3.I.sqrt();
      complex2.abs();
      Complex complex4 = complex0.tan();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(990.2496906709605);
      Complex.valueOf(990.2496906709605, (-2761.428));
      Complex complex1 = complex0.INF.sin();
      complex1.hashCode();
      Complex complex2 = complex1.I.acos();
      complex2.ONE.getField();
      Complex complex3 = Complex.valueOf(990.2496906709605, 990.2496906709605);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.NaN.atan();
      complex5.cosh();
      complex2.ZERO.divide(complex1);
      complex3.pow((-5133.009118));
      complex2.ONE.subtract(534.9315);
      Complex.valueOf((-2761.428));
      Complex complex6 = complex0.sqrt();
      complex6.ONE.readResolve();
      complex3.multiply((-2690.7409137434934));
      complex2.pow(complex3);
      complex4.multiply((-1.0));
      complex4.multiply(990.2496906709605);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.tanh();
      complex2.hashCode();
      complex0.hashCode();
      Complex complex5 = Complex.ZERO;
      complex2.readResolve();
      complex4.equals(complex3);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.30178803, 14.30178803);
      Complex complex1 = Complex.valueOf(14.30178803, 14.30178803);
      Complex complex2 = new Complex(14.30178803, 14.30178803);
      Complex complex3 = complex2.I.pow(complex1);
      complex3.exp();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = new Complex(14.30178803, 1.3961255018698695E-220);
      complex4.readResolve();
      complex1.equals(complex4);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(1.4142135623730951, 1218.6877343883);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.tanh();
      complex3.readResolve();
      Complex complex5 = Complex.ONE;
      complex4.hashCode();
      Complex.valueOf(3.139954060316086E-6);
      complex1.sin();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      complex1.INF.tan();
      Complex complex3 = complex2.INF.divide(complex0);
      complex0.nthRoot(181);
      Complex complex4 = complex0.add((double) 181);
      complex0.sqrt1z();
      Complex complex5 = complex1.multiply(complex4);
      complex5.sqrt1z();
      complex4.add(complex1);
      complex5.pow((-639.1558792431109));
      Complex complex6 = complex4.I.subtract((-743.224));
      complex6.ONE.sinh();
      complex4.sin();
      Complex.valueOf(20.0, (-2581.245));
      complex2.readResolve();
      complex5.cosh();
      complex2.toString();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1463.019413));
      complex0.abs();
      complex0.sin();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.asin();
      Complex complex3 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.add(complex0);
      complex4.ONE.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.asin();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.ONE.negate();
      complex3.I.getArgument();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.sin();
      Complex.valueOf(92.734, 92.734);
      complex7.cosh();
      Complex complex8 = complex1.tan();
      // Undeclared exception!
      complex8.nthRoot(5406);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1973.882), (-1973.882));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.tanh();
      complex1.hashCode();
      Complex complex4 = complex2.tanh();
      complex0.hashCode();
      complex3.readResolve();
      Complex complex5 = Complex.ONE;
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      complex0.readResolve();
      complex0.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.ZERO;
      complex0.readResolve();
      complex3.equals(complex4);
      complex2.sin();
      Complex complex5 = Complex.valueOf(1959.5675, (-441.1020353297));
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex1 = complex0.divide((-7.171796605211277E-8));
      Complex complex2 = complex1.multiply(1626);
      Complex complex3 = new Complex((-844.154417065783));
      complex0.toString();
      complex1.negate();
      complex2.tanh();
      complex2.sin();
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.valueOf(1484.0);
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2966596.2721233345));
      Complex complex1 = complex0.INF.conjugate();
      complex1.I.toString();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.subtract((-2966596.2721233345));
      complex3.createComplex((-2966596.2721233345), (-2966596.2721233345));
      complex3.I.pow(complex2);
      complex0.NaN.getArgument();
      complex1.ZERO.readResolve();
      Complex complex5 = complex3.ZERO.exp();
      Complex complex6 = complex0.pow(complex4);
      complex5.I.subtract(complex4);
      complex5.ONE.reciprocal();
      complex3.tan();
      complex2.subtract(complex5);
      Complex complex7 = complex6.add((-2966596.2721233345));
      complex7.divide(complex2);
      Complex complex8 = Complex.valueOf((-2966596.2721233345));
      complex2.INF.cos();
      Complex complex9 = complex1.sqrt1z();
      complex8.exp();
      complex2.divide(complex9);
      Complex.valueOf((-2966596.2721233345));
      complex0.multiply(Double.NaN);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex0.multiply(613.0630331109916);
      Complex.valueOf(1370.0, 1370.0);
      Complex.valueOf(613.0630331109916, 1.0020682482026237);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      complex0.multiply(complex1);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(752);
      complex3.I.abs();
      Complex complex4 = new Complex((-885.2));
      complex0.toString();
      Complex complex5 = complex3.negate();
      complex5.tanh();
      Complex complex6 = Complex.ZERO;
      complex6.sin();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1463.019413), (-1463.019413));
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(1921.793346144925, 1368.6472362440697);
      complex0.tan();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      complex4.ONE.add(complex0);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.tanh();
      complex6.hashCode();
      Complex complex7 = Complex.ONE;
      complex1.readResolve();
      Complex complex8 = Complex.ONE;
      Complex complex9 = new Complex((-1231.7016856513));
      complex9.equals(complex8);
      Complex complex10 = Complex.ONE;
      complex10.multiply(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(complex1);
      complex0.tanh();
      complex2.hashCode();
      Complex complex3 = complex1.tanh();
      complex1.hashCode();
      complex2.readResolve();
      Complex complex4 = Complex.ONE;
      complex2.readResolve();
      complex3.equals(complex2);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.sinh();
      complex2.INF.asin();
      Complex.valueOf(990.2496906709605, 2222.065887912);
      Complex complex3 = Complex.I;
      complex1.getImaginary();
      Complex complex4 = complex1.multiply(21);
      Complex.valueOf(0.0, 990.2496906709605);
      complex1.reciprocal();
      complex4.getReal();
      complex2.readResolve();
      complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.asin();
      Complex complex3 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex4.ONE.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.ONE.asin();
      Complex complex7 = complex6.ZERO.add(complex0);
      complex7.ONE.negate();
      complex3.I.getArgument();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.sin();
      Complex.valueOf(92.734, 92.734);
      complex9.cosh();
      complex9.getImaginary();
      complex8.multiply(0);
      Complex.valueOf(2222.065887912, (double) 0);
      complex5.getImaginary();
      Complex.valueOf(Double.NaN, (-20.0));
      complex9.nthRoot(825);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1462.6074870007915));
      complex0.abs();
      Complex complex1 = complex0.divide((-1462.6074870007915));
      Complex complex2 = complex1.multiply(21);
      Complex complex3 = Complex.valueOf(2190.7637149113066, 1462.6074870007915);
      complex0.reciprocal();
      complex2.getReal();
      Complex complex4 = complex3.add(0.867299731528422);
      complex0.reciprocal();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4.597700093952774E14, 20.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ONE.add(4651.0);
      complex3.I.divide(1.5704142981313223);
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex4.ZERO.divide((-1984.4462806));
      Complex.valueOf((-1984.4462806));
      Complex complex6 = complex5.subtract((-123.5292118491179));
      complex6.cos();
      Complex complex7 = complex1.ZERO.tan();
      Complex complex8 = complex1.I.add(complex4);
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = Complex.valueOf((-1652.0));
      complex11.ZERO.cosh();
      Complex complex12 = complex0.sqrt1z();
      complex12.subtract(4651.0);
      Complex complex13 = complex2.asin();
      Complex complex14 = complex11.add((-1652.0));
      complex14.I.subtract(complex0);
      complex1.exp();
      complex1.negate();
      Complex complex15 = complex9.cos();
      complex10.multiply(complex1);
      complex13.subtract(complex11);
      complex8.abs();
      complex13.NaN.pow(complex0);
      complex3.add(complex7);
      complex13.asin();
      complex3.getField();
      complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(3093.46);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.createComplex(84.0, 3093.46);
      complex0.ONE.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.log();
      complex4.INF.add(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.08961215615272522);
      Complex.valueOf(0.08961215615272522, 3093.46);
      Complex complex6 = complex4.multiply(3093.46);
      complex4.ZERO.asin();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.add(complex1);
      Complex complex9 = complex5.negate();
      complex8.negate();
      Complex complex10 = complex2.subtract(84.0);
      Complex complex11 = complex10.tanh();
      complex3.log();
      complex10.I.sqrt1z();
      complex5.sinh();
      Complex complex12 = new Complex(3093.46);
      Complex complex13 = complex11.add(complex12);
      complex13.equals(complex9);
      Complex complex14 = complex3.conjugate();
      complex14.INF.add(complex12);
      complex7.tanh();
      complex14.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0));
      complex1.ZERO.createComplex((-802.09133), (-802.09133));
      Complex complex2 = complex0.divide((-802.09133));
      complex2.getArgument();
      complex2.hashCode();
      Complex complex3 = complex2.cos();
      complex1.tanh();
      complex3.reciprocal();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1463.019413));
      Complex complex1 = complex0.log();
      complex0.exp();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1463.019413));
      complex0.abs();
      Complex complex1 = complex0.divide((-1.4566110577298295E-7));
      Complex complex2 = complex0.multiply(37);
      Complex complex3 = complex1.pow(0.0);
      complex3.tan();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.4566110577298295E-7));
      complex1.sin();
      Complex complex2 = complex1.negate();
      complex0.asin();
      complex2.readResolve();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      complex0.getField();
      Complex complex2 = Complex.valueOf(0.0, 871.4807690675897);
      complex2.tanh();
      complex1.NaN.pow(0.0);
      complex1.isNaN();
      complex2.getArgument();
      complex1.sqrt();
      complex2.sqrt();
      complex1.asin();
      complex0.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(871.4807690675897, 0.0);
      Complex complex1 = complex0.add(Double.NaN);
      complex0.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-306.531108766), (-306.531108766));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.ZERO.atan();
      complex1.isNaN();
      Complex complex4 = complex0.sqrt1z();
      complex4.hashCode();
      complex3.getField();
      Complex complex5 = complex1.add(0.0);
      complex2.hashCode();
      complex5.hashCode();
      complex2.toString();
      complex1.getImaginary();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-306.531108766));
      complex5.nthRoot(2511);
      complex0.add(complex5);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-534.9315), 613.0614019551783);
      Complex complex1 = complex0.tanh();
      complex0.toString();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.negate();
      complex3.readResolve();
      Complex complex4 = complex2.multiply((-534.9315));
      complex0.sqrt1z();
      complex1.createComplex(4735.9872429, 1.2216413021087646);
      complex1.getReal();
      Complex complex5 = Complex.valueOf(0.2447827160358429);
      complex5.hashCode();
      complex5.exp();
      Complex complex6 = complex2.pow(768.4361049262591);
      Complex complex7 = complex6.subtract(complex5);
      complex4.hashCode();
      complex2.nthRoot(126);
      Complex complex8 = complex4.negate();
      complex8.getField();
      complex7.reciprocal();
      complex0.multiply(1111);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2009.882356297619));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = new Complex((-2009.882356297619));
      complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf((-2009.882356297619), (-2009.882356297619));
      Complex complex4 = new Complex((-2009.882356297619), (-2009.882356297619));
      complex3.ZERO.toString();
      Complex complex5 = complex2.createComplex((-2409.373432175813), (-3226.946));
      complex5.NaN.reciprocal();
      complex5.readResolve();
      complex4.sqrt();
      complex3.pow(2716.20682);
      complex5.log();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.asin();
      Complex complex3 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.add(complex0);
      complex4.ONE.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex5.ZERO.add(complex0);
      complex6.ONE.negate();
      complex3.I.getArgument();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.sin();
      Complex.valueOf(92.734, 92.734);
      complex8.cosh();
      complex8.getImaginary();
      complex7.multiply(0);
      Complex.valueOf(2222.065887912, (double) 0);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = new Complex((-61.85610161098482), (-3581.932212442));
      complex11.getReal();
      Complex complex12 = Complex.INF;
      complex12.pow((-61.85610161098482));
      complex3.abs();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.126414081261746E-168, (-1973.882));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.atan();
      complex1.multiply(500);
      complex2.ONE.hashCode();
      complex2.ZERO.acos();
      Complex complex4 = complex2.sqrt1z();
      complex3.getField();
      complex4.hashCode();
      complex1.hashCode();
      complex0.toString();
      complex3.getImaginary();
      Complex.valueOf((-1551.9), (-1980.51586));
      try { 
        complex0.nthRoot((-1578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,578
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-306.531108766), (-753.308));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.divide(complex0);
      complex0.conjugate();
      Complex complex4 = complex1.subtract(complex2);
      complex4.cos();
      complex4.acos();
      Complex complex5 = Complex.ONE;
      complex5.createComplex((-3646.572691150035), 4.1011920825226876E-8);
      complex3.readResolve();
      complex3.sqrt();
      complex3.pow((-306.531108766));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex0.negate();
      complex5.readResolve();
      Complex complex6 = Complex.ZERO;
      complex6.multiply(Double.NaN);
      Complex complex7 = complex0.sqrt1z();
      complex4.createComplex(1.3551194668783802E10, (-2829.45));
      complex5.getReal();
      Complex complex8 = Complex.ONE;
      complex8.hashCode();
      complex5.exp();
      complex7.pow(-0.0);
      complex0.subtract(complex7);
      complex0.hashCode();
      complex7.nthRoot(126);
      complex4.negate();
      Complex complex9 = Complex.NaN;
      complex9.getField();
      Complex complex10 = Complex.I;
      complex10.reciprocal();
      complex0.multiply((-2742));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(1877.0, 1.2216413021087646);
      Complex complex1 = complex0.ZERO.tanh();
      complex0.toString();
      complex1.asin();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(7.321238022013781E-8, 990.2496906709605);
      complex0.cosh();
      complex2.getImaginary();
      complex3.multiply(0);
      Complex.valueOf(1712.321919, (-243.3759581));
      Complex complex4 = complex3.reciprocal();
      complex2.getReal();
      complex2.pow((-5488.22));
      complex0.abs();
      Complex complex5 = Complex.INF;
      complex5.tan();
      complex4.pow(1712.321919);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.sinh();
      complex3.INF.asin();
      complex0.sin();
      Complex complex4 = Complex.valueOf((-20.0), 423.17800003407);
      complex4.cosh();
      Complex complex5 = Complex.valueOf((-674.2822), (-674.2822));
      complex5.getImaginary();
      complex4.multiply(0);
      Complex.valueOf((-20.0), (-674.2822));
      complex5.reciprocal();
      complex2.getReal();
      complex4.pow((-1303.0578));
      complex3.abs();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-306.531108766), (-306.531108766));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex.valueOf(871.4807690675897, 0.0);
      Complex complex3 = complex1.pow((-1533.14941522731));
      complex3.isNaN();
      complex2.getArgument();
      complex0.sqrt();
      complex3.sqrt();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      complex0.getField();
      Complex complex2 = complex1.atan();
      Complex complex3 = new Complex(3092.410656340198);
      complex3.isNaN();
      complex0.ZERO.sqrt();
      Complex complex4 = complex0.sqrt1z();
      complex1.hashCode();
      complex0.getField();
      complex1.add(2435.8143492981553);
      complex4.hashCode();
      complex3.hashCode();
      complex0.toString();
      complex2.getImaginary();
      Complex.valueOf((-3081.0805551), (-2341.0100706146213));
      Complex complex5 = Complex.I;
      complex5.nthRoot(114);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1973.882), (-1973.882));
      Complex complex1 = Complex.INF;
      complex1.ZERO.sin();
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.tan();
      Complex complex3 = complex0.divide((-1.4566110577298295E-7));
      Complex complex4 = complex1.multiply(4820);
      complex4.pow((double) 37);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1463.019413));
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = Complex.ONE;
      complex4.cos();
      complex3.acos();
      complex2.createComplex(1463.019413, (-390.65876456341));
      complex3.readResolve();
      complex1.sqrt();
      complex4.pow((-1463.019413));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(2191.822240888981);
      Complex complex2 = Complex.valueOf((-25.996988), (-25.996988));
      Complex complex3 = complex1.tanh();
      complex2.I.conjugate();
      Complex complex4 = Complex.valueOf((-486.28355932), 2191.822240888981);
      complex4.ZERO.divide(complex3);
      Complex complex5 = complex1.INF.sqrt1z();
      Complex complex6 = complex5.ONE.asin();
      complex6.NaN.tan();
      Complex complex7 = Complex.valueOf((-184.636), 2856.18993182213);
      complex1.I.hashCode();
      Complex complex8 = complex0.multiply(complex7);
      complex8.getArgument();
      complex5.NaN.asin();
      complex0.I.abs();
      complex0.nthRoot(1);
      complex0.asin();
      Complex complex9 = complex0.tanh();
      complex0.readResolve();
      Complex complex10 = complex9.asin();
      complex10.ZERO.sqrt1z();
      complex2.pow((double) 1);
      complex5.sqrt();
      Complex complex11 = Complex.valueOf(0.0);
      complex9.NaN.subtract(complex5);
      complex11.ZERO.multiply(0);
      complex9.sqrt1z();
      Complex.valueOf((-49.7879), 1.0);
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.nthRoot(1066);
      Complex complex1 = Complex.valueOf((-2514.879265595546));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.exp();
      complex2.INF.getField();
      Complex complex4 = complex3.NaN.createComplex((-390.65876456341), (-2514.879265595546));
      Complex complex5 = complex3.I.conjugate();
      Complex complex6 = complex3.sinh();
      complex2.cosh();
      complex6.asin();
      complex4.reciprocal();
      complex5.multiply(1066);
      complex4.tanh();
      Complex.valueOf((double) 1066, Double.NaN);
      complex2.toString();
      complex5.cos();
      complex5.acos();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.multiply((-1232.27634));
      Complex complex3 = complex2.I.divide((-1232.27634));
      Complex complex4 = complex3.INF.sin();
      complex4.I.multiply(17);
      Complex complex5 = complex2.ZERO.multiply(140.335837386);
      Complex complex6 = complex5.ONE.pow(Double.NaN);
      Complex complex7 = complex0.sqrt();
      complex7.INF.sinh();
      Complex complex8 = complex2.acos();
      complex8.tan();
      Complex complex9 = complex0.atan();
      complex9.NaN.divide(0.0);
      Complex complex10 = Complex.I;
      complex0.add(complex10);
      complex10.atan();
      Complex complex11 = new Complex(3.296104292035678E-8, Double.NaN);
      complex10.divide(complex11);
      complex1.divide((-1491.9332091));
      Complex complex12 = Complex.valueOf(3.296104292035678E-8, (-1491.9332091));
      complex12.abs();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.INF.conjugate();
      complex1.INF.negate();
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex.valueOf(0.0);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = Complex.valueOf(1020.510257312794);
      complex3.NaN.negate();
      complex1.getArgument();
      Complex complex7 = complex0.ONE.pow(1020.510257312794);
      complex6.INF.cos();
      Complex complex8 = complex0.I.sqrt1z();
      complex0.isInfinite();
      complex4.readResolve();
      complex7.NaN.subtract(complex5);
      complex1.divide(6.283185307179586);
      Complex complex9 = complex2.sinh();
      complex9.NaN.getField();
      complex8.toString();
      Complex complex10 = complex8.pow(complex2);
      complex10.INF.tan();
      Complex complex11 = complex3.pow((-1.0));
      complex4.getArgument();
      Complex complex12 = complex0.NaN.reciprocal();
      complex12.add((-205.9));
      complex11.sqrt();
      complex3.getField();
      complex2.getReal();
      Complex complex13 = complex7.cosh();
      complex13.INF.asin();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(1.454991340637207, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.add(2223.826253322189);
      Complex complex2 = complex1.ZERO.sqrt();
      complex1.ZERO.readResolve();
      complex2.exp();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.add(2223.826253322189);
      Complex complex5 = complex4.NaN.subtract(1.454991340637207);
      complex4.NaN.toString();
      Complex complex6 = complex5.I.conjugate();
      complex6.ZERO.acos();
      complex3.acos();
      complex3.isInfinite();
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.NaN.subtract(complex8);
      complex7.subtract(complex3);
      complex8.NaN.atan();
      complex9.multiply((-789));
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf((-1978.308227655021));
      complex2.toString();
      complex2.NaN.abs();
      Complex complex3 = Complex.valueOf((-1978.308227655021));
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex0.INF.conjugate();
      complex0.isNaN();
      complex2.add(complex1);
      complex1.getReal();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.INF.conjugate();
      complex3.ONE.reciprocal();
      Complex complex7 = complex5.multiply((-1978.308227655021));
      Complex complex8 = complex1.add(Double.NaN);
      complex1.negate();
      complex1.NaN.pow(complex6);
      complex8.I.negate();
      Complex.valueOf(0.0);
      complex7.multiply(1);
      complex4.subtract(complex3);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(1217.90727728414, 1217.90727728414);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1877.0, 1.2216413021087646);
      Complex complex1 = complex0.ZERO.tanh();
      complex0.toString();
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.negate();
      complex2.I.readResolve();
      Complex complex3 = complex2.multiply(1.2216413021087646);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex1.createComplex(1.2216413021087646, (-2413.431331095483));
      complex1.getReal();
      complex1.I.hashCode();
      Complex complex6 = complex2.NaN.exp();
      complex6.ONE.pow(0.0);
      complex2.I.subtract(complex4);
      complex4.I.hashCode();
      complex4.nthRoot(126);
      Complex complex7 = complex3.negate();
      complex7.ZERO.getField();
      complex5.reciprocal();
      complex4.multiply(126);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      complex2.abs();
      complex0.tanh();
      complex1.I.hashCode();
      Complex complex3 = complex0.pow(957.37861817);
      complex0.isNaN();
      complex3.add(complex0);
      complex1.add(802.7);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.sin();
      complex1.ZERO.multiply(0.0);
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex2.sinh();
      complex7.readResolve();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex8.NaN.sin();
      complex9.INF.atan();
      Complex complex10 = complex2.cos();
      complex1.ONE.multiply(618.6816493025765);
      Complex.valueOf(0.0);
      complex10.ZERO.negate();
      complex8.NaN.subtract(complex9);
      complex0.ZERO.multiply(1111);
      Complex complex11 = complex4.exp();
      complex11.hashCode();
      complex8.getImaginary();
      complex1.NaN.tanh();
      complex5.nthRoot(2074);
      Complex complex12 = complex8.tanh();
      complex6.add(complex3);
      Complex complex13 = complex6.log();
      complex12.negate();
      complex5.subtract(complex3);
      complex13.getArgument();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1525406805994896E-208, 0.0);
      Complex complex1 = complex0.NaN.multiply(3373);
      complex0.hashCode();
      Complex complex2 = complex1.sqrt1z();
      complex2.NaN.add(complex0);
      complex1.NaN.cos();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.INF;
      complex3.add(complex4);
      complex1.divide(complex4);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-2009.882356297619));
      complex0.ZERO.sin();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.asin();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(3107.9612636207, (-683.2008051));
      Complex complex3 = complex2.INF.sqrt();
      complex3.pow(3107.9612636207);
      complex3.ZERO.subtract(complex2);
      complex0.nthRoot(17);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.NaN.reciprocal();
      complex1.NaN.add(3107.9612636207);
      complex5.subtract(complex2);
      complex4.ONE.getField();
      complex1.getImaginary();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      int int0 = (-837);
      Complex complex1 = complex0.ZERO.multiply((-837));
      complex1.ZERO.hashCode();
      complex1.I.exp();
      complex0.I.conjugate();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-807.0));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.INF.log();
      complex2.ZERO.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf((-7.29821745001452E-8));
      Complex complex6 = complex4.sqrt1z();
      complex6.NaN.toString();
      Complex complex7 = complex0.divide(complex4);
      complex5.hashCode();
      complex6.ZERO.reciprocal();
      Complex complex8 = complex5.multiply(0);
      Object object0 = new Object();
      Complex complex9 = complex5.INF.add(complex6);
      complex5.equals(object0);
      complex8.isInfinite();
      complex1.equals(complex4);
      complex5.negate();
      Complex complex10 = complex7.atan();
      complex5.NaN.cos();
      Complex complex11 = complex10.ZERO.createComplex(0.0, (-2647.40643296638));
      complex3.abs();
      Complex complex12 = Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      complex12.ONE.getField();
      complex5.getField();
      complex9.pow(complex2);
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-306.531108766), (-306.531108766));
      Complex complex1 = complex0.ONE.sin();
      complex1.NaN.reciprocal();
      Complex complex2 = complex0.ZERO.atan();
      complex0.isNaN();
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.hashCode();
      complex3.ZERO.getField();
      Complex complex4 = complex0.add((-306.531108766));
      complex2.hashCode();
      complex0.hashCode();
      complex0.toString();
      complex4.getImaginary();
      Complex.valueOf((-306.531108766), (-234.2001));
      complex1.nthRoot(2511);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.asin();
      Complex complex3 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.add(complex0);
      complex4.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.ONE.asin();
      Complex complex7 = complex6.ZERO.add(complex0);
      complex7.ONE.negate();
      complex3.I.getArgument();
      complex0.abs();
      Complex complex8 = complex0.atan();
      complex8.ONE.multiply((-1188));
      complex8.I.readResolve();
      Complex complex9 = complex8.INF.divide(complex6);
      Complex complex10 = complex3.tan();
      Complex complex11 = Complex.valueOf((-507.0), Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.NaN.tanh();
      Complex complex13 = complex12.divide(complex0);
      complex13.ZERO.sqrt();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.5707963267948966);
      complex10.conjugate();
      Complex complex15 = complex9.INF.multiply((-2320));
      complex15.NaN.atan();
      complex14.cosh();
      complex1.sinh();
      complex11.cos();
      complex9.pow(1.5707963267948966);
      complex5.divide(complex1);
      complex4.subtract(Double.POSITIVE_INFINITY);
      complex4.multiply(1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-2076.097778), (-8.054981263802322E-8));
      Complex complex1 = Complex.valueOf((-8.054981263802322E-8));
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.ONE.tanh();
      complex0.ONE.toString();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.reciprocal();
      complex0.acos();
      complex4.log();
      complex0.isInfinite();
      Complex complex5 = complex1.divide(complex3);
      complex5.add((-8.054981263802322E-8));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1319.6991107, 0.0);
      int int0 = (-3002);
      Complex complex2 = complex1.ZERO.multiply((-3002));
      Complex complex3 = complex2.NaN.cos();
      int int1 = (-863);
      try { 
        complex3.nthRoot((-863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -863
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(3167.73);
      complex2.ZERO.sin();
      Complex complex3 = complex1.ZERO.divide(complex0);
      complex3.ONE.conjugate();
      Complex complex4 = complex3.ONE.log();
      complex4.ONE.tanh();
      complex4.ONE.toString();
      complex4.INF.toString();
      complex0.ZERO.abs();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2678.09, 2678.09);
      complex0.NaN.getArgument();
      Complex complex1 = Complex.NaN;
      complex1.divide(complex0);
      Complex complex2 = complex1.INF.tan();
      Complex.valueOf(2678.09, (-1415.0));
      Complex complex3 = complex0.subtract(complex1);
      complex3.INF.sin();
      complex1.I.hashCode();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.ONE.negate();
      complex4.ONE.sqrt1z();
      Complex complex6 = complex4.exp();
      complex3.isNaN();
      complex6.atan();
      complex5.abs();
      Complex complex7 = complex2.pow(6.283185307179586);
      Complex complex8 = complex2.sin();
      complex8.getArgument();
      Complex complex9 = complex7.createComplex(1.0, 1486.7455221);
      complex6.getField();
      Complex.valueOf(8.468222063292654E102);
      Object object0 = complex2.readResolve();
      complex9.equals(object0);
      Complex complex10 = complex9.exp();
      complex10.asin();
      complex2.add(717.63);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4044.8));
      complex0.isNaN();
      Complex complex1 = complex0.I.subtract(1.2038767337799072);
      complex1.I.hashCode();
      Complex complex2 = complex1.NaN.divide((-702.19));
      complex0.getField();
      complex2.ONE.atan();
      complex2.I.sin();
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex0.ZERO.pow(complex2);
      int int0 = 0;
      complex3.NaN.add(0.0);
      Complex complex4 = complex3.INF.multiply(0);
      complex4.getArgument();
      Complex complex5 = complex1.ONE.subtract((double) (-668));
      complex5.NaN.reciprocal();
      try { 
        complex0.nthRoot((-668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -668
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3540.303), 9.490800658395667E290);
      Complex complex1 = complex0.conjugate();
      complex0.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.multiply(9.490800658395667E290);
      Complex complex4 = complex2.subtract(complex0);
      complex4.INF.hashCode();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.add(complex2);
      complex6.I.add((-3540.303));
      complex4.sqrt1z();
      Complex complex7 = complex1.pow((-3378.34993958));
      complex2.add(complex4);
      Complex.valueOf(9.490800658395667E290, 0.0);
      complex2.hashCode();
      complex3.toString();
      complex5.divide(complex0);
      complex0.add(2.6338455225993276E-166);
      Complex complex8 = complex7.add(9.490800658395667E290);
      Complex complex9 = Complex.valueOf(9.490800658395667E290);
      complex8.add(complex9);
      complex8.createComplex(0.0, 434.4837429);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.asin();
      complex0.ONE.getField();
      complex2.getArgument();
      complex0.isNaN();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex0.exp();
      Complex complex7 = Complex.valueOf(258.2, 0.0);
      complex7.ZERO.subtract(complex1);
      complex0.toString();
      complex1.NaN.divide(complex6);
      complex2.getArgument();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = Complex.valueOf(0.0);
      complex8.createComplex(0.0, 1.0);
      Complex complex10 = complex9.NaN.tan();
      complex10.INF.sqrt();
      Complex complex11 = complex9.NaN.multiply(2065);
      complex11.sin();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex1.sin();
      complex2.getArgument();
      complex8.abs();
      complex13.getField();
      Complex complex14 = complex5.log();
      Complex complex15 = complex5.divide((-2119.3912668014));
      complex15.ONE.multiply(complex14);
      complex12.sin();
      complex4.pow(complex5);
      Complex complex16 = Complex.ZERO;
      complex0.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1973.882), (-1973.882));
      Complex complex1 = Complex.INF;
      complex1.ZERO.sin();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.I.subtract(complex2);
      Complex complex4 = complex0.INF.cos();
      complex4.NaN.acos();
      Complex complex5 = complex0.I.createComplex((-1973.882), 2716.20682);
      complex5.NaN.readResolve();
      complex1.sqrt();
      complex2.pow((-1973.882));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-26.34734));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.getField();
      complex1.isInfinite();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.I.pow(0.0);
      Complex complex6 = complex3.add(0.0);
      Complex complex7 = complex6.cos();
      complex7.INF.sinh();
      complex3.I.divide(0.0);
      Complex complex8 = complex4.atan();
      complex7.I.pow(0.0);
      Complex.valueOf(0.0);
      Complex complex9 = complex7.conjugate();
      complex9.ZERO.add(complex3);
      complex0.ONE.abs();
      Complex complex10 = complex5.divide(6.054601485195952E-39);
      complex10.add(0.0);
      Complex complex11 = complex4.sqrt();
      Complex.valueOf(0.0, 2.0);
      complex2.hashCode();
      complex11.isInfinite();
      complex4.abs();
      complex4.getImaginary();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(958);
      complex0.readResolve();
      complex1.ONE.asin();
      Complex complex2 = complex0.add(423.0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.ZERO.pow(complex0);
      complex4.I.readResolve();
      Complex complex5 = complex1.asin();
      complex2.readResolve();
      Complex complex6 = complex1.pow(complex0);
      complex0.divide(complex5);
      Complex complex7 = complex3.acos();
      complex7.ZERO.pow(complex2);
      Complex.valueOf(423.0);
      Complex complex8 = complex6.exp();
      complex8.sin();
      complex0.sinh();
      complex2.divide(complex5);
      complex8.sqrt1z();
      complex4.pow(0.0);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.atan();
      complex0.isInfinite();
      Complex complex4 = complex0.INF.cos();
      complex1.hashCode();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.add(complex1);
      complex6.NaN.exp();
      complex1.isNaN();
      Complex complex7 = Complex.valueOf((-2679.456643722), (-2679.456643722));
      complex4.readResolve();
      complex7.tanh();
      complex7.divide((-2679.456643722));
      complex7.negate();
      Complex complex8 = complex0.acos();
      complex8.getReal();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.22859740257263184, 0.22859740257263184);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow(3021.0);
      Complex complex2 = complex0.INF.reciprocal();
      complex0.getArgument();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.ZERO.pow(complex2);
      Complex complex6 = complex5.INF.pow(complex0);
      Complex.valueOf(733.087);
      Complex complex7 = complex6.ONE.pow(complex1);
      complex7.INF.atan();
      complex5.INF.divide(0.0);
      Complex complex8 = complex4.ONE.conjugate();
      complex3.INF.add(12.0118249942);
      complex0.INF.subtract(complex8);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex9.ONE.divide(0.0);
      complex10.ONE.reciprocal();
      complex4.I.pow(3021.0);
      complex0.toString();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.add(Double.NaN);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex0.ZERO.negate();
      complex4.NaN.sqrt();
      complex0.isInfinite();
      complex0.getField();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.negate();
      complex7.INF.pow(complex0);
      complex7.ONE.exp();
      complex3.hashCode();
      Complex complex8 = Complex.valueOf(2025.236);
      complex8.exp();
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.30178803, 14.30178803);
      complex0.ONE.sin();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.I.pow((-127.47));
      complex2.INF.divide(complex1);
      complex1.INF.sinh();
      complex0.tan();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(1707);
      complex0.NaN.multiply((-349.38));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.NaN.pow((-349.38));
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex5.INF.asin();
      complex4.ZERO.sinh();
      complex2.ONE.subtract((-349.38));
      complex0.readResolve();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      complex7.ZERO.readResolve();
      Complex complex8 = Complex.valueOf((-349.38));
      complex8.ZERO.cosh();
      complex0.abs();
      Complex complex9 = complex3.divide(0.0);
      complex3.sinh();
      Complex.valueOf(2320.4834);
      complex9.readResolve();
      Complex complex10 = complex5.tan();
      complex10.ONE.reciprocal();
      complex6.pow(complex4);
      complex4.add((-349.38));
      complex7.equals((Object) null);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.sqrt();
      complex1.NaN.abs();
      Complex complex2 = complex1.log();
      complex1.toString();
      complex1.INF.sqrt();
      Complex complex3 = complex0.acos();
      Complex.valueOf(0.0, (-602.220756992));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.acos();
      Complex.valueOf((-2407.0264168633));
      Complex complex6 = complex5.ONE.subtract(Double.NaN);
      complex0.I.abs();
      complex6.I.cosh();
      complex1.I.readResolve();
      complex3.pow(1.030593104122615E-64);
      complex2.asin();
      complex4.add(1.030593104122615E-64);
      Complex complex7 = complex4.sinh();
      complex7.ONE.getArgument();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      complex0.readResolve();
      Complex complex2 = complex1.INF.tanh();
      complex1.ONE.abs();
      Complex complex3 = complex2.I.asin();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.tan();
      complex1.readResolve();
      complex0.getImaginary();
      Complex complex5 = complex0.sqrt();
      complex2.NaN.createComplex(685.94, 685.94);
      List<Complex> list0 = complex5.nthRoot(208);
      assertTrue(list0.contains(complex0));
      
      Complex complex6 = complex5.ONE.subtract(complex1);
      Complex complex7 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.INF.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex5.add(complex0);
      Complex complex10 = complex6.multiply(208);
      Complex complex11 = complex7.INF.cos();
      Complex.valueOf((double) 208, 0.0);
      Complex complex12 = complex4.tan();
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      complex14.ZERO.createComplex(4.920784622407246E-8, 0.0);
      Complex complex15 = complex13.ZERO.tanh();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex9));
      
      Complex complex16 = complex12.multiply(complex13);
      assertTrue(complex16.equals((Object)complex8));
      
      Complex complex17 = complex10.reciprocal();
      Complex complex18 = complex5.add(5937.0);
      complex18.ONE.sqrt();
      complex2.isInfinite();
      double double0 = complex4.abs();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.557407724654902, double0, 0.01);
      
      complex5.abs();
      complex7.subtract(complex1);
      Complex complex19 = complex17.multiply(1.557407724654902);
      assertFalse(complex0.equals((Object)complex7));
      assertSame(complex6, complex17);
      assertSame(complex19, complex2);
      assertNotSame(complex6, complex11);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex((-1586.5083));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.I.negate();
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex2.acos();
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex6.NaN.cosh();
      assertSame(complex7, complex6);
      
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.ONE.cos();
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex9.getReal(), 0.01);
      
      Complex complex10 = complex8.divide(complex5);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex8, complex4);
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
  }
}
