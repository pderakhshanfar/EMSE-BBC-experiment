/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:44:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1.0);
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      Complex complex3 = complex2.log();
      complex0.tanh();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.sinh();
      complex7.ZERO.readResolve();
      Complex complex8 = new Complex(2.0, 1.0);
      Complex complex9 = Complex.NaN;
      complex9.tan();
      Complex complex10 = new Complex(1.0, 2.0);
      complex5.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.NaN;
      complex6.nthRoot(1812);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-263.3386607206548), 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.reciprocal();
      complex2.INF.sinh();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ZERO;
      complex1.tanh();
      complex2.nthRoot(1319);
      complex0.acos();
      Complex complex5 = new Complex(1319, 217.46173248248);
      complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-887.21), Double.POSITIVE_INFINITY);
      complex1.multiply(1.0368579417304741E-7);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex0 = new Complex((-887.21), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      complex0.ONE.tan();
      complex0.conjugate();
      complex0.toString();
      Complex complex1 = complex0.cosh();
      complex1.ZERO.sqrt();
      complex0.NaN.toString();
      Complex complex2 = complex0.I.createComplex((-2126.654155564), (-796.42));
      complex2.NaN.hashCode();
      Complex complex3 = complex0.createComplex((-796.42), 0.0);
      complex2.I.sin();
      complex3.NaN.sin();
      Complex complex4 = complex0.reciprocal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-887.21));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (-887.21));
      complex2.acos();
      Complex complex3 = new Complex((-887.21), Double.POSITIVE_INFINITY);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(0.7071067811865475, Double.POSITIVE_INFINITY);
      complex0.multiply(7);
      Complex complex1 = complex0.I.multiply((double) 7);
      complex0.NaN.getField();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.pow(3.104297782658242E26);
      Complex complex4 = complex3.ONE.exp();
      complex4.ONE.negate();
      complex2.multiply(7);
      complex0.subtract((double) 7);
      complex0.add(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.pow(complex5);
      complex0.acos();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3600.654687204976, (-20.0));
      Complex complex1 = complex0.acos();
      complex1.subtract((-1304.89165083));
      Complex complex2 = complex0.tan();
      complex2.tan();
      Complex complex3 = new Complex((-1304.89165083));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-887.21));
      Complex complex1 = complex0.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-103.07203));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = new Complex((-723.2081358778349), Double.POSITIVE_INFINITY);
      complex4.tan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.acos();
      complex7.ZERO.sqrt();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      complex1.I.pow(0.0);
      complex0.I.divide(complex1);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1094.7613495));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.sinh();
      complex4.NaN.toString();
      complex4.I.getField();
      Complex complex5 = complex2.I.pow((-1094.7613495));
      complex5.hashCode();
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex2.NaN.acos();
      complex7.sqrt1z();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.I.multiply(complex2);
      Complex complex10 = complex3.tan();
      complex10.INF.acos();
      Complex complex11 = complex0.multiply(2124);
      complex11.NaN.getArgument();
      Complex complex12 = complex11.createComplex((-1094.7613495), 2124);
      complex12.sqrt();
      complex12.sqrt();
      complex3.sinh();
      complex1.abs();
      Complex complex13 = complex10.sin();
      complex6.sqrt();
      complex9.multiply((-6.690931338790221E-8));
      Complex complex14 = complex11.add(complex9);
      complex14.I.getField();
      complex3.cosh();
      complex10.nthRoot(2124);
      Complex complex15 = complex13.sinh();
      complex15.I.subtract(Double.NaN);
      complex11.divide((-6.690931338790221E-8));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1432.7316722377254);
      complex0.log();
      Complex complex1 = Complex.valueOf(2681.61791588, 2681.61791588);
      complex1.tanh();
      Complex complex2 = new Complex(1432.7316722377254, (-9.161340309319204E252));
      complex2.exp();
      complex0.conjugate();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-887.21));
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf(2.4963286658278886E149, (-970.71463263211));
      Complex complex2 = Complex.valueOf(2.4963286658278886E149);
      Complex complex3 = complex2.add(complex1);
      complex3.acos();
      complex1.tan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(2256.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-3.046577356838847E-10), (-3.046577356838847E-10));
      complex0.add(complex1);
      Complex complex3 = complex2.acos();
      complex3.tan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      complex0.abs();
      Complex complex2 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = new Complex((-20.0));
      complex1.ONE.log();
      complex1.ZERO.sinh();
      Complex complex6 = complex4.I.divide(complex5);
      Complex complex7 = complex1.sqrt1z();
      complex0.ONE.sin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex7.I.subtract(complex8);
      complex9.I.sin();
      Complex complex10 = complex2.ONE.add(complex3);
      complex10.ONE.reciprocal();
      complex7.INF.getField();
      Complex complex11 = complex2.asin();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex12.ONE.subtract(complex11);
      complex4.nthRoot(1);
      Complex complex14 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex6);
      Complex complex15 = complex3.multiply((double) 1);
      complex15.ZERO.subtract(complex3);
      Complex complex16 = complex15.I.acos();
      complex9.sinh();
      complex13.tan();
      complex16.acos();
      Complex.valueOf(424.6817, (-2806.9877916));
      complex13.multiply(1);
      complex14.sqrt1z();
      complex13.createComplex((-20.0), (-64.022484));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.log();
      Complex complex1 = Complex.valueOf(0.0, (-4025.82811971291));
      complex1.sqrt();
      Complex complex2 = Complex.ONE;
      complex2.add(complex0);
      complex2.acos();
      Complex complex3 = new Complex(2.4963286658278886E149);
      complex3.tan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      complex0.toString();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-9.335566756542137E-5), (-9.335566756542137E-5));
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.I.divide(Double.POSITIVE_INFINITY);
      complex3.ZERO.multiply(1503);
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex4.I.divide(complex1);
      complex5.ZERO.sin();
      Complex complex6 = complex5.NaN.atan();
      complex6.ONE.conjugate();
      complex6.toString();
      complex0.INF.getField();
      Complex complex7 = complex0.sqrt();
      Complex.valueOf((-9.335566756542137E-5), 938.9617723406286);
      Complex complex8 = complex0.cos();
      complex1.asin();
      complex4.reciprocal();
      Complex.valueOf(3.3487057829787434E-42, (-90.38584633));
      Complex complex9 = new Complex(938.9617723406286);
      complex9.NaN.conjugate();
      Complex complex10 = complex8.subtract((-9.335566756542137E-5));
      complex0.divide(Double.POSITIVE_INFINITY);
      complex5.reciprocal();
      Complex.valueOf(938.9617723406286, (-3570.3358793970983));
      complex10.negate();
      Complex complex11 = Complex.NaN;
      complex7.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-887.21));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(2.4963286658278886E149, (-887.21));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex3.acos();
      complex6.tan();
      Complex complex7 = complex0.sinh();
      complex5.exp();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3487057829787434E-42);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.divide(3.3487057829787434E-42);
      Complex complex3 = complex0.cosh();
      complex1.INF.multiply(complex3);
      complex3.I.getField();
      Complex complex4 = complex3.ONE.sqrt1z();
      complex1.NaN.abs();
      complex1.subtract(complex0);
      Complex complex5 = complex2.log();
      Complex complex6 = Complex.valueOf(3.3487057829787434E-42, (-20.0));
      Complex complex7 = complex2.reciprocal();
      complex4.readResolve();
      Complex complex8 = complex6.add(819.0822786013166);
      complex8.ZERO.hashCode();
      complex5.atan();
      complex6.log();
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex9.ZERO.reciprocal();
      complex5.tan();
      complex5.isInfinite();
      Complex complex11 = complex2.atan();
      complex11.sqrt1z();
      complex11.cos();
      complex9.conjugate();
      complex7.abs();
      complex7.pow(1.920871394985668E173);
      Complex complex12 = complex10.subtract(complex4);
      complex7.add(complex12);
      complex3.divide(Double.NaN);
      complex0.multiply(1.920871394985668E173);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      double double0 = (-9.335566756542137E-5);
      Complex complex1 = Complex.valueOf((-9.335566756542137E-5), (-9.335566756542137E-5));
      Complex complex2 = complex1.ONE.asin();
      complex2.I.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex3.I.divide(complex1);
      complex4.ZERO.sin();
      Complex complex5 = complex4.NaN.atan();
      complex5.ONE.conjugate();
      complex5.toString();
      complex0.INF.getField();
      complex0.sqrt();
      double double1 = 938.9617723406286;
      Complex.valueOf((-9.335566756542137E-5), 938.9617723406286);
      complex0.cos();
      Complex complex6 = complex1.asin();
      complex3.reciprocal();
      Complex.valueOf(3.3487057829787434E-42, (-90.38584633));
      Complex complex7 = complex0.log();
      complex7.NaN.conjugate();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-651.043));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.acos();
      complex3.tan();
      complex2.sinh();
      complex0.exp();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(2238.0, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.ZERO;
      complex0.atan();
      Complex complex3 = complex2.sqrt();
      complex3.asin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.tanh();
      complex1.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sqrt1z();
      complex1.toString();
      Complex complex4 = Complex.valueOf((-470.656619867));
      complex4.pow((-470.656619867));
      complex0.add((-651.043));
      complex4.reciprocal();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-651.043));
      Complex complex1 = complex0.multiply(412);
      Complex complex2 = complex1.multiply(412);
      complex2.getArgument();
      Complex complex3 = Complex.ONE;
      complex2.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.NaN;
      complex1.NaN.negate();
      Complex complex6 = complex4.multiply(complex5);
      complex3.cos();
      complex4.abs();
      complex0.sqrt();
      Complex complex7 = Complex.I;
      Complex complex8 = complex4.sin();
      Complex complex9 = complex8.sin();
      complex6.getArgument();
      Complex complex10 = complex9.asin();
      complex2.readResolve();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex11.atan();
      complex12.divide((-3082.58965899));
      Complex.valueOf(903624.788743617, (-3082.58965899));
      complex3.readResolve();
      complex4.abs();
      Object object0 = new Object();
      Object object1 = complex8.readResolve();
      complex10.equals(object1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex.valueOf((-651.043));
      Complex complex0 = Complex.valueOf((-651.043), (-505.61615));
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(950.59233572737);
      Complex complex1 = new Complex(950.59233572737, (-25640.741345822997));
      Complex complex2 = complex1.tan();
      Complex.valueOf(2710876.366230851, 3607.4553);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.I;
      complex5.divide(complex4);
      complex3.divide(0.9999995742777955);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(950.59233572737);
      Complex complex1 = new Complex(950.59233572737, 950.59233572737);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.add(complex1);
      complex3.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.ONE;
      complex6.asin();
      Complex complex7 = complex3.divide(2.015135787950673E-7);
      complex7.exp();
      Complex complex8 = complex6.acos();
      complex3.acos();
      complex4.divide(complex8);
      complex1.equals(complex5);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex3.ZERO.sin();
      complex0.ONE.createComplex((-913.0554074382468), (-913.0554074382468));
      complex0.abs();
      Complex complex5 = complex0.pow(787140.5841000001);
      complex5.nthRoot(1096);
      complex1.getImaginary();
      Complex complex6 = complex1.atan();
      complex4.ZERO.sin();
      Complex complex7 = complex6.ONE.cos();
      complex4.reciprocal();
      complex2.getField();
      complex1.isInfinite();
      complex2.INF.sqrt();
      Complex complex8 = complex2.sinh();
      complex5.sinh();
      complex8.multiply(1096);
      complex4.cosh();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-1.8592937532754405E-9), 762.836398041);
      complex0.ONE.nthRoot(1135);
      complex0.INF.sqrt();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sqrt1z();
      complex1.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.pow((-1.0));
      Complex complex6 = complex2.exp();
      Complex.valueOf((-1616.39), 1.0);
      complex3.getArgument();
      complex4.reciprocal();
      Complex.valueOf(0.0);
      complex6.cos();
      complex2.createComplex(0.7853981633974483, 2.0);
      complex4.ONE.hashCode();
      complex1.asin();
      Complex complex7 = complex3.acos();
      complex6.sinh();
      complex7.sin();
      complex1.tanh();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-651.043));
      Complex complex1 = complex0.pow(7.494218049456063E304);
      Complex complex2 = Complex.ONE;
      complex0.abs();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.sin();
      complex1.sin();
      Complex complex6 = Complex.NaN;
      complex6.getArgument();
      complex5.asin();
      complex5.readResolve();
      Complex complex7 = Complex.INF;
      complex7.negate();
      complex6.atan();
      Complex complex8 = complex5.divide((-5064.8813));
      Complex complex9 = Complex.ZERO;
      complex1.abs();
      complex9.readResolve();
      complex8.abs();
      Object object0 = new Object();
      complex1.equals(complex2);
      complex6.getImaginary();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-651.043));
      Complex complex1 = Complex.valueOf((-651.043), (-505.61615));
      complex1.reciprocal();
      Complex complex2 = complex0.acos();
      complex2.tan();
      complex0.sinh();
      complex1.exp();
      Complex.valueOf((-505.61615));
      complex2.divide((-651.043));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1362.8886127));
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.NaN.pow(complex2);
      complex2.INF.abs();
      Complex complex4 = complex0.I.multiply(complex1);
      complex4.I.getArgument();
      Complex complex5 = complex0.I.add(complex2);
      Complex complex6 = complex5.ZERO.log();
      complex6.getField();
      Complex complex7 = complex6.add((-2418.3963));
      complex7.asin();
      Complex complex8 = complex0.createComplex((-1362.8886127), (-2418.3963));
      Complex complex9 = complex1.tanh();
      complex8.toString();
      complex1.abs();
      Complex complex10 = complex9.divide(complex4);
      Complex complex11 = complex1.pow(complex5);
      Complex complex12 = Complex.valueOf(0.5844172239303589);
      complex12.I.sinh();
      complex10.add(complex0);
      Complex complex13 = complex0.divide(complex11);
      complex13.pow(complex0);
      complex10.divide(complex6);
      complex3.isInfinite();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1.8592937532754405E-9), 762.836398041);
      complex0.ONE.nthRoot(1135);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.add((-1.2470243596102937E-8));
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.sin();
      complex6.getArgument();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.pow((-1.0));
      Complex complex9 = complex6.exp();
      Complex.valueOf((-1616.39), 1.0);
      complex5.getArgument();
      complex7.reciprocal();
      Complex.valueOf(0.0);
      complex9.cos();
      complex4.createComplex(Double.NaN, 2.0);
      complex3.asin();
      Complex complex10 = complex6.acos();
      complex9.sinh();
      complex8.readResolve();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-1017.4233053909553), (-3561.592569556224));
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.multiply(17);
      complex2.ZERO.getArgument();
      Complex complex3 = Complex.ONE;
      complex3.tanh();
      complex2.I.multiply(complex3);
      Complex complex4 = complex0.cos();
      complex2.ONE.sqrt();
      Complex complex5 = complex0.NaN.sin();
      complex4.sin();
      complex1.getArgument();
      complex4.ONE.asin();
      complex2.readResolve();
      Complex complex6 = complex0.INF.negate();
      complex1.sin();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex4.divide((-3561.592569556224));
      Complex.valueOf((-1017.4233053909553), (double) 17);
      complex5.readResolve();
      complex7.abs();
      complex6.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.tanh();
      complex1.INF.hashCode();
      complex1.getArgument();
      Complex complex2 = Complex.INF;
      double double1 = 0.0;
      double double2 = (-705.79271152);
      Complex.valueOf((-705.79271152));
      complex0.add(0.0);
      complex0.tanh();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.exp();
      Complex.valueOf(Double.NaN, (-796.42));
      complex3.pow(complex5);
      Complex.valueOf((-796.42), Double.NaN);
      complex3.divide(complex1);
      Complex complex6 = Complex.I;
      complex4.subtract(complex1);
      Complex complex7 = Complex.ONE;
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      Complex complex1 = complex0.ONE.tan();
      complex0.toString();
      Complex complex2 = Complex.valueOf(Double.NaN, (-1.8592937532754405E-9));
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.ZERO;
      complex5.divide(complex2);
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.I;
      complex7.subtract(complex4);
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-887.2104236386359));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.acos();
      complex2.ZERO.multiply((-27));
      complex0.tan();
      Complex complex6 = complex4.sinh();
      complex5.exp();
      complex6.pow(complex3);
      complex0.acos();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2036.3));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = new Complex(2.18713790898745E-148, (-20.0));
      Complex complex5 = complex4.reciprocal();
      complex4.acos();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.exp();
      complex5.pow(complex7);
      Complex complex9 = complex0.acos();
      complex6.divide(complex3);
      Complex complex10 = complex8.subtract(complex9);
      complex2.getArgument();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-37.7382913));
      complex1.tan();
      Complex complex2 = complex0.conjugate();
      complex2.toString();
      complex0.cosh();
      Complex complex3 = new Complex(2244.0, (-37.7382913));
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.INF;
      complex5.sin();
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1.8592937532754405E-9), 762.836398041);
      Complex complex1 = new Complex((-1.8592937532754405E-9));
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.INF;
      complex3.sqrt1z();
      Complex complex4 = Complex.I;
      complex2.add(complex1);
      complex1.sqrt();
      complex2.pow(complex4);
      Complex.valueOf((-1.8592937532754405E-9), 0.0);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(950.59233572737);
      Complex complex1 = complex0.log();
      complex1.sqrt();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.tan();
      complex3.ONE.cosh();
      Complex complex6 = Complex.I;
      Complex complex7 = complex3.add(complex2);
      complex7.NaN.cos();
      Complex complex8 = complex5.sqrt();
      complex8.INF.add(465.5869673064);
      Complex complex9 = Complex.I;
      complex9.pow(complex6);
      Complex.valueOf(950.59233572737, 0.0);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1017.4233053909553), (-3561.592569556224));
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.multiply(17);
      complex2.ZERO.getArgument();
      Complex complex3 = Complex.ONE;
      complex3.tanh();
      complex2.I.multiply(complex3);
      Complex complex4 = complex0.cos();
      complex2.ONE.sqrt();
      Complex complex5 = complex0.NaN.sin();
      complex4.sin();
      complex1.getArgument();
      complex4.ONE.asin();
      complex2.readResolve();
      complex1.sin();
      Complex complex6 = complex4.atan();
      complex4.divide((-3561.592569556224));
      Complex.valueOf((-1017.4233053909553), (double) 17);
      complex5.readResolve();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-1.8592937532754405E-9), 762.836398041);
      complex0.ONE.nthRoot(1135);
      Complex complex1 = complex0.INF.sqrt();
      complex1.ONE.add((-1.2470243596102937E-8));
      Complex complex2 = complex1.divide((-1.2470243596102937E-8));
      Complex complex3 = complex1.cos();
      complex1.INF.sqrt1z();
      Complex complex4 = complex0.reciprocal();
      complex4.ZERO.add(complex3);
      complex3.isInfinite();
      complex2.nthRoot(1135);
      complex0.acos();
      Complex.valueOf((-1.8592937532754405E-9), 762.836398041);
      Complex complex5 = complex2.add((-4.6834239957353325E-8));
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.tanh();
      complex1.INF.hashCode();
      complex1.getArgument();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      complex0.createComplex((-705.79271152), (-0.02772483955419844));
      complex2.sin();
      Complex complex4 = Complex.valueOf((-4.291442973297185E-4), (-6.930491127388755E-8));
      Complex complex5 = complex2.asin();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex4.multiply(complex1);
      Complex complex8 = complex2.divide(0.0);
      Complex complex9 = complex0.sin();
      complex2.readResolve();
      Complex complex10 = Complex.I;
      complex9.equals(complex0);
      complex3.reciprocal();
      complex4.pow(472.5408095051);
      complex8.hashCode();
      complex5.multiply(complex1);
      complex9.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex6.sinh();
      Complex complex11 = Complex.valueOf(7.550232205551039, 0.0);
      complex7.ZERO.asin();
      complex11.atan();
      Complex.valueOf((-1205.328388), 2.0);
      complex10.abs();
      complex1.equals(complex7);
      complex7.subtract(472.5408095051);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.subtract(0.0);
      Complex complex6 = complex4.I.subtract(0.0);
      Complex complex7 = complex0.add(0.0);
      complex7.ONE.getField();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex3.createComplex(0.0, 0.0);
      complex4.equals(complex0);
      Complex complex9 = complex8.sinh();
      Complex.valueOf(0.0);
      Complex complex10 = Complex.INF;
      complex0.abs();
      Complex complex11 = complex9.sinh();
      complex11.ONE.divide(0.0);
      Complex complex12 = complex8.add(complex6);
      Complex complex13 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex4.negate();
      complex6.sqrt1z();
      complex12.acos();
      complex5.getImaginary();
      Complex complex14 = complex13.sin();
      Complex complex15 = complex14.tanh();
      complex3.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2319.36));
      complex0.toString();
      Complex complex1 = complex0.createComplex((-2.238614484037969E-159), (-2.238614484037969E-159));
      Complex complex2 = complex0.createComplex((-2319.36), (-2.238614484037969E-159));
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf((-1598.4569), (-2.238614484037969E-159));
      complex1.asin();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex0.multiply(complex1);
      complex3.divide((-2.238614484037969E-159));
      Complex complex7 = complex5.sin();
      complex2.readResolve();
      Complex complex8 = Complex.I;
      complex4.equals(complex3);
      Complex complex9 = complex7.pow((-903624.788743617));
      complex5.hashCode();
      Complex complex10 = complex4.multiply(complex8);
      complex6.createComplex(0.5584990978240967, 1152.7);
      Complex complex11 = new Complex((-2319.36));
      complex11.sinh();
      complex10.atan();
      Complex.valueOf(874.42, (-2319.36));
      complex8.abs();
      complex9.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(950.59233572737);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.add(complex1);
      complex3.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex2.sinh();
      complex5.exp();
      Complex complex7 = Complex.valueOf(950.59233572737, Double.NaN);
      Complex complex8 = complex7.pow(complex6);
      complex3.acos();
      complex8.divide(complex0);
      Complex complex9 = Complex.I;
      try { 
        complex9.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(981.3335, 4.2914407451687884E-4);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.divide(complex1);
      complex2.subtract(complex1);
      complex2.log();
      Complex complex3 = Complex.valueOf((-2.013999442282902E-7), 1.0);
      Complex complex4 = complex3.subtract((-887.2104236386359));
      Complex complex5 = Complex.valueOf(1.4399358260219398E-7);
      Complex complex6 = complex5.subtract(4.2914407451687884E-4);
      complex1.add((-453.3944));
      complex6.getField();
      Complex complex7 = Complex.valueOf(Double.NaN, 0.001823762583876815);
      complex7.hashCode();
      Complex complex8 = complex5.add(complex6);
      Complex complex9 = complex5.multiply(557);
      Complex complex10 = complex8.pow(complex0);
      complex9.negate();
      complex10.nthRoot(557);
      complex9.sqrt1z();
      complex1.atan();
      complex4.sinh();
      complex7.toString();
      Complex complex11 = Complex.valueOf(Double.NaN, 715.6385492088);
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      Complex complex1 = complex0.ONE.tan();
      complex0.conjugate();
      complex0.toString();
      complex0.cosh();
      complex0.NaN.toString();
      Complex complex2 = complex0.I.createComplex((-2126.654155564), (-796.42));
      Complex complex3 = complex0.createComplex((-796.42), 0.0);
      complex2.I.sin();
      Complex complex4 = Complex.valueOf((-2126.654155564), (-2126.654155564));
      complex3.NaN.asin();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.multiply(complex2);
      Complex complex7 = complex6.INF.divide((-2126.654155564));
      Complex complex8 = complex7.ZERO.sin();
      complex3.readResolve();
      Complex complex9 = Complex.I;
      Complex complex10 = complex7.pow(complex8);
      Complex complex11 = Complex.NaN;
      complex11.acos();
      Complex complex12 = complex1.divide(complex4);
      complex12.subtract(complex5);
      complex10.getArgument();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2319.36));
      Complex complex1 = new Complex(2544.35423343081, (-2319.36));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex((-414.050927));
      Complex complex4 = complex3.createComplex((-2588.5218329), 2544.35423343081);
      Complex complex5 = complex4.sinh();
      complex1.atan();
      Complex.valueOf((-2217.5499278734214), -0.0);
      complex0.abs();
      Complex complex6 = Complex.ZERO;
      complex3.equals(complex6);
      complex5.getReal();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      complex0.ONE.tan();
      Complex complex1 = complex0.conjugate();
      complex0.toString();
      Complex complex2 = complex0.cosh();
      complex0.NaN.toString();
      Complex complex3 = complex0.I.createComplex((-2126.654155564), (-796.42));
      Complex complex4 = complex0.createComplex((-796.42), 0.0);
      complex3.I.sin();
      Complex complex5 = Complex.valueOf((-2126.654155564), (-2126.654155564));
      complex4.NaN.asin();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.INF.multiply(complex3);
      Complex complex8 = complex7.INF.divide((-2126.654155564));
      complex8.ZERO.sin();
      complex4.readResolve();
      Complex complex9 = Complex.I;
      complex4.equals(complex9);
      complex5.I.reciprocal();
      Complex complex10 = complex0.pow(0.0);
      complex10.INF.hashCode();
      complex4.multiply(complex1);
      complex8.NaN.createComplex(0.0, 0.0);
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex8.atan();
      complex12.ONE.negate();
      Complex.valueOf((-796.42), 1930.4120375242);
      complex1.abs();
      complex5.equals(complex7);
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf((-1510.1443385948953));
      Complex complex3 = complex2.sqrt1z();
      complex3.sqrt1z();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      complex0.ONE.tan();
      Complex complex1 = complex0.conjugate();
      complex0.toString();
      Complex complex2 = complex0.cosh();
      complex0.NaN.toString();
      Complex complex3 = complex0.I.createComplex((-2126.654155564), (-796.42));
      Complex complex4 = complex0.createComplex((-796.42), 0.0);
      complex3.I.sin();
      Complex complex5 = Complex.valueOf((-2126.654155564), (-2126.654155564));
      Complex complex6 = complex4.NaN.asin();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.INF.multiply(complex3);
      complex8.INF.divide((-2126.654155564));
      complex8.asin();
      complex1.divide(0.9999983369436359);
      Complex complex9 = complex6.exp();
      complex2.acos();
      Complex complex10 = complex9.acos();
      complex1.divide(complex10);
      complex1.equals("(NaN, NaN)");
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-868.179), 221.3);
      Complex complex1 = Complex.valueOf(221.3);
      Complex complex2 = complex1.INF.add((-2.9020908354550263E-153));
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.NaN.subtract((-2.9020908354550263E-153));
      Complex complex6 = complex5.sin();
      complex0.readResolve();
      Complex complex7 = Complex.I;
      complex7.equals(complex6);
      Complex complex8 = Complex.INF;
      complex8.reciprocal();
      Complex complex9 = Complex.I;
      complex9.pow(221.3);
      complex6.hashCode();
      Complex complex10 = Complex.valueOf((-868.179));
      Complex complex11 = Complex.INF;
      Complex complex12 = complex10.multiply(complex11);
      Complex complex13 = new Complex((-2.9020908354550263E-153));
      Complex complex14 = new Complex(20.0, 221.3);
      complex14.ZERO.getField();
      complex14.sinh();
      Complex complex15 = complex12.atan();
      Complex.valueOf(2.0, 856.2);
      complex9.abs();
      complex15.equals("SNw8;T0(l*'!)ohCRh");
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      complex0.ONE.tan();
      complex0.conjugate();
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex2 = complex0.I.createComplex((-2126.654155564), (-796.42));
      Complex complex3 = complex0.createComplex((-796.42), 0.0);
      complex2.I.sin();
      Complex.valueOf((-2126.654155564), (-2126.654155564));
      complex3.NaN.asin();
      Complex complex4 = complex0.conjugate();
      complex4.INF.multiply(complex2);
      Complex complex5 = Complex.INF;
      complex0.atan();
      complex2.add(0.0);
      Complex.valueOf((-2126.654155564));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-37.7382913));
      Complex.valueOf((-2413.16), (-2413.16));
      complex1.abs();
      Complex complex2 = new Complex(1930.4120375242);
      Complex.valueOf((-1.552830824758035E-8), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = new Complex(2.0, 2.0);
          Complex complex1 = complex0.I.sqrt1z();
          complex1.I.multiply(complex0);
          Complex complex2 = complex0.tanh();
          complex2.INF.hashCode();
          complex2.getArgument();
          Complex complex3 = complex2.subtract(complex0);
          Complex complex4 = complex2.log();
          Complex complex5 = complex4.subtract(2.0);
          Complex complex6 = complex0.subtract(2233.764016452074);
          Complex complex7 = complex2.add(1265.73403);
          complex7.getField();
          Complex.valueOf(1654.442327698, (-3.920012014371067E-9));
          complex6.hashCode();
          Complex complex8 = Complex.valueOf((-0.02772483955419844), (-20.0));
          complex7.add(complex8);
          complex5.multiply(651);
          complex6.pow(complex3);
          complex5.negate();
          // Undeclared exception!
          complex7.nthRoot(2142403958);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.tan();
      complex3.isInfinite();
      complex1.NaN.getField();
      Complex complex4 = complex1.pow(0.0);
      complex4.reciprocal();
      Complex complex5 = complex1.ONE.add(complex3);
      complex4.NaN.negate();
      complex4.createComplex(0.0, 4359.64499815);
      complex0.acos();
      complex2.createComplex(4359.64499815, 3828.3);
      complex5.negate();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.tanh();
      complex5.isNaN();
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2096.0), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.asin();
      complex2.ONE.acos();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.INF.divide(1437.154303331643);
      complex4.getField();
      complex0.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.subtract(complex4);
      Complex complex6 = complex0.INF.sqrt1z();
      complex3.getArgument();
      complex0.equals(complex4);
      complex4.pow(20.0);
      Complex.valueOf(0.0);
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-22.2));
      Complex complex1 = complex0.asin();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.sinh();
      complex0.I.getArgument();
      complex0.NaN.hashCode();
      complex0.nthRoot(1009);
      Complex complex1 = complex0.multiply(144);
      complex1.isInfinite();
      complex1.getReal();
      Complex complex2 = complex1.atan();
      complex0.I.sqrt1z();
      complex2.NaN.subtract(0.0);
      complex0.hashCode();
      Complex complex3 = complex1.sin();
      complex3.I.hashCode();
      complex3.multiply(1028);
      Complex complex4 = complex1.acos();
      complex1.subtract(complex4);
      complex0.hashCode();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(415.88);
      complex0.ZERO.getArgument();
      Complex complex1 = Complex.valueOf((-2551.9));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.exp();
      complex3.INF.cos();
      complex2.I.conjugate();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ONE.multiply(1);
      complex6.ONE.conjugate();
      Complex complex7 = complex5.pow(complex4);
      complex5.multiply((-2551.9));
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.createComplex(0.0, 2025.53473605);
      complex9.abs();
      Complex complex10 = complex2.asin();
      Complex.valueOf(1.0);
      complex0.toString();
      Complex complex11 = Complex.I;
      complex10.subtract(complex11);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1.1551692104697154E-8);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      complex1.ZERO.abs();
      complex1.NaN.sinh();
      Complex complex3 = complex0.INF.divide(1.1551692104697154E-8);
      complex2.NaN.abs();
      Complex complex4 = complex0.INF.divide(complex2);
      complex4.NaN.pow(complex1);
      Complex complex5 = complex4.multiply((-2253));
      complex0.toString();
      complex1.log();
      complex5.INF.add(0.0);
      complex0.nthRoot(876);
      complex2.readResolve();
      Complex complex6 = complex5.ONE.exp();
      complex6.NaN.readResolve();
      complex6.ZERO.asin();
      Complex complex7 = complex2.divide(complex3);
      complex5.pow((double) (-2253));
      Complex complex8 = complex4.conjugate();
      complex8.abs();
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.multiply(0.0);
      Complex complex11 = complex4.cosh();
      complex7.negate();
      complex11.multiply(complex7);
      complex7.reciprocal();
      complex10.multiply(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2123.226);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply(2123.226);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.subtract((-1353.8685842654));
      complex3.multiply((-1918));
      Complex complex4 = complex3.ONE.sinh();
      complex3.INF.getArgument();
      Complex complex5 = complex4.conjugate();
      complex5.I.exp();
      complex4.NaN.multiply(complex0);
      Complex complex6 = complex2.I.createComplex(2123.226, (-1353.8685842654));
      complex2.isInfinite();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex0.add((double) (-1918));
      complex1.sqrt();
      complex2.multiply(2123.226);
      complex8.ZERO.readResolve();
      Complex complex9 = Complex.valueOf(41.34832085);
      complex7.acos();
      complex3.pow(complex8);
      Complex complex10 = complex8.sinh();
      complex10.multiply(3510);
      Complex complex11 = complex9.divide((-78.1804282376197));
      complex11.NaN.multiply(0);
      Complex complex12 = complex6.add(complex2);
      complex12.ONE.readResolve();
      complex4.getArgument();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-868.179), 221.3);
      Complex complex1 = Complex.valueOf(221.3);
      Complex complex2 = complex1.INF.add((-2.9020908354550263E-153));
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.NaN.subtract((-2.9020908354550263E-153));
      complex4.I.asin();
      Complex complex5 = complex0.divide((-1542.2798));
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.acos();
      complex0.acos();
      complex7.divide(complex6);
      complex2.equals(complex5);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex0.subtract(complex3);
      complex4.ZERO.sin();
      complex5.hashCode();
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex6.ONE.asin();
      complex7.NaN.divide(complex5);
      complex7.I.hashCode();
      complex0.add(complex6);
      complex4.ZERO.negate();
      complex5.ZERO.toString();
      complex2.asin();
      complex5.cos();
      complex4.sin();
      complex1.getArgument();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ZERO.sinh();
      complex0.isNaN();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.ONE.add(complex2);
      complex5.NaN.log();
      Complex complex6 = complex4.ONE.subtract(3.280586734644871E82);
      Complex complex7 = complex1.asin();
      complex3.atan();
      complex1.getArgument();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.cosh();
      complex9.ZERO.sinh();
      complex9.I.add(complex4);
      complex4.createComplex(0.0, 275.434);
      complex6.multiply(1232);
      Complex complex10 = complex2.acos();
      complex10.ONE.sinh();
      complex4.acos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      complex1.tanh();
      Complex complex2 = complex1.exp();
      int int0 = (-2514);
      complex2.NaN.conjugate();
      complex2.NaN.sqrt1z();
      complex2.NaN.toString();
      try { 
        complex0.nthRoot((-2514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,514
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.NaN.sin();
      complex0.isInfinite();
      Complex complex4 = Complex.valueOf((-532.343612));
      complex3.NaN.subtract(complex2);
      Complex complex5 = complex4.NaN.multiply((-532.343612));
      complex3.INF.sin();
      Complex complex6 = complex3.multiply(755);
      Complex complex7 = complex5.INF.sinh();
      complex6.ONE.readResolve();
      complex4.readResolve();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex5.reciprocal();
      complex8.NaN.atan();
      Complex complex10 = complex9.INF.multiply(1.0340436948077763E-129);
      Complex complex11 = Complex.valueOf((-532.343612), (double) 755);
      Complex complex12 = Complex.valueOf((double) 755, 0.0);
      complex12.hashCode();
      complex8.getArgument();
      complex7.ZERO.nthRoot(755);
      complex0.cos();
      Complex complex13 = complex12.subtract(6.283185307179586);
      complex13.INF.add((-3562.78703));
      complex13.atan();
      complex7.nthRoot(755);
      complex1.acos();
      Complex.valueOf(Double.NaN);
      complex11.add(complex10);
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex2.ZERO.subtract(complex1);
      Complex complex3 = complex0.log();
      complex1.subtract(0.0);
      complex3.I.subtract(0.0);
      Complex complex4 = complex0.add(0.0);
      complex4.ONE.getField();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.INF.hashCode();
      complex5.ONE.add(complex1);
      complex5.ONE.multiply(651);
      Complex complex6 = complex3.pow(complex0);
      complex3.INF.negate();
      complex6.NaN.nthRoot(651);
      Complex complex7 = complex5.sqrt1z();
      complex7.INF.atan();
      complex3.I.sinh();
      complex1.toString();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1468.4), 2238.0);
      Complex complex1 = Complex.NaN;
      complex0.ONE.multiply(complex1);
      Complex complex2 = complex0.atan();
      complex2.ONE.sqrt();
      complex2.ONE.asin();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.INF.pow((-2.9726830960751796E-9));
      complex0.isNaN();
      Complex complex2 = complex1.NaN.tanh();
      complex2.INF.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      complex3.ONE.log();
      complex3.tanh();
      complex3.isNaN();
      Complex complex4 = Complex.valueOf(2.0);
      complex2.sinh();
      complex4.NaN.cosh();
      complex1.hashCode();
      complex1.isInfinite();
      complex1.abs();
      complex1.hashCode();
      Complex complex5 = complex2.tanh();
      complex5.subtract(2.0);
      complex2.log();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3484.41, 0.0);
      Complex complex1 = complex0.createComplex((-2896.03715311), 3484.41);
      complex0.NaN.hashCode();
      complex1.equals(complex0);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.valueOf(3484.41);
      Complex complex5 = complex0.pow((-2896.03715311));
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex2.createComplex(0.0, 0.0);
      complex7.I.pow(complex6);
      complex7.conjugate();
      Complex.valueOf((-2896.03715311));
      complex3.tanh();
      complex2.multiply(complex1);
      complex4.getArgument();
      complex0.I.getField();
      Complex complex8 = complex2.add(1088.34532718842);
      complex8.ONE.multiply((-1045));
      complex8.ZERO.conjugate();
      Complex complex9 = complex1.pow(0.0);
      complex9.I.multiply(3484.41);
      complex4.tan();
      complex4.createComplex((-4208.097379498467), 0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 1096.633056640625);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex2.reciprocal();
      complex2.ZERO.abs();
      Complex complex5 = complex0.INF.sin();
      complex5.NaN.getField();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex4.I.divide(complex1);
      complex6.hashCode();
      complex5.multiply(720.0);
      complex4.asin();
      Complex complex8 = complex6.negate();
      complex1.isInfinite();
      complex8.ONE.pow(0.0);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex8.cos();
      Complex complex11 = Complex.valueOf(6.283185307179586);
      complex11.NaN.toString();
      Complex complex12 = complex3.multiply(complex10);
      complex12.isNaN();
      complex2.toString();
      complex7.atan();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.tanh();
      complex1.INF.hashCode();
      complex1.getArgument();
      complex0.NaN.reciprocal();
      Complex complex2 = Complex.valueOf((-705.79271152));
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex1.cos();
      complex0.sqrt1z();
      Complex complex7 = complex6.sin();
      complex3.getArgument();
      complex7.ZERO.pow((-1684.98));
      Complex complex8 = complex5.exp();
      complex8.NaN.getArgument();
      complex4.reciprocal();
      Complex.valueOf(2.0);
      complex0.cos();
      complex1.createComplex((-5064.8813), 0.0);
      complex0.createComplex(6.283185307179586, (-1215.665805));
      complex2.asin();
      Complex complex9 = complex2.acos();
      complex9.INF.sinh();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(1.0);
      complex0.INF.abs();
      complex0.isNaN();
      Complex complex2 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.NaN;
      complex0.I.toString();
      complex1.subtract(1.0);
      complex1.I.divide(complex0);
      Complex complex4 = complex0.NaN.add(complex3);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex1.reciprocal();
      Complex.valueOf(681.2257337, 1.0);
      complex4.ONE.getField();
      complex2.nthRoot(445);
      complex4.reciprocal();
      complex5.getReal();
      Complex complex7 = complex6.exp();
      complex7.readResolve();
      complex7.multiply(445);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1420.932);
      complex0.NaN.getField();
      Complex complex1 = complex0.INF.add((-5353.57749));
      Complex complex2 = complex0.tan();
      complex0.hashCode();
      Complex complex3 = complex1.INF.createComplex((-5353.57749), 1923.2554415);
      Complex complex4 = complex1.sinh();
      complex0.isInfinite();
      complex1.ZERO.toString();
      complex0.exp();
      Complex complex5 = complex0.tanh();
      complex5.abs();
      complex1.I.multiply((-705.737));
      complex5.I.acos();
      complex3.subtract(1.0);
      complex4.conjugate();
      Complex complex6 = complex4.NaN.divide(2423.4887268856);
      complex6.ONE.add(0.0);
      Complex.valueOf((-356.678797608), 1420.932);
      Complex complex7 = complex4.divide(complex2);
      complex3.getField();
      complex4.subtract(0.3063063621520996);
      Complex complex8 = complex1.sin();
      complex8.asin();
      complex7.asin();
      complex4.getArgument();
      complex4.divide(complex8);
      complex0.getField();
      complex2.cos();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(280.59, 280.59);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.sin();
      complex2.NaN.sqrt1z();
      Complex complex4 = Complex.I;
      complex3.ONE.add(complex4);
      complex3.sqrt();
      complex2.ZERO.pow(complex1);
      Complex.valueOf(0.0, 0.0);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3925.515759987, (-20.0));
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ONE.pow((-20.0));
      Complex complex4 = complex1.INF.divide(0.0);
      complex4.INF.subtract(complex1);
      complex0.equals((Object) null);
      complex0.getArgument();
      Complex complex5 = complex1.acos();
      complex5.acos();
      complex5.INF.sqrt();
      complex5.NaN.reciprocal();
      complex1.getArgument();
      Complex complex6 = complex3.add(complex0);
      complex1.pow(0.0);
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.valueOf(2054.1174, 1801.580043919);
      complex8.ONE.divide(complex6);
      complex6.reciprocal();
      complex2.conjugate();
      complex3.sqrt();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-796.42));
      complex0.ONE.tan();
      Complex complex1 = complex0.conjugate();
      complex0.toString();
      Complex complex2 = complex0.cosh();
      complex0.NaN.toString();
      Complex complex3 = complex0.I.createComplex((-2126.654155564), (-796.42));
      Complex complex4 = complex0.createComplex((-796.42), 0.0);
      complex3.I.sin();
      Complex complex5 = Complex.valueOf((-2126.654155564), (-2126.654155564));
      complex4.NaN.asin();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.INF.multiply(complex3);
      Complex complex8 = complex7.INF.divide((-2126.654155564));
      complex8.ZERO.sin();
      complex4.readResolve();
      Complex complex9 = Complex.I;
      complex4.equals(complex9);
      complex5.I.reciprocal();
      Complex complex10 = complex0.pow(0.0);
      complex10.INF.hashCode();
      complex4.multiply(complex1);
      complex8.NaN.createComplex(0.0, 0.0);
      complex2.sinh();
      complex8.atan();
      Complex.valueOf((-796.42), 1930.4120375242);
      complex1.abs();
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.atan();
      complex1.I.log();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex3.INF.subtract(0.0);
      complex2.getArgument();
      complex0.equals(complex1);
      complex2.I.abs();
      Complex complex5 = Complex.valueOf((-1906.0), 1113.519);
      complex1.abs();
      Complex complex6 = complex1.pow((-1906.0));
      complex6.ONE.add(complex1);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex1.sqrt1z();
      complex9.INF.multiply(1358);
      complex9.ZERO.log();
      Complex complex10 = complex3.NaN.cos();
      Complex complex11 = complex4.pow(239.366248169391);
      complex7.toString();
      complex0.multiply(0);
      complex0.atan();
      complex8.multiply((-1654.660131339873));
      complex6.acos();
      complex3.cosh();
      Complex complex12 = complex11.negate();
      complex12.divide(complex3);
      complex10.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.abs();
      complex0.hashCode();
      complex0.createComplex(20.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex0.INF.readResolve();
      Complex complex2 = complex0.ONE.subtract(9.699937202692456E-8);
      Complex complex3 = complex0.ONE.sqrt();
      complex3.I.hashCode();
      complex0.sin();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.I.pow(complex2);
      complex5.ONE.exp();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(112.39849468827119);
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.hashCode();
      complex0.ONE.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex6.ZERO.acos();
      complex4.INF.getField();
      complex6.ONE.getField();
      complex3.nthRoot(540);
      complex7.INF.multiply(complex6);
      Complex complex8 = Complex.valueOf(1.0);
      complex8.INF.divide(complex2);
      complex3.isNaN();
      complex4.sqrt1z();
      Complex complex9 = complex7.cos();
      complex9.equals(complex5);
      complex7.isInfinite();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1.530926726615185E-8));
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex0.ZERO.log();
      Complex complex7 = complex5.NaN.sinh();
      complex0.getField();
      Complex complex8 = complex0.multiply(2.5217716516462005E-184);
      Complex complex9 = complex8.NaN.multiply(0.0);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf((-8.244395239939089E-9));
      Complex complex11 = complex10.pow(0.0);
      complex11.I.negate();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = complex3.tanh();
      Complex complex14 = complex10.exp();
      complex12.INF.getField();
      complex6.readResolve();
      double double0 = complex3.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex12.getReal();
      Complex.valueOf(2.5217716516462005E-184);
      Complex complex15 = complex5.sqrt1z();
      Complex complex16 = complex14.pow(complex4);
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertTrue(complex16.equals((Object)complex11));
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(0.9999999917556048, complex14.getReal(), 0.01);
      
      Complex complex17 = complex15.sin();
      assertSame(complex15, complex13);
      assertSame(complex17, complex9);
      
      Complex complex18 = complex6.tan();
      assertSame(complex18, complex7);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.getArgument();
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.subtract((-20.0));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.NaN.atan();
      assertNotSame(complex4, complex1);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.add(863.4619);
      assertEquals(862.4619, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = Complex.valueOf(2.970445258959489E-73);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(128.07114513154025);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow((-1943.624079225));
      Complex complex2 = complex1.ONE.sqrt();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.atan();
      complex4.isNaN();
      Complex complex5 = complex4.add(937.95796215);
      assertSame(complex5, complex1);
      assertSame(complex0, complex3);
      assertFalse(complex5.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-748.0307181759), (-1.0965324942770584E171));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.createComplex((-748.0307181759), (-1.0965324942770584E171));
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = (Complex)complex3.readResolve();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.NaN.add(0.0);
      Complex complex6 = complex5.ZERO.pow(complex1);
      assertNotSame(complex6, complex5);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      
      List<Complex> list0 = complex1.nthRoot(1170);
      assertTrue(list0.contains(complex1));
      
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.createComplex(1170, 1.0);
      Complex complex9 = complex8.cos();
      assertTrue(complex7.equals((Object)complex6));
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertTrue(complex7.equals((Object)complex5));
      assertEquals((-1.1405998274373093), complex9.getImaginary(), 0.01);
      assertEquals(0.37168380730459233, complex9.getReal(), 0.01);
      
      complex2.hashCode();
      assertEquals((-1.0965324942770584E171), complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-2349.757552), (-2349.757552));
      Complex complex2 = complex1.INF.add(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      
      Complex complex3 = Complex.valueOf((-2349.757552));
      Complex complex4 = complex3.divide(0.0);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals((-2349.757552), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-794.885852059), (-794.885852059));
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      String string0 = complex0.toString();
      assertEquals("(-794.885852059, -794.885852059)", string0);
      
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.add(complex2);
      double double0 = complex1.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.isInfinite());
      
      Complex complex4 = complex2.sinh();
      assertSame(complex4, complex3);
      assertFalse(complex4.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      Complex complex2 = complex1.cosh();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.tan();
      complex3.isInfinite();
      complex1.NaN.getField();
      Complex complex4 = complex1.pow(0.0);
      complex1.ZERO.cos();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.ONE.add(complex3);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.557407724654902, complex6.getReal(), 0.01);
      
      complex4.NaN.negate();
      complex4.createComplex(2.3182239583484444E255, 4359.64499815);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex5.atan();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex8.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = Complex.valueOf(1.1460491592124923E102);
      Complex complex11 = complex10.INF.asin();
      assertSame(complex11, complex9);
      
      Complex complex12 = complex7.sqrt1z();
      assertFalse(complex12.equals((Object)complex9));
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.negate();
      complex0.hashCode();
      assertFalse(complex0.equals((Object)complex1));
      assertSame(complex0, complex3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf((-163.372187), (-163.372187));
      assertEquals((-163.372187), complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.ONE.tanh();
      assertEquals(0.7615941559557649, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      complex0.conjugate();
      Complex complex4 = complex0.exp();
      complex4.ZERO.createComplex((-4133.37408358), (-2190.272307));
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.acos();
      assertEquals((-0.764725154011207), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.subtract(0.0);
      assertEquals(0.0, complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.178019529487065E-8, 0.0);
      Complex complex1 = complex0.NaN.asin();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.sinh();
      complex2.isNaN();
      double double0 = complex2.abs();
      assertEquals(8.178019529487074E-8, double0, 0.01);
      assertEquals(8.178019529487065E-8, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(8.178019529487074E-8, complex2.getReal(), 0.01);
  }
}
