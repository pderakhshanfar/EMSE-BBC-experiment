/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:04:38 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.atan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(20.0);
      complex1.pow(complex0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = new Complex(2803.9691462301457);
      Complex complex2 = new Complex(2803.9691462301457, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      complex2.multiply(2803.9691462301457);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.valueOf(5.333371443528904E204, (-1616.3766883946093));
      complex0.pow(complex1);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex1.I.abs();
      Complex complex2 = Complex.valueOf((-20.4082), (-321.392972410329));
      complex1.isInfinite();
      Complex complex3 = complex0.tanh();
      complex0.I.tanh();
      Complex complex4 = complex3.multiply(1);
      complex4.exp();
      Complex complex5 = Complex.valueOf(2173.494512025816, (-20.0));
      complex5.tan();
      complex2.sinh();
      complex2.subtract((double) 1);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = new Complex(0.0, 0.0);
      complex3.isInfinite();
      Complex complex4 = complex2.tanh();
      complex2.pow((-898.861));
      Complex complex5 = complex4.sin();
      complex5.nthRoot(4170);
      Complex complex6 = Complex.INF;
      complex6.cosh();
      Complex.valueOf((-898.861), 718.15395);
      complex4.add(0.0);
      Complex complex7 = Complex.ZERO;
      complex7.atan();
      Complex complex8 = new Complex((-20.4082), 2412.1701529287234);
      complex8.multiply(4170);
      complex3.exp();
      Complex.valueOf(2412.1701529287234, (-0.7270472698187972));
      complex1.tan();
      Complex complex9 = Complex.ZERO;
      complex9.sinh();
      complex4.subtract(2412.1701529287234);
      Complex complex10 = new Complex(0.0, (-975.194987073));
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.isInfinite();
      complex1.tanh();
      Complex complex2 = Complex.INF;
      complex2.tanh();
      complex2.hashCode();
      Complex.valueOf((-1780.531787644), Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      complex3.getArgument();
      Complex complex4 = complex2.tan();
      complex2.divide(complex4);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(1.812535285949707);
      Complex complex2 = Complex.NaN;
      complex1.ONE.add(complex2);
      complex1.subtract((-43.381805541376));
      Complex complex3 = complex0.subtract(6.23165710486722E298);
      Complex complex4 = complex1.multiply((-604));
      complex3.acos();
      Complex complex5 = complex4.I.divide(6.23165710486722E298);
      complex4.subtract((double) (-604));
      Complex complex6 = complex5.I.multiply((-604));
      complex6.I.sqrt1z();
      Complex complex7 = complex3.log();
      complex7.I.sin();
      complex1.exp();
      Complex complex8 = complex7.cos();
      complex4.getField();
      Complex.valueOf(6.23165710486722E298);
      complex3.getField();
      complex8.multiply((-1171.7));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex1.tan();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.negate();
      Complex.valueOf((-20.0), 1214.1);
      complex0.subtract((-2514.8));
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.tan();
      complex0.multiply(553);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex.valueOf(1.0932279207149782E-7);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.INF.subtract(complex1);
      complex0.ZERO.readResolve();
      complex0.abs();
      Complex complex2 = complex0.tanh();
      Complex.valueOf(3.156243682143956E47, Double.NaN);
      Complex complex3 = complex2.I.tan();
      complex2.exp();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-4239.601639528419));
      Complex.valueOf((-4239.601639528419));
      Complex complex1 = Complex.valueOf((-4239.601639528419), 3.5451314095271004E52);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.negate();
      complex3.nthRoot(69);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.I.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.negate();
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(0.8414709848078965);
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex.valueOf(656.1, (-321.392972410329));
      complex1.isInfinite();
      complex1.tanh();
      Complex complex2 = complex0.sin();
      complex2.hashCode();
      Complex complex3 = new Complex(656.1, (-20.40821181022187));
      Complex complex4 = complex3.tan();
      Complex complex5 = new Complex((-321.392972410329));
      complex4.reciprocal();
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      complex2.isInfinite();
      complex1.multiply(3592);
      Complex complex3 = Complex.valueOf(2.7569686255975333E304);
      Complex complex4 = complex3.add(complex2);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.negate();
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract(1121.3094083079286);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      complex0.isInfinite();
      Complex complex2 = complex0.tanh();
      complex1.sin();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-294.054914), 20.0);
      complex3.tan();
      complex1.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      complex1.isInfinite();
      complex1.tanh();
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.asin();
      complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((-294.054914), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.tan();
      complex1.sinh();
      Complex complex5 = complex2.negate();
      Complex.valueOf(0.5508321462928472, (-5.589493227475577E-42));
      complex4.subtract(951.72192828);
      Complex complex6 = Complex.ONE;
      complex5.subtract(complex1);
      Complex complex7 = Complex.ZERO;
      complex7.cosh();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2013.17753));
      complex0.abs();
      Complex complex2 = Complex.valueOf((-2013.17753));
      Complex complex3 = Complex.INF;
      complex3.add((-2201.9986685));
      Complex.valueOf((-2013.17753));
      Complex complex4 = Complex.INF;
      complex4.cos();
      complex1.ZERO.sqrt1z();
      complex3.sin();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1170.4432467232568);
      complex1.isInfinite();
      complex0.tanh();
      Complex complex2 = complex1.sin();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-20.0), (-2476.504972));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sqrt();
      complex4.atan();
      complex5.reciprocal();
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.ZERO;
      complex6.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex1.INF.sinh();
      complex0.ONE.hashCode();
      complex0.sqrt();
      complex1.cosh();
      Complex complex2 = new Complex(0.0, 1130.962528778591);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.add(39.624);
      complex3.sqrt1z();
      Complex complex5 = complex4.cos();
      complex5.toString();
      Complex.valueOf(39.624);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.hashCode();
      complex0.sqrt();
      complex1.cosh();
      Complex complex2 = Complex.INF;
      complex2.getImaginary();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.ZERO.pow(complex0);
      Complex.valueOf(0.0, 0.0);
      complex4.isInfinite();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 28.1468343584);
      Complex complex7 = complex6.tanh();
      complex7.ONE.multiply((-2024));
      complex2.sin();
      complex5.tan();
      complex0.pow(3.9205810725333715E-8);
      complex4.divide(1866.8);
      Complex complex8 = Complex.INF;
      complex4.divide(complex3);
      Complex complex9 = new Complex(-0.0, Double.POSITIVE_INFINITY);
      complex6.sinh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex.valueOf(656.1, (-321.392972410329));
      complex1.isInfinite();
      complex1.tanh();
      Complex complex2 = complex0.sin();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf(656.1, (-20.936749));
      Complex complex4 = complex3.tan();
      complex1.sqrt();
      complex2.atan();
      complex4.reciprocal();
      complex4.cos();
      Complex complex5 = Complex.ZERO;
      complex5.pow((-20.936749));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.361509084701538);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.createComplex((-1133.8), (-1133.8));
      complex3.cosh();
      complex1.readResolve();
      Complex complex4 = complex2.tan();
      Complex complex5 = new Complex(1.361509084701538, 0.0);
      complex5.tan();
      complex5.divide((-1133.8));
      Complex complex6 = Complex.valueOf(0.0, (-698.3958337885));
      Complex complex7 = complex4.divide(complex6);
      complex7.equals(complex0);
      complex1.getReal();
      Complex complex8 = Complex.valueOf(205.48333157006138);
      complex8.cos();
      complex2.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex2.ZERO.conjugate();
      Complex complex3 = new Complex(5.3393125705958075E87, (-3330.924958744673));
      Complex complex4 = complex2.I.pow(complex3);
      complex3.tan();
      Complex complex5 = complex4.ZERO.sqrt();
      complex3.INF.abs();
      Complex complex6 = complex5.I.sqrt();
      complex6.NaN.sin();
      complex4.INF.getArgument();
      Complex complex7 = complex0.subtract(7.952287052787358E165);
      Complex complex8 = complex4.INF.reciprocal();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex7.exp();
      complex10.INF.hashCode();
      Complex complex11 = complex4.sinh();
      complex11.ZERO.sinh();
      complex2.acos();
      Complex complex12 = complex9.reciprocal();
      complex8.INF.acos();
      Complex complex13 = Complex.valueOf(Double.NaN, 5.913639358858715);
      complex13.ONE.add(0.0);
      complex13.NaN.exp();
      complex9.equals(complex8);
      complex12.negate();
      complex12.multiply(7.952287052787358E165);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex2.NaN.negate();
      complex2.hashCode();
      Complex complex5 = complex0.ZERO.divide(0.0);
      Complex complex6 = complex0.exp();
      complex4.hashCode();
      complex3.tanh();
      Complex complex7 = complex4.pow(0.0);
      complex3.hashCode();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex8.sqrt();
      complex9.atan();
      complex7.reciprocal();
      Complex complex10 = complex5.cos();
      complex0.pow(468.0);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.createComplex(6.283185307179586, (-1133.8));
      complex0.tan();
      complex0.tan();
      Complex complex2 = complex1.pow(6.283185307179586);
      Complex complex3 = complex2.divide(668.6918);
      complex3.divide(complex0);
      complex0.equals(complex1);
      complex3.getReal();
      Complex complex4 = Complex.valueOf((-1027.77589566));
      complex4.ZERO.createComplex(6.283185307179586, 0.0);
      Complex complex5 = complex2.cos();
      complex5.equals("<LD#");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.41421356237309515, (-1.1909272509710985E100));
      complex0.abs();
      complex0.conjugate();
      complex0.hashCode();
      Complex complex1 = complex0.sqrt();
      complex0.hashCode();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.pow(843.4279016556729);
      complex0.hashCode();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.atan();
      complex1.reciprocal();
      complex7.cos();
      complex4.pow((-2467.273370377817));
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.hashCode();
      complex0.sqrt();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.INF;
      complex3.getImaginary();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex3.sinh();
      Complex.valueOf(0.0, 0.0);
      complex5.isInfinite();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 28.1468343584);
      complex8.tanh();
      complex3.sin();
      complex7.tan();
      Complex complex9 = complex0.pow(3.9205810725333715E-8);
      complex6.divide(1866.8);
      Complex complex10 = Complex.INF;
      complex5.divide(complex4);
      Complex complex11 = new Complex(-0.0, Double.POSITIVE_INFINITY);
      complex0.equals(complex8);
      Complex complex12 = Complex.NaN;
      complex1.getReal();
      Complex.valueOf(28.1468343584);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      complex2.ZERO.multiply(complex1);
      double double0 = (-678.53851931569);
      Complex complex3 = complex0.tanh();
      try { 
        complex3.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(6.283185307179586, (-1133.8));
      complex0.tan();
      complex1.pow(6.283185307179586);
      Complex complex2 = new Complex(0.0);
      complex1.multiply(1518500289);
      Object object0 = new Object();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-3765.9029), 1475.238501);
      complex0.I.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.I.multiply(4997);
      complex1.NaN.getField();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex3.INF.multiply(4997);
      complex5.NaN.sinh();
      Complex complex6 = complex0.conjugate();
      complex6.I.getField();
      complex2.ONE.atan();
      Complex complex7 = complex1.tan();
      complex7.ONE.toString();
      Complex.valueOf((double) 4997);
      complex4.sinh();
      complex7.pow(complex4);
      complex4.equals(complex2);
      complex2.conjugate();
      Complex complex8 = Complex.ONE;
      complex1.divide(complex8);
      Complex complex9 = Complex.valueOf(425.55, 1475.238501);
      Complex.valueOf(0.6223390102386475);
      complex1.conjugate();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex.valueOf(3134.57);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.multiply(4996);
      complex1.getField();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.createComplex(0.0, (-390.583));
      complex5.readResolve();
      complex4.tan();
      complex1.tan();
      Complex complex7 = Complex.valueOf(20.0);
      complex7.pow((-703.32339194));
      Complex complex8 = Complex.INF;
      complex0.divide(complex8);
      complex2.equals(complex3);
      complex1.getReal();
      Complex.valueOf(774.86779);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex.valueOf((-1759.446226007));
      Complex complex1 = complex0.multiply((-603));
      complex0.getField();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.negate();
      complex3.createComplex(20.0, (-2297.4305516535005));
      complex0.readResolve();
      Complex complex4 = new Complex(1298.439, 440.7963120803);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex4.pow(3789.0);
      Complex complex8 = Complex.INF;
      complex6.divide(complex5);
      complex7.equals(complex3);
      complex2.getReal();
      Complex.valueOf(0.7071067811865475);
      complex5.cos();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.subtract((-1.0));
      Complex complex2 = complex0.conjugate();
      complex2.hashCode();
      Complex complex3 = complex2.sqrt();
      complex3.hashCode();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.pow((-1785.36133388065));
      complex1.hashCode();
      complex5.tan();
      Complex complex7 = complex6.sqrt();
      complex4.atan();
      complex6.reciprocal();
      complex7.cos();
      complex5.pow(38.026522445);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(6.283185307179586, (-1133.8));
      complex0.readResolve();
      complex0.tan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.pow(6.283185307179586);
      Complex complex4 = complex3.divide(668.6918);
      Complex complex5 = Complex.INF;
      complex4.divide(complex0);
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.divide(complex4);
      Complex complex8 = new Complex(801.722121273143, (-1133.8));
      Object object0 = new Object();
      complex2.equals(object0);
      complex3.getReal();
      Complex.valueOf(801.722121273143);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.62880163941313E-60, 744.6136032);
      Complex complex1 = complex0.add((-777.5));
      complex1.exp();
      Complex complex2 = complex0.add(1.7578073785142153E246);
      Complex complex3 = complex2.multiply(781);
      complex2.I.createComplex(744.6136032, (-1899.074126235));
      complex3.ONE.sinh();
      Complex complex4 = Complex.valueOf(744.6136032, (-777.5));
      Complex.valueOf(1.7578073785142153E246);
      Complex complex5 = Complex.valueOf(8.62880163941313E-60, 0.7071067811865475);
      Complex complex6 = complex5.ZERO.subtract(complex2);
      Complex complex7 = complex1.multiply(complex5);
      complex2.INF.subtract(1.7578073785142153E246);
      complex7.toString();
      complex6.conjugate();
      Complex complex8 = complex2.ONE.sqrt();
      Complex complex9 = complex8.ONE.cosh();
      complex9.I.pow((-781.3725));
      Complex complex10 = new Complex((-604505.25), 76.2);
      complex3.subtract(complex10);
      complex0.tanh();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.subtract((-1.0));
      Complex complex1 = Complex.valueOf((-1.0));
      complex1.NaN.multiply((-2611));
      complex0.getField();
      Complex complex2 = complex0.NaN.log();
      complex2.ZERO.negate();
      Complex complex3 = complex2.createComplex(440.7963120803, 440.7963120803);
      complex0.readResolve();
      Complex complex4 = complex2.NaN.tan();
      complex4.I.tan();
      Complex complex5 = complex4.tanh();
      complex3.divide(417.0);
      Complex complex6 = Complex.ZERO;
      complex0.equals(complex6);
      complex1.atan();
      complex5.asin();
      Complex complex7 = Complex.NaN;
      complex3.getArgument();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.1079306249351287E-256, 5.1079306249351287E-256);
      Complex complex1 = Complex.ZERO;
      complex0.ONE.pow(801.021070041);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.sqrt1z();
      complex2.INF.divide(5.1079306249351287E-256);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex0.subtract(complex1);
      complex6.NaN.getArgument();
      Complex.valueOf(777.5);
      Complex complex7 = complex0.subtract(777.5);
      complex6.sinh();
      complex4.ZERO.cos();
      Complex complex8 = complex4.negate();
      complex5.divide(complex8);
      complex7.pow(complex1);
      Complex complex9 = new Complex(Double.NaN);
      try { 
        complex9.nthRoot((-3759));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,759
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.1079306249351287E-256, 5.1079306249351287E-256);
      Complex complex1 = new Complex(777.5);
      complex0.ONE.pow(777.5);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.sqrt1z();
      complex2.INF.divide(5.1079306249351287E-256);
      Complex complex4 = complex3.I.tanh();
      complex2.I.cos();
      Complex complex5 = complex0.subtract(complex1);
      complex5.NaN.getArgument();
      Complex complex6 = Complex.valueOf(777.5);
      Complex complex7 = complex0.subtract(777.5);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex4.ZERO.cos();
      Complex complex10 = new Complex(777.5, 777.5);
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex6.divide(356.747);
      complex12.equals(">Vt/~RlG<");
      complex7.atan();
      complex5.asin();
      complex5.sin();
      complex9.getArgument();
      Complex complex13 = Complex.ZERO;
      complex11.add(complex8);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.1079306249351287E-256, 5.1079306249351287E-256);
      Complex complex1 = new Complex(777.5);
      complex0.ONE.pow(801.021070041);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.sqrt1z();
      complex2.INF.divide(5.1079306249351287E-256);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex0.subtract(complex1);
      complex6.NaN.getArgument();
      Complex.valueOf(777.5);
      Complex complex7 = complex0.subtract(777.5);
      complex6.sinh();
      complex4.ZERO.cos();
      Complex complex8 = complex4.negate();
      complex5.divide(complex8);
      complex7.pow(complex1);
      complex1.cosh();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex3.multiply((-4.30293375386492E-21));
      complex10.subtract(1.1155805587768555);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.toString();
      Complex complex2 = complex1.ONE.subtract((-2469.965226375868));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex1.NaN.exp();
      complex4.INF.subtract((-1.9872713979884691E43));
      complex5.createComplex(12.60628452863607, 12.60628452863607);
      complex4.NaN.getArgument();
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.valueOf(12.60628452863607, (-1.9872713979884691E43));
      complex7.NaN.readResolve();
      Complex complex8 = complex0.NaN.divide(complex4);
      complex4.ONE.readResolve();
      complex6.readResolve();
      Complex complex9 = complex3.NaN.cosh();
      complex3.isInfinite();
      Complex complex10 = complex6.createComplex(5008.7674809518, Double.NaN);
      Complex complex11 = Complex.valueOf((-772.5706), 8.407128854944895E-246);
      Complex complex12 = complex11.INF.divide(complex10);
      complex12.ONE.divide(3212.4179675);
      Complex complex13 = complex10.add(complex9);
      complex13.INF.negate();
      complex4.cosh();
      Complex complex14 = complex8.negate();
      complex14.sin();
      complex2.pow(0.6233867406845093);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      complex1.ZERO.subtract((-2113079.0211931146));
      complex1.ZERO.log();
      int int0 = 737510811;
      // Undeclared exception!
      complex0.nthRoot(737510811);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(1102.02671152, (-294.054914));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.add(2548.0);
      complex2.INF.sqrt1z();
      complex1.cos();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.INF.createComplex((-678.53851931569), (-3212.4179675));
      Complex complex4 = complex2.I.sqrt();
      complex4.NaN.tan();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ONE.negate();
      Complex complex6 = complex5.multiply(complex0);
      complex6.ONE.divide(6.283185307179586);
      Complex.valueOf(2.509050608571019E-106, (-20.0));
      complex1.ONE.createComplex(2.3789334438756013E245, 0.0);
      complex0.exp();
      Complex complex7 = complex1.divide(complex0);
      complex0.multiply(0.0);
      Complex complex8 = complex7.sin();
      complex7.atan();
      complex8.INF.subtract(0.0);
      Complex complex9 = (Complex)complex7.readResolve();
      complex7.pow(2.3789334438756013E245);
      complex3.subtract(complex7);
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.383070991556), (-3277.383070991556));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex0.ONE.createComplex(0.0, 0.0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.subtract(0.19601123148284363);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.log();
      complex7.nthRoot(30);
      Complex complex8 = complex7.sinh();
      complex8.multiply(complex3);
      Complex.valueOf(1486.0);
      Complex complex9 = complex5.pow(complex7);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply(17);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.multiply(2.0896888605749563E-8);
      Complex complex5 = complex4.asin();
      complex5.abs();
      Complex complex6 = complex0.pow(Double.NaN);
      complex0.hashCode();
      Complex complex7 = Complex.ZERO;
      Complex.valueOf(2.0896888605749563E-8);
      Complex complex8 = new Complex(2.0896888605749563E-8, Double.NaN);
      complex2.divide(complex8);
      try { 
        complex6.nthRoot((-1701));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,701
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.20394872493254462, 2.7758613753516344E131);
      Complex complex1 = complex0.sqrt();
      complex1.sinh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.createComplex(663.8391157917, 2.7758613753516344E131);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.asin();
      complex5.abs();
      Complex complex7 = complex2.pow(Double.POSITIVE_INFINITY);
      complex5.hashCode();
      Complex complex8 = Complex.ZERO;
      Complex.valueOf((-20.0));
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.divide(complex7);
      complex6.nthRoot(37);
      complex6.sqrt1z();
      Complex complex11 = Complex.INF;
      complex7.divide(complex4);
      Object object0 = new Object();
      complex6.equals(object0);
      complex11.getReal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.cos();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.hashCode();
      complex2.I.multiply(3789);
      Complex complex3 = Complex.valueOf((double) 3789);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex3.sqrt();
      complex2.hashCode();
      Complex complex7 = complex1.createComplex(0.0, 0.0);
      complex7.exp();
      Complex complex8 = new Complex(913.869);
      complex8.divide(complex5);
      Complex complex9 = complex2.multiply(Double.NaN);
      Complex complex10 = complex4.sin();
      complex9.atan();
      Complex complex11 = complex9.subtract(2237.167602790657);
      complex7.readResolve();
      complex4.pow(913.869);
      Complex complex12 = complex10.subtract(complex6);
      complex12.ONE.sinh();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.INF.createComplex((-678.53851931569), (-3212.4179675));
      Complex complex4 = complex2.I.sqrt();
      complex4.NaN.tan();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ONE.negate();
      Complex complex6 = complex5.multiply(complex0);
      complex6.ONE.divide(6.283185307179586);
      Complex.valueOf(2.509050608571019E-106, (-20.0));
      complex3.tan();
      complex2.sqrt();
      Complex complex7 = complex6.atan();
      complex5.pow((-98.95216830681));
      complex4.cos();
      complex1.exp();
      complex7.pow(2.3789334438756013E245);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.4390474571273), (-3277.4390474571273));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      complex2.ONE.subtract(complex1);
      Complex complex3 = complex0.ONE.createComplex(0.0, 0.0);
      complex0.I.multiply((-3277.4390474571273));
      Complex complex4 = complex0.asin();
      complex4.I.abs();
      complex4.INF.pow((-20.0));
      complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      complex4.sinh();
      Complex complex6 = Complex.valueOf((-2969.7973166265997));
      complex3.NaN.divide(complex5);
      complex3.nthRoot(37);
      Complex complex7 = complex4.ONE.sqrt1z();
      complex7.INF.add(complex6);
      Complex complex8 = Complex.INF;
      complex3.divide(complex8);
      complex1.equals((Object) null);
      complex1.getReal();
      Complex complex9 = Complex.valueOf(1.0);
      complex2.cos();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.hashCode();
      Complex complex3 = complex2.I.multiply(3789);
      Complex complex4 = Complex.valueOf((double) 3789);
      Complex complex5 = complex0.tanh();
      complex0.pow(0.0);
      complex4.sqrt();
      complex2.hashCode();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.sqrt();
      complex7.INF.atan();
      complex2.reciprocal();
      Complex complex8 = complex6.pow((double) 3789);
      complex7.cos();
      complex8.exp();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sin();
      complex2.toString();
      Complex complex3 = complex2.createComplex((-101.4745), 1.78211222185955E-7);
      complex3.sqrt();
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf(1.78211222185955E-7);
      complex0.negate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.multiply(complex6);
      Complex complex8 = new Complex(0.0, (-101.4745));
      complex8.divide(2.2272801399230957);
      Complex complex9 = Complex.valueOf((-1235.661321), 2.509050608571019E-106);
      Complex complex10 = complex5.createComplex((-2973.40747959), 3232.823928);
      complex3.exp();
      complex10.divide(complex9);
      complex9.multiply(0.034552380442619324);
      Complex complex11 = Complex.I;
      complex11.sin();
      complex1.atan();
      complex7.subtract(1.0);
      complex3.readResolve();
      Complex complex12 = new Complex((-2973.40747959));
      complex12.pow(0.034552380442619324);
      complex9.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.hashCode();
      complex2.I.multiply(3789);
      Complex complex3 = Complex.valueOf((double) 3789);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex3.sqrt();
      complex2.hashCode();
      complex1.pow(0.0);
      Complex complex7 = complex6.divide(0.0);
      Object object0 = new Object();
      complex3.equals(object0);
      complex5.atan();
      complex7.asin();
      complex4.sin();
      complex5.getArgument();
      complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.4390474571273), (-3277.4390474571273));
      Complex complex1 = complex0.ONE.sqrt();
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex0.I.multiply((-3277.4390474571273));
      Complex complex4 = complex0.asin();
      complex4.I.abs();
      complex4.INF.pow((-20.0));
      complex4.hashCode();
      complex4.I.multiply(1.0);
      Complex complex5 = Complex.ZERO;
      Complex.valueOf((-2969.7973166265997));
      complex2.NaN.divide(complex5);
      complex2.nthRoot(37);
      Complex complex6 = complex4.ONE.sqrt1z();
      complex2.equals("&jk+d+>Hlh8!mh13");
      complex6.atan();
      complex2.asin();
      complex3.sin();
      complex5.getArgument();
      complex4.add(complex6);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.INF.subtract(complex1);
      complex2.NaN.negate();
      complex2.hashCode();
      Complex complex3 = complex0.ZERO.divide(0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.NaN.sqrt();
      Complex complex6 = complex0.ONE.cosh();
      complex0.getImaginary();
      Complex complex7 = complex0.ZERO.asin();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex6.sinh();
      Complex complex10 = Complex.valueOf(0.0, (-7.877917738262007E-9));
      complex5.isInfinite();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex12.INF.add(0.0);
      complex11.acos();
      complex0.nthRoot(809);
      complex1.getReal();
      Complex.valueOf(Double.NaN);
      complex3.I.divide((-1851.990870280059));
      complex8.subtract(complex12);
      complex9.add((double) 809);
      complex13.sin();
      Complex complex14 = Complex.valueOf((-1314.006741616701));
      complex7.pow(complex14);
      complex4.toString();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex1.INF.createComplex((-678.53851931569), (-3212.4179675));
      Complex complex4 = complex2.I.sqrt();
      complex4.NaN.tan();
      complex0.multiply(756);
      Complex complex5 = Complex.valueOf((-1826.3));
      Complex complex6 = complex3.tanh();
      complex3.pow((double) 756);
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.sqrt();
      complex7.hashCode();
      complex8.tan();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex1.reciprocal();
      complex10.pow(0.0);
      complex11.cos();
      complex9.exp();
      complex6.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.4390474571273), (-3277.4390474571273));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex0.ONE.createComplex(0.0, 0.0);
      complex0.I.multiply((-3277.4390474571273));
      Complex complex5 = complex0.asin();
      complex5.I.abs();
      complex4.pow(0.0);
      complex0.multiply(complex5);
      complex4.sin();
      complex1.atan();
      Complex complex6 = new Complex((-20.0), 0.7071067811865476);
      complex6.tan();
      complex3.readResolve();
      Complex complex7 = Complex.INF;
      complex0.add(complex7);
      Complex.valueOf(0.7071067811865476);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-579.8814), 0.0);
      Complex complex1 = Complex.ONE;
      complex0.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf((-579.8814));
      complex3.divide(complex1);
      List<Complex> list0 = complex3.nthRoot(37);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(0.0, (-2969.7973166265997));
      complex4.divide(complex6);
      complex0.equals(list0);
      complex4.getReal();
      Complex.valueOf(-0.0);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.hashCode();
      Complex complex3 = complex2.I.multiply(3789);
      Complex complex4 = Complex.valueOf((double) 3789);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex4.sqrt();
      complex2.hashCode();
      complex5.pow((-2869.3449722181));
      Complex complex8 = complex7.divide((double) 3789);
      Object object0 = new Object();
      complex1.equals(object0);
      complex4.atan();
      complex1.asin();
      complex3.sin();
      complex6.getArgument();
      Complex complex9 = complex1.add(complex5);
      complex7.pow(complex9);
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.INF.subtract(complex1);
      complex2.NaN.negate();
      complex2.hashCode();
      Complex complex3 = complex0.ZERO.divide(0.0);
      complex0.exp();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex0.ONE.cosh();
      complex0.getImaginary();
      complex0.ZERO.asin();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex5.sinh();
      Complex complex8 = Complex.valueOf((-20.936749), (-7.877917738262007E-9));
      complex4.isInfinite();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex10.INF.add(0.0);
      complex9.acos();
      complex0.nthRoot(809);
      complex1.getReal();
      complex3.I.divide((-1851.990870280059));
      complex6.subtract(complex10);
      complex7.add((double) 809);
      Complex complex12 = complex11.sin();
      complex4.nthRoot(809);
      complex12.log();
      complex1.pow((-7.877917738262007E-9));
      complex7.multiply(1);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.hashCode();
      complex2.I.multiply(3789);
      Complex complex3 = Complex.valueOf((double) 3789);
      Complex complex4 = complex0.tanh();
      complex0.pow(0.0);
      complex3.sqrt();
      complex2.hashCode();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.sqrt();
      complex6.INF.atan();
      complex2.reciprocal();
      Complex complex7 = complex5.pow((double) 3789);
      complex6.cos();
      complex7.exp();
      complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(930.949151728);
      complex3.ONE.multiply((-1280));
      complex3.ZERO.sin();
      Complex complex4 = complex2.ONE.divide((-1220.4821511));
      Complex complex5 = complex4.ONE.sqrt1z();
      complex5.asin();
      complex0.getReal();
      complex5.ONE.add(complex2);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex0.divide(complex6);
      complex6.I.hashCode();
      Complex complex8 = complex6.multiply(1.0);
      Complex complex9 = complex7.subtract(complex4);
      complex1.multiply(complex8);
      complex8.cos();
      complex5.negate();
      Complex complex10 = complex4.atan();
      complex10.nthRoot(409);
      complex8.getField();
      complex9.readResolve();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getArgument();
      complex0.reciprocal();
      Complex complex1 = complex0.createComplex(3187.5636, 3187.5636);
      complex1.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.multiply(718);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.NaN.sin();
      complex0.ZERO.asin();
      Complex complex5 = complex3.NaN.createComplex(718, 0.0);
      Complex.valueOf((double) 718);
      complex1.getArgument();
      complex5.ONE.getArgument();
      complex0.getField();
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
      Complex complex6 = complex5.INF.createComplex(0.0, 3.645999732952202E-9);
      complex6.ONE.add(0.0);
      Complex complex7 = complex5.negate();
      complex7.ZERO.multiply(718);
      complex3.sqrt1z();
      complex1.multiply((-258));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.4390474571273), (-3277.4390474571273));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      complex2.ONE.subtract(complex1);
      Complex complex3 = complex0.ONE.createComplex(0.0, 0.0);
      complex0.I.multiply((-3277.4390474571273));
      Complex complex4 = complex0.asin();
      complex4.I.abs();
      complex4.INF.pow((-20.0));
      complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      Complex.valueOf((-2969.7973166265997));
      complex3.NaN.divide(complex5);
      complex3.nthRoot(37);
      complex4.ONE.sqrt1z();
      Complex complex6 = Complex.INF;
      complex3.divide(complex6);
      complex1.equals((Object) null);
      complex1.getReal();
      Complex.valueOf(1.0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.acos();
      complex2.add(1.0);
      complex1.cos();
      complex3.tan();
      Complex complex4 = Complex.INF;
      complex1.equals(complex4);
      complex0.pow(2137.86257038536);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.INF.createComplex((-678.53851931569), (-3212.4179675));
      Complex complex4 = complex2.I.sqrt();
      complex4.NaN.tan();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ONE.negate();
      Complex complex6 = complex5.multiply(complex0);
      complex6.ONE.divide(6.283185307179586);
      Complex.valueOf(2.509050608571019E-106, (-20.0));
      complex1.ONE.createComplex(2.3789334438756013E245, 0.0);
      complex0.exp();
      Complex complex7 = complex1.divide(complex0);
      complex0.multiply(0.0);
      Complex complex8 = complex7.sin();
      complex7.atan();
      complex8.INF.subtract(0.0);
      complex7.readResolve();
      complex7.pow(2.3789334438756013E245);
      complex3.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
      complex0.cosh();
      complex0.createComplex(0.0, (-155.0503939));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.divide((-833.0));
      complex0.add(complex1);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.NaN.subtract(2.0);
      complex1.hashCode();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.tanh();
      complex5.cos();
      complex0.sin();
      complex0.tan();
      Complex complex6 = complex1.add(complex2);
      complex0.INF.hashCode();
      Complex complex7 = complex6.INF.cosh();
      complex6.INF.tan();
      Complex complex8 = complex3.tanh();
      complex8.NaN.nthRoot(1);
      complex6.multiply(0.0);
      Complex complex9 = complex3.divide(complex4);
      complex1.pow(0.0);
      complex2.pow(complex0);
      complex7.negate();
      complex8.sqrt1z();
      Complex.valueOf((-8.772048092842086E271));
      complex9.subtract(0.0);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 1.830278273495162E-8;
      double double1 = 1.4300098613455884E-216;
      Complex complex0 = new Complex(1.830278273495162E-8, 1.4300098613455884E-216);
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.pow(1762.875614155);
      complex2.ZERO.nthRoot(1044);
      complex0.isInfinite();
      Complex complex3 = complex0.tanh();
      complex3.NaN.getArgument();
      complex0.cosh();
      complex0.isNaN();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.pow(complex1);
      complex5.divide(0.0);
      complex3.subtract(Double.NaN);
      complex0.isInfinite();
      Complex complex6 = complex0.asin();
      complex6.nthRoot(1044);
      Complex complex7 = complex6.ZERO.multiply(0.03416477677774927);
      complex7.abs();
      complex6.NaN.negate();
      Complex complex8 = complex0.cos();
      complex8.toString();
      Complex complex9 = complex7.cos();
      complex9.hashCode();
      Complex.valueOf((double) 1044);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      complex1.I.tanh();
      Complex.valueOf((-1.0));
      Complex complex2 = complex0.exp();
      complex2.I.multiply(complex0);
      Complex.valueOf((-892.8638919147));
      Complex complex3 = complex1.I.reciprocal();
      complex3.ZERO.subtract(complex2);
      complex3.NaN.tan();
      complex3.ZERO.multiply(complex1);
      complex1.readResolve();
      complex0.getReal();
      complex1.getReal();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2574.838531579));
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.getReal();
      Complex complex2 = complex1.subtract((-2574.838531579));
      Complex complex3 = complex0.divide((-2574.838531579));
      complex2.reciprocal();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.valueOf((-2574.838531579));
      complex5.log();
      Complex.valueOf(996.40341782, 996.40341782);
      complex5.hashCode();
      complex0.getReal();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.add(complex6);
      complex7.ONE.exp();
      complex4.getField();
      Complex complex8 = new Complex((-218.6284684), 0.0);
      complex2.INF.negate();
      Complex complex9 = complex4.pow(complex8);
      Complex complex10 = complex9.INF.pow(0.0);
      complex10.I.exp();
      complex10.ONE.pow(0.0);
      Complex complex11 = complex9.createComplex((-2574.838531579), (-2574.838531579));
      complex4.acos();
      Complex complex12 = complex4.tan();
      complex12.cos();
      complex11.readResolve();
      complex2.isInfinite();
      complex0.sqrt();
      complex8.INF.multiply(complex3);
      complex3.conjugate();
      complex8.add(996.40341782);
      complex1.subtract((-2574.838531579));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1958.2);
      complex0.divide(2873.15902);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.ONE.exp();
      complex1.ZERO.createComplex((-947.91611), 5.32048248832E11);
      complex0.abs();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(1190.191, 1190.191);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex0.add(3855.08069);
      complex3.NaN.readResolve();
      Complex complex5 = complex3.ZERO.pow(complex2);
      complex3.I.sinh();
      Complex complex6 = complex4.negate();
      Complex complex7 = Complex.valueOf(65.91);
      Complex.valueOf(592.087482316242, (-1.0));
      complex2.I.sin();
      Complex complex8 = complex1.INF.multiply(0.0);
      Complex complex9 = complex3.sin();
      complex4.ONE.cos();
      complex0.isNaN();
      complex2.negate();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex10.I.reciprocal();
      complex10.INF.sqrt();
      complex6.getField();
      complex4.hashCode();
      complex1.getField();
      complex7.add(2055.9537732306776);
      Complex complex12 = complex7.multiply(complex8);
      complex12.multiply(complex9);
      Complex.valueOf(1029.98, 3855.08069);
      complex10.getField();
      complex11.isInfinite();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1584.1718486, 1584.1718486);
      complex0.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.subtract((-4762.107227917968));
      complex0.NaN.multiply((-4762.107227917968));
      Complex complex5 = complex4.INF.cosh();
      complex2.ONE.pow(complex3);
      complex1.sin();
      Complex complex6 = complex1.multiply(complex2);
      complex6.INF.sin();
      complex1.getField();
      complex6.toString();
      complex6.exp();
      Complex.valueOf((-4762.107227917968), 1239.4195181515274);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2262.9725002440455, 2262.9725002440455);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.add((-5.148989321866988E-116));
      Complex complex6 = complex2.conjugate();
      complex3.add(2262.9725002440455);
      Complex.valueOf(2262.9725002440455, (-209.5782744305));
      complex6.sin();
      complex4.multiply(complex5);
      complex6.divide(2262.9725002440455);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(1239.6030031);
      Complex complex1 = complex0.I.multiply(1239.6030031);
      complex1.ONE.multiply((-1331));
      complex0.hashCode();
      complex0.ZERO.hashCode();
      complex0.sin();
      Complex complex2 = complex1.sinh();
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.createComplex((-2166.19974439605), (-2166.19974439605));
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.sqrt();
      complex3.subtract((-1.0));
      complex3.multiply((-994.0898208827));
      Complex complex5 = complex2.divide((-2166.19974439605));
      Complex complex6 = complex5.sin();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.INF.sinh();
      complex8.NaN.asin();
      complex1.add(complex7);
      Complex complex9 = complex7.tanh();
      complex6.acos();
      complex5.equals(complex0);
      complex3.abs();
      complex9.add(1.0);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-449.46591));
      Complex complex2 = complex1.subtract(complex0);
      complex2.ONE.acos();
      Complex complex3 = complex1.INF.divide((-449.46591));
      Complex complex4 = complex0.sqrt();
      complex4.NaN.getField();
      complex3.NaN.abs();
      Complex complex5 = complex1.exp();
      complex5.NaN.atan();
      Complex complex6 = complex5.multiply((-577.747691));
      complex1.createComplex(4617.385872524165, 1197.0);
      complex5.exp();
      complex6.add(complex3);
      complex5.divide(3224.029978860925);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1147.29469413275);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.I.pow(1147.29469413275);
      complex0.ONE.multiply(1);
      complex2.I.asin();
      Complex complex3 = Complex.ONE;
      complex0.multiply(complex3);
      Complex complex4 = complex3.divide(complex1);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      int int0 = 1;
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex2.ZERO.sin();
      complex0.add((-257.06919665));
      complex0.NaN.cos();
      complex0.add(Double.POSITIVE_INFINITY);
      complex3.ONE.getArgument();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(134.308504604743, 134.308504604743);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf((-2143.06840908007));
      complex2.add(134.308504604743);
      complex0.NaN.readResolve();
      complex0.NaN.multiply(complex2);
      Complex complex4 = complex0.sinh();
      complex4.hashCode();
      complex4.isInfinite();
      complex4.I.hashCode();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex1.add(134.308504604743);
      complex6.subtract((-2143.06840908007));
      Complex complex7 = complex5.acos();
      complex7.ONE.tanh();
      complex7.getArgument();
      Complex complex8 = Complex.valueOf((-5.7055442971184756E-8), 2.0);
      complex8.ONE.conjugate();
      Complex complex9 = complex4.atan();
      complex9.I.abs();
      Complex complex10 = complex3.INF.divide((-2143.06840908007));
      complex5.readResolve();
      Complex complex11 = complex6.divide(complex5);
      complex11.divide(complex3);
      Complex complex12 = complex10.sinh();
      complex12.atan();
      complex12.tanh();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply(17);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.INF.subtract((double) 17);
      complex1.reciprocal();
      Complex complex5 = complex2.log();
      complex5.ZERO.nthRoot(969);
      complex4.sinh();
      complex4.multiply(complex0);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.pow(complex6);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.cosh();
      complex0.nthRoot(4503);
      Complex complex3 = complex1.acos();
      complex3.tanh();
      Complex complex4 = complex3.tanh();
      complex2.acos();
      complex3.sinh();
      complex4.tanh();
      Complex complex5 = complex2.pow(complex1);
      complex5.createComplex(4503, 4503);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.negate();
      complex0.I.multiply(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.conjugate();
      Complex complex3 = complex0.tanh();
      complex3.subtract(complex2);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = complex2.ONE.divide(0.0);
      complex4.ONE.getField();
      complex2.INF.subtract((double) (-2799));
      try { 
        complex1.nthRoot((-2799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,799
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-1458.408157));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex2.add(complex1);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = new Complex(1730.077599203);
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.cosh();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1121.64, 1121.64);
      Complex complex1 = new Complex(1.586013579247616E15, 693.3989524146828);
      complex1.ZERO.getField();
      Complex complex2 = Complex.valueOf(1121.64);
      complex0.NaN.divide(complex2);
      complex0.I.sin();
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex0.hashCode();
      Complex.valueOf(1.586013579247616E15);
      complex1.getArgument();
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.INF.pow(complex1);
      complex3.NaN.asin();
      complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.pow(complex3);
      complex1.isInfinite();
      Complex complex6 = complex3.multiply(0.0);
      Complex complex7 = complex6.I.pow(complex5);
      Complex complex8 = complex7.NaN.negate();
      complex8.ONE.add(0.0);
      complex6.getReal();
      Complex.valueOf(0.0, 0.0);
      complex1.I.subtract(complex2);
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex0.sinh();
      complex10.ONE.divide(complex9);
      complex7.log();
      Complex.valueOf(1134.6207663242, 0.0);
      complex7.tan();
      complex7.log();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2405.1958168917968);
      Complex complex1 = complex0.pow(2405.1958168917968);
      complex1.log();
      Complex.valueOf(1.474522484905093E189, (-2444.139021936));
      Complex complex2 = complex0.multiply((-28));
      complex2.equals((Object) null);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-579.8814), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.I.sin();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.I.tan();
      complex0.readResolve();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex1.I.pow(1.0);
      Complex complex4 = complex3.ZERO.subtract((-776.337207265));
      complex0.isInfinite();
      Complex complex5 = complex2.sin();
      complex4.isNaN();
      Complex complex6 = complex5.sqrt();
      complex6.I.subtract(3682.794);
      complex3.add((-776.337207265));
      complex3.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.subtract((-1.0));
      Complex complex2 = Complex.valueOf((-1.0));
      complex2.NaN.multiply((-2611));
      complex0.getField();
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex3.ZERO.negate();
      complex3.createComplex(440.7963120803, 440.7963120803);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex3.NaN.tan();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex6.NaN.pow(20.0);
      complex7.ONE.divide(440.7963120803);
      complex0.equals(object0);
      complex4.atan();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex5.sin();
      complex9.getArgument();
      complex8.add(complex5);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sin();
      complex2.toString();
      Complex complex3 = complex1.tanh();
      complex2.INF.nthRoot(1388);
      Complex complex4 = complex3.ONE.multiply((-20.0));
      Complex complex5 = complex1.divide(complex2);
      complex5.equals("(0.0, 1.1752011936438014)");
      Complex complex6 = complex4.createComplex((-20.0), 0.0);
      complex6.ONE.tanh();
      complex0.exp();
      complex4.getArgument();
      complex2.isInfinite();
      complex3.abs();
      complex5.multiply(complex4);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.asin();
      complex0.INF.hashCode();
      Complex complex2 = complex0.ONE.cos();
      complex0.INF.sin();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.INF.multiply(0.0);
      Complex complex5 = complex3.asin();
      complex0.isNaN();
      Complex complex6 = complex2.conjugate();
      complex6.cos();
      complex1.I.hashCode();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex6.subtract(0.0);
      Complex complex11 = complex10.NaN.divide(0.0);
      complex11.I.readResolve();
      String string0 = complex10.toString();
      assertEquals("(0.5403023058681398, 0.0)", string0);
      
      complex5.ZERO.multiply((-1001.769));
      Complex complex12 = Complex.valueOf(327.475977);
      Complex complex13 = complex12.NaN.negate();
      Complex complex14 = complex12.I.divide(complex5);
      complex8.hashCode();
      assertSame(complex8, complex13);
      
      double double0 = complex7.abs();
      assertTrue(complex7.equals((Object)complex14));
      assertEquals(Double.NaN, double0, 0.01);
      
      complex0.createComplex(327.475977, 0.0);
      Complex complex15 = complex5.multiply((-20.0));
      assertTrue(complex15.equals((Object)complex9));
      
      complex3.getImaginary();
      complex11.getImaginary();
      assertNotSame(complex11, complex12);
      assertSame(complex11, complex14);
      
      complex6.getField();
      Complex complex16 = complex5.subtract(0.0);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
  }
}
