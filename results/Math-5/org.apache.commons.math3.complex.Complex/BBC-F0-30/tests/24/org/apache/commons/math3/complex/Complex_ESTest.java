/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:18:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), 0.013805258951048893);
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.INF;
      complex5.subtract(complex4);
      Complex complex6 = complex1.log();
      complex0.createComplex((-20.0), 0.013805258951048893);
      Complex complex7 = Complex.valueOf(0.013805258951048893);
      complex7.sin();
      Complex complex8 = Complex.ZERO;
      complex6.acos();
      complex5.createComplex((-1.6418050067576155), Double.POSITIVE_INFINITY);
      complex7.cos();
      Complex complex9 = complex0.atan();
      complex2.cosh();
      Complex complex10 = Complex.NaN;
      complex0.add((-20.0));
      complex1.tanh();
      Complex complex11 = complex3.acos();
      complex10.multiply(complex1);
      Complex complex12 = complex5.multiply(130);
      complex12.getField();
      Complex.valueOf((-1.6418050067576155));
      complex7.subtract(complex9);
      complex5.atan();
      complex11.reciprocal();
      Complex complex13 = Complex.ZERO;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5702899974128217, (-758.57202529));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex1.subtract(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.atan();
      complex2.subtract(complex5);
      complex2.cosh();
      complex3.INF.sin();
      Complex.valueOf(1.5702899974128217);
      complex6.add((-688.2241427003678));
      complex6.tanh();
      complex1.acos();
      Complex complex7 = complex3.asin();
      complex7.ONE.negate();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5702899974128217, (-758.57202529));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex1.subtract(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.createComplex((-758.57202529), (-688.2241427003678));
      complex0.I.sin();
      Complex complex6 = Complex.valueOf(1.5702899974128217, (-758.57202529));
      Complex complex7 = complex6.createComplex(Double.POSITIVE_INFINITY, 1.5702899974128217);
      Complex complex8 = complex5.cos();
      complex8.atan();
      complex1.cosh();
      Complex.valueOf(6.283185307179586);
      complex7.add((-1156.2998057222383));
      complex2.tanh();
      Complex complex9 = new Complex((-9.084495133765657E196), 1.1483560326413004E-7);
      complex9.acos();
      Complex complex10 = Complex.NaN;
      complex5.multiply(complex10);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-395.32829152645195));
      Complex complex1 = Complex.valueOf((-395.32829152645195), 20.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.tanh();
      complex3.acos();
      complex1.multiply(complex4);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-895.42), (-395.32829152645195));
      Complex complex1 = Complex.valueOf((-895.42), 3.1962472803616787E178);
      Complex complex2 = complex1.sqrt1z();
      complex2.negate();
      complex1.tan();
      complex1.multiply((-4303.47));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-395.32829152645195));
      Complex complex1 = Complex.valueOf((-395.32829152645195), 20.0);
      Complex complex2 = complex0.sqrt1z();
      complex2.negate();
      Complex complex3 = complex0.pow(0.2919265817264288);
      complex3.ZERO.add(complex0);
      complex1.tan();
      Complex complex4 = new Complex(0.2919265817264288, (-395.32829152645195));
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(477.8568799971, 477.8568799971);
      complex0.sqrt();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex3.NaN.subtract(477.8568799971);
      Complex complex5 = complex2.conjugate();
      complex5.INF.abs();
      complex4.abs();
      Complex complex6 = complex1.negate();
      complex1.abs();
      complex1.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex((-853.312964), Double.POSITIVE_INFINITY);
      complex6.pow(complex3);
      Complex complex9 = complex5.add(complex8);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      complex9.equals("(");
      complex9.tan();
      complex8.multiply(complex6);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(477.8568799971, 477.8568799971);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex3.NaN.subtract(477.8568799971);
      complex4.INF.abs();
      complex4.abs();
      Complex complex5 = complex1.negate();
      complex1.abs();
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(477.8568799971, Double.POSITIVE_INFINITY);
      complex5.pow(complex3);
      complex0.add(complex8);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.pow((double) 418);
      complex0.add(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ONE;
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(17);
      Complex complex1 = Complex.valueOf((double) 17, (-1391.6592));
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(477.8568799971, 477.8568799971);
      complex0.sqrt();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.conjugate();
      complex5.INF.abs();
      Complex complex6 = new Complex((-853.312964), 477.8568799971);
      complex4.abs();
      Complex complex7 = complex1.negate();
      complex1.abs();
      complex1.atan();
      complex2.INF.asin();
      Complex complex8 = new Complex(1899.337269627781, Double.POSITIVE_INFINITY);
      complex7.pow(complex3);
      Complex complex9 = complex5.add(complex8);
      complex1.readResolve();
      complex9.equals("59|&Q. QA&R");
      complex9.tan();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(467.6187354872702);
      Complex complex1 = complex0.subtract(2.2146463048385474E8);
      complex0.INF.add(complex1);
      complex0.nthRoot(759);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      complex1.getField();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.conjugate();
      complex0.abs();
      complex4.abs();
      Complex complex6 = complex5.atan();
      complex1.pow(complex6);
      complex1.getArgument();
      Complex.valueOf((-4.571195152299358E262));
      Complex complex7 = Complex.valueOf(1.5707963267948966);
      complex7.tanh();
      Complex complex8 = Complex.ZERO;
      complex2.asin();
      Complex complex9 = Complex.I;
      complex5.sinh();
      Complex complex10 = Complex.ZERO;
      complex10.divide(complex0);
      complex2.readResolve();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-395.32829152645195));
      Complex complex1 = complex0.createComplex((-0.06305308727565598), 20.0);
      Complex complex2 = complex0.I.pow(0.0);
      complex2.NaN.abs();
      Complex complex3 = complex2.INF.divide((-1021.359196));
      Complex complex4 = new Complex((-6.690931338790221E-8), (-0.06305308727565598));
      complex1.abs();
      complex3.negate();
      complex3.abs();
      Complex complex5 = Complex.I;
      complex5.atan();
      Complex complex6 = complex2.asin();
      Complex complex7 = new Complex(0.0, (-1.0));
      complex3.pow(complex6);
      Complex complex8 = complex2.add(complex6);
      complex8.ONE.cos();
      complex1.readResolve();
      Complex complex9 = new Complex(1899.337269627781, (-6.690931338790221E-8));
      complex2.equals(complex9);
      complex6.tan();
      complex0.tanh();
      Complex complex10 = Complex.valueOf((-1127.0));
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex complex3 = complex1.exp();
      complex3.getArgument();
      Complex complex4 = complex2.acos();
      complex4.tanh();
      complex2.toString();
      Complex complex5 = complex2.subtract((-20.0));
      Complex complex6 = complex1.tanh();
      complex5.readResolve();
      complex6.divide(complex4);
      complex1.sqrt();
      complex6.negate();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      complex1.getField();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.conjugate();
      complex0.abs();
      Complex complex5 = complex3.negate();
      complex5.NaN.asin();
      complex2.abs();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.pow(complex1);
      complex3.add(complex4);
      complex1.equals("FYf");
      complex7.tan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      complex1.getField();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.conjugate();
      complex0.abs();
      complex4.negate();
      complex2.abs();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.pow(complex1);
      complex4.add(complex5);
      complex1.equals("FYf");
      complex7.tan();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(477.8568799971, 477.8568799971);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.sinh();
      Complex complex4 = new Complex(2.0, (-401.66412257));
      Complex complex5 = complex4.reciprocal();
      complex5.cosh();
      Complex complex6 = complex2.conjugate();
      complex6.abs();
      Complex complex7 = Complex.INF;
      Complex complex8 = new Complex(1727.3051631475914);
      Complex complex9 = complex8.negate();
      complex2.abs();
      complex6.atan();
      complex6.pow(complex8);
      complex4.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.tanh();
      complex8.divide(complex10);
      complex4.asin();
      complex3.sinh();
      complex1.divide(complex7);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      complex1.getField();
      Complex complex3 = complex1.add(719.97);
      Complex complex4 = complex0.divide((-871619.1506487568));
      Complex complex5 = Complex.ONE;
      complex5.nthRoot(768);
      complex5.abs();
      Complex complex6 = complex0.multiply(790);
      complex4.readResolve();
      Complex complex7 = complex4.add(1260.123196447);
      complex5.getArgument();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex5.createComplex(768, 719.97);
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.I;
      complex7.multiply(1260.123196447);
      complex6.add(complex1);
      complex0.add(complex3);
      Complex.valueOf(2.576131820678711, 0.27786844968795776);
      complex6.tan();
      complex4.add(0.4879087805747986);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(467.6187354872702, 467.6187354872702);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.conjugate();
      complex6.INF.abs();
      complex1.negate();
      complex4.createComplex(1899.337269627781, 1.174976039708894);
      Complex complex7 = complex1.add(6.872350402175489E-10);
      complex7.getArgument();
      complex5.multiply((-2619.9109108286975));
      complex0.createComplex(1188.471711, Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.pow(1188.471711);
      Complex complex9 = Complex.I;
      complex9.multiply((-301115.9138623094));
      complex4.add(complex2);
      Complex complex10 = Complex.NaN;
      complex10.add(complex7);
      complex0.equals(complex10);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(0.3471571207046509);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.multiply(1401.44);
      complex5.ZERO.add((-2401.062664));
      Complex complex7 = complex5.add(complex2);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.add(complex7);
      Complex complex10 = Complex.INF;
      complex10.equals(complex7);
      complex6.tan();
      complex2.add(complex10);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(467.6187354872702, 467.6187354872702);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.NaN.reciprocal();
      complex2.cosh();
      Complex complex5 = Complex.valueOf(467.6187354872702);
      complex5.INF.abs();
      complex1.negate();
      Complex complex6 = complex4.createComplex(1899.337269627781, 1.174976039708894);
      Complex complex7 = complex5.sin();
      Complex.valueOf(1899.337269627781, 467.6187354872702);
      Complex complex8 = complex7.createComplex(Double.POSITIVE_INFINITY, 1.174976039708894);
      complex8.cos();
      complex8.atan();
      complex4.cosh();
      Complex complex9 = Complex.I;
      Complex complex10 = complex4.add((-2646.72228506));
      Complex complex11 = Complex.ONE;
      complex10.tanh();
      Object object0 = new Object();
      complex5.equals(complex1);
      Complex complex12 = complex6.tan();
      complex12.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, 41.45133);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex2.toString();
      Complex complex3 = complex2.multiply(complex1);
      complex3.log();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex4.createComplex((-719.97), (-719.97));
      complex2.ONE.hashCode();
      complex6.pow((-2264.0));
      Complex complex7 = complex4.atan();
      complex7.ZERO.getArgument();
      Complex complex8 = complex5.multiply(394.7400309847);
      Complex complex9 = complex8.add(complex6);
      complex6.add(complex4);
      complex8.equals((Object) null);
      complex5.tan();
      complex2.tanh();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      complex1.getField();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex0.nthRoot(790);
      complex4.abs();
      Complex complex5 = complex3.multiply(790);
      complex2.readResolve();
      Complex complex6 = complex1.add(1188.471711);
      complex0.getArgument();
      complex1.multiply((-301115.9138623094));
      complex5.createComplex(790, 0.0);
      Complex complex7 = complex4.pow((-301115.9138623094));
      Complex complex8 = Complex.I;
      complex7.multiply(458.46279937875);
      Complex complex9 = complex1.add(complex3);
      Complex complex10 = complex6.add(complex9);
      complex6.equals(complex10);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.47, 1744.47);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex2.multiply(955);
      Complex complex5 = new Complex((-0.8414709848078965), Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.divide(complex2);
      complex6.cosh();
      Complex complex7 = Complex.INF;
      complex7.readResolve();
      Complex complex8 = complex3.subtract((-1644.439));
      complex8.pow(complex3);
      complex5.pow((-0.8414709848078965));
      complex4.tanh();
      complex8.sqrt();
      complex6.add(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      complex1.abs();
      Complex complex3 = complex1.negate();
      complex1.abs();
      complex2.atan();
      Complex complex4 = complex0.pow(complex1);
      complex2.getArgument();
      complex4.tanh();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex3.cosh();
      Complex complex7 = new Complex(Double.NaN);
      complex7.readResolve();
      complex2.subtract(0.0);
      complex4.pow(complex6);
      complex3.pow((-1102.538573055));
      complex1.tanh();
      complex5.sqrt();
      Complex complex8 = new Complex(741.7080022058166, 3030.878115824559);
      complex8.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0221946102400814));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.pow((-1.0221946102400814));
      Complex complex5 = complex4.multiply((-369));
      complex5.ONE.subtract(complex0);
      complex5.ZERO.conjugate();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex7.NaN.cos();
      complex0.abs();
      Complex complex9 = complex6.tanh();
      complex0.ZERO.createComplex(1.0221946102400814, 0.022698522053646104);
      complex2.INF.toString();
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      complex9.sqrt1z();
      complex2.multiply((-369));
      complex8.log();
      complex6.I.readResolve();
      complex8.toString();
      complex7.negate();
      complex8.ZERO.multiply(257);
      complex0.readResolve();
      complex3.asin();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.47, 1744.47);
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.pow(complex0);
      complex1.multiply(395);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(467.6187354872702, 467.6187354872702);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.NaN.reciprocal();
      complex2.cosh();
      Complex complex5 = complex3.conjugate();
      complex5.INF.abs();
      complex1.negate();
      complex4.createComplex(1899.337269627781, 1.0);
      Complex complex6 = complex5.sin();
      Complex.valueOf(1899.337269627781, 467.6187354872702);
      Complex complex7 = complex6.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex7.cos();
      complex7.atan();
      complex4.cosh();
      Complex complex8 = Complex.I;
      complex4.add((-2646.72228506));
      Complex complex9 = Complex.ONE;
      complex9.tanh();
      complex0.acos();
      complex7.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.47, 1744.47);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2285.467364776217, (-2567.439));
      Complex complex1 = complex0.I.pow(2285.467364776217);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.tan();
      complex3.add((-2.3866331257845713E-8));
      complex5.log();
      complex1.multiply(complex2);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(477.8568799971, 477.8568799971);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.cos();
      complex3.NaN.reciprocal();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.conjugate();
      complex5.INF.abs();
      Complex complex6 = complex1.negate();
      complex6.I.abs();
      Complex complex7 = complex6.INF.pow(complex1);
      complex3.getArgument();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.INF.divide(complex3);
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex0.subtract(477.8568799971);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      complex11.ONE.pow(-0.0);
      complex4.tanh();
      Complex complex13 = Complex.ZERO;
      complex3.INF.toString();
      complex7.abs();
      complex0.readResolve();
      complex11.multiply(complex13);
      complex9.toString();
      Complex complex14 = complex4.multiply(complex11);
      complex14.ZERO.log();
      complex0.tanh();
      complex14.reciprocal();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      complex0.getField();
      Complex complex2 = complex1.pow((-687.9304240895359));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.createComplex(1798.895603776002, (-738.982675705));
      complex3.subtract(262.05866969);
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex0.cos();
      complex0.isInfinite();
      complex6.tanh();
      Complex complex7 = complex1.sin();
      complex2.conjugate();
      complex7.getField();
      complex4.sin();
      complex5.hashCode();
      complex2.subtract((-738.982675705));
      complex0.exp();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2285.467364776217, (-2567.439));
      complex0.I.pow(2285.467364776217);
      complex0.multiply(16);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply((-2567.439));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.add(0.04975534659202822);
      Complex complex5 = complex4.log();
      complex3.multiply(complex0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.47, 1744.47);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.sin();
      complex3.subtract(complex2);
      Complex complex4 = complex1.multiply(1);
      complex4.asin();
      complex2.getArgument();
      Complex complex5 = Complex.I;
      complex5.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5702899974128217, (-758.57202529));
      Complex complex1 = complex0.acos();
      complex0.I.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.log();
      complex4.createComplex((-758.57202529), (-688.2241427003678));
      Complex complex5 = complex2.I.sin();
      Complex.valueOf(1.5702899974128217, (-758.57202529));
      Complex complex6 = complex3.createComplex(1.5702899974128217, Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.cos();
      complex7.atan();
      complex7.cosh();
      Complex complex8 = Complex.valueOf((-1272.7432));
      complex8.add(133.5593);
      complex4.tanh();
      complex2.acos();
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1.1373425785132867E221;
      complex0.pow(1.1373425785132867E221);
      Complex complex1 = complex0.atan();
      complex1.multiply(104.0099585230504);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5702899974128217, (-758.57202529));
      Complex complex1 = complex0.acos();
      complex0.I.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.log();
      complex4.createComplex((-758.57202529), (-688.2241427003678));
      Complex.valueOf(1.5702899974128217, (-758.57202529));
      complex3.createComplex(1.5702899974128217, Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.cos();
      complex5.atan();
      complex5.cosh();
      Complex.valueOf((-1272.7432));
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-217.054319843824));
      Complex complex1 = new Complex((-217.054319843824), (-217.054319843824));
      Complex complex2 = complex0.sqrt();
      complex0.sinh();
      Complex complex3 = complex1.cos();
      Complex complex4 = new Complex((-217.054319843824), (-217.054319843824));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.conjugate();
      complex1.abs();
      Complex complex8 = complex3.negate();
      complex1.abs();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex0.pow(complex8);
      complex10.getArgument();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex3.divide(complex5);
      complex9.cosh();
      complex11.subtract(2.0494942705297694E-9);
      Complex complex13 = complex10.pow(complex6);
      complex13.pow(306.9611628948035);
      complex6.tanh();
      complex1.sqrt();
      complex10.toString();
      complex1.abs();
      complex1.readResolve();
      Complex complex14 = complex9.multiply(complex12);
      complex12.toString();
      complex14.multiply(complex4);
      complex2.log();
      complex3.tanh();
      Complex complex15 = complex12.reciprocal();
      try { 
        complex15.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2285.467364776217, (-2567.439));
      complex0.I.pow(2285.467364776217);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.INF;
      complex4.hashCode();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex0.negate();
      complex3.subtract(0.6699451275155236);
      complex1.cos();
      Complex complex8 = complex6.subtract(753.9);
      complex8.multiply(2061);
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex7.sin();
      Complex complex11 = complex10.subtract((double) 2061);
      Complex complex12 = complex11.sin();
      complex5.reciprocal();
      complex12.pow(complex11);
      complex9.createComplex(3649.47, (-5.968586877433824E-8));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2285.467364776217, (-2567.439));
      Complex complex1 = complex0.I.pow(2285.467364776217);
      complex0.abs();
      Complex complex2 = complex0.createComplex((-2567.439), 3136.83);
      Complex complex3 = complex1.pow(complex0);
      complex3.readResolve();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      // Undeclared exception!
      complex0.nthRoot(153164519);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-217.054319843824));
      complex0.hashCode();
      Complex complex1 = complex0.asin();
      complex0.equals("");
      Complex complex2 = complex0.NaN.createComplex(0.0, 0.0);
      complex1.sin();
      Complex complex3 = complex1.NaN.multiply(complex1);
      complex3.I.multiply(complex2);
      Complex complex4 = complex1.add((-1259.64162331));
      Complex complex5 = complex4.reciprocal();
      complex1.INF.divide(complex1);
      Complex complex6 = complex5.add(8.446532344375812E-242);
      Complex complex7 = complex1.divide(complex1);
      complex1.asin();
      complex0.isNaN();
      Complex complex8 = Complex.valueOf(8.446532344375812E-242);
      Complex complex9 = complex5.subtract(complex1);
      complex9.add((-1259.64162331));
      complex8.cosh();
      Complex complex10 = complex8.tanh();
      complex10.ZERO.pow((-2824.872650997484));
      Complex complex11 = complex7.subtract(complex6);
      complex1.conjugate();
      Complex complex12 = complex8.multiply(1358);
      complex12.ONE.cos();
      complex11.toString();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-217.054319843824));
      complex0.hashCode();
      Complex complex1 = complex0.asin();
      complex0.equals("");
      Complex complex2 = complex0.divide((-217.054319843824));
      Complex complex3 = complex2.ONE.subtract((-217.054319843824));
      Complex complex4 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.NaN.multiply(complex3);
      complex6.I.multiply(complex4);
      Complex complex7 = complex2.add((-1259.64162331));
      Complex complex8 = complex7.reciprocal();
      complex1.INF.divide(complex3);
      complex8.add(8.446532344375812E-242);
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = complex2.asin();
      complex9.INF.acos();
      Complex.valueOf((-1259.64162331), 0.0);
      complex10.log();
      Complex.valueOf((-1449.9675));
      complex1.atan();
      complex6.reciprocal();
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.I;
      complex5.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.getArgument();
      Complex complex5 = Complex.valueOf(2.0, (-1450.509847));
      complex1.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.atan();
      Complex complex6 = new Complex(2.0);
      complex6.reciprocal();
      Complex complex7 = Complex.ONE;
      complex6.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      complex1.abs();
      complex0.subtract(972.571);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = new Complex(Double.NaN);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(6.283185307179586);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.INF.pow(complex1);
      complex4.ONE.multiply(723);
      complex3.NaN.abs();
      Complex complex6 = complex3.INF.subtract(complex2);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex3.I.divide(Double.NaN);
      Complex complex9 = complex1.add(complex2);
      Complex complex10 = complex2.subtract(complex0);
      Complex complex11 = complex9.cosh();
      complex4.hashCode();
      complex5.getField();
      complex11.cosh();
      complex0.I.divide(complex3);
      complex9.abs();
      complex8.readResolve();
      Complex complex12 = complex0.cosh();
      complex12.INF.add(complex10);
      complex7.log();
      Complex complex13 = complex5.negate();
      complex1.add((-20.0));
      complex13.hashCode();
      complex11.subtract((-20.0));
      complex6.nthRoot(723);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.ONE.add(complex0);
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex2.ONE.getField();
      Complex complex4 = complex3.NaN.reciprocal();
      complex4.ZERO.getField();
      Complex complex5 = complex0.add(0.0);
      complex5.ONE.divide(0.0);
      complex5.nthRoot(790);
      complex5.NaN.abs();
      complex5.NaN.multiply(790);
      complex5.hashCode();
      Complex complex6 = complex5.sqrt();
      complex1.add(complex4);
      complex1.negate();
      complex4.subtract(0.0);
      complex6.cos();
      Complex complex7 = complex3.subtract(2188.3801977);
      complex5.multiply(790);
      complex6.NaN.sqrt1z();
      complex6.cosh();
      complex2.sin();
      complex6.subtract(0.0);
      Complex complex8 = complex7.sin();
      complex8.ZERO.toString();
      complex8.reciprocal();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.INF;
      complex9.pow(complex10);
      complex0.createComplex((-217.054319843824), (-0.8));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      complex1.ZERO.multiply(complex0);
      complex0.abs();
      Complex complex2 = complex0.createComplex(0.0, 2668.65329066);
      Complex complex3 = complex0.subtract((-1.0));
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex2.sin();
      complex6.getArgument();
      Complex.valueOf((-0.9999941358775807), 294.571210832564);
      complex3.log();
      Complex complex8 = Complex.valueOf(2.0);
      complex8.atan();
      complex7.reciprocal();
      Complex complex9 = Complex.ONE;
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      complex1.ZERO.multiply(complex0);
      complex0.abs();
      Complex complex2 = complex1.createComplex(972.571, 525.0050571);
      Complex complex3 = complex2.subtract(814.221);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex3.sin();
      complex6.getArgument();
      Complex.valueOf(525.0050571, Double.NaN);
      complex6.log();
      Complex complex8 = Complex.valueOf((-1321.5425366633563));
      complex8.atan();
      complex5.reciprocal();
      complex2.equals(complex7);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      complex1.ZERO.multiply(complex0);
      complex1.abs();
      Complex complex2 = complex1.INF.createComplex(972.571, 972.571);
      complex2.subtract(972.571);
      complex2.I.divide(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.reciprocal();
      complex1.sin();
      complex4.getArgument();
      Complex.valueOf(23.315752331814, 24.017166366604236);
      Complex complex5 = Complex.INF;
      Complex.valueOf(24.017166366604236);
      Complex complex6 = complex3.atan();
      complex2.reciprocal();
      Complex complex7 = Complex.ONE;
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(6.283185307179586);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.INF.pow(complex1);
      complex4.ONE.multiply(723);
      complex3.NaN.abs();
      complex3.INF.subtract(complex2);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex3.I.divide(Double.NaN);
      Complex complex8 = complex1.add(complex2);
      Complex complex9 = complex2.subtract(complex0);
      Complex complex10 = complex8.cosh();
      complex4.hashCode();
      complex5.getField();
      complex10.cosh();
      complex0.I.divide(complex3);
      complex8.abs();
      complex7.readResolve();
      Complex complex11 = complex0.cosh();
      complex11.INF.add(complex9);
      complex6.log();
      Complex complex12 = complex5.negate();
      complex1.add((-20.0));
      complex12.hashCode();
      complex10.subtract((-20.0));
      complex8.toString();
      complex7.nthRoot(723);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-217.054319843824));
      complex0.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.multiply(723);
      complex2.abs();
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = Complex.valueOf(82.0, 82.0);
      Complex complex8 = complex1.divide(82.0);
      Complex complex9 = complex5.add(complex7);
      Complex complex10 = complex8.subtract(complex9);
      Complex complex11 = complex6.cosh();
      complex10.hashCode();
      complex1.getField();
      complex7.cosh();
      Complex complex12 = new Complex(477.8568799971);
      Complex complex13 = complex12.divide(complex1);
      Complex complex14 = Complex.NaN;
      complex14.abs();
      complex11.readResolve();
      complex11.cosh();
      Complex complex15 = complex0.add(complex11);
      complex11.log();
      complex4.negate();
      complex11.add(82.0);
      complex13.hashCode();
      complex0.subtract(584.0);
      complex15.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.abs();
      Complex complex3 = complex1.INF.createComplex(972.571, 972.571);
      complex3.subtract(972.571);
      Complex complex4 = complex3.I.divide(complex1);
      complex0.I.tan();
      Complex complex5 = complex3.ONE.reciprocal();
      complex5.I.reciprocal();
      Complex complex6 = complex0.sin();
      complex6.getArgument();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      complex7.NaN.log();
      Complex.valueOf(3555.77082165);
      complex5.INF.getField();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex0.reciprocal();
      complex5.multiply(37);
      complex8.cos();
      complex9.toString();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.abs();
      complex1.getArgument();
      complex2.abs();
      Complex complex3 = complex1.createComplex((-643.80210706062), Double.NaN);
      complex3.pow(complex2);
      Complex complex4 = Complex.I;
      complex4.readResolve();
      complex1.equals(complex2);
      Complex complex5 = Complex.I;
      complex5.nthRoot(442);
      complex3.readResolve();
      Complex.valueOf(Double.NaN);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.abs();
      Complex complex3 = complex1.INF.createComplex(972.571, 972.571);
      complex3.subtract(972.571);
      complex3.I.divide(complex1);
      Complex complex4 = complex3.ONE.reciprocal();
      complex4.I.reciprocal();
      Complex complex5 = complex0.sin();
      complex5.getArgument();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      complex6.NaN.log();
      Complex.valueOf(3555.77082165);
      complex2.atan();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = Complex.ONE;
      complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-217.054319843824));
      complex0.hashCode();
      Complex complex1 = complex0.asin();
      complex0.equals("");
      Complex complex2 = complex0.divide((-217.054319843824));
      Complex complex3 = complex2.ONE.subtract((-217.054319843824));
      Complex complex4 = complex0.NaN.createComplex(0.0, 0.0);
      complex2.sin();
      Complex complex5 = complex1.NaN.multiply(complex3);
      complex5.I.multiply(complex4);
      Complex complex6 = complex2.add((-1259.64162331));
      Complex complex7 = complex6.reciprocal();
      complex1.INF.divide(complex3);
      Complex complex8 = complex7.add(8.446532344375812E-242);
      Complex complex9 = complex1.divide(complex2);
      complex2.asin();
      complex9.INF.acos();
      complex0.isNaN();
      Complex complex10 = Complex.valueOf(8.446532344375812E-242);
      Complex complex11 = complex7.subtract(complex1);
      complex11.add((-1259.64162331));
      complex10.cosh();
      Complex complex12 = complex10.tanh();
      complex12.ZERO.pow((-2824.872650997484));
      Complex complex13 = complex9.subtract(complex8);
      complex1.conjugate();
      Complex complex14 = complex10.multiply(1358);
      complex14.ONE.cos();
      complex13.toString();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1322.717737857), (-1322.717737857));
      Complex complex1 = complex0.ONE.sinh();
      complex0.toString();
      Complex complex2 = complex0.createComplex((-1322.717737857), (-1322.717737857));
      complex2.sqrt();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.reciprocal();
      complex3.isInfinite();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(194);
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.NaN.abs();
      Complex complex3 = complex0.sqrt();
      complex0.ONE.getArgument();
      complex3.ZERO.toString();
      Complex complex4 = complex1.NaN.tanh();
      complex4.ZERO.add((double) 194);
      complex4.NaN.pow(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex0.getImaginary();
      complex0.getField();
      complex2.multiply(complex0);
      complex5.add(0.0);
      Complex.valueOf(0.0, (-837.3875));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.exp();
      complex1.NaN.readResolve();
      Complex complex3 = complex1.subtract((-3843.887784831883));
      complex1.ZERO.toString();
      Complex complex4 = complex1.I.multiply(complex0);
      complex0.multiply(584);
      Complex complex5 = Complex.valueOf((double) 584);
      complex5.exp();
      Complex complex6 = complex5.multiply(0.0);
      Complex complex7 = complex5.multiply(3077);
      complex1.ZERO.exp();
      Complex complex8 = complex5.atan();
      Complex complex9 = Complex.valueOf((double) 3077, (double) 3077);
      complex6.I.readResolve();
      complex9.ZERO.subtract(0.0);
      complex4.tanh();
      complex6.sqrt();
      Complex complex10 = complex9.acos();
      Complex complex11 = Complex.ONE;
      complex11.ZERO.divide(complex6);
      complex10.ZERO.multiply(complex11);
      complex4.isNaN();
      Complex complex12 = complex8.cos();
      complex12.NaN.readResolve();
      complex12.I.acos();
      complex2.asin();
      Complex.valueOf(1635.103996545, 0.0);
      complex7.subtract((-2256.4140727089734));
      complex3.negate();
      complex11.add(complex12);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      complex0.ZERO.tan();
      complex0.I.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.divide(1.5707963267948966);
      complex1.asin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.multiply(2115);
      Complex complex6 = complex5.ZERO.divide(complex3);
      try { 
        complex6.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2872.1482848952974), (-2872.1482848952974));
      Complex complex1 = complex0.ZERO.asin();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.add(complex2);
      complex4.ZERO.divide(complex1);
      Complex complex5 = complex4.NaN.add(0.0);
      complex5.I.atan();
      complex3.NaN.getField();
      complex3.INF.multiply((-2872.1482848952974));
      Complex complex6 = complex3.atan();
      complex6.pow(complex1);
      Complex complex7 = complex1.pow(complex3);
      complex7.ZERO.divide((-1494.63618581955));
      complex4.isInfinite();
      Complex complex8 = Complex.I;
      complex8.ZERO.readResolve();
      int int0 = (-2899);
      try { 
        complex8.INF.nthRoot((-2899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,899
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.NaN);
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex2.ONE.getField();
      Complex complex4 = complex3.NaN.reciprocal();
      complex4.ZERO.getField();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex5.ONE.divide(0.0);
      complex5.nthRoot(790);
      complex5.NaN.abs();
      Complex complex7 = complex5.NaN.multiply(790);
      complex7.ZERO.readResolve();
      complex0.INF.add(458.46279937875);
      complex1.getArgument();
      Complex complex8 = complex5.multiply(1056.2429572346425);
      Complex complex9 = complex6.NaN.createComplex(0.0, 0.0);
      Complex complex10 = complex8.pow((-3496.35023));
      Complex complex11 = complex8.atan();
      Complex complex12 = complex11.ZERO.multiply(458.46279937875);
      complex12.add(complex6);
      complex10.add(complex6);
      complex1.equals(complex0);
      complex0.readResolve();
      complex9.divide(458.46279937875);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(477.8568799971, 1716.7252305145);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.cos();
      complex3.NaN.reciprocal();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.conjugate();
      complex5.INF.abs();
      Complex complex6 = complex1.negate();
      complex6.I.abs();
      complex6.ZERO.atan();
      Complex complex7 = complex6.INF.pow(complex1);
      complex3.getArgument();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.INF.divide(complex3);
      complex9.ZERO.cosh();
      Complex complex10 = complex0.subtract(477.8568799971);
      Complex complex11 = complex0.pow(complex1);
      complex10.ONE.pow(-0.0);
      complex4.tanh();
      Complex complex12 = complex0.sqrt();
      complex3.INF.toString();
      complex7.abs();
      complex0.readResolve();
      complex10.multiply(complex12);
      complex9.toString();
      Complex complex13 = complex4.multiply(complex10);
      complex13.ZERO.log();
      complex0.tanh();
      complex13.reciprocal();
      try { 
        complex11.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(517.9);
      complex0.getField();
      double double0 = (-1319.16);
      Complex complex2 = complex0.multiply((-1319.16));
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ZERO.exp();
      complex1.NaN.pow((-1319.16));
      complex2.isNaN();
      complex6.ONE.sin();
      complex4.ONE.abs();
      Complex complex7 = complex5.asin();
      complex7.ONE.divide(complex1);
      complex5.getReal();
      complex0.getField();
      int int0 = 0;
      try { 
        complex4.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      complex1.ONE.sin();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex.valueOf(972.9994539010145, 972.9994539010145);
      complex0.ONE.nthRoot(589);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.asin();
      complex4.ZERO.log();
      Complex.valueOf(1840.435);
      Complex complex5 = complex3.cosh();
      complex0.INF.divide(147.7);
      complex0.cosh();
      Complex complex6 = complex3.pow(complex0);
      complex6.INF.hashCode();
      complex6.subtract(complex5);
      complex1.cos();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0269233640424235E-292));
      Complex complex1 = Complex.I;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-1.8853982316037226E201), (-1.8853982316037226E201));
      Complex complex1 = complex0.INF.acos();
      Complex.valueOf((-1.8853982316037226E201));
      Complex complex2 = complex0.pow((-1679.06));
      Complex complex3 = complex1.sqrt();
      complex0.INF.cosh();
      Complex complex4 = complex3.I.divide(complex1);
      complex4.ZERO.getField();
      Complex complex5 = complex2.multiply(2.0902045062932175E102);
      complex5.I.reciprocal();
      try { 
        complex2.NaN.nthRoot((-2489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,489
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      complex1.NaN.getField();
      complex0.isNaN();
      Complex complex2 = complex0.tanh();
      double double0 = 2.4035654067993164;
      Complex complex3 = Complex.valueOf(2.4035654067993164);
      Complex complex4 = complex3.INF.cosh();
      complex1.equals(complex0);
      Complex complex5 = complex0.sin();
      Complex complex6 = Complex.ZERO;
      complex4.INF.reciprocal();
      complex5.ZERO.asin();
      complex5.I.pow(complex6);
      complex1.I.divide(complex3);
      complex2.INF.exp();
      complex0.pow(0.0);
      complex4.tanh();
      int int0 = (-1);
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(523.9134, 0.0);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = complex1.add(523.9134);
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex4.ZERO.divide(0.0);
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.ONE.tanh();
      complex7.NaN.getArgument();
      complex0.isInfinite();
      Complex complex8 = complex1.I.multiply(0.0);
      Complex complex9 = complex8.ONE.pow(2385.800571358149);
      Complex complex10 = complex0.I.asin();
      complex10.ONE.divide(complex0);
      complex0.hashCode();
      Complex complex11 = complex4.sqrt();
      Complex complex12 = complex11.NaN.add(complex3);
      complex4.negate();
      complex5.subtract((-1331.326));
      complex1.cos();
      complex2.subtract(0.0);
      complex6.multiply(2061);
      complex8.cosh();
      Complex complex13 = complex1.sin();
      complex9.subtract(0.0);
      complex13.sin();
      complex6.reciprocal();
      complex13.pow(complex0);
      complex12.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.ONE.atan();
      complex0.toString();
      complex0.hashCode();
      complex0.acos();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.multiply(0);
      Complex complex3 = Complex.valueOf((-1.0938612624777085E-7));
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.pow(complex3);
      complex6.NaN.subtract(2.0);
      Complex complex7 = complex3.atan();
      complex7.getArgument();
      complex0.I.toString();
      complex6.NaN.add(1222.393724319267);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex2.acos();
      complex5.cosh();
      complex3.isNaN();
      complex8.sinh();
      complex0.cosh();
      complex7.getField();
      Complex.valueOf(3.141592653589793, (double) 0);
      Complex complex10 = complex9.reciprocal();
      complex10.ZERO.multiply(2336);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1193.0));
      Complex complex1 = complex0.INF.subtract((-1193.0));
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.NaN.acos();
      complex4.ONE.reciprocal();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex0.ZERO.asin();
      complex0.isInfinite();
      Complex complex7 = Complex.valueOf((-1193.0), (-1193.0));
      Complex complex8 = complex6.ONE.tan();
      complex8.INF.cos();
      Complex complex9 = complex2.INF.sinh();
      complex9.NaN.add((-1193.0));
      complex2.ONE.getArgument();
      Complex complex10 = complex6.pow((-1193.0));
      complex10.ZERO.hashCode();
      Complex complex11 = complex3.multiply(complex2);
      Complex complex12 = complex7.createComplex((-1193.0), (-1193.0));
      Complex complex13 = complex0.subtract((-1563.245350493));
      complex5.multiply(1987);
      complex11.INF.pow((-1398.9499));
      complex3.ONE.subtract(complex10);
      complex1.ONE.hashCode();
      Complex complex14 = complex0.multiply(2556.2508338511);
      complex14.NaN.subtract(5330.337679126227);
      complex7.pow(complex5);
      complex9.divide(complex11);
      complex2.multiply(1987);
      complex12.cos();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.47, 1744.47);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ONE.multiply(1303);
      Complex complex3 = complex0.multiply(0.0);
      complex3.tan();
      complex2.add(0.0);
      Complex complex4 = complex2.log();
      complex4.ONE.multiply(complex1);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      complex0.INF.getArgument();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.ZERO.log();
      complex1.INF.tan();
      complex0.NaN.createComplex(1644.042, (-578.0));
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.NaN.conjugate();
      complex0.NaN.multiply(484);
      complex0.abs();
      Complex complex6 = complex2.acos();
      complex1.readResolve();
      Complex complex7 = complex1.subtract(Double.POSITIVE_INFINITY);
      complex4.abs();
      complex4.isInfinite();
      complex7.cosh();
      complex4.getArgument();
      Complex complex8 = complex3.conjugate();
      complex8.getReal();
      complex6.tan();
      complex5.getImaginary();
      complex4.atan();
      complex3.isNaN();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2285.467364776217, (-2567.439));
      complex0.I.pow(2285.467364776217);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.subtract(complex1);
      complex3.INF.multiply(955);
      complex0.asin();
      complex3.getArgument();
      complex2.divide(571.37005498);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2715.063), (-2715.063));
      complex1.I.sqrt();
      Complex complex2 = complex1.multiply((-458));
      complex2.NaN.pow(complex0);
      Complex complex3 = complex0.ONE.divide(complex1);
      complex3.createComplex(1.0, 262.79);
      Complex complex4 = Complex.valueOf((-2715.063));
      Complex complex5 = complex4.cosh();
      complex5.NaN.getArgument();
      Complex complex6 = Complex.valueOf((-2715.063), (-2715.063));
      Complex complex7 = complex0.subtract(complex6);
      complex7.ZERO.getArgument();
      Complex complex8 = complex6.I.asin();
      complex8.ONE.getField();
      Complex complex9 = complex3.ZERO.conjugate();
      complex7.toString();
      Complex complex10 = complex3.multiply(complex0);
      complex10.ONE.pow(complex6);
      Complex complex11 = complex8.INF.tan();
      complex11.ONE.cos();
      complex3.pow(complex6);
      Complex complex12 = complex2.negate();
      Complex complex13 = complex8.sinh();
      complex13.subtract((-683.3824));
      complex9.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1982.04888576);
      Complex complex1 = complex0.ONE.tanh();
      complex0.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      complex2.isNaN();
      complex2.getReal();
      Complex complex5 = complex2.cosh();
      Complex complex6 = Complex.valueOf(1982.04888576);
      complex1.log();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex1.NaN.cosh();
      Complex complex9 = complex4.I.multiply((-2160.8316755953));
      Complex complex10 = complex1.pow(complex0);
      complex10.INF.multiply(complex8);
      complex10.NaN.add(complex6);
      complex1.exp();
      Complex complex11 = complex7.log();
      Complex complex12 = complex4.negate();
      complex0.log();
      Complex complex13 = new Complex((-1171.87));
      complex2.divide(complex13);
      complex12.I.sqrt1z();
      Complex complex14 = complex12.pow(0.0);
      Complex complex15 = complex14.ZERO.sin();
      complex5.cosh();
      complex2.subtract(complex9);
      complex11.divide(0.0);
      complex3.sqrt();
      complex15.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.add(complex1);
      Complex complex3 = complex0.ZERO.negate();
      complex1.ONE.pow(complex2);
      complex0.I.getArgument();
      Complex complex4 = complex0.cosh();
      complex2.ZERO.readResolve();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex4.ONE.tanh();
      complex7.divide(complex0);
      Complex complex8 = complex2.NaN.log();
      Complex complex9 = complex4.I.sqrt();
      Complex complex10 = complex5.INF.pow(Double.POSITIVE_INFINITY);
      complex9.ZERO.getField();
      Complex complex11 = complex2.atan();
      complex11.ONE.pow(complex9);
      complex2.equals(complex11);
      complex4.isNaN();
      complex8.cos();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.sqrt1z();
      complex1.createComplex(0.0, 1.5707963267948966);
      complex12.abs();
      complex6.getReal();
      complex2.reciprocal();
      complex10.createComplex(Double.POSITIVE_INFINITY, 79.0);
      Complex complex13 = Complex.valueOf(0.0);
      complex11.subtract(complex13);
      complex11.multiply(Double.POSITIVE_INFINITY);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.negate();
      complex2.I.toString();
      Complex complex4 = complex0.sqrt1z();
      complex4.nthRoot(27);
      complex2.readResolve();
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.reciprocal();
      complex4.isNaN();
      complex4.ZERO.divide(complex7);
      Complex complex9 = complex3.INF.tanh();
      complex0.abs();
      Complex complex10 = complex8.pow(0.0);
      complex10.multiply(0.0);
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex3.toString();
      complex11.NaN.createComplex(1.6515377082609677E-301, 4035.33188591);
      complex1.abs();
      complex10.cos();
      complex10.getField();
      Complex complex12 = complex8.subtract(4147.85188263);
      complex12.INF.getArgument();
      Complex complex13 = complex10.conjugate();
      complex13.I.multiply(27);
      Complex complex14 = complex3.add(960.64034);
      complex5.sin();
      complex14.atan();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.NaN.tanh();
      complex3.I.conjugate();
      complex2.INF.sinh();
      complex1.ONE.hashCode();
      complex0.ZERO.hashCode();
      Complex complex4 = complex0.atan();
      complex4.getField();
      Complex complex5 = complex3.cos();
      complex4.ONE.multiply(0);
      complex3.INF.pow((-1453.32));
      Complex complex6 = Complex.valueOf(0.0, (-20.0));
      Complex complex7 = complex5.asin();
      complex4.subtract(complex7);
      complex1.exp();
      complex5.hashCode();
      complex6.pow(121.145056263208);
      complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.NaN.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.tanh();
      complex2.negate();
      complex1.tan();
      complex4.isNaN();
      Complex complex5 = complex3.divide((-2819.006));
      complex2.getImaginary();
      Complex complex6 = complex5.negate();
      complex6.NaN.multiply((-2819.006));
      complex0.sin();
      complex0.getImaginary();
      complex4.negate();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1644.80397018);
      Complex complex1 = complex0.ONE.log();
      complex0.INF.toString();
      Complex complex2 = complex0.ZERO.multiply(1339);
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.add((double) 1339);
      Complex complex5 = complex4.I.createComplex(0.0, 1.0);
      Complex complex6 = complex4.cosh();
      complex6.I.sinh();
      complex0.INF.pow(complex1);
      complex6.abs();
      complex6.tanh();
      complex3.sinh();
      complex0.getField();
      complex4.exp();
      complex5.abs();
      complex3.cosh();
      complex3.nthRoot(1339);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(4153.48331855765, 2416.6850598);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.INF.cosh();
      Complex complex3 = complex0.multiply(4153.48331855765);
      complex1.pow(2416.6850598);
      complex3.ONE.cosh();
      complex1.I.getField();
      complex3.hashCode();
      complex1.isNaN();
      complex1.I.readResolve();
      Complex complex4 = complex3.log();
      complex4.multiply(4153.48331855765);
      complex2.toString();
      Complex.valueOf(4153.48331855765, 4153.48331855765);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3186.696), (-3186.696));
      Complex complex1 = Complex.valueOf((-3186.696), (-3186.696));
      complex0.getField();
      Complex complex2 = complex1.ZERO.tan();
      complex0.getReal();
      complex1.getImaginary();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-3186.696));
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex5.INF.pow(complex0);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex6.ONE.atan();
      assertEquals(0.7853981633974483, complex8.getReal(), 0.01);
      
      Complex complex9 = complex5.INF.multiply((-593));
      Complex complex10 = complex9.INF.tan();
      Complex complex11 = complex3.sqrt1z();
      complex0.conjugate();
      complex11.INF.hashCode();
      complex0.toString();
      Complex complex12 = complex11.ONE.sqrt();
      complex12.I.sin();
      Complex complex13 = complex11.subtract(1672.95131);
      Complex complex14 = complex13.tan();
      Complex complex15 = complex14.ZERO.pow(complex6);
      Complex complex16 = Complex.valueOf(0.0, (-3186.696));
      complex16.add((-3186.696));
      Complex complex17 = complex3.tanh();
      assertEquals((-1.557407724654902), complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex0.ZERO.log();
      Complex complex19 = complex16.add(1672.95131);
      Complex complex20 = complex4.exp();
      complex19.cos();
      boolean boolean0 = complex18.isNaN();
      assertFalse(boolean0);
      
      complex15.getReal();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals((-0.21293830957791757), complex14.getReal(), 0.01);
      assertSame(complex15, complex10);
      
      Complex complex21 = complex7.sin();
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex12));
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex20));
      assertEquals(0.9999999999999997, complex21.getImaginary(), 0.01);
      assertFalse(complex5.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.multiply(4.793444363780116E219);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.NaN.reciprocal();
      Complex complex4 = complex0.ONE.cos();
      complex4.I.getArgument();
      Complex complex5 = complex4.NaN.pow(0.0);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      complex1.subtract(complex0);
      Complex complex6 = complex3.cosh();
      assertSame(complex6, complex5);
      
      Complex complex7 = complex1.sqrt1z();
      double double0 = complex7.abs();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.atan();
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-646.74), 388.650439085481);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ONE.pow(0.0);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.I.sin();
      assertEquals(1.1752011936438014, complex6.getImaginary(), 0.01);
      
      Complex.valueOf(0.2881702184677124);
      complex5.createComplex((-3109.727076127227), (-20.0));
      assertEquals((-1.94815016192943), complex5.getImaginary(), 0.01);
  }
}
