/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:57:19 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      complex3.pow(complex4);
      complex4.asin();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      complex0.atan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(7, Double.NaN);
      complex1.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(8.218407798110846E307);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(8.218407798110846E307);
      complex1.asin();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1796.405074248491, Double.POSITIVE_INFINITY);
      complex0.multiply(129);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-1396.7);
      Complex complex0 = Complex.valueOf((-0.7615941559557649), (-1396.7));
      double double1 = (-489.1);
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      complex1.nthRoot(1235);
      Complex complex2 = complex1.NaN.createComplex(1235, Double.POSITIVE_INFINITY);
      complex2.ZERO.cosh();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex1.createComplex((-0.3852024628117541), Double.POSITIVE_INFINITY);
      complex4.INF.divide(complex3);
      complex1.asin();
      Complex complex5 = complex4.asin();
      complex5.ONE.asin();
      complex1.reciprocal();
      complex0.subtract((-1810.3185007685));
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
      complex0.divide(0.05256241787122133);
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(8.218407798110846E307);
      Complex complex2 = Complex.ONE;
      complex1.acos();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1284772.4402), (-1284772.4402));
      complex0.readResolve();
      Complex complex2 = complex0.acos();
      complex1.sqrt();
      Complex complex3 = Complex.valueOf((double) 490, 20.0);
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.ZERO;
      complex4.readResolve();
      Complex complex6 = complex3.tan();
      complex6.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      complex0.equals(complex1);
      Complex complex3 = complex1.I.divide((-3.459885432869825E182));
      complex3.ZERO.readResolve();
      Complex complex4 = complex2.acos();
      complex2.NaN.sqrt();
      Complex complex5 = complex1.cos();
      complex5.ZERO.multiply(14);
      Complex complex6 = complex2.negate();
      complex6.NaN.log();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex7.tanh();
      complex8.ZERO.divide(218.20954555);
      complex5.sqrt();
      Complex complex9 = Complex.valueOf((double) 1650);
      Complex complex10 = complex9.add((-3.459885432869825E182));
      complex3.pow(complex6);
      Complex complex11 = Complex.I;
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0000003696177295), (-3964.3129430418));
      Complex complex1 = complex0.pow(1787.756219342757);
      complex1.NaN.reciprocal();
      Complex complex2 = Complex.valueOf(1787.756219342757);
      Complex complex3 = complex2.INF.createComplex((-3653.471), (-1073.45369326));
      complex3.tan();
      complex0.ONE.subtract(complex2);
      complex1.I.createComplex((-1.0000003696177295), (-3653.471));
      complex1.readResolve();
      complex1.tanh();
      complex2.acos();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.sqrt();
      complex2.equals(complex1);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.multiply((-1909));
      Complex complex7 = complex3.negate();
      complex7.log();
      complex5.asin();
      Complex complex8 = complex6.tanh();
      complex1.divide((double) 14);
      complex1.sqrt();
      Complex.valueOf(20.0);
      complex8.add((double) 14);
      complex7.pow(complex1);
      complex8.tan();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.divide((-20.0));
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tanh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      complex2.add(complex1);
      Complex complex4 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = new Complex((-1284772.4402), (-20.0));
      complex2.readResolve();
      Complex complex3 = complex2.acos();
      complex3.sqrt();
      complex0.equals(", ");
      complex1.multiply((-1284772.4402));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex0.pow(complex1);
      complex2.ONE.divide(complex0);
      Complex complex3 = complex1.negate();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(500);
      complex0.hashCode();
      complex1.multiply(complex0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex(0.0, (-638.075));
      complex3.divide(complex4);
      Complex complex5 = complex4.multiply(0.0);
      complex4.tan();
      Complex complex6 = new Complex(0.0, (-3.459885432869825E182));
      complex2.isInfinite();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1787.756219342757, (-2516.53));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.I.atan();
      complex3.cosh();
      complex2.ONE.pow(3535.88352);
      Complex complex4 = complex0.multiply((-1429));
      complex4.INF.createComplex((-2516.53), (-2516.53));
      Complex complex5 = complex4.sqrt1z();
      complex5.INF.tan();
      Complex complex6 = complex4.log();
      complex4.sin();
      Complex complex7 = complex6.asin();
      complex7.add(complex2);
      complex0.pow(complex2);
      Complex complex8 = complex4.atan();
      complex5.cos();
      complex5.createComplex(2491.88581269, 9.25199803843538);
      Complex.valueOf(20.0);
      complex1.conjugate();
      complex0.multiply(complex2);
      complex8.nthRoot(2081);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      complex0.ONE.multiply(0.38374656438827515);
      Complex complex3 = new Complex(0.38374656438827515);
      complex3.equals(complex1);
      Complex complex4 = complex1.I.divide((-3.459885432869825E182));
      Complex complex5 = (Complex)complex4.ZERO.readResolve();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex2.NaN.sqrt();
      complex3.equals(complex2);
      Complex complex8 = complex1.cos();
      complex8.ZERO.multiply(14);
      Complex complex9 = complex2.negate();
      Complex complex10 = complex9.NaN.log();
      complex6.asin();
      complex8.reciprocal();
      complex10.multiply(complex4);
      complex7.cosh();
      complex7.reciprocal();
      complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(1534.6364983252, 1534.6364983252);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.INF.cosh();
      complex3.INF.pow(complex1);
      complex0.ONE.log();
      Complex complex4 = complex0.divide(14.0);
      complex4.ZERO.cos();
      Complex complex5 = Complex.valueOf(14.0);
      complex2.abs();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.NaN.createComplex(1871.047234286685, (-1279.6309295));
      Complex complex8 = complex5.negate();
      complex8.negate();
      Complex complex9 = complex3.asin();
      complex7.multiply((-3458));
      Complex complex10 = complex0.sin();
      complex9.sinh();
      complex2.abs();
      complex6.negate();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), 2.1093431537317737E11);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.INF.cos();
      complex3.NaN.tanh();
      complex0.abs();
      Complex complex4 = complex0.multiply(991);
      Complex complex5 = complex1.asin();
      complex5.sqrt();
      complex4.sqrt1z();
      complex0.negate();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(1029.674156506);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.divide(1650.0);
      Complex complex6 = Complex.I;
      complex6.readResolve();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.sqrt();
      complex6.equals("");
      complex2.cos();
      Complex complex9 = complex7.multiply(14);
      Complex complex10 = complex4.multiply(3022);
      complex9.negate();
      complex10.log();
      complex1.asin();
      complex8.tanh();
      Complex complex11 = complex2.divide((-1.0));
      complex5.add(complex9);
      complex2.tan();
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.ZERO;
      Object object1 = new Object();
      complex5.equals(object1);
      complex10.getImaginary();
      Complex.valueOf((double) 14);
      complex11.add(2146.1299563);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(0.38374656438827515);
      Complex complex3 = complex1.divide(0.38374656438827515);
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      Complex complex4 = complex2.divide(3.6268604078470186);
      Object object1 = complex2.readResolve();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex4.sqrt();
      complex0.equals(object1);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex4.multiply(1237);
      complex1.multiply((-1));
      Complex complex9 = complex7.negate();
      complex8.log();
      Complex complex10 = complex2.asin();
      complex6.tanh();
      complex7.divide(0.38374656438827515);
      Complex complex11 = complex5.add(complex1);
      complex10.sqrt();
      complex1.divide((double) 1237);
      Complex.valueOf(0.38374656438827515, 218.20954555);
      complex6.pow(complex11);
      complex9.add((-20.0));
      complex5.pow(complex8);
      complex2.subtract((-2359.1047));
      Complex.valueOf(218.20954555, (-2.071910882200156E-7));
      Complex.valueOf(218.20954555);
      complex9.multiply(2.414213562373095);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.I.getArgument();
      Complex complex2 = Complex.I;
      complex2.NaN.multiply(complex1);
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex1.I.sqrt();
      complex4.ONE.createComplex(1.05387548454467E-309, 1.5707963267948966);
      complex2.tanh();
      Complex complex5 = new Complex(1.5707963267948966, 1.5707963267948966);
      Complex complex6 = complex1.I.reciprocal();
      complex6.I.pow((-0.8259324122591327));
      complex3.subtract(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1029.674156506), (-1029.674156506));
      complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.INF.negate();
      complex1.I.sqrt();
      Complex complex4 = complex2.ONE.reciprocal();
      complex0.I.hashCode();
      complex0.NaN.readResolve();
      Complex complex5 = complex2.ONE.exp();
      complex1.I.getField();
      Complex complex6 = complex0.multiply((-1463.6164043173587));
      complex4.getArgument();
      Complex complex7 = Complex.valueOf((-1463.6164043173587));
      Complex complex8 = complex7.negate();
      complex6.log();
      complex4.asin();
      Complex complex9 = complex7.tanh();
      complex0.divide((-1029.674156506));
      Complex complex10 = complex9.add(complex0);
      complex5.sqrt();
      complex3.divide((-1029.674156506));
      Complex.valueOf((-1029.674156506), -0.0);
      Complex complex11 = complex1.pow(complex6);
      complex10.add((-1029.674156506));
      complex11.pow(complex8);
      complex7.subtract(0.6144464015960693);
      Complex.valueOf((-1029.674156506), 0.495672345161438);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1029.674156506), (-1029.674156506));
      complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt();
      complex0.getArgument();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.sinh();
      complex0.sqrt();
      Complex complex5 = Complex.INF;
      complex5.tanh();
      complex3.conjugate();
      Complex complex6 = complex4.reciprocal();
      complex3.multiply(complex2);
      complex1.cosh();
      complex6.reciprocal();
      complex5.subtract((-1029.674156506));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      complex0.I.multiply((-1783));
      complex1.readResolve();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.sin();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ZERO.cos();
      complex2.INF.cosh();
      Complex complex3 = complex0.ZERO.multiply(6637);
      complex2.INF.hashCode();
      complex0.toString();
      Complex complex4 = Complex.NaN;
      complex2.multiply(complex0);
      Complex complex5 = new Complex(6637);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex3.conjugate();
      complex0.reciprocal();
      complex6.multiply(complex3);
      Complex complex8 = complex7.cosh();
      complex7.reciprocal();
      complex5.add(complex8);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.reciprocal();
      complex4.hashCode();
      complex4.readResolve();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.exp();
      complex5.getField();
      Complex complex7 = complex5.multiply(2204.1699040810618);
      complex4.getArgument();
      complex1.negate();
      complex4.add(2204.1699040810618);
      complex6.exp();
      Complex complex8 = complex6.sqrt1z();
      complex7.INF.getArgument();
      complex8.isInfinite();
      Complex complex9 = complex1.divide(391.5529492469936);
      complex7.divide(Double.NaN);
      Complex complex10 = Complex.NaN;
      complex10.getReal();
      complex9.isInfinite();
      complex9.multiply((-2381.359));
      Complex complex11 = Complex.valueOf(1765.3731560194035, (-1435.7795123686474));
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.936946987935961E-70);
      complex0.isInfinite();
      Complex complex1 = complex0.tan();
      complex0.nthRoot(1);
      complex0.cos();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.add((-375.949));
      complex2.I.log();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex3.I.conjugate();
      complex0.negate();
      complex0.isInfinite();
      complex3.I.tan();
      complex3.nthRoot(1);
      complex4.cos();
      complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      Complex complex1 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.reciprocal();
      complex1.acos();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide((-20.0));
      complex5.multiply(complex3);
      Complex complex6 = Complex.I;
      complex5.subtract((-340.53213));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.exp();
      complex3.readResolve();
      Complex complex4 = complex2.pow((-258.7));
      complex1.isNaN();
      complex2.multiply(complex1);
      complex2.multiply((-258.7));
      Complex complex5 = new Complex((-258.7), 1566.25495);
      complex5.tan();
      Complex complex6 = Complex.INF;
      complex2.equals(complex4);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1029.674156506), (-1029.674156506));
      complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex2.ONE.reciprocal();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex3.pow((-1029.674156506));
      Complex complex8 = complex7.subtract((-142.7849248546));
      Complex complex9 = new Complex((-142.7849248546), (-142.7849248546));
      Complex complex10 = complex9.conjugate();
      complex6.add(complex8);
      Complex complex11 = complex5.divide((-1029.674156506));
      complex4.reciprocal();
      Complex.valueOf((-1516.28), 0.0);
      complex10.getImaginary();
      complex11.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.887237361505784E-207);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.NaN.add(Double.NaN);
      complex4.NaN.multiply(Double.NaN);
      complex1.isInfinite();
      complex4.getField();
      Complex complex6 = complex3.cos();
      complex6.ZERO.hashCode();
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex0.acos();
      complex8.ZERO.log();
      complex3.asin();
      complex0.ONE.multiply(Double.NaN);
      complex2.equals("");
      Complex complex9 = complex3.atan();
      Complex.valueOf((double) 2114);
      complex9.ONE.readResolve();
      Complex complex10 = complex9.ONE.multiply(2114);
      complex8.multiply((-1.0));
      complex5.getImaginary();
      Complex.valueOf(Double.NaN, (-1.0));
      complex10.toString();
      complex7.multiply(3001);
      complex7.divide(1.887237361505784E-207);
      Complex complex11 = Complex.valueOf(1776.67262);
      complex11.log();
      complex7.toString();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1763.0);
      complex0.INF.reciprocal();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.I.divide(1763.0);
      Complex.valueOf((-20.0));
      complex0.INF.getArgument();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.asin();
      complex3.tanh();
      complex4.divide((double) (-1));
      complex5.sqrt();
      Complex.valueOf((-2703.97988), 2.0);
      Complex complex6 = Complex.valueOf((double) (-1), 2.0);
      complex0.pow(complex6);
      complex2.add((-2703.97988));
      complex1.pow(complex6);
      complex2.subtract(802.831199201);
      Complex.valueOf((-1148.33636060208), (-768.7032552));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1763.0);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.ZERO.sin();
      complex0.I.divide(1763.0);
      Complex complex4 = complex1.exp();
      complex3.sqrt1z();
      complex4.isInfinite();
      Complex complex5 = complex2.divide((-20.0));
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide(Double.POSITIVE_INFINITY);
      complex7.getReal();
      complex3.isInfinite();
      complex2.multiply(1763.0);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.I.getArgument();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.sqrt();
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
      complex2.cos();
      Complex complex5 = complex4.multiply((-1));
      complex3.multiply((-1));
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.log();
      complex6.asin();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex2.divide(218.20954555);
      Complex complex10 = Complex.valueOf(3486.0, (-530.73));
      Complex complex11 = complex10.add(complex9);
      complex5.sqrt();
      complex8.divide(3386.79297);
      Complex.valueOf((-555.985), (double) (-1));
      complex8.pow(complex11);
      complex5.add((-555.985));
      complex0.pow(complex7);
      complex5.subtract((-934.0));
      Complex.valueOf(2.718281828459045, (-1029.674156506));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex0.ONE.sinh();
      complex0.I.sqrt();
      complex1.tanh();
      complex2.ZERO.conjugate();
      complex0.I.reciprocal();
      Complex complex3 = complex1.multiply(complex0);
      complex3.cosh();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      complex0.ONE.multiply(0.38374656438827515);
      Complex complex3 = complex1.divide(0.38374656438827515);
      complex3.equals(complex1);
      Complex complex4 = complex1.I.divide((-3.459885432869825E182));
      complex4.ZERO.readResolve();
      Complex complex5 = complex3.acos();
      complex2.NaN.sqrt();
      complex3.equals(complex2);
      Complex complex6 = complex1.cos();
      complex6.ZERO.multiply((-1));
      complex6.I.multiply(1650);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex9.tanh();
      complex10.ZERO.divide(218.20954555);
      complex2.add(complex0);
      complex6.sqrt();
      Complex complex11 = complex9.divide((-3.459885432869825E182));
      Complex complex12 = Complex.valueOf((-3.459885432869825E182), 0.38374656438827515);
      complex11.pow(complex12);
      complex11.add((-3.459885432869825E182));
      complex4.pow(complex7);
      complex8.subtract(0.38374656438827515);
      Complex.valueOf(0.495672345161438, 218.20954555);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-871.63), 3.901467289560222E131);
      Complex complex2 = complex0.I.add(complex1);
      complex0.getField();
      Complex complex3 = complex0.sinh();
      complex3.INF.abs();
      Complex complex4 = complex3.ONE.exp();
      complex4.NaN.cos();
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex3.pow(2.0);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex0.reciprocal();
      complex4.getField();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex8.add(Double.POSITIVE_INFINITY);
      complex0.ZERO.multiply(1.887237361505784E-207);
      complex10.NaN.readResolve();
      complex2.subtract((-871.63));
      complex9.asin();
      complex5.multiply(2147160134);
      complex4.log();
      complex7.subtract((-0.9092974268256817));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.41421356237309515);
      Complex complex2 = Complex.ONE;
      complex1.ONE.multiply(complex2);
      Complex complex3 = Complex.valueOf(0.25045941362922214);
      Complex complex4 = complex3.ZERO.tanh();
      complex4.acos();
      Complex complex5 = complex1.INF.multiply(4990);
      complex0.NaN.hashCode();
      Complex complex6 = complex1.acos();
      complex0.log();
      complex5.ONE.divide(0.38374656438827515);
      complex1.cos();
      Complex complex7 = complex1.add(0.41421356237309515);
      complex7.NaN.multiply((-2300.75865105));
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex6.cosh();
      complex8.subtract(complex5);
      Complex complex10 = complex0.exp();
      complex10.multiply(complex9);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add((-375.949));
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.negate();
      complex5.isInfinite();
      complex5.tan();
      try { 
        complex6.nthRoot((-2197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,197
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.createComplex((-2970.87), (-2970.87));
      Complex complex3 = Complex.valueOf((-2970.87), (-2970.87));
      complex2.pow(complex0);
      Complex complex4 = new Complex(565.0, (-804.24274));
      complex4.exp();
      complex0.add(26.698427121914257);
      Complex complex5 = new Complex(2.35517168886351E-254);
      complex5.acos();
      complex5.cos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.sinh();
      Complex complex8 = Complex.I;
      complex2.equals(complex8);
      complex5.abs();
      complex7.sqrt();
      complex3.divide(complex5);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ZERO.cos();
      complex2.INF.cosh();
      Complex complex3 = complex0.ZERO.multiply(6637);
      complex2.INF.hashCode();
      complex0.toString();
      complex0.isInfinite();
      complex2.divide((double) 6637);
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex4.negate();
      complex5.isInfinite();
      complex3.tan();
      // Undeclared exception!
      complex3.nthRoot(6637);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.887237361505784E-207);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.NaN.add(Double.NaN);
      Complex complex6 = complex4.NaN.multiply(Double.NaN);
      complex1.isInfinite();
      complex4.getField();
      complex3.cos();
      Complex complex7 = complex5.exp();
      complex3.readResolve();
      complex6.pow(1.887237361505784E-207);
      complex3.isNaN();
      try { 
        complex7.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex1.hashCode();
      Complex complex4 = complex2.divide(complex0);
      complex2.acos();
      complex1.log();
      complex2.asin();
      Complex complex5 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.equals("");
      complex3.atan();
      Complex.valueOf((double) 2114);
      Complex complex6 = Complex.valueOf(0.6374238729476929, 2405.98241001281);
      complex6.readResolve();
      complex3.multiply(2114);
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex5.getImaginary();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(2405.98241001281, 2405.98241001281);
      complex7.toString();
      complex6.multiply(3001);
      Complex complex8 = complex6.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(6637.0);
      complex0.log();
      complex8.toString();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.887237361505784E-207);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.tan();
      complex4.NaN.add(Double.NaN);
      complex4.NaN.multiply(Double.NaN);
      complex1.isInfinite();
      complex4.getField();
      Complex complex5 = complex3.cos();
      complex5.ZERO.hashCode();
      complex5.I.divide(complex4);
      Complex complex6 = complex0.acos();
      complex6.ZERO.log();
      complex3.asin();
      Complex complex7 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.multiply(complex6);
      complex0.log();
      complex8.multiply((-106.961848));
      Complex complex9 = Complex.valueOf((-3528.6113582));
      complex9.tan();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.add((-106.961848));
      complex9.cos();
      complex7.multiply(Double.POSITIVE_INFINITY);
      complex7.isInfinite();
      Complex complex11 = complex7.negate();
      complex11.INF.pow((-2669.779039697919));
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.887237361505784E-207);
      Complex complex1 = Complex.valueOf(1.887237361505784E-207, 1.887237361505784E-207);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.NaN.add(Double.NaN);
      complex4.NaN.multiply(Double.NaN);
      complex1.isInfinite();
      complex4.getField();
      Complex complex6 = complex3.cos();
      complex6.ZERO.hashCode();
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.ZERO.log();
      complex3.asin();
      complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      complex2.equals("");
      Complex complex9 = complex3.atan();
      Complex.valueOf((double) 2114);
      complex9.ONE.readResolve();
      Complex complex10 = complex9.ONE.multiply(2114);
      complex8.multiply((-1.0));
      complex5.getImaginary();
      Complex.valueOf(Double.NaN, (-1.0));
      complex10.toString();
      complex7.multiply(3001);
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.valueOf(1776.67262);
      complex11.log();
      complex7.toString();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.conjugate();
      complex2.reciprocal();
      complex3.createComplex((-6.508966857277253E-9), (-6.508966857277253E-9));
      Complex complex5 = Complex.valueOf((-1.0), 3295.0);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = new Complex(565.0, 1.557407724654902);
      Complex complex8 = complex7.exp();
      complex3.add((-2.0));
      Complex complex9 = complex6.acos();
      Complex complex10 = complex8.cos();
      complex9.sinh();
      complex6.equals(complex8);
      complex1.abs();
      complex10.sqrt();
      try { 
        complex10.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.I.toString();
      Complex complex3 = Complex.valueOf((-124.16665));
      Complex complex4 = complex3.atan();
      complex3.getField();
      complex4.readResolve();
      complex1.conjugate();
      complex4.multiply(complex0);
      complex4.sinh();
      complex3.multiply((-1875.0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.add(2.0821447372436523);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex4.multiply(37);
      complex1.createComplex(37, 6018.567205700588);
      complex5.nthRoot(1111);
      Complex complex6 = complex0.cosh();
      complex6.getField();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex5.add(239.0114939231688);
      complex2.sin();
      complex5.getArgument();
      Complex complex9 = new Complex(Double.NaN);
      Complex complex10 = complex9.tanh();
      complex10.log();
      complex3.getReal();
      Complex complex11 = complex6.sqrt1z();
      complex4.cos();
      complex11.abs();
      complex11.add(complex8);
      complex11.getField();
      complex8.tan();
      complex7.createComplex((-1765.3731560194035), 0.36787944117144233);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.887237361505784E-207);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.NaN.add(Double.NaN);
      complex4.NaN.multiply(Double.NaN);
      complex1.isInfinite();
      complex4.getField();
      Complex complex6 = complex3.cos();
      complex6.ZERO.hashCode();
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex0.acos();
      complex8.ZERO.log();
      complex3.asin();
      complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      complex2.equals("");
      Complex complex9 = complex3.atan();
      Complex.valueOf((double) 2114);
      complex9.ONE.readResolve();
      Complex complex10 = complex9.ONE.multiply(2114);
      complex8.multiply((-1.0));
      complex5.getImaginary();
      Complex.valueOf(Double.NaN, (-1.0));
      complex10.toString();
      complex7.multiply(3001);
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.valueOf(1776.67262);
      complex11.log();
      complex7.toString();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.abs();
      Complex complex1 = Complex.valueOf(0.0, (double) 125);
      complex1.NaN.getArgument();
      complex0.INF.nthRoot(125);
      Complex complex2 = complex0.pow(20.0);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex3.INF.conjugate();
      complex3.multiply(20.0);
      complex3.INF.add(complex0);
      complex1.multiply(complex2);
      complex4.createComplex(20.0, 2.462968349456787);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.I.toString();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex0.ZERO.cos();
      complex2.divide(complex3);
      complex4.I.multiply(1111);
      Complex complex5 = complex1.createComplex(0.0, (-1765.3731560194035));
      complex5.nthRoot(1358);
      Complex complex6 = complex0.cosh();
      complex1.getField();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex0.add(2051.6);
      complex8.ZERO.sin();
      complex7.ZERO.getArgument();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex7.log();
      complex9.getReal();
      Complex complex11 = complex0.sqrt1z();
      complex8.cos();
      complex10.abs();
      complex9.add(complex3);
      complex2.getField();
      complex2.tan();
      complex11.createComplex((-449.2823), 1870.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.NaN.exp();
      complex3.getArgument();
      complex1.cosh();
      complex1.NaN.atan();
      complex3.NaN.multiply(0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.pow(complex0);
      complex3.INF.log();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.atan();
      complex5.INF.getField();
      complex5.NaN.tan();
      complex5.ONE.abs();
      complex4.ZERO.conjugate();
      complex5.hashCode();
      double double0 = 3232.454;
      int int0 = 0;
      try { 
        complex4.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-626.757591387));
      Complex complex2 = complex0.subtract(complex1);
      complex1.log();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex2.subtract(complex1);
      complex5.I.sqrt1z();
      complex5.NaN.divide(complex1);
      Complex complex7 = complex6.NaN.tan();
      complex6.readResolve();
      complex1.tanh();
      complex0.exp();
      Complex complex8 = complex5.sinh();
      complex8.add((-626.757591387));
      complex6.INF.readResolve();
      Complex complex9 = complex5.pow(complex7);
      complex9.sin();
      complex3.reciprocal();
      complex2.isInfinite();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.ONE.exp();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.ZERO.atan();
      complex7.I.sinh();
      complex0.readResolve();
      complex0.I.hashCode();
      Complex complex8 = complex6.cosh();
      complex8.ZERO.sqrt();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.pow(complex6);
      complex9.subtract(complex6);
      complex2.pow(complex6);
      complex10.hashCode();
      complex2.sqrt();
      complex0.getReal();
      complex5.toString();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2386.306414852), (-2386.306414852));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.subtract((-2386.306414852));
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.getArgument();
      complex2.acos();
      complex2.getField();
      complex0.subtract(complex3);
      complex1.sin();
      complex4.createComplex(0.19999998807907104, (-1865.7864285809));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.subtract(complex1);
      complex0.INF.cos();
      Complex complex5 = complex3.I.sqrt();
      Complex.valueOf(0.0, 6.283185307179586);
      complex5.INF.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0, 0.5718178749084473);
      Complex complex7 = complex4.reciprocal();
      complex3.ONE.nthRoot(704);
      complex3.I.getArgument();
      Complex complex8 = complex3.sqrt();
      complex8.INF.multiply(complex2);
      complex6.ONE.cosh();
      complex2.getImaginary();
      complex6.add(Double.NaN);
      complex7.createComplex(0.0, Double.NaN);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.multiply((-337.4));
      Complex complex3 = complex0.NaN.divide(complex1);
      complex3.ONE.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.pow(complex0);
      Complex.valueOf(2464.7688281114, (-2225.0458332));
      complex2.INF.divide(complex5);
      Complex complex6 = Complex.valueOf(1.0854897499084473, (-580.701868066));
      complex4.cosh();
      complex0.ZERO.multiply(0.0);
      complex6.INF.createComplex(3.2940421731384895E-113, (-580.701868066));
      Complex complex7 = complex2.subtract(complex4);
      complex0.INF.divide(1.0);
      complex7.negate();
      complex7.I.readResolve();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1440.2);
      Complex complex1 = Complex.valueOf(4846.97933, (-950.7118411));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.acos();
      Complex.valueOf(2.4875248571153216E73);
      complex3.INF.reciprocal();
      Complex complex4 = complex0.reciprocal();
      try { 
        complex4.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex0.pow(2465.2);
      complex1.NaN.log();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.subtract(complex0);
      complex3.ONE.log();
      // Undeclared exception!
      complex2.I.nthRoot(4779);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.asin();
      complex1.ZERO.cosh();
      double double0 = (-4892.579517376736);
      Complex complex2 = complex0.add((-4892.579517376736));
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex0.atan();
      int int0 = 0;
      try { 
        complex3.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.ONE.createComplex((-118.0), Double.NaN);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.cos();
      complex3.ONE.exp();
      Complex complex4 = complex2.sqrt1z();
      complex4.I.toString();
      complex0.ONE.tan();
      complex2.getField();
      Complex complex5 = complex0.ONE.log();
      complex5.ONE.asin();
      Complex.valueOf(Double.NaN, 0.0);
      complex5.readResolve();
      complex5.add(0.0);
      complex0.getReal();
      complex0.subtract(944.6109916050617);
      complex5.sinh();
      complex5.getReal();
      complex2.hashCode();
      complex5.pow((-1457.09645519808));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-928.995141918), (-928.995141918));
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.INF.conjugate();
      complex3.INF.sin();
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      complex0.getArgument();
      complex0.readResolve();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex5.sqrt();
      complex0.sqrt1z();
      complex4.NaN.cos();
      Complex complex8 = complex7.subtract(906.8257106772287);
      Complex complex9 = complex1.pow(complex4);
      Complex complex10 = complex9.atan();
      complex10.INF.toString();
      Complex complex11 = complex4.ZERO.sin();
      complex10.I.conjugate();
      complex9.hashCode();
      Complex complex12 = complex5.add(20.0);
      complex12.I.negate();
      Complex.valueOf((-1927.0), (-1927.0));
      complex12.ONE.acos();
      complex1.pow(complex12);
      complex6.readResolve();
      complex12.divide(complex3);
      complex8.cosh();
      complex11.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex1.INF.getField();
      complex0.readResolve();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex1.I.multiply((-378.2));
      complex5.ONE.add(complex2);
      Complex.valueOf(2158.83628, 2158.83628);
      Complex complex6 = complex3.sqrt1z();
      complex0.ONE.hashCode();
      complex3.abs();
      complex0.atan();
      complex4.hashCode();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex6.negate();
      complex10.NaN.cosh();
      complex8.multiply(complex4);
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(0.0);
      complex0.ZERO.getField();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.sqrt1z();
      complex3.INF.divide((-221.69988097));
      complex3.ZERO.exp();
      complex0.sin();
      Complex complex4 = Complex.valueOf((-5.574080023496771E-94), 0.0);
      Complex complex5 = complex1.atan();
      complex0.toString();
      complex5.getImaginary();
      complex5.asin();
      complex2.getField();
      complex4.multiply(43);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(54.8569376, 54.8569376);
      Complex complex1 = Complex.valueOf((-1088.7472), 0.0);
      complex1.NaN.sinh();
      complex0.ZERO.toString();
      Complex complex2 = complex0.NaN.divide(complex1);
      complex0.I.getField();
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex3.INF.reciprocal();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.pow((-187.60287005));
      Complex complex8 = complex7.ZERO.divide((-1104.537431));
      complex1.exp();
      Complex complex9 = complex4.pow((-187.60287005));
      Complex.valueOf((-187.60287005));
      complex5.pow(complex6);
      complex6.conjugate();
      complex8.getArgument();
      complex9.multiply(0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ZERO.cos();
      complex2.NaN.acos();
      complex0.isNaN();
      complex0.getImaginary();
      Complex complex3 = complex2.multiply(337.0373050759308);
      complex0.hashCode();
      Complex complex4 = complex3.sqrt();
      complex4.INF.readResolve();
      complex1.exp();
      Complex complex5 = complex0.pow((-2.990535475079021E-239));
      Complex complex6 = Complex.valueOf(1.5337974510118784E144, (-1976.78476));
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex8.ZERO.exp();
      Complex complex10 = complex9.ONE.cos();
      complex10.I.subtract(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex8.abs();
      complex1.isInfinite();
      complex0.exp();
      complex5.ONE.nthRoot(1272);
      Complex complex11 = Complex.valueOf(337.0373050759308, Double.NaN);
      complex4.multiply(complex11);
      complex3.equals(complex7);
      complex6.getImaginary();
      complex0.atan();
      Complex.valueOf((-2.990535475079021E-239), 222.5208);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1763.0);
      complex0.INF.reciprocal();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.I.divide(1763.0);
      Complex complex4 = Complex.valueOf((-20.0));
      complex0.INF.getArgument();
      Complex complex5 = complex0.add(complex4);
      complex5.toString();
      complex5.readResolve();
      Complex.valueOf(1763.0, (-20.0));
      complex3.abs();
      complex0.reciprocal();
      complex3.sin();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.ZERO.asin();
      Complex complex3 = complex1.ONE.exp();
      complex1.readResolve();
      Complex complex4 = complex1.ONE.pow((-3874.12));
      complex3.isNaN();
      complex0.multiply(complex1);
      Complex complex5 = Complex.INF;
      complex4.equals(complex5);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.750377491075032E-8));
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.hashCode();
      Complex complex2 = complex0.tanh();
      complex2.INF.pow((-4.750377491075032E-8));
      complex2.NaN.subtract((-4.750377491075032E-8));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.add(complex3);
      complex4.NaN.divide(0.0);
      complex1.reciprocal();
      Complex.valueOf((-4.750377491075032E-8), 0.0);
      complex2.getImaginary();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.add((-141.6651));
      Complex complex4 = complex0.multiply((-141.6651));
      Complex complex5 = complex0.ONE.exp();
      complex5.NaN.multiply(2166);
      complex0.isNaN();
      complex4.I.add(1.0);
      complex1.abs();
      Complex complex6 = complex4.pow(complex2);
      Complex complex7 = complex6.NaN.pow(complex4);
      complex7.I.pow(complex3);
      complex4.log();
      complex3.divide(complex1);
      complex3.isInfinite();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.NaN.tanh();
      complex2.INF.readResolve();
      Complex complex3 = complex0.add((-5.469119869891027E-8));
      complex1.I.getArgument();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.conjugate();
      complex5.INF.acos();
      Complex complex6 = complex2.ZERO.exp();
      Complex complex7 = complex4.conjugate();
      complex7.INF.tan();
      complex7.multiply(complex0);
      complex0.hashCode();
      Complex complex8 = complex1.asin();
      complex2.getField();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex9.conjugate();
      complex9.INF.subtract(1.1636629220608724E-136);
      Complex complex12 = complex11.divide(0.0);
      Complex complex13 = complex1.subtract(complex6);
      complex3.readResolve();
      Complex complex14 = complex12.pow(complex5);
      complex1.getImaginary();
      Complex complex15 = Complex.I;
      complex4.ZERO.pow(complex15);
      Complex complex16 = complex13.sqrt1z();
      complex16.readResolve();
      complex8.abs();
      complex10.acos();
      complex9.toString();
      complex14.getImaginary();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5.188364552285819E-8));
      Complex complex1 = complex0.cos();
      complex1.INF.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.multiply(0);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex4.multiply(2.2364990583200056E-234);
      Complex complex7 = complex4.atan();
      complex7.ONE.pow(0.42990362644195557);
      complex0.abs();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.NaN.add(complex2);
      complex1.INF.getArgument();
      complex6.sinh();
      complex8.subtract(complex3);
      complex0.reciprocal();
      complex1.getField();
      complex9.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.510812179067931E-272);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex0.NaN.abs();
      complex0.negate();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = 1.6711060014400145E-276;
      Complex complex0 = new Complex(1.6711060014400145E-276, (-2696.63991621555));
      double double1 = 6.283185307179586;
      Complex complex1 = new Complex((-2696.63991621555), 6.283185307179586);
      Complex complex2 = complex0.ONE.tan();
      try { 
        complex2.nthRoot((-4803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,803
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-587.9586374735));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = Complex.valueOf((-587.9586374735), (-3163.51995075218));
      Complex complex5 = complex2.acos();
      complex0.getImaginary();
      Complex complex6 = complex2.INF.add(0.0);
      Complex complex7 = complex4.ONE.pow(complex5);
      Complex complex8 = complex4.atan();
      complex8.tanh();
      complex2.multiply(0.0);
      Complex complex9 = complex4.cosh();
      complex9.I.conjugate();
      complex7.nthRoot(1);
      Complex complex10 = complex2.log();
      complex9.getArgument();
      Complex complex11 = Complex.valueOf((-587.9586374735), (-20.0));
      complex10.equals(complex0);
      Complex complex12 = complex7.pow((-1363.0754313288));
      complex12.I.getField();
      complex7.abs();
      complex7.getImaginary();
      Complex complex13 = complex0.createComplex(0.0, 3.67972590471072E-8);
      complex6.getArgument();
      complex13.multiply(complex11);
      complex3.pow(complex4);
      complex5.abs();
      Complex complex14 = complex4.tan();
      try { 
        complex14.nthRoot((-307));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -307
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ZERO.multiply(6637);
      complex2.INF.hashCode();
      complex0.toString();
      complex0.isInfinite();
      Complex complex5 = complex2.divide((double) 6637);
      Complex complex6 = complex2.multiply(complex0);
      complex4.multiply(complex1);
      Complex complex7 = complex6.log();
      Complex complex8 = complex2.divide(complex5);
      complex8.ONE.multiply(0.0);
      Complex complex9 = complex7.tan();
      complex9.INF.add(0.0);
      Complex complex10 = complex7.cos();
      complex10.INF.multiply((double) 6637);
      complex7.isInfinite();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.atan();
      complex1.I.readResolve();
      complex1.ONE.readResolve();
      Complex complex3 = complex0.tanh();
      complex3.asin();
      complex2.getImaginary();
      Complex complex4 = complex3.createComplex(Double.NaN, Double.NaN);
      complex4.INF.sinh();
      Complex complex5 = Complex.valueOf(318.09838016);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex3.ZERO.conjugate();
      Complex complex8 = complex0.multiply(complex4);
      complex4.abs();
      Complex complex9 = complex2.conjugate();
      complex5.ZERO.divide(complex6);
      Complex complex10 = complex7.subtract(2.2273635587196807E-39);
      Complex complex11 = complex4.add(complex2);
      complex7.I.getField();
      complex11.multiply(Double.NaN);
      complex4.multiply(1);
      complex10.reciprocal();
      complex5.sqrt1z();
      complex9.isInfinite();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.createComplex((-570.538), (-2413.68738));
      Complex complex4 = complex3.INF.pow((-570.538));
      complex4.NaN.log();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.pow(complex5);
      complex6.ONE.divide(complex0);
      Complex complex7 = new Complex((-2409.24116));
      Complex complex8 = complex0.subtract(complex7);
      Complex complex9 = complex8.ONE.divide(0.0);
      Complex complex10 = complex1.exp();
      Complex complex11 = complex1.add(195.9027397682);
      complex11.acos();
      Complex complex12 = complex2.tan();
      complex10.I.sinh();
      complex12.reciprocal();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex10.sqrt1z();
      complex14.sin();
      complex14.reciprocal();
      complex9.cosh();
      complex14.sqrt1z();
      complex13.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1949.6359261298), 171.211615403174);
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.subtract(0.0);
      complex2.I.log();
      complex2.readResolve();
      Complex complex3 = complex0.pow(complex2);
      complex2.NaN.pow(20.0);
      complex0.divide(complex3);
      complex0.ONE.exp();
      try { 
        complex1.nthRoot((-958));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -958
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.I.getArgument();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex1.I.sqrt();
      complex2.tanh();
      Complex complex6 = complex3.ZERO.conjugate();
      complex1.I.reciprocal();
      complex2.createComplex((-6.508966857277253E-9), (-1.0));
      Complex complex7 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex7.NaN.pow(complex5);
      complex0.NaN.exp();
      complex1.ONE.add(565.0);
      Complex complex8 = complex1.acos();
      complex6.cos();
      complex1.ZERO.sinh();
      complex8.equals(complex3);
      complex1.abs();
      Complex complex9 = complex4.sqrt();
      complex9.divide(complex4);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex3.INF.tanh();
      complex4.ONE.sqrt1z();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex6.ONE.multiply(2.2978757040142953E-60);
      Complex complex8 = complex7.INF.pow(complex6);
      List<Complex> list0 = complex5.ONE.nthRoot(2248);
      assertEquals(2248, list0.size());
      
      Complex complex9 = complex1.ZERO.atan();
      Complex complex10 = complex8.NaN.createComplex(2.2978757040142953E-60, 2.2978757040142953E-60);
      Complex.valueOf(2.2978757040142953E-60, 2.2978757040142953E-60);
      complex2.readResolve();
      complex5.NaN.hashCode();
      Complex.valueOf(2.2978757040142953E-60);
      Complex complex11 = complex1.INF.log();
      complex1.abs();
      complex10.ONE.readResolve();
      complex3.asin();
      Complex complex12 = complex1.divide(complex5);
      complex12.NaN.toString();
      complex11.getArgument();
      complex7.INF.subtract(0.0);
      complex2.isNaN();
      Complex complex13 = complex10.reciprocal();
      complex13.INF.asin();
      assertSame(complex8, complex12);
      
      complex11.cos();
      assertTrue(complex11.isInfinite());
      
      Complex complex14 = complex1.conjugate();
      assertTrue(complex14.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1029.674156506), (-1029.674156506));
      complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex2.ONE.reciprocal();
      complex0.I.hashCode();
      complex0.NaN.readResolve();
      Complex complex6 = complex0.sqrt1z();
      complex2.ONE.exp();
      complex6.I.getField();
      Complex complex7 = complex0.multiply((-1463.6164043173587));
      assertFalse(complex7.isInfinite());
      
      double double0 = complex5.getArgument();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex8 = complex4.negate();
      assertNotSame(complex8, complex3);
      
      Complex complex9 = complex0.add((-1539.2));
      Complex complex10 = complex4.exp();
      Complex complex11 = complex10.ONE.sqrt1z();
      assertEquals(1.317538408779881, complex10.getImaginary(), 0.01);
      assertEquals(1.541863457045632, complex10.getReal(), 0.01);
      assertFalse(complex11.equals((Object)complex5));
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex9.isInfinite();
      assertEquals((-2568.874156506), complex9.getReal(), 0.01);
      
      Complex complex12 = complex2.divide((-1029.674156506));
      Complex complex13 = complex6.divide(2.0);
      assertEquals(514.8371996506421, complex13.getReal(), 0.01);
      
      double double1 = complex12.getReal();
      assertEquals((-0.001498610628484053), double1, 0.01);
      
      complex2.isInfinite();
      assertEquals((-35.25516496530588), complex1.getImaginary(), 0.01);
      assertEquals(14.60316747233048, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ZERO.add((-375.949));
      Complex complex3 = complex2.I.log();
      assertEquals(1.5707963267948966, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals((-375.949), complex2.getReal(), 0.01);
      
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex0.negate();
      assertTrue(complex6.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getReal(), 0.01);
      
      complex0.isInfinite();
      Complex complex7 = complex4.I.tan();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex7.getImaginary(), 0.01);
      
      List<Complex> list0 = complex4.nthRoot(1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex4));
      
      Complex complex8 = complex5.cos();
      assertEquals(1.5430806348152437, complex8.getReal(), 0.01);
      
      complex1.equals(complex5);
      assertFalse(complex4.equals((Object)complex2));
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.NaN.atan();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      complex0.ZERO.getField();
      complex0.readResolve();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.multiply(complex1);
      assertEquals(1.557407724654902, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.sinh();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(2.2679097686563057, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.multiply(3440.10783881594);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(3440.10783881594, complex6.getImaginary(), 0.01);
  }
}
