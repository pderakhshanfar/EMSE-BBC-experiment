/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:17:14 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(complex0);
      complex1.negate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-294.184437));
      Complex complex1 = Complex.valueOf(1752.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.atan();
      complex4.ZERO.multiply(complex2);
      complex4.ONE.cos();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.subtract(2.0);
      Complex complex8 = complex1.pow(complex6);
      Complex complex9 = complex8.pow((-658.58));
      complex1.NaN.tanh();
      complex9.toString();
      Complex complex10 = complex9.ZERO.sinh();
      complex0.getField();
      Complex complex11 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex11.I.reciprocal();
      complex11.sin();
      complex10.createComplex((-642.353717414), 1752.0);
      Complex complex12 = complex9.negate();
      complex12.INF.sqrt();
      Complex complex13 = complex7.subtract(20.0);
      complex13.I.sqrt();
      Complex complex14 = complex3.tan();
      complex14.ZERO.getField();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.log();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.I.atan();
      complex1.ZERO.multiply(2.0);
      complex1.ZERO.getArgument();
      complex1.negate();
      Complex complex3 = complex0.I.reciprocal();
      complex0.toString();
      complex0.ONE.multiply(2.0);
      Complex complex4 = complex1.exp();
      complex2.subtract(1275.6645053307943);
      Complex complex5 = complex0.subtract((-697.1946631386015));
      Complex complex6 = complex5.log();
      complex4.sin();
      complex6.multiply(7);
      complex0.negate();
      Complex complex7 = Complex.valueOf(2853.7278, 2853.7278);
      complex6.divide(complex7);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 282.88181);
      complex0.getField();
      Complex complex1 = new Complex(159.65303);
      complex0.pow(complex1);
      complex0.log();
      Complex complex2 = complex1.divide(0.1331937999611299);
      complex2.ZERO.cosh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 0, 20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex(20.0, 20.0);
      complex2.ONE.divide(complex3);
      Complex complex4 = complex1.atan();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.divide(complex0);
      complex1.pow(0.32905077934265137);
      Complex complex2 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex1.tan();
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-622.06322028417), Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide((-622.06322028417));
      Complex complex4 = complex3.ZERO.sinh();
      complex4.ONE.atan();
      complex4.ZERO.getArgument();
      complex2.readResolve();
      complex0.INF.cos();
      complex1.multiply(1556);
      Complex complex5 = complex1.multiply(1889.2583);
      complex5.cos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 9.585745287491719;
      Complex complex0 = new Complex(9.585745287491719);
      complex0.NaN.multiply(2094);
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.createComplex(1624.083726, 1624.083726);
      complex0.INF.acos();
      complex0.multiply(7);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 4.7131849857076246E-8;
      Complex complex0 = new Complex(4.7131849857076246E-8, 4.7131849857076246E-8);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.exp();
      complex2.log();
      try { 
        complex3.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-1458.2), Double.POSITIVE_INFINITY);
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.INF.add(1.0);
      complex5.ONE.divide(complex0);
      complex2.I.sinh();
      complex5.ZERO.sinh();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.I.multiply(complex2);
      complex7.ZERO.multiply(2.192160831263035E-8);
      Complex complex8 = complex0.sin();
      Complex.valueOf(249.3);
      complex8.INF.abs();
      Complex complex9 = complex8.ZERO.tan();
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex8.INF.getField();
      complex3.acos();
      complex1.toString();
      complex8.toString();
      complex1.createComplex(1.0, 1.1760619079592718E92);
      Complex complex10 = complex5.cos();
      complex10.multiply(255);
      Complex.valueOf(1.3404009342193604, (-152.01820711));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.ONE.divide(complex1);
      Complex complex2 = Complex.I;
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
      Complex complex1 = Complex.valueOf(909.42508451, 909.42508451);
      complex1.toString();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.log();
      complex1.readResolve();
      complex1.readResolve();
      Complex complex2 = new Complex(Double.NaN, 688.51055003025);
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-347.0997354419), (-347.0997354419));
      complex2.ZERO.log();
      Complex complex3 = complex2.ZERO.acos();
      complex3.ONE.subtract((-1621691.0));
      Complex complex4 = complex3.ZERO.divide((-347.0997354419));
      complex4.ZERO.getArgument();
      Complex complex5 = complex2.I.negate();
      complex1.readResolve();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex4.I.sinh();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex6.tan();
      complex9.I.reciprocal();
      Complex complex10 = complex9.I.divide(complex5);
      Complex complex11 = complex3.conjugate();
      complex4.toString();
      complex6.sqrt();
      complex11.asin();
      Complex complex12 = complex3.tanh();
      complex10.tan();
      complex7.sqrt();
      complex8.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.I.getField();
      Complex complex4 = new Complex(0.05996724317824639);
      Complex complex5 = complex1.multiply(complex4);
      complex5.divide(0.05996724317824639);
      complex5.pow(8.563247933339596E59);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1807.00402, (-2339.1063827507346));
      complex0.pow(complex1);
      Complex complex2 = Complex.I;
      Complex.valueOf((-2633.116395));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.292458622014749E252));
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.tan();
      complex3.negate();
      Complex complex5 = complex2.acos();
      complex0.add(complex5);
      complex4.tan();
      Complex complex6 = complex2.add(complex3);
      complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(6260.65765048396, (-20.0));
      Complex complex1 = complex0.ZERO.cos();
      complex1.INF.acos();
      Complex complex2 = complex0.INF.cos();
      complex2.INF.abs();
      complex2.ZERO.cosh();
      Complex complex3 = complex0.tan();
      complex3.NaN.subtract(6260.65765048396);
      Complex complex4 = complex0.pow(complex3);
      Complex.valueOf(6260.65765048396, (-20.0));
      Complex.valueOf(6260.65765048396, 6.837671137556327E30);
      Complex complex5 = complex4.multiply(complex0);
      Complex.valueOf(6260.65765048396, (-20.0));
      complex5.atan();
      complex1.tan();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex((-2951.01718762), 111.4167363);
      Complex complex3 = complex1.pow(complex2);
      complex0.cosh();
      complex2.INF.add(complex3);
      Complex.valueOf(1458.0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1262.78), 6.283185307179586);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex(111.4167363, (-1262.78));
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = complex3.cosh();
      Complex.valueOf((-1262.78), 111.4167363);
      complex5.sin();
      Complex complex6 = complex4.cos();
      complex2.divide(0.4679262638092041);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(6260.65765048396, (-20.0));
      Complex complex1 = complex0.ZERO.cos();
      complex1.INF.acos();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.subtract(6260.65765048396);
      Complex complex6 = complex0.pow(complex4);
      Complex.valueOf(6260.65765048396, (-20.0));
      Complex.valueOf(6260.65765048396, 6.837671137556327E30);
      complex6.multiply(complex0);
      Complex.valueOf(6260.65765048396, (-20.0));
      complex3.sin();
      complex5.cos();
      complex3.divide((-658.9132186378909));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex2.multiply((-548));
      Complex complex5 = new Complex(439.0, 1202.28030276);
      complex3.NaN.tanh();
      Complex complex6 = complex0.multiply((double) (-548));
      complex0.pow((-2.033084334195337));
      complex4.sqrt();
      complex6.sqrt();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.multiply(0.0);
      Complex complex1 = complex0.I.add(0.0);
      complex0.atan();
      complex1.nthRoot(323);
      complex0.readResolve();
      Object object0 = new Object();
      Complex complex2 = new Complex(0.0, 0.0);
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.292458622014749E252));
      complex0.multiply(7);
      Complex complex1 = Complex.I;
      complex0.isNaN();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.add(complex0);
      complex2.tan();
      Complex complex4 = Complex.NaN;
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.292458622014749E252));
      Complex complex1 = new Complex((-196.7446593372157));
      Complex complex2 = complex1.pow((-196.7446593372157));
      Complex complex3 = complex2.multiply((-3.292458622014749E252));
      complex3.sqrt();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex6.sinh();
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.I;
      complex8.getField();
      complex0.negate();
      complex4.acos();
      Complex complex9 = complex0.add(complex1);
      complex7.tan();
      complex9.add(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(618.79074, (-405.8292039173701));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex(618.79074, (-405.8292039173701));
      complex2.ZERO.exp();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.I;
      complex5.ZERO.reciprocal();
      complex0.getArgument();
      complex4.INF.add(complex5);
      complex3.cosh();
      Complex complex6 = complex0.cos();
      complex6.reciprocal();
      complex0.readResolve();
      Complex complex7 = complex6.log();
      complex7.INF.pow(complex2);
      complex2.divide(0.5816917419433594);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.divide((double) 1542);
      Complex complex1 = complex0.multiply(1542);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      complex3.nthRoot(1542);
      Complex complex4 = new Complex(128.721949372126, 128.721949372126);
      complex3.sqrt();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3130.3289051057945));
      Complex complex1 = complex0.NaN.conjugate();
      complex1.multiply((-1.0));
      Complex complex2 = complex0.negate();
      complex0.INF.multiply(7);
      complex2.add((-3094.827019712509));
      complex2.toString();
      Complex complex3 = complex1.log();
      complex3.divide((-1.0));
      // Undeclared exception!
      complex0.nthRoot(604282564);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.16428405997892526, 0.16428405997892526);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-696.616108716));
      complex1.toString();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.divide((-1.8494343291160577E254));
      complex5.NaN.sin();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex0.pow(complex6);
      complex8.negate();
      Complex complex9 = Complex.valueOf(0.34300774335861206);
      complex9.ZERO.hashCode();
      Complex complex10 = complex5.negate();
      complex2.getField();
      complex10.ONE.acos();
      complex4.tanh();
      complex7.getField();
      Complex complex11 = complex1.createComplex((-1365.3882), -0.0);
      complex11.I.multiply((-1.8494343291160577E254));
      complex10.subtract(0.34300774335861206);
      Complex complex12 = complex8.sqrt1z();
      complex3.multiply(complex12);
      complex3.divide((-1365.3882));
      Complex.valueOf((-1.8494343291160577E254), (-784.53648));
      complex9.pow(0.7966992625679898);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3130.3289051057945));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.atan();
      complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2241.496417));
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex4.asin();
      complex2.ONE.cosh();
      complex0.pow((-930.0));
      Complex complex7 = Complex.valueOf((-3130.3289051057945), 2.008254051208496);
      complex5.multiply((-930.0));
      complex7.cosh();
      complex3.sqrt1z();
      Complex complex8 = complex3.sinh();
      complex4.tan();
      complex8.getField();
      complex0.negate();
      Complex complex9 = complex6.acos();
      complex6.add(complex8);
      Complex complex10 = complex9.tan();
      complex10.add(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ZERO.negate();
      complex0.I.add(0.0);
      complex2.toString();
      complex1.log();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.getImaginary();
      Complex complex2 = complex1.asin();
      complex2.subtract(0.33967713);
      complex2.readResolve();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2680.9363, 2680.9363);
      Complex complex1 = complex0.tan();
      complex0.toString();
      complex1.getField();
      complex1.INF.getField();
      Complex complex2 = complex1.divide((-4169.87998203295));
      complex0.toString();
      complex0.hashCode();
      Complex complex3 = new Complex((-1.0), 2680.9363);
      complex3.reciprocal();
      Complex.valueOf((-4169.87998203295), 1207.5772134793833);
      complex2.I.add(complex1);
      complex2.negate();
      complex2.isInfinite();
      complex2.exp();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(0.0);
      complex1.ZERO.negate();
      Complex complex2 = complex0.I.add(0.0);
      complex0.atan();
      Complex complex3 = new Complex(0.0, 809.5157751873753);
      complex3.pow((-5.146939682310558E-234));
      complex3.exp();
      complex3.negate();
      complex0.negate();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tan();
      Complex complex1 = complex0.NaN.subtract((-1679.9));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.log();
      complex2.nthRoot(289);
      Complex complex4 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      complex3.cosh();
      Complex.valueOf((double) 289);
      Complex complex5 = complex2.add(complex1);
      complex5.tanh();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4154952E7, (-5.406177467045421E-8));
      complex0.nthRoot(1128);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract((-5.406177467045421E-8));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.tanh();
      complex3.toString();
      Complex complex5 = complex4.reciprocal();
      complex5.INF.tan();
      complex4.acos();
      complex4.pow(2.4154952E7);
      complex3.exp();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.divide((double) 1542);
      Complex complex1 = complex0.multiply(1542);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      complex3.nthRoot(1542);
      Complex complex4 = new Complex(111.4167363, (-1262.78));
      complex4.cosh();
      Complex complex5 = Complex.valueOf(1234.375);
      complex5.add(complex1);
      complex3.tanh();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.406177467045421E-8), 2680.9363);
      Complex complex1 = complex0.ZERO.tan();
      complex0.toString();
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex1.abs();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.multiply((-5.406177467045421E-8));
      Complex complex5 = complex2.subtract(complex4);
      complex2.sqrt();
      complex0.multiply((-1141.838755));
      Complex complex6 = new Complex(5, (-1910.201255750661));
      complex6.asin();
      Complex complex7 = complex0.tanh();
      Complex complex8 = new Complex((-1141.838755));
      Complex complex9 = complex8.reciprocal();
      complex3.acos();
      Complex complex10 = complex8.pow((-1141.838755));
      complex7.cos();
      complex9.negate();
      complex9.getField();
      complex4.exp();
      complex5.conjugate();
      complex7.equals(complex9);
      complex10.multiply((-1565));
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2866.675120732538), (-2.8786263916116364E-10));
      Complex complex1 = complex0.multiply((-284.69574893));
      Complex complex2 = complex0.add((-2044.3));
      complex1.atan();
      complex2.NaN.getField();
      Complex complex3 = complex2.multiply(308);
      Complex complex4 = complex3.exp();
      complex2.isNaN();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.292458622014749E252));
      complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(0.33967713);
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2866.675120732538), (-2.8786263916116364E-10));
      Complex complex1 = Complex.valueOf((-2866.675120732538));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sqrt1z();
      complex3.ZERO.negate();
      complex1.I.getArgument();
      complex1.ZERO.atan();
      complex2.createComplex((-2866.675120732538), (-2866.675120732538));
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-4151.7577026));
      complex1.cosh();
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(0.0);
      complex0.abs();
      Complex complex2 = complex0.sin();
      complex1.subtract(complex0);
      Complex complex3 = complex1.multiply(7);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.conjugate();
      complex2.getField();
      complex4.hashCode();
      complex0.hashCode();
      Complex complex6 = complex5.subtract(152.5350924597351);
      Complex complex7 = Complex.valueOf(0.0, 2382.935665);
      Complex complex8 = complex7.pow(0.0);
      complex3.sin();
      complex8.getReal();
      complex3.getImaginary();
      complex0.asin();
      complex4.subtract(0.0);
      Complex.valueOf(0.0);
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.406177467045421E-8), 2680.9363);
      Complex complex1 = complex0.sqrt1z();
      complex1.nthRoot(954);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.divide(complex0);
      complex0.add(complex2);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.conjugate();
      complex5.abs();
      Complex complex6 = complex3.negate();
      complex3.multiply((double) 954);
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex5.multiply((double) 1);
      complex3.asin();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex8.acos();
      complex6.pow((-911.5613911));
      complex12.cos();
      complex7.negate();
      complex10.getField();
      complex3.exp();
      Complex complex13 = complex11.conjugate();
      Complex complex14 = Complex.NaN;
      Complex complex15 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex14.equals(complex15);
      complex13.multiply(1200);
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.multiply((-1));
      Complex complex4 = complex2.conjugate();
      complex1.getField();
      complex0.hashCode();
      complex3.hashCode();
      Complex complex5 = complex4.subtract((-1496.23121));
      Complex complex6 = complex5.pow(3258.519961);
      complex2.sin();
      complex4.getReal();
      Complex complex7 = new Complex((-2090.0), (-1174.1258114892));
      complex7.getImaginary();
      complex6.asin();
      Complex complex8 = complex2.subtract(4472.56);
      Complex.valueOf((-1496.23121));
      Object object0 = complex2.readResolve();
      complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = (Complex)complex0.readResolve();
      complex1.abs();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.sqrt1z();
      complex3.isInfinite();
      Complex complex6 = complex4.createComplex(0.5403023058681398, 2.0);
      Complex complex7 = complex5.pow(complex3);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = Complex.NaN;
      complex9.negate();
      complex8.getReal();
      Complex complex10 = (Complex)complex4.readResolve();
      complex7.equals(complex10);
      Complex complex11 = complex6.multiply(complex1);
      complex11.isNaN();
      complex6.getArgument();
      Complex complex12 = new Complex(2.0, (-1657.77199356505));
      Complex complex13 = complex12.multiply((-1657.77199356505));
      complex3.sinh();
      complex12.add(1.3069436150992555);
      Complex complex14 = complex7.pow((-1589.0));
      complex7.multiply((-1804));
      complex13.isInfinite();
      complex0.sqrt();
      complex14.nthRoot(1);
      Complex complex15 = complex2.exp();
      Complex complex16 = Complex.ONE;
      complex14.subtract(complex15);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(1.8396930096213817E290);
      complex0.abs();
      complex2.sin();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex1.multiply(374);
      Complex complex6 = Complex.valueOf(0.0);
      complex4.conjugate();
      complex3.getField();
      complex3.hashCode();
      complex2.hashCode();
      Complex complex7 = complex6.subtract((double) 374);
      complex5.pow((-253.91166));
      complex4.sin();
      complex6.getReal();
      complex3.getImaginary();
      complex7.asin();
      complex7.subtract(2.718281828459045);
      Complex complex8 = Complex.valueOf((-598.2895));
      complex4.equals(complex8);
      complex8.subtract(2.718281828459045);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.NaN.abs();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.pow(Double.NaN);
      Complex complex4 = complex3.NaN.acos();
      complex4.sqrt();
      complex1.ONE.toString();
      Complex complex5 = complex2.NaN.tan();
      complex1.getField();
      Complex complex6 = Complex.valueOf(6.283185307179586, Double.NaN);
      complex6.getArgument();
      Complex.valueOf(0.0, 2.0);
      Complex complex7 = complex5.cosh();
      complex7.pow((-3558.01));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2262.65667), (-2262.65667));
      Complex complex1 = complex0.sinh();
      complex1.abs();
      Complex complex2 = complex1.ONE.tanh();
      complex0.I.sqrt1z();
      complex0.isInfinite();
      Complex complex3 = complex2.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.ZERO.pow(complex2);
      complex1.I.conjugate();
      Complex complex4 = complex1.negate();
      complex4.getReal();
      complex1.equals(complex0);
      complex3.I.multiply(complex2);
      complex2.isNaN();
      complex4.getArgument();
      complex4.multiply((-1589.0));
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ZERO.add(0.7853981633974483);
      complex6.ZERO.pow(0.7853981633974483);
      complex1.multiply((-1804));
      complex3.isInfinite();
      complex4.sqrt();
      complex5.nthRoot(1);
      complex1.exp();
      Complex complex7 = Complex.ONE;
      complex4.subtract(complex7);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2231.3);
      Complex complex1 = complex0.ONE.atan();
      complex1.multiply((-2884));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.tanh();
      complex4.ZERO.nthRoot(1);
      complex4.NaN.tan();
      Complex complex5 = complex3.I.sin();
      Complex complex6 = complex3.I.subtract(382.28);
      Complex complex7 = complex5.I.atan();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex6.ONE.pow(complex1);
      complex9.INF.hashCode();
      complex8.ONE.hashCode();
      complex1.isNaN();
      Complex complex10 = complex1.tanh();
      complex10.ONE.multiply(complex6);
      complex3.I.add((-527.06));
      Complex complex11 = complex5.acos();
      Complex complex12 = complex11.NaN.sinh();
      Complex complex13 = complex12.log();
      complex11.getArgument();
      complex6.negate();
      complex12.asin();
      complex9.subtract(382.28);
      Complex complex14 = complex6.conjugate();
      complex14.ZERO.getArgument();
      complex13.log();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.divide((-3547.4608));
      complex2.NaN.getField();
      Complex complex3 = complex1.I.sqrt();
      complex3.I.log();
      complex3.INF.getField();
      Complex complex4 = complex0.cosh();
      complex4.readResolve();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex4.INF.negate();
      Complex complex7 = complex6.INF.negate();
      complex7.INF.reciprocal();
      complex4.divide(complex0);
      complex6.isNaN();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex8.reciprocal();
      complex10.ONE.log();
      complex3.add(complex9);
      complex10.multiply((-3547.4608));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2866.675120732538), (-2.8786263916116364E-10));
      Complex complex1 = Complex.valueOf((-2866.675120732538));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sqrt1z();
      complex3.ZERO.negate();
      complex1.I.getArgument();
      complex1.ZERO.atan();
      Complex complex4 = complex2.createComplex((-2866.675120732538), (-2866.675120732538));
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.getReal();
      complex2.ONE.asin();
      complex0.getArgument();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2.0, 779.7853653425356);
      complex0.NaN.abs();
      Complex complex2 = complex0.createComplex((-1061.56600284), (-1061.56600284));
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex0.tanh();
      complex0.toString();
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.NaN.createComplex(2456.8422093658546, (-1061.56600284));
      complex5.ZERO.sqrt();
      Complex complex7 = complex5.ONE.acos();
      complex1.ONE.asin();
      complex0.NaN.multiply(complex7);
      complex5.multiply(0.0);
      Complex complex8 = complex2.conjugate();
      complex8.I.pow(2.0);
      complex2.equals(complex1);
      complex4.isNaN();
      complex6.abs();
      complex4.atan();
      complex2.sqrt();
      Complex complex9 = complex8.conjugate();
      complex9.ZERO.multiply(2456.8422093658546);
      complex6.toString();
      complex5.getReal();
      complex4.conjugate();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      complex1.ZERO.nthRoot(317);
      Complex complex2 = new Complex((-2.4075054705261798E-98), 8.951285029786536E-9);
      complex2.cosh();
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.NaN.tanh();
      complex2.NaN.tanh();
      complex0.ZERO.getArgument();
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex4.INF.divide(complex3);
      complex0.isInfinite();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex6.acos();
      complex6.ZERO.hashCode();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex9.multiply(complex10);
      Complex complex12 = complex11.ZERO.multiply(complex7);
      Complex complex13 = complex10.exp();
      Complex complex14 = complex5.INF.divide(complex6);
      Complex complex15 = complex13.cosh();
      complex15.ZERO.tanh();
      complex15.NaN.cos();
      complex13.pow(complex4);
      complex6.INF.getField();
      Complex complex16 = complex13.pow(complex1);
      complex16.I.subtract(complex0);
      complex7.ONE.conjugate();
      Complex complex17 = complex1.multiply(0.0);
      Complex complex18 = complex9.sqrt();
      complex12.getArgument();
      Complex complex19 = complex5.multiply(0.0);
      complex18.equals(complex1);
      complex19.isInfinite();
      complex17.reciprocal();
      complex19.pow(complex7);
      complex10.getReal();
      complex14.cos();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-524.50757678003));
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = new Complex(0.0, 5.501611507503037E-118);
      Complex complex4 = complex0.multiply(complex3);
      complex4.readResolve();
      complex2.getReal();
      Complex complex5 = complex0.divide(complex3);
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
      Complex complex6 = complex3.sin();
      complex6.toString();
      complex2.ZERO.cosh();
      Complex complex7 = complex3.conjugate();
      complex5.ZERO.abs();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex8.INF.cos();
      complex8.ZERO.cosh();
      Complex complex10 = complex5.ONE.subtract(complex7);
      complex2.tanh();
      complex6.getImaginary();
      complex7.I.conjugate();
      complex0.ONE.tan();
      complex6.getField();
      complex9.isNaN();
      complex5.toString();
      complex0.sinh();
      Complex complex11 = complex7.add(1501.8128783698);
      complex8.multiply(1488.57);
      Complex.valueOf(0.0, 1501.8128783698);
      Complex complex12 = complex1.pow(complex10);
      complex12.ONE.divide(complex11);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.ZERO.cosh();
      complex1.abs();
      complex0.readResolve();
      complex1.ZERO.tan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.INF.createComplex(Double.NaN, 0.0);
      complex3.NaN.abs();
      complex4.I.hashCode();
      complex5.I.log();
      complex3.isNaN();
      complex5.tanh();
      complex5.pow(2307.7082);
      complex1.multiply(complex2);
      complex4.getImaginary();
      complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      complex1.NaN.abs();
      complex0.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tanh();
      complex3.divide(complex0);
      complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex2.subtract(2248.0334178);
      complex6.NaN.add(20.0);
      complex5.getField();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      complex1.negate();
      int int0 = 0;
      complex0.ONE.conjugate();
      Complex complex2 = complex0.multiply(0);
      complex2.I.getArgument();
      complex0.cos();
      complex2.createComplex(1426.55409, 0.0);
      double double0 = 0.0;
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8396930096213817E290, 1.9181616306304932);
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex(1.8396930096213817E290, 0.0);
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.log();
      complex1.NaN.pow(complex2);
      complex0.I.getField();
      Complex complex3 = complex2.divide(3339.339263);
      complex3.ZERO.toString();
      complex0.I.hashCode();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.negate();
      complex4.isInfinite();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.sqrt();
      complex1.tan();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf((-3385.383), 2.573617458343506);
      complex2.ONE.multiply(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ONE.subtract(complex3);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.sqrt();
      complex0.I.pow(complex6);
      Complex complex7 = complex0.add(2762.945);
      Complex complex8 = complex7.ZERO.multiply(1);
      complex8.NaN.sinh();
      complex7.ONE.add(Double.POSITIVE_INFINITY);
      complex0.NaN.sqrt1z();
      Complex complex9 = complex7.createComplex((-886.947179595968), (-886.947179595968));
      complex7.readResolve();
      complex6.isNaN();
      Complex complex10 = complex4.subtract((-886.947179595968));
      Complex complex11 = complex10.ONE.pow(complex9);
      complex11.I.nthRoot(1);
      Complex complex12 = complex9.log();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1409.3, 6.773803682579552E-9);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.add(Double.NaN);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.NaN.divide(complex3);
      complex4.I.asin();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex1.ZERO.pow(complex0);
      complex5.ZERO.subtract(1409.3);
      complex1.NaN.subtract(0.0);
      Complex complex6 = complex0.sin();
      complex6.tanh();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.divide(complex1);
      complex7.I.multiply(Double.NaN);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex3.divide(0.0);
      complex11.ZERO.tanh();
      complex9.toString();
      complex0.getField();
      complex10.getField();
      complex7.NaN.asin();
      complex2.getReal();
      complex0.equals("FkYwW>MgZ{");
      complex7.tan();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.add(3.886891475472745E177);
      Complex complex4 = complex3.ZERO.multiply(1.3608995799112174E108);
      complex3.NaN.toString();
      complex1.I.cosh();
      complex0.ZERO.pow(complex4);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex2.I.add(0.0);
      complex0.equals((Object) null);
      Complex complex5 = complex0.tanh();
      complex5.ONE.atan();
      complex4.I.sqrt1z();
      complex5.NaN.nthRoot(2483);
      complex0.ONE.multiply(1);
      complex2.ZERO.cosh();
      Complex complex6 = complex5.log();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex5.cos();
      complex7.I.atan();
      Complex.valueOf(0.0);
      complex4.isNaN();
      complex4.multiply(1136);
      complex7.sin();
      complex6.asin();
      complex3.isNaN();
      complex8.toString();
      complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.divide((double) 1542);
      Complex complex1 = complex0.multiply(1542);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex0.reciprocal();
      complex4.ONE.nthRoot(1128);
      complex4.I.sinh();
      complex4.NaN.subtract(2.0);
      complex2.I.sqrt1z();
      Complex complex5 = complex0.ONE.reciprocal();
      complex2.ZERO.cos();
      Complex complex6 = complex1.multiply(complex0);
      complex5.ONE.multiply(1);
      complex2.getField();
      complex0.getField();
      complex5.multiply(complex6);
      complex3.exp();
      complex3.acos();
      complex2.nthRoot(1542);
      complex0.pow((double) 1542);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1051.274273, 76.8);
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.toString();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.INF.add(complex2);
      complex1.getImaginary();
      Complex complex5 = Complex.valueOf((-2228.0), (-2228.0));
      Complex complex6 = Complex.valueOf((-1051.273799911454));
      complex6.getArgument();
      complex5.INF.log();
      complex6.ONE.add(complex3);
      complex2.toString();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex1.subtract(1.0);
      complex8.I.nthRoot(1141);
      complex4.toString();
      complex5.isNaN();
      Complex complex9 = complex7.add(3.141592653589793);
      complex8.asin();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ZERO.tanh();
      complex1.add(0.0);
      complex1.getArgument();
      Complex complex4 = complex1.ONE.pow(0.0);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.NaN;
      complex1.ZERO.subtract(complex8);
      complex0.multiply((-3192.79973204639));
      complex2.acos();
      complex3.getReal();
      complex7.asin();
      complex4.isInfinite();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.negate();
      Complex complex2 = complex1.sqrt1z();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = 0;
      double double0 = 2.0133131420595028E-8;
      Complex complex1 = Complex.valueOf((double) 0, 2.0133131420595028E-8);
      complex1.INF.atan();
      complex1.pow(2333.5627954278);
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(3537.0);
      Complex complex1 = new Complex(3537.0);
      Complex complex2 = complex1.I.log();
      complex2.INF.pow(complex1);
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.I.acos();
      complex4.ZERO.divide(0.0);
      complex5.divide(complex4);
      Complex complex6 = complex4.ZERO.cosh();
      complex6.ZERO.getField();
      Complex complex7 = complex0.add(complex1);
      complex7.toString();
      complex6.log();
      Complex.valueOf(3537.0, 3537.0);
      complex0.toString();
      complex4.createComplex(3537.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.subtract(0.0);
      complex1.NaN.sin();
      complex1.ZERO.add(0.0);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.ONE.multiply(complex2);
      complex3.I.pow(0.0);
      complex3.multiply((-2195));
      Complex.valueOf(0.0);
      Complex complex4 = Complex.I;
      complex0.INF.multiply(complex4);
      complex0.ZERO.getField();
      complex0.ZERO.sqrt1z();
      complex0.getImaginary();
      complex0.toString();
      complex4.divide((-2482.54899));
      complex2.isInfinite();
      try { 
        complex0.nthRoot((-1514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,514
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = Complex.valueOf((-461.9143));
      complex3.ONE.sqrt();
      Complex complex4 = complex0.asin();
      complex0.ZERO.hashCode();
      complex0.nthRoot(7);
      complex1.add(complex0);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex4.conjugate();
      complex8.log();
      Complex complex9 = complex8.multiply((-7.709990443086711E-10));
      Complex complex10 = complex4.ONE.tan();
      Complex.valueOf((-461.9143), (-7.709990443086711E-10));
      Complex complex11 = complex10.I.conjugate();
      complex4.readResolve();
      complex9.multiply(complex2);
      complex5.ONE.getField();
      Complex complex12 = complex6.add(2837.47000947);
      Complex complex13 = complex12.NaN.subtract(4620.067);
      Complex complex14 = complex12.atan();
      complex14.getReal();
      complex6.negate();
      complex11.pow(complex5);
      complex7.acos();
      complex9.getImaginary();
      complex13.hashCode();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex0.INF.subtract(0.0);
      complex0.ONE.subtract(887.9767971634);
      complex0.getImaginary();
      Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(887.9767971634);
      Complex complex4 = complex3.ONE.sqrt1z();
      complex4.NaN.add(complex2);
      Complex.valueOf(Double.NaN);
      complex1.divide(complex3);
      Complex complex5 = complex1.multiply(2476);
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-2556));
      complex0.NaN.asin();
      complex1.I.readResolve();
      complex1.sinh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.INF.sqrt1z();
      complex5.INF.nthRoot(1);
      Complex complex6 = complex3.ZERO.sqrt1z();
      Complex complex7 = complex6.INF.divide(complex4);
      Complex complex8 = complex7.ONE.add(complex3);
      complex8.ONE.reciprocal();
      complex2.conjugate();
      complex5.ZERO.abs();
      complex5.INF.negate();
      Complex complex9 = complex5.multiply(2739.50787647575);
      Complex complex10 = complex9.NaN.subtract(complex2);
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex11.multiply(2739.50787647575);
      complex12.NaN.asin();
      complex11.INF.tanh();
      Complex complex13 = complex3.reciprocal();
      complex2.acos();
      Complex complex14 = complex5.pow((-911.5613911));
      complex14.I.cos();
      complex0.negate();
      complex10.getField();
      complex7.exp();
      complex11.conjugate();
      complex8.equals(object0);
      complex9.multiply((-2300));
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tan();
      Complex complex1 = complex0.NaN.subtract((-1679.9));
      Complex complex2 = complex1.INF.asin();
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(634.3);
      complex3.I.createComplex(0.0, 634.3);
      Complex complex4 = complex1.multiply(505);
      complex4.ZERO.tanh();
      Complex complex5 = complex4.multiply((-1679.9));
      complex5.I.pow(0.0);
      complex5.NaN.sqrt();
      Complex complex6 = complex2.sqrt();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.INF.acos();
      complex4.toString();
      Complex complex6 = complex0.sinh();
      complex3.getReal();
      Complex complex7 = complex0.pow(1776.17029239);
      complex7.I.cosh();
      complex4.multiply(760);
      Complex complex8 = complex6.log();
      Complex complex9 = complex4.NaN.subtract(complex0);
      complex9.I.reciprocal();
      Complex.valueOf(1776.17029239);
      complex5.getField();
      complex2.createComplex(1776.17029239, 0.0);
      complex1.getArgument();
      complex8.sqrt1z();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      complex1.ZERO.readResolve();
      complex0.isNaN();
      Complex complex2 = complex1.add((-146.1014779538013));
      Complex complex3 = complex2.multiply(17);
      Complex complex4 = Complex.valueOf(20.0, 0.0);
      complex2.INF.sinh();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex4.reciprocal();
      complex3.NaN.hashCode();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex7.ONE.cosh();
      complex9.sqrt();
      complex6.ONE.tan();
      complex0.sqrt();
      complex2.getArgument();
      Complex complex10 = complex3.cosh();
      complex10.ZERO.cosh();
      complex4.isNaN();
      complex4.subtract(Double.NaN);
      complex5.sqrt();
      Complex.valueOf(0.0);
      Complex.valueOf(Double.NaN, 2.0);
      complex5.exp();
      complex8.reciprocal();
      complex1.readResolve();
      Complex complex11 = complex6.exp();
      Complex.valueOf(3.1520070828798975E-212, 0.0);
      try { 
        complex11.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.I.add(0.0);
      Complex complex3 = complex0.atan();
      complex0.multiply(0);
      complex3.NaN.exp();
      complex1.isNaN();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.292458622014749E252));
      complex0.createComplex((-3.292458622014749E252), (-3.292458622014749E252));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2441.7573553350035), (-2441.7573553350035));
      complex0.I.readResolve();
      Complex complex1 = Complex.valueOf(985.8898879, 985.8898879);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex3.ONE.asin();
      complex4.ZERO.toString();
      complex0.getImaginary();
      complex0.ONE.createComplex((-2867.5), Double.NaN);
      complex0.ZERO.log();
      complex0.toString();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.subtract(complex5);
      complex2.abs();
      complex6.I.sqrt1z();
      complex6.sin();
      complex5.NaN.acos();
      Complex complex7 = complex5.sinh();
      complex7.NaN.readResolve();
      Complex complex8 = Complex.valueOf(0.3757305145263672);
      Complex complex9 = Complex.NaN;
      complex8.I.add(complex9);
      complex6.sinh();
      Complex complex10 = complex5.multiply((-2441.7573553350035));
      complex10.ONE.cosh();
      complex0.getImaginary();
      Complex.valueOf(985.8898879, (-175.785771709564));
      complex0.subtract((-2441.7573553350035));
      complex5.sqrt();
      Complex.valueOf(0.0);
      Complex.valueOf((-175.785771709564), 6.493457409236137E-8);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.add((-771.963));
      Complex complex1 = complex0.I.multiply((-20.0));
      Complex complex2 = complex1.INF.multiply((-20.0));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex4.NaN.tan();
      complex0.readResolve();
      Complex complex6 = complex0.asin();
      complex0.getArgument();
      complex0.readResolve();
      complex4.subtract(complex6);
      Object object0 = complex5.readResolve();
      Complex complex7 = complex0.ZERO.subtract(658.466127604);
      complex4.equals(object0);
      Complex.valueOf(1.5707963267948966, 6.283185307179586);
      complex7.toString();
      complex1.divide(complex2);
      complex3.add(0.0);
      Complex.valueOf((-20.0), 658.466127604);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.pow(complex0);
      double double0 = 0.0;
      try { 
        complex2.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3951.780486645693), 0.0);
      Complex complex1 = complex0.sin();
      complex0.NaN.hashCode();
      complex1.ONE.toString();
      complex0.log();
      complex0.divide(1603.537655222);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.406177467045421E-8), 2680.9363);
      Complex complex1 = complex0.ZERO.tan();
      complex0.toString();
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.NaN.multiply(5);
      complex2.INF.exp();
      Complex complex3 = complex0.cos();
      complex3.sqrt();
      try { 
        complex3.ONE.nthRoot((-2171));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,171
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      complex0.getReal();
      complex0.isInfinite();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(1210.71891706, 1.0);
      Complex complex4 = complex3.NaN.pow((-3535.81));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.multiply((-544.7790248996));
      complex1.readResolve();
      complex0.getArgument();
      complex2.ONE.sin();
      Complex complex8 = complex3.pow(697.306);
      Complex complex9 = complex1.add(complex8);
      complex9.ONE.sin();
      Complex complex10 = complex1.reciprocal();
      complex10.I.multiply((-3535.81));
      Complex complex11 = complex7.tan();
      complex11.NaN.pow(complex0);
      Complex.valueOf((-544.7790248996), 1821.0);
      Complex complex12 = complex6.add(complex8);
      complex12.multiply(0.0);
      complex2.reciprocal();
      complex4.createComplex(0.0, (-76.8));
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2090.0), (-2090.0));
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-4788.358387690753), (-4788.358387690753));
      Complex complex1 = Complex.valueOf((-4788.358387690753), 2916.2647);
      complex0.ONE.divide(125.33778632229927);
      Complex complex2 = complex0.INF.cosh();
      complex0.INF.getArgument();
      Complex complex3 = complex0.acos();
      complex3.divide(complex2);
      try { 
        complex1.nthRoot((-1293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,293
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex1.ONE.sqrt1z();
      complex0.NaN.getField();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.divide((-1.0));
      complex3.ZERO.divide(0.0);
      Complex complex5 = Complex.valueOf(0.0, 4.005882964287806E-150);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex6.divide(complex7);
      double double0 = complex1.I.abs();
      assertEquals(1.0, double0, 0.01);
      
      List<Complex> list0 = complex5.I.nthRoot(171);
      assertEquals(171, list0.size());
      
      Complex complex9 = complex3.INF.pow(0.0);
      Complex complex10 = complex1.sqrt1z();
      complex0.getImaginary();
      Complex complex11 = complex10.pow(complex1);
      Complex complex12 = complex11.divide(complex3);
      assertSame(complex12, complex8);
      
      Complex complex13 = complex4.subtract(0.0);
      Complex complex14 = complex13.ZERO.sinh();
      assertTrue(complex14.equals((Object)complex2));
      
      complex13.NaN.subtract(2036.7);
      Complex complex15 = complex13.ONE.conjugate();
      Complex.valueOf(0.0, (-1.0));
      Complex complex16 = complex4.add(complex3);
      complex13.createComplex(1.0, 4.005882964287806E-150);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals((-1.0), complex13.getReal(), 0.01);
      
      Complex complex17 = complex10.add((-1.0));
      complex16.divide(Double.NaN);
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex15));
      
      complex17.sqrt();
      Complex complex18 = complex9.divide(2036.7);
      assertSame(complex18, complex10);
      assertEquals(0.8813735870195428, complex3.getImaginary(), 0.01);
  }
}
