/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:20:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.createComplex(0.7071067811865476, (-1618.5874744056828));
      Complex complex3 = complex1.subtract(complex2);
      complex0.tan();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.NaN.createComplex((-540.6932070566), 0.9999999974838503);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex4.subtract((-1618.5874744056828));
      complex7.I.tan();
      complex3.readResolve();
      complex3.atan();
      complex6.conjugate();
      complex5.negate();
      complex6.multiply(complex2);
      Complex complex8 = complex2.tan();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
      Complex complex2 = new Complex(20.0, 20.0);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1773.3777322195695), Double.POSITIVE_INFINITY);
      complex0.add((-1773.3777322195695));
      complex0.multiply((-1.8997462070389404E-8));
      Complex.valueOf((-1773.3777322195695));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1773.3777322195695), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add((-1773.3777322195695));
      complex1.I.multiply(complex0);
      Complex complex2 = (Complex)complex0.readResolve();
      complex1.tan();
      Complex complex3 = Complex.I;
      complex2.acos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.pow((-5247.6747158946255));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = Complex.valueOf(20.0);
      complex1.ONE.abs();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.I.tan();
      complex5.INF.sinh();
      complex5.ZERO.multiply(complex1);
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = complex4.INF.cos();
      Complex complex8 = complex6.ZERO.negate();
      complex5.negate();
      complex2.pow(complex8);
      Complex complex9 = complex3.tanh();
      complex9.ONE.pow(0.0);
      complex9.sqrt1z();
      complex7.sinh();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      Complex complex0 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex0.multiply(42);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sinh();
      complex0.toString();
      complex0.ONE.divide(complex1);
      complex1.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.I.sqrt1z();
      complex4.I.getArgument();
      complex3.ZERO.pow((-1729.8));
      Complex complex5 = complex3.ONE.add(complex2);
      complex5.ZERO.hashCode();
      Complex complex6 = new Complex(0.28743791580200195, 1.2627736197958951E98);
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = complex7.tanh();
      complex8.ZERO.abs();
      complex8.readResolve();
      complex7.asin();
      complex0.subtract((-1729.8));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.abs();
      complex0.ONE.tanh();
      Complex complex2 = complex0.log();
      complex0.INF.hashCode();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.ZERO.multiply(Double.NaN);
      complex4.I.toString();
      complex3.NaN.getArgument();
      complex3.I.divide(Double.NaN);
      complex2.ZERO.atan();
      try { 
        complex0.nthRoot((-4032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,032
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(16.987562303301, (-3.861762510530086E240));
      complex0.sqrt1z();
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.add(2.0);
      Complex complex3 = complex2.NaN.atan();
      complex2.createComplex((-20.0), 2.0);
      Complex complex4 = Complex.I;
      complex4.ONE.conjugate();
      Complex complex5 = new Complex(197.4);
      Complex complex6 = Complex.valueOf((-1.1441115218462356E163), 2135.0);
      complex5.multiply(complex6);
      Complex complex7 = new Complex((-2.841347842666459E174), 1.0000000005928988);
      complex7.acos();
      complex3.add(2.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(922.80070559345);
      Complex complex1 = Complex.valueOf(922.80070559345, 483.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.createComplex((-1002.57181725645), (-1699.1666727));
      Complex complex5 = complex4.pow(Double.POSITIVE_INFINITY);
      complex3.sinh();
      Complex complex6 = Complex.valueOf((-1699.1666727));
      complex5.add(complex2);
      complex6.exp();
      complex5.sqrt();
      complex4.tanh();
      complex2.sqrt();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.ONE.toString();
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.I.pow((-139.8));
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.ONE.atan();
      complex7.ONE.log();
      complex3.INF.getArgument();
      Complex complex8 = complex3.I.subtract(1.2728726779131004E13);
      complex8.ONE.getField();
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex9.atan();
      Complex complex11 = complex3.sqrt1z();
      complex11.ZERO.cos();
      complex3.sqrt();
      Complex complex12 = complex4.cos();
      Complex complex13 = complex1.ONE.multiply(3.269746642571256E-4);
      complex12.NaN.getField();
      complex9.NaN.sqrt();
      complex12.ZERO.pow(complex3);
      complex10.negate();
      complex3.add(complex13);
      complex5.multiply(215);
      complex1.cos();
      Complex.valueOf((-1.2075401601023998E7), (double) 215);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((double) 2135, 7.007473073761473);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.divide(complex1);
      complex4.createComplex(2410.24, (-1.545495535488274E-89));
      Complex complex5 = complex1.pow((-1699.1666727));
      complex2.pow(complex3);
      complex5.sinh();
      complex0.sinh();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-777.642645891), Double.POSITIVE_INFINITY);
      complex1.divide(4.2657777816050375E-213);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-777.642645891));
      complex1.multiply(complex3);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = 153.44926552761407;
      Complex complex0 = Complex.valueOf(153.44926552761407, 153.44926552761407);
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(922.8007055934497, 922.8007055934497);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(1029.813);
      complex3.ONE.createComplex(Double.POSITIVE_INFINITY, (-9.999990654428904));
      complex2.sinh();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.readResolve();
      Complex complex1 = complex0.log();
      complex1.getArgument();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.tanh();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(922.8007055934497, 922.8007055934497);
      Complex complex1 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.multiply(1029.813);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      complex0.nthRoot(1625);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = Complex.INF;
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(3047.2832, 3047.2832);
      Complex complex1 = Complex.valueOf(3047.2832);
      complex1.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.tan();
      complex3.tanh();
      complex1.equals(complex0);
      Complex complex4 = complex0.subtract(2887.2911278036);
      complex3.multiply(complex4);
      complex1.pow(167.904);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf((-1863.9869921599548), 11.5211781691763);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex0.divide(273.155136);
      complex5.INF.subtract((-1863.9869921599548));
      Complex complex6 = complex5.asin();
      Complex complex7 = complex3.ZERO.sin();
      complex7.INF.cosh();
      Complex complex8 = complex3.acos();
      complex8.INF.reciprocal();
      complex2.exp();
      Complex complex9 = complex0.cosh();
      complex1.multiply(273.155136);
      complex4.isNaN();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex10.negate();
      complex11.NaN.add((-1.246635423141374E-7));
      complex6.readResolve();
      Complex.valueOf(273.155136);
      complex9.multiply(11.5211781691763);
      complex2.toString();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2790.61573524));
      complex1.I.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex0.abs();
      Complex complex3 = complex1.multiply((-2790.61573524));
      Complex.valueOf((-2.1139124097042925E-7));
      Complex complex4 = complex3.INF.add((-20.0));
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex3.asin();
      complex5.sqrt();
      complex0.I.sinh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.ONE.negate();
      complex8.add(complex9);
      complex1.readResolve();
      complex6.sinh();
      complex4.isNaN();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2.1139124097042925E-7));
      complex4.readResolve();
      complex2.multiply(complex7);
      complex10.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.readResolve();
      Complex complex2 = complex0.log();
      complex0.getArgument();
      complex2.sinh();
      complex1.tan();
      Complex complex3 = Complex.INF;
      complex3.multiply(complex0);
      Complex complex4 = Complex.NaN;
      Object object0 = new Object();
      Complex complex5 = Complex.I;
      complex0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(632.77099167138);
      Complex complex2 = complex0.INF.sinh();
      complex0.I.tan();
      complex1.nthRoot(2304);
      complex2.getImaginary();
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex((-825.2454710247767), Double.NaN);
      complex4.toString();
      complex3.pow((double) 2304);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex.valueOf((-825.245471040564), (-825.245471040564));
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex(1.0);
      complex3.add(4040.6473052615884);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.valueOf((-825.245471040564), 9.118851766353936E-229);
      complex2.acos();
      complex6.nthRoot(1757);
      complex5.getImaginary();
      complex4.tanh();
      Complex complex7 = Complex.NaN;
      complex7.toString();
      Complex complex8 = Complex.ONE;
      complex8.pow(Double.NaN);
      Complex complex9 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.tanh();
      Complex.valueOf(Double.NaN, 0.7615941559557649);
      complex2.createComplex((-1592.6824276432912), (-1592.6824276432912));
      complex1.multiply(complex4);
      complex4.add((-979.0271));
      Complex complex5 = Complex.valueOf((-1592.6824276432912));
      complex5.readResolve();
      Complex.valueOf(1515.0);
      complex3.cosh();
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = new Complex(9000.803999999998);
      complex0.sin();
      Complex complex4 = complex2.add(Double.NaN);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex3.subtract(0.9999999999999994);
      complex0.acos();
      complex0.nthRoot(1793);
      complex5.getImaginary();
      Complex complex7 = complex5.tanh();
      complex6.toString();
      complex7.pow(0.9999999999999997);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.add((-1779.894223812529));
      complex1.NaN.add(complex2);
      complex0.nthRoot(129);
      Complex complex3 = Complex.valueOf((-40.575348));
      Complex complex4 = complex3.I.tanh();
      complex3.INF.pow(0.0);
      Complex complex5 = Complex.valueOf((-40.575348));
      complex5.I.exp();
      complex3.I.getField();
      complex2.NaN.getArgument();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.tanh();
      complex1.createComplex((-1779.894223812529), 825.245471040564);
      complex4.subtract(Double.NaN);
      complex7.log();
      complex5.tan();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-825.245471040564), 4040.6473052615884);
      Complex complex1 = complex0.sin();
      complex0.add(1.5787194498912167E-8);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf(1.5787194498912167E-8, (-825.245471040564));
      Complex complex4 = complex0.acos();
      complex1.nthRoot(1757);
      complex2.getImaginary();
      complex4.tanh();
      complex3.toString();
      complex3.pow((double) 1757);
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = new Complex(1.0);
      Complex complex3 = complex1.sin();
      complex2.add((-1845.1863985333875));
      complex3.conjugate();
      Complex complex4 = complex1.subtract(4.617132214623357);
      Complex complex5 = complex4.acos();
      complex5.nthRoot(1);
      complex0.getImaginary();
      complex2.tanh();
      complex4.toString();
      Complex complex6 = complex5.pow(3.4688299108856403E-133);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = 859.43888106585;
      Complex complex0 = Complex.valueOf(859.43888106585);
      complex0.ONE.getField();
      Complex complex1 = complex0.tan();
      complex1.ONE.sqrt1z();
      complex1.getImaginary();
      complex1.I.log();
      Complex complex2 = complex1.pow(complex0);
      complex1.ONE.tan();
      complex0.NaN.divide(1949.6274);
      double double1 = (-2068.435065185);
      complex2.ZERO.createComplex((-2.399186832888246E-8), (-2068.435065185));
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex2.toString();
      complex1.NaN.add(0.0);
      complex3.sinh();
      complex0.pow(complex3);
      complex3.add(complex1);
      complex3.divide(complex1);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.sinh();
      complex4.exp();
      Complex complex5 = complex0.tanh();
      complex5.divide(complex1);
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex1.subtract(complex7);
      complex0.abs();
      complex0.tanh();
      complex0.sinh();
      complex6.getReal();
      Complex complex8 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex8.exp();
      Complex complex9 = complex6.cosh();
      complex9.sqrt1z();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.add((-1779.894223812529));
      complex1.NaN.add(complex2);
      complex0.nthRoot(129);
      Complex complex3 = Complex.valueOf((-40.575348));
      complex3.I.tanh();
      Complex complex4 = complex3.INF.pow(0.0);
      Complex complex5 = Complex.valueOf((-40.575348));
      complex5.I.exp();
      complex3.I.getField();
      complex2.NaN.getArgument();
      Complex complex6 = complex2.exp();
      complex6.NaN.readResolve();
      Complex complex7 = complex6.tanh();
      complex7.I.tanh();
      Complex.valueOf((-1779.894223812529), (-1800.0636912));
      complex6.add((-414.4108062748));
      complex4.createComplex((-2161.32954939), (-9.530545662611411E-8));
      complex5.pow((-1779.894223812529));
      complex6.toString();
      complex1.multiply(complex6);
      Complex complex8 = Complex.valueOf(773.8446, Double.POSITIVE_INFINITY);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.add((-1779.894223812529));
      complex1.NaN.add(complex2);
      complex0.nthRoot(129);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(1575.183314196);
      complex1.reciprocal();
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(1575.183314196, (double) 129);
      complex6.createComplex(1793.0, 307.9292346801585);
      Complex complex7 = Complex.ONE;
      Object object0 = complex7.readResolve();
      complex4.equals(object0);
      complex4.subtract(complex7);
      complex0.isNaN();
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex.valueOf((-20.0), (-20.0));
      Complex.valueOf(0.5045560598373413);
      Complex complex0 = Complex.valueOf(773.8446, (-20.0));
      complex0.tanh();
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(0.5045560598373413);
      Complex complex2 = Complex.valueOf(0.5045560598373413, 0.5045560598373413);
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5787194498912167E-8, 1965.7);
      Complex complex1 = complex0.add((-20.0));
      complex1.subtract(1.5787194498912167E-8);
      complex0.tan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      Complex complex2 = Complex.valueOf(1.0);
      complex1.tanh();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex0.exp();
      complex4.getField();
      complex4.getArgument();
      complex4.exp();
      Complex complex5 = complex0.tanh();
      complex4.tanh();
      Complex.valueOf((-643.88809461543), 8212308.152140449);
      Complex complex6 = new Complex(6.283185307179586);
      complex6.add(20.0);
      Complex complex7 = complex2.createComplex(3.141592653589793, (-1800.0636912));
      complex3.pow(3.141592653589793);
      complex1.toString();
      Complex complex8 = complex5.multiply(complex7);
      complex8.INF.asin();
      complex2.acos();
      complex6.exp();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = (-1214.021255447838);
      Complex complex0 = Complex.valueOf((-1214.021255447838), (-1214.021255447838));
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex.valueOf((-648.9));
      Complex complex0 = Complex.valueOf(1042.58725473671, (-648.9));
      Complex complex1 = new Complex(1042.58725473671, (-648.9));
      Complex complex2 = new Complex(4.798373665776491E-8);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.tan();
      complex4.multiply((-650));
      Object object0 = new Object();
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex0.nthRoot(470);
      complex0.getArgument();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.add((-2556.01));
      complex1.tan();
      complex1.cosh();
      Complex complex4 = Complex.valueOf(2.1176701967189587E12);
      Complex complex5 = complex4.multiply(complex0);
      complex5.I.sqrt();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.atan();
      complex0.createComplex(1.5707963267948966, (-20.0));
      complex1.subtract(17.545550883640704);
      complex3.subtract(2.1176701967189587E12);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.divide(complex0);
      complex9.abs();
      complex7.subtract((-465.026));
      Complex complex10 = complex2.exp();
      complex10.NaN.negate();
      Complex complex11 = new Complex((-2.356194490192345), 3047.2832);
      complex1.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      Complex complex2 = complex1.tan();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf(648.9, 648.9);
      complex3.getArgument();
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.tanh();
      complex2.tanh();
      Complex complex7 = Complex.valueOf(2.399186832888246E-8, 2.399186832888246E-8);
      Complex complex8 = Complex.I;
      complex4.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex9 = complex2.pow(9288215.415876767);
      complex9.toString();
      Complex complex10 = complex4.multiply(complex1);
      complex2.add(Double.NaN);
      complex7.readResolve();
      Complex.valueOf(648.9);
      complex2.cosh();
      Complex complex11 = new Complex((-1.3577357192972777E258), (-207.65));
      complex11.pow(complex6);
      complex5.divide(complex0);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      Complex complex2 = complex1.tan();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf(2917.866033754432, 2917.866033754432);
      complex3.getArgument();
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.ONE;
      complex3.tanh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = Complex.valueOf(2.399186832888246E-8, 2.399186832888246E-8);
      Complex complex8 = complex4.add(1.5707963267948966);
      complex0.createComplex(1625, 9288215.415876767);
      Complex complex9 = complex8.pow(1.5707963267948966);
      complex9.toString();
      Complex complex10 = complex0.multiply(complex7);
      complex10.add(138.3660232014);
      complex6.readResolve();
      Complex.valueOf((-703.0));
      complex3.cosh();
      complex8.pow(complex10);
      complex7.divide(complex10);
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095, 483.067);
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.ZERO.multiply(1.5960680219775756);
      complex1.createComplex(Double.NaN, Double.NaN);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.399186832888246E-8));
      complex0.abs();
      complex0.readResolve();
      Complex complex1 = complex0.log();
      complex0.getArgument();
      complex1.ONE.sinh();
      Complex complex2 = complex0.add((-2.399186832888246E-8));
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex2.ZERO.multiply(complex0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.atan();
      complex7.I.createComplex(2.399186832888246E-8, (-2.399186832888246E-8));
      complex5.ONE.subtract(2.399186832888246E-8);
      Complex complex8 = complex7.subtract((-2.399186832888246E-8));
      Complex complex9 = Complex.ZERO;
      complex5.divide(complex8);
      complex1.abs();
      complex5.subtract(3047.2832);
      complex4.exp();
      complex9.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-648.9));
      complex0.sqrt1z();
      complex0.I.nthRoot(123);
      Complex complex1 = Complex.NaN;
      complex1.add(2.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.I;
      complex4.subtract(complex3);
      complex3.nthRoot(1054);
      Complex complex5 = new Complex((-433.48703109166));
      complex5.tanh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.asin();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.add((-1779.894223812529));
      Complex complex3 = complex1.NaN.add(complex2);
      complex0.nthRoot(129);
      Complex complex4 = Complex.valueOf((-40.575348));
      complex4.I.tanh();
      complex4.INF.pow(0.0);
      Complex complex5 = Complex.valueOf((-40.575348));
      Complex complex6 = complex5.I.exp();
      complex4.I.getField();
      Complex complex7 = complex1.sqrt();
      complex4.divide((-1779.894223812529));
      Complex complex8 = complex4.reciprocal();
      complex8.multiply(complex0);
      Complex complex9 = complex7.log();
      complex1.toString();
      Complex complex10 = Complex.ONE;
      Object object0 = complex3.readResolve();
      complex7.equals(object0);
      complex9.subtract(complex4);
      Complex.valueOf((-1754.4997), (-40.575348));
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      Complex complex2 = complex1.tan();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf(2917.866033754432, 7.070450309820548E-99);
      complex3.getArgument();
      Complex complex4 = complex3.exp();
      complex0.readResolve();
      complex3.tanh();
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.valueOf(2.399186832888246E-8, 2.399186832888246E-8);
      Complex complex7 = complex4.add(7.070450309820548E-99);
      complex0.createComplex(7.070450309820548E-99, 9288215.415876767);
      Complex complex8 = complex7.pow(1.5707963267948966);
      complex8.toString();
      Complex complex9 = complex0.multiply(complex6);
      complex9.add(138.3660232014);
      complex5.readResolve();
      Complex.valueOf((-703.0));
      complex3.cosh();
      complex7.pow(complex9);
      complex6.divide(complex9);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex0.nthRoot(470);
      Complex complex2 = complex0.tan();
      complex2.getArgument();
      Complex complex3 = complex0.sqrt();
      complex3.INF.multiply((-2382.574));
      complex3.multiply(116);
      Complex complex4 = complex1.sin();
      complex3.readResolve();
      Complex complex5 = complex3.log();
      complex5.ZERO.log();
      complex4.readResolve();
      complex5.multiply(complex2);
      complex0.sinh();
      complex3.nthRoot(632);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      Complex complex2 = complex0.INF.sinh();
      complex0.I.tan();
      complex0.divide(2523.0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = new Complex((-5.923734606208998E187));
      complex0.multiply(complex1);
      complex3.toString();
      complex2.log();
      complex0.toString();
      Complex complex5 = Complex.ONE;
      Complex.valueOf(375.83258084, (-308.34211836817));
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      Complex complex6 = Complex.INF;
      complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.NaN;
      complex3.getArgument();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.divide((double) 1625);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex4.multiply(complex1);
      complex7.log();
      complex2.toString();
      Complex complex8 = Complex.ONE;
      Complex complex9 = new Complex(Double.NaN, 2.0);
      complex9.I.sin();
      complex9.equals(complex0);
      complex6.subtract(complex3);
      complex5.divide(complex7);
      Complex.valueOf((-1.0), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-3882.0512), 2404.60082);
      Complex complex1 = complex0.acos();
      complex1.I.getArgument();
      complex1.negate();
      Complex complex2 = complex0.sin();
      complex1.readResolve();
      complex0.toString();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.divide(3.094481085547608);
      complex4.sinh();
      complex3.readResolve();
      complex3.multiply(complex4);
      complex2.nthRoot(99);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = (-648.9);
      Complex complex0 = new Complex((-2106.04974612341));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.asin();
      complex1.I.nthRoot(1793);
      // Undeclared exception!
      complex2.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex0.nthRoot(470);
      Complex complex2 = new Complex(470);
      complex2.getArgument();
      complex0.sqrt();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.asin();
      complex5.acos();
      complex1.nthRoot(7);
      complex2.getImaginary();
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.I;
      complex6.INF.subtract(complex7);
      complex6.toString();
      Complex complex8 = complex3.pow(0.5800528526306152);
      complex8.cos();
      complex1.subtract(610.6202663);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.pow((double) 1625);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.exp();
      complex3.getField();
      complex5.getArgument();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.exp();
      complex0.readResolve();
      Complex complex9 = complex0.tanh();
      complex2.tanh();
      Complex.valueOf(0.0, (-1.0));
      complex9.add(0.0);
      complex3.createComplex((-1.0), 2959.859316584);
      Complex complex10 = complex4.pow(2959.859316584);
      complex10.toString();
      complex10.multiply(complex8);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.add((-1779.894223812529));
      Complex complex3 = complex1.NaN.add(complex2);
      complex0.nthRoot(129);
      Complex complex4 = Complex.valueOf((-40.575348));
      complex4.I.tanh();
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = Complex.valueOf((-40.575348));
      complex6.I.exp();
      complex4.I.getField();
      complex2.NaN.getArgument();
      Complex complex7 = complex2.exp();
      Complex complex8 = (Complex)complex7.NaN.readResolve();
      Complex complex9 = complex7.tanh();
      complex9.I.tanh();
      Complex complex10 = complex8.reciprocal();
      complex10.ONE.divide(complex1);
      Complex complex11 = complex6.multiply(complex3);
      complex11.I.atan();
      complex5.log();
      complex5.toString();
      Complex complex12 = Complex.ONE;
      Complex complex13 = Complex.ONE;
      Complex complex14 = Complex.valueOf(1900.5);
      complex13.equals(complex14);
      complex13.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      complex0.tan();
      Complex complex2 = Complex.NaN;
      complex2.getArgument();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.divide((double) 1625);
      complex4.reciprocal();
      Complex complex5 = complex3.multiply(complex1);
      complex5.log();
      Complex complex6 = complex2.log();
      complex6.toString();
      Complex complex7 = Complex.ONE;
      complex1.equals(complex3);
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.9999999999999997, 0.9999999999999997);
      complex0.INF.getArgument();
      complex0.ONE.divide(0.7853981633974483);
      Complex complex1 = Complex.valueOf(1310.4997446586);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = Complex.valueOf((-648.9));
      complex3.ZERO.multiply(complex4);
      complex2.INF.abs();
      Complex complex5 = complex0.I.createComplex(0.9999999999999997, (-648.9));
      Complex complex6 = complex0.acos();
      complex6.I.toString();
      Complex complex7 = complex2.add(complex6);
      Complex complex8 = complex3.acos();
      complex8.NaN.pow(3.131670429538044E-4);
      complex2.subtract(complex0);
      Complex complex9 = complex0.multiply(complex7);
      complex5.sinh();
      complex9.pow(0.9999999999999997);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-648.9));
      Complex complex1 = new Complex((-2106.04974612341));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sin();
      complex3.NaN.add((-648.9));
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex1.I.acos();
      complex5.ZERO.asin();
      complex5.I.nthRoot(1793);
      complex2.readResolve();
      complex0.tanh();
      complex2.tanh();
      Complex complex6 = Complex.valueOf((-1800.0636912), (-648.9));
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.add((double) 1793);
      Complex complex9 = Complex.ONE;
      complex9.createComplex((-733.496009232), (-648.9));
      Complex complex10 = complex2.pow((-2106.04974612341));
      complex9.toString();
      complex10.multiply(complex9);
      Complex complex11 = complex7.add((-2106.04974612341));
      complex6.readResolve();
      Complex.valueOf((-2106.04974612341));
      complex8.cosh();
      complex2.pow(complex4);
      complex11.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.add((-20.0));
      complex0.INF.sinh();
      complex0.I.tan();
      Complex complex2 = complex1.ONE.multiply((-650));
      Complex complex3 = complex2.ONE.sin();
      complex3.ZERO.atan();
      complex0.readResolve();
      complex0.toString();
      Complex complex4 = complex0.log();
      complex4.ZERO.divide((-20.0));
      complex4.readResolve();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.399186832888246E-8));
      complex0.abs();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.log();
      complex0.getArgument();
      complex2.ONE.sinh();
      Complex complex3 = complex0.add((-114.465079));
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex3.ZERO.multiply(complex0);
      complex6.ZERO.tan();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.atan();
      complex8.I.createComplex(2.399186832888246E-8, (-2.399186832888246E-8));
      complex6.ONE.subtract((-114.465079));
      Complex complex9 = complex8.subtract((-2.399186832888246E-8));
      complex9.I.nthRoot(1608);
      complex9.divide(3.418237608335161E-166);
      Complex complex10 = (Complex)complex2.readResolve();
      complex10.I.atan();
      complex0.cos();
      complex0.abs();
      complex5.getField();
      complex1.multiply(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex0.nthRoot(470);
      Complex complex2 = complex0.tan();
      complex2.getArgument();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.divide((-2860.176268324));
      complex3.reciprocal();
      Complex complex5 = new Complex(356.844803015937);
      complex5.multiply(complex1);
      complex5.ONE.toString();
      Complex complex6 = new Complex(1131.6468154879794);
      complex6.log();
      complex5.toString();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2860.176268324));
      complex4.equals(complex8);
      Complex complex9 = Complex.INF;
      complex9.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = Complex.valueOf((-1646.620964), (-759.828316));
      Complex complex3 = complex1.add(3.2813537149653483E-9);
      complex1.sinh();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.multiply(127);
      Complex complex6 = complex4.sin();
      complex1.nthRoot(127);
      complex2.readResolve();
      complex5.toString();
      complex6.log();
      Complex complex7 = complex3.divide((-3193.184039576172));
      complex1.readResolve();
      complex4.multiply(complex0);
      complex2.conjugate();
      complex7.pow((-1646.620964));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf((-20.0), 2672.357754903616);
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.ZERO.add((-20.0));
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.I.tan();
      complex2.ONE.multiply((-650));
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.exp();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.divide(complex3);
      complex8.abs();
      complex2.readResolve();
      complex6.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.nthRoot(1625);
      Complex complex1 = complex0.tan();
      complex1.ZERO.getField();
      complex0.getArgument();
      Complex complex2 = complex0.divide((-2860.176268324));
      complex2.reciprocal();
      Complex complex3 = complex0.multiply(complex0);
      complex3.log();
      Complex complex4 = Complex.I;
      complex4.ONE.cos();
      complex4.toString();
      Complex complex5 = Complex.ONE;
      Object object0 = new Object();
      complex0.equals(object0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.NaN;
      complex3.getArgument();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.divide((double) 1625);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex4.multiply(complex1);
      complex7.log();
      complex2.toString();
      Complex complex8 = Complex.ONE;
      Complex complex9 = new Complex(Double.NaN, 2.0);
      complex9.equals(complex0);
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.968586877433824E-8), (-2672.35775484393));
      Complex complex1 = complex0.add((-2672.35775484393));
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-2672.35775484393));
      Complex complex3 = Complex.valueOf((-5.968586877433824E-8), (-2672.35775484393));
      complex3.cosh();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1969.13484323));
      complex0.toString();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex0.tanh();
      Complex complex6 = Complex.valueOf(670.968525913127, 2.854978560542175E-229);
      complex0.ZERO.sin();
      Complex complex7 = complex2.exp();
      complex7.ONE.subtract(670.968525913127);
      complex7.I.abs();
      Complex complex8 = complex0.multiply(complex5);
      complex8.I.reciprocal();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex8.ZERO.tan();
      Complex complex11 = complex10.ONE.tan();
      Complex complex12 = (Complex)complex6.readResolve();
      complex9.add((-837.69356468));
      complex6.subtract(complex1);
      Complex complex13 = new Complex(2.854978560542175E-229);
      Complex complex14 = new Complex((-1969.13484323), 1.0);
      complex12.multiply(complex14);
      complex3.add(2.854978560542175E-229);
      complex2.readResolve();
      Complex.valueOf(1.892621828736983E109);
      Complex complex15 = complex11.cosh();
      complex14.pow(complex4);
      complex15.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.conjugate();
      complex4.exp();
      Complex complex6 = complex0.tanh();
      complex6.divide(complex1);
      Complex complex7 = complex1.subtract(complex3);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex1.subtract(complex8);
      complex5.abs();
      complex0.tanh();
      complex0.sinh();
      complex7.getReal();
      Complex complex9 = complex2.cos();
      complex9.exp();
      Complex complex10 = complex7.cosh();
      complex10.sqrt1z();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-648.9));
      Complex complex1 = new Complex((-2106.04974612341));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.NaN.add((-648.9));
      complex3.ONE.conjugate();
      Complex complex5 = complex1.I.acos();
      complex5.ZERO.asin();
      complex5.I.nthRoot(1793);
      complex2.getImaginary();
      Complex complex6 = complex5.tanh();
      complex4.toString();
      Complex complex7 = complex6.pow((double) 1793);
      complex7.cos();
      complex5.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      complex0.ZERO.toString();
      Complex complex2 = complex0.acos();
      complex2.INF.log();
      try { 
        complex2.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.add(2390.736743);
      complex3.NaN.subtract(2390.736743);
      complex3.tan();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.I.getField();
      complex0.nthRoot(1625);
      Complex complex2 = complex1.tan();
      complex2.I.getArgument();
      Complex complex3 = complex2.INF.sqrt();
      complex2.divide((-2860.176268324));
      complex3.ZERO.reciprocal();
      Complex complex4 = complex1.multiply(complex2);
      complex4.I.log();
      complex3.toString();
      Complex complex5 = Complex.ONE;
      complex0.equals(complex5);
      complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sinh();
      complex1.I.tan();
      complex1.NaN.createComplex(243.4, 1283.723798);
      complex1.I.conjugate();
      complex0.conjugate();
      Complex complex2 = Complex.NaN;
      complex2.ONE.toString();
      complex0.add(complex2);
      complex2.cos();
      Complex.valueOf((-1002.25840266213), 0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-479.2638820738));
      double double0 = (-1.246635423141374E-7);
      complex0.createComplex((-479.2638820738), (-1.246635423141374E-7));
      try { 
        complex1.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = Complex.valueOf(0.0, 5.380185921962174E-32);
      complex1.ZERO.hashCode();
      complex0.subtract((-578.118617928));
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex0.conjugate();
      complex3.NaN.readResolve();
      Complex complex4 = complex1.divide(1.0112214979786464E-43);
      Complex complex5 = complex4.NaN.multiply(236);
      complex4.I.toString();
      complex3.cosh();
      complex4.tanh();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex2.add(1.0112214979786464E-43);
      complex7.tanh();
      Complex complex8 = complex7.I.negate();
      complex8.I.pow(complex3);
      complex7.getArgument();
      complex6.getReal();
      complex7.reciprocal();
      complex0.atan();
      complex5.asin();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      int int0 = 0;
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.17759034037590027, 0.17759034037590027);
      complex0.isInfinite();
      Complex complex1 = complex0.add(0.17759034037590027);
      complex0.ZERO.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.sin();
      complex0.NaN.reciprocal();
      complex3.NaN.divide(1.5173907279968262);
      complex0.divide(0.0);
      complex4.pow(0.0);
      Complex complex5 = new Complex((-1708.6237682));
      complex5.NaN.hashCode();
      complex5.ZERO.tanh();
      complex5.ONE.log();
      complex1.equals(complex5);
      complex0.add(complex2);
      complex5.add(7.204525142098426E-261);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.399186832888246E-8));
      complex0.abs();
      complex0.readResolve();
      Complex complex1 = complex0.log();
      complex0.getArgument();
      complex1.ONE.sinh();
      Complex complex2 = complex0.add((-114.465079));
      Complex complex3 = complex1.tan();
      complex3.I.cosh();
      Complex complex4 = complex2.ZERO.multiply(complex0);
      complex4.ZERO.tan();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.atan();
      complex6.I.createComplex(2.399186832888246E-8, (-2.399186832888246E-8));
      complex4.ONE.subtract((-114.465079));
      Complex complex7 = complex6.subtract((-2.399186832888246E-8));
      complex7.I.nthRoot(1608);
      complex7.divide(3.418237608335161E-166);
      complex1.readResolve();
      complex0.cos();
      complex4.isNaN();
      Complex.valueOf(3.141592653589793, 3.418237608335161E-166);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      complex0.INF.sinh();
      complex0.I.tan();
      Complex complex2 = complex1.ONE.multiply((-650));
      complex2.ONE.sin();
      complex0.readResolve();
      complex0.toString();
      Complex complex3 = complex0.log();
      complex3.ZERO.divide((-20.0));
      complex3.readResolve();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-3882.0512), 2404.60082);
      Complex complex1 = complex0.acos();
      complex1.negate();
      complex1.I.getArgument();
      Complex complex2 = complex1.negate();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex0.divide(1.1759889125823975);
      complex3.NaN.divide(complex0);
      complex0.log();
      complex1.multiply(316.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1486.87), 2.0);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.ONE.getField();
      Complex complex2 = Complex.I;
      complex2.INF.readResolve();
      Complex complex3 = complex2.ZERO.multiply(2633);
      Complex complex4 = complex0.INF.multiply(37);
      Complex complex5 = complex0.ONE.asin();
      complex5.ONE.negate();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex6.ZERO.cos();
      complex6.I.sin();
      complex6.ZERO.negate();
      complex2.I.getField();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex2.subtract((double) 2633);
      complex3.readResolve();
      Complex complex10 = complex9.sqrt1z();
      complex10.NaN.pow(complex8);
      complex10.INF.getArgument();
      complex3.sin();
      Complex complex11 = complex7.add(complex2);
      complex11.multiply(complex6);
      complex4.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.NaN.log();
      Complex complex3 = complex2.ZERO.add(0.0);
      complex1.ZERO.createComplex(20.0, 0.0);
      complex0.toString();
      Complex complex4 = complex2.subtract(complex1);
      complex0.multiply(101);
      complex4.INF.getField();
      complex4.sqrt();
      complex3.equals((Object) null);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.INF.divide(complex3);
      complex4.ONE.cosh();
      Complex complex5 = complex2.INF.multiply(complex3);
      Complex complex6 = complex0.ONE.negate();
      complex6.ZERO.getArgument();
      Complex.valueOf((-947.8323204023), (-947.8323204023));
      Complex complex7 = complex2.I.negate();
      complex7.NaN.conjugate();
      complex0.nthRoot(510);
      complex0.getReal();
      complex0.getImaginary();
      complex0.negate();
      complex0.multiply(complex7);
      complex5.getReal();
      complex5.readResolve();
      complex6.createComplex(7.529170882336924E-162, 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.sqrt();
      complex3.INF.add(complex2);
      complex2.INF.atan();
      complex1.hashCode();
      complex2.abs();
      Complex complex4 = complex0.atan();
      complex4.abs();
      complex0.isInfinite();
      complex1.divide(complex2);
      complex2.divide(0.0);
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-992.469), (-992.469));
      complex0.getImaginary();
      Complex complex2 = complex1.ZERO.multiply((-992.469));
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Object object0 = new Object();
      complex1.equals(object0);
      complex0.abs();
      complex0.add(Double.POSITIVE_INFINITY);
      complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ZERO.sin();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.tanh();
      complex3.ONE.divide(complex0);
      Complex complex6 = complex0.asin();
      complex6.NaN.createComplex(0.0, 1073.941422166);
      complex5.multiply(0);
      Complex complex7 = complex4.multiply((-2721.133171692));
      complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.694889206675675E28);
      Complex complex1 = complex0.INF.multiply((-3094));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.I.add(complex2);
      complex3.INF.hashCode();
      Complex complex4 = complex0.negate();
      complex4.getImaginary();
      Complex complex5 = complex2.sinh();
      complex5.readResolve();
      complex5.toString();
      complex2.isNaN();
      complex0.readResolve();
      Complex complex6 = complex5.log();
      complex6.multiply(1391.002035);
      complex4.toString();
      Complex complex7 = complex4.sqrt1z();
      complex7.hashCode();
      Complex complex8 = complex7.NaN.cosh();
      complex1.abs();
      complex7.sin();
      Complex complex9 = complex5.conjugate();
      complex9.subtract(complex0);
      complex8.atan();
      complex4.add((-713.246));
      complex4.log();
      complex3.isNaN();
      complex8.toString();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1969.13484323));
      complex0.toString();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.INF.conjugate();
      complex2.ZERO.readResolve();
      complex0.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(670.968525913127, 2.854978560542175E-229);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.ONE.subtract(670.968525913127);
      complex5.I.abs();
      Complex complex7 = complex0.multiply(complex3);
      complex7.I.reciprocal();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex7.ZERO.tan();
      complex9.ONE.tan();
      complex4.readResolve();
      complex8.add((-837.69356468));
      Complex complex10 = complex4.subtract(complex1);
      Complex complex11 = new Complex(2.854978560542175E-229);
      Complex complex12 = complex6.ONE.pow(complex11);
      complex10.INF.multiply(0);
      complex7.isNaN();
      complex4.sinh();
      complex2.hashCode();
      complex6.acos();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.I.tan();
      Complex complex2 = complex1.I.atan();
      complex0.NaN.abs();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.pow(complex4);
      complex1.sqrt1z();
      Complex complex6 = complex1.add(Double.NaN);
      complex6.INF.sinh();
      complex6.multiply(0);
      Complex.valueOf(975.0786753196473, 2.3848605155944824);
      complex6.nthRoot(1845);
      complex6.subtract(complex5);
      complex3.conjugate();
      complex5.pow(complex0);
      complex5.pow(complex1);
      try { 
        complex2.nthRoot((-2112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,112
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(1.1044092571980793E155);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex0.ONE.subtract(1.1044092571980793E155);
      Complex complex6 = complex0.multiply(1.1044092571980793E155);
      complex6.toString();
      complex4.ONE.add(complex3);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.NaN.add(complex1);
      complex7.pow(complex6);
      complex5.NaN.sin();
      complex5.multiply(0);
      complex5.tanh();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(2861.2097);
      Complex complex1 = new Complex(0.0);
      complex1.INF.divide(complex0);
      complex1.ZERO.asin();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.createComplex(2124.1565, (-6.259620482221904E-8));
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex3.ZERO.multiply(1026);
      complex4.sqrt();
      Complex complex7 = Complex.valueOf((-6.259620482221904E-8), 2124.1565);
      complex5.multiply(0.0);
      Complex complex8 = Complex.valueOf(2861.2097);
      complex6.getArgument();
      Complex complex9 = complex8.divide(complex5);
      complex9.hashCode();
      complex7.pow((-3025.508953570029));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-648.9));
      Complex complex1 = new Complex((-2106.04974612341));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sin();
      complex3.NaN.add((-648.9));
      complex3.ONE.conjugate();
      Complex complex4 = complex1.I.acos();
      complex4.ZERO.asin();
      complex4.I.nthRoot(1793);
      complex2.getImaginary();
      complex0.sinh();
      Complex complex5 = complex3.conjugate();
      complex5.ZERO.exp();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex1.divide(complex4);
      complex7.INF.subtract(complex1);
      Complex complex8 = complex4.subtract(complex3);
      complex8.NaN.abs();
      complex4.tanh();
      complex1.sinh();
      complex6.getReal();
      complex6.cos();
      complex4.cosh();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      complex0.I.getField();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex3.NaN.subtract(complex1);
      complex4.INF.multiply(0.0);
      complex4.ZERO.cosh();
      complex0.hashCode();
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = complex0.cosh();
      complex6.cosh();
      Complex complex7 = complex6.INF.multiply(661);
      Complex complex8 = complex6.createComplex((-288.31), 0.0);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.ZERO.add(complex9);
      Complex complex11 = complex8.ONE.add(0.0);
      complex11.ZERO.subtract(0.0);
      complex2.ZERO.pow((-288.31));
      complex1.nthRoot(353);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex5.pow(complex12);
      complex13.NaN.exp();
      complex2.multiply(complex5);
      Complex complex14 = Complex.valueOf(0.0);
      complex7.sqrt1z();
      Complex complex15 = complex9.cos();
      complex15.ZERO.toString();
      complex15.ONE.abs();
      complex10.negate();
      complex0.readResolve();
      complex5.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1031.857));
      Complex complex1 = complex0.tanh();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.subtract((-1434.7269));
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.add(complex1);
      complex3.ZERO.tan();
      Complex complex5 = complex3.add(860.315);
      complex5.negate();
      complex4.isNaN();
      complex3.subtract(1976.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getField();
      Complex complex1 = complex0.I.createComplex((-879.12514339), (-879.12514339));
      complex1.I.toString();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.pow((-879.12514339));
      Complex complex5 = complex0.tan();
      complex5.NaN.multiply(complex3);
      Complex complex6 = complex1.atan();
      complex6.INF.sqrt();
      complex1.ZERO.multiply(complex4);
      Complex complex7 = complex2.NaN.multiply((-1));
      complex7.INF.pow((double) (-1));
      complex2.conjugate();
      Complex complex8 = Complex.valueOf((-879.12514339), 0.5290185213088989);
      complex8.abs();
      complex8.ZERO.hashCode();
      complex2.pow(2.0);
      Complex.valueOf(2.0, (-664.9));
      complex0.multiply(879.1253025599274);
      complex6.toString();
      complex5.add((-879.12514339));
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.968586877433824E-8), (-2672.35775484393));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.add((-1779.894223812529));
      Complex complex3 = complex1.NaN.add(complex2);
      complex0.nthRoot(129);
      Complex complex4 = Complex.valueOf((-40.575348));
      Complex complex5 = complex4.I.tanh();
      complex4.INF.pow(0.0);
      Complex complex6 = Complex.valueOf((-40.575348));
      complex6.I.exp();
      complex4.I.getField();
      complex2.NaN.getArgument();
      Complex complex7 = complex2.exp();
      complex7.NaN.readResolve();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.I.tanh();
      Complex.valueOf((-1779.894223812529), (-1800.0636912));
      complex7.ONE.add(0.0);
      Complex complex10 = complex2.createComplex((-1779.894223812529), (-1489.0));
      complex10.pow((-40.575348));
      complex10.toString();
      Complex complex11 = complex0.multiply(complex1);
      complex11.ZERO.add(0.0);
      complex3.readResolve();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.cosh();
      complex8.pow(complex1);
      complex9.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.add(0.0);
      complex2.ONE.acos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      try { 
        complex4.nthRoot((-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -73
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(3278.01862541);
      Complex complex2 = complex1.I.subtract((-1448.015262));
      complex2.INF.hashCode();
      complex1.INF.readResolve();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ZERO.createComplex(3278.01862541, 3278.01862541);
      Complex complex6 = complex0.multiply(419);
      Complex complex7 = complex6.I.divide(complex4);
      complex3.getArgument();
      complex0.isNaN();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.INF.multiply(complex5);
      complex9.reciprocal();
      Complex complex10 = complex4.negate();
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex10.pow(3278.01862541);
      complex12.INF.sin();
      complex0.ZERO.tanh();
      Complex complex13 = complex10.I.sinh();
      complex13.INF.atan();
      Complex complex14 = complex10.log();
      complex14.INF.add(complex5);
      Complex complex15 = complex8.createComplex((-1448.015262), 0.7853981633974483);
      complex15.I.pow(0.0);
      complex13.I.pow(1.0);
      complex12.atan();
      complex13.abs();
      complex2.hashCode();
      complex0.pow(complex11);
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      complex1.I.add(complex0);
      complex1.NaN.sqrt();
      complex0.multiply((-72));
      complex1.INF.hashCode();
      Complex complex2 = complex0.reciprocal();
      complex2.ONE.getField();
      Complex complex3 = complex2.subtract(complex0);
      complex2.acos();
      try { 
        complex3.I.nthRoot((-72));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -72
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(437.3540260328);
      Complex complex1 = complex0.I.asin();
      complex0.ONE.readResolve();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex0.NaN.abs();
      Complex complex4 = complex3.NaN.exp();
      complex3.getField();
      Complex complex5 = new Complex((-1.0));
      Complex complex6 = complex0.subtract(complex5);
      complex6.conjugate();
      complex6.readResolve();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex2.divide(complex1);
      complex8.tan();
      Complex complex9 = complex2.add(complex7);
      complex6.pow(complex7);
      Complex complex10 = complex7.atan();
      complex5.acos();
      Complex.valueOf(437.3540260328, 437.3540260328);
      complex1.readResolve();
      complex8.acos();
      complex10.conjugate();
      Complex complex11 = complex9.divide(1016.72);
      complex2.tan();
      complex11.negate();
      complex0.createComplex(1016.72, Double.NaN);
      complex4.toString();
      complex6.isInfinite();
      complex11.isInfinite();
      complex5.nthRoot(268);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(2662.5476848);
      complex0.I.abs();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.NaN.sin();
      complex4.NaN.acos();
      complex2.reciprocal();
      complex1.getArgument();
      complex2.abs();
      Complex complex5 = complex1.ONE.conjugate();
      complex1.INF.add(4202.25640906532);
      Complex complex6 = complex0.asin();
      complex6.getArgument();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.ZERO.sqrt1z();
      complex8.NaN.pow(complex0);
      complex5.equals(complex7);
      complex6.exp();
      Complex complex9 = complex6.exp();
      complex9.ZERO.cosh();
      complex9.subtract(20.0);
      Complex complex10 = Complex.valueOf(1.0, -0.0);
      complex10.reciprocal();
      Complex.valueOf((-1371.661460779195));
      complex10.sqrt();
      complex8.isNaN();
      complex0.subtract(4202.25640906532);
      try { 
        complex0.nthRoot((-228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -228
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1254.0);
      Complex complex2 = complex1.negate();
      assertEquals(1254.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals((-1254.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3047.2832);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(3047.2832, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }
}
