/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:06:09 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = new Complex(223.75672691, 1.9711751621240536E163);
      complex0.ZERO.acos();
      Complex complex3 = complex2.ONE.cosh();
      complex2.hashCode();
      Complex complex4 = Complex.valueOf(223.75672691);
      complex4.INF.subtract(complex2);
      Complex complex5 = complex0.NaN.sqrt();
      complex0.INF.nthRoot(1916);
      Complex complex6 = complex2.ZERO.multiply(complex0);
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex2.pow(complex0);
      Complex complex11 = complex10.atan();
      complex1.I.sin();
      complex10.getField();
      Complex complex12 = complex6.log();
      complex12.ONE.createComplex(752.976087560002, 2.0);
      Complex complex13 = complex6.sqrt();
      Complex complex14 = complex7.sqrt1z();
      complex14.atan();
      Complex complex15 = complex3.subtract(complex1);
      complex11.asin();
      complex0.multiply(complex5);
      Complex complex16 = complex11.add(0.6466736793518066);
      complex15.readResolve();
      complex16.nthRoot(1916);
      complex9.cos();
      Complex complex17 = complex8.tan();
      complex17.abs();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-569.6076534375976), (-20.0));
      complex1.multiply((-40));
      complex1.tan();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex.valueOf(0.0, 20.0);
      Complex complex2 = new Complex(0.0, (-493.01632270931503));
      complex0.abs();
      complex0.tan();
      Complex complex3 = Complex.NaN;
      complex1.nthRoot(3594);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex((-569.6076534375976), Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.conjugate();
      complex2.multiply((-569.6076534375976));
      Complex complex4 = complex3.multiply(complex1);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.ZERO.asin();
      Complex complex2 = new Complex((-1328.3641125892616), (-1.3850458263351744E91));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.25534194707870483);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.createComplex(0.25534194707870483, (-1869.1492919884));
      complex2.I.tanh();
      Complex complex3 = complex0.exp();
      complex3.getArgument();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.I.conjugate();
      complex1.tan();
      Complex complex7 = complex0.tanh();
      complex4.atan();
      complex6.atan();
      complex7.multiply((-310));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 7.468160889798606E-53);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(6.715654193925183, 39.682);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.reciprocal();
      complex0.cos();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.ZERO.sqrt();
      Complex complex7 = complex5.ONE.conjugate();
      Complex complex8 = complex3.exp();
      complex4.INF.readResolve();
      complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      complex4.getField();
      Complex complex9 = complex5.tan();
      complex2.ZERO.readResolve();
      Complex complex10 = complex9.I.divide(6.715654193925183);
      complex10.INF.getField();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex7.ZERO.tan();
      complex7.acos();
      Complex complex13 = complex11.asin();
      Complex complex14 = complex13.tan();
      complex2.readResolve();
      Complex complex15 = complex4.ONE.multiply((-918));
      complex15.INF.sinh();
      complex6.createComplex(2.0, (-20.6397));
      Complex complex16 = complex8.I.multiply((-2679));
      complex16.NaN.acos();
      complex12.multiply(complex4);
      complex8.sqrt1z();
      complex14.tan();
      complex14.subtract((-20.6397));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      complex1.getArgument();
      complex1.ONE.cosh();
      complex0.getArgument();
      Complex complex2 = new Complex(296.69582375884175, Double.POSITIVE_INFINITY);
      complex2.getField();
      complex1.readResolve();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals(complex0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.log();
      complex2.ZERO.log();
      complex0.abs();
      Complex complex3 = new Complex(0.0, 0.0);
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      complex1.getArgument();
      Complex complex2 = new Complex(296.69582375884175, Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex3 = Complex.ZERO;
      complex2.multiply(90);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1991.94), (-1900.6549));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.ZERO.tanh();
      complex2.cosh();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.INF.divide((-1900.6549));
      complex1.ZERO.getArgument();
      complex2.createComplex(2207.743241, 0.0);
      Complex complex7 = complex5.INF.cos();
      complex7.INF.divide(2207.743241);
      complex1.ONE.nthRoot(195);
      complex6.ONE.divide(complex0);
      Complex complex8 = complex5.pow(complex2);
      complex8.ZERO.pow(complex0);
      complex1.toString();
      Complex.valueOf(139.0);
      complex8.sinh();
      Complex complex9 = complex0.createComplex(8.999821367768787E-8, 139.0);
      complex0.nthRoot(195);
      complex9.cos();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.tan();
      complex10.asin();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      complex1.getArgument();
      Complex complex2 = Complex.INF;
      complex2.getField();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3531.0, 3531.0);
      Complex complex1 = complex0.I.subtract(20.0);
      Complex complex2 = complex0.INF.exp();
      complex2.I.createComplex(20.0, 20.0);
      Complex complex3 = complex2.INF.sqrt();
      complex3.add(20.0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.INF.add(complex4);
      complex5.ONE.exp();
      complex4.ZERO.subtract((-3877.0));
      complex5.ZERO.add(0.0);
      complex5.I.hashCode();
      Complex complex6 = complex4.ZERO.createComplex((-1290.0), Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.sqrt1z();
      complex7.ONE.conjugate();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.tan();
      complex1.getField();
      complex8.toString();
      Complex complex10 = Complex.valueOf(114.888, 1290.0);
      Complex complex11 = complex8.createComplex(3531.0, (-1659.68163));
      complex11.atan();
      complex10.exp();
      complex9.multiply((-3515));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-406.02469123253053));
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.NaN.pow((-1735.7004110233377));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1165;
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9183.08552440464));
      Complex complex1 = complex0.INF.createComplex(3112.8, 3112.8);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf((-9183.08552440464));
      complex0.ONE.readResolve();
      Complex complex4 = complex3.INF.sqrt1z();
      complex1.ONE.hashCode();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.cos();
      complex5.readResolve();
      complex4.multiply(1369);
      complex0.pow(complex1);
      complex2.readResolve();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex0.I.sinh();
      complex1.INF.abs();
      Complex complex2 = complex0.I.tan();
      complex1.getArgument();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex(3987.9338, Double.POSITIVE_INFINITY);
      complex3.ZERO.multiply(complex4);
      Complex.valueOf(Double.POSITIVE_INFINITY, 4747.7);
      Complex complex5 = complex1.tan();
      complex5.asin();
      complex1.sinh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.nthRoot(2049870754);
      complex1.abs();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(1.0, (-2953.0));
      complex2.I.divide(complex1);
      complex0.tan();
      Complex complex3 = new Complex(1.5707963267948966, 2049870754);
      Complex complex4 = complex3.asin();
      complex4.sinh();
      complex0.createComplex(2095.825, 8.37894218404787E-126);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-792.17725385));
      complex0.nthRoot(1426);
      Complex complex2 = new Complex((-792.17725385), 1426);
      complex2.NaN.hashCode();
      complex1.pow(complex2);
      complex0.getReal();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      complex0.I.tan();
      complex1.getArgument();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      complex2.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.NaN.multiply(804);
      Complex complex3 = complex0.I.multiply(complex2);
      complex3.NaN.abs();
      complex1.I.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.cos();
      Complex.valueOf((-786.0173677484519));
      complex4.getField();
      complex1.nthRoot(804);
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      complex0.I.tan();
      complex1.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      complex1.tan();
      Complex complex4 = Complex.ONE;
      complex3.tanh();
      complex4.getReal();
      Complex complex5 = complex2.divide(1318.06);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals((Object) null);
      Object object0 = new Object();
      complex0.equals((Object) null);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf((-2053.0142), 2211.9);
      complex2.abs();
      complex3.getArgument();
      Object object1 = complex3.readResolve();
      complex0.getField();
      Complex complex6 = (Complex)complex1.readResolve();
      complex5.subtract(complex0);
      complex4.subtract(complex3);
      complex1.createComplex((-1035.8529854168), (-4364.1616));
      complex6.tanh();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.divide(Double.POSITIVE_INFINITY);
      object1.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      complex0.I.tan();
      complex1.getArgument();
      Complex complex2 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY, 4747.7);
      complex1.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.acos();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals((Object) null);
      Object object0 = new Object();
      complex0.equals((Object) null);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.log();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf((-2053.0142), 2211.9);
      complex2.abs();
      complex3.getArgument();
      complex3.readResolve();
      complex0.getField();
      complex1.readResolve();
      complex4.subtract(complex0);
      Complex complex5 = new Complex((-934.557369749));
      Complex complex6 = complex5.createComplex((-975.03088832), 2211.9);
      complex6.tanh();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      Complex complex2 = complex0.I.tan();
      complex2.getArgument();
      complex1.abs();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1845.43252, (-2124.0122));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ZERO.multiply(877);
      Complex complex3 = complex0.ONE.divide(0.8414709848078965);
      complex0.toString();
      Complex complex4 = complex0.createComplex(1845.43252, (-2124.0122));
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex4.pow(complex3);
      complex6.getField();
      Complex complex8 = complex0.tan();
      complex1.I.cosh();
      complex6.ONE.acos();
      complex8.I.atan();
      complex6.pow(complex3);
      Complex complex9 = complex6.multiply(877);
      complex7.sinh();
      complex9.readResolve();
      Complex complex10 = Complex.valueOf(925.3392, 0.8414709848078965);
      complex7.divide(complex3);
      complex1.log();
      complex10.sqrt1z();
      Complex.valueOf((-2124.0122), 4168.0);
      complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(366.167, 366.167);
      complex1.I.multiply(6.283185307179586);
      Complex complex2 = complex0.ONE.cos();
      complex2.ZERO.toString();
      Complex complex3 = complex0.sin();
      complex3.NaN.readResolve();
      Complex complex4 = complex3.NaN.subtract((-1710.734));
      complex4.INF.conjugate();
      complex0.getField();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.acos();
      complex5.hashCode();
      complex6.INF.divide(complex5);
      complex5.readResolve();
      complex5.log();
      complex0.conjugate();
      Complex complex7 = complex3.createComplex((-1311.0), 366.167);
      Complex.valueOf((-1710.734));
      complex7.negate();
      complex2.negate();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.2351697477129173E-65));
      Complex complex1 = Complex.valueOf((-1.2351697477129173E-65), (-1720.5298880750058));
      complex0.abs();
      complex1.getArgument();
      Complex complex2 = Complex.NaN;
      complex2.readResolve();
      complex2.getField();
      complex0.readResolve();
      complex2.subtract(complex1);
      complex0.createComplex((-4.179048566709334E-9), 1.433889248486751E-4);
      Complex complex3 = Complex.ONE;
      complex3.cosh();
      complex3.tanh();
      complex2.getReal();
      Complex complex4 = new Complex(1.2351697477129173E-65, Double.NaN);
      complex4.divide(1239.13943);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.getArgument();
      complex0.abs();
      Complex.valueOf(Double.NaN);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      complex0.I.tan();
      complex1.getArgument();
      complex1.ZERO.readResolve();
      complex0.getField();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.add(Double.NaN);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      complex0.negate();
      Complex complex1 = complex0.acos();
      Complex.valueOf(Double.NaN);
      complex1.hashCode();
      Complex complex2 = Complex.ONE;
      complex1.tan();
      Complex complex3 = Complex.ONE;
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(297.8243765, 297.8243765);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      complex2.multiply(177);
      complex2.cosh();
      Complex complex3 = new Complex(1.433889248486751E-4);
      complex1.pow((double) 177);
      complex0.exp();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(297.8243765, 297.8243765);
      complex0.tanh();
      complex0.INF.sin();
      Complex.valueOf((double) 177);
      Complex complex1 = Complex.ONE;
      complex1.hashCode();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.I.atan();
      complex1.add(0.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.ZERO.multiply(1438);
      Complex complex6 = complex3.I.multiply(complex1);
      complex6.INF.sinh();
      complex0.divide(complex1);
      Complex complex7 = complex5.cos();
      Object object0 = new Object();
      complex2.equals(complex4);
      Complex complex8 = new Complex(659.15741343782);
      complex8.tanh();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.pow(20.0);
      Complex complex2 = complex1.acos();
      complex0.getArgument();
      Complex complex3 = complex0.createComplex(20.0, 1517.3358552);
      complex3.tanh();
      Complex complex4 = new Complex(0.7853981633974483, 1517.3358552);
      complex4.getReal();
      complex2.divide(1035.2850005695077);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(297.8243765, 297.8243765);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.multiply((-2284));
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.divide(complex2);
      complex2.cos();
      Object object0 = new Object();
      complex0.equals(complex1);
      complex6.tanh();
      complex5.getReal();
      complex4.multiply(3120.90878176577);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(2579);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.subtract((double) 2579);
      Complex complex3 = complex0.multiply(94);
      complex3.NaN.hashCode();
      Complex complex4 = complex1.conjugate();
      complex3.ONE.reciprocal();
      Complex complex5 = complex2.sin();
      complex5.I.subtract(complex2);
      complex5.I.subtract(complex3);
      complex0.NaN.nthRoot(94);
      complex1.sqrt1z();
      complex4.INF.sinh();
      Complex complex6 = Complex.valueOf((double) 2579, (double) 94);
      complex6.NaN.getArgument();
      // Undeclared exception!
      complex1.nthRoot(2579);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2543.7696));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-2543.7696), (-281.21195807028));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.ZERO.divide(complex3);
      complex4.ZERO.pow(1.132042407989502);
      Complex complex5 = complex3.ZERO.subtract((-2543.7696));
      Complex complex6 = complex1.I.conjugate();
      Complex complex7 = complex6.ZERO.atan();
      complex7.INF.negate();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex3.I.sin();
      complex10.pow((-2543.7696));
      Complex complex11 = complex1.subtract(complex2);
      Complex complex12 = complex3.sqrt1z();
      complex12.INF.reciprocal();
      complex0.abs();
      complex9.readResolve();
      complex12.toString();
      complex6.ONE.readResolve();
      Complex complex13 = complex1.sqrt();
      complex13.INF.conjugate();
      complex4.toString();
      complex7.reciprocal();
      complex1.add((-2543.7696));
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.divide(2.0);
      complex3.I.hashCode();
      Complex complex4 = complex1.pow(2.0);
      complex4.NaN.getField();
      complex4.NaN.readResolve();
      complex1.ONE.divide(2.0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex6.INF.cosh();
      complex7.ZERO.abs();
      complex4.INF.multiply(538.286);
      Complex complex8 = complex1.subtract(1773.3379);
      complex4.abs();
      complex8.sinh();
      Object object0 = complex7.readResolve();
      complex4.equals(object0);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      Complex complex2 = new Complex((-3961.4181393377), (-3961.4181393377));
      complex1.reciprocal();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.0014293892323600308);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex4.conjugate();
      complex5.sinh();
      complex6.asin();
      Complex complex7 = complex1.tan();
      complex1.isNaN();
      complex2.cos();
      complex4.sqrt();
      complex7.exp();
      Complex complex8 = complex4.createComplex(0.0014293892323600308, (-668.1222030199));
      complex7.isInfinite();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      complex1.getArgument();
      complex1.ZERO.readResolve();
      complex0.getField();
      complex0.readResolve();
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.createComplex(3904.268307, 3904.268307);
      Complex complex3 = complex2.cosh();
      complex3.tanh();
      complex1.getReal();
      complex1.sqrt();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(3120.90878176577, 3486.519588469136);
      Complex complex1 = complex0.reciprocal();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      complex1.INF.abs();
      complex1.getArgument();
      Complex complex2 = new Complex(Double.NaN);
      complex0.getField();
      complex0.readResolve();
      Complex complex3 = complex1.subtract(complex0);
      complex3.NaN.createComplex(3904.268307, 3904.268307);
      Complex complex4 = complex3.cosh();
      complex4.tanh();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals((Object) null);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = (Complex)complex3.ONE.readResolve();
      Complex complex5 = Complex.valueOf(2211.9, 2.0);
      complex5.abs();
      complex4.getArgument();
      complex4.readResolve();
      complex1.getField();
      complex1.readResolve();
      Complex complex6 = complex0.subtract(complex2);
      complex2.createComplex(2211.9, (-4.179048566709334E-9));
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex6.tanh();
      complex7.getReal();
      complex8.divide(71.051891263716);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3486.519588469136, 3486.519588469136);
      complex0.INF.toString();
      complex0.isInfinite();
      Complex complex1 = complex0.multiply(1);
      complex0.toString();
      Complex complex2 = complex1.I.reciprocal();
      complex2.toString();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.multiply((double) 1);
      complex1.getField();
      complex4.isInfinite();
      Complex complex5 = complex3.multiply(1);
      complex3.acos();
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.add((-1034.75460156197));
      complex2.hashCode();
      Complex complex7 = complex0.sin();
      Complex complex8 = Complex.valueOf((double) 1, (-1034.75460156197));
      complex8.cos();
      Complex complex9 = complex5.multiply(complex1);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.tanh();
      complex6.negate();
      complex3.pow(complex7);
      complex2.negate();
      complex11.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.I.createComplex(1.0, 1.0);
      Complex complex3 = complex2.ZERO.multiply(1.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex2.subtract(1.0);
      complex5.add(complex4);
      complex5.hashCode();
      complex2.sin();
      Complex complex6 = complex1.cos();
      complex6.multiply(complex2);
      complex2.tanh();
      complex3.negate();
      Complex complex7 = Complex.ONE;
      complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(297.8243765, 297.8243765);
      Complex complex1 = complex0.divide((-1.0));
      complex1.subtract(1.5346568127351796E-127);
      complex1.add(complex0);
      complex1.hashCode();
      complex1.sin();
      try { 
        complex0.ONE.nthRoot((-762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -762
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.log();
      complex2.ZERO.divide((-1.0));
      Complex complex4 = complex3.subtract((-3070.57445304695));
      Complex complex5 = complex4.INF.add(complex2);
      complex3.ONE.hashCode();
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = complex6.cos();
      complex7.createComplex((-3070.57445304695), Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.cosh();
      complex8.tanh();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = (-2852.5248027545);
      Complex complex0 = new Complex((-2852.5248027545));
      Complex complex1 = complex0.sqrt1z();
      complex0.NaN.acos();
      Complex complex2 = null;
      try { 
        complex1.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals((Object) null);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.log();
      complex3.ONE.readResolve();
      complex3.ONE.hashCode();
      Complex complex4 = complex1.I.pow((-2410.9240892646));
      Complex complex5 = complex4.I.multiply((-2410.9240892646));
      Complex complex6 = complex0.add((-1328.46));
      complex0.INF.divide(complex6);
      Complex complex7 = complex6.NaN.reciprocal();
      complex6.ONE.conjugate();
      Complex.valueOf((-2941.7788953127065), (-2941.7788953127065));
      Complex complex8 = complex6.ZERO.multiply((-2941.7788953127065));
      Complex complex9 = complex1.log();
      complex8.equals("K/");
      Complex complex10 = complex0.sqrt();
      complex6.multiply(1397);
      Complex complex11 = complex10.multiply(1397);
      complex11.NaN.abs();
      complex6.abs();
      complex9.ONE.add(complex5);
      complex8.cosh();
      complex7.exp();
      Complex.valueOf((-347.23678107));
      complex9.tanh();
      complex10.getImaginary();
      Complex.valueOf((-1328.46));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2085.159922422779), (-2085.159922422779));
      complex0.ONE.getArgument();
      Complex complex2 = complex0.I.divide(complex1);
      complex0.ONE.getArgument();
      complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.conjugate();
      complex2.ONE.multiply((-2085.159922422779));
      complex3.ONE.conjugate();
      complex1.toString();
      Complex complex4 = complex3.multiply((-735));
      Complex complex5 = complex4.I.tan();
      complex2.divide(0.0);
      Complex complex6 = complex3.conjugate();
      Complex.valueOf(0.0, 0.0);
      complex6.ONE.readResolve();
      Complex complex7 = complex5.multiply(281);
      complex3.hashCode();
      Complex complex8 = complex1.tanh();
      complex7.equals(complex0);
      Complex complex9 = complex2.subtract(complex8);
      Complex complex10 = complex3.ONE.tanh();
      complex10.INF.tanh();
      complex8.divide(complex9);
      Complex complex11 = complex7.log();
      complex11.acos();
      Complex complex12 = complex8.atan();
      complex0.INF.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex4.createComplex(0.0, (-735));
      complex7.cos();
      complex4.tanh();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-4.060821046423735E-8));
      Complex complex2 = complex1.divide((-4.060821046423735E-8));
      Complex complex3 = complex0.multiply((-3773.0621052));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.ZERO.conjugate();
      complex5.ZERO.add(complex0);
      Complex complex6 = complex0.INF.sinh();
      complex6.ZERO.exp();
      complex6.subtract(0.0);
      complex6.ZERO.abs();
      complex3.getField();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex2.sqrt1z();
      complex9.asin();
      complex6.multiply(complex4);
      complex7.getReal();
      complex8.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.log();
      complex2.conjugate();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.cosh();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.log();
      complex5.toString();
      Complex.valueOf((-869.634), (-869.634));
      complex1.getArgument();
      complex2.asin();
      try { 
        complex4.nthRoot((-1585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,585
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.tanh();
      complex1.I.cos();
      Complex complex3 = complex2.ONE.multiply(3.456595573934475E-209);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = Complex.valueOf(1268.7912859614685, 3.456595573934475E-209);
      Complex.valueOf((-2375.1169669));
      complex1.abs();
      complex1.getReal();
      Complex complex7 = new Complex(1884.89068155425);
      complex7.ZERO.multiply(complex5);
      complex0.equals(complex7);
      Complex complex8 = complex6.sinh();
      complex0.tan();
      complex8.subtract((-2655.0));
      complex4.cos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.multiply(0.0);
      complex1.ZERO.negate();
      Complex complex4 = complex0.exp();
      complex0.NaN.nthRoot(1324);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = Complex.valueOf((-1.0), 0.0);
      complex4.I.nthRoot(1324);
      complex4.getField();
      Complex complex7 = complex0.pow(498.879165);
      complex7.NaN.exp();
      complex0.getArgument();
      complex2.conjugate();
      Complex complex8 = complex0.exp();
      complex8.I.multiply(1.5707963267948966);
      Complex complex9 = complex8.INF.multiply(complex5);
      Complex complex10 = complex0.cosh();
      complex10.getReal();
      complex0.negate();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex6.acos();
      complex3.tanh();
      complex6.multiply(complex12);
      complex11.acos();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3196.2, 1211.429515);
      Complex complex1 = complex0.INF.tan();
      complex1.ONE.getField();
      complex0.equals((Object) null);
      complex0.toString();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.createComplex((-1498.134299309), (-1498.134299309));
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex2.divide((-1498.134299309));
      complex8.isInfinite();
      complex2.pow(complex4);
      complex5.tan();
      complex0.add(0.0);
      Complex complex9 = Complex.valueOf(743.83170626921, 5.5906456251308664E-8);
      Complex complex10 = complex9.subtract(Double.NaN);
      complex10.getArgument();
      complex3.ZERO.sinh();
      Complex complex11 = complex7.ONE.asin();
      complex11.getArgument();
      complex9.ONE.multiply(1178);
      complex7.atan();
      complex6.isInfinite();
      Complex complex12 = Complex.valueOf(743.83170626921);
      complex12.add((-1.1244184344361017E-8));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.cosh();
      complex3.ZERO.cosh();
      Complex complex4 = complex1.ONE.createComplex(0.0, 0.0);
      complex4.add(complex0);
      Complex complex5 = complex3.I.tan();
      complex0.isInfinite();
      Complex complex6 = complex0.createComplex((-1134.2117150896), 0.4537591338157654);
      Complex complex7 = complex6.NaN.subtract((-4.068233003401932E-9));
      Complex complex8 = complex1.divide(complex0);
      complex8.I.nthRoot(1);
      complex8.tan();
      complex3.ONE.createComplex(0.4537591338157654, 0.0);
      Complex complex9 = complex2.atan();
      Complex complex10 = complex9.I.multiply(complex1);
      complex0.equals(complex9);
      Complex complex11 = complex7.I.sin();
      complex11.INF.sqrt1z();
      complex9.multiply((-337));
      Complex complex12 = complex5.pow((-1134.2117150896));
      complex10.equals(complex12);
      Complex complex13 = complex12.exp();
      complex2.hashCode();
      complex7.add(complex1);
      complex4.sin();
      Complex.valueOf((-4339.68205054653), (-4.820065619207094E-9));
      complex5.abs();
      try { 
        complex13.nthRoot((-818));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -818
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex2.I.divide(1838.847521492);
      Complex complex6 = complex0.divide(complex2);
      complex1.nthRoot(877);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex5.exp();
      Complex complex12 = complex0.ZERO.sqrt();
      complex12.INF.multiply((-2521));
      complex0.ZERO.subtract((double) 877);
      complex6.atan();
      complex0.ONE.hashCode();
      Complex complex13 = complex11.tanh();
      complex8.INF.tan();
      complex6.exp();
      Complex complex14 = complex0.subtract(1838.847521492);
      complex7.log();
      complex14.sqrt();
      complex4.pow((double) 877);
      complex6.negate();
      complex8.divide(complex7);
      complex6.sin();
      complex10.isNaN();
      complex4.isNaN();
      Complex complex15 = Complex.NaN;
      complex3.divide(complex15);
      complex13.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-792.17725385));
      complex0.nthRoot(1428);
      Complex complex2 = complex0.INF.sqrt();
      complex2.NaN.hashCode();
      complex1.pow(complex2);
      complex0.getReal();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1678);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex2.ONE.reciprocal();
      complex4.I.conjugate();
      complex3.NaN.cosh();
      Complex complex5 = complex2.NaN.divide(0.0);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.NaN.sqrt();
      complex6.INF.hashCode();
      Complex complex8 = complex5.I.sqrt1z();
      Complex complex9 = complex6.I.createComplex(0.0, (-1470.8025));
      Complex complex10 = complex9.pow((double) 1678);
      complex10.readResolve();
      Complex complex11 = Complex.valueOf(1.601222826656464E-7);
      complex11.NaN.sin();
      complex3.equals(complex5);
      complex0.hashCode();
      complex1.readResolve();
      complex5.asin();
      complex8.getArgument();
      complex7.getImaginary();
      Complex complex12 = Complex.valueOf(4516.046692295231, 1.601222826656464E-7);
      complex12.ONE.readResolve();
      Complex complex13 = complex7.subtract(complex12);
      Complex complex14 = complex13.I.sqrt();
      complex14.hashCode();
      complex7.conjugate();
      complex3.toString();
      complex2.asin();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-2947.091960440076));
      Complex complex2 = complex0.NaN.sinh();
      complex2.ONE.sin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      complex3.equals(complex4);
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.ZERO.asin();
      complex6.I.getField();
      complex1.getArgument();
      Complex complex7 = complex4.add(20.0);
      Complex complex8 = complex7.cosh();
      complex3.getField();
      complex1.conjugate();
      Complex complex9 = complex4.multiply((-1.5707963267948966));
      complex7.getReal();
      complex9.abs();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-227.34));
      complex0.INF.sqrt1z();
      Complex complex1 = Complex.ONE;
      complex0.pow(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.tanh();
      complex2.ONE.sqrt1z();
      Complex complex4 = complex3.cosh();
      complex4.abs();
      Complex complex5 = complex1.pow(1.0);
      complex5.ZERO.add(1.0);
      Complex complex6 = complex1.sqrt1z();
      complex1.sin();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex2.acos();
      complex8.multiply(846);
      complex8.I.divide(complex6);
      complex3.acos();
      Complex.valueOf(2067.2939569285, (-227.34));
      Complex complex9 = complex7.acos();
      Complex complex10 = complex0.subtract(Double.NaN);
      complex10.createComplex(1.0, (-227.34));
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      complex1.ZERO.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.divide(6.283185307179586);
      Complex complex5 = new Complex(1043.0, 1043.0);
      complex5.cos();
      complex4.ONE.divide(complex5);
      complex4.I.sinh();
      Complex complex6 = complex0.ZERO.cos();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex2.ZERO.subtract(complex0);
      complex2.INF.divide(0.0);
      Complex complex9 = complex2.ONE.subtract(20.0);
      Complex complex10 = complex0.add(complex2);
      complex10.ZERO.negate();
      complex10.ONE.cos();
      complex2.equals(complex10);
      Complex complex11 = Complex.valueOf((-34.30409));
      complex11.INF.multiply(complex10);
      complex9.getImaginary();
      complex10.divide(20.0);
      complex8.getField();
      complex5.cosh();
      complex3.negate();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double double0 = 2587.926053954;
      Complex complex0 = Complex.valueOf(2587.926053954);
      Complex complex1 = complex0.sinh();
      complex1.I.conjugate();
      Complex complex2 = complex0.INF.negate();
      Complex.valueOf(2587.926053954, (-4245.3008454966));
      complex0.ONE.exp();
      complex2.INF.add((-1824.83752176));
      Complex complex3 = complex2.subtract(1.3608995799112174E108);
      complex2.INF.getField();
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.619685356326533E-10, 9.619685356326533E-10);
      Complex complex1 = complex0.INF.add(9.619685356326533E-10);
      complex0.NaN.getArgument();
      Complex complex2 = Complex.valueOf((-3210.169410562935));
      complex1.ONE.abs();
      complex0.isInfinite();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.log();
      complex2.ZERO.divide((-1.0));
      Complex complex5 = complex4.subtract((-3070.57445304695));
      Complex complex6 = complex5.INF.add(complex3);
      complex4.ONE.hashCode();
      Complex complex7 = complex5.INF.sin();
      complex7.cos();
      complex7.ONE.multiply(complex1);
      complex4.tanh();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex2.pow(complex8);
      complex9.negate();
      complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.pow(20.0);
      Complex complex2 = complex1.acos();
      complex0.getArgument();
      complex2.readResolve();
      complex1.exp();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.I.tan();
      complex4.INF.getField();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      complex1.getImaginary();
      complex5.readResolve();
      complex5.createComplex(0.3106105327606201, Double.NaN);
      double double0 = 2523.86514719391;
      Complex complex6 = complex2.createComplex(143.39193, 2523.86514719391);
      complex6.ONE.sin();
      Complex complex7 = complex6.subtract(complex5);
      complex7.abs();
      Complex complex8 = complex6.divide(complex3);
      try { 
        complex8.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(7.321238022013781E-8);
      Complex complex1 = new Complex(7.321238022013781E-8);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = Complex.valueOf(3.845192807999274E-10, 3.845192807999274E-10);
      Complex complex6 = complex3.add(7.321238022013781E-8);
      complex1.NaN.subtract(complex2);
      Complex complex7 = complex2.cos();
      complex7.getReal();
      complex7.subtract(complex5);
      complex2.negate();
      complex4.hashCode();
      complex6.multiply((-565));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3119.55, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.subtract(complex5);
      complex6.ONE.acos();
      complex4.multiply((-1617.0));
      Complex.valueOf((-1617.0));
      complex2.divide((-1617.0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(297.8243765, 297.8243765);
      complex0.ZERO.reciprocal();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.multiply(0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.createComplex(0, 0.0);
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex0.ONE.tan();
      Complex complex5 = complex1.INF.tanh();
      complex5.INF.hashCode();
      Complex complex6 = complex3.I.createComplex(0, 0);
      complex4.pow((-2671.06363111));
      Complex complex7 = complex1.ZERO.sqrt1z();
      complex7.NaN.divide(complex4);
      complex1.subtract((-4043.1));
      Complex complex8 = complex3.subtract(complex1);
      complex8.INF.log();
      complex6.readResolve();
      complex5.createComplex(0, 0);
      complex7.equals("7?`");
      Complex complex9 = complex4.atan();
      complex5.cos();
      complex8.atan();
      Complex complex10 = complex2.negate();
      complex10.ZERO.readResolve();
      complex2.cosh();
      complex9.add((-1020.817673908701));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex.valueOf(0.0, 0.0);
      complex3.ONE.log();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex1.INF.log();
      complex5.NaN.conjugate();
      Complex complex6 = Complex.valueOf(5138.4958165, (-1614.5207));
      Complex complex7 = complex0.multiply(0.0);
      Complex.valueOf((-1614.5207));
      complex7.I.pow(complex4);
      complex1.ZERO.pow(complex3);
      complex1.toString();
      complex0.ZERO.toString();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.NaN.negate();
      complex0.tan();
      Complex complex10 = Complex.valueOf(2392.93061246595);
      Complex.valueOf(0.0, 5138.4958165);
      complex6.sqrt1z();
      complex9.getField();
      complex5.getReal();
      complex10.toString();
      complex8.pow((-1457.79197381));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1016.4796);
      complex0.I.tanh();
      complex0.ZERO.reciprocal();
      complex0.ZERO.cos();
      Complex complex1 = Complex.valueOf((-1923.8729168274253));
      Complex complex2 = complex1.I.createComplex(1744.0, 181.9);
      Complex complex3 = complex1.NaN.conjugate();
      complex0.isNaN();
      Complex complex4 = complex0.divide(0.0);
      complex0.ZERO.multiply(0);
      complex3.sinh();
      complex4.atan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex5.exp();
      complex7.I.sin();
      complex2.multiply(0);
      complex6.isInfinite();
      complex1.multiply(181.9);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.nthRoot(9);
      Complex complex1 = complex0.ONE.tanh();
      complex1.I.toString();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.multiply(complex2);
      complex3.ZERO.getArgument();
      Complex complex5 = complex2.NaN.createComplex(0.0, 0.0);
      complex4.NaN.nthRoot(9);
      Complex complex6 = Complex.valueOf(4.983162653734032E-222);
      complex6.NaN.asin();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex7.divide(4.983162653734032E-222);
      complex8.INF.getField();
      complex0.sinh();
      complex2.INF.sinh();
      complex7.ONE.sqrt1z();
      complex8.I.readResolve();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex9.tan();
      complex10.I.sinh();
      complex8.I.add(0.0);
      complex0.asin();
      complex0.ONE.pow(complex7);
      complex8.isNaN();
      complex0.toString();
      complex2.multiply(9);
      Complex complex11 = complex5.tanh();
      complex11.ONE.multiply(9);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.ONE.multiply(1);
      Complex complex4 = complex3.NaN.pow(complex0);
      complex4.INF.conjugate();
      complex0.equals(object0);
      complex0.getReal();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.conjugate();
      complex6.getField();
      Complex complex7 = complex5.atan();
      complex6.readResolve();
      complex3.hashCode();
      complex1.getImaginary();
      complex4.atan();
      complex7.hashCode();
      complex0.getArgument();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3486.519588469136, 3486.519588469136);
      complex0.INF.toString();
      complex0.isInfinite();
      Complex complex1 = complex0.multiply(1);
      complex0.toString();
      Complex complex2 = complex1.I.reciprocal();
      complex2.toString();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.multiply((double) 1);
      complex1.getField();
      complex4.isInfinite();
      Complex complex5 = complex3.multiply(1);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex5.NaN.sqrt1z();
      complex7.add((-1034.75460156197));
      complex2.multiply(1);
      complex6.isNaN();
      complex0.I.multiply(complex3);
      complex2.pow(complex5);
      complex3.cosh();
      complex0.asin();
      complex1.getReal();
      complex2.sqrt1z();
      Complex complex8 = complex3.log();
      complex0.acos();
      complex8.acos();
      complex0.equals(complex2);
      complex5.add(0.0);
      complex5.multiply(3486.519588469136);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getField();
      Complex complex1 = complex0.multiply(23);
      Complex complex2 = complex1.tanh();
      complex2.I.add(complex0);
      Complex complex3 = complex1.multiply(complex2);
      complex3.I.atan();
      complex1.isInfinite();
      complex1.subtract((double) 23);
      complex2.ZERO.sqrt();
      complex3.createComplex(23, 1396.8320968880462);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double double0 = 1684.77;
      Complex complex0 = new Complex(1684.77, 1684.77);
      Complex complex1 = complex0.multiply(1.7244737148284912);
      complex1.I.sqrt1z();
      complex1.NaN.reciprocal();
      Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.reciprocal();
      complex2.ONE.log();
      complex2.INF.acos();
      complex2.NaN.sin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.subtract(complex0);
      complex3.isNaN();
      Complex complex5 = complex4.sqrt1z();
      complex0.equals(complex4);
      complex5.cos();
      int int0 = 0;
      Complex complex6 = complex5.multiply(0);
      Complex complex7 = complex6.NaN.cosh();
      try { 
        complex7.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(424.922556262, (-1210.07577328156));
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex2.INF.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      complex4.INF.divide(complex5);
      Complex complex6 = complex2.INF.tan();
      complex1.add(complex2);
      complex1.subtract(1103.2635162);
      complex3.nthRoot(855);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.asin();
      complex2.ONE.add(complex1);
      complex2.INF.nthRoot(1239);
      complex2.I.divide(complex1);
      complex0.hashCode();
      complex1.nthRoot(3105);
      Complex complex3 = complex0.add(240.91);
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow((-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex1.ZERO.acos();
      complex3.toString();
      complex3.INF.toString();
      Complex complex4 = complex0.createComplex((-1329.0), (-2949.895566));
      complex4.tanh();
      Complex complex5 = complex1.atan();
      complex5.I.negate();
      complex0.toString();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(9.544642884951585E-145);
      Complex complex1 = complex0.ONE.add(9.544642884951585E-145);
      complex0.ONE.multiply(9.544642884951585E-145);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.pow(1.4166246290402286E-7);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.9999530231592141, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.NaN.multiply(complex0);
      complex4.ZERO.asin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex7.NaN.pow(complex1);
      complex8.ONE.sqrt();
      complex7.I.conjugate();
      Complex complex9 = complex7.subtract(9.544642884951585E-145);
      Complex complex10 = complex9.NaN.pow(20.0);
      complex6.isInfinite();
      Complex complex11 = complex6.cosh();
      complex11.I.multiply((-863.766238201));
      Complex complex12 = complex7.cos();
      complex12.INF.cosh();
      Complex complex13 = complex5.pow((-20.0));
      complex13.I.hashCode();
      Complex complex14 = complex11.multiply(complex7);
      Complex complex15 = complex10.sinh();
      assertEquals((-9.544642884951585E-145), complex9.getReal(), 0.01);
      assertSame(complex10, complex14);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertNotSame(complex10, complex13);
      
      Complex complex16 = complex12.conjugate();
      assertTrue(complex16.equals((Object)complex1));
      assertEquals(0.0, complex16.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex1.add(0.0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.sin();
      assertSame(complex5, complex2);
      
      Complex complex6 = complex3.ZERO.multiply(1438);
      Complex complex7 = complex3.I.multiply(complex1);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex6.cos();
      Object object0 = new Object();
      complex8.equals(object0);
      complex10.hashCode();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex1.divide(complex9);
      assertFalse(complex11.equals((Object)complex6));
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex9.negate();
      assertEquals(-0.0, complex12.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex10));
      assertTrue(complex9.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      double double0 = complex1.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      complex1.getArgument();
      complex1.ZERO.readResolve();
      complex0.getField();
      Complex complex2 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.subtract(complex0);
      complex3.NaN.createComplex(3904.268307, 3904.268307);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.tanh();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-0.39367939279923997), complex5.getReal(), 0.01);
      
      double double1 = complex1.getReal();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(-0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-708.2420556143952));
      boolean boolean0 = complex1.isInfinite();
      assertSame(complex1, complex0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(660.71934, Double.NaN);
      Complex complex2 = complex0.ONE.multiply((-48));
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-48.0), complex2.getReal(), 0.01);
      
      complex0.getArgument();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.ONE.tan();
      assertEquals(1.557407724654902, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      double double0 = complex4.abs();
      assertTrue(complex4.equals((Object)complex1));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf(1.9464664459228516);
      assertEquals(1.9464664459228516, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1662.926885);
      Complex complex2 = new Complex(1662.926885);
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = complex7.INF.pow(complex2);
      assertEquals(1661.4333521481278, complex7.getReal(), 0.01);
      
      Complex complex9 = complex1.ONE.sqrt();
      Complex complex10 = complex9.ONE.acos();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      complex0.getArgument();
      Complex complex11 = complex1.conjugate();
      complex11.I.subtract(4.8838973948592766E-8);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      List<Complex> list0 = complex3.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex12 = complex1.reciprocal();
      Complex.valueOf(0.0, 0.0);
      Complex complex13 = complex0.reciprocal();
      assertTrue(complex13.equals((Object)complex9));
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      complex5.createComplex(1, 0.0);
      assertTrue(complex4.equals((Object)complex8));
      assertNotSame(complex4, complex8);
      
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex14.equals((Object)complex12));
  }
}
