/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:53:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex4.ONE.conjugate();
      complex5.I.sin();
      Complex complex6 = complex0.multiply(3274);
      Complex complex7 = complex6.sqrt();
      complex7.subtract(complex5);
      complex5.NaN.exp();
      Complex complex8 = complex2.add(complex7);
      complex3.readResolve();
      complex5.conjugate();
      complex1.divide(complex7);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf((-2264.105347424781), 2395.04000757169);
      complex3.cos();
      complex2.exp();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.sqrt();
      complex3.subtract(447.1297625467845);
      Complex complex6 = Complex.ZERO;
      complex5.multiply(complex4);
      complex1.add(447.1297625467845);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(2231.7407150035, 20.0);
      complex0.tan();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(123.6919, 2231.7407150035);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.634051826192439E-33), (-5.634051826192439E-33));
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-720.88786427402), (-720.88786427402));
      Complex complex2 = new Complex(2.782159649779516, (-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5707963267948966), 1.418513298034668);
      Complex complex1 = complex0.ZERO.subtract((-1.5707963267948966));
      Complex complex2 = complex0.INF.reciprocal();
      complex2.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex4.log();
      complex5.ONE.getArgument();
      complex4.NaN.subtract(complex3);
      complex3.INF.readResolve();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.negate();
      complex0.cosh();
      Complex complex8 = complex2.subtract(complex1);
      complex8.asin();
      complex2.NaN.pow((-20.0));
      Complex complex9 = Complex.valueOf(2.414213562373095, 2.414213562373095);
      complex9.INF.subtract(complex6);
      Complex complex10 = complex6.sin();
      complex10.sqrt1z();
      Complex.valueOf((-1.5707963267948966), 5.679855838941285E-8);
      Complex complex11 = complex8.sin();
      complex11.NaN.divide(Double.NaN);
      complex7.add((-1.5707963267948966));
      complex4.tan();
      complex7.log();
      complex5.sqrt();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(46, Double.NaN);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.NaN.pow(8.272789154649277E-4);
      Complex complex4 = complex2.NaN.subtract(2299717.977508895);
      Complex complex5 = complex1.multiply(38);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.I.conjugate();
      complex6.ONE.subtract(complex3);
      complex7.reciprocal();
      Complex complex8 = complex1.divide(8.272789154649277E-4);
      complex2.toString();
      Complex complex9 = complex8.atan();
      complex9.ONE.add(8.272789154649277E-4);
      Complex complex10 = complex1.sin();
      complex8.NaN.readResolve();
      complex10.NaN.conjugate();
      complex0.tan();
      complex8.conjugate();
      complex1.add(complex6);
      complex3.createComplex(8.272789154649277E-4, 38);
      complex9.sinh();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-5.634051826192439E-33));
      complex1.I.add(Double.NaN);
      complex0.multiply((-238664.37680451863));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2386.68347868), (-2386.68347868));
      complex0.ZERO.acos();
      complex0.createComplex(Double.NaN, 20.0);
      Complex.valueOf((-2072.2850049361), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4.847707604050796));
      Complex complex1 = complex0.sqrt();
      complex0.NaN.tan();
      complex1.NaN.getArgument();
      complex1.ONE.pow((-4.847707604050796));
      complex1.reciprocal();
      Complex.valueOf((-4.847707604050796), (-4.847707604050796));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.68857352518171E-4);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.tan();
      complex1.NaN.getArgument();
      complex1.ONE.pow(9.68857352518171E-4);
      complex1.reciprocal();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
      Complex complex1 = Complex.ONE;
      Complex.valueOf((-20.0));
      Complex complex2 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex2.multiply((-1743.0348857605773));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.066), (-158.066));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.divide((-2886.4120329));
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ONE;
      Complex.valueOf((-20.0));
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-516.0723279488639));
      Complex complex1 = complex0.ONE.tanh();
      complex0.NaN.getArgument();
      complex0.getField();
      complex0.ZERO.multiply(1546);
      Complex complex2 = complex0.subtract(2839.0);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.ZERO.multiply(complex2);
      complex2.toString();
      complex2.asin();
      Complex complex4 = complex2.tanh();
      complex4.NaN.sqrt();
      complex4.NaN.toString();
      complex1.INF.divide((-137.213297967741));
      complex4.asin();
      double double0 = 20.0;
      Complex complex5 = complex0.multiply(20.0);
      complex5.sinh();
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1376254.377290732), 1.0);
      Complex complex1 = complex0.I.log();
      complex0.cos();
      Complex complex2 = complex1.negate();
      complex2.readResolve();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex((-1376254.377290732));
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex((-1376254.377290732), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-516.0723279488639));
      complex0.NaN.getArgument();
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sinh();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.066), 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.I;
      complex4.ZERO.toString();
      complex0.multiply(complex2);
      complex0.acos();
      Complex.valueOf(1269.2085791847974);
      Complex complex5 = complex1.subtract((-631.4462693143419));
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.066), 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.tanh();
      complex3.getImaginary();
      Complex complex4 = Complex.INF;
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-516.0723279488639));
      Complex complex1 = complex0.ONE.tanh();
      complex0.NaN.getArgument();
      complex0.getField();
      complex0.ZERO.multiply(1546);
      Complex complex2 = complex0.subtract(2839.0);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.ZERO.multiply(complex2);
      complex2.toString();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.tanh();
      complex5.NaN.sqrt();
      complex5.NaN.toString();
      complex1.INF.divide((-137.213297967741));
      complex5.asin();
      Complex complex6 = complex0.multiply(20.0);
      Complex complex7 = complex6.sinh();
      complex4.I.pow(6110.23);
      Complex complex8 = complex7.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.INF.multiply(Double.NaN);
      Complex complex11 = complex3.tan();
      complex11.INF.add(complex2);
      Complex complex12 = complex4.sin();
      Complex complex13 = complex12.sin();
      complex13.INF.multiply(20.0);
      complex13.subtract((-2263.39));
      complex13.tan();
      complex3.multiply(192);
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.asin();
      complex1.ONE.pow(complex0);
      complex1.ONE.getField();
      complex1.subtract(complex0);
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.multiply(311.38194007988);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.pow((-769.01006));
      Complex complex5 = complex3.I.add(complex2);
      complex5.ZERO.pow(complex2);
      complex5.ONE.toString();
      complex3.tan();
      Complex complex6 = complex4.asin();
      complex0.divide(311.38194007988);
      complex6.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf((-769.01006), 1.014756202697754);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.212982889489631E176));
      complex0.sqrt1z();
      Object object0 = complex0.readResolve();
      object0.toString();
      complex0.multiply((-2146151346));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1.4513757076459615E88);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.negate();
      complex1.NaN.getArgument();
      complex0.acos();
      Complex.valueOf(20.0);
      complex2.createComplex(1.0, 2068.71023);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.INF.tan();
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-3745.20993);
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.getImaginary();
      Complex complex2 = Complex.INF;
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-5.634051826192439E-33));
      complex0.reciprocal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(complex0);
      complex2.subtract(complex1);
      complex0.sin();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.isInfinite();
      complex3.asin();
      Object object0 = new Object();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-5.634051826192439E-33));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex0.sin();
      complex1.isInfinite();
      Complex complex6 = complex4.asin();
      complex1.multiply((-1740));
      complex6.toString();
      complex5.divide((double) (-1740));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      complex2.tanh();
      Complex complex3 = new Complex(1572.45874401963);
      complex3.getImaginary();
      Complex complex4 = Complex.INF;
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.INF.multiply(1.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex3.INF.multiply(585);
      complex0.INF.atan();
      complex0.divide(1.0);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.NaN.acos();
      complex6.pow(complex4);
      Complex complex7 = complex5.add(312.45161);
      Complex complex8 = complex7.INF.multiply(1.0);
      complex8.getField();
      Complex complex9 = complex0.sin();
      complex9.INF.pow(312.45161);
      complex6.sin();
      Complex complex10 = complex0.multiply(0.27712851762771606);
      complex10.I.add(1.0);
      complex4.acos();
      complex1.negate();
      complex1.pow((-2993.0851));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1376254.377290732), 1.0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.negate();
      complex3.readResolve();
      complex0.tanh();
      Complex complex4 = complex1.conjugate();
      complex2.getArgument();
      Complex complex5 = Complex.valueOf(0.5220900774002075, 0.0);
      complex5.pow((-149.8818));
      Complex complex6 = new Complex((-149.8818));
      complex0.hashCode();
      complex5.getField();
      complex4.sinh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1356.0238027557493, (-3188.701807713));
      Complex.valueOf(346.1817302474, (-3188.701807713));
      Complex complex1 = new Complex(914.8096450236352, 1356.0238027557493);
      Complex complex2 = Complex.ONE;
      complex1.getField();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.tan();
      complex3.getImaginary();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.ZERO;
      complex2.pow(complex0);
      complex5.sqrt();
      complex0.divide(3030.336683571556);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.add(705.4);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.valueOf((-1583.774118170833), (-1478.271861));
      complex4.cos();
      complex0.negate();
      complex0.readResolve();
      Complex complex5 = complex4.tanh();
      complex2.conjugate();
      complex2.getArgument();
      Complex complex6 = complex5.pow((-7.737252533211342E-9));
      Complex complex7 = new Complex(705.4);
      complex3.hashCode();
      complex2.getField();
      complex6.sinh();
      complex2.tan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.340130234613309);
      Complex complex1 = new Complex((-5.730477881659618E-9), (-493.29785498954334));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.ONE;
      complex1.getField();
      Complex complex4 = complex3.sqrt1z();
      complex2.tan();
      complex3.getImaginary();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf(1.340130234613309, 1.340130234613309);
      Complex complex8 = complex7.pow(complex6);
      Complex.valueOf(1.49824857711792, (-3854.1));
      complex4.sqrt();
      Complex complex9 = complex8.negate();
      complex9.sinh();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.INF.nthRoot(7);
      Complex complex2 = complex1.tan();
      complex2.sqrt1z();
      Complex complex3 = complex0.createComplex(7, 7);
      complex0.NaN.readResolve();
      Complex complex4 = Complex.valueOf((-2.9134931730784303E-8));
      Complex complex5 = complex3.I.createComplex(7, (-2.9134931730784303E-8));
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.INF.log();
      complex7.NaN.readResolve();
      complex3.pow(complex2);
      complex2.exp();
      complex4.getReal();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.49824857711792);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ONE.subtract(1.49824857711792);
      Complex complex3 = complex2.ONE.tanh();
      complex1.subtract((-20.0));
      Complex complex4 = complex2.INF.subtract(complex3);
      complex2.subtract(1.49824857711792);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.divide((-2589.1002623));
      complex3.sin();
      Complex complex7 = complex1.tan();
      complex7.equals(complex6);
      Complex complex8 = complex4.conjugate();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1376254.377290732), 1.0);
      Complex complex1 = complex0.ONE.multiply((-1376254.377290732));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.reciprocal();
      complex0.getImaginary();
      complex0.abs();
      complex3.subtract((-645.787202896));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.49824857711792);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(147.0, (-493.29785498954334));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.ONE;
      complex4.getField();
      Complex complex5 = Complex.valueOf((-1173.13911250573));
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.tan();
      complex0.getImaginary();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex1.pow(complex0);
      Complex.valueOf((-3176.0747362), 1219.8176804);
      complex10.sqrt();
      complex4.negate();
      complex3.conjugate();
      complex7.divide(complex1);
      complex1.createComplex((-931.460611311), 1.49824857711792);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.49824857711792);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-493.3207202));
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.ONE.subtract((-493.3207202));
      Complex complex5 = complex4.ONE.tanh();
      complex1.ONE.abs();
      complex3.subtract((-20.0));
      complex4.subtract((-493.3207202));
      Complex complex6 = Complex.I;
      complex6.divide((-2589.1002623));
      complex5.sin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(24982.860356);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf((-1816.1323503699855));
      complex2.sqrt();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.subtract((-1816.1323503699855));
      Complex complex6 = complex5.multiply(420);
      complex4.hashCode();
      complex2.tan();
      complex5.negate();
      complex2.cos();
      Complex complex7 = complex3.negate();
      complex6.readResolve();
      Complex complex8 = complex5.multiply((-5.095229574221907E-8));
      complex1.tanh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.conjugate();
      complex8.getArgument();
      Complex complex11 = new Complex(24982.860356, (-666.5));
      complex11.pow((-1168.48219482449));
      Complex complex12 = new Complex(Double.NaN);
      complex7.hashCode();
      complex4.getField();
      complex6.sinh();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.49824857711792);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-493.29785498954334));
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.ONE.subtract((-493.29785498954334));
      complex4.multiply(420);
      complex1.hashCode();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex3.cos();
      complex4.negate();
      complex6.readResolve();
      complex6.tanh();
      complex6.conjugate();
      complex3.getArgument();
      Complex complex7 = complex4.pow(1952.731);
      Complex complex8 = new Complex(1952.731);
      complex8.hashCode();
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-73.8855));
      Complex complex1 = complex0.tanh();
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf((-73.8855));
      Complex complex3 = complex2.acos();
      complex3.getArgument();
      complex1.toString();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.subtract(Double.NaN);
      complex5.divide((-2883.2727413006555));
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1.4513757076459615E88, 1.4513757076459615E88);
      complex0.tanh();
      complex0.ONE.getArgument();
      complex0.INF.toString();
      complex0.multiply(3.8581732071331E174);
      complex0.nthRoot(1926);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.066), 1.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.ZERO.pow(1.0);
      Complex complex5 = complex3.pow(complex1);
      complex5.pow(1.0);
      complex4.I.atan();
      Complex complex6 = complex3.ONE.multiply(1913);
      complex6.getArgument();
      complex2.ZERO.toString();
      Complex complex7 = complex1.subtract((-158.066));
      Complex complex8 = complex7.sqrt();
      complex8.readResolve();
      complex0.cosh();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex0.pow(complex8);
      Complex.valueOf((-158.066), 328.7428870562512);
      complex1.negate();
      complex0.readResolve();
      complex2.ONE.asin();
      complex1.toString();
      Complex complex11 = complex2.subtract((-158.066));
      Complex complex12 = complex11.NaN.sinh();
      complex2.pow((-272.76375966892));
      complex9.add(complex8);
      complex10.tanh();
      complex7.pow((double) 1913);
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.I.sqrt1z();
      double double0 = 1.0;
      Complex.valueOf(Double.NaN, 1.0);
      complex3.ONE.readResolve();
      complex0.readResolve();
      double double1 = 3054.7451147;
      Complex complex4 = Complex.valueOf(3054.7451147);
      double double2 = (-333.4);
      complex4.ZERO.divide((-333.4));
      complex2.negate();
      try { 
        complex0.ONE.nthRoot((-1551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,551
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 6618, (double) 6618);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.NaN;
      complex1.cos();
      complex2.negate();
      Complex complex3 = complex1.multiply((-264.04202665));
      Complex.valueOf((double) 1);
      Complex.valueOf((double) 1, (double) 1);
      complex3.pow((-1195.4009046805));
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.sinh();
      complex1.I.add(complex2);
      Complex complex4 = complex0.sinh();
      complex3.ZERO.readResolve();
      complex1.equals(complex3);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.49824857711792);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-493.29785498954334));
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.ONE.subtract((-493.29785498954334));
      complex4.multiply(420);
      complex1.hashCode();
      Complex complex5 = complex2.tan();
      complex2.negate();
      Complex complex6 = complex3.cos();
      complex4.negate();
      complex6.readResolve();
      Complex complex7 = complex5.multiply((double) 420);
      complex6.tanh();
      complex7.conjugate();
      complex3.getArgument();
      complex7.pow(1952.731);
      Complex complex8 = new Complex(1952.731);
      complex8.hashCode();
      complex6.getField();
      complex6.sinh();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1356.0238027557493, 1356.0238027557493);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.ONE;
      complex3.getField();
      complex2.NaN.sqrt1z();
      Complex complex4 = complex2.I.tan();
      complex0.multiply(complex3);
      Complex complex5 = complex4.createComplex(1356.0238027557493, 0.0);
      complex5.add((-5.634051826192439E-33));
      Complex complex6 = complex1.exp();
      complex6.ZERO.cos();
      complex6.abs();
      complex1.multiply(0.0);
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-5.634051826192439E-33));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.conjugate();
      complex2.sinh();
      complex0.readResolve();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      Complex complex1 = new Complex((-2694.0));
      complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      complex2.conjugate();
      complex1.abs();
      complex2.hashCode();
      complex1.getField();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-5.634051826192439E-33));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.createComplex(1.0112214979786464E-43, (-5.634051826192439E-33));
      Complex complex4 = Complex.NaN;
      complex4.readResolve();
      Complex complex5 = Complex.valueOf((-5.634051826192439E-33));
      Complex complex6 = complex1.createComplex(5.428761618906106E-8, (-5.634051826192439E-33));
      Complex.valueOf(1.0112214979786464E-43, 0.787956117964731);
      Complex complex7 = complex6.divide(complex1);
      complex0.conjugate();
      complex5.log();
      complex3.getField();
      complex5.pow(complex1);
      complex7.exp();
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1830.48939), (-2.7143806069290897E-8));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-2.7143806069290897E-8), (-2.7143806069290897E-8));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.I.divide(complex4);
      complex1.getReal();
      Complex complex6 = complex3.NaN.asin();
      complex0.abs();
      complex4.hashCode();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ONE.exp();
      complex7.I.multiply(complex3);
      complex8.I.readResolve();
      Complex complex9 = complex4.divide(complex5);
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex10.ONE.pow(1830.48939);
      Complex complex12 = Complex.valueOf(5.221469250951617E173);
      complex2.log();
      complex12.pow(complex11);
      complex5.add(complex0);
      complex8.toString();
      Complex complex13 = complex11.reciprocal();
      complex5.sinh();
      complex9.multiply((-1830.48939));
      complex13.multiply(0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.subtract((-2478.5973));
      Complex complex2 = complex1.I.sqrt1z();
      complex1.ONE.sin();
      Complex complex3 = complex1.INF.multiply(6618);
      complex3.ONE.abs();
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = complex1.createComplex(9.544642884951585E-145, 2.6869297963554945E-8);
      complex1.ZERO.multiply(complex2);
      Complex complex6 = complex5.NaN.atan();
      complex6.INF.asin();
      Complex complex7 = complex4.conjugate();
      complex7.I.abs();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.multiply((-2080));
      complex9.ZERO.hashCode();
      complex1.I.tan();
      Complex complex10 = complex8.NaN.negate();
      Complex complex11 = complex2.cos();
      complex11.negate();
      complex11.readResolve();
      complex2.multiply(9.544642884951585E-145);
      complex8.tanh();
      complex2.conjugate();
      complex10.getArgument();
      complex7.pow(1.0);
      complex3.hashCode();
      complex10.getField();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1411.901, 1411.901);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      complex1.ZERO.abs();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.NaN.add(complex3);
      complex0.ZERO.nthRoot(444);
      complex4.toString();
      Complex complex7 = complex3.INF.tanh();
      Complex.valueOf(0.0);
      Complex complex8 = complex7.sin();
      complex8.I.pow((double) 444);
      Complex complex9 = complex4.tanh();
      complex0.ONE.acos();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex4.multiply(complex10);
      complex11.getField();
      complex11.getField();
      Complex complex12 = complex1.exp();
      complex12.NaN.cosh();
      Complex complex13 = complex5.tanh();
      complex4.NaN.cos();
      complex13.ZERO.divide(0.0);
      complex3.getField();
      complex6.isInfinite();
      complex4.isNaN();
      complex2.atan();
      complex3.atan();
      complex9.conjugate();
      complex6.add(0.0);
      complex9.abs();
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1332.45475936);
      Complex complex1 = complex0.createComplex(1494.86601548, 1494.86601548);
      complex1.sin();
      complex0.equals("CZp3qbq:/Cx");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.86));
      complex0.divide((-1590.86));
      complex0.pow(2739.7458851337724);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = (-1889.54639677);
      Complex complex0 = new Complex((-1889.54639677));
      complex0.INF.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.divide((-1889.54639677));
      complex2.ZERO.asin();
      Complex complex3 = complex0.NaN.divide(complex1);
      complex3.NaN.readResolve();
      int int0 = 1;
      complex3.nthRoot(1);
      Complex complex4 = complex0.conjugate();
      complex4.hashCode();
      complex4.INF.getArgument();
      Complex complex5 = complex4.cosh();
      complex5.pow((-1889.54639677));
      double double1 = 3244.563252;
      try { 
        complex5.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = Complex.valueOf((-718.835246));
      Complex complex4 = complex2.ZERO.divide(complex3);
      complex4.ONE.divide(complex3);
      Complex complex5 = complex2.ZERO.conjugate();
      Complex complex6 = complex5.ONE.multiply(0.0);
      complex2.ONE.getField();
      Complex complex7 = complex0.sin();
      complex7.add(complex1);
      complex4.I.readResolve();
      complex3.ZERO.cos();
      complex7.divide(complex0);
      complex6.getReal();
      complex4.INF.conjugate();
      Complex complex8 = complex7.add(complex4);
      complex8.I.createComplex(0.0, (-100.34603349111441));
      complex8.ONE.multiply(0.0);
      complex3.createComplex(0.0, 0.0);
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.add(complex1);
      complex0.I.sin();
      complex3.NaN.negate();
      Complex complex4 = complex2.ZERO.tanh();
      complex3.ZERO.getArgument();
      complex2.NaN.toString();
      Complex complex5 = complex1.INF.sqrt1z();
      complex1.NaN.log();
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = complex2.I.pow(Double.POSITIVE_INFINITY);
      complex6.ZERO.negate();
      complex0.getImaginary();
      complex2.sqrt1z();
      complex7.reciprocal();
      complex5.sinh();
      complex4.nthRoot(2982);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex3.ONE.cos();
      complex3.I.conjugate();
      complex0.I.tan();
      complex0.hashCode();
      complex0.NaN.abs();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      Complex.valueOf(0.0, 2580.619477715);
      complex0.I.cosh();
      complex5.INF.hashCode();
      Complex complex7 = complex2.sinh();
      complex7.readResolve();
      Complex complex8 = complex2.multiply(complex0);
      Complex complex9 = complex4.createComplex(1850.0, 1850.0);
      complex7.multiply(complex3);
      complex9.ZERO.conjugate();
      complex8.sin();
      Complex complex10 = complex7.atan();
      complex4.divide(1850.0);
      complex10.asin();
      complex0.toString();
      complex6.multiply(1850.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-2.1349396267483754E184), (-2.1349396267483754E184));
      Complex complex1 = complex0.pow((-3357.8634));
      complex0.INF.sqrt();
      complex1.readResolve();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.acos();
      complex3.ONE.multiply((-2.1349396267483754E184));
      complex0.abs();
      complex0.NaN.multiply(complex4);
      complex1.sqrt();
      Complex complex5 = complex3.divide(complex2);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1.4513757076459615E88, 1.4513757076459615E88);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.acos();
      complex2.getArgument();
      complex1.toString();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex2.subtract(1.4513757076459615E88);
      complex5.divide(0.0);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4289.207176969538, (-883.38));
      Complex complex1 = complex0.createComplex(266.43578370825, 4289.207176969538);
      complex1.NaN.exp();
      Complex complex2 = complex0.reciprocal();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.INF.nthRoot(7);
      Complex complex2 = complex0.tan();
      complex2.sqrt1z();
      Complex complex3 = complex0.createComplex(3200.8, 3200.8);
      complex0.NaN.readResolve();
      Complex complex4 = Complex.valueOf((-2.9134931730784303E-8));
      Complex complex5 = complex3.I.createComplex(3200.8, (-2.9134931730784303E-8));
      Complex.valueOf(3200.8, 3200.8);
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.INF.conjugate();
      complex6.INF.log();
      complex3.getField();
      complex7.pow(complex2);
      complex2.exp();
      complex4.getReal();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.pow((-95.45117648153531));
      complex3.cos();
      Complex complex4 = complex1.pow(complex2);
      complex4.NaN.sinh();
      Complex complex5 = complex4.ZERO.pow((-2516.60279351));
      complex4.ONE.add(complex1);
      Complex complex6 = Complex.valueOf((-2516.60279351), (-95.45117648153531));
      complex5.NaN.asin();
      complex2.NaN.multiply((-2516.60279351));
      Complex complex7 = complex4.NaN.exp();
      Complex complex8 = complex4.NaN.cosh();
      complex7.ZERO.nthRoot(1305);
      complex0.getField();
      complex2.add((-95.45117648153531));
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex9.INF.cos();
      complex11.ONE.add(complex5);
      Complex complex12 = complex7.negate();
      complex9.divide((double) 1305);
      Complex complex13 = complex8.exp();
      complex13.ONE.subtract((double) 1305);
      complex12.equals(complex13);
      complex3.getImaginary();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(320.6195716981, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex1.NaN.cos();
      Complex complex3 = complex2.multiply(0.0);
      complex3.I.multiply((-56.016434822));
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.tanh();
      complex5.ONE.abs();
      Complex complex7 = Complex.valueOf(320.6195716981);
      complex7.ZERO.sin();
      complex0.multiply(388.110583377846);
      complex5.getImaginary();
      complex6.tan();
      Complex.valueOf((-1.0));
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-5.634051826192439E-33));
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.sinh();
      Complex complex2 = complex0.conjugate();
      complex2.ONE.abs();
      complex2.hashCode();
      complex1.getField();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add(705.4);
      Complex complex2 = Complex.ONE;
      complex1.ZERO.multiply(complex2);
      Complex complex3 = complex0.I.multiply(705.4);
      complex0.isNaN();
      Complex complex4 = complex3.exp();
      complex4.nthRoot(1344);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = (-228.69898530746);
      Complex complex0 = new Complex((-228.69898530746));
      try { 
        complex0.NaN.nthRoot((-2596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,596
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-73.8855));
      complex0.tanh();
      complex0.getImaginary();
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex1.NaN.exp();
      complex0.toString();
      Complex complex4 = complex0.conjugate();
      complex3.subtract(complex2);
      complex3.I.nthRoot(1);
      complex4.ONE.atan();
      complex4.ZERO.readResolve();
      complex4.INF.add(complex3);
      Complex complex5 = complex0.sqrt();
      complex4.add(complex2);
      complex0.cosh();
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sinh();
      complex0.I.readResolve();
      Complex complex2 = complex0.multiply(1);
      complex0.tan();
      Complex complex3 = complex2.INF.createComplex(0.0, 1450.22989796);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.INF.exp();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex1.exp();
      complex6.isNaN();
      complex3.readResolve();
      complex6.tanh();
      complex1.ONE.readResolve();
      Complex complex8 = complex5.pow(complex7);
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = Complex.valueOf((-1.9256682968755803E-7), 1450.22989796);
      complex10.ZERO.multiply(0);
      Complex complex11 = complex7.conjugate();
      complex11.ZERO.log();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex4.sqrt1z();
      complex13.I.subtract(complex12);
      complex13.I.getArgument();
      complex2.getArgument();
      complex2.acos();
      complex7.createComplex((-1531.0), (-1262.5405089832473));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.INF.add((-2192.0));
      complex3.NaN.createComplex(Double.POSITIVE_INFINITY, (-409.09));
      complex1.I.add(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf((-2192.0));
      Complex complex6 = complex5.INF.atan();
      complex6.ONE.multiply(620);
      Complex complex7 = complex4.pow(complex1);
      complex7.NaN.cos();
      complex5.multiply(3662.940912598);
      Complex complex8 = complex5.createComplex(Double.POSITIVE_INFINITY, 2439.00091148);
      complex8.acos();
      complex8.sqrt1z();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1356.0238027557493, 0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.ONE;
      complex3.getField();
      complex2.NaN.sqrt1z();
      complex2.I.tan();
      complex0.multiply(complex3);
      Complex.valueOf(0.0, 0.0);
      complex2.multiply(1356.0238027557493);
      complex2.nthRoot(9);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1312.3995624459);
      complex0.ONE.abs();
      complex0.INF.readResolve();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.subtract(1312.3995624459);
      complex1.NaN.negate();
      complex0.negate();
      Complex complex3 = complex0.multiply((-1632.5760553));
      complex3.I.abs();
      Complex complex4 = complex2.pow(complex1);
      complex4.ONE.abs();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.ZERO.multiply((-1));
      complex6.INF.sin();
      Complex complex7 = complex0.reciprocal();
      complex7.NaN.readResolve();
      complex7.ONE.sqrt();
      complex1.divide(complex0);
      Complex complex8 = complex0.negate();
      complex8.atan();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6270449161529541, 0.6270449161529541);
      complex0.ZERO.createComplex(0.0, 0.6270449161529541);
      Complex complex1 = complex0.INF.sin();
      complex0.isNaN();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(0.6270449161529541);
      complex3.ONE.subtract(1.9219114780426025);
      complex1.sqrt();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.NaN.subtract(complex0);
      complex3.I.add((-20.0));
      Complex complex4 = Complex.valueOf((-20.0));
      Complex.valueOf(2198.2);
      complex1.isInfinite();
      Complex complex5 = complex1.tanh();
      complex5.INF.add((double) 224);
      complex4.multiply(224);
      Complex complex6 = complex5.divide(2198.2);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.subtract(complex7);
      Complex complex9 = complex8.NaN.createComplex((-1.9546569053899882E-262), (-20.0));
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = complex7.sqrt1z();
      Complex.valueOf(665.0, 294.1282936541909);
      Complex complex12 = complex11.atan();
      complex1.tan();
      Complex complex13 = complex2.asin();
      Complex.valueOf((-20.0), 665.0);
      complex13.NaN.sin();
      complex13.ONE.pow(2198.2);
      complex12.getImaginary();
      complex12.createComplex((-20.0), 0.0);
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.ONE.add(complex2);
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = Complex.valueOf((-452.164345378962));
      complex7.divide(1.799550702470095E-8);
      Complex complex8 = complex0.sin();
      complex0.isNaN();
      complex4.ONE.divide(complex0);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex9.ONE.add((-1216.6));
      complex11.I.cosh();
      complex3.multiply(1);
      Complex complex12 = complex9.subtract((double) 1);
      Complex.valueOf((-1216.6), (double) 1);
      Complex complex13 = complex6.negate();
      complex9.ZERO.add(complex13);
      complex12.multiply(283.79897959756624);
      complex11.exp();
      complex10.sin();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.9872713979884691E43));
      Complex complex1 = complex0.cosh();
      complex1.acos();
      complex1.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.divide((-20.0));
      complex0.getReal();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex4.I.subtract((-1.0));
      Complex complex6 = complex5.add((-857.1049896));
      complex4.getField();
      complex0.NaN.sin();
      complex2.nthRoot(1643);
      complex5.nthRoot(1643);
      Complex complex7 = complex5.acos();
      complex7.NaN.add((-1.9872713979884691E43));
      Complex complex8 = complex7.log();
      complex8.ZERO.pow((-689.069566601585));
      complex0.pow(complex3);
      complex5.getReal();
      Complex complex9 = complex0.subtract(complex3);
      complex9.negate();
      Complex complex10 = complex9.add(complex5);
      complex2.getArgument();
      complex10.getField();
      complex3.abs();
      complex6.divide(complex0);
      complex5.subtract(4925.71240206023);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = Complex.INF;
      complex1.INF.multiply(complex0);
      Complex complex2 = complex1.ONE.multiply(1.0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.log();
      complex1.getArgument();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.add(complex4);
      complex5.ZERO.negate();
      complex3.ONE.multiply(complex0);
      complex0.atan();
      complex3.getArgument();
      Complex complex7 = complex0.subtract(1.0);
      complex7.ONE.log();
      complex1.cosh();
      complex5.negate();
      complex0.pow(Double.NaN);
      complex5.cosh();
      complex0.pow(Double.NaN);
      complex0.createComplex(1.0, 0.7853981633974483);
      Complex complex8 = complex4.negate();
      complex5.sinh();
      complex0.readResolve();
      Complex.valueOf(0.7853981633974483, 0.0);
      complex8.pow(complex7);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.reciprocal();
      complex2.NaN.abs();
      Complex.valueOf(6.283185307179586);
      complex3.ZERO.pow(complex1);
      complex2.I.conjugate();
      complex2.getImaginary();
      Complex complex4 = complex3.divide((-4190.931953926368));
      complex4.getReal();
      complex0.add(Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
      Complex complex5 = complex0.exp();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(57.86569293202);
      Complex complex1 = complex0.NaN.subtract(1911.888);
      complex1.NaN.abs();
      complex0.abs();
      Complex complex2 = Complex.valueOf(57.86569293202, 0.0);
      Complex complex3 = complex2.ZERO.createComplex(57.86569293202, 57.86569293202);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex4.ONE.reciprocal();
      Complex complex7 = complex5.subtract(complex0);
      complex7.NaN.cosh();
      Complex complex8 = complex3.NaN.divide(complex7);
      complex7.cosh();
      Complex complex9 = complex4.pow(complex0);
      Complex complex10 = complex9.INF.cosh();
      complex10.ZERO.sqrt1z();
      complex4.getField();
      complex9.getReal();
      complex2.INF.getField();
      Complex complex11 = complex5.sin();
      complex3.divide(complex11);
      complex8.getField();
      complex5.sqrt1z();
      complex4.atan();
      complex3.cos();
      complex6.multiply((-19.774995666));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(2298.8438862, 2325.5651);
      Complex complex1 = complex0.ZERO.exp();
      complex0.isNaN();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.multiply(2298.8438862);
      complex3.ONE.getArgument();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.divide(Double.NaN);
      complex1.multiply((-3159.0));
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex1.ZERO.sin();
      complex6.NaN.readResolve();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex8.I.tan();
      Complex.valueOf((-3159.0), Double.NaN);
      complex9.INF.pow(complex8);
      complex7.abs();
      complex8.ZERO.cos();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex4.subtract(complex1);
      complex4.hashCode();
      Complex complex12 = complex5.subtract(complex10);
      complex11.isNaN();
      complex2.reciprocal();
      complex10.exp();
      Complex complex13 = complex12.subtract(complex2);
      complex13.cosh();
      complex11.log();
      complex13.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1537.8778511204), (-855.996));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = null;
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.cosh();
      complex2.INF.tan();
      complex1.I.sqrt();
      Complex complex3 = complex1.createComplex(0.0, 731.496);
      complex0.ONE.asin();
      Complex complex4 = complex0.subtract(200.944);
      Complex complex5 = Complex.valueOf((-1165.0));
      Complex complex6 = complex0.divide(complex4);
      complex0.negate();
      Complex complex7 = complex6.I.tanh();
      complex6.INF.abs();
      complex4.INF.add(complex0);
      Complex complex8 = complex6.log();
      complex8.cosh();
      Complex complex9 = complex2.INF.cos();
      complex5.createComplex(731.496, 0.0);
      complex8.add(complex2);
      complex7.pow(complex3);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.tan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.sqrt1z();
      complex2.NaN.readResolve();
      complex2.NaN.getField();
      List<Complex> list0 = complex0.nthRoot(2209);
      assertTrue(list0.contains(complex0));
      assertEquals(2209, list0.size());
      
      Complex complex3 = complex2.subtract((-1492.3122701));
      assertEquals(1493.3122701, complex3.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(2.5243410574836706E106, 20.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.exp();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      complex0.subtract(complex1);
      Complex complex3 = complex0.sin();
      complex3.isNaN();
      Complex complex4 = complex3.asin();
      assertEquals((-20.0), complex4.getImaginary(), 0.01);
      assertEquals((-1.210182827975412), complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.multiply((-4171));
      assertEquals((-1.052902655076439E110), complex5.getReal(), 0.01);
      assertEquals((-83420.0), complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-767.3428365734), 0.0);
      String string0 = complex0.toString();
      assertEquals("(-767.3428365734, 0.0)", string0);
      
      complex0.getField();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.I.add(0.0);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.I.log();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex4.getImaginary(), 0.01);
      
      complex3.NaN.getField();
      assertEquals((-767.3428365734), complex3.getReal(), 0.01);
      
      Complex complex5 = complex1.subtract((-767.3428365734));
      Complex complex6 = complex5.I.cos();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex6.getReal(), 0.01);
      
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.add(complex7);
      complex1.createComplex((-895.1475721), 0.0);
      double double0 = complex7.getReal();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex9 = complex8.negate();
      assertFalse(complex9.equals((Object)complex2));
      assertSame(complex9, complex5);
      assertFalse(complex7.isInfinite());
      assertSame(complex8, complex1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-960.13218), (-590.24));
      Complex complex1 = complex0.NaN.pow((-960.13218));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-590.24), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-960.13218), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tan();
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.isNaN());
      
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = (Complex)complex3.ZERO.readResolve();
      assertFalse(complex5.equals((Object)complex3));
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      boolean boolean0 = complex1.equals(complex3);
      assertFalse(complex3.isInfinite());
      assertEquals(1.557407724654902, complex1.getImaginary(), 0.01);
      assertEquals(0.9999103740052037, complex3.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex4));
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.49824857711792);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-493.3207202));
      Complex complex3 = complex2.I.sqrt();
      complex3.ONE.subtract((-493.3207202));
      assertEquals(0.7071067811865475, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, 1732.845258689568);
      Complex complex6 = complex5.add(1732.845258689568);
      assertTrue(complex6.equals((Object)complex5));
      
      Complex complex7 = complex4.exp();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      double double0 = complex1.abs();
      assertEquals(1.2240296471564405, complex1.getReal(), 0.01);
      assertEquals(1.2240296471564405, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(4472.845392, 4472.845392);
      assertEquals(4472.845392, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = (Complex)complex2.ZERO.readResolve();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      
      Complex complex6 = complex2.tanh();
      boolean boolean0 = complex4.equals(complex6);
      assertFalse(complex4.equals((Object)complex5));
      assertSame(complex6, complex3);
      assertTrue(boolean0);
  }
}
