/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:00:40 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1273.0), Double.POSITIVE_INFINITY);
      complex1.multiply(285);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3480763914637323E214, 3577.020905);
      complex0.I.multiply(3577.020905);
      complex0.divide(1.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544), (-385.11279512544));
      Complex complex1 = Complex.valueOf((-4.678851323661228E8), (-4.678851323661228E8));
      Complex complex2 = Complex.valueOf((-385.11279512544), (-4.678851323661228E8));
      complex2.nthRoot(388);
      Complex complex3 = new Complex(388);
      Complex complex4 = Complex.I;
      complex0.multiply(complex2);
      complex3.multiply(complex2);
      Complex complex5 = complex1.createComplex(1026.1021711886, 388);
      complex5.log();
      Complex complex6 = Complex.NaN;
      complex6.NaN.add((double) 388);
      complex2.acos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-385.113), (-385.113));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.divide(complex1);
      complex1.nthRoot(970);
      complex0.multiply(37);
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.asin();
      complex0.getField();
      Complex complex1 = Complex.valueOf(1.4467008292760518E12);
      Complex complex2 = complex1.multiply(968);
      complex2.readResolve();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex2.reciprocal();
      complex2.nthRoot(968);
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.ONE.add(complex7);
      complex8.ZERO.sqrt();
      complex0.negate();
      complex3.toString();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex0.pow(complex5);
      complex10.ONE.cosh();
      try { 
        complex9.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.2164316177368164, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = new Complex((-1411.21496631404), (-1411.21496631404));
      Complex complex3 = complex1.NaN.divide(complex2);
      complex0.readResolve();
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex4.multiply(complex1);
      complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.multiply(1);
      Complex complex6 = complex5.multiply((-312));
      complex6.INF.cos();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.pow(2.3810978455418157);
      Complex complex1 = complex0.NaN.subtract((-1.0));
      complex1.NaN.abs();
      complex1.nthRoot(445);
      Complex complex2 = complex0.reciprocal();
      complex0.readResolve();
      complex1.getField();
      Complex complex3 = complex2.pow(complex0);
      complex3.ZERO.sqrt();
      Complex complex4 = complex2.cos();
      complex4.ZERO.cos();
      Complex complex5 = complex0.tan();
      complex2.readResolve();
      complex4.nthRoot(445);
      Complex complex6 = complex5.pow(3683.7393228823);
      Complex complex7 = complex0.I.subtract(complex6);
      complex4.ZERO.sqrt1z();
      complex7.ZERO.toString();
      complex6.ZERO.tanh();
      Complex complex8 = complex2.sqrt();
      complex8.abs();
      complex1.sinh();
      complex5.divide(0.9999985339661713);
      Complex complex9 = new Complex(2013.03, 3683.7393228823);
      complex9.ZERO.readResolve();
      complex1.pow(complex9);
      complex5.subtract(940.2724);
      complex4.negate();
      complex8.divide((-406.0));
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1896.48059, 20.0);
      complex0.divide(523.949573);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = Complex.ONE;
      complex1.getField();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = new Complex((-20.0), (-20.0));
      Complex complex4 = complex3.divide((-1774.055667928692));
      complex3.tan();
      Complex complex5 = Complex.ONE;
      complex5.log();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply((-261.626948));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544), (-385.11279512544));
      Complex complex1 = complex0.exp();
      complex1.getField();
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(0.3743882179260254, 0.3743882179260254);
      Complex complex4 = Complex.valueOf((-385.11279512544));
      complex4.subtract(complex1);
      complex1.getArgument();
      Complex complex5 = Complex.valueOf(4136.051, 4136.051);
      complex5.exp();
      Complex complex6 = complex4.cosh();
      Complex complex7 = Complex.valueOf((-28.158));
      complex7.add((-1.8384913874852409));
      Complex complex8 = Complex.INF;
      Complex complex9 = new Complex(386.11279512544);
      complex9.asin();
      Complex complex10 = new Complex(20.0);
      complex10.tanh();
      Complex complex11 = Complex.ZERO;
      complex6.divide(complex2);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544), (-385.11279512544));
      Complex complex1 = complex0.exp();
      complex1.getField();
      Complex complex2 = complex0.pow((-385.11279512544));
      Complex complex3 = new Complex((-385.11279512544), (-385.11279512544));
      Complex complex4 = complex3.divide(0.2674594521522522);
      complex1.tan();
      Complex complex5 = complex4.atan();
      complex5.sqrt1z();
      complex0.abs();
      Complex.valueOf(285599.5287865717);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sqrt1z();
      complex2.sqrt1z();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.pow(544.6317379098085);
      Complex complex10 = new Complex((-385.11279512544));
      Complex complex11 = Complex.ZERO;
      complex11.divide(1809.0);
      complex9.hashCode();
      complex2.getArgument();
      complex1.getReal();
      complex7.log();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(8.426174035728768E257);
      Complex complex2 = new Complex(8.426174035728768E257, 0.019467879334365792);
      Complex complex3 = complex2.divide(0.019467879334365792);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex2.sqrt1z();
      complex0.abs();
      complex1.pow((-1120.057994269367));
      complex4.atan();
      complex4.divide((-586.1670933423));
      complex6.hashCode();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.NaN;
      complex8.getReal();
      complex5.log();
      Complex complex9 = new Complex((-1120.057994269367));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = (Complex)complex1.readResolve();
      complex1.abs();
      Complex complex5 = complex0.conjugate();
      complex5.I.abs();
      Complex complex6 = complex2.sqrt1z();
      complex2.getImaginary();
      Complex complex7 = complex0.cos();
      complex7.ONE.multiply(Double.NaN);
      complex7.tan();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex6.multiply(complex3);
      Complex complex10 = complex9.tan();
      complex9.getArgument();
      Complex.valueOf(1.0, Double.NaN);
      complex4.tanh();
      complex8.multiply(complex7);
      complex6.getReal();
      complex7.acos();
      complex1.abs();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.add((-0.104));
      complex2.sqrt();
      complex1.getField();
      complex1.atan();
      complex3.getArgument();
      Complex.valueOf((-20.0), 1.736302375793457);
      complex2.exp();
      Complex complex4 = complex3.cosh();
      complex4.add(246.85645892);
      Complex complex5 = Complex.INF;
      complex2.asin();
      Complex complex6 = Complex.valueOf((-20.0));
      complex6.tanh();
      Complex complex7 = Complex.ZERO;
      complex7.divide(complex5);
      Complex.valueOf((-20.0), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544), (-385.11279512544));
      Complex complex1 = complex0.exp();
      complex1.getField();
      complex0.pow(0.3743882179260254);
      Complex complex2 = new Complex((-1846.3017881802882), (-1846.3017881802882));
      complex1.divide((-1.8842098029339485E-137));
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf((-385.11279512544));
      Complex complex5 = complex4.atan();
      complex1.sqrt1z();
      complex3.abs();
      Complex complex6 = complex0.pow(1.0);
      complex3.atan();
      complex5.divide(0.9999865149931503);
      complex5.hashCode();
      Complex complex7 = Complex.INF;
      complex6.getReal();
      complex2.log();
      Complex complex8 = new Complex(859.754031408);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-385.112795), (-385.112795));
      Complex complex1 = complex0.exp();
      complex1.getField();
      Complex complex2 = complex0.pow(0.3743882179260254);
      Complex complex3 = new Complex((-586.1670933423), 0.3743882179260254);
      Complex complex4 = complex2.divide(0.9974067265103987);
      Complex complex5 = complex4.tan();
      complex0.atan();
      Complex complex6 = complex5.sqrt1z();
      complex6.NaN.abs();
      complex1.sqrt1z();
      complex3.pow((-586.1670933423));
      complex4.atan();
      complex2.divide((-1990.114044499));
      complex0.hashCode();
      complex1.getReal();
      Complex.valueOf(Double.NaN);
      Complex complex7 = new Complex((-385.112795));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1135.6564795489), (-1135.6564795489));
      Complex complex2 = complex1.reciprocal();
      complex0.createComplex((-1709.4552), (-1135.6564795489));
      complex0.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.cosh();
      complex3.subtract(complex1);
      complex2.getArgument();
      Complex complex6 = Complex.valueOf(223.51526120107, 1784.872157404);
      Complex complex7 = complex6.exp();
      complex6.cosh();
      Complex complex8 = Complex.NaN;
      complex4.add(2.0);
      complex7.asin();
      Complex complex9 = new Complex(223.51526120107);
      Complex complex10 = Complex.ZERO;
      Complex.valueOf(140.973146960203);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex5.divide(complex11);
      complex12.sqrt1z();
      Complex complex13 = Complex.ONE;
      complex1.tanh();
      complex9.hashCode();
      Complex.valueOf(7726171.589985001, 1278.7431216802);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.sinh();
      complex2.reciprocal();
      Complex.valueOf(2123.208, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-5388.18434319759), 4.0602519915844854E-4);
      Complex complex1 = complex0.exp();
      complex0.getField();
      Complex complex2 = complex0.pow((-5388.18434319759));
      Complex complex3 = new Complex((-786.5), (-385.11279512544));
      complex3.divide(0.9974067265103987);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex8.abs();
      Complex complex9 = Complex.valueOf(0.9974067265103987, (-385.11279512544));
      complex9.sqrt1z();
      complex6.pow((-331.45235));
      Complex complex10 = complex8.atan();
      complex10.I.cos();
      Complex complex11 = complex8.divide((-2568.59370622));
      complex0.hashCode();
      complex5.getReal();
      complex4.log();
      complex1.abs();
      complex1.sqrt();
      Complex complex12 = complex11.acos();
      Complex complex13 = Complex.ZERO;
      Complex.valueOf(1317.7751172632964);
      complex12.reciprocal();
      complex7.pow((-1556.85795290799));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1120.057994269367));
      complex0.tan();
      complex0.ZERO.sqrt();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.multiply(complex1);
      complex1.createComplex(1.0, (-4725.913278947475));
      Complex complex4 = Complex.valueOf(152.32841858, 2039.09414);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex6.subtract(complex3);
      complex3.getArgument();
      Complex complex9 = Complex.valueOf((-598.4012), 226.5173989);
      complex5.exp();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.NaN.sin();
      complex10.cosh();
      Complex complex11 = complex4.add(Double.POSITIVE_INFINITY);
      complex11.asin();
      Complex complex12 = complex7.tanh();
      complex12.NaN.cosh();
      Complex complex13 = Complex.ZERO;
      complex9.divide(complex10);
      Complex complex14 = Complex.ONE;
      complex8.tanh();
      complex0.hashCode();
      Complex.valueOf(226.5173989, (-1.0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(complex0);
      Complex complex2 = complex0.add((-2461.9011194647533));
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.cosh();
      complex1.subtract(complex4);
      complex4.getArgument();
      Complex complex5 = Complex.valueOf(20.0, 3099.96622);
      Complex complex6 = new Complex((-2461.9011194647533), Double.NaN);
      complex2.cosh();
      complex3.add(5871.593);
      complex3.asin();
      Complex complex7 = complex3.tanh();
      complex0.ZERO.subtract((-1566.5603));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex2.divide(complex5);
      complex7.sqrt1z();
      Complex complex10 = Complex.ONE;
      complex6.tanh();
      Complex complex11 = Complex.I;
      complex11.hashCode();
      Complex.valueOf((-2112.9539), 1242.249);
      complex2.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      complex1.INF.sin();
      complex1.ZERO.sinh();
      Complex complex2 = new Complex((-385.11279512544), (-385.11279512544));
      complex1.multiply((-826.1682532));
      complex1.sinh();
      Complex.valueOf(1574.997814, (-385.11279512544));
      complex2.reciprocal();
      Complex.valueOf((-385.11279512544), (-385.11279512544));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.INF.reciprocal();
      complex3.INF.multiply(complex0);
      Complex complex5 = complex4.add((-385.11279512544));
      Complex complex6 = complex5.sqrt();
      complex0.getArgument();
      Complex.valueOf(2.6275817434497847E-6, 3.141592653589793);
      Complex complex7 = Complex.INF;
      complex7.exp();
      Complex complex8 = complex3.cosh();
      Complex complex9 = Complex.valueOf(2.6275817434497847E-6, 3.141592653589793);
      complex9.add(Double.NaN);
      complex7.asin();
      complex6.tanh();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.NaN;
      complex8.divide(complex11);
      complex5.sqrt1z();
      Complex complex12 = Complex.ONE;
      complex0.tanh();
      complex9.hashCode();
      Complex.valueOf(2142.1358098267983, 169.415335);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex((-385.11279512544), (-385.11279512544));
      Complex complex3 = complex2.asin();
      complex3.INF.reciprocal();
      complex3.INF.multiply(complex0);
      Complex complex4 = complex0.createComplex((-385.11279512544), (-1.3070436427679952E-53));
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.ZERO.cos();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex5.subtract(complex4);
      complex5.ONE.getArgument();
      Complex.valueOf(3099.96622, (-385.11279512544));
      Complex complex9 = complex7.exp();
      complex2.cosh();
      Complex complex10 = complex6.add((-3619.311436));
      complex10.asin();
      complex7.exp();
      complex9.tanh();
      complex8.divide(complex6);
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex9.divide(complex11);
      complex12.tanh();
      complex2.hashCode();
      Complex.valueOf(0.0, (-2382.794909));
      Complex.valueOf(44.0346, 0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(complex0);
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1960.481797, 1960.481797);
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.sqrt1z();
      complex5.sqrt1z();
      Complex complex6 = complex5.pow(1960.481797);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.divide(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      complex4.getReal();
      Complex complex10 = complex1.pow(complex3);
      Complex complex11 = complex6.log();
      complex1.abs();
      complex8.sqrt();
      complex3.pow(195.40284202);
      complex10.sinh();
      complex9.divide(complex11);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = new Complex(0.7853973205788375, 2.0);
      Complex complex4 = complex0.divide((-385.11279512544));
      Complex complex5 = complex1.tan();
      complex4.sqrt1z();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = new Complex(1003.85426, Double.POSITIVE_INFINITY);
      complex8.pow((-385.11279512544));
      complex3.atan();
      Complex complex9 = complex2.divide((-20.0));
      complex7.hashCode();
      complex4.getReal();
      Complex complex10 = complex0.pow(complex3);
      Complex complex11 = complex1.log();
      complex9.abs();
      complex9.sqrt();
      complex5.pow(Double.NaN);
      complex11.sinh();
      complex7.divide(complex10);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1467.585);
      Complex complex1 = complex0.sqrt1z();
      complex0.sqrt();
      Complex complex2 = new Complex((-1.3092176647888381E7));
      complex2.pow(1467.585);
      Complex.valueOf(1467.585, (-385.11279512544));
      complex0.readResolve();
      Complex complex3 = Complex.ZERO;
      complex1.equals(complex3);
      complex2.sinh();
      Complex complex4 = complex1.pow((-385.11279512544));
      complex4.sinh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(3538.4657768, (-0.32143061655198846));
      complex5.divide(complex6);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.INF.reciprocal();
      complex3.INF.multiply(complex0);
      Complex complex5 = complex0.createComplex((-385.11279512544), (-1.3070436427679952E-53));
      Complex complex6 = complex1.negate();
      Complex complex7 = complex1.ZERO.cos();
      Complex complex8 = complex6.ZERO.cosh();
      complex6.subtract(complex5);
      complex6.ONE.getArgument();
      Complex complex9 = Complex.valueOf(3099.96622, (-385.11279512544));
      complex8.exp();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex7.add((-3619.311436));
      Complex complex12 = complex11.asin();
      Complex complex13 = complex8.exp();
      complex12.tanh();
      complex13.divide(complex9);
      Complex complex14 = complex10.sqrt1z();
      complex14.divide(complex5);
      complex0.tanh();
      complex4.hashCode();
      Complex.valueOf(900.48359, (-20.0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544), (-385.11279512544));
      Complex complex1 = complex0.exp();
      complex1.getField();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.pow(0.3743882179260254);
      Complex complex4 = new Complex((-586.1670933423), 0.3743882179260254);
      Complex complex5 = complex3.divide(0.9974067265103987);
      Complex complex6 = complex5.tan();
      complex2.atan();
      Complex complex7 = complex6.sqrt1z();
      complex7.NaN.abs();
      Complex complex8 = complex1.sqrt1z();
      complex4.pow((-586.1670933423));
      Complex complex9 = complex5.atan();
      complex3.divide((-1990.114044499));
      complex0.hashCode();
      complex1.getReal();
      Complex complex10 = complex8.pow(complex4);
      complex2.log();
      complex10.abs();
      complex0.sqrt();
      complex9.acos();
      complex6.conjugate();
      Complex.valueOf((-1990.114044499));
      complex10.reciprocal();
      Complex complex11 = Complex.valueOf((-2279.73), (-385.11279512544));
      complex11.readResolve();
      Complex complex12 = Complex.valueOf(1007.49673070445, 854.3669934);
      complex12.getImaginary();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3196.79));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sin();
      Complex complex4 = new Complex((-3196.79), 722.6);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex1.reciprocal();
      complex6.multiply(complex1);
      Complex complex8 = complex0.createComplex((-1.0), 4845.0);
      Complex complex9 = complex3.add(6294.44);
      Complex complex10 = complex6.sqrt();
      Complex complex11 = new Complex(4845.0);
      Complex complex12 = complex5.exp();
      Complex complex13 = Complex.INF;
      complex10.getField();
      complex6.atan();
      Complex complex14 = complex7.asin();
      complex14.nthRoot(1226);
      complex8.negate();
      Complex complex15 = complex9.cosh();
      complex12.toString();
      complex7.tan();
      Complex complex16 = complex15.sqrt();
      complex16.reciprocal();
      complex13.sin();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN);
      complex1.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.asin();
      complex4.isInfinite();
      complex2.cos();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.sinh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex2.cos();
      complex4.getReal();
      complex4.getArgument();
      Complex complex8 = complex7.pow((-1.8908603201210102E262));
      Complex complex9 = complex8.multiply((-1.8908603201210102E262));
      Complex complex10 = complex8.subtract(0.8813735870195428);
      complex5.divide(220.3913);
      Complex complex11 = complex7.createComplex(1.8007284821359149E-9, (-1.8908603201210102E262));
      complex1.subtract((-3110.453699107));
      complex6.divide(complex9);
      complex0.acos();
      complex10.divide(complex11);
      complex3.readResolve();
      Complex complex12 = Complex.ONE;
      complex12.getField();
      Complex complex13 = Complex.ONE;
      complex13.tanh();
      complex3.sqrt1z();
      Complex.valueOf(20.0, (-973.757553));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      complex0.getField();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.pow(0.3743882179260254);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex2.sqrt();
      complex2.atan();
      Complex complex8 = complex1.sqrt1z();
      complex7.sqrt1z();
      Complex complex9 = complex3.pow((-3282.9));
      Complex complex10 = complex8.atan();
      complex8.divide((-1990.114044499));
      complex5.hashCode();
      complex5.getReal();
      complex2.pow(complex10);
      complex6.log();
      complex6.abs();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex4.acos();
      complex12.ZERO.conjugate();
      complex11.reciprocal();
      complex3.log();
      Complex complex13 = (Complex)complex12.readResolve();
      complex7.getImaginary();
      complex6.isInfinite();
      complex13.sinh();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = Complex.ONE;
          Complex complex1 = complex0.NaN.asin();
          complex0.NaN.exp();
          Complex complex2 = complex1.sin();
          Complex complex3 = complex1.asin();
          Complex complex4 = Complex.I;
          Complex complex5 = complex4.reciprocal();
          Complex complex6 = Complex.I;
          Complex complex7 = Complex.INF;
          Complex complex8 = complex6.multiply(complex7);
          Complex complex9 = new Complex(1.5637579898345352E-289, (-31.823756661046));
          complex2.add(1.5637579898345352E-289);
          complex8.sqrt();
          complex6.exp();
          complex4.getField();
          complex3.atan();
          complex2.asin();
          // Undeclared exception!
          complex5.nthRoot(2045222521);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.getField();
      Complex complex2 = Complex.valueOf((-1354.404746748075));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.add((-1354.404746748075));
      complex3.hashCode();
      Complex complex5 = Complex.valueOf(0.0, (-1354.404746748075));
      Complex complex6 = complex2.divide(complex5);
      complex6.getReal();
      Complex complex7 = Complex.I;
      complex5.multiply(complex7);
      complex0.equals(complex7);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.divide(0.11862641298045717);
      complex0.sin();
      complex0.log();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.getField();
      Complex complex2 = complex1.asin();
      complex0.pow((-1.2640304072937576E-66));
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 231.46793275359676);
      Complex complex4 = complex3.divide(595.702157);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.tan();
      Complex complex7 = complex2.sqrt();
      complex3.atan();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex4.pow(0.3743882179260254);
      Complex complex11 = new Complex(595.702157);
      Complex complex12 = complex11.atan();
      complex4.divide(595.702157);
      complex12.hashCode();
      complex7.getReal();
      complex4.pow(complex12);
      Complex complex13 = complex6.log();
      complex4.abs();
      complex12.sqrt();
      complex9.acos();
      complex10.conjugate();
      Complex complex14 = complex13.reciprocal();
      complex3.log();
      complex6.readResolve();
      complex14.getImaginary();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.INF.reciprocal();
      complex3.INF.multiply(complex0);
      complex0.createComplex((-385.11279512544), (-1.3070436427679952E-53));
      Complex complex5 = complex4.add((-1.3070436427679952E-53));
      complex5.sqrt();
      complex4.exp();
      complex4.getField();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex0.asin();
      complex0.nthRoot(1);
      complex7.ONE.negate();
      Complex complex8 = complex4.cosh();
      complex6.toString();
      complex7.tan();
      complex3.sqrt();
      complex8.reciprocal();
      complex2.sin();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply((-266));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.add(complex3);
      complex2.negate();
      Complex complex5 = complex2.cos();
      complex0.cosh();
      Complex complex6 = complex5.subtract(complex4);
      complex6.getArgument();
      Complex complex7 = Complex.valueOf(2.242558002471924, Double.NaN);
      complex4.exp();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex7.cosh();
      complex1.add(6.007555745297488E-116);
      complex4.asin();
      complex8.exp();
      complex3.tanh();
      Complex complex10 = new Complex(0.0);
      Complex complex11 = complex10.divide(complex9);
      complex11.sqrt1z();
      complex0.divide(complex6);
      complex10.tanh();
      complex9.hashCode();
      Complex.valueOf(Double.NaN, (-3703.0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.ZERO.reciprocal();
      complex0.isInfinite();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.subtract(complex2);
      complex0.readResolve();
      complex2.divide(3099.96622);
      complex6.isInfinite();
      complex3.toString();
      Complex complex7 = new Complex((-876.2420563112026), 0.0);
      complex7.multiply((-876.2420563112026));
      Complex complex8 = complex7.createComplex(0.0, 0.0);
      complex1.tan();
      Complex complex9 = Complex.valueOf((-876.2420563112026), 2542.359);
      complex9.add(complex0);
      complex5.getImaginary();
      complex0.sqrt();
      Complex complex10 = new Complex(3062.252880766878, 3099.96622);
      complex10.sinh();
      complex8.multiply(1432);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.createComplex((-3644.796656559477), 0.0);
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex1.NaN.log();
      complex2.ONE.cos();
      Complex complex3 = complex0.sinh();
      complex3.createComplex(0.0, 0.0);
      Complex.valueOf((-1.0));
      complex0.readResolve();
      complex3.getReal();
      Complex complex4 = complex0.sin();
      complex3.getField();
      Complex complex5 = complex4.INF.divide(complex0);
      complex5.I.pow(complex2);
      Complex.valueOf(0.0);
      complex1.reciprocal();
      Complex complex6 = complex2.subtract((-3644.796656559477));
      complex4.reciprocal();
      complex0.subtract(Double.NaN);
      complex6.multiply((-584.95772));
      complex1.subtract((-3644.796656559477));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex3.INF.multiply(complex0);
      Complex complex6 = complex0.createComplex((-385.11279512544), (-1.3070436427679952E-53));
      Complex complex7 = complex1.negate();
      complex1.ZERO.cos();
      complex7.ZERO.cosh();
      Complex complex8 = complex7.subtract(complex6);
      Complex complex9 = complex4.createComplex((-385.11279512544), 3099.96622);
      complex5.negate();
      complex9.negate();
      complex5.reciprocal();
      complex4.negate();
      complex1.tan();
      Complex complex10 = complex8.sin();
      Complex.valueOf((-20.0), 1.0);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.acos();
      complex11.add(4360.26278465142);
      complex12.hashCode();
      complex0.toString();
      complex10.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex0.ONE.nthRoot(148);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.add((double) 148);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.tanh();
      complex6.INF.tan();
      Complex complex7 = complex0.divide(complex4);
      complex4.sqrt1z();
      Complex complex8 = complex7.divide(complex3);
      complex2.tanh();
      Complex complex9 = new Complex((-3619.311436), 2074.169710990941);
      complex9.hashCode();
      Complex.valueOf((-2198.80404352944), 2074.169710990941);
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      complex1.NaN.sqrt();
      complex0.nthRoot(2104);
      Complex complex2 = complex0.cos();
      complex0.ONE.abs();
      complex0.ONE.reciprocal();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = Complex.ZERO;
      complex4.getArgument();
      Complex.valueOf(1.0708593250394448E-7, Double.NaN);
      complex0.exp();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.add((-4360.803086957288));
      Complex complex8 = complex3.asin();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.exp();
      Complex complex11 = complex1.tanh();
      complex8.divide(complex11);
      Complex complex12 = complex5.sqrt1z();
      complex12.divide(complex10);
      complex9.tanh();
      Complex complex13 = Complex.ZERO;
      complex13.hashCode();
      Complex.valueOf((double) 2104, Double.NaN);
      complex7.abs();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      complex0.getField();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.pow(0.3743882179260254);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.divide((-1461.43672978951));
      Complex complex6 = complex4.tan();
      Complex complex7 = complex2.sqrt();
      complex2.atan();
      Complex complex8 = complex1.sqrt1z();
      complex7.sqrt1z();
      complex3.pow((-3282.9));
      Complex complex9 = complex8.atan();
      complex8.divide((-1990.114044499));
      complex5.hashCode();
      complex5.getReal();
      complex2.pow(complex9);
      complex6.log();
      complex6.abs();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex4.acos();
      complex11.ZERO.conjugate();
      complex10.reciprocal();
      complex3.log();
      complex11.readResolve();
      complex7.getImaginary();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.conjugate();
      complex0.multiply((-266));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.add(complex2);
      complex3.INF.add((-2718.841515863667));
      Complex complex4 = complex3.sqrt();
      complex4.I.exp();
      complex1.INF.getField();
      Complex complex5 = complex2.ONE.atan();
      complex4.I.asin();
      complex0.nthRoot(1);
      complex2.INF.cosh();
      complex1.toString();
      complex4.hashCode();
      complex2.tan();
      complex2.sqrt();
      Complex complex6 = complex5.reciprocal();
      complex6.ONE.multiply((double) (-266));
      complex6.ONE.divide(complex1);
      complex6.INF.sin();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1135.6564795489), (-1135.6564795489));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.log();
      complex2.sinh();
      complex4.createComplex(0.0, 0.0);
      Complex complex5 = Complex.valueOf((-1105.9531));
      complex2.readResolve();
      complex0.getReal();
      Complex complex6 = Complex.valueOf((-1.0), (-1.3092176647888381E7));
      Complex complex7 = complex6.sin();
      complex7.INF.divide((-1.3092176647888381E7));
      complex6.getField();
      Complex complex8 = complex0.divide(complex3);
      Complex complex9 = new Complex(2.5904487437231458E96, 0.0);
      complex5.pow(complex9);
      Complex.valueOf((-1135.6564795489));
      Complex complex10 = complex2.reciprocal();
      complex2.subtract((-1.0));
      complex8.reciprocal();
      complex9.multiply(5428.523535);
      complex9.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.createComplex((-3644.796656559477), 0.0);
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex.valueOf((-1.0));
      complex0.readResolve();
      complex3.getReal();
      complex0.sin();
      complex3.getField();
      complex2.multiply(Double.NaN);
      Complex complex5 = new Complex((-3318.50334319), (-857.0));
      Complex complex6 = complex5.createComplex((-857.0), 0.0);
      complex5.tan();
      Complex.valueOf(2.3955608715779053E-58, (-4548.85007));
      Complex complex7 = Complex.valueOf(3062.252880766878, (-1.557407724654902));
      Complex complex8 = complex4.add(complex7);
      Complex complex9 = Complex.INF;
      complex9.getImaginary();
      complex8.sqrt();
      complex2.sinh();
      complex6.multiply(1432);
      complex2.add(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex1.NaN.pow(0.0);
      Complex complex6 = complex5.ONE.divide(0.0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex8.atan();
      complex9.I.sqrt1z();
      complex7.NaN.sqrt1z();
      complex7.pow(3390.0270626656);
      Complex complex10 = complex8.ONE.atan();
      Complex complex11 = complex7.divide(0.0);
      complex2.ONE.hashCode();
      complex3.getReal();
      complex6.sin();
      Complex.valueOf((-52.0), (-52.0));
      complex0.acos();
      complex11.add(667.2931492975515);
      complex10.hashCode();
      complex3.toString();
      complex7.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      complex0.getField();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.add(0.0);
      complex4.ONE.hashCode();
      complex3.tan();
      Complex complex5 = complex3.divide(complex1);
      complex1.getReal();
      Complex complex6 = complex3.NaN.multiply(complex5);
      complex5.equals(complex1);
      Complex complex7 = complex3.divide(0.0);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex6.log();
      complex9.multiply(1.0);
      complex9.subtract((-1970.0));
      complex8.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.pow(2124.9);
      Complex complex6 = Complex.ONE;
      complex6.divide(0.0);
      Complex complex7 = complex6.tan();
      complex2.sqrt();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.atan();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex5.pow(1529.78724);
      Complex complex13 = complex7.atan();
      Complex complex14 = complex2.divide((-1582.581));
      complex14.hashCode();
      complex12.getReal();
      complex14.pow(complex10);
      Complex complex15 = complex11.log();
      complex15.abs();
      complex9.sqrt();
      complex4.acos();
      complex13.reciprocal();
      complex9.log();
      complex5.getImaginary();
      complex15.isInfinite();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.toString();
      Complex complex1 = complex0.ZERO.tan();
      complex0.toString();
      Complex complex2 = complex1.add((-2.042639194493364E-9));
      Complex complex3 = complex2.cos();
      complex0.negate();
      Complex complex4 = complex1.ZERO.divide(0.0);
      Complex complex5 = complex1.add((-2.042639194493364E-9));
      Complex complex6 = complex5.NaN.atan();
      complex5.ZERO.cosh();
      complex6.ONE.multiply(0.0);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex8.NaN.cosh();
      complex9.INF.tan();
      complex0.ONE.sin();
      Complex complex10 = complex5.ONE.atan();
      Complex complex11 = complex5.multiply((-1));
      complex10.ONE.reciprocal();
      complex0.readResolve();
      complex4.subtract(complex10);
      complex8.tan();
      complex11.sin();
      complex8.reciprocal();
      Complex complex12 = complex3.atan();
      complex12.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3116.251685393145, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex3.subtract(complex0);
      complex4.I.log();
      complex4.NaN.getField();
      complex2.NaN.atan();
      Complex complex5 = complex0.multiply(complex1);
      complex5.sinh();
      Complex complex6 = complex5.NaN.divide(complex2);
      Complex complex7 = complex5.INF.sqrt1z();
      Complex complex8 = complex7.INF.pow(112.69143615008551);
      Complex complex9 = complex1.pow(complex0);
      complex2.toString();
      complex7.multiply(1392);
      complex6.nthRoot(1392);
      complex9.tan();
      complex2.divide(complex9);
      complex2.hashCode();
      complex8.sqrt1z();
      complex6.multiply(17);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex1.NaN.pow(0.0);
      complex5.ONE.divide(0.0);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex7.atan();
      complex8.I.sqrt1z();
      complex6.NaN.sqrt1z();
      complex6.pow(3390.0270626656);
      Complex complex9 = complex7.ONE.atan();
      Complex complex10 = complex6.divide(0.0);
      complex2.ONE.hashCode();
      complex3.getReal();
      complex2.pow(complex3);
      complex10.log();
      complex0.abs();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex11.I.acos();
      complex12.I.reciprocal();
      Complex complex13 = complex9.log();
      complex13.readResolve();
      complex1.getImaginary();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(458.85979);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.multiply(384);
      Complex complex4 = complex3.INF.conjugate();
      complex3.nthRoot(384);
      Complex complex5 = Complex.valueOf(2.2844135610697528E222, 458.85979);
      Complex complex6 = complex0.atan();
      complex6.ONE.abs();
      complex6.equals(complex1);
      Complex complex7 = complex2.multiply(384);
      complex5.readResolve();
      Complex complex8 = complex7.I.subtract((double) 384);
      Complex complex9 = complex7.ONE.conjugate();
      complex9.I.sin();
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex10.ZERO.tanh();
      complex11.NaN.cos();
      complex3.NaN.hashCode();
      complex10.INF.nthRoot(384);
      complex7.isNaN();
      Complex complex12 = complex7.conjugate();
      complex4.asin();
      Complex.valueOf((double) 384, 2.2844135610697528E222);
      complex12.createComplex((-1897.0), (-1897.0));
      complex8.multiply(384);
      try { 
        complex1.nthRoot((-3982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,982
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(373.6344316, 461.413050961);
      complex1.ONE.multiply(complex0);
      Complex complex2 = Complex.valueOf(0.0, (-809.083));
      complex2.NaN.abs();
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex3.ONE.divide(Double.NaN);
      complex4.INF.asin();
      complex4.I.exp();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.add((-3829.981266));
      Complex complex7 = complex6.ZERO.pow(Double.NaN);
      Complex complex8 = new Complex((-2177.2417707));
      complex7.ONE.multiply(complex8);
      Complex complex9 = complex0.multiply(0.41065990924835205);
      complex9.I.add(0.11691460013389587);
      Complex complex10 = Complex.valueOf((-2031.896251592));
      Complex complex11 = complex10.I.subtract(complex9);
      complex0.add((-3829.981266));
      Object object0 = complex5.readResolve();
      complex3.multiply((-3829.981266));
      complex0.equals(object0);
      complex6.getReal();
      complex10.readResolve();
      complex6.add(complex10);
      complex6.log();
      complex10.reciprocal();
      complex11.atan();
      Complex.valueOf(373.6344316);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-222.8276846));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.INF.log();
      complex3.I.conjugate();
      complex2.NaN.cos();
      complex3.ZERO.multiply((-222.8276846));
      try { 
        complex2.ZERO.nthRoot((-2021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,021
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      complex1.NaN.sqrt();
      complex0.nthRoot(2104);
      Complex complex2 = complex0.cos();
      complex0.ONE.abs();
      complex0.ONE.reciprocal();
      Complex complex3 = complex2.NaN.tan();
      complex0.createComplex(1.0708593250394448E-7, 0.0);
      Complex complex4 = complex0.negate();
      complex4.INF.negate();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex0.negate();
      complex5.tan();
      complex3.sin();
      Complex complex6 = Complex.valueOf((-1528.6082), (double) 2104);
      complex5.I.acos();
      complex6.INF.add(1.0708593250394448E-7);
      complex5.hashCode();
      complex2.toString();
      complex0.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = 849.3108988798446;
      Complex complex0 = new Complex(0.0, 849.3108988798446);
      complex0.ONE.readResolve();
      complex0.ONE.readResolve();
      Complex complex1 = complex0.createComplex(0.0, 849.3108988798446);
      Complex complex2 = complex1.ZERO.multiply(1553);
      complex2.I.sin();
      Complex complex3 = Complex.ONE;
      complex2.NaN.divide(complex3);
      Complex complex4 = complex1.INF.pow(849.3108988798446);
      Complex complex5 = complex4.ZERO.pow(849.3108988798446);
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(372.6537281250166, 0.0);
      complex0.I.getField();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.NaN.atan();
      complex3.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sin();
      complex5.I.getField();
      Complex complex6 = complex4.NaN.exp();
      Complex.valueOf((-1932.11013), 2551.10522);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex4.ZERO.exp();
      Complex complex9 = complex8.ONE.pow(complex6);
      complex2.sin();
      complex0.cosh();
      complex6.ONE.acos();
      complex4.exp();
      complex7.toString();
      complex5.acos();
      Complex complex10 = complex3.atan();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex10.divide(372.6537281250166);
      complex12.asin();
      complex9.sqrt();
      complex9.atan();
      complex0.hashCode();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-385.11279512544));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.asin();
      complex3.INF.reciprocal();
      complex3.INF.multiply(complex0);
      Complex complex4 = complex0.createComplex((-385.11279512544), (-1.3070436427679952E-53));
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.ZERO.cos();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex5.subtract(complex4);
      complex5.ONE.getArgument();
      Complex.valueOf(3099.96622, (-385.11279512544));
      Complex complex9 = complex7.exp();
      complex9.negate();
      complex2.cosh();
      Complex complex10 = complex6.add((-3619.311436));
      complex10.asin();
      complex7.exp();
      complex9.tanh();
      complex8.divide(complex6);
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex9.divide(complex11);
      complex12.tanh();
      complex2.hashCode();
      Complex.valueOf(0.0, 900.48359);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = complex0.subtract(0.0);
      complex1.ONE.toString();
      Complex complex2 = complex0.reciprocal();
      complex1.equals(complex0);
      complex2.ONE.tanh();
      try { 
        complex2.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(316.761);
      Complex complex1 = complex0.ZERO.sin();
      complex1.INF.log();
      complex0.INF.getArgument();
      Complex.valueOf(8.787501601904039E49, 8.787501601904039E49);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-3055.341), (-3055.341));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.valueOf(1401.56, (-2783.25572));
      Complex complex4 = complex2.ZERO.subtract(complex3);
      Complex complex5 = complex3.I.pow(0.0);
      complex5.pow((-3055.341));
      complex0.isInfinite();
      complex2.divide((-3055.341));
      Complex complex6 = complex4.tan();
      complex2.I.cos();
      Complex complex7 = Complex.valueOf(1401.56);
      complex3.NaN.nthRoot(1815);
      complex0.equals((Object) null);
      complex3.getReal();
      complex6.add(complex0);
      complex5.getImaginary();
      complex7.multiply(complex1);
      Complex complex8 = complex1.pow((-2783.25572));
      complex8.sinh();
      complex5.divide((-2783.25572));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 869.18742335);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1962.0));
      Complex complex1 = Complex.valueOf((-1962.0));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.ONE;
      complex0.NaN.sin();
      complex3.ONE.multiply(1350);
      Complex complex4 = complex0.pow(complex3);
      complex0.add((-1962.0));
      Complex complex5 = complex2.subtract((-1962.0));
      complex5.cosh();
      complex5.I.divide(complex4);
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.NaN.multiply(complex2);
      Complex complex8 = new Complex(6.283185307179586, (-20.0));
      complex7.NaN.subtract(complex8);
      complex6.acos();
      complex0.sqrt();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ONE.log();
      complex0.ZERO.reciprocal();
      complex0.isInfinite();
      complex0.sin();
      Complex complex3 = complex2.exp();
      complex0.toString();
      complex0.add(complex1);
      Complex complex4 = complex3.sinh();
      complex1.subtract(complex3);
      complex3.sinh();
      complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = new Complex((-1.0));
      complex1.INF.acos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.subtract(complex1);
      complex3.ONE.getField();
      Complex complex4 = complex3.log();
      complex4.subtract((-1.0));
      complex2.negate();
      Complex complex5 = complex4.cos();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      complex0.ONE.nthRoot(148);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.asin();
      complex2.add(complex0);
      complex2.pow((-1237.2541));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.add((-2461.9011194647533));
      complex2.I.add(complex0);
      complex1.add(complex2);
      complex0.tan();
      complex1.isNaN();
      complex1.INF.sqrt1z();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.I.sqrt1z();
      complex3.NaN.getField();
      try { 
        complex2.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1596.697), (-1596.697));
      Complex complex1 = complex0.log();
      complex1.abs();
      complex0.add(1120.69680732677);
      complex1.sqrt();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.createComplex((-3644.796656559477), 0.0);
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.sinh();
      complex3.createComplex(0.0, 0.0);
      Complex.valueOf((-1.0));
      complex0.readResolve();
      complex3.getReal();
      Complex complex4 = complex0.sin();
      complex3.getField();
      Complex complex5 = complex4.INF.divide(complex0);
      complex5.I.pow(complex2);
      Complex.valueOf(0.0);
      complex1.reciprocal();
      complex2.subtract((-3644.796656559477));
      complex4.reciprocal();
      complex3.multiply(5428.523535);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-119.5498575118));
      complex0.I.atan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.multiply(642.0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.negate();
      complex2.ONE.toString();
      Complex complex4 = complex3.divide((-1.043079666926483E-86));
      Complex complex5 = complex1.NaN.multiply(0.0);
      Complex complex6 = complex1.pow(complex0);
      complex1.ZERO.sqrt();
      Complex complex7 = complex6.divide(complex3);
      complex4.ZERO.hashCode();
      complex7.I.add(0.0);
      Complex complex8 = complex5.tan();
      complex7.acos();
      Complex complex9 = complex1.add((-537.7171627128));
      complex9.ZERO.reciprocal();
      complex4.add(0.0);
      complex6.I.pow(complex3);
      Complex complex10 = complex6.acos();
      complex10.ZERO.sinh();
      Complex.valueOf(642.0);
      complex8.exp();
      try { 
        complex8.I.nthRoot((-644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -644
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-417.5173970710241), (-277.5750032581));
      complex0.readResolve();
      complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = complex0.createComplex((-417.5173970710241), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.add(Double.POSITIVE_INFINITY);
      complex4.multiply(591.3);
      Complex complex6 = complex5.multiply(complex4);
      complex0.INF.multiply((-417.5173970710241));
      complex0.INF.reciprocal();
      Complex complex7 = complex6.ZERO.createComplex(1356.1016, 1356.1016);
      complex7.I.getField();
      complex5.I.abs();
      Complex complex8 = complex5.negate();
      complex8.ONE.abs();
      Complex complex9 = complex1.sqrt1z();
      complex9.ONE.conjugate();
      Complex complex10 = complex5.multiply((-417.5173970710241));
      complex10.ZERO.pow(complex3);
      Complex.valueOf(0.0);
      Complex.valueOf(0.0);
      complex4.cosh();
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(742.3047393618249, 742.3047393618249);
      Complex complex2 = complex1.sqrt();
      complex2.NaN.getArgument();
      complex1.ZERO.pow((-4322.298223509));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.sin();
      complex1.equals(complex0);
      Complex complex5 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex6 = complex4.ONE.multiply(complex5);
      complex6.ZERO.add(0.0);
      complex5.getArgument();
      complex6.nthRoot(1175);
      complex4.negate();
      complex0.conjugate();
      Complex complex7 = complex1.add((-4322.298223509));
      complex4.add(complex7);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      complex0.ONE.multiply(complex1);
      double double0 = (-2057.085619);
      Complex complex2 = complex0.acos();
      double double1 = (-4765.910796);
      Complex complex3 = complex2.I.multiply((-4765.910796));
      complex3.ZERO.pow(complex1);
      complex3.INF.negate();
      Complex complex4 = Complex.valueOf(0.0, (-4765.910796));
      complex4.sqrt1z();
      Complex complex5 = complex3.INF.sin();
      complex5.I.getField();
      Complex complex6 = complex0.ZERO.subtract((-2057.085619));
      Complex complex7 = complex6.ONE.asin();
      complex7.NaN.subtract(0.0);
      complex7.ZERO.sqrt();
      complex6.I.hashCode();
      Complex complex8 = complex6.I.tanh();
      complex8.INF.negate();
      try { 
        complex0.nthRoot((-501));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -501
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.reciprocal();
      Complex complex3 = complex2.INF.subtract(complex1);
      complex0.equals(complex1);
      Complex complex4 = Complex.valueOf((-974.4479395364539), (-974.4479395364539));
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.INF.exp();
      complex7.ZERO.cosh();
      complex4.ONE.tan();
      Complex complex8 = complex3.add(18.01049);
      complex8.sinh();
      Complex complex9 = complex1.add(complex6);
      complex4.abs();
      complex8.createComplex(1378.077491918971, 18.01049);
      Object object0 = new Object();
      complex1.equals(object0);
      complex5.sinh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-1135.6564795489), (-1135.6564795489));
      complex0.ZERO.multiply((-1135.6564795489));
      Complex complex1 = complex0.ONE.sinh();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.add(0.0);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf(1.0);
      complex0.readResolve();
      complex1.readResolve();
      complex2.abs();
      Complex complex4 = complex0.conjugate();
      complex4.I.abs();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex2.pow(complex3);
      complex6.ONE.multiply((-1797.2255));
      complex6.getImaginary();
      Complex complex7 = complex0.cos();
      complex7.ONE.multiply(1.0);
      complex7.tan();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex5.multiply(complex6);
      complex9.tan();
      complex9.getArgument();
      Complex.valueOf(1.0, 0.0);
      complex6.tanh();
      complex8.multiply(complex7);
      complex5.getReal();
      complex7.acos();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(2095.94466659689, (-2315.6));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.exp();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.I.divide((-690.0));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex3.ONE.sqrt1z();
      complex4.NaN.sqrt();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex1.cos();
      complex6.getField();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.NaN.sqrt1z();
      Complex complex9 = complex5.conjugate();
      complex9.INF.subtract(0.0);
      complex1.NaN.asin();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex7.subtract(complex0);
      complex6.readResolve();
      complex0.divide(0.0);
      complex10.isInfinite();
      complex6.toString();
      complex2.multiply((-690.0));
      complex2.createComplex(0.0, 0.0);
      Complex complex12 = complex8.tan();
      Complex.valueOf(0.0, 3062.252880766878);
      Complex complex13 = complex11.add(complex5);
      complex1.getImaginary();
      complex6.sqrt();
      complex12.sinh();
      complex13.multiply(1432);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex.valueOf(1834.07);
      Complex complex2 = complex1.I.multiply((-619.790398554467));
      complex1.readResolve();
      complex2.asin();
      Complex complex3 = complex1.sqrt1z();
      complex2.getArgument();
      Complex complex4 = complex2.multiply(7);
      complex4.INF.subtract((-1.5707963267948966));
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.subtract(3930.8907);
      complex3.isNaN();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.pow(1331.9688154754974);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.acos();
      complex5.NaN.tan();
      complex5.hashCode();
      complex4.I.tanh();
      complex0.add(complex1);
      complex3.sinh();
      complex4.getReal();
      complex4.getReal();
      complex5.negate();
      Complex complex6 = complex5.subtract((-4219.982287504632));
      complex5.toString();
      complex6.reciprocal();
      complex2.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex3.I.sinh();
      Complex complex7 = complex0.ZERO.cosh();
      Complex complex8 = complex0.reciprocal();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex5.ZERO.cos();
      complex7.getReal();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertTrue(complex7.equals((Object)complex8));
      
      complex1.getArgument();
      Complex complex10 = complex3.pow((-7.981320644583728E-8));
      Complex complex11 = complex10.multiply(1454.8);
      Complex complex12 = complex11.NaN.subtract(1.0);
      Complex complex13 = complex11.ONE.divide((-3110.453699107));
      Complex complex14 = complex5.ONE.createComplex(Double.NaN, 1.0);
      Complex complex15 = complex6.ONE.subtract(0.0);
      Complex complex16 = complex5.divide(complex10);
      Complex complex17 = complex3.acos();
      complex3.NaN.divide(complex6);
      Complex complex18 = (Complex)complex6.readResolve();
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex18.getImaginary(), 0.01);
      
      complex17.getField();
      Complex complex19 = complex13.tanh();
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertEquals((-3.2149649610079814E-4), complex19.getReal(), 0.01);
      
      Complex complex20 = complex10.sqrt1z();
      assertSame(complex10, complex12);
      assertSame(complex20, complex16);
      
      complex0.getArgument();
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(complex1.equals((Object)complex14));
      
      complex9.hashCode();
      assertEquals(2.718281828459045, complex4.getReal(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex15));
      assertFalse(complex9.isInfinite());
      assertFalse(complex5.equals((Object)complex17));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.601222826656464E-7);
      Complex complex2 = complex0.divide(complex1);
      complex1.ZERO.toString();
      complex0.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.add((-1.0));
      complex1.getArgument();
      Complex complex5 = complex1.add(1.601222826656464E-7);
      Complex complex6 = complex2.add(complex5);
      complex1.isNaN();
      complex0.getArgument();
      double double0 = complex5.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex0.pow((-3308.34416515));
      Complex complex9 = complex5.log();
      Complex complex10 = complex9.ZERO.sqrt1z();
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex9.ONE.add(0.7853981633974483);
      Complex complex12 = complex11.conjugate();
      complex1.ZERO.createComplex((-3308.34416515), (-3308.34416515));
      double double1 = complex8.getArgument();
      assertEquals(Double.NaN, double1, 0.01);
      
      complex0.isInfinite();
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex13 = Complex.valueOf((-3308.34416515), 0.0);
      complex2.getReal();
      complex13.subtract(complex2);
      Complex complex14 = complex7.divide(complex5);
      assertSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertSame(complex14, complex3);
      assertNotSame(complex7, complex8);
      assertTrue(complex0.equals((Object)complex4));
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      complex12.conjugate();
      assertEquals(1.7853981633974483, complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      
      complex0.I.readResolve();
      Complex complex3 = complex0.ZERO.tanh();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.add(0.0);
      assertTrue(complex5.equals((Object)complex3));
      
      complex4.isInfinite();
      complex4.getField();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply((-266));
      assertEquals((-266.0), complex2.getImaginary(), 0.01);
      
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.INF.add((-2719.56444476721));
      assertTrue(complex5.isInfinite());
      
      Complex complex6 = complex4.sqrt();
      complex6.I.exp();
      complex1.INF.getField();
      Complex complex7 = complex3.ONE.atan();
      Complex complex8 = complex6.I.asin();
      assertEquals(0.8813735870195428, complex8.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      
      complex3.INF.cosh();
      String string0 = complex1.toString();
      assertEquals("(0.0, -1.0)", string0);
      
      complex6.hashCode();
      assertEquals((-0.45508986056222733), complex6.getImaginary(), 0.01);
      
      Complex complex9 = complex3.tan();
      assertEquals(1.557407724654902, complex9.getReal(), 0.01);
      
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex7.reciprocal();
      complex11.INF.sin();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals(1.2732395447351628, complex11.getReal(), 0.01);
      
      complex4.readResolve();
      assertTrue(complex3.equals((Object)complex10));
  }
}
