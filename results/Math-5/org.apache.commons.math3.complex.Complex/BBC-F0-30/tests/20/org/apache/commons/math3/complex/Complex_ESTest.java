/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:12:21 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-382.851628), 20.0);
      complex1.sqrt();
      complex1.tan();
      Complex complex2 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(5.984060832462728E275);
      Complex complex2 = complex0.add(5.984060832462728E275);
      complex2.asin();
      complex2.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((double) (-1821));
      complex1.conjugate();
      complex0.abs();
      complex1.sqrt();
      complex0.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex0.INF.getArgument();
      complex1.INF.hashCode();
      Complex complex3 = complex1.I.tan();
      complex3.I.multiply(2624);
      complex3.INF.getArgument();
      complex2.hashCode();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.atan();
      complex0.getField();
      complex1.nthRoot(308);
      complex2.I.tanh();
      complex2.cosh();
      Complex complex6 = complex2.createComplex((-335.6512158851499), (-335.6512158851499));
      complex1.NaN.readResolve();
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex4.multiply(0.7853981633974483);
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.multiply(complex7);
      complex10.I.abs();
      Complex.valueOf((-8564947.421218144), (-6.824454861992054E-31));
      complex10.add((double) 308);
      complex4.abs();
      Complex complex11 = complex8.negate();
      complex11.I.multiply(Double.NaN);
      complex5.divide(complex9);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = new Complex(2496.19033411298, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.exp();
      complex0.I.getArgument();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.add((-692.3757546844));
      complex3.ONE.sqrt();
      Complex complex4 = complex0.multiply(2620);
      complex1.abs();
      complex4.INF.tanh();
      complex1.readResolve();
      complex4.I.divide((-1897.5162023753755));
      Complex complex5 = complex4.subtract((-392.09385322));
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex5.I.sin();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex8.NaN.divide((double) 2620);
      Complex complex10 = complex9.I.createComplex(9.550479066773209E159, (-392.09385322));
      Complex complex11 = complex4.divide(complex2);
      Complex complex12 = complex3.divide(complex7);
      complex12.NaN.subtract((-1897.5162023753755));
      complex11.reciprocal();
      Complex complex13 = complex5.tan();
      complex6.conjugate();
      Complex complex14 = Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      complex13.INF.add(complex11);
      complex1.divide(complex14);
      complex1.tanh();
      complex13.divide(complex11);
      complex1.nthRoot(2620);
      complex1.asin();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.subtract(1.1857289715706991E-298);
      Complex complex1 = complex0.subtract(Double.NaN);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = Complex.valueOf(607.6856990786284);
      Complex complex4 = new Complex(607.6856990786284);
      complex3.I.subtract(complex4);
      complex2.NaN.tan();
      complex1.readResolve();
      Complex complex5 = complex1.ZERO.subtract(4028057.441555611);
      complex5.I.sin();
      Complex complex6 = complex5.NaN.pow(complex0);
      complex6.INF.getField();
      double double0 = (-4400.0);
      Complex complex7 = complex0.multiply((-4400.0));
      Complex complex8 = complex7.ZERO.log();
      complex8.log();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-684.4244903551), (-3.2165816));
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex0.ONE.createComplex((-1899.05794394), (-203.081742464));
      complex1.INF.multiply((-227733119));
      complex0.abs();
      complex0.sin();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-3.2165816), 684.4320487784216);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(442.3018570504693);
      complex0.ONE.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex1.INF.divide(complex2);
      complex2.NaN.abs();
      Complex complex3 = Complex.valueOf(442.3018570504693);
      complex3.cosh();
      complex1.I.createComplex(442.3018570504693, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.cosh();
      complex1.createComplex(1062.968181217142, Double.NaN);
      complex4.NaN.pow(complex0);
      complex4.add(6.283185307179586);
      complex2.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(9.772655251656639E79, (-1252.9070082809264));
      Complex complex5 = complex3.divide(complex2);
      complex5.exp();
      complex4.subtract(complex1);
      complex4.acos();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = Complex.ONE;
      complex2.log();
      complex1.tanh();
      complex0.tan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1839.3575450786, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      complex1.ZERO.createComplex(1839.3575450786, (-2680.711991124478));
      Complex complex2 = complex1.asin();
      complex0.atan();
      complex0.sqrt();
      Complex.valueOf(1839.3575450786);
      Complex complex3 = Complex.valueOf(1839.3575450786, Double.POSITIVE_INFINITY);
      complex3.tanh();
      complex2.tan();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = new Complex(Double.NaN, 4.599982917837395E-4);
      complex0.divide(complex2);
      Complex complex3 = Complex.valueOf((-2382.5023944030477));
      Complex complex4 = complex3.exp();
      complex4.I.multiply(complex0);
      complex2.subtract(complex1);
      complex4.acos();
      Complex complex5 = new Complex((-2382.5023944030477));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 9.772655251656639E79);
      complex1.divide(complex0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.subtract(complex0);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-1317.2), (-1097.0));
      Complex complex1 = Complex.valueOf((-1317.2));
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.tan();
      complex0.pow(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.multiply(17);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.multiply((-1317.2));
      Complex complex8 = complex4.tan();
      Complex complex9 = Complex.valueOf(1.568413405104933E58, (-1317.2));
      complex9.INF.exp();
      Complex complex10 = Complex.valueOf((-1097.0), (-1317.2));
      complex7.divide(complex0);
      complex7.sqrt();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex11.ZERO.tanh();
      complex10.add((-400.0732287701));
      complex4.pow(complex8);
      complex6.subtract(complex5);
      complex10.divide((double) 17);
      complex10.sqrt1z();
      complex3.sqrt1z();
      complex3.sqrt1z();
      complex12.multiply((-4735));
      Complex complex13 = Complex.ONE;
      complex0.add(complex13);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.log();
      complex1.multiply(complex3);
      complex0.atan();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf((-4263.499637542928));
      Complex complex6 = Complex.INF;
      complex6.log();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.tanh();
      complex7.tan();
      complex5.exp();
      Complex complex9 = complex4.multiply(complex8);
      complex9.ONE.tanh();
      complex5.divide(0.0);
      complex1.log();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf((-20.0), Double.NaN);
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex1.sqrt();
      complex5.INF.nthRoot(2134498622);
      Complex.valueOf(Double.NaN);
      Complex complex6 = Complex.ZERO;
      complex5.tanh();
      complex3.negate();
      complex0.tan();
      complex2.exp();
      Complex.valueOf(7.462678536479685E-9);
      Complex complex7 = Complex.I;
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(2856.935852493894, 2856.935852493894);
      complex0.pow(1868.1251);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.multiply(complex1);
      complex0.sqrt();
      Complex.valueOf((-1857.28532413902));
      Complex complex4 = Complex.ZERO;
      complex2.tanh();
      Complex complex5 = new Complex((-1857.28532413902), (-3.9000301084109346));
      complex2.divide(complex3);
      complex3.exp();
      Complex complex6 = complex2.add(1.3064749115929298E-8);
      complex3.subtract(complex2);
      complex6.acos();
      Complex complex7 = new Complex((-49.363404133488544), Double.NaN);
      complex7.reciprocal();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-1046.795416659), (-1046.795416659));
      complex2.tanh();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = complex0.multiply((-1046.795416659));
      Complex complex2 = complex0.subtract((-1046.795416659));
      complex2.tanh();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
      Complex complex1 = complex0.negate();
      Complex.valueOf(164.381553);
      complex1.atan();
      complex1.nthRoot(1327);
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.valueOf((-1857.28532413902));
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex3.tanh();
      complex8.I.pow((-1857.28532413902));
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.tan();
      complex10.sinh();
      complex0.exp();
      Complex.valueOf((-2284.0128));
      complex1.multiply(complex9);
      Complex.valueOf((-1215.5882304673896));
      complex7.multiply(complex1);
      complex4.subtract((-68.34711186076));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.valueOf((-1857.28532413902));
      complex5.divide(complex4);
      Complex complex6 = Complex.valueOf((-1857.28532413902));
      Complex complex7 = complex3.multiply(complex6);
      complex7.multiply((-1857.28532413902));
      complex2.conjugate();
      Complex complex8 = Complex.NaN;
      Object object0 = complex8.readResolve();
      complex4.equals(object0);
      complex5.negate();
      Complex.valueOf(0.0);
      complex2.atan();
      complex8.divide(1216.631);
      complex3.log();
      complex5.reciprocal();
      complex2.atan();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.ZERO.atan();
      complex2.equals(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.valueOf(164.381553);
      complex3.atan();
      Complex complex5 = complex3.divide(164.381553);
      Complex complex6 = Complex.valueOf((-1215.5882304673896));
      complex4.multiply(complex6);
      complex0.asin();
      complex0.divide(Double.NaN);
      complex5.log();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex0.exp();
      complex1.add(604.20708332828);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.ZERO.atan();
      complex0.subtract(164.381553);
      complex0.divide(2152.547);
      complex1.log();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.sinh();
      complex0.multiply(complex5);
      Complex complex6 = complex3.multiply((-201.782));
      Complex complex7 = complex6.conjugate();
      complex2.equals("");
      Complex complex8 = complex7.negate();
      Complex.valueOf(0.0);
      Complex complex9 = complex0.atan();
      complex8.divide(0.0);
      Complex complex10 = complex4.log();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex10.cosh();
      complex12.reciprocal();
      complex9.pow(6.283185307179586);
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.add((-24.69181441447));
      complex2.acos();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.sinh();
      complex4.multiply(complex1);
      Complex complex6 = complex0.multiply((-24.69181441447));
      Complex complex7 = complex1.conjugate();
      complex1.equals(complex7);
      complex3.ZERO.negate();
      Complex.valueOf(0.0);
      complex3.atan();
      complex5.divide(1216.631);
      complex4.log();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.log();
      complex2.sqrt();
      Complex.valueOf((-1.0));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.tanh();
      complex5.tan();
      complex1.subtract(449.3);
      complex0.exp();
      complex3.NaN.subtract(complex2);
      Complex.valueOf(1750.4419463099205);
      Complex complex6 = Complex.INF;
      complex6.multiply(complex3);
      complex5.asin();
      complex4.divide((-1215.5882304673896));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.add((-24.69181441447));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex0.sinh();
      complex5.multiply(complex1);
      complex0.multiply((-24.69181441447));
      Complex complex7 = complex1.conjugate();
      complex1.equals(complex7);
      Complex complex8 = complex4.ZERO.negate();
      Complex.valueOf(0.0);
      complex4.atan();
      complex6.divide(1216.631);
      complex5.log();
      complex3.tan();
      complex1.cosh();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.valueOf((-1857.28532413902));
      complex6.divide(complex5);
      complex5.log();
      complex3.tanh();
      Complex complex7 = complex1.negate();
      complex7.tan();
      complex0.exp();
      Complex.valueOf((-2284.0128));
      complex1.multiply(complex7);
      complex4.asin();
      complex3.divide((-1.0));
      complex6.log();
      complex4.multiply((-1215.5882304673896));
      complex5.multiply(995);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex3.sqrt();
      Complex.valueOf((-1.0));
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = complex0.log();
      Complex complex8 = complex2.tanh();
      complex6.negate();
      complex8.tan();
      complex0.exp();
      Complex.valueOf((-1215.5882304673896));
      Complex.valueOf(341.83, (-2152.547));
      Complex.valueOf((-2152.547), (-20.0));
      Complex complex9 = complex0.cosh();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.tan();
      complex11.cos();
      complex9.getImaginary();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-24.69181441447));
      Complex complex2 = complex1.add((-24.69181441447));
      Complex complex3 = complex1.createComplex((-1789.74718850743), 502.0390928005);
      complex1.tanh();
      Complex complex4 = complex2.asin();
      complex0.negate();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex5.negate();
      complex7.getImaginary();
      complex5.isInfinite();
      Complex complex8 = new Complex(1.5707963267948934, (-20.0));
      complex8.isNaN();
      complex0.getField();
      Complex.valueOf(-0.0);
      Complex complex9 = Complex.I;
      complex4.atan();
      Complex complex10 = Complex.valueOf((-1.0), 1.8591458797454834);
      complex10.ONE.exp();
      Complex.valueOf(4256.549964112, 1281.90696620346);
      Complex complex11 = Complex.valueOf(3873.0);
      complex11.cosh();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex8.tan();
      complex13.cos();
      complex6.getImaginary();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ONE.pow(complex2);
      Complex complex4 = complex0.ONE.add(1.352233648300171);
      complex0.abs();
      Complex complex5 = complex0.NaN.acos();
      Complex complex6 = complex3.cosh();
      complex6.INF.getArgument();
      Complex complex7 = complex6.NaN.tanh();
      complex0.getField();
      complex2.nthRoot(3955);
      Complex complex8 = complex1.sinh();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex2.divide(complex9);
      complex4.ZERO.sin();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.INF.log();
      complex10.ONE.subtract(complex11);
      complex6.add((-1637.17211923054));
      Complex complex13 = new Complex(0.7853981633974483);
      complex13.asin();
      complex5.multiply(complex13);
      complex4.nthRoot(3955);
      Complex complex14 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex10.add(complex8);
      complex7.acos();
      complex10.exp();
      complex3.negate();
      complex14.readResolve();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf((-1.0));
      complex6.ONE.divide(complex2);
      complex6.log();
      Complex complex7 = complex5.NaN.tanh();
      complex7.ZERO.negate();
      Complex complex8 = complex4.tan();
      complex8.ZERO.exp();
      Complex complex9 = complex8.ONE.multiply(complex3);
      complex4.add(complex0);
      complex8.readResolve();
      complex1.reciprocal();
      complex9.hashCode();
      Complex complex10 = complex0.multiply((-3069));
      Complex complex11 = complex8.atan();
      complex6.cosh();
      complex11.cos();
      complex10.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex.valueOf(1868.1251, 1868.1251);
      Complex.valueOf(1868.1251, 2.039879322052002);
      Complex complex0 = new Complex(1868.1251, 1.53329509736299);
      Complex complex1 = complex0.cosh();
      complex0.tan();
      complex0.cos();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-4137.628891301342));
      complex0.getField();
      complex0.getField();
      complex0.nthRoot(531);
      Complex complex1 = Complex.valueOf((double) 531, 2.268329019570017E70);
      Complex complex2 = Complex.valueOf((-9.35130825405E-313), 920.314);
      complex0.cosh();
      complex0.tan();
      complex2.cos();
      complex1.getImaginary();
      complex0.toString();
      Complex complex3 = complex2.reciprocal();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.multiply(complex2);
      Complex.valueOf((-1.0));
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex0.log();
      Complex complex7 = complex2.tanh();
      complex5.negate();
      Complex complex8 = complex7.tan();
      complex0.exp();
      Complex complex9 = Complex.valueOf((-1215.5882304673896));
      complex5.multiply(complex9);
      Complex complex10 = Complex.valueOf((-1.0), 1228.939583234535);
      Complex complex11 = complex3.log();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.tan();
      Complex complex14 = Complex.ZERO;
      complex13.multiply(233);
      complex6.atan();
      complex11.cosh();
      complex8.cos();
      complex10.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(360.4435884);
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.acos();
      complex0.tan();
      Complex.valueOf(0.9999996954713196, 1.2829599363166098E-7);
      complex2.add(1.0);
      complex2.getArgument();
      Complex complex4 = Complex.NaN;
      complex4.tan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      complex0.multiply(complex3);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = Complex.valueOf((-1.0));
      complex5.ONE.divide(complex2);
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex7.ZERO.negate();
      complex0.multiply(complex6);
      Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      complex8.log();
      Complex complex9 = Complex.NaN;
      complex8.tan();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex4.add((-2152.547));
      Complex complex12 = Complex.valueOf(20.0);
      complex12.getArgument();
      complex4.tan();
      complex0.conjugate();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.multiply(complex2);
      complex3.sqrt();
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = complex1.divide(complex4);
      complex0.log();
      Complex complex7 = complex2.tanh();
      complex6.negate();
      complex7.tan();
      complex0.exp();
      Complex complex8 = Complex.valueOf((-1215.5882304673896));
      complex7.tan();
      Complex complex9 = complex3.exp();
      complex8.multiply(complex1);
      Complex complex10 = Complex.valueOf((-2152.547), 286.519180777412);
      complex0.log();
      complex10.tan();
      complex4.add((-1.7375090618655787E103));
      complex3.getArgument();
      complex9.tan();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = new Complex(2490.779, 2490.779);
      complex1.divide(complex0);
      Complex complex2 = complex1.exp();
      complex0.sqrt();
      Complex complex3 = Complex.I;
      Object object0 = new Object();
      complex2.equals(complex1);
      complex0.sin();
      complex3.cosh();
      Complex complex4 = Complex.NaN;
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex.valueOf(928.57, 928.57);
      Complex complex0 = Complex.valueOf(9.674534330665206E-8, 2218.26649);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.ZERO.multiply(complex1);
      complex0.sinh();
      Complex complex2 = Complex.valueOf((-695.50732852), 920.314);
      Complex complex3 = new Complex(0.0);
      complex3.tan();
      Complex complex4 = new Complex((-1.0));
      Complex complex5 = complex2.pow(complex4);
      complex5.INF.sinh();
      complex4.createComplex(920.314, 4.2990710043633113E-8);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1868.1251, 1868.1251);
      Complex complex1 = Complex.valueOf(1727.197819092571);
      Complex complex2 = complex1.divide(complex0);
      complex2.log();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.negate();
      complex3.tan();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.multiply(complex3);
      Complex.valueOf((-3390.7146385), 20.0);
      Complex complex7 = complex5.log();
      complex0.tan();
      complex4.add(20.0);
      complex6.getArgument();
      complex7.tan();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      complex1.multiply(complex2);
      complex3.sqrt();
      Complex complex4 = Complex.I;
      complex4.getField();
      // Undeclared exception!
      complex1.nthRoot(1073741646);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1111.76156597, 1111.76156597);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.I.atan();
      complex0.readResolve();
      complex2.INF.reciprocal();
      complex0.tan();
      complex1.NaN.sin();
      complex0.NaN.sqrt();
      Complex complex4 = complex0.createComplex((-466.0471395), 0.9055386218805612);
      Complex complex5 = complex4.I.acos();
      complex5.INF.abs();
      complex5.I.sinh();
      Complex complex6 = complex5.ZERO.pow(complex2);
      complex4.I.tan();
      complex2.sqrt();
      complex3.acos();
      complex6.subtract(2237.3540990813);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(2950.6545);
      Complex complex1 = complex0.INF.add(2950.6545);
      Complex complex2 = Complex.valueOf(1.5392257142577226E220, 1.5392257142577226E220);
      complex0.readResolve();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ONE.multiply(2950.6545);
      complex6.createComplex(1.5392257142577226E220, 1.5392257142577226E220);
      Complex complex7 = complex0.multiply(2950.6545);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex7.createComplex(2950.6545, 2950.6545);
      complex9.pow(complex2);
      Complex complex10 = complex8.atan();
      complex10.readResolve();
      Complex complex11 = complex0.asin();
      complex1.subtract(complex8);
      complex11.acos();
      Complex.valueOf(1.5392257142577226E220, 1.5392257142577226E220);
      complex1.add((-2.0183663375378704E-8));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1228.939583234535);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.I.add(1228.939583234535);
      Complex complex4 = complex3.ONE.divide(1228.939583234535);
      complex4.NaN.sinh();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex5.ONE.multiply(711);
      complex2.I.sin();
      complex7.ONE.conjugate();
      complex7.INF.tanh();
      Complex complex8 = Complex.valueOf((double) 711, 1228.939583234535);
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex1.ZERO.abs();
      complex4.I.pow(complex3);
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex9.ZERO.pow(complex3);
      complex10.NaN.tan();
      complex9.exp();
      complex9.NaN.toString();
      Complex complex11 = complex4.tan();
      complex4.readResolve();
      complex11.INF.sqrt1z();
      complex5.hashCode();
      Complex complex12 = complex4.add(complex2);
      Complex complex13 = complex6.log();
      complex13.ONE.pow(complex8);
      complex12.multiply((double) 711);
      complex4.multiply(complex11);
      Complex complex14 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-24.69181441447));
      Complex complex2 = complex1.add((-24.69181441447));
      complex2.acos();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.exp();
      complex0.sinh();
      complex4.multiply(complex1);
      Complex complex5 = complex0.multiply((-24.69181441447));
      Complex complex6 = complex1.conjugate();
      complex1.equals(complex6);
      Complex.valueOf(0.0);
      Complex complex7 = complex3.atan();
      Complex.valueOf((-695.50732852), 920.314);
      Complex complex8 = Complex.valueOf(131.8098, 2.039879322052002);
      complex8.cosh();
      complex7.tan();
      complex5.cos();
      complex8.getImaginary();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-4137.628891301342));
      complex0.ONE.negate();
      complex0.getField();
      complex0.getField();
      complex0.nthRoot(531);
      Complex complex1 = complex0.divide(6.283185307179586);
      Complex complex2 = complex0.log();
      complex2.tan();
      Complex complex3 = complex1.cosh();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.multiply((-1046.795416659));
      complex0.getArgument();
      complex0.isInfinite();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.add((-50.97405301251568));
      Complex complex3 = complex2.pow(complex1);
      complex0.abs();
      complex3.isNaN();
      complex0.getReal();
      complex3.asin();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf((-1.0));
      complex6.ONE.divide(complex2);
      complex6.log();
      Complex complex7 = complex5.NaN.tanh();
      complex7.ZERO.negate();
      Complex complex8 = complex4.tan();
      complex8.ZERO.exp();
      Complex complex9 = complex8.ONE.multiply(complex3);
      complex9.divide(complex5);
      Complex complex10 = Complex.valueOf(0.0, (-1.0));
      Complex complex11 = complex5.log();
      complex10.INF.tan();
      complex4.add((-2152.547));
      complex11.getArgument();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1868.1251, 1868.1251);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tanh();
      complex2.sinh();
      Complex complex4 = complex2.exp();
      complex4.createComplex(1868.1251, 1868.1251);
      complex4.hashCode();
      Complex complex5 = complex0.tanh();
      complex5.I.cosh();
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      complex0.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex1.sqrt();
      Complex.valueOf((-2152.547));
      Complex complex6 = Complex.valueOf(2212.5758157301);
      Complex complex7 = complex6.divide(complex0);
      complex3.log();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex0.negate();
      complex1.tan();
      complex5.exp();
      complex8.multiply(complex9);
      Complex complex10 = Complex.valueOf((-2261.4), 83.961689577);
      Complex complex11 = complex0.log();
      complex10.tan();
      complex11.add(-0.0);
      complex2.getArgument();
      complex4.tan();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.multiply(complex2);
      complex3.sqrt();
      Complex.valueOf((-1.0));
      Complex complex5 = complex1.divide(complex4);
      complex0.log();
      Complex complex6 = complex2.tanh();
      complex5.negate();
      complex6.tan();
      complex0.exp();
      Complex complex7 = Complex.valueOf((-1215.5882304673896));
      complex5.multiply(complex7);
      Complex.valueOf((-1.0), 1228.939583234535);
      complex3.log();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.ZERO;
      complex10.add(366.66960796685515);
      complex3.getArgument();
      complex6.tan();
      complex9.conjugate();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(695.50732852);
      Complex complex2 = complex1.conjugate();
      complex2.equals(complex1);
      Complex.valueOf(0.0);
      complex1.atan();
      Complex.valueOf((-256.0024084), 695.50732852);
      complex1.cosh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.cos();
      complex4.getImaginary();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(1228.939583234535);
      Complex complex1 = new Complex(1228.939583234535);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.I.add(1228.939583234535);
      Complex complex4 = complex3.ONE.divide(1228.939583234535);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex6.ONE.multiply(711);
      Complex complex9 = complex8.ONE.conjugate();
      complex8.INF.tanh();
      Complex complex10 = complex2.createComplex(0.0, 1228.939583234535);
      Complex complex11 = complex2.createComplex(3.141592653589793, 3.141592653589793);
      Complex complex12 = complex9.multiply(complex6);
      Complex complex13 = complex7.tan();
      complex2.negate();
      Complex complex14 = new Complex(3.141592653589793, 5273.9322574618);
      Complex complex15 = complex12.multiply(complex14);
      complex11.hashCode();
      complex7.divide(complex0);
      complex5.nthRoot(938);
      complex8.tanh();
      complex2.sinh();
      complex10.subtract(complex13);
      complex12.exp();
      complex15.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      Complex complex1 = new Complex((-791.692), 113.21293409);
      Complex complex2 = complex1.divide(complex0);
      complex2.ZERO.exp();
      Complex complex3 = complex1.add((-791.692));
      complex3.subtract(complex1);
      complex0.isInfinite();
      Complex.valueOf(560.4233082366276, 560.4233082366276);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-35.8795292924391));
      complex0.I.cosh();
      complex0.getReal();
      Complex complex1 = Complex.valueOf(182.599753);
      complex1.readResolve();
      complex1.INF.getField();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.sqrt1z();
      complex3.ZERO.getField();
      complex3.I.getField();
      complex2.reciprocal();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2596.7, 2596.7);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.pow((-253.00709));
      complex0.reciprocal();
      Complex complex3 = complex1.pow(2596.7);
      Complex complex4 = complex1.negate();
      complex0.INF.hashCode();
      complex4.INF.readResolve();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.subtract(complex5);
      complex6.ONE.acos();
      complex5.ONE.readResolve();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.I.multiply(complex2);
      complex8.I.readResolve();
      Complex complex9 = complex7.atan();
      complex9.hashCode();
      Complex complex10 = complex3.add(0.0);
      complex10.ONE.conjugate();
      complex2.negate();
      complex5.createComplex(488.94, 488.94);
      complex4.multiply(1466);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.ZERO.sin();
      complex7.ZERO.sqrt();
      Complex complex8 = complex4.asin();
      complex1.ONE.pow(complex4);
      complex2.ZERO.asin();
      complex1.nthRoot(936);
      complex8.NaN.nthRoot(1287);
      complex5.NaN.hashCode();
      complex2.acos();
      Complex complex9 = complex2.multiply(Double.NaN);
      complex9.INF.hashCode();
      complex3.readResolve();
      Complex complex10 = complex5.subtract(Double.NaN);
      complex10.NaN.atan();
      complex10.ZERO.subtract(complex8);
      complex2.isNaN();
      complex7.getImaginary();
      complex3.abs();
      complex5.getArgument();
      complex4.subtract(0.0);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ZERO.toString();
      complex2.NaN.readResolve();
      Complex complex3 = Complex.ONE;
      complex3.INF.pow(complex2);
      Complex complex4 = complex0.pow(complex3);
      complex4.toString();
      Complex complex5 = complex0.atan();
      complex5.INF.toString();
      complex0.NaN.subtract(complex1);
      complex0.ONE.tan();
      Complex.valueOf(609.9745);
      Complex complex6 = complex5.NaN.subtract(0.0);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex7.NaN.multiply(0.0);
      complex6.I.cos();
      Complex complex9 = complex5.multiply(1);
      Complex complex10 = complex0.sqrt1z();
      complex10.ZERO.nthRoot(1);
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.ZERO.multiply(complex9);
      complex7.ONE.acos();
      Complex complex13 = complex7.cosh();
      complex0.getImaginary();
      complex13.subtract(complex9);
      complex12.sinh();
      complex6.hashCode();
      Complex complex14 = complex9.sin();
      complex14.I.getField();
      complex4.conjugate();
      complex7.divide(complex8);
      complex0.exp();
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2562.71826724), 0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.atan();
      Complex.valueOf(0.0);
      complex2.createComplex(4460.577504364, 0.0);
      complex0.INF.getArgument();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.subtract(0.0);
      complex1.reciprocal();
      complex4.ZERO.sinh();
      Complex complex5 = complex2.I.exp();
      complex1.hashCode();
      complex1.getImaginary();
      Complex complex6 = complex2.cosh();
      complex2.ONE.toString();
      complex6.NaN.divide(-0.0);
      Complex complex7 = complex5.negate();
      complex6.hashCode();
      complex2.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1215.5882304673896));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.sinh();
      Complex.valueOf((-1215.5882304673896), (-3930.718385677));
      complex2.INF.conjugate();
      Complex complex3 = complex0.conjugate();
      complex3.I.getArgument();
      complex2.add((-1215.5882304673896));
      complex3.divide(complex2);
      complex2.sinh();
      complex1.reciprocal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.add((-2760.37068));
      complex1.ZERO.acos();
      complex0.INF.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.ONE.multiply(complex0);
      complex3.INF.multiply(0.0);
      Complex complex5 = complex2.conjugate();
      complex2.equals(complex3);
      Complex.valueOf((-256.0024084));
      complex0.ZERO.atan();
      Complex.valueOf(131.8098, 131.8098);
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.tan();
      complex5.cos();
      complex7.getImaginary();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.multiply((-1046.795416659));
      complex0.getArgument();
      complex0.isInfinite();
      complex0.ZERO.tanh();
      complex0.multiply(874);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cos();
      complex0.atan();
      Complex complex3 = complex0.sin();
      complex3.I.createComplex((-1789.74718850743), 0.0);
      complex2.tanh();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex2.negate();
      complex4.getImaginary();
      complex4.isInfinite();
      complex5.isNaN();
      complex1.getField();
      Complex complex9 = complex0.conjugate();
      complex5.isNaN();
      complex4.pow(complex5);
      complex0.sin();
      complex5.exp();
      Complex complex10 = complex7.ZERO.tan();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex11.I.asin();
      complex12.ONE.negate();
      Complex complex13 = complex7.createComplex(0.0, 0.0);
      complex13.add(complex10);
      complex13.readResolve();
      complex9.reciprocal();
      complex4.hashCode();
      Complex complex14 = complex10.createComplex(-0.0, (-1789.74718850743));
      Complex complex15 = complex14.ONE.multiply((-3069));
      complex5.atan();
      complex8.cosh();
      complex15.cos();
      complex12.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-425.5469577));
      complex1.NaN.sin();
      Complex complex2 = complex0.acos();
      complex2.NaN.toString();
      complex1.toString();
      complex0.isNaN();
      complex0.I.hashCode();
      complex0.getImaginary();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add(complex3);
      complex1.add((-1518.9520781443125));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1228.939583234535);
      Complex complex1 = new Complex(1228.939583234535);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.I.add(1228.939583234535);
      Complex complex4 = complex3.ONE.divide(1228.939583234535);
      complex4.NaN.sinh();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex5.ONE.multiply(711);
      complex7.ONE.conjugate();
      complex7.INF.tanh();
      Complex complex8 = Complex.valueOf((double) 711, 1228.939583234535);
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex1.ZERO.abs();
      complex4.I.pow(complex3);
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex9.ZERO.pow(complex3);
      complex10.NaN.tan();
      complex9.exp();
      complex9.NaN.toString();
      Complex complex11 = complex4.tan();
      complex4.readResolve();
      complex11.INF.sqrt1z();
      complex5.hashCode();
      Complex complex12 = complex4.add(complex2);
      Complex complex13 = complex6.log();
      complex13.ONE.pow(complex8);
      complex12.multiply((double) 711);
      Complex complex14 = complex4.multiply(complex11);
      complex4.acos();
      Complex complex15 = complex14.cos();
      complex14.getArgument();
      Complex.valueOf(1228.939583234535, 1228.939583234535);
      complex9.pow(0.0);
      complex15.readResolve();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.pow(complex2);
      complex4.INF.negate();
      complex2.getReal();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex0.createComplex(1315.403826, 1315.403826);
      complex5.multiply(complex3);
      Complex complex7 = complex0.tan();
      complex7.NaN.negate();
      complex6.multiply(complex7);
      complex7.hashCode();
      Complex complex8 = complex3.divide(complex5);
      try { 
        complex8.nthRoot((-1615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,615
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-89.0907739), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sinh();
      complex2.I.conjugate();
      Complex complex3 = complex0.INF.tan();
      complex2.ZERO.exp();
      complex1.I.nthRoot(1);
      Complex complex4 = complex2.ONE.pow(300.84999980558);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.sin();
      complex5.ONE.acos();
      complex4.ZERO.sinh();
      complex6.NaN.abs();
      complex2.ZERO.pow(300.84999980558);
      complex4.hashCode();
      complex4.reciprocal();
      complex5.sinh();
      Complex complex7 = complex5.asin();
      complex7.add(0.0);
      complex3.getReal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
      Complex complex1 = complex0.I.cosh();
      complex1.ZERO.sqrt1z();
      Complex complex2 = complex1.I.multiply(2978.542800645762);
      Complex complex3 = complex2.I.pow(complex1);
      complex3.ONE.acos();
      complex2.subtract(1.0);
      complex1.tan();
      Complex complex4 = complex0.NaN.cos();
      complex0.isInfinite();
      Complex complex5 = complex4.cosh();
      complex4.readResolve();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.ZERO.sqrt1z();
      try { 
        complex7.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-4137.628891301342));
      complex0.getField();
      complex0.getField();
      complex0.nthRoot(531);
      Complex complex1 = complex0.divide(6.283185307179586);
      Complex complex2 = complex0.log();
      complex2.tan();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-393.147));
      complex0.ONE.abs();
      complex0.getArgument();
      complex0.NaN.abs();
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(147.9295);
      try { 
        complex2.ONE.nthRoot((-214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -214
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-410.6651083309), (-410.6651083309));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.I.log();
      complex3.hashCode();
      complex2.NaN.readResolve();
      Complex complex4 = complex0.NaN.sinh();
      complex4.INF.readResolve();
      complex4.ZERO.cosh();
      complex0.ZERO.add((-739.4191312167608));
      complex0.ZERO.readResolve();
      complex4.NaN.getField();
      complex0.multiply(1095);
      Complex complex5 = complex0.reciprocal();
      complex5.INF.readResolve();
      complex0.divide((-2459.24708322816));
      complex4.toString();
      complex0.readResolve();
      complex1.exp();
      Complex complex6 = Complex.valueOf(0.5307431221008301);
      complex6.I.sqrt();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.add(1.6121782610217253E-8);
      Complex complex2 = complex1.I.exp();
      complex0.readResolve();
      complex0.atan();
      complex2.negate();
      complex0.readResolve();
      Complex complex3 = complex2.cosh();
      complex3.multiply((-978));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex1 = complex0.pow(0.0);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(0.0);
      int int0 = (-1);
      Complex complex3 = complex2.ONE.multiply((-1));
      Complex complex4 = complex3.ONE.log();
      complex3.INF.getField();
      complex1.INF.sqrt1z();
      Complex complex5 = complex2.ZERO.pow(3127.734);
      complex5.INF.readResolve();
      Complex complex6 = complex2.acos();
      complex6.NaN.createComplex((-20.0), 3127.734);
      Complex.valueOf((-1406.114589091498), 507.37405);
      Complex complex7 = complex1.sqrt1z();
      complex7.ZERO.cos();
      Complex complex8 = complex0.atan();
      Complex.valueOf(1223.0, 622.0);
      Complex.valueOf(0.05694137513637543, (double) (-1));
      complex8.ZERO.multiply(1700);
      complex8.tanh();
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.reciprocal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.acos();
      complex3.log();
      Complex complex5 = complex4.ZERO.divide(7.64416021682279E-9);
      Complex complex6 = complex0.add(1387.6413124322735);
      complex6.multiply(complex3);
      complex6.ZERO.divide(complex0);
      complex0.getReal();
      complex6.add(complex0);
      complex3.subtract(1387.6413124322735);
      Complex complex7 = complex3.sinh();
      complex5.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(2318.14709, 2318.14709);
      Complex.valueOf(0.0);
      complex0.pow((-698.63246765));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.05417001247406006);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex1.multiply(6.473860152384321E-297);
      complex4.NaN.subtract(0.0);
      complex0.getReal();
      complex0.hashCode();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex7.ONE.log();
      complex7.I.conjugate();
      Complex complex10 = complex2.negate();
      complex0.getArgument();
      complex10.INF.abs();
      complex8.add(2549.2648);
      Complex complex11 = complex10.pow(complex6);
      complex1.abs();
      complex11.isNaN();
      complex9.getReal();
      complex0.asin();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(427.0);
      complex0.I.getField();
      Complex complex1 = complex0.sinh();
      complex1.getReal();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.ONE.subtract(0.0);
      complex6.INF.divide(427.0);
      complex6.ONE.subtract(complex3);
      complex3.reciprocal();
      Complex complex7 = Complex.valueOf(427.0, 427.0);
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex2.exp();
      complex11.ZERO.subtract(0.0);
      Complex complex12 = complex3.divide((-1087.6032064));
      complex10.toString();
      complex12.sqrt();
      Complex complex13 = Complex.I;
      complex0.equals(complex13);
      complex9.sin();
      complex11.cosh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex1.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.sinh();
      complex5.ONE.exp();
      Complex complex6 = complex3.createComplex(0.0, (-2460.0));
      complex6.I.hashCode();
      complex0.tanh();
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.getReal();
      complex0.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      complex1.I.hashCode();
      Complex complex3 = complex2.ONE.multiply(1409.0683);
      complex3.INF.getField();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = Complex.valueOf(1409.0683);
      complex4.acos();
      Complex.valueOf(0.0, 1409.0683);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.NaN.cosh();
      complex5.INF.divide(complex2);
      complex5.ZERO.createComplex(0.0, 1156.639481829237);
      Complex complex6 = complex1.add(complex3);
      complex1.getField();
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex7.ZERO.reciprocal();
      complex8.ONE.readResolve();
      complex7.NaN.log();
      complex0.cos();
      try { 
        complex0.nthRoot((-276));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -276
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2152.547), (-2152.547));
      complex0.hashCode();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf((-1.0));
      complex6.ONE.divide(complex2);
      complex6.log();
      Complex complex7 = complex5.NaN.tanh();
      complex7.ZERO.negate();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.ZERO.exp();
      complex8.ONE.multiply(complex3);
      Complex complex10 = Complex.valueOf(0.0, (-1.0));
      Complex complex11 = complex5.log();
      complex10.INF.tan();
      complex4.add((-2152.547));
      complex11.getArgument();
      complex10.tan();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.atan();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract(1.0357816219329834);
      Complex complex2 = complex1.ZERO.subtract(1.0357816219329834);
      complex2.INF.abs();
      Complex complex3 = complex1.NaN.createComplex(1.0357816219329834, 1.0357816219329834);
      complex0.isNaN();
      complex3.INF.multiply(complex0);
      complex1.isNaN();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.divide(1.0357816219329834);
      complex5.I.asin();
      Complex complex6 = complex3.sin();
      complex6.ZERO.atan();
      complex3.negate();
      complex3.getArgument();
      complex4.cosh();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      int int0 = 199;
      complex0.ONE.multiply(199);
      complex0.equals(complexField0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getArgument();
      complex0.getArgument();
      complex0.readResolve();
      complex0.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.NaN.multiply((-830));
      complex1.hashCode();
      complex2.NaN.tan();
      complex2.ONE.hashCode();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.INF.subtract(0.0);
      complex2.getArgument();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex7.add(1490.738);
      complex8.I.tan();
      complex4.ONE.subtract(complex6);
      Complex complex10 = complex8.divide(0.0);
      complex10.INF.add((double) (-830));
      Complex complex11 = complex6.atan();
      complex9.toString();
      complex2.sin();
      complex7.getArgument();
      complex4.isInfinite();
      complex2.isInfinite();
      complex0.add((double) (-830));
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.INF.multiply((-635));
      complex1.I.hashCode();
      Complex complex3 = complex0.divide(0.0);
      complex3.ONE.multiply(0.0);
      double double0 = complex3.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex7.NaN.asin();
      Complex complex10 = complex8.ONE.sqrt();
      Complex complex11 = complex8.ONE.sqrt1z();
      Complex complex12 = complex10.ONE.sinh();
      Complex complex13 = complex0.cosh();
      complex13.I.hashCode();
      complex10.getField();
      Complex complex14 = complex3.NaN.multiply(complex12);
      Complex complex15 = complex13.sinh();
      Complex complex16 = complex15.ZERO.atan();
      Complex complex17 = complex15.conjugate();
      assertEquals(2.2326303196791324, complex17.getReal(), 0.01);
      assertTrue(complex17.equals((Object)complex15));
      
      Complex complex18 = complex0.atan();
      assertEquals(0.7853981633974483, complex18.getReal(), 0.01);
      
      Complex complex19 = complex3.subtract((-1626.5860419538485));
      assertSame(complex19, complex6);
      
      Complex complex20 = complex11.asin();
      assertEquals(1.2113633229846195, complex8.getImaginary(), 0.01);
      assertFalse(complex11.equals((Object)complex2));
      assertTrue(complex20.equals((Object)complex16));
      
      complex9.toString();
      assertSame(complex9, complex14);
      assertSame(complex9, complex5);
      assertFalse(complex9.equals((Object)complex8));
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.ZERO.tanh();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.asin();
      assertSame(complex5, complex3);
      assertSame(complex1, complex2);
      
      Complex complex6 = complex0.divide(5.332900939354667E-277);
      Complex complex7 = complex6.log();
      assertTrue(complex6.equals((Object)complex4));
      assertNotSame(complex6, complex0);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      Complex complex1 = new Complex((-791.692), 113.21293409);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.NaN.add(604.20708332828);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.subtract(complex1);
      assertTrue(complex5.equals((Object)complex0));
      assertTrue(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(7.307059786371152E43);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      assertEquals(0.20787957635076193, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.pow((-2267.2275091079473));
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(100.9999999735876, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 2253.466883118;
      Complex complex0 = Complex.valueOf(2253.466883118);
      Complex complex1 = complex0.INF.tan();
      complex1.ZERO.cosh();
      complex0.log();
      complex0.I.getField();
      Complex complex2 = complex0.acos();
      int int0 = 0;
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.add(complex1);
      assertTrue(complex2.equals((Object)object0));
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.add(7.894935661289349E-8);
      double double0 = complex3.getImaginary();
      assertSame(complex3, complex4);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.add(complex1);
      assertTrue(complex1.equals((Object)complex2));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      complex0.hashCode();
      assertEquals(0.0, complex0.getReal(), 0.01);
  }
}
