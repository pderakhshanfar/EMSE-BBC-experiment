/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:23:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1497.4), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex2.acos();
      complex1.multiply(complex0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1693.3704172384073), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.tan();
      complex0.reciprocal();
      complex0.INF.toString();
      Complex complex3 = complex0.multiply(37);
      complex3.NaN.atan();
      Complex complex4 = complex2.ONE.createComplex(Double.POSITIVE_INFINITY, 0.5707963267948967);
      Complex complex5 = complex4.NaN.pow((-1693.3704172384073));
      Complex complex6 = complex1.sqrt();
      complex0.INF.subtract((-2716.708106));
      Complex complex7 = complex1.add(complex2);
      complex7.ZERO.asin();
      complex7.I.abs();
      Complex complex8 = complex2.exp();
      complex1.readResolve();
      Complex complex9 = complex3.sinh();
      complex5.abs();
      complex9.NaN.cosh();
      Complex complex10 = Complex.valueOf((-1693.3704172384073), (-2433158.2260577395));
      complex10.NaN.tanh();
      Complex complex11 = complex0.subtract(complex8);
      complex11.tan();
      Complex complex12 = complex4.divide(complex10);
      Complex.valueOf((-2433158.2260577395));
      complex12.add(complex1);
      Complex complex13 = complex9.acos();
      complex6.log();
      complex13.tanh();
      Complex.valueOf((-2433158.2260577395), (-1693.3704172384073));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(8.563247933339596E59, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(4.6562769567905925E256, 4.6562769567905925E256);
      Complex complex2 = new Complex(4.6562769567905925E256);
      complex2.sqrt1z();
      complex2.toString();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1556.99025, 1556.99025);
      complex0.ONE.sinh();
      Complex complex1 = complex0.multiply(2.0);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex2.ZERO.sqrt1z();
      complex3.I.tanh();
      complex2.ONE.subtract(complex4);
      Complex complex5 = complex1.divide((-2803.56146));
      complex5.subtract(complex3);
      Complex complex6 = complex0.I.negate();
      complex5.ONE.sqrt1z();
      complex6.I.nthRoot(4973);
      complex6.I.acos();
      complex0.add(complex1);
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex5.subtract(complex7);
      complex8.INF.toString();
      Complex complex9 = complex8.ONE.pow(303.415902);
      Complex complex10 = complex7.exp();
      Complex complex11 = complex10.reciprocal();
      complex11.INF.abs();
      complex7.readResolve();
      complex1.exp();
      complex8.multiply(complex9);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-1203.868032365), (-966.1463));
      complex2.tanh();
      Complex.valueOf((-966.1463), 0.0);
      complex1.cosh();
      Complex complex4 = new Complex(2341898.8893771265, (-20.0));
      complex4.tan();
      complex3.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.subtract(Double.POSITIVE_INFINITY);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(39.3793009056754, 39.3793009056754);
      Complex complex1 = complex0.NaN.negate();
      complex1.ONE.abs();
      complex0.INF.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.exp();
      complex2.I.reciprocal();
      complex3.ZERO.nthRoot(181);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.INF.negate();
      complex4.NaN.sqrt1z();
      complex0.cosh();
      Complex complex6 = complex5.multiply(complex3);
      complex4.negate();
      complex6.add((double) 181);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(2.2254737134350224E-8, 20.0);
      complex0.tan();
      complex0.atan();
      Complex.valueOf(20.0, (-2101.7278));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.I.atan();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.I.subtract(927.79740253517);
      complex1.atan();
      complex1.sin();
      Complex complex3 = complex0.multiply((-20.0));
      complex3.INF.toString();
      complex3.ONE.createComplex(2.293484705670837E-6, (-20.0));
      Complex complex4 = complex3.log();
      complex4.multiply((-58));
      complex4.createComplex((-20.0), 2.293484705670837E-6);
      complex4.getField();
      Complex complex5 = complex0.negate();
      Complex.valueOf(239.8669820714109, (-1.5537822254703575E-14));
      Complex complex6 = Complex.valueOf((-20.0));
      complex6.ONE.hashCode();
      complex6.acos();
      complex5.multiply(complex4);
      Complex complex7 = complex4.cosh();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.2254737134350224E-8);
      Complex complex1 = complex0.tan();
      complex1.atan();
      Complex.valueOf(0.2546725273132324, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2.2254737134350224E-8, 2.2254737134350224E-8);
      Complex complex1 = Complex.valueOf(2.2254737134350224E-8, 1769.0);
      Complex complex2 = complex1.acos();
      complex2.multiply(715);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.conjugate();
      complex2.tan();
      Complex complex5 = complex4.conjugate();
      Object object0 = new Object();
      Complex complex6 = complex5.multiply(1.6374890804290771);
      Complex complex7 = Complex.ZERO;
      complex2.equals(complex7);
      complex3.add(complex5);
      complex6.divide(Double.NaN);
      complex4.multiply(complex7);
      Complex complex8 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1009.593, Double.NaN);
      Complex complex2 = new Complex((-641.5398797266774), 0.0015948606356686352);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(2.2254737134350224E-8, 2.2254737134350224E-8);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.pow((double) 739);
      complex1.nthRoot(739);
      complex0.sinh();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2.2254737134350224E-8, 2.2254737134350224E-8);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.asin();
      complex1.reciprocal();
      complex0.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.add((-330.21812));
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(2.2254737134350224E-8, 2.2254737134350224E-8);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = new Complex(2.2254737134350224E-8, 2.2254737134350224E-8);
      complex1.add((-1.557407724654902));
      complex0.abs();
      // Undeclared exception!
      complex2.nthRoot(1479390462);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.multiply((-2146689405));
      complex3.tan();
      Complex complex4 = complex1.add(complex0);
      complex2.conjugate();
      complex1.readResolve();
      Complex complex5 = complex2.multiply((double) (-2146689405));
      Complex complex6 = new Complex(5.5248245189432055E-5);
      Complex complex7 = Complex.ONE;
      complex6.equals(complex7);
      complex3.asin();
      complex7.divide(complex6);
      Complex complex8 = complex5.negate();
      complex0.multiply(complex8);
      complex1.cosh();
      complex4.divide((double) (-2146689405));
      Complex.valueOf(587.636, 587.636);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      complex0.INF.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tan();
      complex0.add(complex1);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = (Complex)complex0.readResolve();
      complex2.multiply((double) 717);
      complex3.equals(complex5);
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.ZERO;
      complex1.equals(complex2);
      Complex complex8 = complex4.asin();
      Complex complex9 = complex6.divide(complex4);
      Complex complex10 = new Complex(0.0, 0.0);
      complex5.multiply(complex9);
      Complex complex11 = Complex.ONE;
      complex8.cosh();
      Complex complex12 = new Complex((-661.201411291), 20.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(9.036979908577676, 9.036979908577676);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.reciprocal();
      complex0.nthRoot(337);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.createComplex(20.0, 20.0);
      Complex complex6 = complex4.add(complex2);
      complex3.sin();
      complex6.getField();
      complex3.isInfinite();
      complex2.sin();
      complex6.log();
      Complex complex7 = complex1.add(complex3);
      Complex.valueOf((double) 337, 20.0);
      Complex complex8 = Complex.ONE;
      complex8.atan();
      complex8.sqrt1z();
      complex5.tanh();
      Complex complex9 = Complex.ZERO;
      complex3.sqrt();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.reciprocal();
      complex1.nthRoot(337);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.createComplex((-2587.772452698732), (-20.0));
      Complex complex6 = new Complex(2.2254737134350224E-8, (-20.0));
      complex1.add(complex6);
      Complex complex7 = complex6.sin();
      complex3.getField();
      Complex complex8 = new Complex((-20.0), 4365.0418);
      complex8.isInfinite();
      complex7.NaN.sin();
      complex2.sin();
      complex4.log();
      complex1.add(complex7);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.log();
      complex2.atan();
      Complex complex11 = Complex.INF;
      complex11.sqrt1z();
      complex10.tanh();
      complex0.divide(4365.0418);
      complex0.sqrt();
      complex9.conjugate();
      complex5.divide((-2587.772452698732));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.multiply(448);
      Complex complex1 = Complex.ONE;
      complex0.INF.getArgument();
      Complex complex2 = new Complex(469.7);
      complex2.sin();
      Complex complex3 = Complex.ZERO;
      complex0.nthRoot(448);
      Complex complex4 = new Complex(1857.5849857331996);
      complex4.abs();
      complex4.sinh();
      complex1.atan();
      Complex complex5 = new Complex(2904.3702, (-908.0));
      complex5.cos();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.getArgument();
      Complex complex2 = Complex.INF;
      complex2.tan();
      Complex complex3 = Complex.NaN;
      complex1.add(0.0);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = new Complex((-597.9066), (-597.9066));
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex5.divide((-597.9066));
      Complex.valueOf(1.5707963267948966, (-1845.8966651972087));
      complex0.atan();
      complex6.multiply(complex7);
      Complex.valueOf(2566.0);
      Complex complex8 = Complex.ONE;
      complex8.tanh();
      complex3.tanh();
      Complex complex9 = Complex.valueOf(Double.NaN, Double.NaN);
      complex3.add(2.2254736639076897E-8);
      complex9.abs();
      complex8.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2.2254737134350224E-8, 2.2254737134350224E-8);
      Complex complex1 = complex0.subtract(2.2254737134350224E-8);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = new Complex((-73.844), 2.2254737134350224E-8);
      Complex.valueOf((-2909.690872));
      complex0.multiply(complex3);
      Complex complex5 = Complex.ONE;
      complex3.cosh();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-2909.690872));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-413.09482), (-413.09482));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.I.reciprocal();
      complex3.INF.nthRoot(337);
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.createComplex((-413.09482), (-413.09482));
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex6.sin();
      complex7.INF.getField();
      complex7.isInfinite();
      Complex complex8 = Complex.valueOf((-4570.393774408754), 1301.1);
      Complex complex9 = complex8.atan();
      Complex complex10 = complex5.multiply(complex7);
      Complex complex11 = Complex.valueOf((-413.09482));
      Complex complex12 = complex7.tanh();
      complex10.tanh();
      complex1.multiply(complex2);
      complex9.atan();
      complex4.createComplex(1769.0, (-413.09482));
      complex5.multiply(1692.286);
      complex7.abs();
      complex12.atan();
      Complex complex13 = new Complex(Double.NaN);
      complex0.multiply(complex11);
      complex6.add((-2068.0));
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      complex0.ONE.multiply(717);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.tan();
      complex0.add(complex1);
      Complex complex5 = complex3.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex3.multiply((double) 717);
      complex4.equals(object0);
      complex0.asin();
      Complex complex7 = Complex.ZERO;
      complex6.multiply(complex7);
      complex5.cosh();
      Complex complex8 = complex2.divide(126.9);
      Complex.valueOf((-1845.8966651972087), 587.636);
      Complex complex9 = new Complex(1426.3752723272, 1769.0);
      complex9.atan();
      Complex complex10 = complex8.multiply(1426.3752723272);
      complex2.abs();
      Complex.valueOf((-2377.75685));
      complex10.atan();
      Complex complex11 = Complex.NaN;
      complex11.multiply(complex4);
      complex9.pow((-2991.91763476542));
      Complex complex12 = Complex.ZERO;
      try { 
        complex12.nthRoot((-2135743953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,135,743,953
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex2.getArgument();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.NaN;
      complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.multiply(717);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tan();
      complex0.add(complex1);
      Complex complex6 = complex4.conjugate();
      Object object0 = complex0.readResolve();
      complex4.multiply((double) 717);
      complex5.equals(object0);
      complex5.asin();
      complex4.ZERO.divide(complex1);
      complex3.multiply(complex4);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.log();
      Complex complex9 = complex2.atan();
      complex6.sqrt1z();
      Complex complex10 = Complex.valueOf((-1268373.0));
      complex10.tanh();
      Complex complex11 = complex8.divide(1769.0);
      complex11.sqrt();
      Complex.valueOf((-6.0490084078440215E175), 8.319947089683576E-278);
      complex9.subtract((-1268373.0));
      complex6.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(448);
      Complex complex2 = Complex.ONE;
      complex0.INF.getArgument();
      Complex complex3 = complex0.I.reciprocal();
      complex0.tan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.negate();
      complex6.ZERO.subtract(0.7853981633974483);
      Complex complex7 = Complex.valueOf((double) 448);
      complex7.ZERO.atan();
      complex5.subtract(complex1);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex.valueOf(0.0, (-656.8783));
      Complex complex0 = Complex.valueOf(1772.81875791);
      Complex complex1 = complex0.ONE.tanh();
      complex1.INF.tanh();
      Complex complex2 = Complex.ZERO;
      complex2.atan();
      Complex complex3 = complex0.asin();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.multiply(717);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = (Complex)complex0.readResolve();
      Complex complex9 = complex4.multiply((double) 717);
      complex5.equals(complex8);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex6.divide(complex10);
      Complex complex12 = complex9.multiply(complex11);
      complex7.cosh();
      complex2.divide(126.9);
      Complex.valueOf((-1845.8966651972087), 587.636);
      complex8.atan();
      Complex complex13 = complex3.multiply(complex6);
      Complex.valueOf((double) 717);
      complex13.tanh();
      complex4.divide(1769.0);
      complex12.sqrt();
      Complex.valueOf((-1845.8966651972087), 5326.9);
      Complex complex14 = complex12.subtract(1574.709545);
      complex14.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      complex0.INF.acos();
      complex0.ONE.multiply(717);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.add(complex1);
      complex2.cosh();
      Complex complex5 = Complex.I;
      complex0.tan();
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.multiply(717);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = (Complex)complex0.readResolve();
      Complex complex8 = complex3.multiply((double) 717);
      complex4.equals(complex7);
      Complex complex9 = complex0.asin();
      Complex complex10 = complex5.divide(complex9);
      complex8.multiply(complex10);
      Complex complex11 = complex6.cosh();
      complex2.divide(126.9);
      Complex.valueOf((-1845.8966651972087), 587.636);
      Complex complex12 = complex7.atan();
      Complex complex13 = complex3.multiply(complex5);
      Complex.valueOf((double) 717);
      complex12.tanh();
      complex4.tanh();
      complex13.multiply(complex2);
      complex6.atan();
      complex0.I.createComplex(0.0, 587.636);
      Complex complex14 = complex1.multiply(6.283185307179586);
      complex8.abs();
      complex10.atan();
      Complex complex15 = new Complex((-1.8359244902596882E-7));
      complex11.multiply(complex15);
      complex2.add(1213.7718735561);
      complex14.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      complex0.ONE.multiply(717);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = (Complex)complex0.readResolve();
      Complex complex8 = complex3.multiply((double) 717);
      complex4.equals(complex7);
      Complex complex9 = complex0.asin();
      Complex complex10 = complex5.divide(complex9);
      complex8.multiply(complex10);
      complex6.cosh();
      complex2.divide(126.9);
      Complex.valueOf((-1845.8966651972087), 587.636);
      complex7.atan();
      Complex complex11 = Complex.valueOf((-1805.0003458980368), 1563.5156277946674);
      Complex complex12 = complex11.cosh();
      complex12.ZERO.acos();
      complex10.negate();
      complex4.subtract((-1845.8966651972087));
      Complex complex13 = Complex.valueOf(833.3318565572869);
      complex2.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      complex0.nthRoot(1);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.createComplex(1.0, 2202.0426558157);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex2.sin();
      complex1.getField();
      complex2.isInfinite();
      Complex complex6 = complex3.sin();
      complex0.log();
      complex5.add(complex3);
      Complex complex7 = complex6.log();
      complex7.atan();
      Complex complex8 = complex4.sqrt1z();
      complex5.tanh();
      Complex complex9 = new Complex(2.1629743576049805);
      complex9.divide(1769.0);
      Complex complex10 = Complex.ONE;
      complex10.sqrt();
      Complex.valueOf((-3121.118), (-20.0));
      complex2.subtract(2202.0426558157);
      Complex complex11 = complex6.subtract((-1.2788888028176841));
      complex11.add(2.1629743576049805);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3104.0506853764), (-3104.0506853764));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex3.add(526.84);
      complex0.sinh();
      complex1.subtract((-3104.0506853764));
      complex4.divide(complex1);
      complex2.negate();
      complex1.sinh();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-413.09482), (-413.09482));
      Complex complex2 = complex0.multiply(1361);
      Complex complex3 = complex2.pow(complex0);
      complex3.getArgument();
      complex0.reciprocal();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.tanh();
      complex5.cosh();
      Complex complex6 = complex4.negate();
      complex6.subtract(Double.NaN);
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex1.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.cosh();
      complex2.getField();
      Complex complex4 = complex2.negate();
      complex1.INF.getField();
      complex4.ONE.abs();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex6.INF.divide(complex7);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex3.createComplex((-1220.763), Double.POSITIVE_INFINITY);
      complex3.subtract(complex8);
      Complex complex10 = complex3.tan();
      complex10.sinh();
      Complex complex11 = complex8.negate();
      complex11.INF.log();
      Complex complex12 = complex3.add((-1220.763));
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex13.I.pow(complex12);
      Complex complex15 = complex14.ZERO.exp();
      complex13.INF.divide(2.1629743576049805);
      complex14.INF.divide(664.090800635623);
      complex8.getField();
      complex9.acos();
      complex15.abs();
      Complex complex16 = Complex.NaN;
      complex2.divide(complex16);
      complex15.negate();
      complex16.divide(complex0);
      Complex.valueOf(664.090800635623, 1.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.divide(526.84);
      Complex complex3 = complex2.I.negate();
      complex3.NaN.add((-2802.536));
      Complex.valueOf(526.84);
      Complex.valueOf((-191.38320028));
      Complex complex4 = complex1.cos();
      complex4.acos();
      Complex complex5 = complex4.exp();
      complex5.ONE.cosh();
      complex1.negate();
      complex5.I.subtract((-2802.536));
      complex0.asin();
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex6.subtract((-980.69735381));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.subtract(complex0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(448);
      complex1.NaN.pow(complex0);
      complex0.INF.getArgument();
      Complex complex2 = complex0.I.reciprocal();
      complex0.tan();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex2.cosh();
      complex4.negate();
      Complex complex5 = complex0.reciprocal();
      complex3.conjugate();
      complex5.negate();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.divide(526.84);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.NaN.add((-2802.536));
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex1.add(526.84);
      Complex complex8 = complex3.sinh();
      complex7.abs();
      complex1.negate();
      complex4.getField();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.sqrt1z();
      complex9.isInfinite();
      complex2.isNaN();
      Complex.valueOf(2.0, 0.7615941559557649);
      Complex complex11 = complex1.sqrt1z();
      complex10.nthRoot(3125);
      Complex.valueOf((double) 2696, (double) 3125);
      complex5.log();
      complex6.getImaginary();
      Complex complex12 = complex11.cosh();
      Complex.valueOf(2.0);
      complex8.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.readResolve();
      Complex complex1 = complex0.multiply(1953.03264057834);
      Complex complex2 = Complex.valueOf((double) (-3723), 1953.03264057834);
      complex1.equals(complex2);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = new Complex(1953.03264057834, 1953.03264057834);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.cosh();
      Complex complex9 = Complex.valueOf((-3126.05192), 1.0);
      complex6.atan();
      Complex complex10 = complex8.multiply(complex4);
      Complex complex11 = Complex.valueOf((double) (-3723));
      complex11.tanh();
      complex4.tanh();
      complex10.multiply(complex1);
      complex10.atan();
      complex9.multiply((-2991.91763476542));
      complex0.abs();
      Complex complex12 = Complex.valueOf((-2377.75685));
      complex12.atan();
      complex1.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-515.57142516));
      complex0.INF.abs();
      complex0.isInfinite();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.tanh();
      complex2.divide(1953.03264057834);
      complex6.pow(complex2);
      complex0.exp();
      complex5.toString();
      Complex complex8 = complex2.add((-515.57142516));
      complex4.toString();
      complex4.readResolve();
      Complex complex9 = complex8.log();
      complex3.toString();
      complex5.getArgument();
      complex2.cos();
      Complex.valueOf(1326.856902);
      complex9.exp();
      complex0.pow((-3.1516131027023284E-8));
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-413.09482), (-413.09482));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.I.reciprocal();
      complex3.INF.nthRoot(337);
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex4.ONE.multiply(complex0);
      complex0.createComplex((-954.7956307223), (-954.7956307223));
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex6.sin();
      complex7.INF.getField();
      complex3.subtract((-413.09482));
      complex2.subtract(complex7);
      Complex complex8 = complex1.subtract(complex0);
      complex6.tan();
      complex0.add((-413.09482));
      complex8.cos();
      Complex complex9 = complex8.tan();
      complex3.subtract((-954.7956307223));
      complex9.asin();
      complex5.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.multiply(717);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.add(complex1);
      complex4.conjugate();
      Object object0 = complex0.readResolve();
      complex4.multiply((double) 717);
      complex5.equals(object0);
      Complex complex7 = complex5.asin();
      complex4.ZERO.divide(complex1);
      complex3.multiply(complex4);
      complex1.INF.cosh();
      Complex.valueOf(0.0, (-656.8783));
      Complex complex8 = complex1.atan();
      complex8.INF.multiply(complex2);
      Complex complex9 = Complex.valueOf((double) 717);
      Complex complex10 = complex9.ONE.tanh();
      complex10.INF.tanh();
      complex7.multiply(complex9);
      complex1.atan();
      complex10.cos();
      Complex.valueOf((-954.7956307223));
      Complex complex11 = Complex.valueOf((-2377.75685), 628.632508351);
      complex11.exp();
      complex6.pow(3725.6941831483);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4472.9);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.cosh();
      complex0.ZERO.getArgument();
      Complex complex3 = complex1.INF.tanh();
      complex3.INF.hashCode();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = (Complex)complex4.I.readResolve();
      Complex complex6 = complex2.ONE.divide(complex0);
      Complex complex7 = complex2.acos();
      complex2.readResolve();
      Complex complex8 = complex1.multiply(0.0);
      complex2.equals("h0D: X@Bbk1)?!Rk");
      Complex complex9 = complex8.asin();
      complex5.divide(complex0);
      Complex complex10 = complex0.multiply(complex1);
      complex3.cosh();
      Complex.valueOf(4472.9, (-656.8783));
      Complex complex11 = complex3.atan();
      complex10.multiply(complex5);
      Complex.valueOf(0.0);
      Complex complex12 = Complex.NaN;
      complex12.tanh();
      Complex complex13 = Complex.valueOf(3808.1142608859);
      complex13.tanh();
      complex4.multiply(complex5);
      complex11.atan();
      complex7.multiply(1373.355207424528);
      complex8.abs();
      complex9.atan();
      complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      complex0.INF.acos();
      Complex complex2 = complex0.ONE.multiply(717);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex5.tanh();
      complex3.cosh();
      complex5.add((-1392.49895623));
      Complex complex8 = complex2.sinh();
      complex8.abs();
      complex6.negate();
      complex4.getField();
      complex8.sqrt1z();
      complex0.isInfinite();
      complex8.isNaN();
      Complex complex9 = Complex.valueOf((-3126.05192), (-1392.49895623));
      complex4.sqrt1z();
      complex2.nthRoot(2696);
      Complex complex10 = Complex.valueOf((-1392.49895623), 2982.410468);
      complex9.log();
      complex10.getImaginary();
      complex7.cosh();
      Complex.valueOf(8.171316954260957);
      complex2.pow(complex10);
      complex5.multiply(2696);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(1922.55897544012);
      Complex complex1 = new Complex(1922.55897544012);
      Complex complex2 = complex1.I.sqrt();
      complex2.reciprocal();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = new Complex(1922.55897544012);
      Complex complex5 = complex3.add(218.73292511326);
      complex5.cos();
      Complex complex6 = Complex.INF;
      complex6.tan();
      complex2.subtract(218.73292511326);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-515.57142516));
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.subtract((-1048.47));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      complex0.multiply(complex2);
      complex1.subtract(complex4);
      complex2.sqrt();
      complex3.abs();
      Complex complex5 = Complex.NaN;
      complex5.pow((-1048.47));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.divide(526.84);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.NaN.add((-2802.536));
      complex1.sqrt();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex2.tanh();
      complex5.tanh();
      complex1.pow(complex3);
      Complex.valueOf((-3696232.014045364), (-3696232.014045364));
      Complex complex7 = complex1.conjugate();
      Complex complex8 = Complex.valueOf(1254.43983446, 2.0);
      Complex complex9 = complex1.multiply(complex8);
      Complex complex10 = complex0.sin();
      complex5.add(3845.117690810177);
      Complex complex11 = new Complex((-2802.536));
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex12.divide(complex4);
      complex1.conjugate();
      complex6.equals(complex14);
      complex0.sqrt1z();
      Complex complex15 = complex9.subtract(complex5);
      complex3.add(3.479545684576179E-8);
      complex8.isInfinite();
      complex15.asin();
      complex7.getReal();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(1.0);
      Complex complex2 = complex1.INF.add(1.0);
      complex0.ONE.getArgument();
      complex1.ZERO.toString();
      complex1.NaN.tan();
      Complex complex3 = complex0.ONE.pow(1.0);
      complex3.ONE.sin();
      complex3.NaN.exp();
      complex1.ZERO.getArgument();
      complex0.getArgument();
      Complex.valueOf(0.7853981633974483);
      Complex.valueOf((-846.7));
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.exp();
      Complex complex7 = new Complex(1.0, (-846.7));
      Complex complex8 = complex7.cosh();
      complex7.negate();
      Complex complex9 = complex5.subtract(0.7853981633974483);
      complex6.asin();
      complex9.pow(complex0);
      complex6.reciprocal();
      Complex complex10 = Complex.valueOf(0.0, 3696232.014045364);
      complex10.conjugate();
      Complex complex11 = Complex.valueOf(0.7853981633974483);
      complex11.negate();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.divide(526.84);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.NaN.add((-2802.536));
      Complex complex5 = Complex.valueOf(526.84);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.pow(complex0);
      Complex.valueOf((-191.38320028), (-2802.536));
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex4.multiply(complex7);
      Complex complex10 = Complex.valueOf(664.833277189398);
      complex10.sin();
      complex8.add((-1897.6189683));
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.NaN;
      complex9.divide(complex13);
      complex6.conjugate();
      complex11.equals(complex0);
      complex1.sqrt1z();
      Complex complex14 = complex12.subtract(complex8);
      Complex complex15 = Complex.valueOf((-2802.536), (-2802.536));
      complex4.isInfinite();
      complex15.asin();
      complex15.getReal();
      complex14.getImaginary();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1922.55897544012);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.multiply(1922.55897544012);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.pow(complex2);
      complex1.divide(1863.482324);
      Complex complex6 = complex2.divide(1863.482324);
      Complex complex7 = complex5.cosh();
      complex7.tan();
      complex2.atan();
      Complex complex8 = Complex.valueOf(1922.55897544012);
      complex8.toString();
      complex3.multiply((-2146270380));
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex8.asin();
      complex6.asin();
      complex8.acos();
      complex6.divide(1863.482324);
      complex0.sin();
      complex10.multiply(0);
      complex9.hashCode();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.multiply(717);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tan();
      complex0.add(complex1);
      complex4.conjugate();
      Complex complex6 = (Complex)complex0.readResolve();
      complex4.multiply((double) 717);
      complex5.equals(complex6);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex3.divide(complex6);
      Complex complex9 = complex4.multiply(complex1);
      complex9.cosh();
      Complex complex10 = Complex.valueOf(1769.0, (-656.8783));
      complex2.atan();
      complex1.multiply(complex10);
      Complex.valueOf((-656.8783));
      Complex complex11 = Complex.ZERO;
      complex11.tanh();
      Complex complex12 = Complex.ONE;
      complex12.tanh();
      Complex complex13 = Complex.ONE;
      complex7.atan();
      Complex complex14 = Complex.valueOf(0.0, 8.171316954260957);
      complex14.multiply(6.283185307179586);
      complex6.abs();
      complex6.atan();
      complex1.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.multiply(717);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = (Complex)complex0.readResolve();
      Complex complex9 = complex4.multiply((double) 717);
      complex5.equals(complex8);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex6.divide(complex10);
      complex9.multiply(complex11);
      Complex complex12 = complex7.cosh();
      complex2.divide(126.9);
      Complex.valueOf((-1845.8966651972087), 587.636);
      Complex complex13 = complex8.atan();
      Complex complex14 = complex3.multiply(complex6);
      Complex.valueOf((double) 717);
      complex13.tanh();
      complex5.tanh();
      complex14.multiply(complex2);
      complex7.atan();
      Complex complex15 = complex1.multiply(6.283185307179586);
      complex9.abs();
      complex11.atan();
      Complex complex16 = new Complex((-1.8359244902596882E-7));
      complex12.multiply(complex16);
      complex2.add(1213.7718735561);
      complex15.abs();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.divide((-2702.81309538219));
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1416.2123516236), (-598.91459767807));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex0.ZERO.divide(complex3);
      Complex complex5 = complex4.INF.add(complex3);
      complex4.ZERO.pow(complex2);
      Complex complex6 = Complex.INF;
      complex6.I.sqrt1z();
      Complex complex7 = complex5.INF.subtract(complex6);
      complex3.I.getField();
      Complex complex8 = complex3.multiply((-391.752));
      complex8.ZERO.reciprocal();
      Complex complex9 = complex3.I.reciprocal();
      Complex complex10 = complex9.NaN.divide(complex1);
      complex10.ZERO.cos();
      Complex complex11 = complex8.divide((-3306.747));
      complex11.pow(complex8);
      complex6.getImaginary();
      complex0.createComplex((-3306.747), (-598.91459767807));
      complex10.negate();
      complex11.multiply(1095.3021632337);
      complex6.multiply(complex8);
      complex7.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(1.0);
      Complex complex2 = complex1.INF.add(1.0);
      complex0.ONE.getArgument();
      complex1.ZERO.toString();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex0.ONE.pow(1.0);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex4.NaN.exp();
      complex1.ZERO.getArgument();
      complex0.getArgument();
      Complex complex7 = complex2.INF.sqrt();
      complex7.I.multiply(complex5);
      complex2.tanh();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.pow(complex2);
      Complex complex10 = Complex.valueOf(0.7853981633974483, 0.0);
      Complex complex11 = complex9.I.conjugate();
      Complex complex12 = complex9.INF.multiply(complex3);
      complex2.sin();
      Complex complex13 = complex9.add(1.0);
      complex4.reciprocal();
      Complex complex14 = Complex.ZERO;
      complex4.divide(complex14);
      Complex complex15 = complex1.conjugate();
      complex12.equals(complex3);
      complex10.sqrt1z();
      complex11.subtract(complex6);
      complex4.add((-728.00032));
      complex14.isInfinite();
      complex6.asin();
      complex15.getReal();
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1769.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ONE.multiply(717);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tan();
      complex0.add(complex1);
      complex4.conjugate();
      Object object0 = complex0.readResolve();
      complex4.multiply((double) 717);
      complex5.equals(object0);
      Complex complex6 = complex5.asin();
      complex4.ZERO.divide(complex1);
      complex3.multiply(complex4);
      Complex complex7 = complex1.INF.cosh();
      Complex.valueOf(0.0, (-656.8783));
      Complex complex8 = complex1.atan();
      complex8.INF.multiply(complex2);
      Complex complex9 = Complex.valueOf(1772.81875791);
      Complex complex10 = complex9.ONE.tanh();
      complex10.INF.tanh();
      Complex complex11 = complex6.multiply(complex9);
      complex1.atan();
      complex8.multiply((-2377.75685));
      complex9.abs();
      complex11.atan();
      complex7.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.ZERO.conjugate();
      complex2.ONE.getArgument();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.asin();
      complex4.INF.asin();
      Complex complex5 = complex0.INF.cosh();
      complex1.ZERO.atan();
      complex5.INF.reciprocal();
      complex0.isNaN();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex3.NaN.multiply(0);
      Complex complex9 = complex8.ZERO.add((-1.0));
      complex7.ONE.tanh();
      complex9.ZERO.divide(complex0);
      Complex.valueOf((-1.0), 0.0);
      complex6.toString();
      complex6.INF.abs();
      complex3.getArgument();
      try { 
        complex7.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.acos();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.divide(0.49999999999999994);
      complex2.ZERO.getArgument();
      complex1.getImaginary();
      Complex complex3 = complex2.pow((-395.84));
      complex3.cosh();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.INF.subtract(complex1);
      complex5.atan();
      Complex complex6 = complex1.cos();
      complex3.cosh();
      Complex complex7 = complex6.I.createComplex(0.0, (-395.84));
      complex7.INF.cos();
      complex7.ZERO.toString();
      Complex complex8 = complex3.createComplex(0.0, Double.NaN);
      Complex complex9 = Complex.valueOf(0.0);
      complex9.NaN.sinh();
      Complex complex10 = complex8.multiply((-11.0));
      complex1.readResolve();
      complex2.divide(complex6);
      Complex.valueOf((-3305.7477212), (-3305.7477212));
      Complex complex11 = complex8.negate();
      complex11.nthRoot(838);
      Complex complex12 = complex3.negate();
      complex12.NaN.sin();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      double double1 = (-1466.5468668);
      Complex complex1 = Complex.valueOf((-1466.5468668));
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.ZERO.sinh();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.ZERO.pow(complex3);
      Complex complex6 = complex1.ONE.cosh();
      complex6.I.conjugate();
      Complex complex7 = complex5.ZERO.sqrt1z();
      Complex complex8 = complex7.INF.cosh();
      complex8.NaN.tan();
      complex0.toString();
      complex4.ONE.sqrt();
      complex5.ZERO.divide((-941.525304));
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.multiply((-1961));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex0.multiply(complex1);
      complex0.getField();
      complex2.createComplex((-485.07304921054), (-149.48422));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2184.477);
      Complex complex1 = Complex.valueOf(2184.477, 0.0);
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.ONE.exp();
      complex3.ZERO.tanh();
      complex0.ONE.add((-1274.638891749));
      Complex complex4 = Complex.valueOf(2184.477, 2184.477);
      complex0.abs();
      Complex complex5 = complex1.ONE.acos();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.I.hashCode();
      complex0.toString();
      Complex complex7 = complex1.I.subtract(complex5);
      Complex complex8 = complex4.atan();
      complex5.subtract(0.0);
      complex1.isNaN();
      complex0.NaN.atan();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex9 = Complex.valueOf(2184.477);
      complex9.ONE.hashCode();
      complex9.NaN.pow(complex2);
      complex9.reciprocal();
      complex4.divide(complex8);
      complex7.toString();
      complex4.acos();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4472.9);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.cosh();
      complex0.ZERO.getArgument();
      Complex complex3 = complex1.INF.tanh();
      complex3.INF.hashCode();
      Complex complex4 = complex3.INF.negate();
      complex4.I.readResolve();
      Complex complex5 = complex2.ONE.divide(complex0);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex1.tanh();
      complex7.ONE.cosh();
      Complex complex8 = complex2.ZERO.add((-1392.49895623));
      complex6.sinh();
      complex7.NaN.abs();
      Complex complex9 = complex6.negate();
      complex1.INF.getField();
      complex9.NaN.sqrt1z();
      complex1.isInfinite();
      complex2.isNaN();
      Complex complex10 = Complex.valueOf(4472.9, 4472.9);
      complex2.ONE.sqrt1z();
      complex10.I.nthRoot(2696);
      Complex.valueOf(2930.987435968775, 2930.987435968775);
      Complex complex11 = complex4.log();
      complex11.getImaginary();
      complex0.cosh();
      Complex.valueOf(1283.0);
      complex5.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.exp();
      complex2.ZERO.pow(complex0);
      Complex complex3 = complex1.ZERO.conjugate();
      complex3.INF.negate();
      Complex complex4 = complex1.ONE.sin();
      complex1.ONE.sqrt1z();
      complex2.INF.createComplex(3786.2242584603, 3786.2242584603);
      complex4.acos();
      complex0.divide(3053.06517);
      complex0.getReal();
      complex1.subtract(0.0);
      Complex complex5 = complex4.log();
      complex1.ZERO.toString();
      complex5.multiply((-370.16));
      complex2.multiply((-587.2019995583));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex3.add((-1.0));
      complex5.ZERO.tanh();
      Complex.valueOf((-1.0), (-1.0));
      complex3.pow(complex4);
      Complex complex6 = complex5.multiply((-1.0));
      complex6.INF.sin();
      complex6.I.sqrt();
      Complex complex7 = complex5.sqrt();
      complex7.INF.sin();
      Complex complex8 = complex3.acos();
      complex8.atan();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = (-4.728528221305482E-9);
      Complex complex0 = Complex.valueOf((-4.728528221305482E-9), 1136.502);
      Complex complex1 = complex0.add(2.0);
      Complex complex2 = complex1.ONE.acos();
      complex0.NaN.nthRoot(17);
      complex0.toString();
      complex2.readResolve();
      double double1 = 0.0;
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1421.192418293, 0.0);
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
      Complex.valueOf((-2001.10355), (-975.50016042035));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.subtract(0.46302127838134766);
      Complex complex3 = complex0.multiply(complex1);
      complex3.I.tan();
      complex1.readResolve();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.I.acos();
      complex4.pow(complex2);
      Complex.valueOf(216.66, 216.66);
      Complex.valueOf(0.46302127838134766);
      complex3.sqrt();
      complex3.cos();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.I.conjugate();
      complex0.I.toString();
      complex0.toString();
      complex0.getField();
      Complex complex3 = complex0.pow(complex2);
      complex3.INF.multiply(1);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.440559532453721E-75);
      Complex complex1 = Complex.valueOf(5.440559532453721E-75, 5.440559532453721E-75);
      Complex complex2 = complex1.I.log();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.multiply(5.440559532453721E-75);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.ONE.reciprocal();
      complex5.ZERO.log();
      Complex complex7 = complex6.NaN.divide(complex1);
      complex7.hashCode();
      complex0.I.sinh();
      complex1.sin();
      complex5.hashCode();
      complex6.getReal();
      Complex complex8 = complex4.cos();
      complex8.NaN.negate();
      Complex.valueOf(5.440559532453721E-75, (-501.1682422961));
      Complex complex9 = complex0.atan();
      complex0.NaN.hashCode();
      Complex complex10 = complex8.add(complex9);
      complex3.multiply((-3811.760686693));
      Complex complex11 = complex10.sin();
      complex9.sqrt1z();
      complex11.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.ZERO.readResolve();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(1922.55897544012);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.reciprocal();
      complex3.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      complex4.ZERO.multiply(complex2);
      complex2.subtract(complex4);
      Complex complex5 = complex0.sqrt();
      complex1.abs();
      complex5.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-515.57142516));
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.subtract((-1048.47));
      complex1.subtract(complex0);
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.add((-515.57142516));
      Complex complex4 = complex3.cos();
      complex2.tan();
      complex4.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.atan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      complex2.I.negate();
      complex1.INF.toString();
      Complex complex3 = complex1.ONE.createComplex(2306.425, 0.0);
      complex3.ONE.hashCode();
      Complex complex4 = complex0.divide(2306.425);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex4.INF.sinh();
      complex3.ZERO.sinh();
      complex6.ZERO.tanh();
      Complex complex7 = complex3.NaN.pow(complex0);
      complex7.INF.getField();
      complex0.add(complex1);
      complex5.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(448);
      complex1.NaN.pow(complex0);
      complex0.INF.getArgument();
      Complex complex2 = complex0.I.reciprocal();
      complex0.tan();
      complex2.INF.tanh();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.negate();
      complex4.ZERO.subtract(0.7853981633974483);
      Complex.valueOf((double) 448);
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.add((double) 1);
      Complex complex3 = complex0.sinh();
      complex1.subtract(0.0);
      complex3.NaN.divide(complex2);
      complex1.negate();
      Complex complex4 = complex1.sinh();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-2.2929764629585683E126), Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.ZERO.hashCode();
      complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.multiply((-3723));
      Complex complex1 = complex0.cos();
      complex1.ZERO.acos();
      Complex.valueOf(0.24171993136405945, 0.24171993136405945);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      complex1.INF.sqrt1z();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex1.ONE.toString();
      Complex complex3 = complex1.ONE.reciprocal();
      complex3.ONE.asin();
      complex0.isNaN();
      Complex complex4 = complex0.subtract(complex2);
      complex4.ONE.readResolve();
      complex0.isInfinite();
      Complex complex5 = complex1.log();
      complex5.NaN.log();
      int int0 = (-274);
      try { 
        complex3.nthRoot((-274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -274
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(949.9556745066764);
      Complex complex1 = Complex.valueOf(949.9556745066764, 949.9556745066764);
      complex1.INF.conjugate();
      complex0.I.divide(complex1);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.INF.tan();
      Complex complex7 = complex4.ONE.subtract(949.9556745066764);
      Complex complex8 = complex6.ONE.createComplex(949.9556745066764, (-1.0));
      Complex.valueOf(2.0);
      complex3.I.subtract(0.0);
      Complex.valueOf(949.9556745066764);
      complex6.createComplex((-1024.69411170168), (-1024.69411170168));
      Complex complex9 = complex4.subtract(949.9556745066764);
      complex0.getField();
      complex5.isNaN();
      complex9.divide(0.0);
      complex3.reciprocal();
      Complex complex10 = complex8.divide(1.3589033107846643E-196);
      complex10.ZERO.tanh();
      complex7.getArgument();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.09761576354503632, 0.09761576354503632);
      Complex complex1 = complex0.ZERO.sinh();
      complex0.readResolve();
      Complex complex2 = complex1.ZERO.conjugate();
      complex1.INF.toString();
      Complex complex3 = complex2.I.createComplex(Double.POSITIVE_INFINITY, (-2418.4311));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.ONE.sqrt();
      complex4.NaN.reciprocal();
      Complex complex6 = complex4.exp();
      complex4.INF.cos();
      Complex complex7 = complex6.pow(complex4);
      complex7.toString();
      complex3.pow(0.0);
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex5.acos();
      complex9.NaN.hashCode();
      complex8.multiply(9);
      complex0.isNaN();
      complex2.createComplex(Double.POSITIVE_INFINITY, 0.09761576354503632);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(1530.3267263486991, 0.0);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.sqrt();
      complex3.INF.tan();
      Complex complex4 = complex3.add(1530.3267263486991);
      complex4.INF.pow(complex3);
      complex2.cos();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.multiply((-939.2085938));
      complex6.sqrt();
      Complex complex7 = complex5.sqrt();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      complex1.ZERO.readResolve();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.log();
      complex0.getArgument();
      Complex complex4 = complex0.add(0.7853981633974483);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.INF.multiply((-2138.1));
      Complex complex7 = complex3.multiply(1091);
      complex3.getArgument();
      complex6.isNaN();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex2.log();
      complex9.ZERO.subtract(complex3);
      Complex complex10 = complex8.multiply(647);
      complex2.ONE.pow(complex9);
      Complex complex11 = complex8.subtract(complex2);
      Complex complex12 = complex0.sin();
      complex10.ZERO.add(complex8);
      complex8.NaN.tanh();
      Complex.valueOf(3174.19101396, (-2759.051555873104));
      complex8.ZERO.add(complex10);
      Complex complex13 = complex11.pow(0.0);
      complex1.readResolve();
      Complex complex14 = complex5.pow(complex6);
      complex6.cosh();
      complex14.tan();
      complex7.reciprocal();
      complex13.exp();
      complex12.add(complex13);
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.atan();
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.ZERO.exp();
      complex0.INF.subtract(0.0);
      Complex complex3 = complex2.ONE.multiply(2.0);
      Complex complex4 = Complex.ZERO;
      complex3.pow(complex4);
      Complex complex5 = complex2.I.divide(0.0);
      complex5.ZERO.divide(0.0);
      complex2.ONE.cosh();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.ONE.atan();
      complex0.toString();
      Complex complex8 = complex0.multiply(2994);
      complex6.conjugate();
      Complex complex9 = complex7.asin();
      complex9.asin();
      Complex complex10 = complex8.acos();
      complex1.divide(2.0);
      complex4.sin();
      complex10.multiply(2994);
      complex3.hashCode();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(1777.69019);
      complex0.INF.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.pow(6.283185307179586);
      complex3.divide(complex1);
      complex1.getImaginary();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.I.getArgument();
      Complex complex2 = complex0.NaN.log();
      complex0.getImaginary();
      complex0.sqrt();
      complex0.ZERO.sqrt();
      complex1.subtract(0.0);
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex3.ZERO.createComplex(6.283185307179586, (-1267.94));
      complex2.ZERO.tan();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = complex5.NaN.tan();
      complex6.I.abs();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex1.INF.log();
      complex8.ONE.toString();
      complex7.I.multiply(1352);
      Complex complex9 = complex7.I.divide(complex1);
      complex9.NaN.multiply(1);
      Complex.valueOf(0.0, 6.283185307179586);
      Complex complex10 = complex1.reciprocal();
      complex10.I.acos();
      complex2.sqrt1z();
      Complex.valueOf(1.0);
      complex7.readResolve();
      complex1.isInfinite();
      Complex complex11 = complex8.multiply(complex5);
      complex11.sinh();
      Complex complex12 = complex2.asin();
      complex6.subtract((-1214.0));
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-413.09482), (-413.09482));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.I.reciprocal();
      List<Complex> list0 = complex3.INF.nthRoot(337);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(1, list0.size());
      
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.createComplex((-954.7956307223), (-954.7956307223));
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex6.sin();
      complex7.INF.getField();
      complex7.isInfinite();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex7.ZERO.log();
      complex2.I.add(complex5);
      Complex complex10 = complex6.log();
      Complex complex11 = complex6.I.atan();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex10.tanh();
      Complex complex14 = complex11.divide((-1077.14));
      complex7.pow(complex6);
      Complex complex15 = complex8.exp();
      complex6.ZERO.toString();
      Complex complex16 = complex2.add((-3.1516131027023284E-8));
      assertSame(complex16, complex14);
      
      String string0 = complex13.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      complex15.readResolve();
      Complex complex17 = complex12.log();
      complex4.toString();
      double double0 = complex17.getArgument();
      assertEquals((-0.12267226127896809), double0, 0.01);
      
      Complex complex18 = complex8.cos();
      Complex complex19 = Complex.valueOf((-0.12267226127896809));
      complex19.exp();
      Complex complex20 = complex18.pow((-954.7956307223));
      assertSame(complex20, complex4);
      assertFalse(complex20.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      Complex complex1 = complex0.ONE.sinh();
      assertEquals(1.1752011936438014, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.add(0.0);
      List<Complex> list0 = complex3.NaN.nthRoot(315);
      assertTrue(list0.contains(complex2));
      
      Complex complex5 = complex0.pow(624.0);
      Complex complex6 = complex5.I.multiply(315);
      assertEquals(6.663068956380144E-14, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(315.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.pow(complex0);
      assertEquals((-0.33967712510266856), complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex4));
      
      Complex complex8 = complex2.negate();
      assertTrue(complex8.isNaN());
  }
}
