/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:47:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.multiply(1683.233101866867);
      Complex complex2 = complex0.pow(1683.233101866867);
      complex2.I.atan();
      complex2.NaN.abs();
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.valueOf(0.440646231174469, Double.NaN);
      Complex complex7 = complex0.conjugate();
      complex7.atan();
      Complex complex8 = complex2.cos();
      complex5.subtract(complex3);
      Complex complex9 = complex4.add(1.0);
      complex8.sqrt1z();
      Complex complex10 = complex5.reciprocal();
      complex10.pow(complex9);
      complex6.negate();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.exp();
      complex0.I.abs();
      Complex complex3 = complex1.INF.multiply(2369.0);
      Complex complex4 = complex3.ONE.cos();
      complex1.ZERO.readResolve();
      Complex complex5 = complex1.add(1735.5180825575);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex0.INF.reciprocal();
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex8.I.createComplex(1735.5180825575, Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.exp();
      Complex complex11 = complex0.multiply(1914);
      Complex complex12 = complex11.INF.cosh();
      Complex complex13 = complex12.ONE.sqrt();
      complex9.sin();
      Complex complex14 = complex11.sinh();
      Complex complex15 = complex14.ZERO.createComplex(1914, 1914);
      complex15.INF.nthRoot(1914);
      complex9.multiply(2.0);
      Complex complex16 = complex4.createComplex(Double.NaN, (-4004.18));
      complex16.INF.multiply(complex6);
      complex7.acos();
      complex16.sin();
      complex10.pow(6.44741641521183E-102);
      complex2.reciprocal();
      complex13.multiply(1914);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3.634781057940233E121, 3.634781057940233E121);
      complex0.abs();
      complex0.createComplex(3.634781057940233E121, 1.0);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.subtract(complex1);
      Complex.valueOf((-5235.887788791637));
      Complex complex2 = new Complex((-5235.887788791637), 220.88800487964176);
      Complex complex3 = Complex.valueOf(20.0, (-20.0));
      Complex complex4 = complex1.divide(complex3);
      Complex.valueOf((-2.7414519936817378E7));
      Complex complex5 = complex1.subtract(643.0);
      Complex complex6 = complex5.negate();
      complex2.sqrt1z();
      Complex complex7 = Complex.valueOf(20.0, 20.0);
      complex7.nthRoot(1931);
      Complex complex8 = new Complex(1566.0);
      Complex complex9 = Complex.NaN;
      complex4.multiply(1931);
      Complex complex10 = Complex.INF;
      complex10.tanh();
      complex5.getField();
      complex9.getField();
      Complex complex11 = complex7.tanh();
      complex11.asin();
      complex6.tan();
      Complex.valueOf(1.0);
      complex0.multiply(904.4465);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9887375831604004, 20.0);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      complex2.I.tan();
      Complex complex3 = complex2.ZERO.add(655.0000000158722);
      Complex complex4 = complex2.add((-2291.5923585));
      complex1.subtract(complex2);
      Complex complex5 = complex4.multiply((-2291.5923585));
      complex5.ONE.tanh();
      complex5.conjugate();
      Complex complex6 = complex3.reciprocal();
      complex6.createComplex(867.93, 1730.717895);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(4.7976477743232285E-102, Double.POSITIVE_INFINITY);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.ONE.negate();
      complex0.I.hashCode();
      complex1.getField();
      complex1.NaN.multiply(complex0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex2.NaN.log();
      complex4.INF.hashCode();
      Complex complex5 = complex2.I.asin();
      complex5.toString();
      Complex complex6 = complex5.I.reciprocal();
      complex6.ONE.sin();
      complex0.toString();
      Complex complex7 = complex0.add(0.0);
      complex7.asin();
      complex0.negate();
      Complex complex8 = complex1.multiply(complex7);
      complex8.reciprocal();
      complex7.conjugate();
      complex3.sqrt();
      complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.sqrt();
      complex1.tanh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.8414709848078965);
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex.valueOf(4.7976477743232285E-102, 4.7976477743232285E-102);
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tan();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.pow(complex1);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(7.443183069947207, 7.443183069947207);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply((-1072));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.multiply(Double.NaN);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.subtract(690.986413);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex3.sqrt();
      complex4.toString();
      Complex complex5 = complex3.add(complex4);
      complex5.INF.exp();
      Complex complex6 = complex0.divide(4597.27);
      complex6.getField();
      complex2.multiply((-2.9013441705763093E-8));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(Double.NaN);
      complex1.atan();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(7.443183069947207, 7.443183069947207);
      complex0.ONE.divide(7.443183069947207);
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.04674194008111954, 0.04674194008111954);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.subtract(0.04674194008111954);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex4.ZERO.pow(complex1);
      complex6.getArgument();
      complex5.ZERO.cosh();
      Complex complex7 = complex0.createComplex(0.04674194008111954, 0.04674194008111954);
      complex7.I.abs();
      Complex complex8 = complex7.sin();
      complex7.subtract(complex1);
      Complex complex9 = complex4.negate();
      complex9.ONE.sqrt1z();
      complex0.getField();
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex10.conjugate();
      Complex complex13 = complex12.NaN.exp();
      complex13.INF.subtract(complex3);
      Complex complex14 = complex11.multiply(2054114793);
      complex14.ONE.reciprocal();
      complex8.divide(complex1);
      // Undeclared exception!
      complex1.nthRoot(2054114793);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 7.066491077377918E172);
      Complex complex1 = complex0.ZERO.asin();
      complex1.ZERO.createComplex(1512.4259971769, 1512.4259971769);
      Complex complex2 = complex0.sqrt();
      complex0.conjugate();
      Complex complex3 = complex0.cosh();
      complex3.INF.divide(18.565201919842824);
      complex0.ZERO.toString();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.subtract(7.066491077377918E172);
      Complex complex6 = complex5.ONE.pow(complex2);
      complex6.I.sinh();
      Complex.valueOf(Double.NaN);
      Complex complex7 = complex4.tan();
      complex1.negate();
      complex4.sqrt();
      complex7.ZERO.log();
      complex1.sinh();
      complex7.readResolve();
      complex6.toString();
      Complex complex8 = complex5.pow(complex0);
      complex8.divide(18.565201919842824);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.INF.subtract(1437.145623277);
      Complex complex3 = complex0.NaN.tan();
      complex3.ONE.atan();
      complex3.ONE.cosh();
      complex0.acos();
      Complex complex4 = complex3.divide((-860.8728873023424));
      try { 
        complex4.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.negate();
      complex0.cos();
      complex1.abs();
      Complex complex3 = Complex.INF;
      complex1.ZERO.toString();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(complex0);
      Complex complex2 = complex0.tan();
      complex2.ONE.hashCode();
      Complex complex3 = complex1.multiply((-637));
      Complex complex4 = complex2.divide(complex3);
      complex4.INF.tanh();
      Complex complex5 = complex3.pow((double) (-637));
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.NaN.subtract(complex1);
      complex0.NaN.abs();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf((-79.138449), Double.NaN);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.ZERO.sinh();
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = complex0.cosh();
      complex7.hashCode();
      Complex complex8 = complex5.I.pow(complex1);
      complex2.ONE.sin();
      complex8.pow(complex2);
      Complex complex9 = complex5.ZERO.add(complex3);
      Complex complex10 = complex2.sinh();
      complex9.INF.divide((-1232.74068));
      Complex complex11 = complex10.I.negate();
      complex10.ZERO.hashCode();
      Complex complex12 = Complex.valueOf((-79.138449));
      complex12.I.log();
      Complex complex13 = complex6.acos();
      complex13.INF.exp();
      complex0.readResolve();
      complex5.pow(Double.NaN);
      complex11.multiply(7.609396391563323E66);
      Complex complex14 = complex9.reciprocal();
      complex7.sinh();
      complex0.createComplex((-79.138449), (-79.138449));
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9));
      complex0.I.add((-2.2258513086839407E-9));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tan();
      complex1.multiply(776);
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9032581477488686E284, 2.9032581477488686E284);
      Complex complex1 = Complex.valueOf(2.9032581477488686E284, 2.9032581477488686E284);
      complex1.ZERO.toString();
      Complex complex2 = complex0.pow(2.9032581477488686E284);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.cosh();
      complex5.ZERO.cos();
      complex3.INF.abs();
      complex0.multiply(complex1);
      Complex complex6 = Complex.INF;
      complex3.equals(complex2);
      complex6.divide(complex2);
      complex0.pow((-1924.773107531081));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1.1214757379328965E-8), (-1.1214757379328965E-8));
      Complex complex1 = Complex.valueOf((-1.1214757379328965E-8), (-41.58585383715));
      Complex complex2 = Complex.valueOf(4.7976477743232285E-102, (-41.58585383715));
      complex2.toString();
      Complex complex3 = complex1.pow((-9.785306155980342E-26));
      complex3.negate();
      complex3.cos();
      complex0.abs();
      complex3.sqrt1z();
      complex2.asin();
      Complex complex4 = Complex.ZERO;
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.3195856225838423);
      Complex complex1 = complex0.conjugate();
      complex1.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = new Complex(2.3195856225838423, 2.3195856225838423);
      Complex complex6 = Complex.valueOf(2.441415786743164, Double.POSITIVE_INFINITY);
      complex4.createComplex(Double.POSITIVE_INFINITY, 2.3195856225838423);
      complex6.acos();
      Complex complex7 = Complex.NaN;
      complex7.pow(complex4);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.3195856225838423);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.multiply(3947);
      Complex complex4 = complex1.I.pow(1.931318759918213);
      complex2.ONE.nthRoot(614);
      Complex complex5 = Complex.I;
      complex5.I.getField();
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = Complex.INF;
      complex0.equals(complex3);
      complex6.divide(Double.POSITIVE_INFINITY);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1.1214757379328965E-8), (-1.1214757379328965E-8));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf((-1.1214757379328965E-8), (-1.1214757379328965E-8));
      Complex.valueOf(2.441415786743164, 0.9999997414156861);
      complex3.createComplex((-1.1214757379328965E-8), 2.441415786743164);
      complex0.hashCode();
      Complex complex4 = complex2.sin();
      complex1.sqrt();
      complex2.sin();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(669.81930841957, 1569.6189015305356);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      complex0.ZERO.log();
      complex3.nthRoot(1141);
      complex1.add(1569.6189015305356);
      Complex complex4 = Complex.valueOf((double) 1141);
      Complex complex5 = complex4.sinh();
      complex1.tanh();
      complex4.tanh();
      complex5.multiply(1389);
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex0.pow((double) 1141);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(669.81930841957, (-1157.2036711798264));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.log();
      complex0.nthRoot(1379);
      complex2.add(2.5154156615442694E-16);
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.sinh();
      complex1.tanh();
      Complex complex6 = complex1.tanh();
      complex4.ONE.multiply(590);
      complex6.multiply(1073741830);
      complex4.sqrt1z();
      complex1.tanh();
      Complex.valueOf(869.6396293798907, 379.67673687145);
      complex3.subtract((-914.866975371));
      complex0.reciprocal();
      complex5.divide(669.81930841957);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.7976477743232285E-102, 4.7976477743232285E-102);
      Complex complex1 = Complex.valueOf(4.7976477743232285E-102, 4.7976477743232285E-102);
      complex1.ZERO.toString();
      complex0.pow(2.9032581477488686E284);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex1.tanh();
      complex5.NaN.sqrt();
      complex5.multiply(1389);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex3.tanh();
      Complex complex8 = Complex.valueOf(627.1856, 2.9032581477488686E284);
      complex7.subtract(0.0);
      complex6.reciprocal();
      complex4.exp();
      complex8.pow(0.6679295301437378);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-914.866975371), (-914.866975371));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.cos();
      complex2.getArgument();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.I.add(complex1);
      Complex complex5 = complex4.INF.subtract(complex3);
      Complex complex6 = complex0.log();
      complex1.createComplex(Double.NaN, (-914.866975371));
      Complex complex7 = complex6.add(complex2);
      complex7.NaN.sin();
      Complex complex8 = complex6.divide(complex7);
      Complex complex9 = complex7.pow(complex8);
      Complex complex10 = complex9.add(Double.NaN);
      complex10.divide(Double.NaN);
      complex10.ONE.sinh();
      complex6.atan();
      complex10.abs();
      Complex complex11 = complex5.divide((-752.9298363));
      complex5.multiply(complex3);
      complex11.divide((-752.9298363));
      complex5.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1.1214757379328965E-8), (-1.1214757379328965E-8));
      Complex complex1 = complex0.tanh();
      complex1.INF.negate();
      complex0.sin();
      Complex complex2 = Complex.valueOf((-1.1214757379328965E-8), (-1.1214757379328965E-8));
      Complex complex3 = complex2.sin();
      Complex.valueOf(2.441415786743164, 0.9999997414156861);
      Complex complex4 = complex2.createComplex((-1.1214757379328965E-8), 2.441415786743164);
      Complex complex5 = complex4.acos();
      complex5.pow(complex4);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-2345.92), (-2345.92));
      complex0.abs();
      Complex complex1 = Complex.valueOf(3317.6318802422916);
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.sqrt();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = new Complex((-2345.92));
      complex5.ONE.readResolve();
      complex4.I.divide(complex5);
      Complex complex6 = new Complex(3317.6318802422916, 3317.6318802422916);
      complex6.NaN.log();
      Complex complex7 = complex6.ZERO.cos();
      complex7.NaN.toString();
      Complex complex8 = complex4.INF.pow(complex6);
      Complex complex9 = Complex.valueOf(5.0);
      complex6.log();
      complex1.getImaginary();
      complex9.readResolve();
      complex0.negate();
      complex8.pow(3008.0);
      Complex complex10 = complex9.add(complex3);
      complex10.tan();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.NaN.add(complex0);
      complex3.ZERO.sqrt();
      complex2.INF.abs();
      complex0.isInfinite();
      complex3.getField();
      Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.negate();
      complex5.NaN.subtract(complex0);
      complex2.multiply((-920.2768161172));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ZERO.pow(complex1);
      complex5.I.readResolve();
      Complex complex8 = Complex.NaN;
      complex5.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1108.52864021));
      complex2.cos();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ONE.subtract(0.0);
      complex0.asin();
      complex1.equals((Object) null);
      complex0.hashCode();
      complex0.I.cos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex1.sqrt();
      complex1.multiply(2206);
      complex5.asin();
      complex0.exp();
      Complex complex7 = complex4.asin();
      complex7.toString();
      complex7.NaN.toString();
      Complex.valueOf(0.0, Double.NaN);
      complex6.pow(complex2);
      complex7.add((double) 2206);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-140.34876), Double.NaN);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex0.multiply(6.73618586233183E-16);
      Complex complex5 = new Complex(20.0);
      Complex complex6 = complex5.divide((-20.0));
      Complex complex7 = complex6.add((-284.6));
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex6.log();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex1.divide(complex3);
      complex10.divide(complex8);
      complex9.isNaN();
      complex9.sqrt1z();
      complex4.divide(complex2);
      complex11.isNaN();
      Complex complex12 = Complex.valueOf(6.73618586233183E-16, (-20.0));
      complex7.multiply(complex1);
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1320);
      complex1.ZERO.conjugate();
      complex0.nthRoot(2119);
      Complex complex2 = complex1.add((-3177.672632));
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.sinh();
      Complex complex5 = new Complex(1320);
      complex5.tanh();
      Complex complex6 = complex1.tanh();
      complex4.multiply(1029);
      complex3.sqrt1z();
      complex3.tanh();
      complex0.reciprocal();
      complex0.reciprocal();
      Complex complex7 = complex6.pow(810.324067619898);
      complex7.multiply(106.188092612);
      complex1.tan();
      complex6.readResolve();
      Complex complex8 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9032581477488686E284, 4.7976477743232285E-102);
      Complex complex1 = Complex.valueOf(4.7976477743232285E-102, 4.7976477743232285E-102);
      Complex complex2 = complex0.I.exp();
      complex0.pow((-0.4161468365471424));
      Complex complex3 = complex1.pow(2.9032581477488686E284);
      complex3.ZERO.negate();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.NaN.multiply(4.7976477743232285E-102);
      Complex complex6 = complex4.add(251.335);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex0.log();
      complex2.cosh();
      complex0.divide(complex5);
      complex6.divide(complex8);
      complex0.pow(1.0);
      complex1.NaN.tan();
      complex7.isNaN();
      complex0.sqrt1z();
      complex2.divide(complex1);
      complex1.isNaN();
      complex3.I.createComplex(499.26, 1.3548138612715822E-9);
      Complex.valueOf(3277.66, 1.8428773880004883);
      complex1.multiply(complex8);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(3214.64477, 2.0);
      Complex complex1 = new Complex((-5968531.410221721));
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf((-1128.095340423042));
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.multiply(complex0);
      complex5.add(complex0);
      Complex complex6 = complex3.multiply(2.0);
      complex6.tanh();
      Complex complex7 = Complex.INF;
      complex7.sqrt1z();
      complex1.exp();
      Complex complex8 = Complex.valueOf((-4036.68328054483), (-206.25493859973));
      complex5.add(complex8);
      complex1.sqrt();
      Complex complex9 = complex2.asin();
      complex3.asin();
      Complex complex10 = Complex.I;
      complex3.toString();
      Complex.valueOf((-1128.095340423042), 3214.64477);
      complex9.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.tan();
      complex1.INF.multiply(3947);
      complex0.I.pow(1.931318759918213);
      complex1.ONE.nthRoot(614);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.multiply(2.0);
      Complex complex5 = complex4.acos();
      complex0.I.sqrt1z();
      Complex complex6 = complex2.ONE.tan();
      Complex.valueOf(0.0);
      complex5.I.hashCode();
      complex4.cosh();
      complex2.reciprocal();
      Complex complex7 = complex6.add((-314.43807027645));
      Complex complex8 = complex6.multiply(complex3);
      complex7.abs();
      complex8.createComplex(Double.POSITIVE_INFINITY, 312.88066255179507);
      complex0.getImaginary();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(669.81930841957, 1569.6189015305356);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.ZERO.log();
      complex3.nthRoot(1141);
      complex1.add(1569.6189015305356);
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex5.tanh();
      complex6.hashCode();
      Complex complex9 = Complex.valueOf((-2411.04442), 3027.2);
      complex9.multiply((double) 1141);
      Complex complex10 = complex7.divide((-2411.04442));
      Complex complex11 = complex1.add(669.81930841957);
      complex10.reciprocal();
      Complex complex12 = complex7.log();
      complex1.cosh();
      complex4.divide(complex11);
      complex8.multiply(complex1);
      complex1.readResolve();
      Object object0 = new Object();
      Complex.valueOf((-2411.04442), 3027.2);
      complex11.equals(")8+G=S");
      Complex complex13 = Complex.I;
      complex12.pow((double) 1141);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      complex2.INF.multiply(3947);
      complex1.I.pow(1.931318759918213);
      complex2.ONE.nthRoot(614);
      Complex complex3 = complex0.exp();
      complex1.asin();
      Complex complex4 = complex0.multiply(2.0);
      complex4.acos();
      Complex complex5 = complex1.I.sqrt1z();
      complex3.ONE.tan();
      Complex.valueOf(0.0);
      complex2.multiply(614);
      Complex complex6 = complex2.sqrt1z();
      complex2.tanh();
      Complex complex7 = complex6.reciprocal();
      complex7.INF.subtract(2.0);
      Complex complex8 = complex5.reciprocal();
      complex2.pow(0.0);
      complex4.multiply((-1895.59786881));
      complex8.tan();
      Complex complex9 = Complex.NaN;
      complex9.readResolve();
      Complex complex10 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(176.02);
      complex0.multiply(1125);
      complex0.subtract(176.02);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4.7976477743232285E-102, 4.7976477743232285E-102);
      Complex complex2 = complex0.cosh();
      complex0.I.exp();
      complex0.pow((-0.4161468365471424));
      Complex complex3 = complex1.pow(2.9032581477488686E284);
      Complex complex4 = complex3.ZERO.negate();
      complex3.cos();
      Complex complex5 = complex0.NaN.multiply(4.7976477743232285E-102);
      complex5.NaN.add(complex2);
      complex4.INF.abs();
      Complex complex6 = new Complex(2.9032581477488686E284, (-0.4161468365471424));
      Complex complex7 = complex0.createComplex(5038.880315178577, 2.9032581477488686E284);
      complex6.asin();
      complex7.add(complex4);
      complex0.multiply(5038.880315178577);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-1733));
      complex1.reciprocal();
      Complex complex2 = new Complex((-900.5467578559058), 1270.8);
      complex2.ONE.negate();
      Complex complex3 = complex2.reciprocal();
      complex1.pow(1270.8);
      Complex complex4 = Complex.valueOf((double) (-1733), (-900.5467578559058));
      complex4.multiply((double) (-1733));
      complex0.tan();
      complex4.ONE.multiply(complex3);
      complex4.readResolve();
      Complex complex5 = Complex.NaN;
      complex4.conjugate();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9032581477488686E284, 4.7976477743232285E-102);
      Complex complex1 = Complex.valueOf(4.7976477743232285E-102, 4.7976477743232285E-102);
      Complex complex2 = complex0.cosh();
      complex0.I.exp();
      complex0.pow((-0.4161468365471424));
      Complex complex3 = complex1.pow(2.9032581477488686E284);
      Complex complex4 = complex3.ZERO.negate();
      complex3.cos();
      Complex complex5 = complex0.NaN.multiply(4.7976477743232285E-102);
      complex5.NaN.add(complex2);
      complex4.INF.abs();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex0.createComplex(5038.880315178577, 2.9032581477488686E284);
      complex6.asin();
      complex7.add(complex4);
      complex0.multiply(5038.880315178577);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.multiply(3947);
      Complex complex4 = complex1.I.pow(1.931318759918213);
      assertEquals(0.1076750837866977, complex4.getImaginary(), 0.01);
      
      List<Complex> list0 = complex2.ONE.nthRoot(614);
      assertEquals(614, list0.size());
      
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.multiply(2.0);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.I.sqrt1z();
      complex5.ONE.tan();
      Complex.valueOf(0.0);
      complex8.I.hashCode();
      complex3.INF.multiply((-2475.5345));
      Complex complex10 = complex5.ONE.divide(394.87618751253);
      complex5.add(0.0);
      Complex complex11 = complex3.reciprocal();
      complex11.ONE.log();
      complex10.cosh();
      assertEquals(0.002532439361054833, complex10.getReal(), 0.01);
      
      Complex complex12 = complex8.INF.divide(complex5);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      
      Complex complex13 = complex11.ONE.divide(complex8);
      assertEquals(0.22913865994738264, complex13.getReal(), 0.01);
      
      complex2.isNaN();
      Complex complex14 = complex8.sqrt1z();
      assertEquals(1.4627417026171576, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex7.divide(complex11);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals((-0.9640275800758169), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex0.isNaN();
      Complex complex16 = Complex.valueOf(0.0, 0.0);
      complex7.multiply(complex16);
      assertTrue(complex16.equals((Object)complex11));
      
      String string0 = complex6.toString();
      assertEquals("(0.0, -1.4436354751788103)", string0);
      
      complex7.multiply(complex9);
      Complex complex17 = Complex.ZERO;
      complex2.equals(complex17);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1320);
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.ZERO.divide((-348.5443));
      complex1.NaN.multiply(complex0);
      complex0.getField();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.NaN.sqrt();
      complex2.tanh();
      Complex complex5 = complex3.multiply(1320);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex1.reciprocal();
      complex1.pow(0.0);
      complex6.multiply((-3630.97366615802));
      complex5.tan();
      complex8.readResolve();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1483.793678585691, 3214.64477);
      Complex complex1 = new Complex(3214.64477);
      Complex complex2 = Complex.INF;
      complex1.I.divide(complex2);
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex1.INF.add(complex0);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex0.multiply((-206.25493859973));
      complex3.tanh();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex5.exp();
      complex2.NaN.nthRoot(17);
      complex7.add(3214.64477);
      Complex complex8 = complex5.subtract(complex2);
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex8.tanh();
      Complex.valueOf((-5435.228208781701), (double) 17);
      complex8.multiply(complex3);
      complex9.readResolve();
      complex10.equals(complex6);
      complex7.pow((-206.25493859973));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1277.903181659565), (-2354.6877727665274));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.multiply(1798.658);
      Complex complex4 = complex2.subtract((-1277.903181659565));
      complex0.reciprocal();
      complex1.getReal();
      Complex complex5 = complex1.pow((-507.0));
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex1.tanh();
      complex4.nthRoot(790);
      complex2.exp();
      Complex complex8 = complex5.acos();
      Complex complex9 = Complex.valueOf(462.58847746);
      complex6.nthRoot(571);
      Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex10 = complex7.acos();
      complex8.atan();
      complex9.abs();
      try { 
        complex10.nthRoot((-1146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,146
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1.2765238285064697);
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.valueOf(2.414213562373095, 1594.9);
      complex2.multiply(complex1);
      Complex complex4 = Complex.INF;
      complex1.equals(complex2);
      Complex complex5 = complex3.divide((-2050.29));
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1320);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = Complex.valueOf((-348.5443));
      Complex complex4 = complex1.NaN.multiply(complex0);
      complex0.getField();
      complex0.multiply(complex1);
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = Complex.valueOf(0.0, 2749.28318435);
      complex3.pow(complex2);
      complex3.sin();
      Complex.valueOf((-348.5443), 115.0051315710891);
      Complex complex7 = complex6.divide((double) 1320);
      complex2.getField();
      Complex complex8 = complex5.pow(complex7);
      Complex complex9 = Complex.ONE;
      complex6.pow(complex9);
      complex8.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1277.903181659565), (-2354.6877727665274));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex5.I.multiply(complex0);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex7 = complex0.atan();
      complex1.getArgument();
      Complex complex8 = Complex.valueOf((-2354.6877727665274), 0.0);
      complex2.NaN.add((-1277.903181659565));
      complex2.I.pow(2434.54555359);
      Complex.valueOf((-486.4573));
      Complex.valueOf((-8.462309712606694E-8), (-473.05));
      Complex.valueOf((-2.0680222952713705), (-473.05));
      complex1.I.negate();
      complex7.getArgument();
      Complex complex9 = complex8.exp();
      complex9.ONE.reciprocal();
      Complex complex10 = new Complex(3654.34, 2405.9587643497);
      complex10.multiply(complex4);
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
      complex8.pow(2434.54555359);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1918.32));
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex((-1918.32));
      Complex complex4 = complex3.tan();
      complex4.readResolve();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(176.02);
      complex1.nthRoot(2542);
      Complex complex2 = new Complex(0.2763880491256714, 2542);
      complex2.add(complex1);
      complex0.sqrt();
      Complex complex3 = Complex.valueOf((-2118.49464));
      complex3.asin();
      Complex complex4 = Complex.ZERO;
      complex4.exp();
      complex3.asin();
      Complex.valueOf(0.2763880491256714, (double) 2542);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1277.903181659565), (-2354.6877727665274));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ZERO.add(complex1);
      complex5.I.multiply(complex0);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex6 = complex0.atan();
      complex1.getArgument();
      Complex complex7 = Complex.valueOf((-2354.6877727665274), 0.0);
      complex2.NaN.add((-1277.903181659565));
      complex5.subtract(complex7);
      complex2.pow((-1684.629834));
      Complex complex8 = new Complex((-9.944393412663547E-8));
      complex8.atan();
      complex8.sqrt();
      complex1.conjugate();
      complex6.negate();
      complex7.pow(complex8);
      complex5.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(669.81930841957, 1569.6189015305356);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.ZERO.log();
      complex3.nthRoot(1141);
      Complex complex5 = complex1.add(1569.6189015305356);
      Complex complex6 = complex2.subtract(complex4);
      Complex complex7 = complex6.sinh();
      complex1.tanh();
      complex6.tanh();
      Complex complex8 = complex7.multiply(1389);
      Complex complex9 = complex5.sqrt1z();
      complex9.INF.tanh();
      Complex complex10 = complex5.reciprocal();
      complex10.reciprocal();
      complex8.pow(669.81930841957);
      complex0.multiply((double) 1141);
      complex8.tan();
      complex7.readResolve();
      Complex complex11 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      complex1.ZERO.atan();
      Complex complex3 = complex2.add(complex1);
      complex0.INF.conjugate();
      complex1.subtract(1996.37531142139);
      Complex complex4 = complex2.multiply(3017.0);
      Complex complex5 = complex4.reciprocal();
      Complex.valueOf(1996.37531142139, 3017.0);
      complex2.sqrt1z();
      complex3.pow(complex5);
      complex5.multiply(3017.0);
      Complex complex6 = complex1.exp();
      complex3.nthRoot(37);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-457.232), (-457.232));
      Complex complex1 = complex0.reciprocal();
      complex1.INF.cos();
      complex1.sqrt1z();
      complex0.isInfinite();
      Complex complex2 = complex0.divide(0.0);
      complex2.createComplex(43.618517, (-1832.786));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.ZERO.sqrt();
      complex2.INF.abs();
      complex0.isInfinite();
      complex0.getField();
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.negate();
      complex6.NaN.subtract(complex0);
      complex2.multiply((-920.2768161172));
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.ZERO.pow(complex1);
      complex6.I.readResolve();
      Complex.valueOf((-1108.52864021));
      complex6.tan();
      complex4.acos();
      complex2.cos();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ZERO.add(complex0);
      complex3.ONE.readResolve();
      complex2.ONE.getArgument();
      Complex complex4 = complex0.pow(2.0);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.INF.reciprocal();
      complex6.abs();
      Complex complex7 = complex5.I.cosh();
      Complex complex8 = complex5.tan();
      complex0.ZERO.log();
      complex5.NaN.readResolve();
      complex8.NaN.tan();
      complex0.sqrt1z();
      complex8.hashCode();
      complex1.subtract(0.0);
      Complex complex9 = Complex.valueOf((-227.286899), (-227.286899));
      complex9.NaN.divide((-2.437796532151255E213));
      complex3.isInfinite();
      Complex.valueOf(0.0);
      complex5.ONE.pow(complex0);
      complex7.multiply(complex4);
      complex6.ZERO.acos();
      Complex complex10 = new Complex(0.0, 1566.73951);
      complex1.add(complex10);
      complex7.readResolve();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.6197150945663452);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ONE.add(complex1);
      complex2.NaN.cosh();
      Complex complex3 = complex0.ZERO.sinh();
      double double0 = (-1.2296934902142301E22);
      complex3.multiply((-1.2296934902142301E22));
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.acos();
      int int0 = 0;
      complex5.ZERO.sqrt();
      Complex complex6 = complex0.NaN.add(complex3);
      Complex complex7 = complex6.INF.add((-1.2296934902142301E22));
      complex7.ONE.sinh();
      Complex complex8 = Complex.INF;
      complex7.I.multiply(complex8);
      try { 
        complex5.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1599.2187), (-1.0));
      Complex complex1 = complex0.I.multiply(4203.9159602);
      complex0.ONE.getArgument();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.sinh();
      complex3.NaN.toString();
      Complex complex4 = Complex.ONE;
      complex1.I.subtract(complex4);
      complex3.equals(complex1);
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex5.multiply(0.0);
      complex3.NaN.asin();
      complex3.ZERO.subtract(0.0);
      complex3.nthRoot(819);
      Complex complex7 = complex3.tanh();
      Complex.valueOf(0.0, (-1621.0));
      Complex complex8 = complex7.asin();
      complex2.sqrt();
      complex0.isNaN();
      complex7.hashCode();
      complex8.pow(complex6);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1320);
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.ZERO.divide((-348.5443));
      complex1.NaN.multiply(complex0);
      complex0.getField();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = Complex.valueOf(0.0, 2749.28318435);
      complex4.NaN.multiply(complex5);
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      complex3.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2.0500353979930155E-8, 2.0500353979930155E-8);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.subtract((-8.569906238528267E-8));
      complex0.toString();
      complex3.NaN.asin();
      complex2.isNaN();
      complex0.cos();
      Complex complex4 = Complex.valueOf((-8.569906238528267E-8), (-20.0));
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex3.createComplex((-20.0), (-8.569906238528267E-8));
      complex3.equals(complex6);
      complex5.divide(2.0500353979930155E-8);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.hashCode();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.divide(complex0);
      complex3.ONE.acos();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.subtract(1342.34074102);
      complex4.ONE.atan();
      Complex complex6 = complex4.conjugate();
      complex2.ONE.multiply(0);
      Complex complex7 = complex0.sinh();
      complex3.add(complex4);
      complex2.getField();
      complex0.divide(1342.34074102);
      Complex complex8 = complex2.sqrt();
      complex7.add(complex3);
      complex8.ONE.exp();
      complex0.reciprocal();
      Complex complex9 = complex2.add(0.0);
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex5.reciprocal();
      complex11.I.abs();
      complex1.atan();
      complex8.multiply(0);
      complex1.acos();
      complex2.divide(2172.54186);
      complex6.sinh();
      complex9.atan();
      Complex complex12 = complex10.createComplex(0.0, (-262.81));
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(2241.51);
      Complex complex1 = complex0.subtract(2241.51);
      Complex complex2 = complex1.I.cos();
      complex2.ONE.cos();
      Complex complex3 = complex1.divide(complex0);
      complex3.INF.tan();
      Complex.valueOf(2241.51);
      double double0 = (-2781.082559649083);
      Complex complex4 = complex3.add((-2781.082559649083));
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply((-875));
      Complex complex3 = complex2.ONE.exp();
      complex0.NaN.createComplex((-2.5243286814648133E-8), (-1868.6804293803132));
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.cos();
      complex5.divide(0.0);
      Complex complex6 = Complex.valueOf((-1868.6804293803132), (double) (-875));
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex1.acos();
      complex3.INF.log();
      Complex complex9 = complex8.I.tanh();
      complex9.ZERO.sin();
      complex4.getArgument();
      complex3.isNaN();
      complex6.I.cos();
      complex7.add(2111.929);
      complex6.tan();
      complex8.readResolve();
      Complex complex10 = complex5.reciprocal();
      complex10.NaN.pow(0.0);
      complex9.acos();
      complex7.multiply(0.0);
      Complex complex11 = complex4.pow(1211.1);
      complex11.INF.multiply(complex8);
      complex0.createComplex(0.5433003902435303, (-1868.6804293803132));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1483.793678585691, 3214.64477);
      Complex complex1 = new Complex(3214.64477);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.divide(complex2);
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex1.INF.add(complex0);
      complex5.ONE.sqrt1z();
      Complex complex6 = complex0.multiply((-206.25493859973));
      complex4.tanh();
      complex2.sqrt1z();
      Complex complex7 = complex6.exp();
      complex2.NaN.nthRoot(17);
      Complex complex8 = complex7.add(3214.64477);
      Complex complex9 = complex6.subtract(complex2);
      complex4.sinh();
      complex9.tanh();
      complex1.tanh();
      Complex complex10 = complex8.multiply(17);
      Complex complex11 = complex7.sqrt1z();
      complex11.I.reciprocal();
      complex11.I.reciprocal();
      complex8.pow((-3927.128689668154));
      Complex complex12 = complex7.multiply(Double.POSITIVE_INFINITY);
      complex12.I.tan();
      complex3.readResolve();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.multiply(2584.823484518397);
      Complex complex2 = complex1.subtract(2584.823484518397);
      Complex complex3 = complex2.ZERO.reciprocal();
      complex0.getReal();
      Complex complex4 = complex3.I.pow(0.07884006202220917);
      complex4.ONE.conjugate();
      complex0.ONE.tanh();
      complex0.NaN.nthRoot(799);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.acos();
      Complex.valueOf(709.48996777);
      complex5.nthRoot(799);
      Complex complex7 = Complex.valueOf(2584.823484518397, 1154.533655);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex5.atan();
      complex5.abs();
      complex8.nthRoot(17);
      complex9.log();
      complex6.getArgument();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 1948.66409);
      complex0.ONE.multiply(complex1);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ZERO.negate();
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex2.subtract(complex3);
      complex3.NaN.add(complex6);
      complex6.add(complex5);
      Complex.valueOf(1948.66409);
      complex0.ONE.getArgument();
      try { 
        complex6.ONE.nthRoot((-3726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,726
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.conjugate();
      complex2.I.pow((-680.24953903));
      complex2.I.multiply((-1442));
      complex1.I.getField();
      complex1.ONE.pow(0.0);
      complex1.I.getArgument();
      complex1.INF.getArgument();
      complex0.getField();
      complex1.NaN.abs();
      complex0.nthRoot(1304);
      complex0.cos();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 6.283185307179586;
      complex0.INF.asin();
      Complex complex1 = complex0.add(6.283185307179586);
      complex1.sqrt();
      double double1 = 0.6778947114944458;
      Complex complex2 = complex1.I.reciprocal();
      Complex.valueOf(6.283185307179586);
      complex2.ZERO.negate();
      complex0.I.exp();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(2035.814, 2035.814);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.ONE.multiply((-3476.747364205));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.sqrt1z();
      complex5.ZERO.cosh();
      Complex.valueOf(2035.814);
      complex2.cosh();
      complex1.nthRoot(526);
      complex2.abs();
      complex0.ONE.sin();
      Complex complex6 = complex5.ONE.pow(2035.814);
      Complex complex7 = complex5.divide(1.5173907279968262);
      complex7.multiply(complex0);
      complex7.I.hashCode();
      Complex complex8 = complex0.divide(complex3);
      complex8.exp();
      complex5.getImaginary();
      complex7.asin();
      Complex.valueOf((-3476.747364205), 1.5173907279968262);
      Complex complex9 = complex7.sin();
      complex9.multiply(complex5);
      Complex complex10 = complex9.ZERO.conjugate();
      complex1.pow(4379.1);
      complex6.pow(complex10);
      complex1.sin();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(127.3833408105272, 127.3833408105272);
      Complex complex1 = Complex.valueOf(127.3833408105272);
      Complex complex2 = complex1.INF.sqrt();
      complex0.I.abs();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.valueOf((-1304.6978729301004));
      complex4.INF.add(complex1);
      complex3.log();
      complex0.isNaN();
      complex3.getArgument();
      complex1.multiply(127.3833408105272);
      Complex complex5 = complex2.pow(complex0);
      complex2.pow((-1.0));
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1277.903181659565), (-2354.6877727665274));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex5.I.multiply(complex0);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex7 = complex0.atan();
      complex1.getArgument();
      Complex complex8 = Complex.valueOf((-2354.6877727665274), 0.0);
      complex2.NaN.add((-1277.903181659565));
      complex2.I.pow(2434.54555359);
      Complex.valueOf((-486.4573));
      Complex.valueOf((-8.462309712606694E-8), (-473.05));
      Complex.valueOf((-2.0680222952713705), (-473.05));
      complex1.I.negate();
      complex7.getArgument();
      Complex complex9 = complex8.exp();
      complex9.ONE.reciprocal();
      Complex complex10 = complex0.pow(complex3);
      complex10.ONE.sin();
      Complex complex11 = Complex.valueOf((-1311.104462), (-2575.6796));
      complex11.INF.divide((-1277.903181659565));
      complex1.getField();
      Complex complex12 = complex4.pow(complex1);
      complex10.pow(complex6);
      complex12.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      complex0.getReal();
      Complex complex1 = complex0.ZERO.subtract((-2313.359192));
      complex0.nthRoot(3403);
      Complex complex2 = Complex.valueOf(Double.NaN, (-570.0));
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex5.ZERO.asin();
      complex6.INF.tanh();
      Complex complex7 = complex5.add((-2742.71));
      complex7.ZERO.tan();
      complex1.isNaN();
      Complex complex8 = complex2.createComplex(0.0, 3403);
      complex3.abs();
      complex3.divide(Double.NaN);
      complex4.sqrt();
      complex8.toString();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      complex1.ONE.pow(complex0);
      complex0.ONE.multiply((-1177.9458399));
      complex0.sin();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(669.81930841957, 1569.6189015305356);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex0.sqrt();
      complex5.asin();
      complex5.exp();
      complex4.asin();
      complex3.toString();
      Complex.valueOf(870.65799211, 0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ONE.sinh();
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.ZERO.add(4.0651709187617596E-117);
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex4.INF.sin();
      complex5.NaN.hashCode();
      Complex complex6 = complex4.ZERO.cos();
      complex6.I.atan();
      complex4.abs();
      complex0.INF.readResolve();
      Complex complex7 = complex0.pow(0.0);
      complex7.INF.sinh();
      Complex complex8 = complex4.pow(0.0);
      Complex complex9 = complex7.reciprocal();
      complex7.ONE.abs();
      complex9.ZERO.createComplex((-157.53), Double.NaN);
      Complex complex10 = complex8.INF.subtract((-2.3222346436879016E-8));
      Complex complex11 = complex8.subtract((-879.685080966));
      complex7.toString();
      complex11.divide(complex3);
      complex3.negate();
      Complex complex12 = complex9.multiply(complex11);
      complex1.atan();
      complex12.conjugate();
      complex3.isInfinite();
      complex10.createComplex(0.28963327407836914, (-1705.387528982975));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ONE.subtract(0.0);
      Complex complex3 = complex0.asin();
      complex1.equals((Object) null);
      complex0.hashCode();
      Complex complex4 = complex0.I.cos();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ZERO.conjugate();
      complex6.NaN.cosh();
      complex6.NaN.reciprocal();
      Complex complex7 = complex3.add(0.0);
      complex7.NaN.multiply(complex3);
      complex6.abs();
      complex4.createComplex(0.0, 0.0);
      complex6.getImaginary();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sinh();
      complex2.ONE.atan();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex1.equals((Object) null);
      complex1.reciprocal();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((double) 1, 20.0);
      complex1.NaN.getField();
      complex1.ONE.multiply(complex0);
      complex0.nthRoot(1);
      complex0.add(0.0);
      Complex complex2 = complex0.sin();
      complex1.exp();
      complex2.readResolve();
      complex0.tan();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(176.02);
      complex1.nthRoot(2542);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.pow(1.266589879989624);
      complex0.atan();
      complex1.conjugate();
      complex2.negate();
      complex2.pow(complex3);
      complex3.multiply(2768.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sqrt1z();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-140.34876), Double.NaN);
      Complex complex1 = complex0.INF.sin();
      complex1.ZERO.exp();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.sin();
      complex0.ZERO.sqrt();
      complex2.pow(complex3);
      complex3.sin();
      complex1.subtract(879.48116560532);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      complex1.INF.getField();
      complex1.ZERO.hashCode();
      complex0.hashCode();
      complex0.atan();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      complex0.INF.toString();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.log();
      complex3.NaN.sinh();
      Complex complex4 = complex0.NaN.add((-2090.824731100012));
      complex4.NaN.hashCode();
      complex4.INF.toString();
      complex4.INF.sin();
      complex0.isNaN();
      complex0.abs();
      complex4.isNaN();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.I.sin();
      complex6.I.divide(0.0);
      Complex.valueOf(1227.379, 136.9096);
      Complex complex7 = Complex.valueOf(0.0, 925.8441929256442);
      complex4.getArgument();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.ONE.sqrt();
      complex1.sin();
      complex9.ZERO.divide(complex3);
      complex1.isNaN();
      complex7.getReal();
      complex0.getReal();
      complex4.tanh();
      Complex complex10 = complex5.cosh();
      complex10.INF.abs();
      Complex complex11 = complex5.pow(complex0);
      complex11.getField();
      try { 
        complex7.nthRoot((-3102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,102
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex((-2.2258513086839407E-9));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.cosh();
      Complex complex3 = complex0.pow(1903.96968457);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1316.12258));
      complex0.NaN.sqrt1z();
      complex0.nthRoot(926);
      complex0.getArgument();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(1686.7718270083617, 1686.7718270083617);
      Complex complex1 = complex0.ZERO.cosh();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.subtract(1686.7718270083617);
      Complex complex4 = Complex.valueOf((-4369.4));
      assertFalse(complex4.equals((Object)complex1));
      assertEquals((-4369.4), complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.INF.multiply((-1218));
      assertTrue(complex5.equals((Object)complex3));
      
      Complex complex6 = complex2.NaN.sin();
      assertTrue(complex6.isNaN());
      
      Complex complex7 = complex0.reciprocal();
      assertEquals((-2.9642420628212294E-4), complex7.getImaginary(), 0.01);
      assertEquals(2.9642420628212294E-4, complex7.getReal(), 0.01);
      
      Complex complex8 = (Complex)complex2.readResolve();
      complex0.equals(complex8);
      assertTrue(complex8.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getReal(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(1686.7718270083617, 1686.7718270083617)", string0);
  }
}
