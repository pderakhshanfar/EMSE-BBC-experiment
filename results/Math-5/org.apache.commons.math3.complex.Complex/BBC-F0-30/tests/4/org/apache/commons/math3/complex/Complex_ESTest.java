/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:48:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.acos();
      complex3.getField();
      Complex complex5 = new Complex(788.44427);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.tanh();
      complex7.conjugate();
      complex1.multiply(complex0);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.divide(complex0);
      complex7.pow(complex6);
      Complex complex10 = new Complex(788.44427, (-1680.43));
      Complex complex11 = complex3.cosh();
      complex3.readResolve();
      complex9.divide(complex3);
      complex11.multiply(502);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(4298.077310948975);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.divide(complex0);
      complex2.readResolve();
      complex4.INF.getField();
      Complex complex5 = complex2.ZERO.add(4298.077310948975);
      complex4.NaN.subtract(complex3);
      Complex complex6 = complex5.NaN.subtract(complex4);
      Complex complex7 = Complex.valueOf(4298.077310948975);
      complex7.ZERO.exp();
      complex7.sinh();
      complex4.readResolve();
      Complex complex8 = complex1.sqrt();
      complex1.acos();
      complex8.nthRoot(37);
      complex3.abs();
      complex2.negate();
      complex1.getField();
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex6.log();
      complex2.pow(complex8);
      complex2.sinh();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(246.71, (-20.0));
      Complex complex2 = complex1.cosh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.0000000225, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(272);
      complex2.nthRoot(253);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(344.008666025556, 344.008666025556);
      Complex complex2 = Complex.valueOf(344.008666025556, 344.008666025556);
      Complex complex3 = complex2.cosh();
      complex2.I.divide(complex3);
      complex3.acos();
      complex3.acos();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.abs();
      complex0.nthRoot(824);
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.asin();
      complex3.sqrt();
      complex2.INF.getField();
      Complex.valueOf((double) 824, 0.4621131420135498);
      complex3.INF.subtract((-474.46445443));
      complex2.NaN.atan();
      complex1.NaN.createComplex(2.5091784786580567, Double.NaN);
      complex1.ZERO.readResolve();
      Complex complex4 = complex2.divide(0.4621131420135498);
      complex4.ZERO.divide(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = new Complex((-2078.3978499), 0.4621131420135498);
      Complex complex7 = complex5.divide(complex6);
      complex0.I.acos();
      complex6.ONE.toString();
      Complex.valueOf((-8.582843599651953E-8));
      complex7.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2326.5312440684256);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex5.sqrt();
      complex6.readResolve();
      Complex complex7 = complex5.ONE.divide(2326.5312440684256);
      complex7.ZERO.readResolve();
      Complex complex8 = complex4.NaN.reciprocal();
      complex0.multiply(complex4);
      Complex complex9 = complex4.subtract(complex3);
      complex5.ONE.divide(complex1);
      complex9.ONE.getArgument();
      Complex complex10 = complex0.acos();
      complex10.sinh();
      complex10.I.multiply(complex9);
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex5.exp();
      complex3.divide(complex4);
      complex5.sqrt1z();
      complex0.ONE.add(0.0);
      complex10.ONE.readResolve();
      complex2.createComplex(512.85532, 7.8640411896421955E208);
      Complex complex13 = complex8.divide(complex10);
      complex8.negate();
      Complex complex14 = complex13.NaN.acos();
      complex14.multiply((-1175));
      complex5.divide(complex8);
      complex10.pow(complex13);
      complex12.add(complex11);
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-0.9343120536535163), Double.POSITIVE_INFINITY);
      complex1.multiply(111.6);
      complex1.tan();
      Complex complex2 = Complex.ZERO;
      complex2.sqrt();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex1.pow(complex3);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getField();
      complex0.nthRoot(4017);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.9998474602125943);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-1618.600090587661), (-20.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.tan();
      complex0.toString();
      complex2.ONE.sinh();
      Complex complex3 = new Complex(2215.961947);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-15.648), Double.NaN);
      Complex complex2 = complex0.multiply(Double.NaN);
      complex0.tan();
      Complex complex3 = complex2.asin();
      complex3.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(-0.0, -0.0);
      complex0.getField();
      complex1.atan();
      Complex complex2 = new Complex(20.0, -0.0);
      complex2.atan();
      Complex complex3 = new Complex(-0.0, 476.2846241);
      complex3.tan();
      complex2.tanh();
      complex1.add(476.2846241);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.sinh();
      complex3.divide(0.0);
      complex3.readResolve();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.I.multiply((-647));
      complex1.multiply(0.0);
      complex2.subtract(complex6);
      complex0.divide(complex6);
      complex2.toString();
      Complex complex7 = complex4.acos();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(961.07692);
      Complex complex1 = complex0.divide(2.740964239529395E-4);
      Complex complex2 = complex1.createComplex(2.740964239529395E-4, 961.07692);
      complex1.NaN.toString();
      Complex complex3 = complex1.NaN.exp();
      complex3.NaN.readResolve();
      complex0.ZERO.cosh();
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex.valueOf(961.07692, 961.07692);
      complex2.abs();
      Complex complex5 = complex0.conjugate();
      complex5.I.pow(complex2);
      complex0.conjugate();
      complex2.sqrt();
      complex4.asin();
      complex4.negate();
      complex2.pow(2257.35);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      complex0.atan();
      Complex complex2 = new Complex(20.0, 20.0);
      complex2.tan();
      complex1.tanh();
      complex2.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      complex0.tanh();
      Complex.valueOf(770.08439298917, 0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.add(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.pow(1162.5347423636);
      Complex complex4 = complex2.multiply(157);
      complex2.toString();
      complex3.readResolve();
      complex1.ONE.subtract(2.3525345191912968E288);
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-1220.97));
      complex3.ONE.tanh();
      Complex complex4 = complex1.divide(complex2);
      complex4.getReal();
      Complex complex5 = new Complex((-1.5253978740591132E-4));
      complex2.subtract(complex0);
      Complex complex6 = complex1.negate();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.I;
      complex0.multiply(0.999847460210229);
      complex3.sqrt();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.reciprocal();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex1.multiply(complex3);
      Complex complex4 = new Complex(4716.0, 1622.331201);
      Complex complex5 = Complex.valueOf((-1220.97));
      complex5.divide(complex2);
      complex2.getReal();
      complex2.readResolve();
      Complex complex6 = new Complex(1622.331201);
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.subtract(complex0);
      complex9.negate();
      Complex complex10 = complex7.divide(Double.NaN);
      complex7.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1597.23737));
      complex0.tanh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(534.1233);
      complex0.exp();
      Complex complex2 = new Complex(Double.NaN, Double.NaN);
      Complex complex3 = complex2.reciprocal();
      complex1.negate();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.acos();
      complex5.getField();
      complex1.exp();
      Complex complex6 = complex4.tanh();
      complex6.INF.sinh();
      complex1.reciprocal();
      complex5.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.toString();
      complex1.nthRoot(877);
      Complex complex2 = complex0.cosh();
      complex1.add(complex0);
      complex2.reciprocal();
      Complex complex3 = Complex.valueOf((double) 60);
      complex2.exp();
      complex1.sqrt1z();
      Complex complex4 = complex2.cosh();
      complex1.toString();
      Complex complex5 = complex3.cosh();
      Complex.valueOf((double) 877, Double.NaN);
      Complex complex6 = Complex.valueOf(5277.384093457502, (-20.0));
      complex6.subtract(complex0);
      Complex complex7 = complex2.cosh();
      complex3.add(complex4);
      complex5.reciprocal();
      complex3.pow((-1011.7));
      complex7.multiply(76);
      complex0.pow((-1011.7));
      Complex.valueOf(Double.NaN, 1202.3097398144716);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1.5253978740591132E-4), (-1.5253978740591132E-4));
      Complex complex1 = complex0.tanh();
      complex1.NaN.divide(990.63803463);
      Complex complex2 = complex0.reciprocal();
      complex2.ONE.hashCode();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1.5253978740591132E-4), (-1.5253978740591132E-4));
      Complex complex1 = new Complex((-1.5253978740591132E-4));
      complex0.exp();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.negate();
      Complex complex4 = new Complex((-1.5253978740591132E-4), (-1.5253978740591132E-4));
      complex4.atan();
      complex2.acos();
      complex2.getField();
      complex3.exp();
      Complex complex5 = Complex.ONE;
      complex5.tanh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.divide(0.0);
      complex2.getArgument();
      complex2.toString();
      complex1.subtract(Double.NaN);
      complex0.atan();
      Complex complex3 = Complex.valueOf((-2549.77047));
      complex3.tan();
      complex1.acos();
      complex2.sinh();
      Complex complex4 = Complex.INF;
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4883.878978816916);
      complex0.reciprocal();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.valueOf((-3125.7857841431633), (-3125.7857841431633));
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = new Complex(4883.878978816916, 4883.878978816916);
      Complex complex7 = Complex.valueOf((-3125.7857841431633));
      Complex complex8 = Complex.valueOf(1622.331201);
      complex8.divide(complex5);
      complex1.getReal();
      complex5.readResolve();
      Complex complex9 = new Complex((-956.2845382133941));
      Complex complex10 = complex7.pow(complex5);
      complex10.I.abs();
      complex0.subtract(complex1);
      Complex complex11 = complex8.negate();
      complex11.divide(4716.0);
      Complex complex12 = Complex.INF;
      complex12.divide(complex3);
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1.5253978740591132E-4), (-1.5253978740591132E-4));
      Complex complex1 = Complex.NaN;
      complex1.tanh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-1.5253978740591132E-4), (-1.5253978740591132E-4));
      Complex complex1 = complex0.cosh();
      complex0.toString();
      Complex complex2 = complex1.add((double) 60);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf((-1920.9), 2088.0);
      complex4.nthRoot(37);
      complex2.nthRoot(37);
      complex3.nthRoot(1);
      Complex complex5 = complex3.tanh();
      complex0.ONE.createComplex(854.317875213, 1.2027015686035156);
      Complex.valueOf((-1920.9));
      Complex complex6 = complex4.exp();
      Complex complex7 = complex5.sqrt1z();
      complex0.cosh();
      complex4.toString();
      complex3.cosh();
      complex3.cosh();
      complex2.add(complex3);
      complex4.reciprocal();
      Complex complex8 = Complex.NaN;
      complex8.pow(1032.249349471367);
      complex8.multiply(2050);
      complex6.pow((double) 3295);
      complex8.sqrt1z();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(276.5727607, 276.5727607);
      Complex complex1 = Complex.valueOf(2441.93959048946, 276.5727607);
      Complex complex2 = complex1.INF.asin();
      complex2.I.divide(3.2021376921211934E-155);
      complex2.ZERO.getField();
      complex1.INF.hashCode();
      Complex complex3 = complex0.cos();
      complex3.getField();
      Complex complex4 = complex0.divide(complex1);
      complex1.NaN.subtract(276.5727607);
      complex3.toString();
      Complex complex5 = complex2.sinh();
      complex4.ONE.add(complex2);
      complex5.INF.asin();
      complex0.getField();
      Complex complex6 = Complex.valueOf(276.5727607, 2441.93959048946);
      Complex complex7 = complex0.divide(2441.93959048946);
      complex6.NaN.subtract(complex2);
      complex7.ONE.pow((-438.94003858));
      complex3.divide(complex4);
      complex6.cosh();
      complex0.tanh();
      complex6.exp();
      complex1.acos();
      complex4.tan();
      complex3.getField();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3439.6052306));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.cos();
      complex1.sinh();
      complex0.reciprocal();
      complex4.pow(complex3);
      Complex complex5 = Complex.I;
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1.5253978740591132E-4), (-1.5253978740591132E-4));
      Complex complex1 = complex0.cosh();
      complex0.toString();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex2.reciprocal();
      complex1.pow(1162.5347423636);
      complex5.multiply(60);
      complex0.pow(837.0);
      complex4.toString();
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = new Complex(1.6438980102539062, 4716.0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.divide(complex1);
      complex8.getReal();
      Complex complex9 = new Complex(4716.0, Double.NaN);
      complex8.readResolve();
      Complex complex10 = new Complex(395.128599);
      Complex complex11 = complex5.pow(complex1);
      Complex complex12 = Complex.valueOf(1512.305619);
      complex9.subtract(complex12);
      complex11.negate();
      complex1.divide(Double.NaN);
      complex2.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1.596435785293579, 1.596435785293579);
      Complex complex1 = complex0.ZERO.subtract((-1626.5539995083));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-1626.5539995083));
      complex2.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.ZERO;
      complex6.equals(complex7);
      complex2.sinh();
      Complex complex8 = Complex.valueOf(3489.606);
      Complex complex9 = complex8.subtract(complex3);
      Complex complex10 = Complex.ONE;
      complex10.subtract(complex9);
      complex7.equals(complex9);
      complex9.multiply((-1183));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(21.945041, 21.945041);
      complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ONE.divide(219.05547018);
      complex2.INF.getArgument();
      complex2.toString();
      Complex complex3 = complex1.subtract(1.5981547034872092E-104);
      complex1.atan();
      Complex complex4 = complex0.tan();
      complex4.acos();
      Complex complex5 = Complex.valueOf(2796.0887969453, 219.05547018);
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.INF;
      complex3.getReal();
      complex6.asin();
      complex7.multiply(complex4);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.025073636323213577);
      Complex complex1 = complex0.add(2.0);
      Complex complex2 = complex0.createComplex(2.0, (-1274));
      Complex complex3 = complex0.acos();
      complex1.sinh();
      Complex complex4 = complex3.pow((double) (-1274));
      Complex complex5 = complex4.createComplex(0.025073636323213577, (-3165.6274011));
      Complex complex6 = complex2.conjugate();
      Complex.valueOf(0.9989374565936864);
      Complex complex7 = complex6.acos();
      complex2.ZERO.toString();
      Complex complex8 = complex4.asin();
      complex5.atan();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf(0.9989374565936864);
      Complex complex11 = Complex.INF;
      complex10.multiply(complex11);
      Complex complex12 = new Complex((-3165.6274011), (-3165.6274011));
      complex2.divide(complex4);
      complex11.readResolve();
      complex7.pow(complex3);
      Complex complex13 = Complex.valueOf(2.0, 2493.314597844);
      Complex complex14 = complex13.subtract(complex5);
      complex8.negate();
      Complex complex15 = new Complex((-877.0), 0.9989374565936864);
      complex14.divide(complex0);
      complex13.add(2.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.8333391860438), (-3277.8333391860438));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.add(1.0);
      complex0.acos();
      complex5.getField();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.tanh();
      complex0.conjugate();
      Complex complex8 = complex0.divide(complex4);
      Complex complex9 = complex8.acos();
      complex6.pow(complex7);
      Complex complex10 = new Complex(1.0, (-3277.8333391860438));
      Complex complex11 = new Complex(1.0);
      Complex complex12 = Complex.ONE;
      complex11.equals(complex3);
      complex12.sinh();
      Complex complex13 = complex9.subtract(complex1);
      complex13.ONE.atan();
      complex0.subtract(complex11);
      Complex complex14 = Complex.NaN;
      Complex complex15 = Complex.ZERO;
      complex14.equals(complex15);
      complex3.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex1.atan();
      complex4.abs();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex7.pow(0.0);
      complex8.log();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex10.pow(complex9);
      Complex complex12 = complex11.cosh();
      complex5.nthRoot(4968);
      Complex complex13 = complex6.cosh();
      complex13.readResolve();
      Complex complex14 = complex7.createComplex(Double.NaN, 0.0);
      complex12.nthRoot(4989);
      complex13.sinh();
      complex14.subtract((double) 7);
      complex7.toString();
      complex14.sqrt();
      complex1.readResolve();
      Complex complex15 = new Complex(7);
      complex5.pow(complex15);
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add((-364.6));
      Complex complex2 = Complex.ZERO;
      complex1.multiply(complex1);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.add((-364.6));
      Complex complex1 = new Complex((-364.6));
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.pow((-20.0));
      Complex complex3 = complex1.reciprocal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.asin();
      complex0.tan();
      complex1.acos();
      complex3.add((-1.0));
      complex3.negate();
      complex1.nthRoot(1628);
      complex0.nthRoot(468);
      // Undeclared exception!
      complex2.nthRoot(3274);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.ZERO.multiply(2.0);
      Complex complex2 = complex1.ZERO.add(2.0);
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex0.pow(0.0);
      complex0.equals(complex4);
      complex0.ZERO.multiply(2732.1);
      complex2.getField();
      Complex complex5 = Complex.valueOf(2.0, 2.0);
      complex5.I.subtract(complex4);
      Complex complex6 = complex4.subtract(complex2);
      complex6.INF.divide(complex3);
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(364.232107222991);
      Complex complex2 = complex0.add(complex1);
      complex1.asin();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.add(2.3561944812488287);
      complex3.negate();
      complex2.nthRoot(1);
      complex1.nthRoot(1);
      Complex complex6 = Complex.INF;
      complex6.nthRoot(7);
      complex4.tanh();
      Complex.valueOf(20.0);
      Complex complex7 = complex2.exp();
      complex7.exp();
      complex1.sqrt1z();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.sqrt1z();
      complex9.atan();
      complex5.readResolve();
      Complex complex10 = Complex.NaN;
      complex2.toString();
      Complex.valueOf((double) 7, 7.626989417985897E-5);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.8333391860438), (-3277.8333391860438));
      Complex complex1 = complex0.sinh();
      complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.add(1.0);
      complex5.INF.divide(complex2);
      complex5.INF.pow(complex0);
      complex5.I.atan();
      complex2.abs();
      Complex complex6 = complex2.INF.tanh();
      Complex complex7 = complex3.cosh();
      complex7.ONE.pow(1.0);
      Complex complex8 = complex6.log();
      complex8.reciprocal();
      Complex complex9 = complex1.ZERO.pow(complex7);
      Complex complex10 = complex0.cosh();
      complex1.nthRoot(7);
      Complex complex11 = complex10.cosh();
      complex9.NaN.readResolve();
      complex11.createComplex(672.877, 672.877);
      try { 
        complex6.nthRoot((-1518500250));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,518,500,250
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-917.9563076623494), (-917.9563076623494));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ONE.add(complex2);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex0.divide((-917.9563076623494));
      Complex complex10 = complex4.ONE.sqrt1z();
      Complex complex11 = complex2.NaN.pow(complex1);
      Complex complex12 = complex11.ONE.acos();
      complex1.nthRoot(7);
      Complex complex13 = complex10.tanh();
      Complex complex14 = Complex.valueOf((double) 7);
      complex13.exp();
      complex8.sqrt1z();
      complex5.sqrt1z();
      complex14.atan();
      complex4.readResolve();
      Complex complex15 = Complex.NaN;
      complex13.toString();
      Complex complex16 = complex1.cosh();
      complex16.reciprocal();
      complex14.pow(complex9);
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex.valueOf(785.56122);
      complex3.equals(complex6);
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex.valueOf(684.245716319);
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.INF.multiply(0.0);
      Complex complex3 = complex1.add((-87.29));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex0.acos();
      complex5.NaN.sinh();
      Complex complex7 = complex6.ONE.pow(0.0);
      Complex complex8 = Complex.valueOf((-87.29));
      complex8.ZERO.conjugate();
      Complex.valueOf(684.245716319);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex6.atan();
      Complex complex12 = Complex.NaN;
      complex10.multiply(complex9);
      Complex complex13 = new Complex(0.0, 0.0);
      complex2.divide(complex13);
      complex8.getReal();
      complex11.readResolve();
      Complex complex14 = new Complex((-2933.8722842), 0.0);
      Complex complex15 = Complex.INF;
      complex15.atan();
      complex15.readResolve();
      complex4.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract((-1538.8316837014695));
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.atan();
      complex1.NaN.acos();
      complex2.ZERO.getField();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.NaN.conjugate();
      complex7.cos();
      complex6.ONE.divide(complex5);
      complex6.ZERO.pow(complex3);
      Complex complex8 = new Complex(0.0, 0.0);
      complex8.ONE.atan();
      complex5.readResolve();
      complex4.divide(complex3);
      complex3.multiply(7);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1.596435785293579, 1.596435785293579);
      Complex complex1 = complex0.acos();
      complex1.getField();
      complex1.exp();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.NaN;
      complex4.divide(complex3);
      complex2.pow(complex3);
      Complex complex5 = new Complex((-322.4994616235737), (-1626.5539995083));
      complex1.atan();
      complex5.readResolve();
      complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-917.9563076623494), (-917.9563076623494));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.add(Double.POSITIVE_INFINITY);
      complex0.ONE.add(complex2);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.sinh();
      complex6.I.sqrt();
      Complex complex7 = complex0.divide((-917.9563076623494));
      Complex complex8 = complex4.ONE.sqrt1z();
      Complex complex9 = complex2.NaN.pow(complex1);
      complex9.ONE.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-917.9563076623494));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.ONE.add((-1.0));
      complex10.I.readResolve();
      complex5.subtract(complex3);
      complex7.I.tan();
      complex4.getField();
      complex3.NaN.toString();
      complex0.pow(complex5);
      complex4.ZERO.getArgument();
      complex5.reciprocal();
      complex0.isInfinite();
      Complex complex11 = complex1.add(1.5707963267948966);
      complex11.getField();
      Complex.valueOf(2.0);
      complex2.sin();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      complex0.cos();
      complex1.hashCode();
      Complex.valueOf((-1.899407107267079E-8), (-1.899407107267079E-8));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt();
      complex0.NaN.add(complex1);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.acos();
      complex0.add(0.0);
      Complex complex5 = complex4.negate();
      complex0.nthRoot(1);
      complex3.nthRoot(604);
      complex1.nthRoot(7);
      complex3.tanh();
      Complex.valueOf(0.0);
      complex5.exp();
      Complex complex6 = Complex.valueOf((-38.817373));
      complex1.atan();
      Complex complex7 = Complex.ONE;
      complex7.atan();
      complex4.getImaginary();
      complex3.toString();
      Complex.valueOf((double) 604, (double) 7);
      complex6.divide(0.0);
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(1.596435785293579, 1.596435785293579);
      Complex complex1 = complex0.ZERO.subtract(0.9989374565936864);
      Complex.valueOf(0.9989374565936864);
      Complex complex2 = Complex.valueOf((-2556.1), 0.9989374565936864);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.cosh();
      complex4.toString();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.cosh();
      complex7.add(complex3);
      complex6.reciprocal();
      Complex complex8 = complex5.pow((-0.4860324551651173));
      complex8.add((-0.5229914366077327));
      Complex complex9 = Complex.NaN;
      complex6.abs();
      complex7.hashCode();
      Complex complex10 = Complex.ONE;
      Object object0 = new Object();
      complex8.isInfinite();
      complex4.sinh();
      complex2.subtract(complex0);
      try { 
        complex9.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.pow(840.5659028008813);
      Complex complex3 = Complex.ZERO;
      complex3.createComplex(840.5659028008813, 840.5659028008813);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(215.28075607686847);
      complex1.acos();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.NaN;
      complex2.multiply(complex7);
      Complex complex9 = new Complex(840.5659028008813, 1355.15244679);
      Complex complex10 = complex9.divide(complex0);
      complex2.getReal();
      complex0.readResolve();
      complex1.pow(complex6);
      Complex complex11 = complex7.subtract(complex9);
      complex11.negate();
      complex8.divide(Double.POSITIVE_INFINITY);
      complex10.negate();
      Complex complex12 = new Complex((-2935.0194));
      complex12.isNaN();
      complex7.sqrt();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-917.9563076623494), (-917.9563076623494));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.add(Double.POSITIVE_INFINITY);
      complex0.ONE.add(complex2);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.sinh();
      complex6.I.sqrt();
      Complex complex7 = complex0.divide((-917.9563076623494));
      Complex complex8 = complex4.ONE.sqrt1z();
      Complex complex9 = complex2.NaN.pow(complex1);
      complex9.ONE.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-917.9563076623494));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.ONE.add((-1.0));
      complex10.I.readResolve();
      Complex complex11 = complex5.subtract(complex3);
      complex7.I.tan();
      complex4.getField();
      complex3.NaN.toString();
      complex0.pow(complex5);
      complex4.ZERO.getArgument();
      complex11.sqrt1z();
      complex8.getImaginary();
      complex7.abs();
      complex4.asin();
      Complex complex12 = complex2.log();
      complex12.INF.toString();
      complex0.createComplex(1.1621966417487748, (-2.7943366835352838E-8));
      complex11.createComplex((-1.0), (-917.9563076623494));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.INF.asin();
      complex3.tan();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.I.add(0.0);
      complex5.I.negate();
      complex2.I.nthRoot(1);
      complex4.INF.getField();
      complex0.ONE.nthRoot(1);
      Complex complex6 = complex0.pow((-1.2150444703462074E7));
      complex1.multiply((-1.2150444703462074E7));
      complex3.getField();
      complex0.ZERO.toString();
      Complex complex7 = Complex.valueOf((-839.5659028008813), 1.596435785293579);
      complex0.subtract(complex1);
      Complex complex8 = complex7.subtract(complex5);
      complex4.pow(complex8);
      complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sin();
      complex0.isInfinite();
      Complex complex2 = complex1.multiply(complex0);
      complex2.ONE.multiply(743);
      complex0.nthRoot(17);
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf((-747.953977855));
      Complex complex5 = complex1.exp();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.sqrt1z();
      complex2.cosh();
      Complex.valueOf((-2137.758), 827.0);
      complex6.toString();
      Complex complex8 = new Complex(827.0, (-2137.758));
      complex8.cosh();
      Complex complex9 = complex8.cosh();
      complex4.add(complex7);
      complex9.reciprocal();
      complex4.pow((-2137.758));
      complex0.abs();
      complex4.hashCode();
      Complex complex10 = Complex.ONE;
      complex5.equals((Object) null);
      complex1.sinh();
      complex3.subtract(complex5);
      Complex complex11 = new Complex((-2137.758), 827.0);
      complex5.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.I.add(0.0);
      Complex complex7 = complex6.I.negate();
      complex2.I.nthRoot(1);
      complex0.ONE.nthRoot(1);
      Complex complex8 = new Complex(1);
      complex8.createComplex((-3082.628326097056), (-3082.628326097056));
      Complex complex9 = complex8.exp();
      complex7.pow((double) 7);
      complex9.cos();
      complex4.getArgument();
      complex4.nthRoot(1);
      complex5.log();
      complex7.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex.valueOf(684.245716319);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.INF.multiply(0.0);
      Complex complex4 = complex1.add((-87.29));
      Complex complex5 = complex0.createComplex(2464.79661467859, 2464.79661467859);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex0.acos();
      complex6.NaN.sinh();
      Complex complex8 = complex7.ONE.pow(0.0);
      Complex complex9 = complex7.I.createComplex(2464.79661467859, 2464.79661467859);
      complex9.ZERO.conjugate();
      Complex complex10 = Complex.valueOf(684.245716319);
      Complex complex11 = complex4.acos();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex7.atan();
      Complex complex14 = Complex.NaN;
      complex12.multiply(complex11);
      Complex complex15 = new Complex(0.0, 0.0);
      complex2.divide(complex15);
      complex9.getReal();
      complex13.readResolve();
      complex3.pow(complex6);
      complex13.subtract(complex4);
      Complex complex16 = complex8.negate();
      complex16.divide(Double.POSITIVE_INFINITY);
      Complex complex17 = complex14.negate();
      complex10.isNaN();
      complex3.sqrt();
      complex17.getReal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.atan();
      complex1.NaN.acos();
      complex2.ZERO.getField();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.tanh();
      complex5.NaN.conjugate();
      Complex complex7 = complex6.ONE.divide(complex5);
      Complex complex8 = complex6.ZERO.pow(complex3);
      complex1.sqrt1z();
      complex4.pow((-1855.3758));
      Complex complex9 = complex7.cos();
      complex9.getArgument();
      complex8.nthRoot(1024);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(3.965171513035854E23);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.sinh();
      complex2.toString();
      complex2.divide(3.965171513035854E23);
      complex0.ONE.add((-1419.7380252940884));
      Complex complex5 = complex2.pow((-1419.7380252940884));
      Complex complex6 = Complex.ONE;
      complex4.equals("(Infinity, -Infinity)");
      complex3.sinh();
      complex6.subtract(complex5);
      complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = 469.0554;
      Complex complex0 = Complex.valueOf(469.0554, 469.0554);
      complex0.ZERO.add(469.0554);
      Complex complex1 = complex0.INF.conjugate();
      double double1 = (-1156.59427227);
      complex1.ONE.add((-1156.59427227));
      Complex complex2 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.NaN.tanh();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.sqrt1z();
      complex4.cos();
      Complex.valueOf(1.8386917534879182E-8);
      complex4.I.pow((-2108.630281));
      complex4.ZERO.add(complex0);
      double double0 = 0.0;
      try { 
        complex2.nthRoot((-3596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,596
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.pow(1.2844402232816276E290);
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex2.NaN.hashCode();
      complex0.getImaginary();
      Complex.valueOf(0.0);
      complex1.ZERO.subtract(4020.674968014);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.INF.divide(complex0);
      complex4.abs();
      complex4.getField();
      complex3.toString();
      Complex complex5 = complex0.subtract((-2193.719036));
      complex1.isInfinite();
      complex2.abs();
      Complex complex6 = complex1.multiply((-1126.4890415778427));
      complex6.reciprocal();
      complex6.multiply(1096.633056640625);
      complex0.cos();
      complex5.getArgument();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1.159150872494107E-8);
      Complex complex1 = complex0.subtract(2.3524770736694336);
      complex1.INF.add(complex0);
      complex1.multiply(1.159150872494107E-8);
      complex1.ONE.toString();
      Complex complex2 = complex0.tan();
      complex0.ZERO.atan();
      Complex complex3 = complex0.cos();
      complex3.ZERO.toString();
      double double0 = 0.0;
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = Complex.valueOf(7.0173488566, 0.0);
      complex5.ONE.readResolve();
      complex5.I.abs();
      complex4.NaN.add(complex3);
      Complex.valueOf((-401.90899347785444), 2.3524770736694336);
      complex4.atan();
      Complex complex6 = complex2.multiply(7.0173488566);
      int int0 = (-1451);
      try { 
        complex6.INF.nthRoot((-1451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,451
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = complex2.ZERO.subtract((-1987.02685));
      Complex complex4 = Complex.valueOf((-1.8364507801369988E-8), (-217.0));
      Complex complex5 = complex4.ZERO.acos();
      complex0.getField();
      Complex complex6 = complex2.NaN.conjugate();
      complex6.subtract(complex4);
      complex4.hashCode();
      Complex complex7 = complex1.conjugate();
      complex2.sqrt1z();
      Complex.valueOf((-1.0));
      complex3.sinh();
      Complex complex8 = complex7.subtract((-217.0));
      Complex complex9 = complex8.atan();
      complex9.ZERO.add((-1987.02685));
      complex9.ZERO.subtract(0.0);
      complex8.multiply(complex3);
      complex1.getField();
      Complex complex10 = complex2.add(complex5);
      complex10.NaN.tan();
      complex5.negate();
      complex5.nthRoot(3864);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex1.INF.abs();
      Complex complex2 = complex0.log();
      complex2.ZERO.divide(1.0);
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex0.negate();
      complex3.NaN.reciprocal();
      complex3.ONE.readResolve();
      Complex.valueOf(0.0, 0.47158926725387573);
      complex1.exp();
      complex2.asin();
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1382.298), 2.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.pow(complex1);
      complex1.exp();
      complex3.ONE.multiply(1.0);
      Complex complex4 = complex3.ONE.log();
      complex1.readResolve();
      Complex complex5 = complex4.sinh();
      complex5.sqrt();
      Complex.valueOf(2.0);
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex0.negate();
      Complex.valueOf(1.0, 2.0);
      complex4.NaN.hashCode();
      complex1.NaN.pow(complex2);
      Complex complex8 = complex7.sqrt();
      complex8.ZERO.sqrt();
      Complex complex9 = complex2.ZERO.divide(complex3);
      Complex complex10 = complex6.multiply(1);
      complex10.INF.getField();
      complex5.INF.add(0.0);
      Complex complex11 = complex2.atan();
      Complex complex12 = complex9.pow(1272.27854279);
      complex12.tanh();
      complex5.isNaN();
      complex9.subtract((double) 1);
      Complex complex13 = complex11.multiply(0.0);
      complex10.negate();
      complex3.equals("org.apache.commons.math3.util.FastMath$lnMant");
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 352.0);
      Complex complex2 = complex1.I.multiply(352.0);
      complex0.NaN.divide(273.94178949576);
      Complex complex3 = complex2.INF.divide((-2476.47156));
      complex3.I.acos();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.INF.reciprocal();
      complex4.readResolve();
      Complex complex6 = Complex.NaN;
      complex6.ZERO.abs();
      Complex complex7 = complex1.add(complex6);
      complex7.hashCode();
      complex5.abs();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
      complex0.NaN.sinh();
      Complex complex1 = complex0.INF.multiply(6.283185307179586);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ONE.pow(Double.NaN);
      complex3.INF.abs();
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex2.ONE.subtract(6.283185307179586);
      complex0.getImaginary();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      complex5.sqrt1z();
      complex0.isInfinite();
      Complex complex7 = complex5.add(0.0);
      complex1.ONE.toString();
      complex4.isNaN();
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex6.subtract(complex7);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2664.920232212, 2664.920232212);
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.ONE.getArgument();
      complex1.NaN.cosh();
      Complex.valueOf(2239.93431328601, 2239.93431328601);
      complex0.pow(2664.920232212);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(2094.668);
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.INF.cos();
      complex0.NaN.hashCode();
      complex0.multiply(0);
      Complex.valueOf((-155.1845888819), (-155.1845888819));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.785306155980342E-26), (-9.785306155980342E-26));
      Complex complex1 = Complex.I;
      complex0.I.multiply(complex1);
      complex0.NaN.getArgument();
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.INF.reciprocal();
      complex0.isNaN();
      complex0.toString();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ONE.sqrt();
      complex0.nthRoot(973);
      Complex complex6 = complex1.NaN.reciprocal();
      complex1.ZERO.sin();
      complex2.isInfinite();
      Complex complex7 = complex1.pow((double) 973);
      complex2.ONE.pow(complex1);
      Complex complex8 = complex7.ZERO.multiply(0);
      complex8.NaN.multiply((double) 0);
      Complex complex9 = Complex.valueOf(541.27987435, (double) 973);
      Complex complex10 = complex9.tan();
      complex6.hashCode();
      Complex complex11 = complex2.ZERO.subtract(complex6);
      complex11.NaN.subtract(complex5);
      complex0.sin();
      complex0.getImaginary();
      Complex complex12 = complex6.reciprocal();
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex4.multiply(1.0);
      complex10.abs();
      complex12.readResolve();
      complex3.equals(complex7);
      complex2.negate();
      complex4.equals(complex3);
      complex13.conjugate();
      complex14.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = Complex.valueOf(316.648951484, 316.648951484);
      complex3.ZERO.toString();
      complex0.subtract(complex3);
      complex2.multiply(complex0);
      Complex complex4 = complex0.acos();
      complex4.createComplex(0.0, 2416.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3089.0090581));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.I.multiply(complex1);
      complex3.I.nthRoot(1141);
      complex0.multiply(0);
      Complex complex4 = Complex.valueOf((double) 0);
      Complex complex5 = Complex.valueOf((-3089.0090581), 1.0);
      complex5.exp();
      complex4.atan();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-933.815485));
      Complex complex1 = Complex.valueOf((-933.815485), (-933.815485));
      Complex complex2 = complex1.pow((-1.1474026049124666E-17));
      Complex complex3 = complex0.subtract(complex1);
      complex3.abs();
      Complex complex4 = Complex.valueOf(2.0, 933.815485);
      complex1.divide(complex4);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.add(complex3);
      complex6.ONE.getArgument();
      complex2.toString();
      Complex complex7 = complex3.negate();
      complex2.negate();
      complex2.acos();
      complex7.createComplex(0.0, (-1.1474026049124666E-17));
      Complex complex8 = complex0.reciprocal();
      complex8.INF.tanh();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1236.0, 1236.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.log();
      Complex.valueOf(1812.53046350107, 1812.53046350107);
      complex0.INF.add(0.0);
      Complex.valueOf((-2311.0), 2.3984878190403553E-145);
      Complex complex3 = complex0.add(complex2);
      complex3.abs();
      complex3.cos();
      complex0.negate();
      complex1.cosh();
      complex1.add((-920.7770714129103));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract((-333.02924329918));
      Complex complex3 = complex1.subtract(complex0);
      complex3.ZERO.sqrt();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex0.ONE.reciprocal();
      complex0.I.negate();
      complex5.I.add(complex4);
      complex0.I.divide(complex1);
      complex0.atan();
      complex0.tan();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex4.I.cos();
      complex6.INF.negate();
      complex1.INF.log();
      complex0.INF.tan();
      complex6.pow(0.0);
      complex7.tanh();
      complex2.equals(complex4);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5243410574836706E106, (-1.9115659590156936E-8));
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.conjugate();
      complex1.toString();
      Complex.valueOf((-1.9115659590156936E-8), 0.0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = (-1295.719);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex((-1295.719), Double.POSITIVE_INFINITY);
      double double2 = 90.9;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(4885);
      Complex complex2 = complex1.ONE.cos();
      complex0.getArgument();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1559.63355), (-1559.63355));
      complex0.ZERO.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex1.I.reciprocal();
      complex2.multiply(1043.657695473134);
      complex2.multiply(complex0);
      Complex.valueOf(0.2837681770324707, 0.2837681770324707);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(1.596435785293579, 1.596435785293579);
      complex0.ZERO.subtract((-1626.5539995083));
      complex0.createComplex(1.596435785293579, 1.596435785293579);
      complex0.multiply(834);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = Complex.I;
      complex1.ONE.pow(1028.0260281);
      complex0.ZERO.tan();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex3.ONE.reciprocal();
      complex4.ONE.divide(complex3);
      Complex complex5 = complex0.exp();
      complex5.subtract(complex2);
      complex4.INF.sinh();
      Complex complex6 = complex0.negate();
      complex0.multiply(2236);
      Complex complex7 = complex2.cos();
      complex7.conjugate();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex0.atan();
      complex4.I.subtract(complex3);
      Complex complex5 = complex4.ZERO.pow(complex1);
      complex5.ZERO.exp();
      complex5.ZERO.tan();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex1.I.negate();
      complex8.ZERO.multiply(2902.1172269567);
      Complex complex9 = complex1.cos();
      complex6.ZERO.sin();
      complex9.getImaginary();
      Complex complex10 = complex1.negate();
      complex7.cosh();
      Complex complex11 = complex0.divide(0.0);
      Complex complex12 = complex11.atan();
      complex12.NaN.sqrt1z();
      complex12.exp();
      complex3.ZERO.multiply(0.0);
      complex0.isInfinite();
      complex3.sqrt1z();
      complex2.getImaginary();
      Complex complex13 = Complex.valueOf((-33.1221469340423), (-1255.47699));
      complex2.nthRoot(7);
      Complex complex14 = complex2.acos();
      complex14.negate();
      complex13.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(677.55445837891);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ONE.cosh();
      Complex complex3 = complex2.ZERO.multiply(677.55445837891);
      complex0.createComplex(677.55445837891, 0.0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex2.add(complex5);
      complex3.getField();
      complex6.hashCode();
      complex1.cos();
      complex1.ZERO.sinh();
      complex3.createComplex(0.0, 677.55445837891);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-759.2198118511), (-759.2198118511));
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
      complex0.tan();
      Complex complex2 = complex0.createComplex(0.0, (-6.997545435826076E-8));
      complex2.getReal();
      complex2.multiply((-759.2198118511));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(2412.83962, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ZERO.abs();
      complex0.subtract(complex1);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(3.965171513035854E23);
      Complex complex2 = complex1.INF.conjugate();
      complex2.I.reciprocal();
      Complex complex3 = complex1.sinh();
      complex2.toString();
      complex2.divide(3.965171513035854E23);
      complex0.ONE.add((-1419.7380252940884));
      complex2.pow((-1419.7380252940884));
      complex3.isNaN();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.negate();
      complex3.atan();
      complex1.NaN.acos();
      complex2.ZERO.getField();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.tanh();
      complex4.NaN.conjugate();
      Complex complex6 = complex5.ONE.divide(complex4);
      complex5.ZERO.pow(complex3);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.ONE.atan();
      complex4.readResolve();
      complex8.toString();
      Complex complex9 = complex7.cosh();
      complex6.reciprocal();
      complex9.pow(complex4);
      complex1.multiply((-2.1899520225809197E-7));
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-9.684925795536813E116));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.sin();
      complex2.ZERO.acos();
      Complex complex3 = Complex.valueOf((-9.684925795536813E116), 5.294053246347931E-8);
      complex3.INF.sqrt();
      complex0.asin();
      complex1.abs();
      complex0.toString();
      complex1.hashCode();
      complex2.multiply(1);
      Complex.valueOf(0.0, 5.294053246347931E-8);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(684.245716319);
      Complex complex3 = complex1.NaN.sqrt1z();
      complex1.INF.multiply(0.0);
      Complex complex4 = complex1.add((-87.29));
      Complex complex5 = complex0.createComplex(2464.79661467859, 2464.79661467859);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex0.acos();
      complex6.NaN.sinh();
      complex7.ONE.pow(0.0);
      Complex complex8 = complex7.I.createComplex(2464.79661467859, 2464.79661467859);
      complex8.ZERO.conjugate();
      Complex.valueOf(684.245716319);
      Complex complex9 = complex1.createComplex(2464.79661467859, 0.0);
      complex9.readResolve();
      complex6.abs();
      complex0.ZERO.tan();
      complex4.NaN.reciprocal();
      complex0.getField();
      Complex complex10 = complex0.tanh();
      complex4.pow(complex1);
      Complex.valueOf(0.0, (-87.29));
      complex2.add(1.0157477855682373);
      complex10.getField();
      complex3.tan();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.negate();
      complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex1.NaN.asin();
      complex4.acos();
      complex1.NaN.cos();
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex0.pow((-3094.3813828442));
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex3.multiply((-4231));
      Complex complex9 = complex8.INF.exp();
      complex1.negate();
      Complex complex10 = complex9.ONE.pow(complex6);
      complex10.ZERO.sinh();
      complex7.INF.log();
      complex8.readResolve();
      complex7.toString();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex11 = complex2.createComplex((-1224.29), 0.0);
      Object object1 = complex8.readResolve();
      complex6.equals(object1);
      complex11.pow(complex5);
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply((-117.0));
      Complex complex3 = complex2.INF.subtract(0.0);
      complex3.INF.exp();
      Complex complex4 = complex3.I.atan();
      complex4.INF.cosh();
      complex2.add((-2816.1062561564));
      complex2.isInfinite();
      Complex complex5 = complex0.subtract((-117.0));
      complex5.ZERO.exp();
      complex5.INF.cos();
      complex3.isInfinite();
      complex2.multiply((-2392));
      Complex.valueOf((-4252.751369109827), 0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.ZERO.multiply(2.0);
      Complex complex2 = complex1.ZERO.add(2.0);
      complex1.INF.negate();
      Complex complex3 = complex0.pow(0.0);
      complex0.equals(complex3);
      complex0.ZERO.multiply(2732.1);
      complex2.getField();
      Complex complex4 = Complex.valueOf(2.0, 2.0);
      complex4.I.subtract(complex3);
      Complex complex5 = complex3.subtract(complex2);
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-839.5659028008813), 5.517990469846618E229);
      complex0.INF.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.exp();
      Complex.valueOf((-1201.9985));
      Complex complex3 = complex0.divide((-3396.208257));
      complex3.ZERO.asin();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex2.ONE.subtract((-839.5659028008813));
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex2.pow((-839.5659028008813));
      Complex complex8 = complex6.ZERO.sqrt();
      complex8.tan();
      complex7.ZERO.divide(complex2);
      complex4.ZERO.exp();
      complex7.NaN.sinh();
      complex7.add((-1744.812499427));
      Complex complex9 = complex6.acos();
      Complex complex10 = complex4.I.asin();
      complex9.ONE.atan();
      Complex complex11 = Complex.NaN;
      complex9.multiply(complex11);
      complex2.divide(complex6);
      complex7.getReal();
      complex3.readResolve();
      Complex complex12 = complex3.pow(complex0);
      complex4.subtract(complex12);
      complex11.negate();
      Complex complex13 = complex10.divide((-839.5659028008813));
      complex13.ZERO.negate();
      complex5.isNaN();
      complex10.sqrt();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(2827.389205947275);
      try { 
        complex0.ONE.nthRoot((-1446));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,446
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.ONE.getField();
      Complex complex3 = complex2.NaN.tanh();
      complex2.cos();
      Complex complex4 = complex2.subtract(complex0);
      complex1.hashCode();
      Complex complex5 = complex1.cosh();
      complex3.multiply(complex4);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.add((-364.6));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.multiply(1);
      Complex complex4 = complex3.tan();
      complex2.atan();
      Complex complex5 = complex4.divide((double) 1);
      Complex complex6 = complex2.multiply(1);
      complex6.I.reciprocal();
      complex5.isInfinite();
      complex0.add((double) 1);
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-986.696), (-986.696));
      Complex complex2 = complex0.exp();
      complex2.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.INF.pow((-986.696));
      Complex complex5 = complex2.acos();
      complex5.nthRoot(1);
      Complex complex6 = complex2.multiply(0);
      Complex complex7 = complex2.multiply(126);
      Complex complex8 = complex7.NaN.conjugate();
      complex8.NaN.subtract(complex2);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex9.ONE.pow((double) 0);
      assertFalse(complex10.equals((Object)complex4));
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      complex9.getArgument();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex11.divide(complex6);
      List<Complex> list0 = complex12.ZERO.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex13 = complex1.atan();
      Complex complex14 = complex1.cosh();
      complex11.I.multiply(complex8);
      Complex complex15 = complex14.sqrt1z();
      Complex complex16 = complex15.NaN.exp();
      List<Complex> list1 = complex11.nthRoot(1);
      assertFalse(list1.contains(complex0));
      
      complex13.equals("");
      assertEquals((-1.5702895850166836), complex13.getReal(), 0.01);
      assertEquals((-5.067416047132836E-4), complex13.getImaginary(), 0.01);
      
      complex11.getImaginary();
      complex15.NaN.subtract(complex9);
      assertSame(complex9, complex16);
      
      Complex complex17 = complex11.cosh();
      Complex complex18 = complex15.acos();
      assertTrue(complex15.equals((Object)complex17));
      assertSame(complex18, complex11);
      assertEquals(Double.NEGATIVE_INFINITY, complex15.getImaginary(), 0.01);
      
      complex6.isNaN();
      assertTrue(complex0.equals((Object)complex14));
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex12);
  }
}
