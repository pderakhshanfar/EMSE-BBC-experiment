/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:58:27 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.080174837146273E-8, 40.47841760435743);
      Complex complex2 = new Complex(1.0, 40.47841760435743);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex(6.080174837146273E-8);
      complex4.tanh();
      Complex complex6 = Complex.NaN;
      complex4.nthRoot(662);
      Complex complex7 = new Complex(6.080174837146273E-8, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(3.0, 6.080174837146273E-8);
      Complex complex9 = Complex.ZERO;
      complex6.tanh();
      Complex complex10 = Complex.NaN;
      complex10.hashCode();
      complex1.multiply(complex7);
      complex10.log();
      complex3.asin();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.subtract(0.0);
      complex3.NaN.log();
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex4.sqrt1z();
      complex2.I.negate();
      complex2.abs();
      complex1.ONE.sqrt();
      complex2.getReal();
      complex0.negate();
      Complex complex6 = complex0.INF.sinh();
      Complex complex7 = complex1.multiply(1);
      complex7.I.sinh();
      Complex complex8 = complex3.add(Double.POSITIVE_INFINITY);
      complex8.getField();
      complex8.pow(1590.464536301);
      complex8.ZERO.abs();
      Complex complex9 = complex8.I.pow((double) 1);
      Complex complex10 = complex2.sqrt1z();
      complex2.getReal();
      complex5.createComplex(182.0, Double.POSITIVE_INFINITY);
      complex10.reciprocal();
      complex6.tanh();
      complex2.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.NaN.multiply(7);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.ZERO.sinh();
      Complex complex4 = complex0.cos();
      complex2.getArgument();
      Complex complex5 = complex4.I.reciprocal();
      complex5.ONE.subtract(complex3);
      complex3.INF.divide(20.0);
      complex5.NaN.multiply(20.0);
      Complex complex6 = complex2.multiply(37);
      Complex complex7 = complex4.add(complex6);
      complex5.ZERO.getArgument();
      Complex complex8 = complex0.reciprocal();
      complex8.ONE.toString();
      Complex complex9 = complex5.I.asin();
      complex8.ONE.exp();
      complex9.INF.conjugate();
      Complex complex10 = complex8.acos();
      complex5.atan();
      complex3.sqrt1z();
      complex9.toString();
      Complex complex11 = complex4.divide((double) 37);
      Complex complex12 = complex11.multiply(794);
      complex10.exp();
      complex8.exp();
      complex12.getField();
      complex9.conjugate();
      complex3.conjugate();
      complex7.multiply(-0.0);
      complex6.atan();
      complex2.nthRoot(478);
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-207.95337783), Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4.135121057126514E24));
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.I;
      complex2.pow(complex0);
      complex1.toString();
      Complex complex4 = complex1.cosh();
      Complex.valueOf(1359.9703790340084, (-4.135121057126514E24));
      Complex complex5 = complex4.cos();
      complex1.cosh();
      complex5.sqrt();
      Complex complex6 = new Complex((-2057.1732015898415));
      Complex complex7 = new Complex((-4.135121057126514E24));
      Complex complex8 = complex7.tanh();
      complex8.I.tanh();
      Complex complex9 = Complex.NaN;
      complex0.nthRoot(707);
      Complex complex10 = new Complex(707, 1359.9703790340084);
      complex1.readResolve();
      Complex complex11 = Complex.ZERO;
      Complex.valueOf(1359.9703790340084, (double) 707);
      complex10.multiply(complex7);
      Complex complex12 = new Complex(707, (-2057.1732015898415));
      complex12.log();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tanh();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-207.95337783), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-601.37800793142), Double.POSITIVE_INFINITY);
      complex1.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2612435745231905E181);
      Complex complex1 = complex0.NaN.subtract(1.2612435745231905E181);
      complex1.I.multiply(1.2612435745231905E181);
      Complex complex2 = complex0.sqrt1z();
      complex0.I.cos();
      Complex complex3 = complex2.cos();
      complex3.INF.getField();
      complex3.ONE.readResolve();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.pow(complex2);
      complex4.I.sin();
      Complex complex7 = complex6.INF.multiply(773);
      complex4.abs();
      Complex complex8 = Complex.valueOf(1.2612435745231905E181, 1.2612435745231905E181);
      Complex complex9 = complex5.add(complex4);
      Complex complex10 = complex0.tan();
      complex10.asin();
      complex9.I.pow(complex7);
      complex9.ONE.pow(complex8);
      complex9.nthRoot(1732);
      Complex complex11 = complex4.sqrt1z();
      complex8.cosh();
      complex11.NaN.multiply(complex7);
      Complex complex12 = complex8.multiply(Double.POSITIVE_INFINITY);
      complex11.sqrt();
      complex1.divide(297309.4798999709);
      complex8.sin();
      complex8.getField();
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex12.nthRoot(745);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1.7740094661712646);
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.multiply((-2014));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-1));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1.4674011002723395), (-20.0));
      complex1.ONE.getArgument();
      Complex complex2 = complex1.multiply(0.0);
      complex2.multiply(complex1);
      complex2.negate();
      complex1.tan();
      Complex complex3 = new Complex(5.091070300111434E-88, (-790.71113));
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 0.18647104883458057);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.4674011002723395), Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.log();
      Complex complex3 = complex1.sinh();
      Complex.valueOf(Double.NaN);
      complex3.tan();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.negate();
      Complex complex1 = complex0.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(37);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.add(complex5);
      complex6.NaN.divide(complex2);
      Complex complex7 = complex5.I.acos();
      complex5.ZERO.divide(complex6);
      complex7.I.toString();
      Complex complex8 = complex1.createComplex(37, 9.444333728929502E-5);
      Complex complex9 = complex8.ONE.multiply(complex0);
      Complex complex10 = Complex.valueOf((double) 37, 9.444333728929502E-5);
      complex1.ONE.pow(9.444333728929502E-5);
      Complex complex11 = complex1.add(complex5);
      Complex complex12 = complex8.divide((double) 37);
      complex11.NaN.nthRoot(1055);
      complex7.multiply(37);
      Complex complex13 = complex10.asin();
      Complex complex14 = complex6.sqrt1z();
      complex14.I.tanh();
      complex9.multiply(complex5);
      complex4.exp();
      complex12.asin();
      complex11.pow((double) 37);
      complex13.subtract(1.5712642042862062);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1.4674011002723395), (-3136.29319737));
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex((-3136.29319737), (-20.0));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.log();
      complex1.tan();
      complex3.exp();
      Complex complex4 = Complex.NaN;
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1.3478247120462365E194, 6.283185307179586);
      Complex complex1 = complex0.acos();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = (Complex)complex2.readResolve();
      complex1.getImaginary();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-3136.29319737), (-1.4674011002723395));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-3136.29319737));
      complex0.negate();
      Complex complex3 = Complex.ONE;
      complex3.log();
      complex2.add((-1.4674011002723395));
      complex3.multiply((-3136.29319737));
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-878.853882), Double.NaN);
      Complex complex1 = complex0.acos();
      complex1.ONE.readResolve();
      complex0.nthRoot(461);
      Complex complex2 = complex0.tanh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-639.5169), (-2.809054633964104E-8));
      Complex complex1 = complex0.I.log();
      complex0.atan();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9279594746502846E161, Double.NaN);
      Complex complex1 = complex0.multiply(1337);
      Complex complex2 = complex1.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.atan();
      complex1.divide(complex2);
      Complex complex3 = complex0.negate();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex2.ONE.getArgument();
      Complex complex3 = complex1.tanh();
      complex0.subtract((-239.0));
      complex1.readResolve();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2386.647), 536.79578075);
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-567.025104565207));
      Complex complex3 = complex2.ZERO.subtract((-567.025104565207));
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = Complex.valueOf((-2386.647));
      Complex complex6 = complex5.NaN.add((-940.923872269676));
      Complex complex7 = complex3.asin();
      Complex complex8 = complex3.INF.sqrt1z();
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex7.ONE.acos();
      Complex complex11 = complex2.pow((-2386.647));
      Complex complex12 = complex11.ONE.createComplex(6.52252321321176E-8, 6.52252321321176E-8);
      complex11.ZERO.conjugate();
      Complex complex13 = complex3.sin();
      complex13.I.getArgument();
      complex12.cosh();
      Complex.valueOf(513.6366558);
      complex4.createComplex(Double.NaN, (-1817.7687));
      Complex complex14 = complex10.createComplex(3556.2154, 6.52252321321176E-8);
      complex13.subtract(complex9);
      complex6.negate();
      complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex((-2698.0), (-2698.0));
      complex2.log();
      Complex complex3 = complex1.multiply((-2698.0));
      Complex complex4 = new Complex((-2698.0), (-2698.0));
      Complex complex5 = complex0.log();
      complex5.ONE.sin();
      complex5.tan();
      complex3.exp();
      Complex complex6 = new Complex((-2698.0), (-2698.0));
      complex3.equals(complex0);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.asin();
      Complex complex1 = new Complex(0.006737947463989258, Double.POSITIVE_INFINITY);
      complex1.log();
      complex1.multiply(0.006737947463989258);
      complex0.negate();
      complex1.log();
      try { 
        complex0.nthRoot((-2066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,066
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-567.025104565207), (-1.4674011002723395));
      Complex complex1 = complex0.log();
      complex1.multiply((-3136.29319737));
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.log();
      complex0.nthRoot(989);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex2.sin();
      complex6.add(complex5);
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, 3737.3751171);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(1112.78461225);
      Complex complex3 = complex2.subtract((-3136.29319737));
      complex3.pow(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.subtract((-3136.29319737));
      complex5.reciprocal();
      Complex complex6 = complex0.exp();
      complex0.getField();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(Double.NaN, 774.4);
      complex6.cos();
      try { 
        complex4.nthRoot((-173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -173
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-0.5113252103366475));
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.valueOf(0.01742541790008545);
      Complex complex5 = complex4.multiply(1892978487);
      complex4.add(1086.77450045126);
      complex5.hashCode();
      complex0.getImaginary();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(697.2176131471525);
      Complex complex1 = new Complex(2.581312717296228E20, 464.12);
      complex1.conjugate();
      complex1.getField();
      complex0.hashCode();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 1.3695101737976074;
      double double1 = 1092.5;
      Complex complex0 = new Complex(1.3695101737976074, 1092.5);
      complex0.NaN.pow(1092.5);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sqrt1z();
      complex1.subtract(1092.5);
      complex2.ONE.getField();
      Complex complex3 = complex1.divide(1092.5);
      Complex complex4 = complex3.INF.negate();
      complex4.INF.multiply(complex3);
      Complex complex5 = complex1.add((-2028.9054593));
      try { 
        complex5.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cos();
      complex2.ONE.atan();
      complex1.ONE.getField();
      Complex complex3 = complex0.multiply(complex1);
      double double0 = (-5591.42561345);
      complex3.pow((-5591.42561345));
      Complex complex4 = complex0.conjugate();
      complex0.divide(796.73);
      Complex complex5 = complex4.negate();
      complex4.abs();
      Complex complex6 = complex4.exp();
      complex6.getField();
      complex1.pow(Double.NaN);
      Complex complex7 = complex5.multiply(complex0);
      Complex complex8 = complex7.ZERO.divide(Double.NaN);
      try { 
        complex8.I.nthRoot((-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,480
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.add((-20.0));
      Complex complex2 = new Complex((-20.0), (-20.0));
      complex1.isNaN();
      complex0.atan();
      Complex complex3 = new Complex((-20.0), (-20.0));
      Complex complex4 = complex3.subtract((-20.0));
      complex0.add(complex3);
      complex1.asin();
      complex4.readResolve();
      Complex complex5 = complex3.sin();
      Complex.valueOf(0.0);
      complex4.toString();
      complex5.cosh();
      complex1.cos();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = Complex.INF;
      complex6.tan();
      complex0.abs();
      Complex complex8 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.4362447213888546);
      Complex complex1 = complex0.add(6.283185307179586);
      Complex complex2 = new Complex(0.4362447213888546, 2097.513391);
      Complex complex3 = Complex.INF;
      complex3.isNaN();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.cos();
      complex4.pow(complex5);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.subtract((-20.0));
      Complex complex8 = Complex.NaN;
      complex8.exp();
      complex7.getField();
      Complex complex9 = Complex.NaN;
      complex6.cos();
      try { 
        complex7.nthRoot((-1148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,148
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2225));
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex((-2225));
      complex2.INF.pow((-1198.172457112113));
      Complex complex4 = Complex.NaN;
      complex3.getField();
      Complex complex5 = Complex.NaN;
      complex3.reciprocal();
      complex1.isInfinite();
      complex2.isNaN();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-7.81295459930537E-72), 6.283185307179586);
      Complex complex1 = complex0.acos();
      complex0.getArgument();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.add((-676.2662720461));
      complex4.ZERO.multiply(1791);
      complex3.hashCode();
      complex1.getImaginary();
      complex3.divide((-2.537297501373361));
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, (-3136.29319737));
      Complex complex1 = complex0.multiply(1110);
      Complex complex2 = Complex.ONE;
      complex0.subtract(complex2);
      complex0.ONE.cosh();
      Complex complex3 = complex1.pow((-3136.29319737));
      complex2.negate();
      complex3.getField();
      Complex complex4 = Complex.NaN;
      Complex.valueOf(548.691991082968, 548.691991082968);
      Complex complex5 = Complex.INF;
      complex5.reciprocal();
      Complex complex6 = Complex.I;
      complex6.isInfinite();
      complex3.isNaN();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = new Complex(0.0, (-20.0));
      complex2.isNaN();
      complex1.atan();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.tanh();
      complex4.subtract((-151.5570973513235));
      complex2.reciprocal();
      Complex complex6 = complex5.exp();
      complex5.getField();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.cos();
      try { 
        complex8.nthRoot((-612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -612
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3136.29319737), (-828.552772));
      Complex complex1 = complex0.divide(548.691991082968);
      Complex complex2 = complex1.sinh();
      complex0.log();
      Complex complex3 = complex0.multiply((-2.0));
      complex3.log();
      complex2.nthRoot(989);
      complex2.tan();
      Complex complex4 = new Complex((-3136.29319737), (-3136.29319737));
      Complex complex5 = complex4.exp();
      complex5.sin();
      Complex complex6 = Complex.INF;
      complex5.ONE.subtract(complex6);
      Complex complex7 = complex5.add(complex3);
      complex7.equals(complex0);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, (-3136.29319737));
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt1z();
      complex1.tanh();
      Complex complex2 = complex0.tanh();
      complex2.readResolve();
      complex0.isNaN();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex2.pow(complex0);
      complex4.tanh();
      complex2.subtract((-4928.9189917242));
      complex1.reciprocal();
      Complex complex7 = complex1.exp();
      complex2.getField();
      complex6.toString();
      Complex complex8 = complex5.acos();
      complex5.cosh();
      Complex complex9 = complex7.cos();
      complex8.conjugate();
      complex6.add(complex3);
      Complex complex10 = Complex.NaN;
      Complex complex11 = new Complex(1.5430806348152437);
      complex11.tan();
      complex5.conjugate();
      complex5.reciprocal();
      complex11.getField();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-7.81295459930537E-72), 6.283185307179586);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-7.81295459930537E-72));
      Complex complex3 = complex2.subtract((-7763.4480417));
      complex3.add(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.sqrt1z();
      complex4.hashCode();
      complex5.add(complex4);
      Complex complex6 = Complex.valueOf((-2145.488993743481));
      complex6.conjugate();
      Complex complex7 = new Complex(6.283185307179586, 9.711118051288606E-74);
      complex7.atan();
      Complex complex8 = Complex.INF;
      complex8.subtract(complex2);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3136.29319737), (-828.552772));
      Complex complex1 = complex0.divide(548.691991082968);
      Complex complex2 = complex1.sinh();
      complex0.getImaginary();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.tanh();
      Complex complex6 = (Complex)complex0.readResolve();
      complex5.isNaN();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex4.pow(complex8);
      Complex complex10 = complex4.tanh();
      complex0.subtract(1.5430806348152437);
      complex3.reciprocal();
      complex7.exp();
      complex7.getField();
      complex0.toString();
      complex10.acos();
      complex6.cosh();
      complex10.cos();
      complex9.conjugate();
      complex0.add(complex4);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.tan();
      complex12.conjugate();
      complex10.reciprocal();
      complex2.getField();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, (-3136.29319737));
      Complex complex1 = complex0.ONE.multiply((-3136.29319737));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(0.0, 548.691991082968);
      Complex complex4 = complex1.asin();
      Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.pow(complex0);
      complex5.NaN.toString();
      Complex complex7 = complex0.acos();
      complex7.cosh();
      Complex complex8 = new Complex((-3136.29319737));
      Complex complex9 = Complex.valueOf(2778.89921, 2778.89921);
      complex5.hashCode();
      complex4.cos();
      Complex complex10 = Complex.ONE;
      Complex.valueOf(4977.5729);
      complex9.divide(complex6);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, 548.691991082968);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ONE.multiply(548.691991082968);
      Complex complex3 = complex1.negate();
      complex0.log();
      complex0.exp();
      complex0.sin();
      complex1.add(complex2);
      complex0.equals(complex3);
      complex1.sqrt1z();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-7.81295459930537E-72), 6.283185307179586);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-7.81295459930537E-72));
      Complex complex3 = complex2.subtract((-7763.4480417));
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.sqrt1z();
      complex6.readResolve();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex2.pow(complex7);
      complex0.toString();
      Complex complex9 = complex7.cosh();
      complex9.NaN.atan();
      complex9.cos();
      complex1.conjugate();
      Complex complex10 = Complex.INF;
      complex4.tan();
      complex8.conjugate();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1101.3);
      complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      complex2.INF.multiply((-614));
      Complex complex3 = complex0.createComplex(1420.0552, 1420.0552);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.pow(1420.0552);
      complex5.INF.getArgument();
      complex0.ONE.conjugate();
      complex2.tan();
      Complex complex6 = complex1.pow(complex0);
      complex6.ZERO.toString();
      Complex complex7 = complex2.pow((-1278.4839391643266));
      Complex complex8 = complex7.ONE.subtract(2166.51934880514);
      complex8.I.pow(complex1);
      complex3.isInfinite();
      Complex complex9 = complex5.asin();
      complex4.pow(1101.3);
      complex9.cosh();
      complex6.tanh();
      Complex.valueOf((-1278.4839391643266), 1.6455042362213135);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.add((-20.0));
      double double0 = 4016.575;
      complex0.readResolve();
      complex1.isNaN();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.cos();
      complex2.pow(complex0);
      complex1.tanh();
      Complex complex4 = complex0.subtract((-2121.4767020841));
      complex4.reciprocal();
      Complex complex5 = complex0.exp();
      complex3.getField();
      complex0.sqrt();
      complex3.cos();
      int int0 = 1645;
      try { 
        complex5.nthRoot((-1148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,148
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-2383.50912023), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt();
      complex2.nthRoot(824);
      Complex complex3 = complex1.conjugate();
      complex0.tanh();
      complex3.sqrt();
      complex2.nthRoot(824);
      Complex complex4 = new Complex(824, 4.4679598461255495E-4);
      Complex complex5 = complex4.multiply(832);
      Complex complex6 = complex0.sin();
      complex0.subtract(complex5);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.divide(complex6);
      complex8.getField();
      complex1.hashCode();
      Complex complex9 = complex4.add(complex6);
      complex9.multiply(37);
      Complex complex10 = Complex.I;
      complex10.subtract((double) 824);
      complex5.multiply(complex10);
      Complex complex11 = complex5.sinh();
      complex11.nthRoot(37);
      Complex complex12 = new Complex(37, (-2.0));
      complex12.nthRoot(597);
      complex6.toString();
      complex7.reciprocal();
      complex12.cosh();
      Complex.valueOf((-978.6));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2237.804731411275), (-2237.15795572046));
      Complex complex1 = complex0.divide((-2237.804731411275));
      Complex complex2 = complex1.NaN.sinh();
      complex0.getImaginary();
      Complex complex3 = complex2.I.sqrt1z();
      complex1.NaN.tanh();
      complex3.I.tanh();
      complex0.I.readResolve();
      complex1.isNaN();
      complex0.atan();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex1.tanh();
      complex6.I.subtract((-2237.15795572046));
      Complex complex7 = complex5.reciprocal();
      complex7.NaN.exp();
      complex7.ONE.getField();
      Complex complex8 = complex1.sqrt();
      // Undeclared exception!
      complex8.ONE.nthRoot(968254910);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add((-20.0));
      complex1.divide(complex0);
      Complex complex2 = complex1.ONE.createComplex(0.0, 4016.575);
      complex2.ONE.getArgument();
      Complex complex3 = new Complex(0.0, 4016.575);
      Complex complex4 = complex1.atan();
      complex4.divide(complex0);
      Complex complex5 = Complex.ONE;
      complex5.getArgument();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-7.81295459930537E-72), 6.283185307179586);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-7.81295459930537E-72));
      Complex complex3 = complex2.subtract((-7763.4480417));
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.sqrt1z();
      complex6.readResolve();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex2.pow(complex7);
      complex0.toString();
      Complex complex9 = complex7.cosh();
      complex9.cos();
      complex1.conjugate();
      Complex complex10 = Complex.INF;
      complex4.tan();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3136.29319737), (-828.552772));
      Complex complex1 = complex0.divide(548.691991082968);
      complex1.sinh();
      complex0.getImaginary();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.tanh();
      complex0.readResolve();
      complex4.isNaN();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.pow(complex6);
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex0.subtract(1.5430806348152437);
      complex2.reciprocal();
      complex5.exp();
      complex5.getField();
      Complex complex10 = Complex.valueOf((-828.552772), (-3136.29319737));
      complex10.sqrt();
      Complex complex11 = complex10.cos();
      complex8.nthRoot(1645);
      complex9.abs();
      complex0.conjugate();
      Complex.valueOf(1.5430806348152437, 3245.383829927055);
      Complex.valueOf((-1.0), 1.0431875573076199E-7);
      complex11.hashCode();
      complex10.cos();
      complex1.acos();
      Complex complex12 = Complex.valueOf(3245.383829927055);
      complex7.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.subtract((-5015.10476630294));
      Complex complex3 = complex0.add(complex2);
      complex1.asin();
      complex1.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      Complex complex5 = complex3.sin();
      Complex complex6 = Complex.ZERO;
      complex6.pow(complex2);
      complex6.toString();
      complex4.acos();
      complex5.cosh();
      complex2.cos();
      Complex complex7 = complex4.conjugate();
      complex3.add(complex7);
      Complex complex8 = Complex.NaN;
      complex8.tan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, (-3136.29319737));
      Complex complex1 = complex0.ONE.log();
      complex0.ONE.multiply((-3136.29319737));
      Complex complex2 = complex0.log();
      complex2.nthRoot(989);
      Complex complex3 = complex0.tan();
      complex1.exp();
      complex1.sin();
      Complex complex4 = Complex.INF;
      complex0.add(complex4);
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2237.804731411275), (-2237.15795572046));
      Complex complex1 = complex0.divide((-2237.804731411275));
      Complex complex2 = complex1.NaN.sinh();
      complex0.getImaginary();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex1.NaN.tanh();
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = (Complex)complex0.I.readResolve();
      complex1.isNaN();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex1.pow(complex8);
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.I.subtract((-2237.15795572046));
      Complex complex12 = complex9.reciprocal();
      complex12.NaN.exp();
      complex12.ONE.getField();
      Complex complex13 = complex1.sqrt();
      complex13.ZERO.cos();
      complex2.nthRoot(1645);
      complex5.abs();
      complex1.conjugate();
      complex11.isInfinite();
      complex4.isNaN();
      Complex.valueOf((-2237.15795572046));
      complex6.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3524770736694336, 0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.I.exp();
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex0.cosh();
      complex1.asin();
      Complex complex6 = complex2.log();
      complex2.divide(0.0);
      Complex complex7 = complex4.acos();
      complex6.multiply((-4243.7257));
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = Complex.I;
      complex9.cos();
      Complex complex10 = complex6.sin();
      Complex complex11 = complex4.cos();
      complex9.cosh();
      complex0.cos();
      complex9.exp();
      complex11.reciprocal();
      complex10.getField();
      complex7.conjugate();
      complex8.getArgument();
      Complex complex12 = Complex.INF;
      complex12.add(0.0);
      complex4.conjugate();
      complex12.log();
      complex5.add(1001.12170471851);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1.5707963267948966, 2238.15795572046);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply((-3061.40723885));
      Complex complex3 = complex0.subtract(119.39);
      complex3.add(complex1);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.sqrt1z();
      complex4.readResolve();
      Complex complex6 = complex0.sin();
      Complex complex7 = Complex.ONE;
      complex2.pow(complex7);
      complex6.toString();
      Complex complex8 = complex5.acos();
      complex3.cosh();
      complex4.cos();
      complex6.conjugate();
      complex6.add(complex8);
      complex0.tan();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, (-3136.29319737));
      Complex complex1 = complex0.ONE.multiply((-3136.29319737));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(0.0, 548.691991082968);
      Complex complex4 = complex1.asin();
      Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      Complex complex5 = complex0.sin();
      complex5.ZERO.pow(complex0);
      complex5.NaN.toString();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.cosh();
      complex4.ONE.cos();
      complex7.I.conjugate();
      complex0.add(complex4);
      complex3.tan();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(695.3656011);
      Complex complex1 = complex0.acos();
      complex1.INF.getArgument();
      complex0.asin();
      Complex complex2 = complex0.asin();
      complex2.I.add(20.0);
      complex2.I.hashCode();
      complex2.getImaginary();
      complex1.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.add((-20.0));
      complex1.divide(complex0);
      Complex complex2 = complex1.ONE.createComplex(0.0, 4016.575);
      complex2.ONE.getArgument();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.subtract(complex3);
      complex4.I.reciprocal();
      complex1.ZERO.pow((-182.34688035057505));
      complex4.divide((-1950.6544047112584));
      complex0.asin();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(548.691991082968, (-3136.29319737));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ONE.multiply((-3136.29319737));
      complex2.I.subtract(0.0);
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex2.asin();
      complex4.ONE.sqrt1z();
      complex0.readResolve();
      Complex complex5 = complex0.sin();
      complex5.ZERO.pow(complex1);
      complex5.NaN.toString();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.cosh();
      complex4.ONE.cos();
      complex7.I.conjugate();
      complex1.add(complex4);
      complex3.tan();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      complex1.getField();
      Complex complex2 = complex0.add(complex1);
      complex2.hashCode();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.I.sin();
      complex4.I.acos();
      complex2.abs();
      Complex complex5 = complex2.subtract(complex1);
      complex2.INF.divide(757.4062266452);
      Complex complex6 = complex5.ONE.pow(757.4062266452);
      Complex complex7 = complex6.NaN.atan();
      complex4.INF.multiply(1050);
      Complex complex8 = complex4.reciprocal();
      complex3.equals(complex2);
      complex8.sqrt1z();
      Complex complex9 = complex5.pow(757.4062266452);
      Complex complex10 = complex9.exp();
      complex9.ONE.acos();
      complex2.readResolve();
      complex10.ONE.atan();
      complex1.toString();
      complex4.add(complex10);
      complex3.multiply(complex7);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-2383.50912023), 1506.332699);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.sqrt();
      complex1.nthRoot(824);
      Complex complex3 = complex0.conjugate();
      complex3.I.tanh();
      Complex complex4 = complex3.I.sqrt();
      complex3.INF.nthRoot(824);
      Complex complex5 = complex3.NaN.multiply(832);
      Complex complex6 = complex1.I.sin();
      complex6.ONE.subtract(complex1);
      Complex complex7 = Complex.INF;
      complex5.INF.divide(complex7);
      complex3.getField();
      complex0.hashCode();
      complex5.NaN.add(complex2);
      Complex complex8 = complex5.multiply(37);
      Complex complex9 = complex8.INF.subtract((double) 832);
      Complex complex10 = complex9.ZERO.multiply(complex1);
      Complex complex11 = complex1.sinh();
      complex11.INF.nthRoot(824);
      complex4.nthRoot(37);
      complex10.toString();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2237.804731411275), (-2237.15795572046));
      Complex complex1 = complex0.divide((-2237.804731411275));
      Complex complex2 = complex1.NaN.sinh();
      complex0.getImaginary();
      Complex complex3 = complex2.I.sqrt1z();
      complex1.NaN.tanh();
      Complex complex4 = complex3.I.tanh();
      complex0.I.readResolve();
      complex1.isNaN();
      complex0.atan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex1.tanh();
      complex7.I.subtract((-2237.15795572046));
      Complex complex8 = complex6.reciprocal();
      complex8.NaN.exp();
      complex8.ONE.getField();
      Complex complex9 = complex1.sqrt();
      complex9.ZERO.cos();
      complex2.nthRoot(1645);
      complex4.abs();
      complex1.conjugate();
      Complex complex10 = Complex.valueOf(0.0, 1.557407724654902);
      Complex.valueOf(0.0, (-521.62769));
      complex10.hashCode();
      complex6.cos();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1630.982);
      complex0.I.toString();
      complex0.atan();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.ONE;
      complex2.INF.multiply(complex3);
      Complex complex4 = complex1.subtract(1630.982);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1501.35227, 1501.35227);
      complex0.I.toString();
      Complex complex1 = complex0.pow(0.0);
      complex0.isNaN();
      complex1.getImaginary();
      Complex complex2 = complex0.reciprocal();
      complex2.I.pow(complex0);
      Complex complex3 = complex0.subtract(1501.35227);
      complex0.acos();
      complex3.exp();
      complex2.createComplex(0.0, 1501.35227);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-2524.79771097559), (-2524.79771097559));
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.atan();
      Complex.valueOf((-2524.79771097559));
      complex1.getReal();
      complex0.sqrt();
      complex1.subtract((-1566.0));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.subtract((-2462.48414561924));
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.acos();
      complex3.ONE.nthRoot(1872);
      complex5.NaN.abs();
      Complex complex6 = complex3.NaN.createComplex((-2462.48414561924), (-2462.48414561924));
      complex3.nthRoot(1615);
      complex3.add(complex0);
      Complex.valueOf((-2462.48414561924));
      Complex complex7 = complex6.reciprocal();
      complex1.NaN.reciprocal();
      Complex complex8 = Complex.valueOf(3524.797543874);
      complex8.I.exp();
      complex8.acos();
      complex3.getImaginary();
      complex7.add(1101.42835576);
      complex6.abs();
      Complex complex9 = complex2.multiply(complex8);
      complex9.log();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ZERO.divide((-8.173742908533777E-8));
      complex1.ONE.getField();
      Complex complex2 = complex0.pow((-1.0));
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex((-735.458296), 74.92096);
      complex2.multiply(complex4);
      complex0.add(Double.POSITIVE_INFINITY);
      complex1.pow(complex3);
      Complex.valueOf(605.71290209, 605.71290209);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.multiply(0.0);
      complex2.I.subtract(complex1);
      Complex complex3 = complex1.INF.atan();
      complex3.INF.subtract(0.0);
      Complex complex4 = complex1.acos();
      complex0.INF.abs();
      complex4.readResolve();
      Complex complex5 = complex1.subtract(complex0);
      complex5.INF.readResolve();
      Complex complex6 = complex4.divide(complex1);
      complex0.NaN.tan();
      Complex.valueOf((-1522.031870655));
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-317.0), (-317.0));
      complex0.isNaN();
      complex0.atan();
      complex0.reciprocal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.valueOf(2.0, 0.0);
      Complex complex2 = Complex.valueOf(2.0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.ONE.cosh();
      complex0.getArgument();
      Complex complex5 = complex1.ZERO.sqrt();
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex6.I.sin();
      complex4.isInfinite();
      complex1.ZERO.getField();
      complex0.I.multiply(7);
      Complex complex8 = complex6.INF.sin();
      Complex complex9 = complex2.createComplex(0.0, 0.0);
      complex9.divide(complex0);
      complex9.sqrt();
      complex1.getImaginary();
      Complex complex10 = complex6.cosh();
      complex10.nthRoot(701);
      Complex complex11 = complex6.multiply(4164);
      complex11.NaN.sin();
      complex8.log();
      complex1.readResolve();
      Complex.valueOf((double) 4164);
      Complex complex12 = new Complex(4164);
      complex12.INF.nthRoot(4164);
      complex7.subtract(complex12);
      complex5.abs();
      Complex.valueOf((-61.12242));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 2786.710785757785);
      Complex complex1 = complex0.ONE.conjugate();
      complex0.I.getField();
      Complex complex2 = complex1.ZERO.divide(3134.872);
      complex2.I.multiply(924);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.ONE.multiply(complex3);
      Complex complex5 = complex4.ONE.multiply(complex1);
      complex5.ZERO.getArgument();
      Complex complex6 = complex0.INF.divide(complex5);
      complex6.INF.createComplex((-3300.804), (-455.0));
      complex0.createComplex(453.4184524969, 0.0);
      complex4.conjugate();
      Complex complex7 = complex1.log();
      complex7.INF.divide((-1451.0423));
      complex1.conjugate();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.ZERO.asin();
      Complex complex2 = Complex.valueOf(5.189062091114782E27);
      Complex complex3 = complex0.ONE.createComplex(5.189062091114782E27, 5.189062091114782E27);
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex3.INF.createComplex(5.189062091114782E27, 5573.46761344214);
      complex4.INF.readResolve();
      complex1.ZERO.toString();
      complex4.I.createComplex((-682.857936), 207.3360644);
      Complex complex6 = complex1.divide(complex0);
      complex4.getArgument();
      Complex complex7 = complex3.pow(2151.0);
      Complex complex8 = complex6.tanh();
      complex8.NaN.multiply(0.40806591510772705);
      complex6.add(5.189062091114782E27);
      complex7.tan();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(5.34230278107224E-184);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex2.I.log();
      complex4.ONE.abs();
      complex5.pow(complex0);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ZERO.subtract(complex4);
      complex6.divide(complex3);
      complex0.hashCode();
      Complex complex8 = complex1.sqrt1z();
      complex1.getArgument();
      Complex complex9 = complex8.divide(5.34230278107224E-184);
      complex1.ONE.multiply(1);
      Complex complex10 = complex9.ZERO.conjugate();
      complex2.getReal();
      complex8.readResolve();
      complex4.negate();
      complex10.toString();
      complex8.getField();
      Complex complex11 = new Complex(1.0);
      Complex complex12 = complex1.add(complex11);
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex1.asin();
      complex14.NaN.getArgument();
      Complex complex15 = complex5.subtract(0.0);
      complex13.INF.negate();
      Complex complex16 = complex13.asin();
      complex16.sqrt();
      complex7.divide(complex15);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4071.805243);
      Complex complex1 = complex0.ONE.multiply((-2081.6891));
      complex0.I.cosh();
      Complex complex2 = complex0.add(4071.805243);
      complex0.hashCode();
      Complex complex3 = Complex.valueOf((-2081.6891), (-2081.6891));
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex2.subtract(1465.023);
      complex5.ONE.abs();
      complex1.isInfinite();
      Complex complex6 = complex0.ZERO.exp();
      Complex complex7 = complex1.sqrt();
      complex7.acos();
      complex0.isNaN();
      complex2.reciprocal();
      complex6.getField();
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(0.22001364827156067, 0.0);
      complex3.hashCode();
      complex4.ZERO.getArgument();
      Complex complex5 = Complex.INF;
      complex4.ONE.pow(complex5);
      Complex complex6 = complex3.sqrt1z();
      complex1.tan();
      complex1.I.cos();
      complex6.createComplex(0.22001364827156067, 4296.326134);
      complex1.equals(complex2);
      complex1.log();
      Complex complex7 = complex4.divide(813.0);
      complex7.I.acos();
      Complex complex8 = complex1.multiply(1147.787);
      Complex complex9 = complex8.I.sqrt1z();
      complex6.cos();
      Complex complex10 = complex1.sin();
      Complex complex11 = complex0.cos();
      complex4.cosh();
      complex11.cos();
      Complex complex12 = complex4.exp();
      Complex complex13 = complex12.ZERO.reciprocal();
      complex6.getField();
      complex9.conjugate();
      complex4.getArgument();
      complex8.add(0.0);
      complex12.INF.conjugate();
      complex10.log();
      complex13.add(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.INF.sqrt();
      complex1.NaN.conjugate();
      complex0.multiply(20.0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.getReal();
      Complex complex1 = complex0.sinh();
      complex1.hashCode();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.ONE.multiply(1071.0);
      Complex complex5 = complex3.NaN.createComplex(1071.0, (-2994.96010990396));
      complex3.INF.readResolve();
      Complex complex6 = complex1.NaN.sqrt();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.reciprocal();
      complex7.INF.sqrt();
      complex8.negate();
      complex6.sin();
      complex8.hashCode();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.NaN.multiply(complex1);
      complex2.I.hashCode();
      complex10.NaN.multiply(7);
      Complex complex11 = complex9.ONE.negate();
      complex11.INF.add(complex2);
      Complex complex12 = complex9.createComplex((-20.0), (-20.0));
      complex12.divide(complex0);
      Complex complex13 = complex6.sin();
      complex13.I.abs();
      complex6.atan();
      complex5.negate();
      Complex complex14 = complex3.createComplex((-20.0), (-2994.96010990396));
      complex4.toString();
      Complex.valueOf(0.0);
      complex12.sqrt();
      complex14.multiply(2122);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.I;
      complex2.NaN.conjugate();
      complex1.ONE.atan();
      complex1.ZERO.divide(complex2);
      complex0.getArgument();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.log();
      complex1.ONE.nthRoot(989);
      Complex complex3 = complex0.tan();
      complex3.ZERO.exp();
      Complex complex4 = complex2.sin();
      complex4.add(complex0);
      complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.NaN.divide(0.0);
      Complex complex4 = complex1.asin();
      complex0.ZERO.getArgument();
      Complex complex5 = Complex.INF;
      complex1.toString();
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex6.multiply(0.0);
      complex6.ZERO.sqrt();
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.valueOf(0.0, (-438.791495582074));
      Complex complex10 = complex9.I.sqrt1z();
      complex4.equals(complex8);
      complex2.getReal();
      complex4.nthRoot(94);
      Complex complex11 = complex7.multiply(complex6);
      Complex complex12 = complex11.divide(complex0);
      complex3.tanh();
      complex3.readResolve();
      complex4.sin();
      Complex complex13 = complex0.subtract(548.795);
      complex12.getField();
      complex13.getReal();
      complex12.abs();
      complex3.getImaginary();
      Complex complex14 = complex10.sinh();
      Complex complex15 = complex11.sqrt1z();
      complex14.divide(complex1);
      complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.NaN.createComplex(0.0, 2.0);
      Complex complex3 = complex2.I.subtract(complex0);
      complex0.ZERO.readResolve();
      Complex complex4 = complex0.asin();
      complex4.hashCode();
      complex3.subtract(0.0);
      complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(483.852999494);
      Complex complex1 = complex0.add(999.5976637706624);
      Complex complex2 = complex1.INF.add(complex0);
      complex2.NaN.sqrt1z();
      complex1.ONE.hashCode();
      complex1.ONE.sqrt1z();
      complex2.INF.multiply(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.valueOf(0.018315639346837997, 1520.004440686);
      complex3.nthRoot(1);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3524770736694336, 0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.I.exp();
      complex0.ONE.divide(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex4.multiply((-1869));
      complex6.ZERO.toString();
      complex2.sinh();
      Complex complex7 = Complex.ONE;
      Complex.valueOf((-1.0));
      complex5.equals(complex7);
      complex7.cos();
      try { 
        complex1.nthRoot((-1142));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,142
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1414.313718859);
      complex1.ZERO.multiply(complex2);
      Complex complex3 = complex0.ONE.subtract(3727.503668306253);
      complex3.I.divide(complex0);
      Complex complex4 = complex1.add(complex0);
      complex4.ONE.subtract(0.0);
      Complex complex5 = complex0.cosh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply((-2225));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      complex2.INF.pow((-1198.172457112113));
      complex2.negate();
      complex3.getField();
      complex0.multiply(complex2);
      complex3.reciprocal();
      complex1.isInfinite();
      complex2.isNaN();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      complex0.INF.cosh();
      Complex complex1 = complex0.pow(2.0599991793068063E262);
      Complex complex2 = complex1.ONE.log();
      complex2.toString();
      Object object0 = new Object();
      complex1.equals(object0);
      complex0.toString();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3492.84903829);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.sin();
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex0.cos();
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = complex2.sin();
      assertNotNull(complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      
      Complex complex4 = complex3.I.log();
      assertNotNull(complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      
      Complex complex5 = complex2.ONE.negate();
      assertNotNull(complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      
      Complex complex6 = complex5.I.sinh();
      assertNotNull(complex6);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      
      String string0 = complex6.ONE.toString();
      assertNotNull(string0);
      assertEquals("(1.0, 0.0)", string0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      
      Object object0 = complex2.readResolve();
      assertNotNull(object0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(object0.equals((Object)complex6));
      assertFalse(object0.equals((Object)complex3));
      assertFalse(object0.equals((Object)complex5));
      assertFalse(object0.equals((Object)complex0));
      assertFalse(object0.equals((Object)complex4));
      assertTrue(object0.equals((Object)complex2));
      assertFalse(object0.equals((Object)complex1));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(object0, complex2);
      assertNotSame(object0, complex6);
      assertNotSame(object0, complex3);
      assertNotSame(object0, complex5);
      assertNotSame(object0, complex0);
      assertNotSame(object0, complex4);
      assertNotSame(object0, complex1);
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      
      complex5.hashCode();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)object0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, object0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      
      double double0 = complex3.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      
      Complex complex7 = complex3.log();
      assertNotNull(complex7);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      
      Complex complex8 = complex7.multiply(complex2);
      assertNotNull(complex8);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex8.equals((Object)object0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex8, object0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      
      Complex complex9 = complex8.ZERO.tan();
      assertNotNull(complex9);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex8.equals((Object)object0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)object0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex8, object0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, object0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      
      Complex complex10 = complex8.I.acos();
      assertNotNull(complex10);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex8.equals((Object)object0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)object0));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex8, object0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, object0);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      
      double double1 = complex8.NaN.abs();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex8.equals((Object)object0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex8, object0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      
      Object object1 = complex2.INF.readResolve();
      assertNotNull(object1);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)complex8));
      assertFalse(object1.equals((Object)complex1));
      assertFalse(object1.equals((Object)complex6));
      assertFalse(object1.equals((Object)complex2));
      assertFalse(object1.equals((Object)complex3));
      assertFalse(object1.equals((Object)complex5));
      assertFalse(object1.equals((Object)complex0));
      assertFalse(object1.equals((Object)complex9));
      assertFalse(object1.equals((Object)complex4));
      assertFalse(object1.equals((Object)complex10));
      assertFalse(object1.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(object1, object0);
      assertNotSame(object1, complex8);
      assertNotSame(object1, complex1);
      assertNotSame(object1, complex6);
      assertNotSame(object1, complex2);
      assertNotSame(object1, complex3);
      assertNotSame(object1, complex5);
      assertNotSame(object1, complex0);
      assertNotSame(object1, complex9);
      assertNotSame(object1, complex4);
      assertNotSame(object1, complex10);
      assertNotSame(object1, complex7);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      
      String string1 = complex4.toString();
      assertNotNull(string1);
      assertEquals("(0.0, 1.5707963267948966)", string1);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)object1));
      assertFalse(complex4.equals((Object)object1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)object0));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex0));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, object1);
      assertNotSame(complex4, object1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, object0);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      
      Complex complex11 = complex2.tanh();
      assertNotNull(complex11);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex11.equals((Object)object0));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)object1));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      assertNotSame(complex11, object0);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, object1);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      
      Complex complex12 = complex11.INF.divide(0.0);
      assertNotNull(complex12);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex11.equals((Object)object0));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)object1));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)object1));
      assertTrue(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)object0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex4));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      assertNotSame(complex11, object0);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, object1);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, object1);
      assertNotSame(complex12, object0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      
      Complex complex13 = Complex.valueOf(Double.NaN);
      assertNotNull(complex13);
      assertFalse(complex13.equals((Object)object1));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)object0));
      assertTrue(complex13.equals((Object)complex1));
      assertNotSame(complex13, object1);
      assertSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, object0);
      
      Complex complex14 = complex4.sqrt1z();
      assertNotNull(complex14);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)object1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)object1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)object0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)object1));
      assertFalse(complex14.equals((Object)object0));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, object1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, object1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, object0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, object1);
      assertNotSame(complex14, object0);
      
      Complex complex15 = complex14.sinh();
      assertNotNull(complex15);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)object1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)object1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)object0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)object1));
      assertFalse(complex14.equals((Object)object0));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)object1));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)object0));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex0));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, object1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, object1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, object0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, object1);
      assertNotSame(complex14, object0);
      assertNotSame(complex14, complex15);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, object1);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, object0);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex0);
      
      Complex complex16 = complex7.exp();
      assertNotNull(complex16);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)object1));
      assertFalse(complex16.equals((Object)object1));
      assertFalse(complex16.equals((Object)object0));
      assertTrue(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)object1));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex12));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, object1);
      assertNotSame(complex16, object1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, object0);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, object1);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      
      Complex complex17 = Complex.valueOf(0.0, 3492.84903829);
      assertNotNull(complex17);
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)object0));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)object1));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex3));
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, object0);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, object1);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex3);
      
      Complex complex18 = complex17.ONE.multiply(1587);
      assertNotNull(complex18);
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)object0));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)object1));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)object1));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)object0));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex6));
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, object0);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, object1);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex3);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, object1);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, object0);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex6);
      
      Complex complex19 = complex17.INF.subtract(Double.NaN);
      assertNotNull(complex19);
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)object0));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)object1));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex18));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex19.equals((Object)object1));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex15));
      assertTrue(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)object0));
      assertFalse(complex19.equals((Object)complex2));
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex19);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, object0);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, object1);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex3);
      assertNotSame(complex19, object1);
      assertSame(complex19, complex12);
      assertNotSame(complex19, complex3);
      assertSame(complex19, complex13);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, object0);
      assertNotSame(complex19, complex2);
      
      String string2 = complex2.toString();
      assertNotNull(string2);
      assertEquals("(0.8242089261642898, 0.0)", string2);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      
      String string3 = complex8.toString();
      assertNotNull(string3);
      assertEquals("(-0.2548714333465885, 0.0)", string3);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertTrue(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)object1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)object1));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(complex8.equals((Object)object0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex14));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)object1));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex17));
      assertFalse(complex8.equals((Object)complex19));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex18));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex4));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, object1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, object1);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex12);
      assertNotSame(complex8, object0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, object1);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex4);
      
      Complex complex20 = complex7.sqrt();
      assertNotNull(complex20);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)object1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)object0));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)object1));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertTrue(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)object0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)object1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)object0));
      assertFalse(complex7.equals((Object)object1));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex20.equals((Object)object0));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)object1));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex17));
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, object0);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, object1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, object1);
      assertNotSame(complex2, object0);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, object0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, object1);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, object0);
      assertNotSame(complex7, object1);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex12);
      assertNotSame(complex20, object0);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, object1);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex3);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-941.8244737493067), 0.0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-941.8244737493067), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-941.8244737493067), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.7654600287544338, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = Complex.NaN;
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.subtract(complex1);
      assertNotNull(complex2);
      assertSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertSame(complex1, complex2);
      assertSame(complex1, complex0);
      assertSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      
      Complex complex3 = complex2.ZERO.acos();
      assertNotNull(complex3);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex2);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.exp();
      assertNotNull(complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex2);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.add(complex4);
      assertNotNull(complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex3));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex2);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertSame(complex2, complex5);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertSame(complex2, complex4);
      assertSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex2);
      assertSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex5);
      assertSame(complex4, complex2);
      assertSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertSame(complex5, complex0);
      assertSame(complex5, complex4);
      assertSame(complex5, complex2);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.INF.sqrt1z();
      assertNotNull(complex6);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex1));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      
      Complex complex7 = (Complex)complex5.INF.readResolve();
      assertNotNull(complex7);
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertSame(complex1, complex2);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertSame(complex2, complex4);
      assertSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex2);
      assertSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertSame(complex5, complex0);
      assertSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex2);
      assertNotSame(complex5, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex1.sin();
      assertNotNull(complex8);
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex6));
      assertSame(complex1, complex2);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex5);
      assertSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertSame(complex8, complex0);
      assertSame(complex8, complex4);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      
      String string0 = complex5.toString();
      assertNotNull(string0);
      assertEquals("(NaN, NaN)", string0);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex7));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex8);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertSame(complex1, complex2);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex7);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertSame(complex2, complex8);
      assertSame(complex2, complex4);
      assertSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex2);
      assertSame(complex5, complex8);
      assertSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertSame(complex5, complex0);
      assertSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex2);
      assertNotSame(complex5, complex7);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      String string1 = complex0.ONE.toString();
      assertNotNull(string1);
      assertEquals("(1.0, 0.0)", string1);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(string1.equals((Object)string0));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex8);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex9 = complex0.INF.divide(0.0);
      assertNotNull(complex9);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex6));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertSame(complex0, complex8);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertSame(complex9, complex0);
      assertSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertSame(complex9, complex8);
      assertSame(complex9, complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      
      Complex complex10 = complex9.INF.sin();
      assertNotNull(complex10);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex2));
      assertTrue(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertSame(complex0, complex8);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertSame(complex9, complex0);
      assertSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertSame(complex9, complex8);
      assertSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      
      Complex complex11 = (Complex)complex10.ONE.readResolve();
      assertNotNull(complex11);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex10));
      assertTrue(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex2));
      assertTrue(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertSame(complex0, complex8);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertSame(complex9, complex0);
      assertSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertSame(complex9, complex8);
      assertSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex11);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(1.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      
      Complex complex12 = complex8.asin();
      assertNotNull(complex12);
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertTrue(complex12.equals((Object)complex6));
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertSame(complex1, complex12);
      assertSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex5);
      assertSame(complex8, complex12);
      assertSame(complex8, complex9);
      assertSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertSame(complex8, complex0);
      assertSame(complex8, complex4);
      assertSame(complex12, complex9);
      assertNotSame(complex12, complex7);
      assertSame(complex12, complex5);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex6);
      assertSame(complex12, complex2);
      assertSame(complex12, complex4);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertSame(complex12, complex1);
      assertSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      
      boolean boolean0 = complex6.equals(complex8);
      assertTrue(boolean0);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex12));
      assertTrue(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertTrue(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex6));
      assertSame(complex0, complex1);
      assertSame(complex0, complex5);
      assertSame(complex0, complex9);
      assertSame(complex0, complex12);
      assertSame(complex0, complex8);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertSame(complex1, complex12);
      assertSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex8);
      assertSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex12);
      assertSame(complex4, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex5);
      assertSame(complex8, complex12);
      assertSame(complex8, complex9);
      assertSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertSame(complex8, complex2);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertSame(complex8, complex0);
      assertSame(complex8, complex4);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      
      Complex complex13 = complex12.asin();
      assertNotNull(complex13);
      assertFalse(complex13.equals((Object)complex3));
      assertTrue(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex7));
      assertTrue(complex13.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertTrue(complex12.equals((Object)complex6));
      assertSame(complex13, complex0);
      assertSame(complex13, complex4);
      assertNotSame(complex13, complex3);
      assertSame(complex13, complex1);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex7);
      assertSame(complex13, complex5);
      assertSame(complex13, complex12);
      assertSame(complex13, complex2);
      assertSame(complex13, complex8);
      assertSame(complex13, complex9);
      assertNotSame(complex13, complex6);
      assertSame(complex1, complex13);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertSame(complex1, complex12);
      assertSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertSame(complex8, complex12);
      assertSame(complex8, complex1);
      assertSame(complex8, complex2);
      assertNotSame(complex8, complex11);
      assertSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex5);
      assertSame(complex8, complex9);
      assertSame(complex8, complex13);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex10);
      assertSame(complex8, complex4);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex1);
      assertSame(complex12, complex9);
      assertSame(complex12, complex13);
      assertNotSame(complex12, complex7);
      assertSame(complex12, complex5);
      assertNotSame(complex12, complex6);
      assertSame(complex12, complex2);
      assertSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      
      Complex complex14 = complex8.cosh();
      assertNotNull(complex14);
      assertTrue(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertTrue(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex6));
      assertSame(complex14, complex1);
      assertSame(complex14, complex12);
      assertSame(complex14, complex0);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertSame(complex14, complex5);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertSame(complex14, complex13);
      assertSame(complex14, complex9);
      assertNotSame(complex14, complex11);
      assertSame(complex1, complex14);
      assertSame(complex1, complex13);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertSame(complex1, complex0);
      assertSame(complex1, complex12);
      assertSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertSame(complex8, complex12);
      assertSame(complex8, complex1);
      assertSame(complex8, complex2);
      assertNotSame(complex8, complex11);
      assertSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex5);
      assertSame(complex8, complex9);
      assertSame(complex8, complex13);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex10);
      assertSame(complex8, complex4);
      assertSame(complex8, complex14);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.isInfinite();
      Complex complex3 = complex1.multiply((-960));
      Complex complex4 = complex3.ZERO.subtract(complex2);
      Complex complex5 = Complex.valueOf((double) (-960));
      Complex complex6 = complex1.add(complex2);
      complex6.I.getArgument();
      Complex complex7 = complex3.NaN.pow(complex1);
      Complex complex8 = complex7.ONE.sin();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex1.pow((double) (-960));
      Complex complex10 = complex9.ZERO.sin();
      complex7.NaN.log();
      complex0.ZERO.pow(1.5707963267948966);
      complex10.INF.createComplex((-20.0), 3799.5);
      complex9.isInfinite();
      Complex complex11 = complex0.multiply(0);
      Complex complex12 = complex10.pow((double) 0);
      complex12.readResolve();
      Complex complex13 = complex4.multiply(732);
      complex11.subtract(complex7);
      Complex complex14 = Complex.valueOf((-2232.1093), 3799.5);
      assertEquals(3799.5, complex14.getImaginary(), 0.01);
      assertEquals((-2232.1093), complex14.getReal(), 0.01);
      
      Complex complex15 = complex12.divide((-2232.1093));
      assertSame(complex15, complex13);
      
      Complex complex16 = complex7.divide((-1238.6617));
      assertNotSame(complex7, complex5);
      assertSame(complex16, complex2);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertSame(complex16, complex6);
      assertSame(complex7, complex4);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertNotSame(complex7, complex9);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(2645.306481478, (-1.2351697477129173E-65));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(Double.NaN);
      Complex complex3 = complex2.ONE.exp();
      assertFalse(complex3.isInfinite());
      assertEquals(2.718281828459045, complex3.getReal(), 0.01);
      
      complex0.ONE.createComplex((-1.2351697477129173E-65), 1.4422595500946045);
      Complex complex4 = complex1.ONE.divide((-1.2351697477129173E-65));
      Complex complex5 = complex4.INF.multiply(1);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex4.ONE.cos();
      Complex complex7 = complex6.INF.asin();
      assertSame(complex7, complex2);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex4.INF.cos();
      complex1.hashCode();
      complex4.hashCode();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(2645.306481478, complex1.getReal(), 0.01);
      assertEquals((-8.096053209298838E64), complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(49.08336550748196, (-1.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex((-1530), (-484.795294));
      complex1.ONE.divide(complex2);
      try { 
        complex0.NaN.nthRoot((-1530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,530
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
