/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:11:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(3733.2914999662435, 1.1719142537166848E16);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex((-29.56), 1.1719142537166848E16);
      Complex complex4 = Complex.valueOf(1.1719142537166848E16, (-29.56));
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.ZERO.log();
      complex2.nthRoot(674);
      complex5.multiply((-29.56));
      Complex.valueOf(1.1719142537166848E16, 3733.2914999662435);
      complex4.asin();
      complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex.valueOf((-1.0), (-498.646154378));
      Complex complex2 = complex0.tan();
      complex2.ZERO.log();
      complex2.nthRoot(674);
      complex1.multiply(1.0);
      Complex complex3 = Complex.valueOf(6.9283570679730419E17, (-498.646154378));
      complex1.asin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(3733.110163856696, (-20.0));
      complex0.tan();
      complex0.asin();
      Complex complex1 = Complex.NaN;
      complex1.pow(3733.110163856696);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1719142537166848E16, (-29.113213340955422));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3406.9360690006906), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(1.1719142537166848E16, 1.1719142537166848E16);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf((-4.547473508864641E-13));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex2.pow(complex3);
      complex1.toString();
      complex0.asin();
      try { 
        complex0.nthRoot((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -24
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      complex0.add(1077.2019579408934);
      Complex complex1 = Complex.ZERO;
      complex0.getField();
      Complex complex2 = new Complex(20.0, 1032.0);
      complex2.tanh();
      Complex.valueOf(20.0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.ONE;
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2135.854698));
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = complex0.pow(1077.2019579408934);
      Complex complex2 = complex0.add(1077.2019579408934);
      complex2.tanh();
      Complex complex3 = new Complex(1077.2019579408934, 5.7463023795153145E252);
      complex1.divide(complex3);
      complex1.getField();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.divide(complex3);
      Complex.valueOf(459.991825320771);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      complex0.exp();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(16.538219700650252);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.add(complex2);
      complex2.negate();
      complex3.tan();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex((-7.796557225750673E-258), Double.POSITIVE_INFINITY);
      complex1.conjugate();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(3.7119608245654923);
      complex1.subtract(3.7119608245654923);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(302.605, Double.POSITIVE_INFINITY);
      complex0.ONE.atan();
      Complex complex1 = complex0.multiply(Integer.MAX_VALUE);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.I.tanh();
      complex3.ZERO.acos();
      Complex complex4 = complex1.sqrt();
      complex4.ZERO.sinh();
      Complex complex5 = Complex.valueOf((double) Integer.MAX_VALUE);
      complex5.INF.hashCode();
      complex5.ONE.hashCode();
      complex5.ONE.exp();
      complex5.I.readResolve();
      Complex complex6 = complex2.multiply(complex1);
      complex3.subtract((-1247.312));
      Complex complex7 = complex6.tan();
      complex0.toString();
      complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.INF.pow(900.9969362023);
      Complex complex2 = complex1.ONE.multiply(900.9969362023);
      Complex complex3 = complex2.cosh();
      complex3.cos();
      Complex complex4 = complex0.NaN.createComplex(Double.NaN, (-12.95332));
      complex4.NaN.toString();
      Complex complex5 = complex0.multiply((-2146126976));
      Complex complex6 = complex5.I.multiply(Double.NaN);
      complex4.NaN.abs();
      complex0.subtract((-20.0));
      complex6.subtract(Double.NaN);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = complex0.pow(225.57948863);
      Complex complex2 = complex1.add(2031.296852008462);
      complex2.tanh();
      Complex complex3 = new Complex(1117.2, 1.3846060560442843E7);
      Complex complex4 = Complex.valueOf(2031.296852008462, 1117.2);
      complex1.divide(complex4);
      complex1.getField();
      Complex complex5 = Complex.I;
      complex5.tanh();
      complex2.divide(complex4);
      Complex.valueOf((-1829.80778575101));
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = Complex.ZERO;
      complex4.pow(complex6);
      Complex complex8 = Complex.I;
      complex8.hashCode();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.pow(16.538219700650252);
      Complex complex2 = complex0.add(16.538219700650252);
      complex2.tanh();
      Complex complex3 = new Complex(16.538219700650252, 1804.69);
      complex2.getField();
      complex2.tanh();
      Complex complex4 = complex2.divide(complex1);
      Complex.valueOf((-240.8448794345217));
      Complex complex5 = complex2.sqrt1z();
      complex5.INF.sin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf((-516.42), 20.0);
      complex7.tan();
      Complex complex8 = Complex.INF;
      complex4.divide(complex1);
      Complex complex9 = Complex.ONE;
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-1.0));
      Complex complex2 = complex0.add((-1.0));
      Complex complex3 = complex0.tanh();
      Complex complex4 = new Complex(1117.2, Double.NaN);
      Complex complex5 = complex3.divide(complex0);
      complex0.getField();
      complex2.tanh();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.ZERO;
      complex8.pow(complex4);
      complex5.hashCode();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = complex0.pow((-0.7853981633974483));
      Complex complex2 = complex1.add((-0.7853981633974483));
      Complex complex3 = new Complex(1117.2, 1117.2);
      Complex complex4 = complex1.divide(complex2);
      complex4.getField();
      Complex complex5 = complex4.tanh();
      complex0.divide(complex0);
      Complex.valueOf(459.991825320771);
      Complex.valueOf((-0.7853981633974483));
      complex3.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex2.pow(complex3);
      complex5.hashCode();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.sin();
      complex0.I.pow(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      complex0.isNaN();
      Complex complex1 = complex0.add(260.315);
      complex0.isNaN();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = new Complex(260.315);
      complex3.acos();
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 1;
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.divide(complex2);
      complex0.readResolve();
      complex3.equals(complex2);
      complex1.hashCode();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.ONE.pow(complex0);
      Complex complex3 = Complex.I;
      complex3.divide(1.0);
      complex3.equals(complex0);
      complex1.hashCode();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divide(2.0310928323153876E-42);
      complex0.equals(complex2);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-885.7974396903363));
      complex3.multiply(1180);
      complex1.subtract(2.0310928323153876E-42);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      complex0.I.pow(complex1);
      Complex complex2 = complex1.pow(596.7);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.log();
      complex3.reciprocal();
      complex4.nthRoot(1301);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.ONE.pow(complex0);
      Complex complex3 = complex2.ZERO.divide((-20.0));
      Complex complex4 = complex2.ZERO.atan();
      complex4.ZERO.pow(complex0);
      complex1.multiply((-20.0));
      complex0.INF.log();
      complex1.I.multiply(complex0);
      complex3.sinh();
      complex2.tanh();
      Complex complex5 = new Complex((-20.0));
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = complex0.multiply(1);
      complex1.sqrt1z();
      complex1.isNaN();
      complex0.subtract(complex1);
      Complex complex2 = Complex.NaN;
      complex1.isNaN();
      Complex complex3 = Complex.NaN;
      complex3.sinh();
      complex1.tanh();
      complex2.getReal();
      complex1.createComplex(Double.NaN, (-2479.0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.divide((-20.0));
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.pow(complex3);
      complex3.multiply(1.0);
      Complex complex7 = complex3.log();
      complex3.multiply(complex6);
      Complex complex8 = complex3.multiply(0);
      complex2.multiply(199);
      complex4.negate();
      Complex complex9 = Complex.ZERO;
      complex9.subtract(complex7);
      complex1.exp();
      complex2.tan();
      complex8.multiply(complex5);
      complex3.atan();
      Complex.valueOf(Double.NaN, (-516.8));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.atan();
      Object object0 = complex0.readResolve();
      ((Complex) object0).I.log();
      Complex complex1 = ((Complex) object0).INF.divide(Double.POSITIVE_INFINITY);
      object0.equals(complex0);
      complex1.multiply((-1073741824));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      Complex complex1 = complex0.multiply(4959);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.ONE;
      complex1.isNaN();
      Complex complex5 = complex4.add(4.231000988846797E177);
      complex2.isNaN();
      Complex complex6 = Complex.ONE;
      complex6.sinh();
      Complex complex7 = new Complex(1532.7157733425);
      complex5.acos();
      complex5.asin();
      complex1.nthRoot(1);
      complex3.subtract((-896.3356308702147));
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.divide((-546.6447825590616));
      Complex complex2 = complex0.tan();
      complex2.INF.divide(complex0);
      complex2.nthRoot(675);
      complex1.getImaginary();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.NaN.tan();
      Complex complex7 = complex1.tan();
      Complex complex8 = Complex.INF;
      complex6.divide(complex7);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.conjugate();
      complex10.createComplex((-546.6447825590616), (-546.6447825590616));
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = complex0.pow(1117.1794040869165);
      Complex complex2 = complex0.add(1117.1794040869165);
      Complex complex3 = complex2.tanh();
      Complex complex4 = new Complex(Double.NaN, 5.7463023795153145E252);
      Complex complex5 = complex4.divide(complex2);
      complex0.getField();
      Complex complex6 = complex0.tanh();
      complex6.divide(complex2);
      Complex.valueOf(Double.NaN);
      complex1.sqrt1z();
      Complex complex7 = Complex.ZERO;
      complex4.pow(complex5);
      Complex complex8 = Complex.valueOf(459.991825320771);
      complex8.toString();
      complex3.toString();
      Complex complex9 = Complex.ONE;
      complex7.multiply(504);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.valueOf(1860.25333330935);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 1152.0);
      complex2.multiply(26);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = Complex.ONE;
      complex0.reciprocal();
      Complex complex6 = complex3.add((double) 202);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.acos();
      complex5.subtract(complex4);
      Complex complex9 = complex8.divide((-7.110952399338234E-8));
      complex6.asin();
      Complex complex10 = complex9.exp();
      Complex complex11 = Complex.NaN;
      complex10.isNaN();
      complex2.sinh();
      complex6.tanh();
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      complex0.pow(1117.1794040869165);
      Complex complex1 = complex0.add(1117.1794040869165);
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-481.49126340802326), (-481.49126340802326));
      Complex complex4 = complex3.divide(complex0);
      complex4.getField();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.divide(complex5);
      Complex.valueOf(138.0);
      Complex complex7 = Complex.valueOf(606.62, 5.7463023795153145E252);
      complex7.sqrt1z();
      Complex complex8 = Complex.ZERO;
      complex2.pow(complex7);
      complex7.toString();
      complex6.toString();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.ZERO;
      complex10.multiply((-587));
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.add(2.558581829071045);
      Complex complex3 = Complex.I;
      complex3.tanh();
      complex2.divide(complex3);
      Complex complex4 = complex0.sinh();
      complex4.getField();
      complex3.tanh();
      Complex complex5 = new Complex(1, (-1.0));
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-3720.0301), (-3720.0301));
      Complex complex1 = complex0.I.exp();
      complex1.I.sqrt1z();
      complex0.sqrt();
      Complex complex2 = Complex.ONE;
      complex2.reciprocal();
      Complex complex3 = complex1.add(2.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.ONE;
      complex3.subtract(complex7);
      Complex complex8 = Complex.I;
      complex8.divide((-1.1345926571065106));
      complex7.asin();
      complex5.exp();
      Complex complex9 = Complex.NaN;
      try { 
        complex6.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2492.68016661, 2492.68016661);
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.reciprocal();
      complex2.add(2492.68016661);
      complex3.acos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.ZERO;
      complex2.ONE.sinh();
      Complex complex7 = complex6.reciprocal();
      complex3.add(1616.6819784377415);
      Complex complex8 = Complex.ZERO;
      complex3.acos();
      Complex complex9 = complex0.subtract(complex7);
      Complex complex10 = complex2.divide(2492.68016661);
      Complex complex11 = complex4.asin();
      complex0.cos();
      complex8.exp();
      Complex complex12 = Complex.NaN;
      complex4.isNaN();
      complex9.sinh();
      Complex complex13 = complex11.tanh();
      complex7.getReal();
      complex13.subtract((double) 17);
      complex10.add(2492.68016661);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex1.multiply(202);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex3.add((-2.8508258551525788E175));
      Complex complex8 = Complex.ZERO;
      complex6.acos();
      complex5.subtract(complex0);
      Complex complex9 = complex6.divide((double) 1);
      complex8.asin();
      Complex complex10 = new Complex((-885.7974396903363));
      Complex complex11 = complex10.exp();
      Complex complex12 = Complex.NaN;
      complex12.add(complex11);
      complex7.negate();
      Complex complex13 = complex9.exp();
      complex13.tan();
      Complex complex14 = Complex.INF;
      complex13.divide(complex9);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.pow(2.0);
      complex2.tanh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.sinh();
      complex1.I.getField();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = Complex.NaN;
      complex4.add(complex6);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex0.sqrt();
      complex1.nthRoot(1663);
      complex7.multiply(complex9);
      Complex complex10 = Complex.NaN;
      complex8.add(complex10);
      complex10.sqrt();
      complex3.getArgument();
      complex5.acos();
      complex0.divide(complex9);
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(96.9);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.subtract(1373.8641554);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = Complex.valueOf(96.9, 2500.688392);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex2.negate();
      complex5.nthRoot(3631);
      Complex complex6 = complex1.pow(complex0);
      complex2.reciprocal();
      Complex complex7 = complex2.createComplex(242.0026112614399, 242.0026112614399);
      Complex complex8 = complex6.conjugate();
      complex6.negate();
      complex4.I.sinh();
      complex5.ZERO.tan();
      complex2.nthRoot(3631);
      complex4.subtract(complex1);
      complex7.log();
      complex6.I.sqrt();
      complex6.createComplex(1141.41, 1373.8641554);
      complex5.abs();
      complex8.sinh();
      complex4.readResolve();
      complex6.tan();
      complex8.cosh();
      Complex complex9 = complex0.reciprocal();
      complex9.divide(0.05139094591140747);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-3720.0301), (-3720.0301));
      Complex complex1 = complex0.multiply(605);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.ONE;
      complex2.reciprocal();
      Complex complex5 = complex2.add((double) 605);
      Complex complex6 = Complex.ZERO;
      complex3.acos();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = Complex.INF;
      complex8.divide((-3720.0301));
      complex1.asin();
      complex7.exp();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.add(complex3);
      complex10.negate();
      complex10.exp();
      complex10.sqrt();
      try { 
        complex5.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf(1317.4625065873333);
      complex3.subtract(1317.4625065873333);
      Complex complex4 = Complex.ONE;
      complex4.sinh();
      complex3.nthRoot(1223);
      complex2.getField();
      complex1.pow((-3208.2403));
      Complex complex5 = complex1.asin();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.4557628631591797, 2.4557628631591797);
      Complex complex2 = complex1.multiply(17);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.add((double) 17);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex2.subtract(complex5);
      complex7.asin();
      complex3.exp();
      Complex complex9 = complex7.add(complex1);
      complex3.negate();
      complex4.exp();
      complex8.sqrt();
      complex0.nthRoot(17);
      Complex complex10 = Complex.valueOf((double) 2870, (double) 17);
      Complex complex11 = Complex.NaN;
      complex1.sqrt();
      complex2.toString();
      complex6.tanh();
      Complex complex12 = new Complex((-6213452.413010857));
      complex4.getArgument();
      complex10.acos();
      Complex complex13 = complex2.divide(complex9);
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.I.pow(complex1);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.divide(3344.223628072311);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.NaN;
      complex3.add(complex2);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex9.sqrt();
      complex10.I.divide(8.223012393018281E36);
      complex6.nthRoot(691);
      complex4.multiply(complex8);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex5.add(complex2);
      complex11.sqrt();
      Complex complex13 = Complex.INF;
      complex13.getArgument();
      complex8.acos();
      complex4.divide(complex12);
      complex8.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2492.68016661, 2492.68016661);
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.add(2492.68016661);
      Complex complex6 = complex3.acos();
      complex4.subtract(complex3);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex8.add(complex3);
      Complex complex10 = complex9.negate();
      complex10.exp();
      complex2.sqrt();
      complex6.nthRoot(2870);
      Complex.valueOf((double) 2870, (double) 2870);
      Complex complex11 = Complex.NaN;
      complex9.sqrt();
      Complex complex12 = Complex.I;
      Complex complex13 = Complex.INF;
      complex12.multiply(complex13);
      Complex complex14 = Complex.NaN;
      Complex complex15 = Complex.ZERO;
      Complex complex16 = complex15.add(complex12);
      Complex complex17 = Complex.valueOf(20.0);
      Complex complex18 = complex17.sqrt();
      complex16.getArgument();
      complex7.acos();
      complex18.divide(complex7);
      complex5.equals(complex18);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow((double) 160);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.multiply(160);
      complex3.ONE.abs();
      complex0.conjugate();
      complex2.pow(complex0);
      Complex complex4 = Complex.valueOf(654.2, (double) 160);
      complex0.isNaN();
      complex1.sinh();
      complex4.tanh();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.sin();
      complex0.readResolve();
      complex0.isNaN();
      Complex complex1 = complex0.add(260.315);
      complex0.isNaN();
      Complex complex2 = complex1.sinh();
      complex2.I.tanh();
      Complex complex3 = new Complex(260.315);
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1004.486294586534, 2093.334);
      Complex complex1 = new Complex(2093.334, 1004.486294586534);
      complex0.INF.readResolve();
      Complex complex2 = complex0.multiply(complex1);
      complex2.NaN.readResolve();
      complex0.cosh();
      complex0.log();
      complex0.sin();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.ONE;
      complex1.isNaN();
      complex1.add(260.315);
      complex2.isNaN();
      Complex complex5 = Complex.ONE;
      complex5.sinh();
      Complex complex6 = new Complex(1532.7157733425);
      complex6.tanh();
      complex3.getReal();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = (Complex)complex0.readResolve();
      complex1.add(2.414213562373095);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(2.414213562373095);
      Complex complex5 = complex0.subtract(complex4);
      complex0.asin();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex2.add(complex6);
      Complex complex8 = complex7.negate();
      complex4.exp();
      complex5.sqrt();
      // Undeclared exception!
      complex8.nthRoot(2040109465);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.tanh();
      Complex complex1 = new Complex(0.0, 0.0);
      complex1.isNaN();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.add(0.0);
      complex2.isNaN();
      complex3.sinh();
      complex0.tanh();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.add(465.382);
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.ONE;
      complex5.hashCode();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = Complex.valueOf((-1983.0), 0.0);
      complex7.exp();
      complex3.acos();
      complex7.sqrt();
      complex6.multiply(40803.0);
      Complex complex8 = Complex.ONE;
      complex8.abs();
      complex5.toString();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.log();
      complex2.nthRoot(79);
      Complex complex3 = Complex.ONE;
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.negate();
      complex5.isInfinite();
      Complex complex6 = complex5.sqrt();
      complex0.reciprocal();
      Complex complex7 = complex1.subtract(complex3);
      complex6.sin();
      Complex complex8 = Complex.I;
      complex8.getField();
      Complex complex9 = complex5.atan();
      complex9.hashCode();
      complex8.nthRoot(1);
      complex2.subtract(2028.816360098459);
      complex0.sqrt();
      Complex complex10 = Complex.ZERO;
      complex6.tan();
      complex4.divide(complex3);
      complex2.tan();
      complex10.abs();
      complex9.pow((-3309.3));
      complex0.multiply(complex3);
      complex10.tanh();
      complex3.readResolve();
      Complex complex11 = complex7.reciprocal();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-3720.0301), (-3720.0301));
      complex0.I.exp();
      complex0.isNaN();
      Complex complex1 = complex0.add((-3720.0301));
      Complex complex2 = new Complex(260.315, 260.315);
      complex2.isNaN();
      Complex complex3 = complex1.sinh();
      complex1.tanh();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.divide(0.0);
      complex0.getImaginary();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.pow((-546.6447825590616));
      complex1.createComplex(Double.POSITIVE_INFINITY, (-1.0000000000000004));
      complex1.ONE.atan();
      complex1.sqrt();
      Complex complex5 = complex4.multiply(3076);
      complex3.multiply(complex5);
      complex3.subtract(2.000000477518859);
      complex3.isNaN();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.reciprocal();
      Complex complex2 = complex0.multiply(1036.0029);
      complex2.pow((-3482.827267904271));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-3720.0301), (-3720.0301));
      Complex complex1 = complex0.I.exp();
      complex1.I.sqrt1z();
      Complex complex2 = complex0.sqrt();
      complex2.ZERO.pow(complex0);
      complex0.getArgument();
      complex0.toString();
      complex2.asin();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.log();
      complex0.nthRoot(37);
      complex1.equals(complex0);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.negate();
      complex0.isInfinite();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex0.subtract(complex7);
      Complex complex10 = complex8.sin();
      complex1.getField();
      Complex complex11 = complex2.atan();
      complex9.hashCode();
      complex10.nthRoot(37);
      complex5.I.pow(complex9);
      Complex complex12 = complex9.subtract((-2688.96923214873));
      Complex complex13 = complex1.sqrt();
      complex2.pow(complex11);
      Complex complex14 = complex2.tan();
      complex12.divide(complex6);
      Complex complex15 = complex14.tan();
      complex8.abs();
      Complex.valueOf(6213452.413010857);
      complex15.pow((-25.03226066));
      complex5.multiply(complex3);
      complex14.tanh();
      complex13.readResolve();
      complex14.reciprocal();
      complex7.isNaN();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-3720.0301), (-3720.0301));
      Complex complex1 = complex0.I.exp();
      complex1.I.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex.valueOf((-3720.0301));
      complex2.ZERO.pow(complex0);
      complex0.getArgument();
      complex0.toString();
      complex1.INF.readResolve();
      complex1.pow((-606.1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2492.68016661, 2492.68016661);
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.add(2492.68016661);
      Complex complex6 = complex3.acos();
      complex4.subtract(complex3);
      complex5.asin();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex8.negate();
      complex9.exp();
      complex2.sqrt();
      complex6.nthRoot(2870);
      Complex.valueOf((double) 2870, (double) 2870);
      Complex complex10 = Complex.NaN;
      complex8.sqrt();
      complex2.NaN.toString();
      complex10.NaN.tanh();
      Complex complex11 = new Complex((-4292.032929319));
      complex11.getArgument();
      complex10.acos();
      complex8.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-2670.0015674898));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-2670.0015674898), (-2670.0015674898));
      complex0.ONE.multiply(complex2);
      complex0.add((-2670.0015674898));
      complex0.getArgument();
      complex1.readResolve();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
      Complex complex1 = complex0.multiply(1036.0029);
      complex1.pow((-3482.827267904271));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      complex1.ONE.divide(complex0);
      int int0 = (-4296);
      try { 
        complex0.nthRoot((-4296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,296
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      double double0 = 465.382;
      Complex complex2 = complex1.I.add(465.382);
      Complex complex3 = complex2.INF.pow(complex1);
      complex1.ZERO.log();
      complex1.ZERO.nthRoot(37);
      complex1.equals(complex0);
      Complex complex4 = complex1.sin();
      complex0.negate();
      complex3.isInfinite();
      Complex complex5 = complex4.sqrt();
      complex5.ONE.reciprocal();
      complex5.ZERO.subtract(complex0);
      complex1.I.sin();
      complex5.ONE.getField();
      Complex complex6 = complex2.atan();
      complex6.NaN.hashCode();
      complex2.ZERO.nthRoot(1);
      Complex complex7 = complex6.subtract((double) 37);
      complex2.I.sqrt();
      try { 
        complex7.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-885.7974396903363));
      Complex complex1 = complex0.add((-885.7974396903363));
      complex1.ZERO.log();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.add((-885.7974396903363));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex2.NaN.cos();
      complex3.ZERO.subtract(complex6);
      Complex complex8 = complex7.sin();
      complex8.ONE.negate();
      complex8.ZERO.multiply((-340));
      complex2.getArgument();
      complex4.reciprocal();
      Complex complex9 = complex0.negate();
      complex9.INF.toString();
      complex3.hashCode();
      complex4.cos();
      complex6.sin();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add(2.135688304901123);
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.divide(1526.835);
      complex3.acos();
      complex3.ONE.sin();
      complex4.isNaN();
      Complex complex5 = complex4.NaN.reciprocal();
      complex3.add(1526.835);
      Complex complex6 = complex0.createComplex(2.135688304901123, (-655.82));
      Complex complex7 = complex6.ZERO.add((-655.82));
      complex7.INF.atan();
      Complex complex8 = complex4.pow(complex2);
      Complex complex9 = complex8.I.reciprocal();
      complex8.NaN.add(518.048266749);
      Complex complex10 = complex1.exp();
      complex8.nthRoot(2129);
      complex6.log();
      Complex complex11 = complex5.multiply(complex9);
      complex11.tanh();
      complex10.atan();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-3720.0301), (-3720.0301));
      Complex complex1 = complex0.I.exp();
      complex1.I.sqrt1z();
      Complex complex2 = complex0.sqrt();
      complex2.ZERO.pow(complex0);
      complex0.getArgument();
      complex0.toString();
      Complex complex3 = complex2.asin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.divide((-546.6447825590616));
      Complex complex2 = complex0.tan();
      complex2.ZERO.divide(0.0);
      complex1.getImaginary();
      complex2.subtract(complex0);
      Complex complex3 = complex1.INF.atan();
      complex0.atan();
      complex1.NaN.tan();
      Complex complex4 = Complex.INF;
      complex1.divide(complex4);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(652.28529, 0.0);
      complex0.getField();
      complex0.abs();
      Complex complex1 = complex0.pow(652.28529);
      complex1.cos();
      complex0.ONE.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(1521.143984, 652.28529);
      Complex complex4 = complex3.INF.sin();
      complex0.ZERO.getArgument();
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.I.atan();
      complex7.I.toString();
      complex2.toString();
      Complex complex8 = complex7.multiply(complex6);
      complex6.isInfinite();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.pow(complex5);
      complex8.add(complex5);
      complex10.multiply((-124));
      complex2.tan();
      complex3.getReal();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(807.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex2.NaN.divide(complex1);
      Complex complex6 = complex5.INF.createComplex(807.0, 1234.0);
      Complex complex7 = complex0.INF.multiply(complex4);
      complex7.I.createComplex(1234.0, 807.0);
      complex0.pow(complex1);
      complex0.readResolve();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex2.pow(complex8);
      Complex complex11 = complex2.tan();
      complex11.multiply(complex6);
      Complex complex12 = complex3.cosh();
      complex12.divide(0.0);
      Complex complex13 = complex8.pow(1033.113699);
      Complex complex14 = complex13.I.sqrt();
      complex14.I.asin();
      complex0.INF.subtract(0.0);
      Complex complex15 = complex10.reciprocal();
      complex9.NaN.getArgument();
      complex15.ONE.sin();
      complex1.cos();
      complex15.subtract(complex0);
      complex2.cosh();
      complex9.sinh();
      complex10.getArgument();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-1472));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex((-1911.848));
      Complex complex2 = Complex.valueOf((-1.0));
      complex2.NaN.add(complex1);
      complex2.ONE.readResolve();
      complex0.ZERO.toString();
      complex0.NaN.multiply(0.0);
      Complex complex3 = complex1.I.divide(0.0);
      complex3.I.atan();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.ONE.divide((-1.0));
      complex6.ZERO.sqrt1z();
      complex1.abs();
      Complex complex7 = complex2.asin();
      complex1.cos();
      Complex.valueOf(0.0);
      Complex complex8 = complex1.log();
      complex8.abs();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.I.add((-5368.088));
      complex2.NaN.abs();
      complex0.isInfinite();
      complex0.hashCode();
      complex0.pow(Double.NaN);
      Complex complex3 = complex2.negate();
      complex3.INF.cosh();
      Complex complex4 = complex2.sqrt();
      complex4.INF.log();
      complex4.getImaginary();
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.sin();
      complex0.readResolve();
      complex0.isNaN();
      Complex complex1 = complex0.add(260.315);
      complex0.isNaN();
      Complex complex2 = complex1.sinh();
      complex2.I.tanh();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.ZERO.atan();
      complex2.NaN.add(complex1);
      Complex complex4 = complex3.ONE.multiply(complex1);
      complex0.hashCode();
      complex1.isInfinite();
      complex1.getImaginary();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.I.sqrt();
      complex6.ONE.add(complex5);
      Complex complex7 = complex6.ONE.subtract(complex0);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.divide((-630.877855222));
      Complex.valueOf(1285.3902219874);
      complex5.I.sinh();
      Complex complex10 = complex5.pow(complex4);
      complex4.subtract((-1647.51));
      Complex.valueOf((-1647.51), Double.NaN);
      Complex complex11 = Complex.INF;
      complex10.equals(complex11);
      complex6.divide((-1647.51));
      Complex complex12 = complex6.acos();
      Complex.valueOf(0.0, 942.2309679494508);
      complex12.isInfinite();
      complex7.conjugate();
      complex10.getField();
      Complex complex13 = complex6.cos();
      complex13.ZERO.acos();
      complex9.createComplex(942.2309679494508, 409.19551);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.multiply(783.08);
      complex1.NaN.acos();
      complex1.I.atan();
      Complex complex2 = complex1.sinh();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex2.NaN.createComplex(1.975188970565796, 1.975188970565796);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex0.cosh();
      complex6.getField();
      Complex complex7 = complex6.sqrt1z();
      complex3.ZERO.nthRoot(3733);
      Complex complex8 = complex6.sinh();
      complex8.I.subtract(complex3);
      Complex complex9 = complex8.pow((-45.31156));
      complex9.INF.createComplex((-1774.45726770197), 1.0);
      complex9.NaN.toString();
      Complex complex10 = complex8.sqrt();
      complex10.ONE.add((-211.0913008939));
      complex10.INF.getArgument();
      complex0.tan();
      complex5.atan();
      complex4.add(complex7);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.ONE.pow(complex1);
      complex1.hashCode();
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.exp();
      complex2.INF.acos();
      Complex complex3 = complex2.INF.sqrt();
      complex3.INF.multiply(508.122117921948);
      complex1.abs();
      complex1.toString();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.NaN.log();
      Complex complex5 = complex3.NaN.multiply(460);
      Complex complex6 = complex0.exp();
      Complex complex7 = Complex.valueOf(0.3784096837043762);
      complex2.readResolve();
      Complex complex8 = complex5.asin();
      complex0.hashCode();
      complex3.nthRoot(460);
      complex6.getReal();
      complex2.sinh();
      complex3.nthRoot(460);
      complex5.pow(0.3784096837043762);
      Complex complex9 = Complex.valueOf((double) 460);
      complex9.tan();
      complex1.equals(complex9);
      complex3.exp();
      Complex complex10 = complex7.cos();
      complex3.subtract(complex8);
      complex8.acos();
      complex1.multiply(complex3);
      complex1.multiply(complex3);
      complex10.exp();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 2404.78159137;
      Complex complex0 = Complex.valueOf(2404.78159137, 2404.78159137);
      Complex complex1 = complex0.NaN.sin();
      complex0.INF.abs();
      complex0.log();
      Complex complex2 = complex1.conjugate();
      complex2.INF.sqrt();
      try { 
        complex0.nthRoot((-783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -783
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1739.1802611), (-1961.1860260485));
      complex0.INF.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      complex1.INF.subtract(complex2);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.INF.sinh();
      complex4.INF.getField();
      Complex complex5 = Complex.valueOf((-1961.1860260485));
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.I.add(complex6);
      complex1.INF.sqrt1z();
      Complex complex8 = complex1.NaN.cos();
      complex8.sqrt();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex4.INF.pow(complex9);
      complex10.cos();
      complex1.acos();
      complex4.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.isNaN();
      Complex complex11 = complex1.multiply((-1961.1860260485));
      complex11.ZERO.subtract((-1739.1802611));
      complex6.negate();
      Complex.valueOf(4129.3551383, 4129.3551383);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-749.2048428573357));
      Complex complex1 = complex0.createComplex((-749.2048428573357), Double.POSITIVE_INFINITY);
      complex1.ZERO.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.cosh();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.subtract(Double.POSITIVE_INFINITY);
      complex2.pow(complex4);
      complex4.hashCode();
      complex3.hashCode();
      complex5.multiply(557);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.pow((double) 160);
      complex0.ONE.sin();
      Complex complex1 = complex0.multiply(160);
      complex1.ONE.abs();
      Complex complex2 = complex0.conjugate();
      Complex.valueOf((double) 160);
      Complex complex3 = complex2.subtract((-1.0));
      Complex complex4 = complex3.sinh();
      complex4.nthRoot(160);
      complex3.ZERO.getField();
      complex0.pow((double) 160);
      complex3.asin();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ONE.log();
      complex0.NaN.hashCode();
      complex0.abs();
      complex0.pow(complex3);
      complex0.isNaN();
      Complex complex4 = complex0.exp();
      complex4.I.toString();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.NaN.sqrt();
      complex5.cosh();
      complex0.add(1.0);
      Complex complex8 = complex3.multiply(1203);
      complex6.readResolve();
      complex8.ONE.acos();
      complex7.pow(complex0);
      complex1.nthRoot(1203);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.asin();
      complex1.INF.sin();
      Complex complex3 = complex0.exp();
      complex3.add(complex0);
      complex0.isNaN();
      complex0.INF.pow(complex3);
      Complex complex4 = complex3.tan();
      complex4.I.sqrt();
      complex1.pow(complex2);
      complex3.createComplex(664.11978820583, 664.11978820583);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.conjugate();
      complex2.ONE.pow(complex0);
      complex2.ZERO.divide((-20.0));
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex1.multiply((-20.0));
      complex0.INF.log();
      Complex complex6 = complex1.I.multiply(complex0);
      Complex complex7 = complex6.I.multiply(0);
      complex7.multiply(0);
      complex6.ONE.negate();
      Complex complex8 = complex0.subtract(complex1);
      complex2.NaN.exp();
      Complex complex9 = complex8.tan();
      complex5.multiply(complex9);
      complex4.atan();
      Complex.valueOf((-355.3495961), 0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.negate();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.tan();
      complex1.ZERO.abs();
      complex2.I.abs();
      Complex complex3 = complex1.asin();
      complex3.ONE.multiply((-814));
      complex3.divide(3761.7009310873123);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-1405.95));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.I;
      complex2.nthRoot(278);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex1.createComplex(0.0, 278);
      Complex complex6 = complex4.asin();
      complex6.NaN.cos();
      complex6.INF.add(421.7014722075);
      complex6.NaN.divide(complex3);
      complex3.INF.exp();
      Complex complex7 = complex6.ONE.asin();
      complex6.ONE.pow((-1405.95));
      complex7.ZERO.hashCode();
      complex3.isNaN();
      complex2.abs();
      Complex complex8 = complex6.tan();
      complex8.cosh();
      Complex complex9 = complex2.pow(0.0);
      complex9.INF.toString();
      complex9.sqrt1z();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.I.atan();
      complex10.ONE.atan();
      complex1.log();
      Complex complex12 = complex1.sqrt();
      complex12.I.log();
      complex2.toString();
      complex11.getArgument();
      Complex complex13 = Complex.valueOf(421.7014722075);
      complex5.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2492.68016661);
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(50.0);
      Complex complex1 = complex0.I.negate();
      complex0.I.pow(complex1);
      Complex complex2 = complex1.ZERO.createComplex(50.0, (-1176.56531332));
      complex0.ONE.sqrt1z();
      complex2.asin();
      complex2.abs();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.ONE.add(complex3);
      complex3.ZERO.cos();
      Complex complex5 = complex1.sinh();
      complex5.conjugate();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.NaN.negate();
      complex7.abs();
      Complex complex8 = complex1.pow(complex4);
      complex8.multiply(1177.6272485416555);
      complex2.getImaginary();
      complex8.negate();
      complex7.hashCode();
      complex8.sqrt();
      complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-371.514311365037));
      int int0 = 757;
      Complex complex2 = complex1.multiply(757);
      complex2.I.atan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.ONE.sinh();
      complex3.NaN.tanh();
      try { 
        complex5.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.isNaN();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.add((double) 1);
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex0.subtract(complex2);
      complex7.NaN.asin();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.add(complex4);
      complex9.INF.negate();
      Complex complex10 = complex4.NaN.exp();
      complex10.INF.sqrt();
      complex3.nthRoot(1);
      complex3.multiply(complex4);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex1.add(complex11);
      complex2.sqrt();
      complex12.I.getArgument();
      complex0.acos();
      complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(543);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2893.0, 2596.5780148887993);
      Complex complex2 = complex1.ZERO.createComplex(2893.0, (-3750.6191579013484));
      Complex complex3 = complex0.cosh();
      complex3.hashCode();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex5.ONE.sqrt();
      complex6.ZERO.toString();
      Complex complex7 = complex4.multiply(223);
      complex7.ZERO.toString();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.INF.sinh();
      complex2.multiply(0);
      complex9.abs();
      Complex complex10 = complex3.atan();
      complex6.I.divide(complex7);
      complex10.log();
      complex5.equals("k8V!mj9jP+B8Qsp");
      complex6.exp();
      complex5.abs();
      complex5.acos();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.createComplex(8.584676196065558E-8, 0.0);
      try { 
        complex2.ZERO.nthRoot((-3138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,138
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      complex1.divide(complex2);
      complex0.hashCode();
      Complex.valueOf((-1047.6974704097042), (-1047.6974704097042));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-245.4));
      complex1.readResolve();
      Complex complex2 = complex0.multiply(119);
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.exp();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.NaN.sqrt1z();
      complex0.ZERO.sqrt1z();
      complex0.getImaginary();
      Complex complex6 = complex0.I.divide(complex3);
      Complex complex7 = complex4.I.add(Double.NaN);
      complex2.ONE.sqrt1z();
      Complex complex8 = complex4.pow(1138.448308);
      complex8.INF.acos();
      complex8.INF.subtract(complex7);
      Complex complex9 = complex1.sinh();
      complex4.ONE.conjugate();
      complex9.INF.add(0.0);
      complex5.sinh();
      complex4.multiply(complex6);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2358.8809309, 2358.8809309);
      complex0.multiply(2358.8809309);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-3033.30622), (-3033.30622));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.ZERO.divide(complex0);
      complex5.ZERO.add(complex0);
      Complex complex6 = complex5.I.createComplex((-2597.27), (-3033.30622));
      Complex complex7 = complex6.NaN.subtract(0.0);
      assertTrue(complex7.equals((Object)complex3));
      
      Complex complex8 = Complex.valueOf((-3033.30622), (-3033.30622));
      complex5.ONE.abs();
      Complex complex9 = Complex.valueOf(3071.958882);
      complex8.ZERO.readResolve();
      Complex complex10 = complex0.subtract(0.0);
      Complex complex11 = complex1.INF.add(complex6);
      Complex complex12 = complex11.reciprocal();
      complex10.INF.multiply(complex9);
      Complex.valueOf((-1.429109630340783E-7), (-2597.27));
      Complex complex13 = complex12.sqrt();
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertTrue(complex13.equals((Object)complex5));
      
      complex8.nthRoot(1);
      complex0.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex14 = complex9.multiply((-1395.205));
      complex8.createComplex(3071.958882, 1);
      Complex complex15 = complex1.acos();
      assertEquals(1.6574544541530762, complex15.getImaginary(), 0.01);
      
      complex14.isInfinite();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertEquals((-4286012.39196081), complex14.getReal(), 0.01);
      
      Complex complex16 = complex10.sqrt1z();
      boolean boolean0 = complex2.equals(complex16);
      assertFalse(boolean0);
      assertEquals((-3033.306137581682), complex16.getImaginary(), 0.01);
      
      complex1.cosh();
      assertTrue(complex0.equals((Object)complex8));
      
      Complex complex17 = complex9.divide(3572.28515);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
  }
}
