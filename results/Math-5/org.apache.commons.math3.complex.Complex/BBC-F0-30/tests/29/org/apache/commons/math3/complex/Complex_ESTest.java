/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:26:28 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.subtract((-2.8722453410235684E-139));
      Complex complex3 = complex1.multiply(complex0);
      complex3.INF.abs();
      complex3.ZERO.add(complex0);
      Complex complex4 = complex1.atan();
      complex4.ZERO.asin();
      complex4.INF.sqrt();
      Complex complex5 = complex2.sinh();
      complex5.getField();
      Complex complex6 = complex2.sinh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-109.44765));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.add(2.1628672925745152E-105);
      Complex complex5 = complex2.log();
      Complex complex6 = Complex.valueOf(20.0, 5.1635269305465607E216);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex2.conjugate();
      complex10.abs();
      Complex complex11 = complex10.multiply(977);
      complex8.pow(2.1628672925745152E-105);
      complex0.sqrt();
      complex4.tanh();
      complex8.getField();
      complex9.pow(complex6);
      complex6.cosh();
      Complex.valueOf(1709.3736);
      complex3.tan();
      complex6.nthRoot(1);
      Complex complex12 = complex7.add(complex6);
      complex11.equals(complex0);
      complex9.getReal();
      Complex complex13 = Complex.ZERO;
      complex13.sqrt1z();
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1037.7705, (-20.0));
      Complex complex1 = complex0.I.acos();
      complex1.ZERO.getArgument();
      complex1.ONE.multiply(828);
      complex1.reciprocal();
      Complex complex2 = complex0.tan();
      complex0.subtract(1208.7564817);
      complex0.readResolve();
      complex0.negate();
      Complex complex3 = complex0.subtract((-20.0));
      complex3.ZERO.pow(complex1);
      complex2.nthRoot(273);
      Complex complex4 = complex2.multiply(158);
      complex4.ZERO.nthRoot(2270);
      complex4.asin();
      complex3.cos();
      Complex.valueOf((double) 158);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1169.351586324759), (-1169.351586324759));
      complex0.log();
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.235679281449217E7, 2.235679281449217E7);
      complex0.toString();
      Complex complex1 = complex0.I.add(1741.048860686);
      Complex complex2 = complex0.INF.createComplex((-602.2885312464433), 2.235679281449217E7);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = Complex.valueOf(0.4583202642894748);
      Complex complex6 = complex4.ZERO.multiply(complex2);
      Complex complex7 = complex6.I.cosh();
      complex5.I.negate();
      complex7.toString();
      complex3.pow(complex5);
      Complex complex8 = complex0.subtract(0.37907832860946655);
      complex8.NaN.toString();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.235679281449217E7);
      complex8.sin();
      complex9.ZERO.cos();
      complex3.abs();
      Complex complex10 = complex9.sqrt();
      complex10.divide(complex8);
      complex0.exp();
      Complex complex11 = complex0.log();
      complex1.divide(complex10);
      Complex complex12 = complex3.add(1786.18);
      complex3.tan();
      complex12.add(complex11);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.cosh();
      complex0.ZERO.cosh();
      Complex complex3 = new Complex((-20.0));
      complex0.ONE.subtract(complex3);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex0.multiply((-169.173));
      Complex complex7 = complex0.atan();
      complex7.NaN.add((-1239.08087));
      complex5.sqrt1z();
      complex3.multiply(1450);
      complex4.conjugate();
      complex6.reciprocal();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3902314592614197E-7));
      complex0.INF.getField();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.valueOf((-1.3902314592614197E-7), (-1.3902314592614197E-7));
      complex2.toString();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      Complex complex4 = complex3.NaN.subtract(Double.POSITIVE_INFINITY);
      complex4.I.subtract(complex3);
      complex0.add((-3300.28116411));
      complex3.abs();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.I.cosh();
      complex6.NaN.divide((-2729.28400174));
      Complex complex7 = complex1.pow(complex3);
      complex7.INF.reciprocal();
      complex0.negate();
      Complex complex8 = complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex8.ONE.tanh();
      complex5.cosh();
      complex8.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.tanh();
      complex0.ONE.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide((double) 279);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.multiply(complex0);
      Complex complex2 = complex0.conjugate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(215.149169052267, 215.149169052267);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.divide(215.149169052267);
      complex3.NaN.multiply((-784));
      complex2.NaN.tanh();
      complex0.NaN.getArgument();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex5.ONE.add(Double.NaN);
      complex6.sinh();
      Complex complex7 = complex5.INF.subtract(2326.39391258);
      complex7.INF.toString();
      complex4.cos();
      Complex complex8 = complex5.sqrt();
      complex8.INF.acos();
      Complex complex9 = complex8.ZERO.tanh();
      complex9.cosh();
      Complex complex10 = complex1.conjugate();
      complex10.abs();
      Complex complex11 = complex0.negate();
      complex11.sinh();
      Complex complex12 = complex0.createComplex(1098.825, 215.149169052267);
      complex12.abs();
      complex0.sqrt();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(5.662495731848751E219, (-1010.1789441321872));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.multiply(1);
      complex3.INF.tan();
      complex1.acos();
      complex3.conjugate();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.8032429752543687E228);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.NaN.cosh();
      complex4.I.cos();
      Complex complex5 = complex0.exp();
      Complex.valueOf(1.1101467609405518);
      Complex complex6 = complex3.divide((-3.6149218175202596E-8));
      Complex complex7 = complex2.pow((-3.6149218175202596E-8));
      complex6.multiply(complex7);
      Complex complex8 = complex0.divide(complex1);
      complex8.INF.subtract(complex3);
      complex0.ZERO.hashCode();
      complex0.createComplex((-1.0155552195374609E-134), (-20.0));
      complex6.ONE.getArgument();
      Complex complex9 = complex3.I.asin();
      complex9.NaN.getField();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.ZERO.pow((-1.0155552195374609E-134));
      complex5.asin();
      complex1.INF.asin();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex10.I.atan();
      complex8.pow(complex1);
      Complex complex12 = complex11.pow((-2.2015877944429946E-104));
      Complex complex13 = complex9.tan();
      complex12.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 1.9732608795166016);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.NaN.createComplex((-20.0), (-20.0));
      complex1.divide(complex0);
      complex0.ZERO.nthRoot(575);
      Complex complex5 = complex0.multiply((-1));
      Complex complex6 = complex3.negate();
      complex6.readResolve();
      Complex complex7 = complex3.multiply((-1054));
      Complex.valueOf((double) 575, (-1587.180388));
      Complex complex8 = complex7.INF.sin();
      complex8.INF.multiply(complex5);
      Complex complex9 = new Complex(4119.0631, (-717887.3050780357));
      Complex complex10 = complex4.pow(complex9);
      complex3.add(1876.34875737866);
      Complex.valueOf((double) (-1054), (-20.0));
      Complex complex11 = complex3.subtract(complex2);
      Complex complex12 = complex3.log();
      Complex complex13 = complex12.I.negate();
      complex13.I.abs();
      complex0.INF.exp();
      Complex complex14 = complex11.multiply(complex4);
      complex14.I.getArgument();
      complex14.exp();
      complex2.sin();
      complex10.sinh();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-2875.463640492353));
      complex0.ONE.toString();
      Complex complex2 = complex0.I.add(0.9998341032648266);
      complex2.I.toString();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.divide((-20.0));
      Complex complex6 = complex5.pow(complex2);
      complex3.ZERO.sinh();
      Complex complex7 = Complex.valueOf((-2875.463640492353), 4.01780853635105E197);
      complex3.ZERO.asin();
      complex6.NaN.hashCode();
      Complex complex8 = complex5.INF.sqrt();
      Complex complex9 = Complex.valueOf(0.9998341032648266);
      complex9.INF.subtract((-2875.463640492353));
      Complex complex10 = complex9.NaN.createComplex((-20.0), 4.01780853635105E197);
      Complex complex11 = complex9.exp();
      complex11.I.abs();
      complex0.sin();
      complex4.readResolve();
      Complex complex12 = complex8.tan();
      complex8.sin();
      complex0.NaN.exp();
      Complex.valueOf((-3625.6930842), 7.694785471490595E23);
      complex12.getField();
      complex8.cos();
      Complex.valueOf(0.9998341032648266);
      complex1.sqrt1z();
      complex7.cos();
      complex8.acos();
      complex10.sqrt1z();
      Complex.valueOf((-3547.29));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2095.0), (-4.590956927730542));
      Complex complex1 = complex0.subtract((-2095.0));
      complex1.hashCode();
      complex1.INF.hashCode();
      Complex complex2 = complex1.cosh();
      complex2.NaN.subtract(3625.6931);
      complex0.abs();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.I.sqrt1z();
      complex4.ONE.abs();
      Complex complex5 = complex0.divide(complex3);
      complex5.tanh();
      Complex complex6 = complex3.tanh();
      complex6.tanh();
      Complex complex7 = complex5.log();
      complex7.toString();
      complex0.multiply((-1558));
      complex5.subtract(2.719805132368625E-271);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1587.180388), (-1587.180388));
      complex0.conjugate();
      complex0.pow(0.5578699652567908);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3625.6930842, 3625.6930842);
      Complex complex1 = complex0.sqrt1z();
      complex1.subtract(6.283185307179586);
      complex1.sinh();
      complex0.divide(562.6531962157839);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.reciprocal();
      complex4.sin();
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.valueOf(1786.465781);
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex4.add(complex1);
      Complex complex9 = complex8.divide(1786.465781);
      complex7.multiply(37);
      Complex.valueOf(2.083115484919861E219);
      complex8.cosh();
      complex2.log();
      complex9.tanh();
      complex4.sin();
      Complex complex10 = new Complex(0.4113073945045471, Double.NaN);
      complex10.negate();
      complex6.add(0.4113073945045471);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.5639638), (-1.2362653723769037E-8));
      complex0.INF.pow((-1.2362653723769037E-8));
      Complex complex1 = complex0.multiply((-1511.5639638));
      Complex complex2 = complex1.I.tan();
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(1065);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex4.acos();
      complex4.getField();
      complex4.abs();
      Complex complex7 = complex5.add(complex6);
      complex7.divide(complex3);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      complex1.ZERO.subtract(Double.NaN);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.I;
      complex3.divide(complex2);
      Complex.valueOf(2615.638810441434, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.630261301303634E-142);
      Complex complex1 = Complex.valueOf(0.0, (-671.70796));
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex1.nthRoot(17);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.INF;
      complex3.sin();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5153.6032993142));
      complex0.multiply(1767303.4);
      complex0.reciprocal();
      Complex complex1 = Complex.NaN;
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.subtract(Double.NaN);
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      complex3.equals((Object) null);
      Complex complex4 = Complex.ZERO;
      complex0.multiply(Double.NaN);
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = new Complex((-1.0), (-2643.9697123797));
      complex6.acos();
      Complex complex7 = Complex.I;
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
      complex0.nthRoot(15);
      Complex complex8 = Complex.INF;
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4564130306243896, 1.4564130306243896);
      complex0.reciprocal();
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      complex1.divide(1.4564130306243896);
      complex1.abs();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.I;
      complex2.NaN.sqrt();
      complex1.cosh();
      Complex.valueOf(3.761095763366029E-4, 6.283185307179586);
      complex2.toString();
      Complex complex4 = new Complex(3.761095763366029E-4, (-654.6759875));
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex.valueOf(2306.35460790724, 2306.35460790724);
      complex0.INF.getField();
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      complex1.ZERO.subtract(Double.NaN);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.divide(complex2);
      complex3.I.asin();
      complex2.nthRoot(1898);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.divide(1329.4);
      complex1.getField();
      complex0.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.multiply(1.0);
      Complex complex7 = new Complex(1329.4);
      complex7.acos();
      Complex complex8 = Complex.I;
      complex3.equals("Ocp|)$");
      complex2.nthRoot(17);
      Complex complex9 = Complex.INF;
      complex9.multiply(complex8);
      complex4.add(complex6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.5639638), (-1.2362653723769037E-8));
      Complex complex1 = complex0.INF.pow((-1.2362653723769037E-8));
      Complex complex2 = complex0.multiply((-1511.5639638));
      Complex complex3 = complex2.I.tan();
      complex0.multiply(1065);
      Complex complex4 = Complex.valueOf((-6.793094743406533E110));
      Complex complex5 = complex1.log();
      complex0.add(complex3);
      complex5.divide((-1511.5639638));
      complex3.multiply(1065);
      Complex.valueOf((double) (-1244));
      Complex complex6 = Complex.I;
      complex4.tanh();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3625.6930842, 3625.6930842);
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(0.7853981633974483);
      complex2.INF.hashCode();
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex3.divide((-1183.3733097));
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex0.subtract(complex1);
      complex6.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.ONE;
      complex8.acos();
      complex8.NaN.nthRoot(65);
      complex7.pow(complex8);
      complex8.ONE.pow(complex5);
      complex7.divide(complex2);
      Complex complex9 = Complex.valueOf(6.283185307179586);
      Complex complex10 = complex9.cosh();
      complex6.getImaginary();
      Complex complex11 = complex5.subtract(complex10);
      complex11.cos();
      Complex complex12 = complex7.exp();
      complex12.ONE.pow(3624.6930842);
      complex2.multiply(17);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.divide(1329.4);
      complex1.getField();
      complex0.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.sin();
      Complex complex6 = new Complex(2.0);
      Complex complex7 = complex6.tan();
      Complex.valueOf(6.283185307179586);
      complex6.log();
      complex6.add(complex3);
      complex5.divide(2.0);
      complex4.multiply((-1244));
      Complex.valueOf((double) (-1244));
      complex6.cosh();
      complex7.tanh();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3625.6930842, 3625.6930842);
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(0.7853981633974483);
      complex2.INF.hashCode();
      Complex complex3 = complex1.ONE.pow(complex0);
      complex3.divide((-1183.3733097));
      complex3.ONE.sinh();
      Complex complex4 = complex0.subtract(complex1);
      complex1.NaN.getField();
      Complex complex5 = complex4.tan();
      complex0.sqrt();
      Complex complex6 = Complex.ONE;
      complex6.acos();
      complex6.NaN.nthRoot(65);
      Complex complex7 = complex1.add(complex5);
      Complex complex8 = complex7.atan();
      complex8.ZERO.nthRoot(37);
      Complex complex9 = new Complex(0.7853981633974483, 1.439903710393587E-8);
      try { 
        complex9.nthRoot((-1582));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,582
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1828.2), 0.0);
      Complex complex1 = complex0.pow((-2538.20493439138));
      Complex complex2 = complex1.multiply(4114.36596580093);
      complex2.ZERO.tanh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply(1065);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = Complex.INF;
      complex6.exp();
      Complex complex7 = new Complex(20.0, 3975.295431893676);
      complex7.acos();
      complex7.getField();
      complex2.abs();
      complex5.add(complex2);
      complex4.divide(complex5);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.5639638), (-1511.5639638));
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.4564130306243896, 6.895233445902704E-5);
      Complex complex3 = complex2.reciprocal();
      complex2.hashCode();
      Complex complex4 = complex3.divide((-94.78));
      complex3.getField();
      Complex complex5 = Complex.INF;
      complex5.abs();
      Complex complex6 = complex3.sinh();
      complex4.acos();
      Complex complex7 = complex6.reciprocal();
      complex3.sin();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.NaN;
      complex9.tan();
      complex1.cosh();
      Complex.valueOf(148.0, (-2.356194490192345));
      complex2.toString();
      complex7.getImaginary();
      Complex complex10 = Complex.valueOf(28.403287724191, 2.629130068163142E7);
      try { 
        complex10.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3625.6930842, 3625.6930842);
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.4564130306243896, 1.4564130306243896);
      Complex complex3 = complex1.reciprocal();
      complex2.hashCode();
      Complex complex4 = complex0.divide(28.403287724191);
      Complex complex5 = new Complex(1786.968, 0.6376425216841068);
      Complex complex6 = complex2.atan();
      complex4.getField();
      complex1.abs();
      complex5.add(complex6);
      Complex complex7 = complex2.divide(complex3);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2594);
      Complex complex2 = complex0.I.add((-574.657961));
      complex2.ZERO.add(complex1);
      Complex complex3 = complex0.ONE.multiply(1100);
      complex3.divide(complex1);
      Complex complex4 = complex3.INF.pow(0.6376425216841068);
      Complex.valueOf(1024.0, (double) 501);
      complex1.ZERO.nthRoot(501);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.INF.acos();
      complex8.I.getArgument();
      complex7.INF.readResolve();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex7.conjugate();
      complex11.ZERO.multiply(2.0);
      complex10.ZERO.acos();
      complex7.toString();
      complex10.readResolve();
      Complex complex12 = complex1.sinh();
      complex12.ONE.divide((-574.657961));
      complex4.add(complex6);
      complex0.multiply(501);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.asin();
      Complex complex1 = Complex.valueOf(1.4564130306243896, (-954.5396130911217));
      Complex complex2 = complex0.I.reciprocal();
      complex2.ZERO.hashCode();
      Complex complex3 = complex2.pow((-637.553202616));
      Complex complex4 = complex3.asin();
      complex0.subtract(1511.5639638);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.tanh();
      Complex.valueOf(2780.4078615061458);
      Complex complex7 = Complex.ZERO;
      complex2.equals(complex7);
      complex2.multiply((-814.8146879460788));
      Complex complex8 = complex5.acos();
      Complex complex9 = Complex.I;
      complex3.equals("");
      complex4.nthRoot(2952);
      complex6.multiply(complex4);
      complex8.add(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = new Complex(2306.35460790724, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(185.89953777, 0.0);
      complex1.divide(complex2);
      complex3.sin();
      complex0.subtract(2406.4354433132);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 8.756510122348782E-27);
      Complex complex2 = complex0.acos();
      complex2.getField();
      complex0.abs();
      complex1.add(complex2);
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3975.0), (-585.5672));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex((-585.5672), (-3975.0));
      complex2.ONE.atan();
      complex3.getField();
      complex2.abs();
      complex0.add(complex1);
      complex3.divide(complex1);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.divide(1329.4);
      complex1.getField();
      complex0.abs();
      Complex complex2 = complex0.sinh();
      complex2.acos();
      Complex complex3 = complex0.reciprocal();
      complex3.sin();
      Complex complex4 = new Complex(2.0);
      complex4.tan();
      Complex complex5 = complex1.cosh();
      complex0.toString();
      complex3.getImaginary();
      complex3.subtract(complex0);
      complex3.cos();
      complex5.exp();
      complex3.multiply(37);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.5639638), (-1.2362653723769037E-8));
      Complex complex1 = complex0.INF.pow((-1.2362653723769037E-8));
      Complex complex2 = complex0.multiply((-1511.5639638));
      complex1.sqrt1z();
      complex2.I.tan();
      Complex complex3 = complex0.multiply(1073);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex0.divide((-1511.5639638));
      Complex complex6 = complex1.cos();
      complex6.INF.conjugate();
      complex4.ZERO.log();
      Complex.valueOf(0.0);
      complex4.ONE.add((double) 1073);
      complex5.exp();
      Complex complex7 = Complex.ZERO;
      complex1.abs();
      complex3.divide((double) 1073);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.I.negate();
      complex0.toString();
      complex0.equals("(NaN, NaN)");
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.I;
      complex4.NaN.multiply(0.0);
      Complex complex5 = complex1.pow((-637.553202616));
      Complex complex6 = complex5.ZERO.asin();
      complex6.ZERO.subtract((-637.553202616));
      complex6.NaN.tanh();
      Complex.valueOf(Double.NaN);
      complex2.equals("");
      Complex complex7 = complex0.multiply(175.42672760227);
      complex2.acos();
      Complex complex8 = Complex.INF;
      complex2.equals(complex8);
      complex5.nthRoot(328);
      complex1.multiply(complex8);
      complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.asin();
      Complex complex1 = Complex.valueOf((-954.5396130911217), 0.0);
      Complex complex2 = Complex.ONE;
      complex2.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.divide((-954.5396130911217));
      complex0.getField();
      Complex complex4 = new Complex(1592.2474474518556);
      complex4.abs();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex3.acos();
      complex1.reciprocal();
      Complex complex7 = complex5.sin();
      complex7.tan();
      complex6.cosh();
      complex2.toString();
      Complex complex8 = Complex.NaN;
      complex8.getImaginary();
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.sqrt1z();
      complex2.multiply(Double.NaN);
      Complex complex4 = complex3.pow(Double.NaN);
      Complex complex5 = Complex.valueOf(3821.1620028076245);
      complex4.equals(complex2);
      complex5.multiply((-934.119187623));
      Complex complex6 = Complex.I;
      complex6.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.4564130306243896, (-954.5396130911217));
      Complex complex3 = complex0.I.reciprocal();
      complex3.ZERO.hashCode();
      complex2.ZERO.divide(1.4564130306243896);
      complex2.I.getField();
      complex0.abs();
      Complex complex4 = complex1.sinh();
      complex4.INF.acos();
      complex1.reciprocal();
      Complex complex5 = complex0.NaN.sin();
      Complex complex6 = complex5.INF.tan();
      complex6.NaN.getArgument();
      Complex complex7 = complex2.cosh();
      complex7.I.toString();
      complex3.getImaginary();
      complex1.subtract(complex2);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.I.negate();
      complex0.toString();
      complex0.equals("(NaN, NaN)");
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.multiply((-857.57068249386));
      Complex complex6 = complex3.pow(Double.NaN);
      complex5.asin();
      complex6.subtract(0.0);
      complex1.tanh();
      Complex.valueOf(6.283185307179586);
      complex2.equals(complex1);
      complex1.multiply(Double.NaN);
      complex2.acos();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.I;
      complex8.equals(complex6);
      // Undeclared exception!
      complex8.nthRoot(2146891515);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.5639638), (-1.2362653723769037E-8));
      complex0.INF.pow((-1.2362653723769037E-8));
      Complex complex1 = complex0.multiply((-1511.5639638));
      complex1.I.tan();
      Complex complex2 = complex0.multiply(1065);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex3.acos();
      complex3.getField();
      complex3.abs();
      Complex complex6 = complex4.add(complex5);
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(2306.35460790724);
      complex1.cos();
      Complex complex3 = complex1.conjugate();
      complex1.log();
      Complex.valueOf(2306.35460790724);
      complex3.add(0.39696556329727173);
      Complex complex4 = complex2.exp();
      complex4.atan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3625.6930842, 3625.6930842);
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.4564130306243896, 1.4564130306243896);
      Complex complex3 = complex1.reciprocal();
      complex2.hashCode();
      Complex complex4 = complex0.divide(28.403287724191);
      complex3.getField();
      complex4.abs();
      complex1.sinh();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.reciprocal();
      complex0.sin();
      Complex complex7 = Complex.I;
      complex7.tan();
      Complex complex8 = complex6.cosh();
      Complex complex9 = Complex.valueOf(1.4564130306243896, 3625.6930842);
      complex9.toString();
      complex5.getImaginary();
      complex8.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.4564130306243896, (-954.5396130911217));
      Complex complex3 = complex0.I.reciprocal();
      complex3.ZERO.hashCode();
      Complex complex4 = complex2.ZERO.divide(1.4564130306243896);
      complex2.I.getField();
      complex0.abs();
      Complex complex5 = new Complex(4.201209991636407E25);
      complex3.pow(complex5);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.divide(complex6);
      Complex.valueOf((-1183.3733097));
      complex7.log();
      complex3.add(complex1);
      complex4.divide(6.283185307179586);
      Complex complex8 = Complex.ZERO;
      complex8.multiply(4594);
      Complex.valueOf(585.793249656);
      Complex complex9 = Complex.NaN;
      complex9.cosh();
      complex5.tanh();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3625.6930842, 3625.6930842);
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(0.7853981633974483);
      complex2.INF.hashCode();
      Complex complex3 = complex1.ONE.pow(complex0);
      complex3.divide((-1183.3733097));
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.ONE;
      complex8.acos();
      complex8.NaN.nthRoot(65);
      complex7.pow(complex8);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex8.acos();
      complex9.reciprocal();
      complex10.sin();
      complex6.tan();
      complex3.cosh();
      complex4.toString();
      complex8.getImaginary();
      Complex complex11 = Complex.valueOf((-2681.607816), 4.2794300909638086);
      complex10.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.5639638), (-1.2362653723769037E-8));
      Complex complex1 = complex0.INF.pow((-1.2362653723769037E-8));
      Complex complex2 = Complex.INF;
      complex2.I.tan();
      Complex complex3 = complex0.multiply(1065);
      Complex complex4 = complex3.divide(complex2);
      complex0.divide((-1511.5639638));
      Complex complex5 = complex1.cos();
      complex5.INF.conjugate();
      complex4.ZERO.log();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.I.multiply((-1511.5639638));
      Complex complex7 = complex1.divide(complex3);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2765.7), (-2765.7));
      Complex complex1 = complex0.add((-2765.7));
      Complex complex2 = Complex.I;
      complex0.add(complex2);
      complex2.INF.hashCode();
      Complex complex3 = complex0.pow(complex2);
      complex1.sin();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex4.ONE.negate();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex1.negate();
      complex7.getField();
      Complex complex8 = complex3.sqrt();
      complex8.ONE.sinh();
      Complex complex9 = complex4.subtract(complex3);
      complex6.getReal();
      complex3.sqrt1z();
      complex4.log();
      complex9.nthRoot(1);
      complex0.tan();
      complex5.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3476.085609577292, 3476.085609577292);
      complex0.INF.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ONE.negate();
      complex3.log();
      complex2.I.nthRoot(1519);
      complex2.INF.atan();
      Complex complex4 = complex0.add(complex1);
      complex0.NaN.sin();
      Complex complex5 = complex4.NaN.createComplex(1.3195548295785448E-262, (-2343.38427));
      complex4.NaN.hashCode();
      complex5.INF.nthRoot(1);
      complex5.hashCode();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.INF.atan();
      complex8.NaN.getField();
      Complex complex9 = complex0.multiply(2336);
      complex9.I.createComplex(1519, 3476.085609577292);
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.createComplex(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex.valueOf(0.0, 2449.51628115563);
      Complex complex3 = complex0.sinh();
      complex3.ONE.atan();
      complex2.sqrt1z();
      complex3.getReal();
      complex0.isNaN();
      complex1.tan();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.5639638), (-1.2362653723769037E-8));
      Complex complex1 = complex0.INF.pow((-1.2362653723769037E-8));
      Complex complex2 = complex0.multiply((-1511.5639638));
      complex2.I.tan();
      Complex complex3 = complex0.multiply(1065);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex0.divide((-1511.5639638));
      Complex complex6 = complex1.cos();
      complex6.INF.conjugate();
      complex4.ZERO.log();
      Complex.valueOf(0.0);
      complex4.ONE.add((double) 1065);
      complex5.exp();
      complex4.atan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.equals("M[pMmU>Q^cEC,");
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex2.ZERO.negate();
      complex4.ONE.createComplex(0.0, 2.0);
      complex4.ONE.exp();
      complex2.createComplex(450.093507, 0.0);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex2.reciprocal();
      complex6.ZERO.add((-1.3277440528416646E-69));
      complex2.hashCode();
      complex5.sin();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex2.subtract(complex7);
      Complex complex9 = complex8.NaN.atan();
      complex5.multiply(1124);
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex9.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3625.6930842, 3625.6930842);
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(0.7853981633974483);
      complex2.INF.hashCode();
      Complex complex3 = complex1.ONE.pow(complex0);
      complex3.divide((-1183.3733097));
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.subtract(complex1);
      complex5.tan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = Complex.ONE;
      complex7.acos();
      complex7.NaN.nthRoot(65);
      Complex complex8 = complex6.pow(complex7);
      Complex complex9 = complex7.ONE.pow(complex4);
      Complex complex10 = complex6.divide(complex2);
      Complex complex11 = Complex.valueOf(6.283185307179586);
      complex7.ZERO.log();
      complex3.add(complex0);
      Complex complex12 = complex8.divide(585.793249656);
      complex12.INF.multiply(4594);
      Complex.valueOf(585.793249656);
      complex9.cosh();
      complex11.tanh();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cos();
      complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex0.divide(0.0);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = new Complex((-3.9793609609721186E-8));
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex0.add(complex3);
      complex5.toString();
      complex2.abs();
      Complex complex6 = complex5.NaN.divide(Double.NaN);
      complex6.INF.createComplex(Double.NaN, (-3.5966064858620067E-8));
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex8.subtract((-3.9793609609721186E-8));
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex8.INF.subtract(867.20312353);
      complex8.INF.multiply(complex10);
      complex11.INF.sqrt();
      complex1.hashCode();
      complex1.getArgument();
      Complex complex12 = complex4.tan();
      complex12.INF.hashCode();
      complex2.sin();
      complex5.atan();
      complex11.hashCode();
      complex12.pow(complex7);
      complex0.divide(867.20312353);
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1130.385726871);
      complex1.ONE.negate();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.ZERO.pow(1130.385726871);
      complex4.ONE.getArgument();
      complex3.ONE.sinh();
      Complex complex5 = complex0.pow(1130.385726871);
      complex5.INF.asin();
      Complex complex6 = complex0.exp();
      complex6.ZERO.tanh();
      complex1.hashCode();
      complex1.getField();
      Complex complex7 = Complex.valueOf(3457.933501831095);
      complex7.getField();
      complex1.multiply(17);
      complex7.divide(2.0);
      complex0.isNaN();
      complex4.acos();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = Complex.valueOf(2306.35460790724, (-3607.25604));
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.ONE.acos();
      complex0.INF.getField();
      complex0.abs();
      Complex complex4 = complex0.add(complex3);
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      complex1.INF.multiply(complex0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.multiply(2.0051635097366476E34);
      Complex complex3 = complex0.reciprocal();
      complex0.getImaginary();
      complex0.abs();
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex(6.283185307179586, 0.0);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex1.ZERO.pow(complex2);
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.ONE.divide(complex3);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.ZERO.sinh();
      complex2.createComplex(1264.24947387, 3132.7081442);
      Complex complex3 = complex0.add(complex1);
      complex3.I.toString();
      Complex complex4 = complex0.divide((-1.0));
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.I.sqrt();
      complex4.add(2.1628672925745152E-105);
      complex5.log();
      Complex complex7 = Complex.valueOf(20.0, (-1.0));
      complex4.ZERO.sqrt1z();
      Complex complex8 = complex7.acos();
      complex8.INF.asin();
      Complex complex9 = complex7.I.conjugate();
      complex9.abs();
      complex6.multiply(1010);
      complex6.pow(2.1628672925745152E-105);
      complex3.sqrt();
      complex5.tanh();
      complex1.getField();
      Complex complex10 = complex2.pow(complex7);
      complex7.ONE.cosh();
      Complex.valueOf((-1.0));
      try { 
        complex10.ZERO.nthRoot((-320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -320
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3075532478807267E-308);
      complex0.INF.hashCode();
      complex0.INF.log();
      complex0.ONE.log();
      complex0.ONE.getField();
      complex0.I.multiply(2082);
      complex0.getImaginary();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.I.negate();
      complex0.toString();
      complex0.equals("(NaN, NaN)");
      Complex complex2 = complex1.NaN.atan();
      complex2.NaN.tanh();
      Complex complex3 = complex2.sqrt1z();
      complex3.NaN.multiply(0.0);
      Complex complex4 = complex1.pow((-637.553202616));
      Complex complex5 = complex4.ZERO.asin();
      complex5.ZERO.subtract((-637.553202616));
      complex5.NaN.tanh();
      Complex.valueOf(Double.NaN);
      complex2.equals("");
      Complex complex6 = complex0.multiply(175.42672760227);
      complex2.acos();
      Complex complex7 = Complex.I;
      complex2.equals(complex7);
      complex4.nthRoot(328);
      complex1.multiply(complex7);
      complex0.add(complex6);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 3237.345774188534;
      Complex complex1 = new Complex(3237.345774188534, 3237.345774188534);
      complex1.I.subtract(3237.345774188534);
      double double1 = 20.0;
      complex0.INF.multiply(20.0);
      try { 
        complex1.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex1.ONE.getField();
      complex0.equals(complex1);
      complex1.isNaN();
      complex0.equals(complexField0);
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.multiply(complex0);
      Complex.valueOf(3253.44258086171);
      complex0.ZERO.getArgument();
      complex2.I.hashCode();
      Complex complex3 = complex1.tan();
      complex1.sqrt1z();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2719.8131003001), 2.7466520735457463E-126);
      complex0.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.divide(complex0);
      complex0.multiply(841);
      Complex complex5 = complex3.multiply(841);
      complex4.I.multiply(complex2);
      Complex complex6 = complex3.ONE.add(complex0);
      complex5.getImaginary();
      complex4.getField();
      complex4.conjugate();
      Complex complex7 = complex2.acos();
      complex2.INF.negate();
      complex7.add((-556.2605));
      complex6.multiply((-463.919));
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3648.1904), 2.0);
      Complex complex1 = complex0.sqrt1z();
      complex1.getImaginary();
      Complex complex2 = complex0.log();
      complex0.NaN.subtract((-20.0));
      complex1.INF.createComplex((-20.0), (-20.0));
      complex2.NaN.log();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4146.77412);
      complex0.getArgument();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(4146.77412, 4146.77412);
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex3.NaN.reciprocal();
      Complex complex6 = complex0.NaN.divide(1.5707963267948966);
      Complex complex7 = complex0.conjugate();
      complex7.ZERO.pow(0.0);
      complex7.INF.abs();
      complex6.ONE.abs();
      complex2.getReal();
      complex6.ONE.pow(0.3333333333333333);
      Complex complex8 = complex4.NaN.subtract(complex6);
      complex5.createComplex(4.1545899609113734E68, 2007.1543);
      complex1.INF.add(0.008750664070248604);
      complex5.toString();
      Complex complex9 = complex0.sqrt1z();
      complex1.ZERO.acos();
      complex9.add(complex1);
      complex4.hashCode();
      complex0.atan();
      complex8.getImaginary();
      Complex complex10 = Complex.valueOf(6.283185307179586, 2007.1543);
      complex2.atan();
      complex4.pow(complex1);
      complex10.reciprocal();
      complex9.cosh();
      complex8.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.getField();
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.exp();
      complex1.getImaginary();
      complex1.isInfinite();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.divide(Double.NaN);
      Complex complex4 = complex3.I.tanh();
      complex4.NaN.sin();
      complex0.toString();
      int int0 = 0;
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1113.9375899717654));
      complex0.conjugate();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ONE.sqrt1z();
      complex0.ZERO.hashCode();
      complex0.INF.abs();
      Complex complex1 = complex0.add(0.0);
      complex0.INF.getField();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.NaN.reciprocal();
      complex1.INF.cos();
      complex1.ONE.readResolve();
      Complex complex4 = complex3.ONE.createComplex(0.0, 7.393196131284108E-271);
      complex2.I.asin();
      complex1.NaN.nthRoot(1);
      complex4.multiply(3599);
      complex2.subtract((-165.2));
      complex1.getImaginary();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-722.1));
      Complex complex1 = new Complex((-722.1));
      complex0.I.pow(complex1);
      Complex complex2 = complex0.I.negate();
      complex2.tanh();
      complex0.getField();
      complex1.I.subtract((-722.1));
      int int0 = 0;
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double double0 = 607.9761041063508;
      double double1 = 2778.166;
      Complex complex0 = new Complex(607.9761041063508, 2778.166);
      Complex complex1 = null;
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex2.I.pow(607.9761041063508);
      int int0 = 17;
      complex3.ZERO.nthRoot(17);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      complex1.I.toString();
      complex0.INF.pow(complex1);
      Complex complex2 = complex1.atan();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.sqrt();
      complex0.ZERO.getField();
      complex1.INF.negate();
      Complex complex4 = complex3.ZERO.tan();
      complex3.acos();
      Complex complex5 = complex1.add((-1082.0064327392));
      Complex complex6 = complex5.tan();
      complex3.isNaN();
      complex5.getReal();
      complex6.add(complex4);
      complex0.reciprocal();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(25.6);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      complex2.subtract(complex1);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-876.53947), (-876.53947));
      complex0.multiply(complex1);
      complex0.hashCode();
      complex0.getReal();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.exp();
      complex2.ONE.asin();
      complex2.isInfinite();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.I.sinh();
      complex1.ZERO.tanh();
      Complex complex5 = complex2.ZERO.cos();
      complex5.sqrt();
      complex5.INF.hashCode();
      Complex complex6 = complex0.createComplex(661.643723307, 661.643723307);
      complex0.multiply(37);
      complex4.NaN.sin();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.INF.log();
      complex8.readResolve();
      Complex complex9 = complex7.NaN.asin();
      complex9.INF.multiply(Double.POSITIVE_INFINITY);
      complex9.ZERO.multiply((-5434));
      Complex.valueOf(0.0);
      complex7.multiply(0);
      complex6.subtract(complex2);
      complex1.sqrt1z();
      complex2.getImaginary();
      complex4.getField();
      complex1.cos();
      complex3.multiply(1.0317435264587402);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(2633.436912526003);
      complex0.getArgument();
      complex0.getArgument();
      complex0.toString();
      complex0.ONE.getArgument();
      complex0.I.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt();
      complex1.ONE.subtract(0.0);
      Complex complex3 = complex0.log();
      complex3.abs();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.sqrt();
      complex1.NaN.pow(0.0);
      complex2.pow(0.0);
      complex1.log();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      double double1 = 0.0;
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.4564130306243896, (-954.5396130911217));
      Complex complex3 = complex0.I.reciprocal();
      complex3.ZERO.hashCode();
      complex2.ZERO.divide(1.4564130306243896);
      complex2.I.getField();
      complex0.abs();
      Complex complex4 = complex1.sinh();
      complex4.INF.acos();
      complex1.reciprocal();
      Complex complex5 = complex0.NaN.sin();
      complex5.INF.tan();
      Complex complex6 = complex2.cosh();
      complex6.I.toString();
      complex3.getImaginary();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ZERO.negate();
      complex2.INF.getField();
      complex0.isNaN();
      Complex complex4 = complex0.asin();
      complex4.INF.sin();
      complex2.multiply(complex3);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = Complex.valueOf(1677.2144819703, 1677.2144819703);
      complex2.ZERO.getArgument();
      complex2.I.getArgument();
      complex1.INF.abs();
      complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.NaN.sin();
      complex3.NaN.cos();
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = complex0.NaN.multiply(1694);
      complex6.NaN.getArgument();
      complex0.abs();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex6.conjugate();
      complex4.cosh();
      complex7.negate();
      complex8.multiply(complex2);
      complex4.createComplex(Double.NaN, 1694);
      complex4.divide(2.5887417793273926);
      Complex complex9 = complex7.subtract(2.5887417793273926);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1769.53));
      complex3.reciprocal();
      Complex complex11 = complex5.multiply(590);
      complex11.INF.toString();
      complex9.I.negate();
      complex1.sin();
      complex8.subtract(complex9);
      complex3.tanh();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract((-834.399));
      complex1.INF.toString();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.createComplex(4444.55071421017, (-1241.0425708569));
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex2.add(complex0);
      complex5.INF.multiply(244);
      Complex complex6 = complex5.INF.add(complex3);
      complex5.getReal();
      complex5.multiply(complex0);
      complex6.toString();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-229.0));
      Complex complex2 = complex1.I.createComplex(0.0, 453.61153013203);
      Complex complex3 = complex0.createComplex(1972.1774, 2.133604049682617);
      Complex complex4 = complex3.ZERO.divide(complex0);
      complex0.I.abs();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ZERO.cosh();
      complex3.I.readResolve();
      Complex complex7 = complex6.ZERO.reciprocal();
      complex7.NaN.atan();
      complex5.ONE.multiply(0);
      complex2.ZERO.multiply(complex1);
      Complex complex8 = complex5.INF.cosh();
      complex8.NaN.abs();
      Complex complex9 = complex2.pow(1972.1774);
      complex9.ZERO.readResolve();
      complex5.reciprocal();
      complex2.exp();
      Complex complex10 = complex1.sqrt();
      complex10.I.cosh();
      complex10.INF.pow(1.0);
      complex3.createComplex(1528.88, (-636.8303615539));
      complex0.reciprocal();
      complex9.subtract(complex6);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      complex0.hashCode();
      Complex complex2 = complex0.sinh();
      complex0.ZERO.readResolve();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.ONE.pow((-3340.36));
      complex2.readResolve();
      complex4.getReal();
      complex1.subtract((-3340.36));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.conjugate();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.tan();
      complex0.pow(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ONE.multiply(complex0);
      complex4.INF.acos();
      complex1.ONE.divide(complex3);
      complex0.createComplex((-1000.3626), 0.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex2.add(complex5);
      complex7.ZERO.acos();
      complex7.sinh();
      complex6.sqrt();
      complex1.isNaN();
      complex0.sinh();
      complex6.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.INF.divide(complex4);
      double double0 = complex5.I.abs();
      assertEquals(1.0, double0, 0.01);
      
      List<Complex> list0 = complex2.INF.nthRoot(380);
      assertFalse(list0.contains(complex4));
      
      List<Complex> list1 = complex1.ONE.nthRoot(1457);
      assertTrue(list1.contains(complex4));
      assertEquals(1457, list1.size());
      
      Complex complex6 = complex1.INF.sqrt();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex7.ZERO.conjugate();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex9.I.sin();
      assertEquals(1.1752011936438014, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex10.subtract((double) 1457);
      Complex complex13 = complex9.divide(complex12);
      Complex complex14 = complex9.asin();
      Complex complex15 = complex13.multiply((double) 380);
      complex15.INF.getArgument();
      complex14.getImaginary();
      complex5.equals(complex6);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      complex1.divide(0.0);
      Complex complex16 = complex13.INF.sqrt();
      Complex complex17 = complex14.cosh();
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(1.0, complex17.getReal(), 0.01);
      
      Complex complex18 = complex15.multiply(380);
      boolean boolean0 = complex16.equals(complex15);
      assertSame(complex13, complex18);
      assertSame(complex0, complex8);
      assertSame(complex12, complex3);
      assertTrue(boolean0);
  }
}
