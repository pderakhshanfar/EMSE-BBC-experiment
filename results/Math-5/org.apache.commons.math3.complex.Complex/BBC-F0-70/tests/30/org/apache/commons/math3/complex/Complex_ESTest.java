/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:12:31 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-395), Double.POSITIVE_INFINITY);
      complex1.multiply(67);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
      Complex complex1 = Complex.valueOf(1.6400070480930697E-114, Double.POSITIVE_INFINITY);
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.ZERO;
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-36.04055311484122), 613.286618196);
      Complex.valueOf(20.0);
      Complex complex1 = Complex.valueOf((-20.0), 0.0014738385511417632);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-392.52));
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.232396537727705, Double.POSITIVE_INFINITY);
      complex0.log();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex((-1.0), (-3.4893601256685762E283));
      complex2.hashCode();
      Complex.valueOf((-3.4893601256685762E283), 257.781697326535);
      complex1.pow((-3.4893601256685762E283));
      Complex complex3 = Complex.INF;
      complex3.pow((-3.4893601256685762E283));
      complex1.atan();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(513.362133730777, 513.362133730777);
      complex1.ONE.nthRoot(7);
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.log();
      complex4.ZERO.sin();
      Complex complex5 = complex0.tan();
      complex3.ONE.abs();
      complex0.readResolve();
      complex0.tan();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex1.createComplex(1139.266004096, (-102470.94863375998));
      complex9.NaN.sinh();
      complex8.ZERO.acos();
      complex1.pow(complex2);
      complex8.pow(complex6);
      complex5.multiply(0.6286087036132812);
      Complex.valueOf(513.362133730777);
      Complex complex10 = complex2.multiply(7);
      complex10.NaN.hashCode();
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1919.72837826071, 1.5609779357910156);
      Complex complex1 = complex0.exp();
      complex1.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.subtract(70.3655);
      complex1.cos();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = Complex.valueOf((-2430.6556483));
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex2.sqrt();
      complex0.isNaN();
      Complex complex8 = Complex.ZERO;
      complex3.multiply(81);
      complex6.sin();
      complex0.multiply(complex6);
      Complex complex9 = complex7.subtract(0.0);
      complex1.ONE.cos();
      complex7.nthRoot(17);
      complex9.add(complex2);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.NaN;
      complex0.equals(complex2);
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      complex3.exp();
      complex4.hashCode();
      complex4.sin();
      complex1.subtract(0.0);
      Complex complex5 = complex2.cos();
      Complex complex6 = Complex.I;
      complex2.add(complex6);
      Complex complex7 = Complex.valueOf(1.8928981707279692E271);
      complex7.multiply(complex2);
      complex5.ZERO.divide(Double.NaN);
      Complex complex8 = complex5.sqrt();
      complex8.isNaN();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.multiply(complex6);
      Complex complex11 = complex10.multiply(423);
      complex7.sin();
      Complex complex12 = Complex.ONE;
      complex11.multiply(complex12);
      complex3.subtract(Double.NaN);
      complex4.cosh();
      complex6.divide(6644.643312943498);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex0.divide(2987.8720170777897);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply((-1425));
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(905);
      Complex complex3 = complex1.pow(complex2);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 1060.276026);
      complex0.nthRoot(249);
      Complex complex1 = new Complex(1060.276026);
      complex0.pow(complex1);
      complex0.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sinh();
      complex2.NaN.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 1.6400070480930697E-114);
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex3.asin();
      complex1.tanh();
      Complex complex6 = new Complex((-438.5008774008469));
      Complex complex7 = complex0.exp();
      complex0.hashCode();
      complex7.sin();
      complex6.subtract((-2051.563585393));
      complex1.cos();
      complex5.add(complex2);
      Complex complex8 = Complex.valueOf((-2051.563585393));
      complex6.multiply(complex4);
      Complex complex9 = complex5.sqrt();
      complex9.ZERO.multiply((-738.0));
      complex8.isNaN();
      complex3.multiply(complex1);
      Complex complex10 = new Complex(1.244950238958056E-7, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5555.928700273145));
      Complex complex1 = Complex.valueOf((-5555.928700273145), (-5555.928700273145));
      Complex complex2 = complex0.exp();
      complex2.INF.sinh();
      complex1.getArgument();
      complex0.pow((-1748.408873484469));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.log();
      complex4.I.acos();
      try { 
        complex3.nthRoot((-168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -168
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.multiply(complex1);
      complex0.pow(18.174211570297295);
      complex2.multiply(Double.NaN);
      Complex complex3 = complex2.log();
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(980.5, 8.881784197001252E-16);
      Complex complex1 = complex0.pow(20.0);
      complex1.asin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-2383.01536), 0.0);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      complex1.getArgument();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.ONE.getField();
      Complex complex1 = complex0.ONE.divide(4997.0703);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = Complex.valueOf(20.0, 850.5934126);
      Complex complex4 = complex0.I.tan();
      Complex complex5 = Complex.valueOf(4997.0703, 20.0);
      Complex complex6 = complex0.createComplex(20.0, 20.0);
      complex6.ZERO.pow((-1362.9684197054));
      Complex complex7 = complex6.INF.subtract(1364.074026919);
      Complex complex8 = complex7.ZERO.multiply(1364.074026919);
      complex8.INF.hashCode();
      complex8.divide(complex0);
      complex6.INF.cos();
      complex7.add(1364.074026919);
      complex6.ZERO.getArgument();
      Complex complex9 = complex1.sqrt1z();
      complex3.ZERO.toString();
      complex9.INF.toString();
      complex1.toString();
      Complex complex10 = complex3.add(1364.074026919);
      complex10.ONE.abs();
      Complex complex11 = complex5.sinh();
      complex11.I.negate();
      Complex complex12 = complex4.cosh();
      complex12.tan();
      Complex complex13 = complex2.negate();
      complex13.ONE.hashCode();
      complex11.abs();
      // Undeclared exception!
      complex12.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.pow(complex1);
      complex1.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.subtract(complex1);
      complex3.reciprocal();
      complex0.multiply(37);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sin();
      complex0.cosh();
      Complex complex3 = complex0.divide(complex2);
      complex3.tan();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.asin();
      complex0.acos();
      complex5.reciprocal();
      complex1.readResolve();
      Complex complex6 = new Complex(0.0013739240147856435);
      Complex complex7 = Complex.NaN;
      complex4.equals(complex7);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.negate();
      Complex.valueOf(1.0, 0.0778703862327451);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = complex2.multiply(1.0);
      Complex.valueOf(Double.NaN);
      Complex complex7 = complex4.divide(complex3);
      Complex complex8 = complex7.negate();
      complex2.multiply(37);
      Complex complex9 = complex6.tan();
      complex4.getReal();
      complex8.add(complex9);
      complex5.pow((-1114.053963653053));
      complex5.pow(Double.NaN);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), (-2261.22913954));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.ZERO;
      complex1.multiply(4.2900691128608466E-8);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.valueOf((-2261.22913954), (-2261.22913954));
      Complex.valueOf((-2261.22913954));
      Complex complex6 = complex1.multiply(2390);
      complex3.add(complex5);
      Complex complex7 = complex6.multiply(complex3);
      complex1.multiply(4.2900691128608466E-8);
      Complex complex8 = Complex.valueOf((-3859.132575731936));
      complex7.divide(complex4);
      complex5.negate();
      complex5.tan();
      complex8.getReal();
      Object object0 = new Object();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = complex0.multiply(20.0);
      Complex complex2 = new Complex((-20.0), 0.0);
      complex1.multiply(complex2);
      Complex complex3 = Complex.NaN;
      complex3.sin();
      complex0.conjugate();
      Complex complex4 = Complex.valueOf((-652.38));
      complex4.multiply((-3788));
      complex2.add(complex0);
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide((-1981.569137762337));
      Complex complex4 = Complex.valueOf((-1981.569137762337), 174.32295868);
      complex4.toString();
      complex2.I.log();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = Complex.ZERO;
      complex6.subtract((-5.759582672039005E-10));
      Complex complex7 = complex2.reciprocal();
      complex1.asin();
      complex6.acos();
      complex3.reciprocal();
      Object object0 = complex7.readResolve();
      Complex complex8 = Complex.INF;
      complex5.equals(object0);
      complex1.asin();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.exp();
      Complex complex1 = complex0.acos();
      complex1.nthRoot(1317);
      Complex complex2 = complex0.I.divide((-1.7352889862399E13));
      complex2.ONE.toString();
      Complex complex3 = complex1.add(complex0);
      complex0.subtract((-1143.547554868133));
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.valueOf(384.7142724669, (double) 1317);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = complex2.multiply((double) 1317);
      Complex.valueOf(Double.NaN);
      complex8.divide(complex4);
      Complex complex9 = complex2.negate();
      complex9.INF.multiply(1317);
      complex1.tan();
      complex2.getReal();
      complex3.add(complex7);
      complex8.pow((-1143.547554868133));
      complex1.pow((-3150.0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = Complex.ZERO;
      complex3.multiply(0.8414709848078964);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex0.conjugate();
      Complex.valueOf((-1.1843870433971731E201));
      complex2.multiply(2390);
      Complex complex7 = complex4.add(complex0);
      complex3.multiply(complex7);
      complex3.multiply(20.0);
      complex6.acos();
      complex5.reciprocal();
      complex0.readResolve();
      Complex complex8 = new Complex(2043.3061559393);
      complex2.equals(complex3);
      complex3.asin();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      complex0.nthRoot(798);
      Complex complex1 = complex0.divide((-4.699152670372743E-8));
      complex0.toString();
      complex1.add(complex0);
      Complex complex2 = complex1.subtract((-4.699152670372743E-8));
      Complex complex3 = Complex.INF;
      complex2.asin();
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex5.reciprocal();
      complex6.readResolve();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf((-9.530545662611411E-8), (-4.699152670372743E-8));
      complex4.equals(complex8);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.log();
      complex3.INF.getField();
      complex2.atan();
      Complex complex4 = complex0.cos();
      complex4.NaN.subtract(0.0);
      complex4.ONE.cosh();
      complex4.isInfinite();
      complex0.cosh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.divide(complex5);
      complex5.sinh();
      complex6.sqrt1z();
      complex5.ZERO.conjugate();
      complex1.add(0.0);
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.conjugate();
      Complex.valueOf(20.0);
      complex0.multiply((-441));
      Complex complex4 = complex0.add(complex2);
      complex0.multiply(complex1);
      complex0.multiply((double) 2390);
      Complex.valueOf((-518.6));
      Complex complex5 = complex3.divide(complex0);
      complex5.INF.toString();
      complex5.NaN.tan();
      complex0.negate();
      Complex complex6 = complex2.tan();
      complex6.getReal();
      complex4.add(complex0);
      complex2.pow((-1.1843870433971731E201));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.exp();
      Complex complex1 = complex0.acos();
      complex1.nthRoot(1317);
      Complex complex2 = complex0.I.divide((-1.7352889862399E13));
      complex2.ONE.toString();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.subtract((-1143.547554868133));
      complex1.reciprocal();
      Complex complex5 = complex3.asin();
      complex5.INF.acos();
      complex3.reciprocal();
      complex1.readResolve();
      Complex complex6 = new Complex(1.589678872195875E-8);
      complex2.equals(complex6);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4165680.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      complex2.NaN.getField();
      complex1.INF.abs();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.tanh();
      complex4.ONE.multiply(1332);
      Complex complex5 = Complex.valueOf((-4165680.0));
      complex3.subtract(complex5);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex4.divide(complex0);
      complex3.abs();
      complex6.toString();
      complex7.toString();
      complex1.divide(complex5);
      complex1.reciprocal();
      Complex complex8 = new Complex(1332, (-4165680.0));
      complex5.multiply(complex8);
      Complex complex9 = complex1.cosh();
      complex9.negate();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.699152670372743E-8));
      complex0.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      complex0.getField();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.subtract(2668.2);
      complex1.cosh();
      complex3.isInfinite();
      Complex complex6 = new Complex(98.6958, (-4.699152670372743E-8));
      Complex complex7 = complex6.cosh();
      Complex complex8 = Complex.INF;
      complex8.divide(complex2);
      complex7.sinh();
      complex5.sqrt1z();
      complex6.conjugate();
      complex7.add(98.6958);
      complex0.add(complex1);
      complex6.pow(2668.2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.7615941559557649, (-2.291749683541979E-9));
      Complex complex1 = Complex.ZERO;
      complex0.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(0.7615941559557649);
      Complex complex4 = complex2.multiply(complex3);
      complex2.sin();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.valueOf((-1.1843870433971731E201));
      Complex complex7 = complex5.multiply(1076);
      complex3.add(complex7);
      complex0.multiply(complex6);
      complex4.multiply(0.0);
      Complex complex8 = Complex.valueOf(1.0);
      complex6.divide(complex3);
      Complex complex9 = complex6.negate();
      complex7.tan();
      complex3.getReal();
      complex8.add(complex7);
      complex9.pow(0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.nthRoot(798);
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      complex1.hashCode();
      Complex complex2 = complex1.createComplex(1.3589033107846643E-196, Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
      complex2.acos();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = complex1.add(complex0);
      complex2.I.subtract(2629.0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.divide((-1688.8005));
      Complex complex6 = Complex.valueOf((-1688.8005));
      Complex complex7 = complex3.atan();
      complex6.abs();
      complex0.cosh();
      Complex complex8 = complex0.multiply(1370);
      Complex complex9 = Complex.NaN;
      complex9.readResolve();
      complex3.createComplex(6563.7061, Double.NaN);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.reciprocal();
      complex8.isInfinite();
      complex11.isNaN();
      complex4.reciprocal();
      complex7.subtract(complex4);
      complex0.isInfinite();
      complex5.add(complex10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sin();
      complex2.log();
      complex1.getField();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.cos();
      complex4.subtract(20.0);
      Complex complex5 = complex3.cosh();
      complex4.atan();
      Complex complex6 = Complex.ONE;
      complex6.isInfinite();
      Complex complex7 = complex5.cosh();
      Complex complex8 = Complex.INF;
      complex2.divide(complex5);
      complex7.sinh();
      complex2.sqrt1z();
      complex5.conjugate();
      complex2.add((-4.699152670372743E-8));
      complex0.add(complex1);
      complex4.pow((-189.773));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.log();
      complex2.ONE.pow(complex1);
      complex2.INF.getField();
      complex1.atan();
      Complex complex3 = complex0.cos();
      complex3.NaN.subtract(2.3101551448625578E-152);
      Complex complex4 = complex3.ONE.cosh();
      complex4.INF.negate();
      complex3.isInfinite();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex6.sqrt1z();
      complex5.ZERO.conjugate();
      complex8.ZERO.multiply(complex7);
      complex8.cos();
      complex1.isNaN();
      complex6.getField();
      complex7.isInfinite();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-16.93016941658331));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.log();
      complex2.INF.getField();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.NaN.subtract((-16.93016941658331));
      Complex complex6 = Complex.valueOf((-2325.90551800581));
      Complex complex7 = complex4.pow((-16.93016941658331));
      complex0.abs();
      complex7.getImaginary();
      Complex complex8 = complex1.subtract((-2325.90551800581));
      complex3.conjugate();
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.INF;
      Complex complex11 = complex5.multiply(complex2);
      Complex complex12 = Complex.INF;
      complex12.tanh();
      Complex complex13 = complex3.pow(0.495672345161438);
      complex13.add(complex8);
      Complex complex14 = Complex.valueOf(16.93016941658331);
      complex8.equals(complex14);
      complex10.conjugate();
      complex11.acos();
      Complex complex15 = Complex.valueOf(1.721498359853023E7, 3.4223342273948817E-9);
      complex15.sinh();
      Complex complex16 = new Complex(197.3941330683581, (-1.557407724654902));
      complex6.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3101551448625578E-152);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.multiply(2.3101551448625578E-152);
      Complex complex5 = complex4.pow(1.1752011936438014);
      Complex complex6 = complex4.exp();
      complex0.sqrt1z();
      Complex complex7 = Complex.NaN;
      complex5.NaN.subtract(complex7);
      Complex complex8 = new Complex(20.0, (-856.789985682116));
      Complex complex9 = complex8.pow(complex5);
      Complex complex10 = Complex.valueOf((-856.789985682116), 576.485);
      Complex complex11 = Complex.valueOf((-1.589678872195875E-8));
      complex11.pow(197.3941330683581);
      complex11.abs();
      complex5.getImaginary();
      complex9.subtract(5.300110311368204E107);
      complex6.conjugate();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex6.sinh();
      complex3.tan();
      complex10.divide(1576.161829398293);
      complex1.multiply(0);
      complex12.getArgument();
      complex13.tanh();
      Complex.valueOf((-1.557407724654902), 1.1752011936438014);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.NaN;
      complex0.equals(complex2);
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      complex3.exp();
      complex4.hashCode();
      complex4.sin();
      complex1.subtract(0.0);
      Complex complex5 = complex2.cos();
      Complex complex6 = Complex.I;
      complex2.add(complex6);
      Complex complex7 = Complex.valueOf(1.8928981707279692E271);
      complex7.multiply(complex2);
      Complex complex8 = complex5.sqrt();
      complex8.isNaN();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.multiply(complex6);
      Complex complex11 = complex10.multiply(423);
      complex7.sin();
      Complex complex12 = Complex.ONE;
      complex11.multiply(complex12);
      complex3.subtract(Double.NaN);
      complex4.cosh();
      complex6.divide(6644.643312943498);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sinh();
      complex2.NaN.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 1.6400070480930697E-114);
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex3.asin();
      complex1.tanh();
      Complex complex6 = Complex.valueOf((-1.0), (-438.5008774008469));
      Complex complex7 = complex0.exp();
      complex0.hashCode();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex6.subtract((-2051.563585393));
      complex8.cos();
      complex5.add(complex2);
      Complex complex10 = Complex.valueOf((-2051.563585393));
      Complex complex11 = complex6.multiply(complex4);
      Complex complex12 = complex5.sqrt();
      complex10.isNaN();
      complex10.multiply(complex5);
      Complex complex13 = complex6.multiply(81);
      complex13.sin();
      complex11.isInfinite();
      complex1.isNaN();
      complex13.reciprocal();
      complex9.subtract(complex13);
      complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 1590.016742;
      Complex complex0 = Complex.valueOf(1590.016742, 1590.016742);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.INF.multiply(1590.016742);
      complex2.pow(complex1);
      complex1.I.toString();
      complex2.I.exp();
      try { 
        complex2.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.divide(-0.0);
      complex3.ZERO.abs();
      Complex complex4 = complex3.I.divide(complex2);
      complex4.ZERO.toString();
      complex2.readResolve();
      complex1.I.cosh();
      Complex complex5 = complex1.INF.sqrt1z();
      complex5.I.pow((-1401.67553));
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex7.NaN.cosh();
      complex6.getField();
      Complex complex9 = complex0.ZERO.tan();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex6.reciprocal();
      complex2.isInfinite();
      complex9.INF.multiply((-1));
      complex11.log();
      complex9.tan();
      complex0.INF.tan();
      Complex complex12 = complex7.cos();
      complex8.multiply((-1));
      Complex complex13 = complex6.conjugate();
      complex13.I.reciprocal();
      complex12.acos();
      complex10.sqrt1z();
      Complex.valueOf(2414.353628, 0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.414213562373095));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.NaN;
      complex3.ZERO.getField();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.createComplex(1.5707963267948966, (-2.414213562373095));
      Complex complex6 = Complex.valueOf(1.6058173179626465, 846.1539129741);
      Complex complex7 = complex6.I.cosh();
      complex5.getField();
      complex4.acos();
      complex1.divide(complex2);
      Complex complex8 = Complex.valueOf(376.3665335488867, (-1227.0));
      Complex complex9 = complex8.add(complex0);
      complex8.ZERO.tanh();
      complex9.NaN.add(376.3665335488867);
      complex8.add(complex0);
      complex8.exp();
      Complex.valueOf((-907.87187), 376.3665335488867);
      complex1.log();
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2041.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.conjugate();
      complex2.getField();
      Complex complex4 = Complex.valueOf(0.5295937061309814);
      Complex complex5 = Complex.ONE;
      complex5.getArgument();
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex6.subtract(complex4);
      complex7.getArgument();
      complex4.cosh();
      complex5.toString();
      complex5.readResolve();
      Complex complex9 = complex8.cos();
      complex1.sqrt();
      complex3.cosh();
      complex6.reciprocal();
      complex9.nthRoot(1291);
      complex6.sqrt1z();
      complex8.pow(complex1);
      complex8.subtract(2.770970558184228E-8);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sinh();
      complex2.NaN.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 1.6400070480930697E-114);
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex3.asin();
      complex1.tanh();
      Complex complex6 = Complex.valueOf((-1.0), (-438.5008774008469));
      Complex complex7 = complex0.exp();
      complex0.hashCode();
      complex7.sin();
      complex6.subtract((-2051.563585393));
      complex1.cos();
      complex5.add(complex2);
      Complex complex8 = Complex.valueOf((-2051.563585393));
      Complex complex9 = complex6.multiply(complex4);
      complex5.sqrt();
      complex8.isNaN();
      complex8.multiply(complex5);
      Complex complex10 = complex6.multiply(81);
      complex10.sin();
      complex5.multiply(complex7);
      complex3.subtract(1.6400070480930697E-114);
      complex4.cosh();
      complex9.atan();
      complex9.divide(639.5374638817315);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0844638420493122E46, 828.0537604997);
      Complex complex2 = complex1.subtract(828.0537604997);
      Complex complex3 = complex2.pow(828.0537604997);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.conjugate();
      complex3.getField();
      Complex.valueOf(1.0844638420493122E46);
      complex3.getArgument();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex6.divide(2401.675508);
      complex3.sinh();
      complex6.subtract(complex7);
      complex5.getArgument();
      complex2.cosh();
      complex2.toString();
      complex6.readResolve();
      Complex complex8 = complex3.cos();
      complex8.ONE.conjugate();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex2.cosh();
      complex3.reciprocal();
      complex9.nthRoot(1376);
      Complex complex11 = Complex.ZERO;
      complex11.sqrt1z();
      complex10.pow(complex3);
      complex7.subtract(20.0);
      complex4.getReal();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2105.959, 2105.959);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.createComplex(2105.959, 2105.959);
      Complex complex6 = Complex.valueOf(2105.959, 2105.959);
      complex5.getField();
      complex6.ZERO.negate();
      complex4.atan();
      Complex complex7 = complex5.cos();
      complex3.subtract(2105.959);
      complex6.cosh();
      Complex complex8 = Complex.I;
      complex8.isInfinite();
      complex8.cosh();
      Complex complex9 = Complex.INF;
      complex1.divide(complex7);
      complex6.sinh();
      Complex complex10 = complex0.sqrt1z();
      complex10.conjugate();
      Complex.valueOf(2105.959);
      complex0.cos();
      complex1.isNaN();
      Complex complex11 = Complex.ZERO;
      complex11.getField();
      complex2.isInfinite();
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex0.tan();
      complex5.NaN.multiply(complex4);
      Complex complex6 = complex5.negate();
      complex1.INF.abs();
      complex2.sqrt1z();
      complex6.pow(complex3);
      complex4.subtract(1435.2616777080657);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.0542365522414836E-65, 7.0542365522414836E-65);
      Complex complex1 = complex0.sin();
      complex0.isInfinite();
      complex1.isNaN();
      Complex complex2 = complex0.INF.subtract(2393.6812545123);
      Complex complex3 = complex1.pow(7.0542365522414836E-65);
      Complex complex4 = complex1.INF.multiply(complex3);
      complex4.ONE.conjugate();
      complex3.getField();
      Complex complex5 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex6 = complex2.INF.divide(2393.6812545123);
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex7.subtract(complex5);
      complex8.INF.getArgument();
      Complex complex9 = complex1.cosh();
      complex9.I.toString();
      Complex complex10 = complex6.reciprocal();
      Complex.valueOf((-856.6340072), 2393.6812545123);
      Complex complex11 = new Complex((-856.6340072), (-856.6340072));
      complex11.sinh();
      complex10.tan();
      Complex complex12 = Complex.I;
      complex12.divide(2025.650383309);
      complex2.multiply((-1115));
      complex11.getArgument();
      complex1.tanh();
      Complex.valueOf(2025.650383309, Double.POSITIVE_INFINITY);
      complex11.createComplex(2.0, 1296.69496088);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.305870564227991E-8);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sinh();
      complex2.NaN.hashCode();
      Complex complex3 = complex0.ONE.add(4.305870564227991E-8);
      Complex complex4 = Complex.I;
      complex4.getField();
      Complex complex5 = Complex.INF;
      Complex.valueOf(4.305870564227991E-8);
      Complex complex6 = Complex.NaN;
      complex3.cosh();
      complex0.divide(complex6);
      complex0.tan();
      Complex complex7 = new Complex(4.305870564227991E-8);
      Complex complex8 = Complex.ZERO;
      complex8.negate();
      complex8.abs();
      complex6.isNaN();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = Complex.ZERO;
      complex3.multiply(0.8414709848078964);
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.multiply(complex2);
      complex1.sin();
      Complex complex6 = complex0.conjugate();
      Complex.valueOf((-1.1843870433971731E201));
      complex2.multiply(2390);
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex3.multiply(complex7);
      Complex complex9 = complex4.multiply(20.0);
      Complex complex10 = Complex.NaN;
      complex8.divide(complex2);
      complex2.negate();
      complex6.tan();
      complex9.getReal();
      complex6.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.0542365522414836E-65, 7.0542365522414836E-65);
      complex0.isInfinite();
      complex0.isNaN();
      Complex complex1 = complex0.INF.subtract(2393.6812545123);
      Complex complex2 = complex0.pow(7.0542365522414836E-65);
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex3.ONE.conjugate();
      complex2.getField();
      Complex complex5 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex6 = complex1.INF.divide(2393.6812545123);
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex7.subtract(complex5);
      complex8.INF.getArgument();
      Complex complex9 = complex0.cosh();
      complex9.I.toString();
      complex2.readResolve();
      Complex complex10 = complex6.subtract((-960.0));
      complex1.conjugate();
      Complex complex11 = Complex.INF;
      complex4.multiply(complex6);
      Complex complex12 = complex8.tanh();
      complex10.pow(7.0542365522414836E-65);
      complex8.equals(complex1);
      Complex complex13 = complex12.conjugate();
      complex13.acos();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(2032.0, 1274.564846187024);
      complex0.ONE.getArgument();
      complex0.I.log();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.multiply(6.362563919556132E164);
      complex3.pow(0.0);
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex0.I.pow(complex3);
      complex0.sinh();
      Complex complex6 = Complex.valueOf(576.485, 6.362563919556132E164);
      Complex complex7 = complex6.pow(1274.564846187024);
      complex7.ONE.abs();
      complex3.getImaginary();
      complex6.cos();
      complex5.sqrt();
      complex6.cosh();
      complex5.reciprocal();
      complex4.nthRoot(240);
      complex1.sqrt1z();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.pow(complex6);
      complex3.subtract(1.0);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3101551448625578E-152);
      complex0.log();
      Complex complex1 = complex0.negate();
      complex0.cosh();
      Complex complex2 = complex1.multiply(2.3101551448625578E-152);
      Complex complex3 = complex2.pow(1.1752011936438014);
      Complex complex4 = complex2.exp();
      complex0.sqrt1z();
      Complex complex5 = new Complex(20.0, (-856.789985682116));
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = Complex.valueOf((-856.789985682116), 576.485);
      Complex complex8 = Complex.valueOf((-1.589678872195875E-8));
      complex8.pow(197.3941330683581);
      complex8.abs();
      complex3.getImaginary();
      Complex complex9 = complex6.subtract(5.300110311368204E107);
      complex4.conjugate();
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.INF;
      complex3.multiply(complex11);
      Complex complex12 = complex0.tanh();
      complex9.pow(1.589678872195875E-8);
      complex0.equals(complex12);
      complex6.conjugate();
      complex3.acos();
      complex7.sinh();
      complex6.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.readResolve();
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.NaN.divide(6563.7061);
      Complex complex5 = Complex.valueOf(0.0);
      complex2.I.atan();
      complex2.abs();
      complex5.ONE.cosh();
      Complex complex6 = complex5.multiply(1370);
      Complex complex7 = (Complex)complex6.I.readResolve();
      complex7.cosh();
      complex6.createComplex((-1143.547554868133), (-1143.547554868133));
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex5.negate();
      complex6.getField();
      complex4.cos();
      complex5.add(Double.NaN);
      Complex complex10 = complex8.sqrt1z();
      complex10.multiply(0.0);
      complex1.getArgument();
      complex9.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-4.699152670372743E-8), 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sin();
      complex2.ONE.cosh();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex0.tan();
      complex4.NaN.multiply(complex3);
      complex4.negate();
      complex1.INF.abs();
      complex1.isNaN();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex0.divide(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.log();
      complex4.INF.atan();
      Complex complex6 = complex0.exp();
      complex6.NaN.sin();
      complex3.getReal();
      complex4.equals(complex0);
      complex1.nthRoot(1);
      complex5.pow(complex1);
      Complex.valueOf(0.0);
      complex1.subtract(4250.005733821);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2032.0, 1274.564846187024);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.I.log();
      complex0.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.multiply(6.362563919556132E164);
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex3.exp();
      complex5.NaN.sqrt1z();
      complex0.I.pow(complex3);
      Complex complex6 = Complex.valueOf(576.485, 6.362563919556132E164);
      Complex complex7 = complex6.pow(1274.564846187024);
      complex7.ONE.abs();
      complex3.getImaginary();
      complex6.subtract((-1937.582676248225));
      Complex complex8 = complex4.conjugate();
      Complex complex9 = Complex.INF;
      complex8.NaN.multiply(complex9);
      Complex complex10 = complex1.tanh();
      complex10.ZERO.pow(0.0);
      complex0.equals(complex10);
      complex1.conjugate();
      complex8.acos();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2354.473126309409);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.add((-9.892260062323546E-8));
      Complex complex3 = complex0.I.divide((-2385.2));
      Complex complex4 = complex3.ONE.asin();
      complex4.ZERO.multiply(complex0);
      complex3.ZERO.readResolve();
      complex0.hashCode();
      complex2.ZERO.pow(complex1);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.add(complex1);
      Complex.valueOf(595.2714903389565, 289.3924);
      Complex complex7 = complex2.multiply(1);
      complex6.NaN.add(2354.473126309409);
      Complex complex8 = complex7.NaN.divide(complex6);
      Complex complex9 = complex6.multiply(complex1);
      complex9.INF.add(complex8);
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(98.6958, 98.6958);
      Complex complex1 = complex0.INF.cos();
      complex1.NaN.pow(complex0);
      Complex complex2 = complex0.acos();
      complex1.NaN.toString();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.I.sqrt();
      complex2.INF.hashCode();
      complex1.hashCode();
      Complex complex4 = complex2.createComplex(98.6958, 1.3589033107846643E-196);
      complex4.NaN.sqrt1z();
      complex0.acos();
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.readResolve();
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.NaN.divide(6563.7061);
      Complex complex4 = Complex.valueOf(0.0);
      complex2.I.atan();
      complex2.abs();
      complex4.ONE.cosh();
      Complex complex5 = complex4.multiply(1370);
      complex5.I.readResolve();
      complex5.createComplex((-1143.547554868133), (-1143.547554868133));
      complex4.reciprocal();
      try { 
        complex2.nthRoot((-1600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,600
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.INF.subtract(24.182592751423);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.NaN.acos();
      complex0.NaN.multiply(1);
      Complex complex5 = complex3.divide(0.0);
      complex5.ONE.multiply((-41));
      complex0.readResolve();
      complex4.getReal();
      Complex complex6 = complex4.negate();
      complex6.asin();
      Complex complex7 = complex4.add(24.182592751423);
      complex7.ONE.divide(complex2);
      complex4.conjugate();
      Complex complex8 = Complex.I;
      complex3.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8374862670898438, 2.2978757040142953E-60);
      complex0.nthRoot(275);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.subtract(complex1);
      complex4.ONE.toString();
      complex1.I.conjugate();
      complex0.getField();
      complex2.I.abs();
      complex4.sin();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sinh();
      complex2.NaN.hashCode();
      Complex complex3 = complex0.ONE.add((-1.0));
      Complex complex4 = complex1.I.sqrt();
      complex4.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = Complex.NaN;
      complex5.NaN.multiply(0.0);
      complex6.ONE.multiply(complex7);
      complex0.I.multiply(complex5);
      complex1.NaN.sin();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = Complex.valueOf((-1.0));
      Complex complex10 = complex9.ONE.multiply(2390);
      Complex complex11 = complex10.ZERO.add(complex8);
      Complex complex12 = complex9.multiply(complex1);
      complex12.multiply((-1747.801969125051));
      Complex complex13 = Complex.NaN;
      complex12.I.divide(complex13);
      complex8.negate();
      complex11.tan();
      complex13.getReal();
      complex3.hashCode();
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 9.253781621373885E29);
      Complex complex1 = complex0.ONE.multiply(7);
      complex0.reciprocal();
      complex1.ONE.sin();
      complex0.ONE.createComplex(9.253781621373885E29, 7);
      int int0 = 0;
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.INF.acos();
      complex3.exp();
      complex1.ONE.cos();
      complex2.NaN.readResolve();
      Complex complex4 = complex0.sqrt1z();
      Complex.valueOf(1.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.NaN.sqrt();
      Complex complex7 = complex6.INF.add(complex0);
      complex1.NaN.pow(0.0);
      Complex complex8 = complex5.I.divide((-3130.0265720444245));
      complex8.NaN.toString();
      Complex.valueOf(4.820873399634487E-8, 1866.2538);
      Complex complex9 = complex2.acos();
      complex9.NaN.tanh();
      Complex complex10 = complex9.multiply(complex4);
      complex10.negate();
      complex8.conjugate();
      complex3.toString();
      Complex complex11 = new Complex(1842.0449274129126);
      complex8.add(complex11);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt1z();
      complex0.pow(complex1);
      complex0.ZERO.multiply(487);
      complex0.getImaginary();
      Complex complex3 = complex0.tan();
      complex3.NaN.readResolve();
      complex2.reciprocal();
      complex0.I.subtract(complex1);
      complex1.asin();
      Complex complex4 = Complex.ZERO;
      complex4.INF.sqrt1z();
      complex3.add(complex4);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3360.994), Double.NaN);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.log();
      complex3.ZERO.tanh();
      complex3.ONE.pow(complex1);
      complex2.ONE.conjugate();
      double double0 = (-2153.858219);
      double double1 = 0.0;
      Complex complex4 = Complex.valueOf((-2153.858219), 0.0);
      try { 
        complex4.ZERO.nthRoot((-1826));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,826
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(373.62896);
      Complex complex1 = complex0.pow(3128.11522621);
      Complex complex2 = complex1.multiply(1190);
      complex0.INF.log();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.subtract(373.62896);
      complex3.ONE.multiply((-72.1929));
      complex4.INF.getArgument();
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.valueOf(808.65189281, 3128.11522621);
      Complex complex7 = complex6.ONE.add(complex1);
      complex7.I.sqrt();
      Complex complex8 = complex3.I.multiply(248.73747976473);
      Complex complex9 = complex5.ZERO.subtract(complex2);
      complex9.ZERO.pow(complex4);
      Complex complex10 = complex0.divide(complex3);
      complex10.ZERO.readResolve();
      complex5.asin();
      Complex complex11 = complex2.I.conjugate();
      complex11.NaN.exp();
      Complex complex12 = complex6.sinh();
      complex4.subtract(complex2);
      complex10.tanh();
      complex0.getImaginary();
      Complex complex13 = complex8.cos();
      Complex complex14 = complex13.atan();
      complex14.INF.subtract(complex12);
      Complex complex15 = complex13.NaN.tan();
      complex5.acos();
      complex15.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1688.8005), (-1688.8005));
      Complex complex1 = Complex.ONE;
      complex0.NaN.multiply(complex1);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(647.6587716068);
      Complex complex1 = complex0.ONE.acos();
      complex1.I.getArgument();
      Complex complex2 = complex0.sqrt1z();
      complex0.hashCode();
      complex2.multiply(complex1);
      Complex complex3 = complex2.I.pow(0.0);
      Complex complex4 = complex3.INF.sin();
      complex4.NaN.subtract(0.0);
      complex2.abs();
      complex3.add(1.5707963267948966);
      complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      complex0.getField();
      Complex complex1 = complex0.ONE.tanh();
      complex0.toString();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.NaN.divide(1.0);
      Complex complex5 = complex3.INF.cos();
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex6.I.add(complex0);
      complex5.ZERO.negate();
      Complex complex8 = complex1.tan();
      complex2.ZERO.toString();
      complex4.ZERO.pow(0.0);
      Complex complex9 = complex1.conjugate();
      complex4.NaN.readResolve();
      Complex complex10 = complex8.createComplex(0.0, 0.0);
      complex8.hashCode();
      complex0.subtract(0.0);
      Complex complex11 = complex10.I.subtract(complex4);
      complex3.pow(0.0);
      Complex complex12 = complex10.multiply(1.0);
      Complex complex13 = complex12.NaN.subtract(2416.543623276516);
      complex13.I.tanh();
      complex7.sqrt1z();
      complex8.NaN.atan();
      complex7.sqrt1z();
      Complex complex14 = complex11.pow(0.0);
      complex8.getImaginary();
      complex14.readResolve();
      complex1.tan();
      complex0.add(complex2);
      complex9.getImaginary();
      complex5.sinh();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.pow((-409.6));
      complex0.sin();
      complex0.INF.cosh();
      complex1.NaN.atan();
      complex1.add((-817.0));
      Complex complex2 = Complex.valueOf(0.0, (-409.6));
      complex2.isNaN();
      Complex complex3 = Complex.valueOf((-817.0));
      complex3.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(115.86219602041818);
      complex1.ZERO.asin();
      complex1.ONE.exp();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.sqrt1z();
      complex3.NaN.createComplex(524.2598272909052, (-1471.67));
      Complex complex4 = Complex.valueOf(115.86219602041818, 0.0);
      Complex complex5 = complex2.NaN.multiply(115.86219602041818);
      complex2.ZERO.abs();
      Complex complex6 = complex0.NaN.tan();
      complex4.ZERO.toString();
      complex4.ZERO.hashCode();
      Complex complex7 = complex3.I.subtract(complex6);
      complex7.INF.pow(0.0);
      complex0.abs();
      complex4.getImaginary();
      Complex complex8 = complex4.NaN.cos();
      complex8.I.hashCode();
      complex2.hashCode();
      complex3.getReal();
      complex4.subtract(1.0);
      complex5.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1337.227), (-1337.227));
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.NaN.asin();
      complex2.ONE.tanh();
      Complex complex3 = Complex.valueOf(3768.0411, 290.0);
      Complex complex4 = complex0.exp();
      complex4.hashCode();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.INF.subtract(0.0);
      complex6.INF.cos();
      complex4.I.add(complex2);
      Complex complex7 = Complex.valueOf(3768.0411);
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex8.I.sqrt();
      complex0.isNaN();
      complex7.ZERO.multiply(complex5);
      complex0.multiply(81);
      complex3.sin();
      Complex complex10 = complex3.multiply(complex7);
      complex9.subtract(Double.POSITIVE_INFINITY);
      complex5.cosh();
      complex5.atan();
      complex10.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-394.30787), 0.0);
      complex0.INF.cos();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.sinh();
      complex2.ONE.divide(complex1);
      Complex complex3 = complex1.sin();
      complex1.ZERO.getArgument();
      complex3.ZERO.multiply(1);
      Complex complex4 = complex0.sin();
      complex3.multiply(complex4);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.add(1.0);
      Complex complex3 = complex0.pow(complex1);
      complex2.sqrt1z();
      complex2.ZERO.atan();
      Complex complex4 = Complex.valueOf((-1082.3610549673));
      complex2.INF.log();
      complex0.NaN.acos();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.INF.conjugate();
      complex6.NaN.conjugate();
      complex0.isNaN();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex0.ONE.add(complex7);
      complex2.getImaginary();
      Complex complex9 = complex4.divide(complex0);
      complex9.INF.divide(complex8);
      complex8.add(complex1);
      Complex complex10 = complex2.createComplex((-1082.3610549673), 1.0);
      Complex complex11 = complex10.INF.createComplex(0.0, (-1268.93));
      complex11.subtract(0.0);
      Complex complex12 = complex8.pow(1.0);
      complex12.tan();
      complex8.createComplex((-5140.248744), (-5140.248744));
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-1487.5944422061));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex3.ZERO.acos();
      complex3.ONE.hashCode();
      Complex complex5 = complex2.INF.add(complex4);
      Complex complex6 = complex0.NaN.pow(complex2);
      Complex complex7 = complex2.INF.createComplex((-3262.588411886255), (-3262.588411886255));
      complex1.getArgument();
      Complex complex8 = complex0.log();
      complex6.INF.pow(complex5);
      complex8.tan();
      Complex complex9 = complex2.sinh();
      complex9.abs();
      complex3.hashCode();
      complex7.I.cos();
      Complex complex10 = complex6.conjugate();
      complex10.INF.toString();
      complex7.readResolve();
      complex3.sqrt();
      complex0.hashCode();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2105.959, 2105.959);
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.pow(complex1);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.createComplex(2105.959, 2105.959);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.sinh();
      complex3.reciprocal();
      complex5.ONE.getField();
      Complex complex8 = complex7.divide(2.0);
      complex5.nthRoot(2379);
      complex8.I.add(complex0);
      Complex.valueOf(2105.959, (-226.5141448));
      complex8.conjugate();
      complex4.subtract(2.0);
      complex6.I.reciprocal();
      Complex complex9 = Complex.valueOf((-2364.9594), 0.0);
      complex9.NaN.sinh();
      Complex complex10 = complex9.NaN.tan();
      complex10.NaN.divide(0.0);
      Complex complex11 = complex6.multiply(2379);
      complex11.INF.getArgument();
      complex9.tanh();
      Complex.valueOf((double) 2379, (-226.5141448));
      complex1.createComplex(0.0, (-2364.9594));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = Double.NaN;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.multiply((double) (-352));
      complex3.abs();
      try { 
        complex0.nthRoot((-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -352
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex1.ONE.multiply((-1.0));
      complex2.ZERO.multiply((-1.0));
      Complex complex3 = complex0.divide(complex2);
      complex3.INF.asin();
      complex1.ZERO.abs();
      Complex complex4 = complex0.add(complex1);
      complex1.ONE.getField();
      complex4.asin();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = Complex.valueOf((-1.0), 0.0);
      complex6.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3101551448625578E-152);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.log();
      complex2.ONE.pow(complex1);
      complex2.INF.getField();
      complex1.atan();
      Complex complex3 = complex0.cos();
      complex3.NaN.subtract(2.3101551448625578E-152);
      complex3.ONE.cosh();
      complex3.isInfinite();
      complex0.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex5.sqrt1z();
      complex4.ZERO.conjugate();
      complex7.ZERO.multiply(complex6);
      complex7.cos();
      complex1.isNaN();
      complex5.getField();
      complex6.isInfinite();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.0542365522414836E-65, 7.0542365522414836E-65);
      Complex complex1 = complex0.sin();
      complex0.isInfinite();
      complex1.isNaN();
      Complex complex2 = complex0.INF.subtract(2393.6812545123);
      Complex complex3 = complex1.pow(7.0542365522414836E-65);
      Complex complex4 = complex1.INF.multiply(complex3);
      complex4.ONE.conjugate();
      complex3.getField();
      Complex complex5 = Complex.valueOf(0.0);
      complex0.getArgument();
      complex2.INF.divide(2393.6812545123);
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.subtract(complex5);
      complex7.INF.getArgument();
      Complex complex8 = complex1.cosh();
      complex8.I.toString();
      complex3.readResolve();
      complex5.cos();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex2.cosh();
      complex10.INF.reciprocal();
      complex10.INF.nthRoot(1376);
      complex3.sqrt1z();
      complex9.pow(complex5);
      complex9.subtract(0.7853981633974483);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-777.7372877824), (-1904.2386012858));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.INF.tanh();
      complex4.exp();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = Complex.valueOf(173.1242884828, 0.0);
      complex3.toString();
      complex2.ONE.reciprocal();
      Complex complex7 = complex1.reciprocal();
      complex7.tanh();
      Complex complex8 = complex6.multiply(complex2);
      complex8.ONE.add((-1904.2386012858));
      complex3.getReal();
      complex8.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.nthRoot(798);
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.INF.cosh();
      complex2.I.abs();
      complex1.divide(complex0);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.INF.hashCode();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex2.ZERO.add(complex0);
      Complex complex8 = complex0.ONE.log();
      Complex complex9 = Complex.valueOf((-1897.82));
      Complex complex10 = complex5.multiply(complex6);
      complex10.hashCode();
      Complex complex11 = complex5.subtract(3968.148);
      Complex complex12 = complex11.ZERO.acos();
      complex4.isNaN();
      Complex complex13 = complex3.divide((-1897.82));
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex9.ONE.multiply(456.985515263);
      complex0.getImaginary();
      Complex complex15 = complex8.tanh();
      complex9.isInfinite();
      complex4.exp();
      Complex complex16 = (Complex)complex12.readResolve();
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertTrue(complex16.equals((Object)complex12));
      
      Complex complex17 = complex7.pow(complex0);
      assertTrue(complex17.equals((Object)complex10));
      assertTrue(complex7.equals((Object)complex11));
      
      complex8.cosh();
      Complex complex18 = complex15.cosh();
      assertTrue(complex18.equals((Object)complex2));
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      String string0 = complex14.toString();
      assertEquals("(456.985515263, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-6045.5674827), (-4450.3));
      Complex complex1 = Complex.valueOf((-6045.5674827));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex0.readResolve();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.cosh();
      double double0 = complex3.getImaginary();
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex4 = complex1.add(complex2);
      complex4.getField();
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex5 = complex1.sin();
      assertTrue(complex1.equals((Object)complex4));
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex0.getField();
      assertTrue(complex0.equals((Object)object0));
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2041.0));
      Complex complex1 = complex0.asin();
      complex1.getArgument();
      complex1.I.sin();
      complex1.divide(513.096);
      Complex complex2 = complex1.sqrt();
      complex0.multiply(0);
      complex0.isInfinite();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 411.9830016;
      Complex complex1 = Complex.valueOf(411.9830016, 411.9830016);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex.valueOf(0.0);
      complex2.INF.multiply(411.9830016);
      complex0.INF.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0, 411.9830016);
      complex3.I.divide(complex1);
      int int0 = 0;
      complex0.ZERO.acos();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.reciprocal();
      complex0.NaN.acos();
      Complex complex1 = complex0.ONE.log();
      complex1.I.sqrt();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      try { 
        complex2.nthRoot((-921));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -921
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex((-2049.264593067026));
      complex0.I.atan();
      double double0 = 695.13594;
      complex0.INF.add(695.13594);
      complex0.getImaginary();
      Complex complex1 = complex0.atan();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.hashCode();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ONE.reciprocal();
      complex2.I.negate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      complex1.NaN.getArgument();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.ONE.divide(complex4);
      assertFalse(complex6.equals((Object)complex2));
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.equals((Object)complex2));
      
      complex4.log();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex9.log();
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex3));
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
  }
}
