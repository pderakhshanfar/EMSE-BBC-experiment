/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:12:26 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-2.5962209119628854E7));
      Complex complex1 = Complex.valueOf(7.450580596923828E-9, Double.POSITIVE_INFINITY);
      complex1.ZERO.exp();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.multiply(37);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex1.add((double) (-247));
      complex2.reciprocal();
      complex6.log();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1815.8452273118, Double.POSITIVE_INFINITY);
      complex0.asin();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 6.283185307179586);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      complex0.equals(complex1);
      complex1.toString();
      complex0.cosh();
      complex2.asin();
      Complex complex3 = complex2.subtract(complex0);
      complex2.add((-1952.707897996985));
      Complex complex4 = complex2.sqrt1z();
      complex1.multiply(6.283185307179586);
      complex4.createComplex(6.283185307179586, 1.5180284540082572E269);
      Complex.valueOf(1.4537691293749923E7);
      complex0.acos();
      Complex complex5 = Complex.NaN;
      complex3.sin();
      Complex complex6 = complex0.divide(complex3);
      complex2.add((-2598.070035399309));
      complex0.tan();
      complex2.asin();
      try { 
        complex6.nthRoot((-1234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,234
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.ONE;
      complex1.log();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add((-2045.122329));
      Complex complex1 = Complex.valueOf((-2045.122329), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 349.6881242467562);
      complex1.nthRoot(887);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1741.29499724));
      Complex complex1 = Complex.valueOf((-424.0));
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf((-3445.80970951), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.conjugate();
      complex4.I.cos();
      Complex complex5 = new Complex((-3445.80970951), (-3445.80970951));
      Complex complex6 = Complex.valueOf((-3445.80970951), Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.log();
      complex1.tan();
      complex6.acos();
      complex7.tanh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1, Double.POSITIVE_INFINITY);
      complex0.multiply(1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.equals(complex0);
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      complex2.NaN.tanh();
      complex0.nthRoot(425);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.toString();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(2108);
      Complex complex1 = complex0.multiply(2108);
      Complex complex2 = complex1.sqrt();
      complex0.toString();
      Complex complex3 = complex2.cos();
      complex3.abs();
      complex3.getArgument();
      Complex complex4 = complex1.multiply((-1073741824));
      Complex complex5 = complex4.multiply(complex1);
      complex1.exp();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.sqrt();
      complex7.atan();
      complex1.equals(complex6);
      complex7.cos();
      Complex complex8 = Complex.I;
      complex5.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.INF.createComplex(Double.NaN, 2.644960880279541);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.I.divide(1929.4390000000003);
      complex2.I.cosh();
      Complex complex3 = complex1.ONE.divide(3.872324835);
      Complex complex4 = complex3.ONE.acos();
      complex4.INF.subtract((-836.79));
      Complex complex5 = complex0.multiply((-1));
      Complex complex6 = complex0.tan();
      complex3.divide(complex6);
      Complex complex7 = complex5.add(3.872324835);
      complex7.INF.getField();
      complex3.createComplex(1.841078519821167, (-1));
      complex1.abs();
      complex5.add((-1.5430806348152437));
      complex2.add((-3.491241408725929E-276));
      try { 
        complex5.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6480542736638855);
      Complex complex1 = complex0.reciprocal();
      complex1.I.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      complex1.multiply((-697));
      Complex complex4 = complex3.multiply(1864);
      Complex complex5 = complex4.I.sqrt();
      complex5.ONE.toString();
      complex5.cos();
      complex1.abs();
      complex2.getArgument();
      complex0.INF.multiply(1864);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.ZERO.sqrt();
      complex1.atan();
      complex4.equals(complex0);
      complex6.cos();
      Complex complex9 = Complex.I;
      complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.7444071347167));
      Complex complex1 = complex0.NaN.add((-449.9));
      Complex complex2 = complex0.multiply(1996.45669818);
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.I.acos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.I.reciprocal();
      complex5.ZERO.conjugate();
      complex4.ONE.reciprocal();
      Complex complex6 = Complex.valueOf(2.625423995658143E-82, 1996.45669818);
      Complex complex7 = complex1.log();
      Complex complex8 = complex0.sqrt1z();
      complex8.readResolve();
      Complex complex9 = complex1.divide(0.9640275800758169);
      Complex complex10 = complex9.atan();
      complex2.asin();
      complex9.multiply((-885.6));
      complex7.divide(complex6);
      complex0.cos();
      complex5.atan();
      complex10.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.ZERO.negate();
      complex1.sin();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.7444071347167));
      complex0.NaN.add((-449.9));
      Complex complex1 = complex0.multiply(1996.45669818);
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.I.acos();
      // Undeclared exception!
      complex0.nthRoot(1379747755);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.7444071347167));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.sqrt1z();
      complex4.readResolve();
      complex5.divide(0.9640275800758169);
      complex0.atan();
      complex4.asin();
      Complex complex6 = complex2.multiply((-437.7444071347167));
      complex6.INF.sin();
      complex2.multiply((-437.7444071347167));
      complex3.sqrt1z();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.exp();
      complex1.isInfinite();
      Complex complex4 = new Complex((-7.853944465095286E-8));
      complex4.getReal();
      complex3.tan();
      Complex complex5 = complex2.tanh();
      complex5.atan();
      complex1.toString();
      Complex complex6 = Complex.valueOf((-7.853944465095286E-8));
      Complex complex7 = Complex.INF;
      complex0.asin();
      Complex complex8 = new Complex((-7.853944465095286E-8), 2261.3);
      Complex complex9 = complex8.cosh();
      Complex complex10 = Complex.valueOf((-2170.48), (-2170.48));
      Complex complex11 = complex10.tanh();
      complex8.equals(complex9);
      complex3.cosh();
      complex6.multiply((-640.0130338078582));
      complex11.getField();
      complex8.divide((-7.853944465095286E-8));
      complex5.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(515.9047608378705);
      complex0.add((-900.9335));
      Complex complex2 = complex0.multiply((-1957.5023));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.acos();
      complex0.conjugate();
      complex4.sqrt();
      Complex complex6 = complex2.asin();
      complex1.reciprocal();
      complex4.abs();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.conjugate();
      Complex.valueOf(3775.7);
      complex4.reciprocal();
      Complex.valueOf(1.5707963267948966, 515.9047608378705);
      complex2.log();
      complex6.sqrt1z();
      complex7.readResolve();
      complex5.divide(7.160716418525417E-8);
      complex4.atan();
      complex8.asin();
      complex6.multiply(3209.9055155816);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(7.116780143398601E-9);
      Complex complex2 = Complex.valueOf(7.116780143398601E-9, (-699.41));
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = Complex.ZERO;
      complex3.multiply(500.69745853);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.pow(complex3);
      Complex complex8 = complex7.add(complex6);
      complex3.conjugate();
      Complex complex9 = Complex.ONE;
      complex9.abs();
      complex2.asin();
      Complex complex10 = new Complex(1.0, 1.0);
      complex8.divide(500.69745853);
      complex4.multiply((-1631.4682764));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.7444071347167));
      Complex complex1 = complex0.NaN.add((-449.9));
      Complex complex2 = complex0.multiply(1996.45669818);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.I.acos();
      complex3.ONE.conjugate();
      complex1.INF.sqrt();
      Complex complex5 = Complex.valueOf(1996.45669818, (-437.7444071347167));
      Complex complex6 = complex1.I.reciprocal();
      complex6.INF.abs();
      complex6.ZERO.conjugate();
      Complex.valueOf(1996.45669818);
      complex5.sin();
      complex4.pow(complex5);
      complex4.subtract(1996.45669818);
      Complex.valueOf(Double.POSITIVE_INFINITY, 623.140034);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.7444071347167));
      complex0.NaN.add((-449.9));
      complex0.multiply(1996.45669818);
      Complex complex1 = new Complex(2137.127427717877);
      Complex complex2 = complex0.add((-437.7444071347167));
      Complex.valueOf(2137.127427717877, 6.283185307179586);
      complex2.createComplex(-0.0, Double.NaN);
      Complex complex3 = Complex.ONE;
      complex3.abs();
      complex2.asin();
      Complex complex4 = new Complex((-1674.065), 6.283185307179586);
      complex2.divide(Double.NaN);
      complex2.multiply(1996.45669818);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(984.8028156375, 984.8028156375);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.ONE.hashCode();
      Complex complex3 = complex1.ZERO.createComplex(984.8028156375, (-2222.8));
      Complex complex4 = complex3.ZERO.asin();
      complex3.ONE.sin();
      Complex complex5 = complex4.INF.log();
      complex5.abs();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex0.tan();
      complex6.NaN.exp();
      complex7.isInfinite();
      complex7.getReal();
      complex0.tan();
      complex5.tanh();
      complex5.atan();
      complex4.toString();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.asin();
      complex7.cosh();
      complex8.tanh();
      complex10.equals(complex1);
      complex2.cosh();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex6.asin();
      Complex complex11 = Complex.ONE;
      complex11.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = new Complex(9.693260855961159E-8);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = Complex.ZERO;
      complex2.multiply(9.693260855961159E-8);
      Complex complex6 = complex1.pow(complex0);
      complex3.add(complex6);
      complex5.conjugate();
      Complex complex7 = Complex.ONE;
      complex6.abs();
      complex4.asin();
      Complex complex8 = new Complex(0.2592042088508606, 19.0);
      complex7.divide(51.69844058434);
      complex4.multiply(500.69745853);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.7444071347167));
      complex0.NaN.add((-449.9));
      Complex complex1 = complex0.multiply(1996.45669818);
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.nthRoot(1360);
      Complex complex3 = Complex.valueOf((-2198.625995595442));
      complex3.sqrt();
      complex2.cos();
      complex0.INF.abs();
      complex0.divide(3828.611);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(984.8028156375, 984.8028156375);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.ONE.hashCode();
      Complex complex3 = complex1.ZERO.createComplex(984.8028156375, (-2222.8));
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex4.INF.log();
      complex0.abs();
      Complex complex7 = complex4.atan();
      complex6.tan();
      Complex complex8 = Complex.ONE;
      complex8.exp();
      complex6.isInfinite();
      complex6.getReal();
      Complex complex9 = complex5.tan();
      complex3.tanh();
      Complex complex10 = complex2.atan();
      complex7.toString();
      Complex complex11 = Complex.valueOf(984.8028156375);
      Complex complex12 = Complex.INF;
      complex9.asin();
      complex11.cosh();
      complex9.tanh();
      complex0.equals(complex10);
      Complex complex13 = Complex.NaN;
      complex13.cosh();
      Complex complex14 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex12.getField();
      complex14.divide(Double.POSITIVE_INFINITY);
      complex13.multiply(2.7689167860486803);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      complex1.add(complex0);
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(500.69745853);
      complex3.NaN.pow(complex0);
      complex0.add(complex3);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = Complex.ONE;
      complex3.abs();
      complex4.ONE.asin();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = new Complex((-1233.13434), Double.POSITIVE_INFINITY);
      complex7.multiply((-59.4694726241));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2719.02);
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex(2719.02, (-2.928362616578011E142));
      complex2.equals(complex1);
      complex0.cosh();
      Complex complex3 = new Complex((-2.928362616578011E142));
      complex3.multiply((-1.766924303914492E-76));
      complex3.getField();
      complex1.hashCode();
      Complex complex4 = complex3.multiply(complex2);
      complex0.getField();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.7444071347167));
      Complex complex1 = complex0.NaN.add((-449.9));
      Complex complex2 = complex0.multiply(1996.45669818);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.I.acos();
      complex3.ONE.conjugate();
      complex1.INF.sqrt();
      complex0.asin();
      Complex complex5 = complex1.I.reciprocal();
      complex5.INF.abs();
      complex5.ZERO.conjugate();
      Complex complex6 = Complex.valueOf(1996.45669818);
      complex6.ONE.reciprocal();
      Complex complex7 = Complex.valueOf(2.625423995658143E-82, 1996.45669818);
      complex1.log();
      Complex complex8 = complex6.sqrt1z();
      complex7.readResolve();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex7.atan();
      complex4.asin();
      complex8.multiply(0.9640275800758169);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5800256583859738, 1.0);
      Complex complex1 = complex0.createComplex(1.0, 1.5800256583859738);
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(585.245053030474, 1.0);
      Complex complex3 = complex1.add(Double.NaN);
      complex1.hashCode();
      Complex complex4 = new Complex(Double.NaN, Double.POSITIVE_INFINITY);
      complex4.cosh();
      complex0.subtract(complex4);
      Complex.valueOf(585.245053030474);
      Complex complex5 = new Complex((-1.0), 343.33673755);
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.ZERO;
      Complex.valueOf((-1902.057434));
      complex4.equals(complex6);
      complex2.cosh();
      complex3.multiply((-1565.01909228));
      complex5.getImaginary();
      complex2.sinh();
      Complex.valueOf((-3283.13704983), (-20.0));
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
      complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2719.02);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(3638.3377412, Double.NaN);
      complex0.createComplex((-1.0), (-53.91655));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(984.8028156375, 984.8028156375);
      Complex complex1 = complex0.I.tan();
      complex0.I.sqrt1z();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.ZERO.createComplex(984.8028156375, (-2222.8));
      Complex complex3 = complex2.ZERO.asin();
      complex2.ONE.sin();
      complex3.INF.log();
      complex2.ZERO.abs();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex4.NaN.exp();
      Complex complex7 = new Complex(7.589632206714686E11, 0.9640275800758169);
      complex1.tan();
      complex5.tanh();
      Complex complex8 = complex6.atan();
      complex2.toString();
      Complex complex9 = Complex.I;
      complex2.asin();
      complex8.cosh();
      Complex complex10 = Complex.valueOf(7.589632206714686E11);
      complex3.equals(complex10);
      complex0.cosh();
      Complex complex11 = Complex.valueOf(7.589632206714686E11);
      complex11.getImaginary();
      complex8.sinh();
      complex3.multiply(17);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1765.3);
      Complex complex1 = complex0.INF.multiply(195);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ZERO.add(Double.NaN);
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = complex2.NaN.sqrt1z();
      Complex complex7 = complex3.INF.multiply(1765.3);
      Complex complex8 = complex7.ZERO.subtract((double) 195);
      complex2.ZERO.divide(complex4);
      Complex complex9 = complex2.divide((double) 195);
      complex9.INF.atan();
      complex9.ZERO.sqrt1z();
      Complex complex10 = complex8.subtract(complex9);
      complex10.ONE.asin();
      complex3.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      complex1.abs();
      Complex complex11 = complex3.sqrt();
      complex11.equals(complexField0);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex10.add(complex3);
      Complex complex12 = Complex.valueOf(Double.NaN, 734.0711462884);
      complex10.negate();
      complex5.createComplex(0.41421356237309515, Double.POSITIVE_INFINITY);
      complex6.acos();
      complex12.multiply((double) 195);
      try { 
        complex0.nthRoot((-306374028));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -306,374,028
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex4.pow(complex2);
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex2.asin();
      complex7.abs();
      Complex complex10 = complex4.asin();
      complex9.toString();
      complex5.tanh();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.negate();
      Complex.valueOf(Double.NaN);
      complex10.negate();
      complex5.exp();
      Complex complex13 = new Complex((-1435.074416), (-1062.4202947034555));
      complex13.sin();
      complex11.pow(complex3);
      Complex complex14 = complex0.sin();
      complex14.sqrt();
      complex6.getField();
      complex4.hashCode();
      complex7.multiply(complex3);
      complex8.divide(6.283185307179586);
      complex7.sinh();
      complex14.getField();
      complex12.hashCode();
      complex2.multiply(complex9);
      complex2.getField();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      complex0.divide(complex1);
      Complex complex2 = complex0.multiply(500.69745853);
      Complex complex3 = Complex.valueOf(1.2505225549830357E-4);
      complex0.getField();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = new Complex((-20.0), (-20.0));
      complex5.add(complex0);
      Complex complex6 = complex2.tanh();
      Complex complex7 = new Complex((-20.0));
      complex1.toString();
      complex2.sin();
      Complex complex8 = complex4.log();
      Complex complex9 = complex6.createComplex(1.3613655394659198E-107, 1.5986630501664381E7);
      complex9.reciprocal();
      complex9.readResolve();
      Complex complex10 = new Complex((-20.0), (-1.5986630501664381E7));
      complex8.getReal();
      complex8.negate();
      complex8.abs();
      Complex complex11 = new Complex(500.69745853);
      Complex complex12 = complex5.cos();
      complex1.conjugate();
      complex3.sinh();
      Complex.valueOf((-20.0), (-8.986778864031587));
      complex7.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(984.8028156375, 984.8028156375);
      Complex complex1 = complex0.I.tan();
      complex0.I.sqrt1z();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.ZERO.createComplex(984.8028156375, (-2222.8));
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex3.INF.log();
      complex2.ZERO.abs();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex6.NaN.exp();
      complex7.toString();
      complex7.isInfinite();
      Complex complex9 = complex7.sin();
      complex9.ONE.atan();
      complex3.log();
      Complex complex10 = complex4.createComplex((-2222.8), (-2222.8));
      Complex complex11 = complex0.reciprocal();
      complex11.readResolve();
      complex10.getReal();
      complex11.negate();
      complex8.abs();
      Complex complex12 = new Complex(0.0);
      complex5.cos();
      complex7.conjugate();
      complex2.sinh();
      Complex.valueOf((-2222.8), 3975922.8754160954);
      complex3.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      complex1.NaN.cosh();
      Complex complex2 = complex0.ONE.conjugate();
      complex0.I.sin();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.divide((-4719.44252393201));
      Complex complex5 = complex2.conjugate();
      complex4.asin();
      complex2.abs();
      complex1.asin();
      complex1.toString();
      complex3.tanh();
      Complex complex6 = complex3.negate();
      Complex complex7 = Complex.valueOf((-4719.44252393201));
      Complex complex8 = complex6.negate();
      Complex complex9 = complex6.exp();
      complex9.sin();
      complex0.pow(complex5);
      complex2.sin();
      Complex complex10 = complex2.sqrt();
      complex10.getField();
      complex9.hashCode();
      complex0.multiply(complex5);
      complex7.divide(2305.1367624);
      complex1.sinh();
      complex2.getField();
      Complex complex11 = Complex.INF;
      complex11.hashCode();
      complex6.multiply(complex9);
      Complex complex12 = Complex.valueOf(1440.533801378223);
      complex12.getField();
      Complex complex13 = Complex.NaN;
      complex13.conjugate();
      complex8.multiply((-1132.0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.sqrt();
      complex3.ZERO.readResolve();
      Complex complex4 = complex2.acos();
      complex4.NaN.exp();
      complex3.asin();
      Complex complex5 = complex4.subtract(complex1);
      complex5.ONE.readResolve();
      Complex complex6 = Complex.valueOf((-1421.914853474511), (-815.169));
      Complex complex7 = complex2.divide(complex6);
      complex7.INF.negate();
      Complex.valueOf((-815.169), (-815.169));
      complex7.INF.readResolve();
      Complex complex8 = complex1.exp();
      Complex complex9 = Complex.valueOf(731.218021, 720.163636732);
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex2.add(complex9);
      complex11.ZERO.conjugate();
      Complex complex12 = complex11.exp();
      complex12.INF.toString();
      complex1.abs();
      complex10.INF.subtract(720.163636732);
      Complex complex13 = complex9.pow((-1421.914853474511));
      Complex complex14 = complex4.multiply(complex10);
      complex8.abs();
      complex14.atan();
      complex10.cosh();
      Complex complex15 = complex1.pow(731.218021);
      complex15.log();
      complex13.cos();
      complex12.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(234.5674693960455);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.subtract(complex4);
      complex0.pow(complex1);
      Complex complex7 = (Complex)complex1.readResolve();
      Complex complex8 = Complex.ONE;
      complex8.exp();
      Complex complex9 = complex6.exp();
      complex1.multiply(234.5674693960455);
      complex6.tan();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex2.atan();
      complex5.toString();
      Complex.valueOf(234.5674693960455);
      Complex complex12 = complex1.asin();
      Complex complex13 = complex2.cosh();
      complex10.tanh();
      complex3.equals(complex7);
      complex13.cosh();
      complex12.multiply(3040.44204439);
      complex9.getImaginary();
      complex0.sqrt();
      complex13.hashCode();
      complex10.getArgument();
      complex4.add(0.0);
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      complex1.NaN.cosh();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.divide((-203.780642));
      complex5.ONE.getField();
      Complex complex6 = complex0.conjugate();
      complex2.I.add(complex3);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex7.ONE.exp();
      complex9.INF.multiply(0.0);
      Complex complex10 = complex6.INF.tan();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex2.atan();
      complex0.ONE.toString();
      Complex.valueOf((-203.780642));
      complex12.asin();
      Complex complex13 = complex12.I.cosh();
      complex13.ZERO.tanh();
      complex6.equals(complex11);
      complex0.I.cosh();
      complex12.multiply(0.22392448782920837);
      complex4.getImaginary();
      complex0.sqrt();
      complex8.hashCode();
      complex5.getArgument();
      complex6.add(0.8414709848078965);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.multiply(144);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(complex1);
      complex4.I.sqrt1z();
      Complex complex5 = complex0.createComplex(1166.23410197096, 1166.23410197096);
      complex1.abs();
      Complex complex6 = Complex.INF;
      complex6.hashCode();
      Complex complex7 = complex0.add((double) 144);
      complex1.hashCode();
      complex1.cosh();
      Complex complex8 = complex2.subtract(complex4);
      complex7.ONE.subtract(complex6);
      complex0.isInfinite();
      complex1.hashCode();
      Complex complex9 = complex3.pow(1814.99);
      complex5.getImaginary();
      complex6.log();
      complex1.getReal();
      complex1.sqrt1z();
      complex4.tan();
      complex2.exp();
      complex5.isNaN();
      complex9.isNaN();
      complex7.multiply(2101);
      complex8.acos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.multiply(144);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex1.createComplex((-2913.43575198915), 1647.1253408543598);
      Complex complex7 = Complex.valueOf(1647.1253408543598);
      complex7.abs();
      complex5.hashCode();
      Complex complex8 = complex2.add((double) 144);
      complex1.hashCode();
      complex6.cosh();
      complex1.subtract(complex2);
      complex4.isInfinite();
      complex4.hashCode();
      Complex complex9 = complex3.pow(1434.98);
      complex6.getImaginary();
      complex9.log();
      complex1.getReal();
      Complex complex10 = complex3.sqrt1z();
      complex10.tan();
      complex2.exp();
      complex6.isNaN();
      complex4.isNaN();
      complex8.multiply(144);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(234.5674693960455);
      complex0.ONE.tanh();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(234.5674693960455);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.createComplex(234.5674693960455, 0.0);
      complex4.abs();
      complex1.hashCode();
      Complex complex5 = complex2.add(1.108938997126179E-40);
      complex2.hashCode();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex1.subtract(complex0);
      complex6.isInfinite();
      complex5.hashCode();
      Complex complex8 = complex4.pow((-3501.9167));
      complex5.getImaginary();
      Complex complex9 = complex8.log();
      complex4.getReal();
      complex9.sqrt1z();
      complex5.tan();
      Complex complex10 = complex7.exp();
      complex6.isNaN();
      complex10.isNaN();
      complex3.multiply(849);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(69.545, (-343.766));
      Complex complex2 = complex1.INF.cos();
      complex0.hashCode();
      Complex complex3 = complex1.add((-343.766));
      complex1.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.subtract(complex5);
      complex6.isInfinite();
      complex3.hashCode();
      Complex complex7 = complex5.pow((-343.766));
      complex0.getImaginary();
      Complex complex8 = complex0.log();
      complex1.getReal();
      complex5.sqrt1z();
      Complex complex9 = complex8.tan();
      complex9.exp();
      complex2.isNaN();
      complex3.isNaN();
      complex3.multiply((-2568));
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.nthRoot(2108);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.tanh();
      complex2.negate();
      Complex complex4 = Complex.valueOf((double) 2108);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex5.sin();
      complex2.pow(complex0);
      Complex complex8 = complex7.sin();
      Complex complex9 = complex2.sqrt();
      complex3.getField();
      complex9.hashCode();
      Complex complex10 = Complex.ZERO;
      complex5.multiply(complex10);
      complex6.divide(557.11983196);
      complex5.sinh();
      complex7.getField();
      complex8.hashCode();
      Complex complex11 = complex2.multiply(complex0);
      complex4.getField();
      complex1.conjugate();
      complex6.sqrt();
      complex11.divide(557.11983196);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      Complex complex1 = new Complex(0.0, (-1871.779331));
      complex0.add(complex0);
      complex1.readResolve();
      complex0.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.I;
      complex2.divide(complex3);
      Complex complex4 = Complex.valueOf((-6.294198235));
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.sqrt1z();
      complex6.hashCode();
      complex0.pow(complex3);
      complex3.divide(complex5);
      complex4.abs();
      complex1.tan();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex5.reciprocal();
      complex8.multiply(complex1);
      complex1.createComplex(1543.21075691, 2159.355938392242);
      complex8.hashCode();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.add(complex8);
      complex1.multiply(1420);
      complex11.isInfinite();
      complex7.subtract((-6.294198235));
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.reciprocal();
      complex0.readResolve();
      Complex complex4 = complex3.tanh();
      complex4.getReal();
      complex2.negate();
      complex4.abs();
      Complex complex5 = complex1.cos();
      complex4.conjugate();
      complex5.sinh();
      Complex complex6 = Complex.valueOf(Double.NaN, 159.8149654428504);
      Complex complex7 = Complex.INF;
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.I.conjugate();
      complex2.ZERO.subtract(complex1);
      complex2.I.abs();
      Complex complex3 = complex1.NaN.subtract((-1069.0));
      Complex complex4 = complex3.I.tan();
      Complex complex5 = (Complex)complex0.readResolve();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex4.pow(complex0);
      complex6.readResolve();
      complex7.toString();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex0.log();
      complex2.createComplex(217.33777, 0.008526176526718447);
      complex5.reciprocal();
      complex0.readResolve();
      Complex complex10 = Complex.valueOf(217.33777);
      Complex complex11 = complex10.tanh();
      complex7.getReal();
      Complex complex12 = complex1.negate();
      complex7.abs();
      complex11.cos();
      complex9.conjugate();
      complex9.sinh();
      Complex.valueOf(8.468222063292654E102, 1.8436584029933392E101);
      complex5.subtract(complex3);
      complex12.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(234.5674693960455);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.subtract(complex4);
      Complex complex7 = complex2.add(complex0);
      complex0.readResolve();
      complex6.hashCode();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex3.divide(complex8);
      Complex complex10 = complex9.conjugate();
      Complex complex11 = Complex.valueOf(963.5413, 963.5413);
      Complex complex12 = complex11.subtract(complex0);
      Complex complex13 = complex9.sqrt1z();
      complex4.I.multiply(963.5413);
      complex4.hashCode();
      complex7.pow(complex13);
      complex7.divide(complex10);
      complex11.abs();
      Complex complex14 = complex1.tan();
      complex3.cosh();
      Complex complex15 = complex11.reciprocal();
      complex15.INF.tan();
      Complex complex16 = complex2.multiply(complex14);
      complex4.createComplex(4274.625833128, (-1637.3959368386));
      complex16.hashCode();
      complex8.add(complex12);
      complex1.multiply(1420);
      complex8.isInfinite();
      complex7.subtract(1013.658703);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.cosh();
      complex2.readResolve();
      Complex complex4 = complex2.acos();
      complex2.sqrt1z();
      complex1.subtract(complex3);
      Complex complex5 = new Complex(0.0);
      Complex complex6 = Complex.INF;
      complex5.readResolve();
      complex6.toString();
      Complex complex7 = complex5.sin();
      Complex complex8 = Complex.ZERO;
      complex8.log();
      Complex complex9 = complex1.createComplex(1087.383486783, 2.0);
      complex9.reciprocal();
      complex1.readResolve();
      complex8.tanh();
      complex7.getReal();
      Complex complex10 = complex2.negate();
      complex2.abs();
      complex10.cos();
      complex6.conjugate();
      Complex complex11 = new Complex(0.0);
      Complex complex12 = Complex.NaN;
      Complex.valueOf(1.0381848020926893E-8, 0.0);
      complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(234.5674693960455);
      Complex complex1 = complex0.ONE.tanh();
      complex1.NaN.cosh();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.INF.subtract(complex3);
      Complex complex6 = new Complex(234.5674693960455, 234.5674693960455);
      complex1.readResolve();
      complex0.toString();
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.valueOf(234.5674693960455);
      complex8.NaN.createComplex(1087.383486783, 0.0);
      Complex complex9 = complex7.reciprocal();
      complex9.I.readResolve();
      complex0.I.tanh();
      complex9.getReal();
      Complex complex10 = new Complex(260.1813526067762, 2.335583952792908E-102);
      complex10.divide(complex1);
      complex2.nthRoot(1);
      Complex complex11 = complex0.tan();
      Complex complex12 = Complex.valueOf((-3.58682613900703));
      complex7.pow(complex12);
      complex5.readResolve();
      complex6.readResolve();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(984.8028156375, 984.8028156375);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.ONE.hashCode();
      Complex complex3 = complex1.ZERO.createComplex(984.8028156375, (-2222.8));
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.ONE.sin();
      complex4.INF.log();
      complex3.ZERO.abs();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex0.tan();
      complex6.NaN.exp();
      complex7.toString();
      complex7.I.nthRoot(6);
      complex7.isInfinite();
      complex7.getReal();
      Complex complex8 = complex6.ONE.multiply(0.0);
      complex2.INF.acos();
      Complex complex9 = Complex.valueOf((-20.0), (-2222.8));
      Complex complex10 = complex6.subtract(complex4);
      Complex complex11 = complex2.sinh();
      complex4.ZERO.multiply(1063);
      complex6.tanh();
      Complex complex12 = complex11.negate();
      complex12.abs();
      Complex complex13 = complex0.cos();
      complex8.conjugate();
      complex10.sinh();
      Complex.valueOf((-2356.644367977), 2.462968349456787);
      complex13.subtract(complex11);
      complex9.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(234.5674693960455);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex1.sqrt1z();
      complex5.INF.subtract(complex4);
      complex0.pow(complex1);
      complex1.readResolve();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex3.multiply(234.5674693960455);
      Complex complex9 = complex3.tan();
      Complex complex10 = complex8.tanh();
      complex0.atan();
      complex3.toString();
      Complex complex11 = Complex.valueOf(0.0);
      complex9.asin();
      complex3.cosh();
      complex2.tanh();
      complex11.equals(complex6);
      complex10.cosh();
      complex1.multiply(0.22392448782920837);
      Complex complex12 = Complex.ONE;
      complex12.getImaginary();
      Complex complex13 = complex7.sqrt();
      complex13.hashCode();
      complex5.getArgument();
      complex12.add(0.0);
      Complex complex14 = Complex.ZERO;
      complex14.readResolve();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex0.I.sin();
      complex0.sinh();
      Complex complex5 = Complex.valueOf((-4719.44252393201));
      complex5.ONE.getField();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.I.add(complex4);
      Complex complex8 = complex6.ZERO.tanh();
      Complex complex9 = new Complex(2.0);
      complex9.toString();
      complex8.sin();
      complex4.log();
      Complex complex10 = complex8.createComplex(1.241529292737115E-25, 2.0);
      complex1.reciprocal();
      complex2.readResolve();
      Complex complex11 = new Complex(1.241529292737115E-25, 1.241529292737115E-25);
      complex7.getReal();
      complex7.negate();
      complex10.abs();
      Complex complex12 = new Complex((-1890.923223461));
      complex12.cos();
      Complex complex13 = complex3.conjugate();
      complex4.sinh();
      Complex.valueOf(469.13280719953417, 3648.56);
      complex0.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(234.5674693960455);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.subtract(complex4);
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = (Complex)complex1.readResolve();
      complex0.toString();
      Complex complex9 = complex3.asin();
      complex0.tanh();
      complex6.nthRoot(868);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex2.pow(complex10);
      complex7.pow(complex8);
      complex9.subtract(792.9614);
      complex6.sqrt1z();
      Complex.valueOf(792.9614);
      complex10.cos();
      complex11.subtract(1272.1001852);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(69.545, (-343.766));
      Complex complex2 = complex1.INF.cos();
      complex2.ZERO.abs();
      Complex complex3 = complex0.I.pow(complex1);
      complex0.sin();
      Complex complex4 = complex2.log();
      complex1.I.acos();
      complex2.createComplex(0.0, 0.0);
      complex0.reciprocal();
      Complex complex5 = Complex.ZERO;
      complex5.NaN.cos();
      complex5.readResolve();
      Complex complex6 = Complex.ZERO;
      complex6.tanh();
      Complex complex7 = Complex.NaN;
      complex7.getReal();
      complex7.negate();
      complex0.abs();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.conjugate();
      complex0.sinh();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex9.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2336.413842555));
      complex0.log();
      Complex complex1 = complex0.atan();
      complex0.multiply((-2336.413842555));
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.cos();
      complex1.cosh();
      complex1.INF.toString();
      Complex.valueOf((-1259.4063450319222), 0.0);
      Complex complex2 = complex1.multiply(289.207595216);
      complex2.I.cos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.multiply(2949);
      complex4.divide((-1753.7070135));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(984.8028156375, 984.8028156375);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.ONE.hashCode();
      Complex complex3 = complex1.ZERO.createComplex(984.8028156375, (-2222.8));
      Complex complex4 = complex3.ZERO.asin();
      complex3.ONE.sin();
      complex4.INF.log();
      complex3.ZERO.abs();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.NaN.exp();
      complex6.toString();
      complex6.isInfinite();
      complex6.getReal();
      complex5.ONE.multiply(0.0);
      complex2.INF.acos();
      Complex.valueOf((-20.0), (-2222.8));
      complex5.subtract(complex4);
      complex2.sinh();
      complex4.ZERO.multiply(1063);
      complex5.tanh();
      Complex complex8 = complex7.divide(complex4);
      complex5.nthRoot(1);
      Complex complex9 = complex7.tan();
      Complex complex10 = Complex.valueOf(9.704297297526684E31);
      complex9.ZERO.pow(complex10);
      complex5.readResolve();
      complex4.readResolve();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.nthRoot(2108);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cos();
      complex2.INF.asin();
      complex1.divide(0.0);
      complex2.acos();
      complex2.getImaginary();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 2.0);
      complex1.toString();
      complex0.divide(complex1);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.pow(1261.2531471084);
      Complex complex4 = complex3.I.log();
      complex3.acos();
      Complex complex5 = Complex.valueOf(1261.2531471084, 0.0);
      Complex complex6 = complex5.I.multiply(0.0);
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex1.createComplex(1261.2531471084, 1261.2531471084);
      complex7.getArgument();
      complex8.subtract(1024.5712);
      complex2.nthRoot(476);
      complex6.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(234.5674693960455);
      Complex complex1 = complex0.ONE.tanh();
      complex1.NaN.cosh();
      complex0.readResolve();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex1.sqrt1z();
      complex3.INF.subtract(complex2);
      Complex complex4 = complex0.pow(complex1);
      complex1.readResolve();
      complex0.toString();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.log();
      complex6.NaN.createComplex(1087.383486783, 0.0);
      Complex complex7 = complex5.reciprocal();
      complex7.I.readResolve();
      complex0.I.tanh();
      complex7.getReal();
      Complex complex8 = complex4.negate();
      complex8.INF.abs();
      complex3.cos();
      complex3.conjugate();
      complex3.sinh();
      Complex.valueOf(159.8149654428504, 234.5674693960455);
      complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(2885.1393631461);
      complex1.divide(2885.1393631461);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-2843.7229708436635), 2182.3);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-804.7297362740038));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ZERO.createComplex(645.24, (-1467.73492966777));
      Complex complex4 = complex0.I.multiply((-2426));
      complex4.INF.hashCode();
      complex0.getArgument();
      complex1.sqrt();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex0.NaN.conjugate();
      Complex complex2 = complex1.conjugate();
      complex0.ONE.divide(complex2);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.NaN.multiply(complex0);
      complex0.readResolve();
      complex1.sqrt();
      complex1.INF.multiply(complex2);
      complex1.pow(1094.0865);
      complex0.cosh();
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      complex4.tanh();
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      complex0.divide(complex1);
      Complex complex2 = complex0.multiply(500.69745853);
      complex2.NaN.pow(complex0);
      complex0.add(complex2);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ZERO.asin();
      complex2.abs();
      complex3.ONE.asin();
      complex0.toString();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.INF.negate();
      Complex.valueOf(500.69745853);
      Complex complex7 = complex5.INF.negate();
      complex5.exp();
      complex5.sin();
      Complex complex8 = complex5.pow(complex4);
      complex8.ZERO.sin();
      Complex complex9 = complex8.sqrt();
      complex8.getField();
      complex9.hashCode();
      complex0.multiply(complex8);
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.sinh();
      complex10.I.getField();
      complex2.ONE.hashCode();
      Complex complex11 = complex6.multiply(complex4);
      complex11.NaN.getField();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.I.conjugate();
      complex2.ZERO.subtract(complex1);
      complex2.I.abs();
      Complex complex3 = complex1.NaN.subtract((-1069.0));
      Complex complex4 = complex3.I.tan();
      complex0.readResolve();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex5.add(complex4);
      complex3.readResolve();
      complex0.INF.hashCode();
      complex3.asin();
      Complex complex7 = complex1.INF.divide(complex0);
      Complex complex8 = complex1.conjugate();
      complex3.subtract(complex8);
      Complex complex9 = complex8.sqrt1z();
      complex9.INF.hashCode();
      Complex complex10 = complex0.pow(complex6);
      Complex complex11 = complex0.divide(complex1);
      complex11.NaN.abs();
      Complex complex12 = complex9.tan();
      Complex complex13 = complex12.cosh();
      complex5.I.reciprocal();
      complex13.multiply(complex7);
      Complex complex14 = complex5.createComplex(4274.625833128, 4274.625833128);
      complex14.hashCode();
      complex1.add(complex7);
      complex9.multiply(1420);
      complex10.isInfinite();
      complex4.subtract(2657.3324211);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.cos();
      complex2.I.cos();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.getField();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.ONE.pow(0.0);
      complex6.I.pow(0.0);
      complex5.I.getField();
      Complex complex7 = complex0.multiply(0.0);
      complex0.hashCode();
      Complex complex8 = complex4.cosh();
      complex8.getImaginary();
      complex0.divide(0.0);
      complex0.getImaginary();
      Complex complex9 = complex5.sqrt();
      complex7.conjugate();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.tanh();
      complex9.isInfinite();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      complex1.NaN.cosh();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.divide((-4719.44252393201));
      complex5.ONE.getField();
      Complex complex6 = complex0.conjugate();
      complex2.I.add(complex3);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex7.ONE.exp();
      complex9.INF.multiply(0.0);
      Complex complex10 = complex6.INF.tan();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex2.atan();
      complex0.ONE.toString();
      Complex.valueOf((-4719.44252393201));
      complex12.asin();
      Complex complex13 = complex12.I.cosh();
      complex13.ZERO.tanh();
      complex6.equals(complex11);
      complex0.I.cosh();
      complex12.multiply(0.22392448782920837);
      complex4.getImaginary();
      complex0.sqrt();
      complex8.hashCode();
      complex5.getArgument();
      complex6.add(0.0);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-6.294198235));
      complex0.NaN.asin();
      complex0.sin();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-765.0));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      complex3.createComplex(0.0, 0.0);
      Complex complex4 = complex2.INF.asin();
      complex4.ONE.createComplex(0.0, 0.0);
      complex0.ONE.multiply(1531);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex2.asin();
      complex6.ONE.cos();
      complex5.divide((-4.676849004137386E-23));
      complex5.hashCode();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.I.sqrt1z();
      complex2.readResolve();
      complex0.INF.getField();
      Complex complex3 = complex0.pow(Double.NaN);
      Complex complex4 = complex3.ZERO.createComplex(1.4322981952798675E-8, 1164.7096924966295);
      complex4.INF.toString();
      Complex complex5 = complex0.NaN.pow(Double.NaN);
      Complex complex6 = complex0.multiply(complex3);
      complex3.tan();
      Complex.valueOf(1164.7096924966295, 0.0);
      Complex complex7 = complex5.ONE.cosh();
      complex5.ZERO.abs();
      Complex complex8 = complex5.log();
      complex1.isInfinite();
      Complex complex9 = complex2.conjugate();
      complex9.NaN.pow(complex1);
      complex5.log();
      Complex complex10 = complex6.sqrt1z();
      complex7.exp();
      complex0.divide(complex10);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.NaN.subtract(0.0);
      complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.add((double) 1);
      Complex complex4 = complex3.INF.sqrt();
      complex1.ONE.reciprocal();
      complex4.NaN.pow(complex2);
      complex3.I.cosh();
      complex4.NaN.pow((-1934.06427323842));
      complex4.hashCode();
      complex0.INF.nthRoot(1);
      complex0.nthRoot(1);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.atan();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.NaN.readResolve();
      complex7.INF.divide(complex1);
      complex2.getImaginary();
      complex7.nthRoot(1);
      complex7.tanh();
      complex5.getArgument();
      Complex complex8 = complex2.sqrt();
      complex3.INF.reciprocal();
      complex7.readResolve();
      complex8.getReal();
      complex4.asin();
      complex3.subtract(complex8);
      complex8.isInfinite();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ONE.pow(0.0);
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex0.INF.divide(2.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.divide(0.0);
      complex7.I.readResolve();
      complex6.isInfinite();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex5.exp();
      complex7.equals(complex8);
      complex9.INF.nthRoot(1);
      Complex complex10 = complex2.tan();
      Complex complex11 = Complex.ONE;
      complex11.subtract(0.0);
      Complex complex12 = complex10.subtract(complex11);
      Complex complex13 = complex4.atan();
      complex13.ZERO.tanh();
      complex8.add(complex11);
      Complex complex14 = complex7.multiply(complex5);
      complex14.NaN.tan();
      complex9.sqrt();
      complex3.getReal();
      Complex complex15 = complex3.conjugate();
      complex15.I.sqrt1z();
      complex15.divide(complex12);
      complex8.getReal();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1991.733755);
      complex0.abs();
      Complex complex1 = Complex.valueOf(1406.9, 1991.733755);
      Complex complex2 = complex0.createComplex(1151.988379515312, Double.NaN);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.pow(complex3);
      complex4.INF.sinh();
      complex3.isNaN();
      complex1.divide(complex3);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.INF.pow(complex3);
      try { 
        complex6.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-65.305744838));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.I.sqrt();
      complex0.ZERO.readResolve();
      Complex complex4 = complex2.ONE.createComplex((-65.305744838), 60.9527);
      complex4.ONE.getArgument();
      Complex complex5 = complex0.createComplex((-65.305744838), (-2907.9));
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = Complex.valueOf((-65.305744838), 0.0);
      complex6.NaN.getField();
      complex2.subtract((-2907.9));
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex5.sin();
      complex1.multiply(complex9);
      Complex complex11 = complex10.I.cos();
      Complex complex12 = complex1.I.pow(1034.31402137);
      complex12.getField();
      complex3.nthRoot(1);
      Complex complex13 = complex12.negate();
      Complex complex14 = complex10.log();
      Complex complex15 = complex13.createComplex(60.9527, 0.0);
      complex15.divide(complex13);
      complex6.ZERO.sqrt();
      Complex complex16 = complex7.add((-1.0));
      complex16.I.negate();
      complex8.multiply(complex6);
      complex11.divide(0.0);
      complex11.divide(1034.31402137);
      complex14.getImaginary();
      complex10.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0902045062932175E102, 2396.48);
      complex0.I.sqrt1z();
      complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.ZERO.multiply(1.0);
      Complex complex2 = complex0.ZERO.multiply(1.4999452522236406E230);
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.ZERO.pow(complex1);
      complex3.hashCode();
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.pow(1.4999452522236406E230);
      Complex complex8 = complex1.I.sqrt();
      complex1.NaN.add(complex2);
      complex4.ZERO.sinh();
      Complex complex9 = complex6.ZERO.reciprocal();
      complex9.ONE.asin();
      Complex complex10 = complex0.subtract(197.082546);
      complex10.add(816.6848187102);
      complex10.NaN.divide(complex2);
      complex0.toString();
      complex2.getField();
      complex4.readResolve();
      Complex complex11 = complex7.subtract(complex4);
      complex6.tan();
      complex5.acos();
      complex8.subtract(complex2);
      complex11.log();
      complex6.createComplex(816.6848187102, 20.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2202.1081799396);
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ONE.sin();
      complex1.reciprocal();
      Complex complex3 = complex2.ZERO.tanh();
      complex0.hashCode();
      complex1.I.pow(2202.1081799396);
      Complex complex4 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.multiply(complex4);
      complex1.isNaN();
      complex1.acos();
      complex4.hashCode();
      Complex complex7 = complex4.multiply((-20.0));
      complex7.I.hashCode();
      Complex complex8 = Complex.valueOf((-20.0), (-20.0));
      complex5.ONE.hashCode();
      Complex complex9 = complex5.log();
      complex5.tan();
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex10.INF.subtract((-20.0));
      complex11.ONE.tanh();
      complex10.divide(2202.1081799396);
      Complex complex12 = complex8.divide(complex3);
      complex6.pow(complex5);
      complex5.exp();
      complex9.cos();
      complex1.cos();
      complex7.reciprocal();
      complex12.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-2806.5798593305203));
      Complex complex2 = complex1.ONE.multiply((-2806.5798593305203));
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = Complex.valueOf((-2806.5798593305203), (-2806.5798593305203));
      complex1.getImaginary();
      complex3.INF.reciprocal();
      complex1.exp();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.subtract(0.0);
      Complex complex6 = complex5.ZERO.subtract(2207.0);
      complex3.hashCode();
      Complex complex7 = complex2.pow(673.444441156645);
      complex3.getField();
      complex4.pow(0.0);
      complex7.getImaginary();
      complex3.readResolve();
      complex0.getArgument();
      Complex complex8 = complex6.add(complex4);
      complex3.tanh();
      complex8.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-4.674900007989718E-9));
      int int0 = 0;
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.multiply(144);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(complex1);
      complex4.I.sqrt1z();
      complex4.ONE.createComplex(144, 0.0);
      complex4.I.abs();
      complex4.I.hashCode();
      complex3.INF.add(2239.36);
      complex0.hashCode();
      Complex complex5 = complex0.I.cosh();
      Complex complex6 = complex5.subtract(complex0);
      complex0.isInfinite();
      complex5.I.hashCode();
      complex2.ONE.pow(1814.99);
      complex0.getImaginary();
      complex0.log();
      complex6.getReal();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex2.tan();
      complex8.I.exp();
      complex3.isNaN();
      complex7.isNaN();
      complex7.multiply((-2568));
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.INF.subtract(complex1);
      complex3.ONE.multiply((-1822));
      complex0.ZERO.toString();
      complex0.NaN.divide(complex1);
      Complex complex4 = complex0.ONE.subtract((-1439.3869051));
      complex4.sin();
      complex4.ONE.abs();
      complex4.ONE.getField();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.INF.sin();
      Complex complex2 = complex0.conjugate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.2184450328350067);
      complex0.NaN.divide(0.2184450328350067);
      complex0.nthRoot(1);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.551170809294396E-181);
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.divide(0.0);
      complex2.multiply(7);
      complex1.getField();
      Complex complex3 = Complex.valueOf((-8.008561371849434E-8));
      complex3.NaN.log();
      complex0.reciprocal();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex0.createComplex((-3002.12007), 0.0);
      complex3.I.multiply((-1533.7406930549));
      complex5.ZERO.atan();
      complex2.ZERO.getField();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.ONE.cos();
      complex6.ZERO.toString();
      complex2.isNaN();
      Complex complex8 = complex4.subtract(complex2);
      Complex complex9 = complex2.pow(complex8);
      Complex complex10 = complex2.cos();
      complex10.ONE.log();
      Complex complex11 = complex3.subtract(complex9);
      complex11.toString();
      complex1.pow(0.0);
      complex5.isInfinite();
      complex7.createComplex(0.0, 0.0);
      try { 
        complex5.nthRoot((-982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -982
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.ONE.tanh();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.reciprocal();
      complex0.I.sin();
      complex0.equals("");
      complex0.isNaN();
      complex3.getField();
      complex1.pow(0.0);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ZERO.multiply((-841));
      complex5.multiply(0.0);
      complex5.sin();
      complex5.abs();
      complex3.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2447.34), (-2447.34));
      complex0.I.exp();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.I.multiply(1);
      Complex complex3 = complex1.sqrt1z();
      complex0.NaN.getField();
      complex2.cosh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double double0 = 0.0;
      Complex.valueOf(0.0, 0.0);
      Complex complex0 = new Complex(0.0);
      int int0 = (-4429);
      complex0.ZERO.multiply((-4429));
      int int1 = (-340);
      try { 
        complex0.I.nthRoot((-340));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -340
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(198.06096635, 2733.046029363);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.INF.log();
      complex0.ZERO.asin();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.INF.sqrt1z();
      complex6.ZERO.sqrt1z();
      complex5.cosh();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = Complex.valueOf(198.06096635);
      complex0.getField();
      Complex complex10 = complex3.log();
      complex10.ONE.pow((-3417.825583849));
      complex1.pow(complex2);
      complex8.sinh();
      complex9.toString();
      Complex.valueOf(2733.046029363, 0.6664261817932129);
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(69.545, (-343.766));
      Complex complex2 = complex1.INF.cos();
      complex2.ZERO.abs();
      complex0.I.pow(complex1);
      complex0.asin();
      complex2.tanh();
      complex2.nthRoot(1);
      Complex complex3 = complex0.pow(complex2);
      complex2.INF.pow(complex0);
      complex3.ONE.subtract((-343.766));
      complex1.sqrt1z();
      Complex.valueOf(0.0);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.multiply((-58));
      complex2.NaN.sqrt();
      complex0.NaN.readResolve();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.pow((double) (-58));
      complex6.I.multiply(complex0);
      Complex complex7 = complex3.conjugate();
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = complex2.I.abs();
      assertEquals(1.0, double1, 0.01);
      
      complex5.add(0.0);
      Complex complex8 = Complex.valueOf((-350.67), (double) (-58));
      Complex complex9 = complex2.pow(complex7);
      Complex complex10 = complex9.ZERO.add(complex6);
      Complex complex11 = complex10.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1);
      assertTrue(list0.contains(complex0));
      
      Complex complex12 = complex3.conjugate();
      Complex complex13 = complex7.sqrt1z();
      Complex complex14 = complex13.ZERO.add(3.961429477016909E-107);
      assertEquals(3.961429477016909E-107, complex14.getReal(), 0.01);
      
      double double2 = complex8.abs();
      assertEquals(355.43416957293226, double2, 0.01);
      
      Complex complex15 = complex1.subtract(complex3);
      Complex complex16 = complex15.ONE.sin();
      Complex complex17 = complex7.ONE.multiply(complex4);
      assertSame(complex17, complex13);
      
      double double3 = complex16.getArgument();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.8414709848078965, complex16.getReal(), 0.01);
      
      complex3.pow(complex5);
      complex10.getImaginary();
      assertSame(complex10, complex5);
      
      List<Complex> list1 = complex8.nthRoot(1);
      assertEquals(1, list1.size());
      assertEquals((-350.67), complex8.getReal(), 0.01);
      
      Complex complex18 = complex2.reciprocal();
      assertFalse(complex18.isNaN());
      assertEquals(-0.0, complex18.getReal(), 0.01);
      assertSame(complex1, complex12);
  }
}
