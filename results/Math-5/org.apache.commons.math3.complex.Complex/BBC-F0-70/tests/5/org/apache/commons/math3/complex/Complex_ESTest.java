/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:35:02 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.I.tan();
      complex0.pow((-20.0));
      Complex complex3 = complex1.createComplex((-20.0), (-20.0));
      Complex complex4 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ZERO;
      complex3.divide(complex5);
      complex2.nthRoot(2311);
      Complex complex6 = complex4.multiply((-2426.0));
      complex4.multiply(complex6);
      complex2.subtract((-2426.0));
      complex5.add((double) 2311);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
      complex0.pow(0.016567292248307774);
      Complex complex1 = Complex.valueOf(0.016567292248307774, Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-2172.4));
      Complex complex1 = complex0.I.createComplex(8.378574405736031E-247, 8.378574405736031E-247);
      Complex complex2 = complex0.ONE.sqrt1z();
      complex2.ZERO.log();
      Complex complex3 = complex1.ZERO.subtract(0.5);
      complex0.getArgument();
      Complex complex4 = Complex.valueOf((-2337.3018), Double.POSITIVE_INFINITY);
      Complex.valueOf(0.18659821427397733, (-2172.4));
      complex1.I.getArgument();
      Complex complex5 = complex4.INF.multiply(2481.931795);
      complex4.I.readResolve();
      Complex complex6 = complex3.INF.sqrt1z();
      complex6.abs();
      Complex complex7 = complex0.subtract(complex4);
      complex3.nthRoot(2354);
      complex1.I.sin();
      complex7.INF.cos();
      complex5.I.exp();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.add(complex8);
      complex7.tanh();
      complex3.multiply(complex7);
      complex4.exp();
      complex4.sinh();
      complex9.conjugate();
      complex5.add(complex3);
      complex2.sqrt1z();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-515.76706), 1.2708985520400816E62);
      Complex.valueOf(20.0);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.I.multiply(7);
      complex1.ONE.reciprocal();
      complex3.NaN.acos();
      Complex complex4 = complex0.I.atan();
      complex4.sin();
      complex0.tanh();
      complex0.cosh();
      complex2.pow(complex0);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.INF.divide(2.0);
      complex6.INF.multiply((-924));
      Complex complex7 = complex2.log();
      Complex complex8 = Complex.INF;
      complex2.add(complex8);
      complex7.cosh();
      complex2.add((double) 7);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1153.77693186));
      complex0.abs();
      Complex complex2 = complex1.createComplex(1.0, Double.POSITIVE_INFINITY);
      complex2.multiply(1.5707961389790834);
      complex1.exp();
      Complex complex3 = Complex.I;
      complex3.hashCode();
      Complex complex4 = complex2.multiply(2.0);
      complex3.asin();
      try { 
        complex4.nthRoot((-653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -653
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(25.70115295994001);
      Complex complex1 = complex0.pow(25.70115295994001);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      Complex complex2 = Complex.INF;
      complex1.tan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4059.5167);
      Complex complex1 = new Complex(4059.5167, 4059.5167);
      Complex complex2 = complex1.atan();
      complex2.pow(complex1);
      complex0.tanh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.tanh();
      complex3.toString();
      Complex complex4 = new Complex(0.13770505189968568);
      Complex complex5 = complex4.subtract(complex0);
      complex5.nthRoot(1218);
      complex2.atan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(208.77026797);
      Complex complex2 = complex0.atan();
      complex2.nthRoot(682);
      complex0.abs();
      complex0.createComplex(Double.POSITIVE_INFINITY, 0.020300358533859253);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(2237.691);
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-245.51335));
      complex3.getField();
      complex1.getField();
      Complex.valueOf((-2494.82457));
      Complex complex4 = new Complex((-2494.82457), (-245.51335));
      complex4.readResolve();
      complex2.equals("W2:?w6tLHlUB'ZX");
      complex0.nthRoot(701);
      Complex complex5 = Complex.I;
      Complex complex6 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex7 = new Complex(6.283185307179586, 1.0);
      complex7.pow((-20.0));
      Complex complex8 = new Complex((-147.67400280147504), (-1339.13786127307));
      complex0.tanh();
      Complex complex9 = complex0.sqrt1z();
      try { 
        complex9.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-2648.3931554), (-2648.3931554));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(7.3370297995122135E-152);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-3370.49566712), 3503.9918003);
      Complex complex5 = complex2.subtract(20.0);
      complex2.pow(4120.020279748);
      complex1.divide(complex0);
      Complex complex6 = new Complex((-1104.0543360506217), 1448.60569);
      complex5.tanh();
      Complex complex7 = complex6.divide(20.0);
      complex7.NaN.tanh();
      complex4.atan();
      Complex complex8 = complex4.multiply(complex1);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.divide(1.1475955030427985E107);
      Complex complex1 = new Complex((-4.220866994206517E-8), 1.1475955030427985E107);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.add(complex4);
      complex1.ONE.acos();
      Complex complex6 = Complex.valueOf(804.27964);
      complex6.ZERO.sqrt();
      complex3.INF.toString();
      Complex complex7 = complex1.subtract((-4.220866994206517E-8));
      Complex complex8 = complex7.log();
      Complex complex9 = complex5.divide(complex8);
      complex3.reciprocal();
      complex4.multiply(complex2);
      complex9.getImaginary();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.subtract(complex1);
      complex3.nthRoot(672);
      complex0.abs();
      Complex complex4 = new Complex(672, (-20.0));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-2028.7037168), (-2028.7037168));
      complex0.getField();
      Complex complex1 = complex0.subtract((-2028.7037168));
      complex1.I.atan();
      Complex complex2 = complex0.add(0.6729245185852051);
      complex2.ZERO.exp();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.539322018623352, (-1498.9592128114812));
      Complex complex1 = new Complex(1.0, 1.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.divide(complex3);
      complex7.cos();
      complex7.createComplex(1157.69, (-1498.9592128114812));
      complex2.negate();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = 0.539322018623352;
      Complex complex0 = new Complex((-1498.9592128114812), 0.539322018623352);
      complex0.getField();
      Complex.valueOf((-1498.9592128114812));
      complex0.INF.getArgument();
      Complex complex1 = Complex.NaN;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.getField();
      Complex complex1 = Complex.valueOf(0.7853981633974483);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      complex3.equals(complex2);
      complex1.nthRoot(701);
      Complex complex4 = Complex.I;
      complex1.tan();
      Complex complex5 = new Complex(0.7853981633974483, (-2494.82457));
      Complex complex6 = Complex.INF;
      complex3.exp();
      Complex.valueOf((double) 701);
      complex1.sqrt1z();
      complex6.log();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      complex1.ONE.subtract((-1621.113289446));
      Complex complex2 = complex0.ZERO.divide((-1621.113289446));
      complex2.ZERO.getField();
      complex0.NaN.getField();
      complex2.getField();
      Complex complex3 = Complex.ONE;
      complex2.atan();
      Complex complex4 = new Complex((-1621.113289446));
      Complex complex5 = Complex.I;
      complex5.nthRoot(770);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.ZERO.divide((-1621.113289446));
      complex2.ZERO.getField();
      complex0.NaN.getField();
      Complex.valueOf((-2494.82457));
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.equals(complex3);
      complex0.ZERO.nthRoot(701);
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex(4120.020279748, 6.283185307179586);
      complex1.pow((-75.38113182913592));
      Complex complex6 = new Complex(6.283185307179586, (-147.67400280147504));
      complex6.tanh();
      Complex complex7 = new Complex((-2791.5), Double.POSITIVE_INFINITY);
      complex3.divide((-2494.82457));
      complex7.multiply((-248));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(1350.1, (-1131.3178036));
      complex0.getField();
      complex0.NaN.getArgument();
      Complex complex1 = complex0.subtract((-1131.3178036));
      Complex complex2 = complex1.atan();
      complex2.add(0.0);
      complex2.exp();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.sqrt1z();
      complex0.sinh();
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1498.9592128114812), (-1498.9592128114812));
      complex0.getField();
      Complex.valueOf(0.539322018623352);
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.ONE;
      complex3.negate();
      Complex complex4 = new Complex((-1498.9592128114812));
      Complex complex5 = complex4.sin();
      complex3.toString();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex5.subtract((-2.356194490192345));
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex6.add(0.539322018623352);
      Complex complex8 = Complex.valueOf(368.515, (-1498.9592128114812));
      complex8.exp();
      complex1.pow(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex7.divide(1621.113289446);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(2060.907140020418, 2060.907140020418);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.I.multiply(2060.907140020418);
      Complex complex5 = complex4.ONE.negate();
      complex0.toString();
      complex0.getField();
      Complex complex6 = Complex.valueOf(691.7690298, 691.7690298);
      complex2.divide(complex3);
      complex0.getReal();
      complex3.isNaN();
      complex1.multiply(1);
      complex5.tanh();
      complex6.isInfinite();
      Complex complex7 = Complex.ONE;
      complex7.INF.sqrt1z();
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = new Complex((-2648.3931554), (-1213.90474711));
      Complex complex4 = complex3.subtract((-2648.3931554));
      complex0.exp();
      Complex complex5 = complex1.exp();
      complex2.sqrt1z();
      Complex complex6 = complex5.tanh();
      complex3.getArgument();
      complex6.add((-0.9127689912020085));
      complex2.exp();
      complex3.reciprocal();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(2060.907140020418, 2060.907140020418);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.ONE.conjugate();
      complex3.toString();
      Complex.valueOf(2246879.4308041753);
      complex1.getArgument();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.asin();
      complex6.negate();
      complex4.sin();
      Complex complex7 = Complex.ZERO;
      complex7.toString();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.subtract(3153.78836431895);
      Complex complex10 = Complex.ONE;
      complex10.multiply(1499.9592128114812);
      complex1.add(Double.NaN);
      Complex.valueOf(2246879.4308041753, 2.4141423627760256E278);
      Complex complex11 = Complex.NaN;
      complex11.exp();
      Complex complex12 = complex11.pow(Double.NaN);
      complex9.tanh();
      complex12.divide(2246879.4308041753);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1498.9592128114812), 0.539322018623352);
      complex0.getField();
      Complex complex1 = complex0.multiply((-0.9996955962246487));
      Complex complex2 = complex1.negate();
      complex2.toString();
      complex0.getField();
      Complex complex3 = Complex.valueOf(0.539322018623352, (-1565.150743));
      Complex complex4 = new Complex(2.3250694274902344);
      Complex complex5 = complex4.divide(complex2);
      complex1.getReal();
      complex5.isNaN();
      complex1.multiply(1036);
      Complex complex6 = complex5.tanh();
      complex2.isInfinite();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.subtract(complex1);
      complex4.cos();
      complex4.readResolve();
      complex6.sqrt1z();
      Complex complex9 = Complex.INF;
      complex9.abs();
      complex8.asin();
      complex0.add((-1565.150743));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex1 = complex0.pow((-794.08317));
      complex1.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.exp();
      complex1.ONE.multiply(1);
      Complex complex4 = complex2.INF.tanh();
      complex0.isInfinite();
      Complex complex5 = complex2.subtract(complex3);
      complex5.ONE.cos();
      complex5.readResolve();
      complex4.toString();
      complex0.sqrt1z();
      complex4.abs();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.tan();
      Complex complex1 = complex0.ZERO.divide((-1621.113289446));
      complex1.ZERO.getField();
      complex0.NaN.getField();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.ZERO.nthRoot(701);
      Complex complex2 = complex0.multiply(6.283185307179586);
      complex2.ONE.tan();
      Complex complex3 = new Complex((-1621.113289446), (-1.0));
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(453.73815436416, 0.0);
      complex0.getField();
      complex0.subtract((-3324.9925));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.add((-19.370159823514513));
      Complex complex3 = complex2.exp();
      complex1.reciprocal();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = (-3128.972404624943);
      Complex complex0 = Complex.valueOf((-3128.972404624943), (-3128.972404624943));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.NaN.getArgument();
      complex1.tan();
      Complex complex3 = complex1.INF.reciprocal();
      complex3.I.negate();
      complex3.I.readResolve();
      complex1.hashCode();
      Complex complex4 = complex0.cos();
      complex4.NaN.atan();
      Complex complex5 = complex4.sin();
      double double1 = (-735.78257);
      Complex.valueOf((-735.78257));
      try { 
        complex5.nthRoot((-1284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,284
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1303.8));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.NaN.divide((-1303.8));
      Complex complex5 = complex2.divide(complex1);
      complex2.I.sinh();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex5.sinh();
      complex7.INF.tan();
      Complex complex8 = complex1.subtract(complex0);
      complex8.ONE.sqrt1z();
      Complex complex9 = complex6.subtract((-2.718281828459045));
      complex5.exp();
      complex9.cos();
      Complex.valueOf(1954.7166, (-1498.9592128114812));
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.divide(complex1);
      complex3.acos();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex4.subtract((-1195.48887625));
      Complex complex7 = complex2.asin();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex3.subtract(complex5);
      Complex complex10 = complex9.reciprocal();
      complex8.getField();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.nthRoot(2062);
      complex5.add((-1195.48887625));
      complex6.getField();
      Complex complex11 = complex10.multiply(complex6);
      complex6.multiply((-702));
      complex9.negate();
      Complex complex12 = complex11.log();
      complex0.hashCode();
      Complex complex13 = complex12.sin();
      complex7.multiply(complex13);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-6.364563771711373E-8));
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex4.acos();
      complex3.add(complex0);
      Complex complex6 = complex4.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.asin();
      complex6.sqrt();
      Complex complex9 = Complex.ZERO;
      complex8.subtract(complex9);
      complex0.reciprocal();
      Complex complex10 = Complex.INF;
      complex10.getField();
      Complex complex11 = complex6.divide(4671.3246598);
      Complex complex12 = complex11.add(4671.3246598);
      complex12.getField();
      complex6.log();
      complex12.negate();
      complex2.log();
      complex9.hashCode();
      complex7.sin();
      Complex complex13 = complex9.multiply(complex5);
      complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.divide(complex2);
      complex1.getReal();
      complex3.isNaN();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex3.multiply(0.0);
      Complex complex7 = complex4.tan();
      complex4.sqrt1z();
      complex6.tanh();
      complex5.sqrt();
      complex7.getArgument();
      complex5.isNaN();
      complex4.subtract(0.0);
      Complex complex8 = new Complex(0.0, Double.NaN);
      complex0.toString();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex((-24.011715), 3277.162298338157);
      complex3.exp();
      complex8.tanh();
      Complex complex11 = Complex.NaN;
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.I.cosh();
      complex3.divide(complex1);
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex0.I.add(complex2);
      complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.asin();
      complex6.ONE.sqrt();
      complex4.INF.subtract(complex2);
      Complex complex7 = complex4.ZERO.reciprocal();
      complex6.ZERO.getField();
      Complex complex8 = complex6.ONE.divide(Double.POSITIVE_INFINITY);
      complex8.NaN.nthRoot(1);
      complex4.I.add(Double.POSITIVE_INFINITY);
      complex6.NaN.getField();
      complex4.multiply(complex0);
      Complex complex9 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex9.toString();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = new Complex((-1.4255188208147591), (-1008.96096619909));
      complex7.exp();
      Complex complex12 = Complex.INF;
      complex12.tanh();
      Complex complex13 = Complex.NaN;
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = complex0.I.add(complex2);
      Complex complex7 = complex6.subtract(Double.NaN);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex7.sqrt();
      complex0.subtract(complex2);
      complex0.reciprocal();
      complex4.getField();
      Complex complex10 = Complex.valueOf(9.118819143623114E-4);
      Complex complex11 = complex10.divide(Double.NaN);
      complex10.nthRoot(2410);
      complex11.add((-858.1980536245278));
      complex10.getField();
      complex8.multiply(complex3);
      Complex complex12 = Complex.valueOf((-832.73665), Double.POSITIVE_INFINITY);
      complex12.log();
      complex5.multiply(1147);
      Complex complex13 = complex8.negate();
      complex13.log();
      complex13.hashCode();
      complex1.sin();
      complex9.multiply(complex7);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-1498.9592128114812), 0.539322018623352);
      complex0.getField();
      Complex complex1 = Complex.valueOf((-1498.9592128114812));
      complex0.INF.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ONE;
      complex3.nthRoot(670);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.tanh();
      Complex complex8 = Complex.ZERO;
      complex8.sqrt();
      complex3.getArgument();
      complex3.isNaN();
      Complex complex9 = complex6.subtract((-1244.9543132804));
      Complex complex10 = new Complex(1.0, 0.539322018623352);
      complex5.toString();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = new Complex(0.6244332790374756, 1.0);
      complex7.exp();
      complex0.tanh();
      Complex complex13 = Complex.NaN;
      complex1.abs();
      complex1.atan();
      complex9.createComplex((-1928.804077), (-1928.804077));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex1 = complex0.pow((-794.08317));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.tan();
      complex3.exp();
      complex1.sqrt1z();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.sqrt();
      complex5.getArgument();
      complex5.isNaN();
      complex4.subtract(0.0);
      Complex complex6 = new Complex(9.014612241310916E-9, (-2246877.4308041753));
      complex2.toString();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex(1, (-2246877.4308041753));
      Complex complex9 = Complex.valueOf((-2967.18732018178), 38.71639462568127);
      Complex complex10 = complex9.exp();
      complex8.tanh();
      Complex complex11 = Complex.NaN;
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.I.atan();
      complex2.sqrt1z();
      complex1.tanh();
      Complex complex3 = Complex.I;
      complex3.sqrt();
      complex1.getArgument();
      complex1.INF.sqrt1z();
      complex2.isNaN();
      complex1.subtract(6.283185307179586);
      Complex complex4 = new Complex((-3.3356477410961816E-4), 6.283185307179586);
      complex3.toString();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(0.0, 38.71639462568127);
      Complex complex7 = complex4.exp();
      complex7.tanh();
      Complex complex8 = Complex.NaN;
      complex3.abs();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(2060.907140020418, 2060.907140020418);
      complex1.NaN.tanh();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.I.multiply(2060.907140020418);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex0.subtract(2779.407262405);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = new Complex(2779.407262405);
      complex9.subtract(complex8);
      Complex complex10 = complex5.reciprocal();
      complex2.getField();
      Complex complex11 = complex8.divide(2779.407262405);
      complex4.nthRoot(734);
      complex5.add(Double.POSITIVE_INFINITY);
      complex10.getField();
      complex10.multiply(complex11);
      complex1.log();
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.multiply(939);
      complex6.negate();
      complex3.log();
      complex12.hashCode();
      Complex complex14 = complex7.sin();
      complex8.multiply(complex13);
      complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(2060.907140020418, 2060.907140020418);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.I.multiply(2060.907140020418);
      Complex complex5 = complex4.ONE.negate();
      complex0.toString();
      complex0.getField();
      complex1.multiply(complex5);
      Complex complex6 = new Complex((-553.0));
      complex6.asin();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex5.sin();
      complex7.toString();
      complex8.negate();
      complex6.multiply((-1.5430806348152437));
      complex2.add(2060.907140020418);
      complex7.sqrt1z();
      Complex complex9 = Complex.valueOf((-1.5430806348152437), 15.2179009328);
      complex9.atan();
      Complex complex10 = Complex.ONE;
      complex10.asin();
      complex4.sin();
      Complex complex11 = Complex.ZERO;
      complex8.multiply((-659.5384));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.cosh();
      complex3.divide(complex1);
      Complex complex4 = complex0.ZERO.acos();
      complex0.I.add(complex2);
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.asin();
      Complex complex6 = complex2.multiply(complex4);
      complex0.asin();
      complex6.negate();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.sin();
      complex5.toString();
      complex2.negate();
      complex8.multiply(5.251554594269693E-10);
      Complex complex9 = Complex.I;
      complex9.add(5.251554594269693E-10);
      complex4.sqrt1z();
      Complex complex10 = Complex.INF;
      complex10.atan();
      Complex complex11 = Complex.I;
      complex9.sin();
      Complex complex12 = Complex.ZERO;
      complex11.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1498.9592128114812), (-1732.5));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex2.subtract((-1909.04039005));
      complex1.asin();
      complex6.sqrt();
      Complex complex8 = new Complex(1882.339002853851, 1050.34907283012);
      Complex complex9 = complex8.subtract(complex3);
      Complex complex10 = complex1.reciprocal();
      complex0.getField();
      Complex complex11 = complex6.divide(Double.POSITIVE_INFINITY);
      complex9.ONE.getField();
      complex7.nthRoot(1792);
      complex1.add(2581.95382492912);
      complex3.getField();
      complex9.multiply(complex11);
      complex11.log();
      complex9.multiply(1792);
      complex4.negate();
      complex7.log();
      Complex complex12 = Complex.I;
      complex12.hashCode();
      complex10.sin();
      complex11.multiply(complex12);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-338.817334353371));
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.acos();
      complex2.add(complex0);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex2.asin();
      complex3.sqrt();
      Complex complex5 = complex2.subtract(complex1);
      complex5.getField();
      Complex complex6 = complex1.divide(0.0);
      complex2.nthRoot(841);
      complex5.add(0.0);
      complex6.getField();
      complex5.multiply(complex0);
      Complex complex7 = new Complex(841);
      complex7.log();
      complex0.multiply((-702));
      complex5.negate();
      complex0.log();
      complex5.hashCode();
      complex0.sin();
      Complex complex8 = new Complex(0.0);
      complex8.multiply(complex4);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(2060.907140020418, 2060.907140020418);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.I.multiply(2060.907140020418);
      complex4.ONE.negate();
      complex0.toString();
      complex0.getField();
      Complex.valueOf(691.7690298, 691.7690298);
      Complex complex5 = complex2.divide(complex3);
      complex0.getReal();
      complex3.isNaN();
      complex5.conjugate();
      complex5.cos();
      complex1.add((-2.0332050860436034E-263));
      Complex complex6 = new Complex(691.7690298, 1.1752011936438014);
      complex6.exp();
      complex1.reciprocal();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = Complex.valueOf((-675.7247), (-1832.0184127639757));
      Complex complex4 = complex0.subtract((-1832.0184127639757));
      complex3.tanh();
      Complex complex5 = complex2.sqrt();
      complex0.abs();
      complex4.negate();
      complex5.tanh();
      complex1.cosh();
      Complex complex6 = complex3.tan();
      complex0.divide((-2791.5));
      try { 
        complex6.nthRoot((-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -104
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.I.subtract((-1213.90474711));
      complex1.ONE.exp();
      Complex complex4 = Complex.I;
      complex2.sqrt1z();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.sqrt();
      complex2.getArgument();
      complex5.isNaN();
      complex6.subtract(Double.NaN);
      complex0.toString();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex((-1213.90474711));
      complex3.reciprocal();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.pow(307.296);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.tan();
      complex0.exp();
      Complex complex4 = complex2.multiply(1);
      Complex complex5 = complex3.tanh();
      complex5.isInfinite();
      complex3.subtract(complex1);
      complex4.cos();
      complex3.readResolve();
      Complex complex6 = complex1.sqrt1z();
      complex6.abs();
      Complex complex7 = complex5.acos();
      complex7.ONE.reciprocal();
      complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5047.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.multiply(1.7778112039716255E-8);
      Complex complex4 = complex0.negate();
      complex4.toString();
      complex1.getField();
      Complex.valueOf((-4082.80560624246), (-1745.9));
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.divide(complex5);
      complex3.getReal();
      complex6.isNaN();
      Complex complex7 = Complex.valueOf(1.1660367213160203E-8);
      complex7.conjugate();
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.valueOf((-1418.8324646363048), 0.41421356237309515);
      complex6.subtract(691.7690298);
      complex9.tanh();
      Complex complex10 = complex2.sqrt();
      complex10.abs();
      Complex complex11 = complex2.negate();
      complex6.tanh();
      complex1.cosh();
      complex11.tan();
      Complex complex12 = new Complex((-4082.80560624246));
      try { 
        complex3.nthRoot((-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -104
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.ZERO.divide((-1621.113289446));
      complex2.ZERO.getField();
      complex0.NaN.getField();
      Complex.valueOf((-2494.82457));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.ZERO.nthRoot(701);
      Complex complex3 = complex0.multiply(6.283185307179586);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.divide(0.021256837993860245);
      complex5.tanh();
      Complex complex6 = complex0.sinh();
      complex6.tanh();
      Complex complex7 = complex3.cos();
      complex7.I.getArgument();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex9.INF.exp();
      complex8.ZERO.hashCode();
      complex10.ZERO.hashCode();
      complex8.asin();
      complex9.ZERO.multiply(1.5707963267948966);
      Complex complex11 = complex1.asin();
      complex11.log();
      complex6.multiply(1.5707963267948966);
      complex9.subtract(2503.947);
      complex9.getImaginary();
      complex0.cosh();
      complex4.divide(complex7);
      Complex.valueOf(1.5707963267948966, (-1.0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add((-782.3721896086));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf((-999.8303));
      Complex complex6 = complex4.I.tanh();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex7.ONE.tan();
      complex8.INF.pow(complex7);
      Complex complex9 = complex5.ONE.pow((-999.8303));
      Complex complex10 = complex2.divide(complex1);
      Complex complex11 = complex10.I.reciprocal();
      complex11.negate();
      complex4.getArgument();
      complex10.getReal();
      Complex complex12 = complex3.sin();
      complex12.hashCode();
      complex9.toString();
      Complex complex13 = complex2.tanh();
      Complex.valueOf((-1.6149279479975042E-9), 0.0);
      complex13.conjugate();
      Complex complex14 = Complex.ZERO;
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(0.4084761543836649);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex2.tanh();
      complex6.cosh();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.pow(0.1116682286435325);
      Complex complex10 = complex2.divide(complex8);
      complex0.reciprocal();
      complex1.negate();
      complex0.getArgument();
      complex5.getReal();
      Complex complex11 = complex0.sin();
      complex11.INF.divide(0.4084761543836649);
      complex10.hashCode();
      complex10.toString();
      complex7.tanh();
      Complex complex12 = Complex.valueOf(0.749677077547504, 2261.223476860852);
      complex12.conjugate();
      complex2.subtract(complex4);
      complex1.multiply(1819);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.divide(complex2);
      complex1.getReal();
      complex3.isNaN();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.cos();
      Complex.valueOf(1.149869441986084, (-3529.545998688542));
      Complex complex6 = complex4.subtract(3.3356477410961816E-4);
      complex0.tanh();
      complex3.sqrt();
      Complex complex7 = Complex.NaN;
      complex7.abs();
      complex3.negate();
      complex7.tanh();
      Complex complex8 = Complex.ZERO;
      complex8.cosh();
      complex6.tan();
      Complex complex9 = complex5.divide(272.9777013256);
      complex9.nthRoot(1819);
      Complex complex10 = Complex.INF;
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex2.ONE.sinh();
      complex1.INF.multiply(complex3);
      Complex complex4 = complex0.INF.tan();
      complex0.equals(complex1);
      complex1.ONE.divide(0.0);
      complex0.getReal();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.acos();
      complex6.ZERO.getField();
      complex0.isNaN();
      complex3.getImaginary();
      complex1.multiply(0.0);
      complex1.getArgument();
      complex6.sin();
      complex2.hashCode();
      complex4.toString();
      Complex complex7 = complex6.tanh();
      Complex.valueOf(0.0, 1422.4);
      complex6.conjugate();
      Complex complex8 = complex7.subtract(complex5);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1497.0), 0.539322018623352);
      complex0.getField();
      Complex complex1 = complex0.divide((-1497.0));
      Complex.valueOf((-2603.6029588), 826.876);
      complex0.hashCode();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.ONE;
      complex3.sqrt1z();
      complex3.atan();
      complex2.subtract((-9.290053015365092E-8));
      complex1.nthRoot(2123);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(503.3780469);
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.negate();
      complex3.sin();
      complex0.toString();
      Complex complex5 = new Complex(0.0, 0.0);
      complex5.negate();
      Complex complex6 = complex2.multiply((-1.0));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.add(complex6);
      complex4.atan();
      try { 
        complex8.nthRoot((-927));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -927
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.INF.tan();
      complex0.equals(complex0);
      Complex complex3 = complex0.ONE.divide(0.0);
      complex0.getReal();
      complex0.acos();
      Complex complex4 = complex0.acos();
      complex4.ZERO.getField();
      complex0.isNaN();
      complex1.getImaginary();
      Complex complex5 = complex0.multiply(0.0);
      complex5.ZERO.hashCode();
      Complex complex6 = complex3.sin();
      complex3.NaN.multiply(418);
      complex0.isInfinite();
      Complex complex7 = Complex.valueOf(0.0, 272.204439071);
      complex7.ZERO.pow(0.0);
      complex2.abs();
      complex2.log();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.INF.add(0.0);
      complex3.ONE.sqrt1z();
      complex5.isInfinite();
      complex1.subtract(complex4);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.cos();
      complex2.readResolve();
      complex7.sqrt1z();
      Complex complex8 = Complex.I;
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.I.subtract((-1213.90474711));
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.divide(complex0);
      complex6.getReal();
      complex4.isNaN();
      complex1.conjugate();
      complex2.cos();
      Complex complex7 = Complex.valueOf((-2355.44796), Double.NaN);
      Complex complex8 = complex4.subtract((-1832.0184127639757));
      complex7.sqrt();
      Complex complex9 = Complex.valueOf((-1213.90474711));
      complex9.abs();
      complex6.tanh();
      complex5.cosh();
      complex8.tan();
      complex4.divide((-2355.44796));
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add((-782.3721896086));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.sqrt1z();
      complex3.getField();
      Complex.valueOf(1.0, 1.0);
      Complex complex6 = complex3.divide(complex5);
      complex4.getReal();
      Complex complex7 = new Complex((-782.3721896086));
      complex7.isNaN();
      Complex complex8 = complex5.conjugate();
      complex5.cos();
      Complex complex9 = Complex.valueOf(20.0, (-782.3721896086));
      Complex complex10 = complex6.subtract(1318.048168);
      complex10.tanh();
      Complex complex11 = complex9.sqrt();
      complex4.abs();
      complex5.negate();
      Complex complex12 = new Complex((-782.3721896086));
      complex12.tanh();
      complex11.cosh();
      complex12.tan();
      Complex complex13 = new Complex(Double.NaN, (-782.3721896086));
      Complex complex14 = complex13.divide(1.0);
      complex14.nthRoot(727);
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex1.INF.multiply(complex3);
      complex0.INF.tan();
      complex0.equals(complex1);
      Complex complex5 = complex1.ONE.divide(0.0);
      complex0.getReal();
      complex0.acos();
      Complex complex6 = complex1.acos();
      complex6.I.multiply(8.738625278484571E-8);
      complex6.ZERO.getField();
      complex0.isNaN();
      complex3.getImaginary();
      Complex complex7 = complex1.multiply(0.0);
      complex7.ZERO.hashCode();
      Complex complex8 = complex5.sin();
      complex5.NaN.multiply(418);
      complex2.isInfinite();
      complex8.ONE.atan();
      Complex complex9 = Complex.valueOf(0.0, 272.204439071);
      complex9.ZERO.pow(0.0);
      complex4.abs();
      complex4.log();
      complex8.log();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(503.3780469);
      Complex complex1 = Complex.valueOf(503.3780469, 503.3780469);
      complex0.INF.hashCode();
      complex0.cos();
      complex0.getField();
      double double0 = (-1389.8100836);
      complex0.divide((-1389.8100836));
      int int0 = 2045222521;
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.INF.reciprocal();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = Complex.valueOf(1400.14414122852);
      complex6.divide(complex7);
      complex1.I.multiply(0);
      Complex complex8 = complex3.sinh();
      complex8.subtract(complex7);
      complex1.subtract(complex5);
      Complex complex9 = complex1.tanh();
      complex9.NaN.add(2283.387368988694);
      complex2.toString();
      complex0.sin();
      complex8.getReal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.hashCode();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ZERO.negate();
      complex2.INF.abs();
      Complex complex4 = complex0.multiply((-3163.1465));
      Complex complex5 = complex1.pow((-3163.1465));
      complex5.I.cosh();
      Complex.valueOf((-185.52));
      complex3.ONE.multiply(1097);
      Complex.valueOf((-3163.1465));
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex1.pow((-3163.1465));
      complex7.add(complex4);
      Complex complex8 = complex2.tanh();
      complex5.equals(complex6);
      complex8.abs();
      complex0.negate();
      complex2.pow((-3163.1465));
      complex3.sin();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1130.39312284395), (-1130.39312284395));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-732.123), (-860.59519284996));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ONE.cosh();
      complex2.multiply(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      complex3.NaN.add(complex4);
      complex2.INF.add((-2591.87052));
      complex0.equals(complex2);
      complex2.nthRoot(25);
      complex3.equals(complex1);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.multiply((-940));
      complex3.I.abs();
      complex3.ZERO.getArgument();
      complex1.ONE.reciprocal();
      Complex complex4 = complex0.negate();
      complex0.toString();
      Complex complex5 = complex3.acos();
      complex5.NaN.add(complex1);
      complex5.ONE.divide(complex2);
      complex4.getReal();
      complex1.subtract(2.0801124572753906);
      Complex complex6 = complex2.createComplex(1611.7610427329, 2.0801124572753906);
      complex6.ONE.sin();
      complex2.log();
      Complex complex7 = new Complex((-3376.64392));
      Complex complex8 = complex7.ZERO.negate();
      complex8.INF.conjugate();
      try { 
        complex7.ONE.nthRoot((-940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -940
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      complex0.getField();
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.INF.cos();
      Complex complex3 = complex2.ONE.sin();
      complex3.ONE.pow(1456.63265374);
      complex1.getImaginary();
      Complex complex4 = complex1.pow(Double.NaN);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.NaN.cosh();
      complex2.cosh();
      complex5.subtract(complex2);
      Complex.valueOf(5238.8492734853);
      Complex complex7 = complex0.add((-2406.379));
      complex7.ZERO.divide(complex0);
      complex0.multiply(3504);
      complex0.isInfinite();
      complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      complex0.ZERO.tan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      complex2.getReal();
      complex3.INF.sqrt();
      complex1.log();
      complex0.getReal();
      complex3.getReal();
      complex1.readResolve();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.createComplex(0.0, 0.0);
      complex4.NaN.readResolve();
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex1.ZERO.subtract(complex6);
      complex7.getImaginary();
      complex7.toString();
      complex0.conjugate();
      complex2.conjugate();
      complex5.pow(0.0);
      complex8.getReal();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2076.614654);
      complex0.subtract(2076.614654);
      complex0.exp();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.createComplex(2076.614654, 2076.614654);
      complex2.sin();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.NaN.exp();
      complex3.ONE.sin();
      Complex complex4 = complex1.ZERO.negate();
      complex0.ONE.subtract(complex1);
      complex0.hashCode();
      complex1.acos();
      Complex complex5 = complex2.cosh();
      complex5.INF.conjugate();
      complex5.ONE.toString();
      complex4.acos();
      Complex complex6 = complex2.tan();
      complex2.getArgument();
      complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex0.ZERO.multiply(complex4);
      complex0.getField();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ONE.add(1.0);
      Complex complex8 = complex5.INF.pow(0.0);
      complex8.I.cosh();
      complex0.multiply(0.0);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.I.cosh();
      complex10.NaN.sqrt();
      complex5.atan();
      complex3.acos();
      complex9.multiply(4130.3);
      Complex.valueOf(0.0);
      complex2.add(0.0);
      complex6.sinh();
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 1.8396930096213817E290;
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf(1.8396930096213817E290, 0.0);
      int int0 = 0;
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1497.0), 0.539322018623352);
      complex0.getField();
      Complex complex1 = complex0.divide((-1497.0));
      complex0.INF.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.INF.multiply(complex2);
      complex0.asin();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.sin();
      complex0.toString();
      complex5.negate();
      Complex complex6 = complex4.multiply(0.7853981633974483);
      complex6.add(complex3);
      complex6.I.atan();
      int int0 = (-927);
      try { 
        complex4.nthRoot((-927));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -927
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.INF.sin();
      complex2.ONE.tan();
      complex2.getArgument();
      complex0.ONE.nthRoot(961);
      complex0.NaN.sqrt1z();
      Complex complex3 = complex0.ONE.log();
      complex3.NaN.getArgument();
      Complex complex4 = complex0.subtract(9.2);
      complex4.ONE.cosh();
      Complex complex5 = complex1.multiply(complex2);
      complex5.ONE.atan();
      Complex complex6 = complex1.createComplex(961, (-2266.844040253208));
      complex6.ZERO.acos();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.asin();
      complex0.toString();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex2.INF.sqrt1z();
      complex3.divide((-1097.284));
      complex4.I.hashCode();
      complex1.getField();
      Complex complex5 = complex1.createComplex((-485.591107291), 0.0);
      complex1.isNaN();
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = complex6.INF.divide(complex2);
      complex7.ONE.sin();
      complex3.negate();
      complex4.readResolve();
      Complex complex8 = complex1.INF.subtract(complex3);
      Complex complex9 = complex5.add(1024.5986092815917);
      complex9.multiply((-1477));
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2153.6656847);
      Complex complex2 = complex0.INF.add(complex1);
      complex2.ZERO.sqrt1z();
      complex0.sinh();
      Complex complex3 = complex0.INF.sin();
      complex3.ZERO.exp();
      Complex complex4 = complex0.I.exp();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = Complex.valueOf((-1.0));
      complex4.getArgument();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.add(0.6729245185852051);
      complex3.ZERO.exp();
      complex1.reciprocal();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.ONE.log();
      complex3.I.conjugate();
      Complex complex4 = complex1.log();
      complex4.multiply(0);
      complex4.ONE.readResolve();
      Complex complex5 = complex2.conjugate();
      complex3.INF.acos();
      Complex complex6 = Complex.valueOf((-1765.9159));
      Complex complex7 = complex5.INF.tan();
      Complex complex8 = complex3.INF.multiply(complex7);
      complex8.INF.negate();
      complex1.toString();
      complex3.cos();
      complex1.multiply((-2367.84735));
      Complex complex9 = Complex.valueOf(0.0, (-2367.84735));
      complex9.sqrt1z();
      complex2.sqrt();
      complex7.log();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex1.INF.multiply(complex3);
      complex0.INF.tan();
      complex0.equals(complex1);
      Complex complex5 = complex1.ONE.divide(0.0);
      complex0.getReal();
      complex0.acos();
      Complex complex6 = complex1.acos();
      complex6.ZERO.getField();
      complex0.isNaN();
      complex3.getImaginary();
      Complex complex7 = complex1.multiply(0.0);
      complex7.ZERO.hashCode();
      Complex complex8 = complex5.sin();
      complex5.NaN.multiply(418);
      complex2.isInfinite();
      Complex complex9 = Complex.valueOf(0.0, 272.204439071);
      complex9.ZERO.pow(0.0);
      complex4.abs();
      complex4.log();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.I.cosh();
      complex3.divide(complex1);
      Complex complex4 = complex0.ZERO.acos();
      complex0.I.add(complex2);
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.ONE.sqrt();
      complex4.INF.subtract(complex2);
      complex4.ZERO.reciprocal();
      complex6.ZERO.getField();
      Complex complex8 = complex6.ONE.divide(Double.POSITIVE_INFINITY);
      complex8.NaN.nthRoot(1);
      Complex complex9 = complex4.I.add(Double.POSITIVE_INFINITY);
      complex6.NaN.getField();
      complex4.multiply(complex0);
      Complex complex10 = complex5.log();
      complex9.multiply((-702));
      Complex complex11 = complex10.negate();
      Complex complex12 = complex11.log();
      complex7.hashCode();
      complex12.sin();
      complex2.multiply(complex4);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.ONE.cos();
      complex3.NaN.pow(complex0);
      Complex complex4 = complex3.ONE.subtract((-5167.440316));
      complex4.ZERO.getField();
      complex0.readResolve();
      Complex complex5 = complex1.log();
      complex1.INF.asin();
      Complex complex6 = complex0.ONE.multiply((-5167.440316));
      complex5.NaN.pow(complex0);
      complex0.abs();
      Complex complex7 = complex2.sin();
      complex7.add(complex2);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      complex5.hashCode();
      complex5.cosh();
      complex6.sinh();
      Object object0 = new Object();
      complex8.equals(object0);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex0.INF.cosh();
      Complex complex2 = complex0.I.subtract((-1213.90474711));
      Complex complex3 = complex1.ONE.exp();
      complex0.exp();
      Complex complex4 = complex0.NaN.sqrt1z();
      complex4.ONE.tanh();
      Complex complex5 = complex0.sqrt();
      complex1.getArgument();
      complex5.isNaN();
      Complex complex6 = complex3.subtract((-606.0725814152901));
      complex6.ONE.toString();
      complex1.sin();
      complex4.exp();
      complex2.tanh();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.ZERO.divide(0.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.pow(complex0);
      complex1.INF.toString();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.abs();
      Complex complex3 = complex0.add(0.0);
      complex3.I.pow((-1000.6303613233));
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex4.multiply(0.0);
      complex6.NaN.tanh();
      complex0.ONE.negate();
      Complex.valueOf(182.3193407391578, 0.0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex5.ZERO.divide(complex7);
      complex8.INF.toString();
      complex5.I.multiply((-98.60728423856231));
      Complex complex9 = complex3.sin();
      Complex complex10 = complex0.sin();
      complex10.ZERO.sinh();
      complex3.cos();
      Complex complex11 = complex9.atan();
      Complex complex12 = complex11.I.negate();
      Complex complex13 = complex12.ZERO.multiply(complex4);
      complex13.NaN.divide(complex11);
      complex0.sin();
      complex2.abs();
      complex11.log();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(2060.907140020418, 2060.907140020418);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.I.multiply(2060.907140020418);
      Complex complex5 = complex4.ONE.negate();
      complex0.toString();
      complex0.getField();
      Complex.valueOf(691.7690298, 691.7690298);
      Complex complex6 = complex2.divide(complex3);
      complex0.getReal();
      complex3.isNaN();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex6.cos();
      Complex.valueOf(Double.NaN, (-1832.0184127639757));
      complex4.subtract((-1832.0184127639757));
      complex5.tanh();
      Complex complex9 = complex7.sqrt();
      complex4.ONE.abs();
      complex9.negate();
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex5.INF.cosh();
      complex11.INF.tan();
      complex10.I.divide((-2791.5));
      try { 
        complex8.nthRoot((-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -104
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add((-782.3721896086));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.valueOf((-999.8303));
      Complex complex7 = complex5.I.tanh();
      Complex complex8 = complex7.INF.cosh();
      complex8.ONE.tan();
      Complex complex9 = complex6.ONE.pow((-999.8303));
      Complex complex10 = complex4.divide(complex1);
      Complex complex11 = complex10.I.reciprocal();
      complex11.negate();
      complex5.getArgument();
      complex10.getReal();
      Complex complex12 = complex3.sin();
      complex12.hashCode();
      complex9.toString();
      Complex complex13 = complex4.tanh();
      Complex.valueOf((-1.6149279479975042E-9), 0.0);
      complex13.conjugate();
      complex0.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.log();
      complex0.INF.getArgument();
      complex3.ONE.pow(3.610333312791256E161);
      complex2.toString();
      complex1.isInfinite();
      complex2.readResolve();
      complex2.I.atan();
      complex1.divide(3.610333312791256E161);
      complex1.createComplex((-1692.382595425061), (-2.0821912536551675E-8));
      Complex complex4 = complex2.acos();
      Complex.valueOf((-1013.8263));
      Complex complex5 = complex4.add(complex3);
      complex5.sqrt();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.conjugate();
      complex0.INF.getField();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.I.atan();
      complex6.I.toString();
      Complex complex7 = complex0.divide((-636.96287));
      Complex complex8 = complex1.I.divide(complex4);
      Complex complex9 = Complex.ZERO;
      complex1.INF.add(complex9);
      complex2.multiply(1);
      complex2.isNaN();
      Complex complex10 = complex2.divide(complex0);
      complex7.tan();
      complex10.pow((double) 1);
      complex5.multiply(1);
      complex8.pow((-636.96287));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.add(0.0);
      complex1.I.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.ZERO.pow(0.0);
      complex2.I.cos();
      Complex complex4 = complex2.reciprocal();
      complex4.ZERO.log();
      Complex complex5 = complex4.NaN.log();
      complex2.I.asin();
      complex5.ONE.cos();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.ZERO.sqrt1z();
      Complex complex8 = complex0.sqrt();
      complex8.NaN.getArgument();
      complex2.nthRoot(1012);
      complex0.exp();
      complex8.NaN.createComplex(Double.NaN, 561.426767851596);
      Complex complex9 = Complex.valueOf(1033.485355555);
      Complex complex10 = Complex.valueOf(Double.NaN, 1751.0);
      Complex complex11 = complex10.INF.add((double) 1012);
      complex11.ONE.cos();
      complex1.equals(complex9);
      complex8.getArgument();
      complex7.sqrt();
      complex1.pow((-897.7580243507233));
      complex5.tan();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.sqrt();
      complex2.hashCode();
      complex3.hashCode();
      complex0.INF.hashCode();
      Complex complex4 = complex2.pow((-1687.9755));
      complex4.getImaginary();
      Complex complex5 = complex3.subtract(-0.0);
      complex1.INF.readResolve();
      Complex complex6 = complex1.conjugate();
      complex6.NaN.acos();
      complex6.INF.sqrt();
      Complex complex7 = complex4.asin();
      complex4.negate();
      complex7.I.abs();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.pow(-0.0);
      complex8.INF.subtract(0.0);
      complex2.isNaN();
      Complex complex9 = complex7.conjugate();
      complex3.isNaN();
      complex5.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-1180));
      complex0.isInfinite();
      Complex complex2 = Complex.valueOf((double) (-1180));
      Complex complex3 = complex2.INF.createComplex(1.356201171875, (-1180));
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex4.I.sinh();
      complex4.NaN.subtract(complex3);
      complex6.ONE.sin();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex7.pow(6.283185307179586);
      complex3.INF.getArgument();
      complex3.pow(3747.8);
      Complex complex9 = complex3.exp();
      Complex complex10 = complex5.createComplex(3747.8, (-141.950235));
      complex8.subtract(complex1);
      complex5.getField();
      Complex complex11 = complex9.multiply(complex10);
      try { 
        complex11.INF.nthRoot((-1180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,180
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(1661.22714, 0.4311765432357788);
      Complex complex3 = Complex.valueOf(876.4221975472, 2.0);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = Complex.valueOf(0.0, (-995.3814));
      complex5.ZERO.multiply(complex4);
      complex5.ZERO.atan();
      Complex complex6 = complex0.divide(complex3);
      complex6.NaN.negate();
      complex6.isInfinite();
      Complex.valueOf(0.4311765432357788);
      complex0.add(0.0);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = Complex.valueOf(2278.83);
      complex2.ZERO.sqrt();
      complex3.ONE.readResolve();
      complex0.getReal();
      complex2.add(complex3);
      complex7.negate();
      complex5.subtract(complex7);
      complex1.subtract(1661.22714);
      complex8.isInfinite();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.NaN.asin();
      complex0.INF.hashCode();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      complex4.NaN.hashCode();
      complex4.getImaginary();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex5.ZERO.cosh();
      complex6.asin();
      complex0.getReal();
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex1.divide((-2416.19892));
      complex8.toString();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.NaN.cos();
      complex2.tanh();
      Complex complex11 = complex1.I.divide(complex9);
      complex11.I.getField();
      complex8.add(0.0);
      complex1.abs();
      Complex complex12 = complex7.divide(2046.92446);
      complex12.ZERO.multiply((-47));
      complex0.abs();
      complex0.acos();
      complex10.readResolve();
      complex3.add(complex9);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.ONE.multiply(complex0);
      complex3.ONE.getField();
      Complex complex4 = complex0.asin();
      complex4.NaN.asin();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.divide(1.2289023836765196E-9);
      Complex complex7 = complex6.I.asin();
      Complex.valueOf((-409.369182));
      complex2.log();
      complex1.negate();
      complex4.divide(complex2);
      complex7.abs();
      Complex.valueOf((-409.369182), 960.6114761);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1928.763428));
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.divide(3.55284719912458E-8);
      complex2.add(complex1);
      complex0.getReal();
      complex2.add((-20.0));
      Complex complex3 = complex2.sqrt();
      complex3.ZERO.getArgument();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex2.ONE.cosh();
      complex4.NaN.conjugate();
      complex1.INF.conjugate();
      complex1.I.readResolve();
      Complex complex5 = complex0.sqrt1z();
      complex1.cos();
      complex5.ZERO.tan();
      Object object0 = complex5.readResolve();
      complex1.equals(object0);
      complex1.sin();
      complex3.divide(1004.05455909);
      complex3.isNaN();
      complex5.nthRoot(592);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.tanh();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.multiply(1093);
      Complex complex4 = complex3.I.reciprocal();
      complex3.INF.toString();
      complex1.isNaN();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex2.INF.reciprocal();
      Complex complex9 = Complex.valueOf(3949.9260835664463, 894.682307187638);
      complex4.isInfinite();
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf(0.0, 894.682307187638);
      Complex complex11 = complex10.NaN.asin();
      Complex complex12 = complex2.subtract(complex10);
      Complex complex13 = complex12.acos();
      assertEquals(7.489617725415473, complex13.getImaginary(), 0.01);
      
      Complex complex14 = Complex.valueOf(1.2289023836765196E-9, (-308.8563657225));
      complex14.ONE.sin();
      Complex complex15 = complex14.NaN.sqrt();
      complex5.getImaginary();
      List<Complex> list0 = complex9.nthRoot(1);
      assertTrue(list0.contains(complex9));
      
      Complex complex16 = complex7.pow(complex0);
      Complex complex17 = complex2.cosh();
      assertEquals(2.5091784786580567, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex3.subtract(complex11);
      assertSame(complex18, complex15);
      
      complex11.multiply(complex0);
      Complex complex19 = complex16.divide(complex10);
      assertEquals((-0.0011177151844473372), complex19.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      Complex complex20 = complex6.atan();
      Complex complex21 = complex20.conjugate();
      assertTrue(complex21.equals((Object)complex8));
      assertEquals(0.0, complex21.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.hashCode();
      complex0.getField();
      Complex complex3 = complex1.pow(complex2);
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-2648.3931554), (-2648.3931554));
      Complex complex1 = complex0.pow((-2648.3931554));
      assertEquals((-2648.3931554), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = (Complex)complex2.I.readResolve();
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      complex1.getArgument();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex1.divide((-2079.516661476));
      Complex complex7 = complex0.sin();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      complex0.getImaginary();
      Complex complex8 = complex1.log();
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      
      complex4.NaN.readResolve();
      complex5.isInfinite();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex2.getReal(), 0.01);
      
      Complex complex9 = complex6.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex10 = complex4.cos();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex10.equals((Object)complex5));
      
      Complex complex11 = complex6.multiply(1);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertTrue(complex6.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex7));
  }
}
