/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:04:06 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(7.103148400942551E-238, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.nthRoot(759);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1584);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2456.950275327526, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.7002575714977818E-8, 1.019798219203949E-7);
      complex1.INF.nthRoot(2972);
      Complex complex2 = complex0.multiply(complex1);
      complex2.pow(2456.950275327526);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0));
      complex1.getField();
      complex0.pow((-20.0));
      Complex complex2 = complex1.createComplex((-20.0), 746.8235);
      complex0.multiply(746.8235);
      complex0.cosh();
      complex2.add(complex0);
      Complex complex3 = Complex.ZERO;
      complex1.exp();
      Complex complex4 = complex2.tanh();
      complex4.multiply(complex0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(2309.3);
      complex2.reciprocal();
      Complex complex3 = new Complex((-4.611686018427388E20));
      complex3.NaN.cos();
      complex3.getField();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.ONE.add((-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      complex2.I.abs();
      complex2.ONE.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.tanh();
      complex3.ZERO.add(1.0);
      Complex complex5 = complex1.conjugate();
      complex5.ONE.abs();
      Complex complex6 = complex5.sin();
      complex4.INF.pow((-1505.874815));
      Complex complex7 = complex4.cosh();
      complex7.ONE.log();
      Complex.valueOf((-1.0));
      complex7.INF.createComplex((-1.0), (-1.0));
      complex3.multiply((-1.0));
      complex5.getField();
      complex5.multiply(812);
      Complex complex8 = complex0.sqrt1z();
      complex8.asin();
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      complex0.I.add(complex1);
      Complex complex2 = complex0.I.divide(Double.NaN);
      complex0.multiply(complex0);
      complex2.toString();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.NaN.sin();
      complex4.NaN.toString();
      complex0.ONE.log();
      complex1.add((-2649.89087272));
      complex2.reciprocal();
      complex0.getField();
      complex2.pow(775.2438418901203);
      Complex complex5 = Complex.valueOf((-171.9531948896), 7.103148400942551E-238);
      complex2.divide(complex5);
      complex0.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 1287.646023839516);
      complex1.sinh();
      Complex complex2 = complex1.subtract((-441.8405442));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.readResolve();
      Complex complex2 = Complex.NaN;
      complex0.multiply(810);
      Complex complex3 = new Complex(2.9905402747366387E7, 2.9905402747366387E7);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.NaN.sin();
      complex5.NaN.toString();
      complex1.NaN.divide(2.9905402747366387E7);
      Complex complex6 = new Complex((-2649.89087272), Double.POSITIVE_INFINITY);
      complex6.negate();
      complex2.tanh();
      Complex complex7 = complex6.acos();
      complex7.divide((-2649.89087272));
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.multiply(1055);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((double) (-1073741824), (-1.0));
      Complex complex4 = complex3.multiply(20.0);
      Complex complex5 = complex4.asin();
      complex5.NaN.pow(complex1);
      complex4.tan();
      complex3.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex(1.0, (-2053.6342866057));
      Complex complex1 = new Complex(2.0, Double.NaN);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.ONE.reciprocal();
      Complex complex5 = complex4.INF.conjugate();
      complex0.createComplex(2.0, 2.0);
      Complex complex6 = complex0.subtract((-1094.45535));
      complex0.sinh();
      Complex complex7 = Complex.valueOf(20.0, 20.0);
      complex7.ZERO.hashCode();
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex1.subtract(complex2);
      complex9.I.subtract((-3222.930505992324));
      complex7.INF.log();
      complex3.abs();
      complex8.add(2661.851408);
      complex7.ZERO.getField();
      complex5.reciprocal();
      complex7.tan();
      Complex complex10 = complex3.exp();
      complex7.equals((Object) null);
      Complex complex11 = complex1.cosh();
      complex10.pow(1.0);
      complex11.subtract(complex6);
      complex6.getField();
      Complex complex12 = complex4.pow((-3222.930505992324));
      complex0.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-3.2495582962361734E91));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.subtract((-2649.89087272));
      Complex complex4 = complex0.add(1643.81350806);
      Complex complex5 = complex1.reciprocal();
      complex1.getField();
      Complex complex6 = Complex.valueOf((-2649.89087272));
      Complex complex7 = complex6.pow(460.106);
      complex1.createComplex((-2649.89087272), Double.POSITIVE_INFINITY);
      complex7.multiply(775.2438418901203);
      complex4.cosh();
      complex7.add(complex2);
      complex6.add(Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.exp();
      Complex complex10 = Complex.I;
      complex5.tanh();
      complex3.pow(544.0);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(0.024307243558580455, (double) 1431655756);
      Complex complex3 = complex2.multiply((double) 1431655756);
      Complex complex4 = complex1.asin();
      complex4.tan();
      complex3.negate();
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.sqrt();
      Complex complex1 = complex0.INF.createComplex(2599.790380807853, 2649.0);
      complex0.I.multiply(complex1);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.I.asin();
      complex3.atan();
      Complex.valueOf(1643.8462641477);
      Complex complex4 = complex0.reciprocal();
      int int0 = 1;
      complex4.nthRoot(1);
      Complex complex5 = complex4.I.subtract(2599.790380807853);
      complex5.sinh();
      Complex complex6 = complex1.INF.tanh();
      complex6.INF.getField();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.sin();
      complex0.negate();
      complex0.tanh();
      complex0.acos();
      Complex complex2 = Complex.I;
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.57);
      Complex complex1 = complex0.ZERO.cos();
      complex0.getArgument();
      complex1.I.conjugate();
      complex0.tan();
      try { 
        complex1.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-457.85096089919), (double) 1431655749);
      Complex complex1 = complex0.multiply((-2210));
      Complex complex2 = complex1.multiply((-1525.7782904636858));
      Complex complex3 = complex2.asin();
      complex1.tan();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1106.6132);
      complex0.nthRoot(828);
      Complex complex2 = complex1.acos();
      complex1.divide(1106.6132);
      Complex complex3 = Complex.ONE;
      complex0.equals(complex2);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1431655749);
      complex1.acos();
      complex0.negate();
      Complex complex2 = Complex.valueOf((double) 1431655749, (double) 1431655749);
      Complex complex3 = complex2.tanh();
      complex3.getReal();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3584.04304);
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.NaN.divide(complex0);
      complex0.NaN.multiply(complex0);
      Complex complex3 = complex0.I.multiply((-1.8677099478736636E-4));
      Complex complex4 = complex0.pow((-1.8677099478736636E-4));
      Complex complex5 = complex3.sqrt();
      complex5.NaN.add((-822.615996218));
      Complex complex6 = complex2.ONE.log();
      complex6.I.reciprocal();
      Complex complex7 = complex4.subtract(complex1);
      complex0.ONE.abs();
      complex0.toString();
      Complex complex8 = complex1.sin();
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = new Complex((-3104.0));
      complex2.divide(complex9);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(451.02330017288, 0.5871354341506958);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.multiply((-2838.42728735));
      complex2.I.sqrt();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.NaN.pow(complex0);
      Complex complex5 = complex4.ONE.sqrt();
      complex5.conjugate();
      complex2.ZERO.getArgument();
      complex1.exp();
      complex2.toString();
      Complex complex6 = complex0.add(0.5871354341506958);
      complex2.INF.pow((-8.194157257980706E-9));
      complex6.I.reciprocal();
      complex4.acos();
      complex2.reciprocal();
      complex5.tanh();
      complex6.sin();
      Complex complex7 = Complex.valueOf((-1973.2));
      complex5.subtract(complex7);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.57);
      complex0.nthRoot(730);
      Complex complex1 = new Complex((-7.2285665164439578E17));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      complex1.getReal();
      complex3.getReal();
      complex3.tan();
      Complex complex4 = complex2.acos();
      try { 
        complex4.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.ZERO.cos();
      Complex complex4 = complex1.sqrt();
      int int0 = 2147480468;
      complex1.I.reciprocal();
      // Undeclared exception!
      complex4.I.nthRoot(2147480468);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3584.04304);
      Complex complex1 = Complex.valueOf(3584.04304);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.divide(complex1);
      complex0.NaN.multiply(complex1);
      complex0.I.multiply((-1.8677099478736636E-4));
      Complex complex4 = complex0.pow((-1.8677099478736636E-4));
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex5.NaN.add((-822.615996218));
      Complex complex7 = complex3.ONE.log();
      complex7.I.reciprocal();
      Complex complex8 = complex4.subtract(complex2);
      complex0.ONE.abs();
      Complex complex9 = complex2.createComplex((-888.03), (-3.141592653589793));
      complex1.toString();
      complex2.sin();
      Complex complex10 = complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.INF.pow(1.0);
      complex3.equals(complex8);
      Complex complex12 = Complex.valueOf(3584.04304);
      complex12.INF.getArgument();
      complex5.getField();
      Complex complex13 = new Complex(1579.07541);
      Complex complex14 = complex6.add(complex13);
      Complex complex15 = complex1.asin();
      complex15.INF.multiply(complex11);
      complex9.getField();
      complex5.tan();
      complex9.sin();
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(1431655765);
      complex0.asin();
      complex0.divide((double) 1431655765);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1106.6132);
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex2.nthRoot(828);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.negate();
      complex3.getReal();
      complex3.getReal();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex4.acos();
      complex4.multiply(1106.6132);
      complex5.multiply(complex2);
      complex6.divide(3.141592653589793);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1.9999991819241547);
      complex0.nthRoot(828);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.NaN;
      complex4.getReal();
      complex4.getReal();
      Complex complex5 = complex1.tan();
      complex5.acos();
      Complex complex6 = complex3.multiply(Double.NaN);
      complex6.multiply(complex1);
      complex6.divide(1111.8435122589);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-1613.910053142431));
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.ZERO.cosh();
      complex3.INF.divide(complex1);
      Complex complex4 = Complex.valueOf((-581.2898));
      complex4.INF.getField();
      Complex complex5 = complex1.log();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex5.ONE.sinh();
      complex5.readResolve();
      Complex complex8 = complex1.ONE.cos();
      complex8.I.asin();
      complex5.divide(2730.73954704);
      Complex complex9 = complex0.NaN.add(1501.0);
      Complex complex10 = complex9.INF.createComplex(2730.73954704, (-2409.7));
      Complex complex11 = complex4.reciprocal();
      Complex complex12 = complex10.I.tanh();
      complex12.INF.nthRoot(797);
      complex4.NaN.atan();
      Complex complex13 = complex7.acos();
      complex13.ZERO.sqrt1z();
      complex11.conjugate();
      complex10.abs();
      Complex complex14 = complex6.negate();
      complex12.readResolve();
      complex14.nthRoot(821);
      complex4.asin();
      complex0.conjugate();
      complex13.add(3641.9215482720415);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.subtract((-2211.225947762181));
      complex1.INF.sinh();
      complex1.getImaginary();
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2071.5536589), (-210.8423537028559));
      Complex complex1 = complex0.multiply((-210.8423537028559));
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-210.8423537028559), (-1684.555578));
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ONE.pow(complex2);
      complex6.conjugate();
      complex3.getArgument();
      Complex complex7 = complex2.multiply((-1684.555578));
      Complex complex8 = complex7.ONE.negate();
      complex2.divide(complex3);
      complex0.cos();
      Complex complex9 = complex2.pow((-20.0));
      Complex complex10 = complex9.ONE.reciprocal();
      complex10.I.getField();
      complex5.cosh();
      complex3.tanh();
      complex0.conjugate();
      complex4.sqrt();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1106.6132, 1106.6132);
      complex0.INF.multiply(complex0);
      Complex complex1 = new Complex(1106.6132, 1265.847);
      complex0.exp();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1106.6132, 1106.6132);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf((-5484.720317), 1106.6132);
      complex3.INF.divide(complex2);
      complex3.sin();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.INF;
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
      complex1.subtract(1106.6132);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1538.919712, (double) 828);
      complex0.multiply(964);
      complex0.asin();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.getReal();
      complex0.getReal();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex((-3257.9086226067984));
      Complex complex4 = complex3.multiply(1622.6);
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex3.multiply(2044.9);
      complex0.isInfinite();
      Complex complex5 = complex2.tanh();
      complex5.asin();
      complex0.hashCode();
      complex3.sqrt1z();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.cos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.tanh();
      Complex complex8 = Complex.I;
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1020.6009395017089));
      complex0.multiply((-10.257353092039857));
      Complex complex2 = complex1.multiply(399.0);
      complex1.multiply(399.0);
      complex2.multiply((-2147481584));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1106.6132);
      complex0.nthRoot(828);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      complex2.getReal();
      complex3.getReal();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.multiply((-3257.9086226067984));
      complex5.multiply(complex6);
      complex2.divide(1106.6132);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1106.6132, 1106.6132);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
      complex1.divide(1106.6132);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
      Complex complex1 = complex0.asin();
      complex0.hashCode();
      complex0.abs();
      Complex complex2 = new Complex(Double.NaN);
      complex2.getArgument();
      Complex complex3 = Complex.valueOf((-2333.41), Double.NaN);
      complex1.reciprocal();
      Complex complex4 = Complex.INF;
      complex0.equals("");
      complex3.subtract(Double.NaN);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1106.6132);
      complex0.nthRoot(828);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      complex3.tanh();
      complex2.getReal();
      complex3.getReal();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.createComplex((-3.141592653589793), Double.NaN);
      Complex complex8 = complex6.add(complex1);
      complex8.atan();
      Complex complex9 = complex7.add((-0.04861448711716091));
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex5.pow(complex9);
      complex11.NaN.add(complex4);
      complex2.createComplex((-1022.04685617), 3183.1145);
      complex0.multiply((-3.141592653589793));
      complex4.conjugate();
      complex5.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1106.6132, 1106.6132);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.pow(complex3);
      complex4.createComplex((-1610.959247727202), 1106.6132);
      complex6.multiply((-3370.9784707859994));
      complex2.conjugate();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex7.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1106.6132, 1106.6132);
      Complex complex1 = Complex.ZERO;
      complex0.INF.multiply(complex1);
      Complex.valueOf((-5484.720317), 1106.6132);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.INF;
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex1.subtract(1106.6132);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      complex0.abs();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(494.0, (-5484.720317));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.INF;
      complex1.equals(complex5);
      complex0.cos();
      Complex complex6 = complex4.tanh();
      complex6.ONE.sqrt();
      complex2.exp();
      complex3.pow((-5484.720317));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      complex0.abs();
      complex0.isNaN();
      complex1.hashCode();
      complex0.abs();
      complex1.getArgument();
      Complex.valueOf((-783.13389919059), Double.NaN);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex(1.0);
      complex4.equals(complex1);
      Complex complex5 = complex2.subtract((-5484.720317));
      complex5.getImaginary();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(20.57, 1265.847);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 828;
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.INF;
      complex2.equals(complex0);
      complex2.getImaginary();
      complex0.getArgument();
      complex1.abs();
      Complex complex3 = complex2.multiply(complex1);
      complex3.atan();
      try { 
        complex3.nthRoot((-2042132058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,042,132,058
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.57);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.INF.log();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.reciprocal();
      complex0.abs();
      complex0.getArgument();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.I.subtract(complex4);
      complex3.getImaginary();
      complex2.acos();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.valueOf((-1020.2));
      Complex complex2 = complex0.multiply(20.0);
      Complex complex3 = complex1.multiply(399.0);
      Complex complex4 = complex3.divide(20.0);
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.createComplex(0.6480542736638855, (-4.8990756386047E-4));
      Complex complex7 = Complex.I;
      complex4.add(complex7);
      complex2.atan();
      complex3.add((-4.8990756386047E-4));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.NaN;
      complex9.pow(complex8);
      complex6.createComplex((-3370.9784707859994), 1.0);
      Complex complex10 = complex7.multiply(0.6480542736638855);
      Complex complex11 = Complex.NaN;
      complex11.conjugate();
      Complex complex12 = complex10.pow(complex5);
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.ONE.toString();
      Complex complex2 = complex1.I.log();
      complex0.ZERO.cos();
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex3.I.multiply((-616));
      complex0.multiply(94);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      complex0.tanh();
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(1431655765, 1431655765);
      complex2.hashCode();
      complex1.sqrt1z();
      complex1.cos();
      Complex complex3 = Complex.INF;
      complex3.tanh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.asin();
      complex0.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(1538.919712, 1538.919712);
      Complex complex4 = complex0.multiply(complex3);
      complex1.divide(1538.919712);
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.createComplex((-1.6569768077504004E11), 20.0);
      complex5.add(complex2);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex6.add((-663.16355));
      Complex complex9 = Complex.ZERO;
      complex2.pow(complex8);
      complex2.createComplex((-1.6569768077504004E11), 9.442671392695732E-9);
      complex7.multiply(3183.1145);
      complex9.conjugate();
      complex2.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3506.52693822522));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.I.cosh();
      complex2.ONE.conjugate();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex3.NaN.log();
      complex4.NaN.asin();
      complex3.ZERO.getField();
      Complex complex5 = complex0.sqrt1z();
      complex1.nthRoot(1064);
      Complex complex6 = complex5.sqrt1z();
      complex6.nthRoot(352);
      Complex complex7 = Complex.valueOf((-3506.52693822522));
      complex7.ZERO.abs();
      complex7.ZERO.getField();
      Complex complex8 = Complex.valueOf((-1920.100096239));
      complex8.ONE.reciprocal();
      complex6.multiply(complex8);
      Complex complex9 = complex6.sinh();
      complex9.INF.negate();
      Complex complex10 = complex6.multiply(complex8);
      complex10.ONE.acos();
      Complex complex11 = complex3.conjugate();
      complex0.multiply(0.0);
      Complex complex12 = complex1.atan();
      complex11.cos();
      complex12.divide((-376.6718658558));
      complex0.createComplex(0.4311765432357788, 352);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1106.6132, 1106.6132);
      Complex complex1 = Complex.INF;
      complex0.getArgument();
      complex0.getImaginary();
      Complex complex2 = Complex.I;
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1106.6132);
      complex0.nthRoot(828);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.tanh();
      complex2.getReal();
      complex3.getReal();
      Complex complex5 = complex2.tan();
      complex0.multiply((-3257.9086226067984));
      complex0.multiply(5272.85657);
      Complex complex6 = complex2.multiply((double) 828);
      complex4.isInfinite();
      complex6.tanh();
      complex3.asin();
      complex2.hashCode();
      complex5.sqrt1z();
      complex2.cos();
      complex4.tanh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2449185.54882848), (-2449185.54882848));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(660);
      complex2.tan();
      complex0.cos();
      Complex complex3 = new Complex(1460.66769, 2606.8918838576033);
      complex3.reciprocal();
      complex0.abs();
      complex1.getArgument();
      complex3.tan();
      complex0.getImaginary();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.INF.multiply((-938));
      Complex complex3 = complex0.createComplex(0.1477125883102417, (-2074.893));
      Complex complex4 = complex0.negate();
      complex4.NaN.add(0.1477125883102417);
      complex4.nthRoot(1066);
      complex2.divide(complex4);
      Complex complex5 = complex1.multiply((-938));
      complex5.add(1551.6586175);
      complex0.createComplex((-2.3866331257845713E-8), 20.0);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.valueOf((-1020.2));
      Complex complex2 = complex0.multiply(20.0);
      complex1.multiply(399.0);
      Complex complex3 = complex1.multiply(399.0);
      complex0.isInfinite();
      complex0.tanh();
      Complex complex4 = complex1.asin();
      complex3.hashCode();
      complex2.sqrt1z();
      complex4.cos();
      complex2.tanh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-409.20288108084566));
      complex1.toString();
      Complex complex2 = complex1.log();
      complex0.cos();
      complex2.subtract(complex0);
      complex1.multiply(94);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1123433592533208);
      Complex complex1 = complex0.tanh();
      complex0.getReal();
      complex0.getReal();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.multiply((-3089.803));
      Complex complex4 = complex3.multiply(0.1123433592533208);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.multiply(0.1123433592533208);
      complex3.isInfinite();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex7.asin();
      complex2.hashCode();
      complex7.sqrt1z();
      Complex complex9 = Complex.ZERO;
      complex9.cos();
      complex8.tanh();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.ZERO.toString();
      Complex complex2 = complex0.divide(complex1);
      complex0.I.pow(complex2);
      Complex complex3 = Complex.valueOf((-459.0), (-459.0));
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.subtract(complex0);
      complex5.hashCode();
      complex5.multiply(complex2);
      complex4.INF.nthRoot(17);
      Complex complex6 = complex4.sqrt();
      complex2.I.reciprocal();
      complex2.isInfinite();
      Complex complex7 = complex4.sinh();
      complex6.INF.cosh();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex8.exp();
      complex9.ZERO.divide((-1.0));
      Complex complex10 = complex0.multiply(complex6);
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex10.multiply((-3398.8));
      complex4.ONE.readResolve();
      complex4.acos();
      complex3.I.atan();
      complex2.subtract((-3398.8));
      complex12.sin();
      Complex complex13 = complex3.add((double) 17);
      complex13.NaN.getField();
      complex11.getImaginary();
      complex9.acos();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2331.533339335464);
      complex0.I.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.divide(0.0);
      Complex complex3 = complex0.INF.pow(complex1);
      Complex.valueOf(2331.533339335464);
      Complex complex4 = complex2.ONE.reciprocal();
      complex1.ONE.asin();
      Complex complex5 = complex4.I.add(0.0);
      complex1.INF.readResolve();
      Complex complex6 = complex0.add(complex1);
      complex4.add(0.0);
      Complex complex7 = complex6.ZERO.multiply(complex0);
      complex7.ZERO.divide(complex5);
      Complex complex8 = complex6.multiply(0);
      Complex complex9 = complex8.I.sqrt1z();
      complex9.multiply(complex3);
      complex1.I.log();
      Complex complex10 = complex2.createComplex(0.0, (-1.3841980097978606E208));
      Complex complex11 = complex10.INF.sinh();
      Complex complex12 = complex6.subtract((-1.3841980097978606E208));
      complex10.sqrt1z();
      Complex complex13 = complex3.divide(0.0);
      complex13.getField();
      Complex complex14 = complex1.multiply(complex0);
      Complex complex15 = complex11.divide(2434.745351864);
      complex15.NaN.conjugate();
      complex12.readResolve();
      complex8.equals(complex11);
      complex14.negate();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.I.atan();
      complex0.equals(complex1);
      complex0.getImaginary();
      complex3.getArgument();
      complex3.INF.abs();
      Complex complex4 = complex3.ONE.multiply(complex2);
      Complex complex5 = complex4.ONE.atan();
      complex5.NaN.nthRoot(2709);
      complex5.NaN.reciprocal();
      complex3.NaN.pow(0.0);
      Complex complex6 = complex1.pow(complex3);
      complex6.readResolve();
      complex0.sqrt1z();
      complex3.isInfinite();
      complex3.tan();
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.add(complex1);
      complex0.log();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex3.ONE.createComplex(0.0, 0.0);
      complex5.acos();
      complex5.I.conjugate();
      complex4.ZERO.sinh();
      complex0.nthRoot(7);
      Complex complex6 = complex4.tan();
      complex4.isNaN();
      Complex complex7 = complex6.tan();
      complex7.NaN.getArgument();
      Complex complex8 = complex1.reciprocal();
      complex2.toString();
      Complex.valueOf((double) 7);
      complex8.sqrt1z();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(3247.110664193, 1307.4032913907);
      complex0.reciprocal();
      complex0.NaN.nthRoot(493);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.NaN.cos();
      complex0.isNaN();
      Complex complex3 = complex2.NaN.pow(3247.110664193);
      Complex complex4 = Complex.valueOf(1307.4032913907);
      Complex complex5 = complex4.NaN.sinh();
      complex5.ZERO.add(1.6207809718247905E-10);
      complex0.nthRoot(493);
      Complex complex6 = complex2.log();
      Complex complex7 = complex2.NaN.exp();
      complex7.I.pow(1627.610592);
      complex7.ZERO.toString();
      complex1.multiply((-921));
      complex3.isNaN();
      Complex complex8 = complex6.pow(3247.110664193);
      complex8.hashCode();
      Complex complex9 = complex1.sqrt();
      complex9.toString();
      complex0.abs();
      complex6.createComplex(6.283185307179586, 2454.1536409);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(835.470780376, 835.470780376);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.INF.toString();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex0.log();
      complex4.asin();
      complex0.NaN.readResolve();
      Complex complex5 = complex0.I.reciprocal();
      Complex complex6 = Complex.valueOf(2721.55, 1070.54031055948);
      complex5.INF.multiply(complex6);
      Complex complex7 = complex0.divide(2721.55);
      complex7.I.createComplex(0.0, 533.310924484);
      complex7.INF.add(complex3);
      complex4.atan();
      complex2.createComplex(810.5725281, 810.5725281);
      complex5.multiply(1070.54031055948);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(9.442671392695732E-9);
      Complex complex1 = complex0.subtract(9.442671392695732E-9);
      complex0.NaN.nthRoot(828);
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.tanh();
      complex3.getReal();
      complex0.getReal();
      Complex complex5 = complex0.tan();
      complex5.NaN.multiply((double) 828);
      Complex complex6 = complex0.I.multiply((double) 828);
      complex6.I.multiply((-9.442671392695732E-9));
      complex2.isInfinite();
      complex2.tanh();
      complex5.asin();
      complex1.hashCode();
      complex0.sqrt1z();
      complex2.cos();
      complex6.tanh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.ONE.toString();
      complex1.I.log();
      complex0.ZERO.cos();
      complex0.ONE.subtract(complex1);
      complex0.multiply(94);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1046.02), (-1046.02));
      complex0.ONE.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ONE.log();
      complex2.I.add(complex1);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex7.createComplex((-1046.02), (-6.824454861992054E-31));
      complex1.ZERO.sin();
      Complex complex9 = Complex.valueOf(2729.3644557, 1047.326772);
      Complex complex10 = complex2.cos();
      complex10.I.conjugate();
      complex1.getArgument();
      Complex complex11 = complex3.asin();
      complex6.isInfinite();
      complex11.ZERO.multiply((-2992.1995));
      Complex complex12 = complex2.multiply(0.0);
      complex12.NaN.subtract(complex0);
      complex0.equals("5Jc7qR_V5T&W?`nXQ1!");
      Complex complex13 = complex11.tanh();
      complex13.NaN.add(complex9);
      Complex.valueOf(1047.326772, (-1773.8762295700053));
      complex6.atan();
      complex8.cos();
      complex0.asin();
      complex5.exp();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.cos();
      Complex complex1 = complex0.INF.multiply((-938));
      complex0.createComplex(0.1477125883102417, (-2074.893));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.add(0.1477125883102417);
      complex2.nthRoot(1066);
      complex1.divide(complex2);
      complex3.createComplex(1659.3, 1659.3);
      Complex.valueOf((double) (-938));
      Complex complex4 = Complex.valueOf((double) (-938), 1659.3);
      complex4.reciprocal();
      complex3.atan();
      complex4.add(0.1477125883102417);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.subtract((-422.3966));
      complex1.INF.createComplex((-422.3966), (-4098.762885804227));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(4.981496462621207E-273, 2.4750237464904785);
      complex1.INF.abs();
      complex0.abs();
      complex0.pow(Double.NaN);
      Complex complex5 = Complex.valueOf(2347.8885876073, 2347.8885876073);
      complex0.NaN.multiply(complex3);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.cos();
      complex6.pow(complex2);
      complex2.pow(complex6);
      complex4.sinh();
      complex5.getField();
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex8.ZERO.createComplex(20.0, 0.1510767638683319);
      complex9.ZERO.pow(complex0);
      Complex.valueOf(Double.NaN, (-3841.367647931574));
      complex1.hashCode();
      Complex.valueOf(894.311711, 0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.negate();
      complex0.isInfinite();
      Complex complex3 = complex1.multiply(0.0);
      complex0.asin();
      complex0.getField();
      complex3.tan();
      Complex complex4 = complex0.add(complex1);
      complex4.NaN.createComplex(1.0, 2.0);
      Complex complex5 = complex2.reciprocal();
      try { 
        complex5.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.sin();
      Complex.valueOf(0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex0.ONE.hashCode();
      complex4.I.getArgument();
      Complex complex6 = Complex.valueOf((-1433.92938371738));
      Complex complex7 = complex6.ZERO.divide(complex4);
      complex3.exp();
      Complex complex8 = complex0.sqrt();
      complex7.NaN.add(complex1);
      complex4.NaN.acos();
      Complex complex9 = complex8.I.conjugate();
      complex4.pow(complex8);
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex7.cos();
      Complex complex13 = complex11.multiply(3753);
      complex5.ZERO.pow(complex10);
      complex4.toString();
      complex13.divide(0.0);
      complex5.asin();
      complex1.cosh();
      complex12.sin();
      complex9.sinh();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.getArgument();
      Complex complex1 = complex0.subtract(0.0);
      double double1 = 0.06977382302284241;
      Complex.valueOf(0.06977382302284241, 0.0);
      complex1.ZERO.hashCode();
      try { 
        complex1.nthRoot((-508));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -508
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.hashCode();
      complex0.divide(complex1);
      complex0.toString();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex1.ZERO.divide(complex0);
      complex0.acos();
      complex1.INF.cos();
      complex1.abs();
      complex3.abs();
      complex0.multiply(1);
      complex2.abs();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(452.091);
      Complex complex1 = complex0.ONE.subtract(452.091);
      complex1.I.abs();
      complex0.isInfinite();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.NaN.multiply(923);
      complex3.I.cosh();
      complex1.sqrt();
      complex3.conjugate();
      Complex.valueOf(0.0, (-1169.6409088));
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-862.681118), (-2737.3201311078105));
      Complex complex1 = Complex.valueOf((-1173.62863522357), (-862.681118));
      complex1.ONE.multiply((-862.681118));
      Complex complex2 = complex0.multiply(complex1);
      complex0.I.hashCode();
      complex2.hashCode();
      complex0.ONE.pow((-3287.0));
      Complex complex3 = complex0.reciprocal();
      complex3.tan();
      complex0.conjugate();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4813.43), (-4813.43));
      complex0.toString();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = Complex.valueOf((-4813.43), (-20.0));
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex0.I.divide(complex2);
      complex0.isInfinite();
      Complex complex5 = complex0.INF.pow(complex2);
      Complex complex6 = complex5.INF.divide((-4813.43));
      complex6.sqrt();
      Complex complex7 = complex4.ZERO.tanh();
      Complex complex8 = complex7.ZERO.asin();
      complex1.I.toString();
      complex8.I.add(complex0);
      Complex complex9 = complex4.subtract((-4813.43));
      Complex complex10 = complex4.negate();
      Complex complex11 = complex1.negate();
      complex11.ZERO.add(complex2);
      Complex complex12 = complex2.sqrt();
      complex12.INF.reciprocal();
      Complex complex13 = complex12.multiply(140.123618242);
      Complex complex14 = complex13.ONE.sin();
      complex14.I.add(complex3);
      complex14.NaN.reciprocal();
      Complex complex15 = complex10.sinh();
      complex15.I.log();
      complex7.getImaginary();
      complex13.exp();
      complex8.getField();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      complex0.I.subtract(complex1);
      Complex complex2 = Complex.valueOf(0.0, (-2947.2684672906));
      Complex complex3 = complex2.INF.negate();
      complex3.ONE.multiply(0);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.ZERO.multiply(7269);
      Complex complex6 = complex1.INF.sin();
      complex6.readResolve();
      Complex complex7 = complex0.createComplex(0.0, 1496.194643);
      complex1.ZERO.hashCode();
      complex4.NaN.getArgument();
      complex6.getField();
      complex7.abs();
      complex6.tanh();
      complex4.getField();
      complex0.hashCode();
      complex1.ONE.pow(complex5);
      complex1.exp();
      complex6.sqrt1z();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.log();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex0.exp();
      Complex complex3 = complex0.add(798.998);
      Complex complex4 = complex1.cos();
      complex3.isInfinite();
      complex2.sin();
      Complex complex5 = complex4.pow(2.9046141593926277E-8);
      complex5.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(147.3721, 969.7);
      Complex complex1 = complex0.sinh();
      int int0 = (-1);
      complex0.ZERO.asin();
      complex0.ONE.sqrt();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.24248650670051575, 6.283185307179586);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract((-2334.34299));
      complex0.hashCode();
      complex0.I.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.cosh();
      complex1.exp();
      complex4.sqrt1z();
      complex4.NaN.toString();
      complex0.cos();
      complex0.isNaN();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(1.2244183812423448E-7);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.ONE.pow((-3007.221201));
      Complex complex5 = complex3.divide((-2424.1814));
      complex5.getArgument();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.conjugate();
      complex0.pow(complex5);
      Complex complex9 = Complex.valueOf((-20.0));
      Complex complex10 = complex6.add(0.0);
      complex10.I.tanh();
      Complex complex11 = complex4.multiply(complex1);
      Complex complex12 = complex8.log();
      complex10.getReal();
      complex12.cosh();
      complex9.abs();
      complex3.divide(0.0);
      complex11.add(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.57);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.multiply(1394);
      complex2.tan();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex0.reciprocal();
      complex0.abs();
      complex0.getArgument();
      complex0.tan();
      complex4.getImaginary();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.subtract(Double.NaN);
      complex2.multiply(2034);
      complex0.ONE.pow(complex1);
      Complex complex3 = complex0.NaN.reciprocal();
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(4018.38117973);
      Complex complex1 = complex0.INF.subtract((-1920.8804664896));
      Complex complex2 = Complex.valueOf(4018.38117973);
      complex2.getArgument();
      Complex complex3 = complex2.ONE.sqrt();
      complex1.toString();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex4.I.multiply(7);
      Complex complex6 = complex5.NaN.tan();
      complex6.ONE.toString();
      complex1.toString();
      complex1.INF.multiply(complex6);
      Complex complex7 = complex1.exp();
      complex7.sinh();
      Complex complex8 = complex1.acos();
      complex8.ONE.hashCode();
      Complex complex9 = complex0.tan();
      complex9.I.multiply((-955.1008472383));
      Complex complex10 = complex7.multiply(complex5);
      complex10.reciprocal();
      complex4.nthRoot(7);
      complex0.sqrt();
      complex6.toString();
      Complex complex11 = complex3.multiply((-955.1008472383));
      complex7.hashCode();
      complex5.hashCode();
      complex11.add(3211.597678274);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(2006.2193631);
      Complex complex1 = complex0.INF.exp();
      Complex.valueOf(2006.2193631);
      complex1.multiply(1266);
      Complex complex2 = complex0.INF.subtract(1108.6415261);
      Complex complex3 = complex0.divide(2006.2193631);
      complex3.exp();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = complex4.ONE.divide(complex1);
      complex4.I.readResolve();
      Complex complex6 = complex3.atan();
      complex3.I.abs();
      Complex complex7 = complex6.negate();
      complex7.ONE.sin();
      Complex complex8 = complex6.INF.multiply(2289);
      Complex complex9 = complex2.subtract((-4764.97063));
      Complex complex10 = complex6.add(complex1);
      complex10.getArgument();
      complex10.toString();
      complex9.pow(complex1);
      Complex.valueOf((-138.9306993002581));
      complex5.multiply(complex1);
      complex8.getReal();
      complex8.getReal();
      complex10.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex1.add(Double.NaN);
      Complex complex3 = complex0.cos();
      complex3.isInfinite();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex4.ZERO.conjugate();
      complex0.NaN.subtract(complex4);
      complex4.INF.toString();
      complex2.abs();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(912.778756);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.tanh();
      complex2.ZERO.subtract(912.778756);
      Complex complex3 = complex0.cos();
      Complex.valueOf(912.778756);
      Complex complex4 = complex3.NaN.atan();
      complex2.getField();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex1.add(912.778756);
      complex6.ZERO.tan();
      complex0.getReal();
      Complex complex7 = complex1.acos();
      Complex complex8 = Complex.INF;
      complex7.INF.multiply(3487);
      Complex complex9 = complex7.ONE.subtract(complex8);
      complex9.sinh();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.I.conjugate();
      complex1.divide(complex0);
      Complex.valueOf((-20.0), 912.778756);
      complex11.divide((-20.0));
      complex4.pow((-373.68367));
      Complex complex12 = complex9.sqrt1z();
      complex5.readResolve();
      complex12.sqrt1z();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 3088.1);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex7.NaN.multiply(complex1);
      complex8.ONE.getArgument();
      Complex complex9 = complex6.ONE.multiply(complex0);
      complex5.sin();
      complex0.toString();
      complex6.NaN.asin();
      Complex complex10 = complex5.negate();
      complex10.I.asin();
      Complex complex11 = complex6.cosh();
      complex11.sqrt1z();
      Complex complex12 = complex9.sin();
      complex6.NaN.toString();
      complex12.INF.abs();
      complex4.getArgument();
      complex11.reciprocal();
      complex10.equals(complex9);
      complex10.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex0.ONE.acos();
      Complex complex1 = complex0.I.sin();
      complex1.INF.conjugate();
      Complex complex2 = complex1.NaN.cosh();
      complex0.INF.add(complex1);
      complex0.INF.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.add(0.0);
      Complex complex5 = complex1.sin();
      complex5.equals(complex3);
      complex0.getImaginary();
      complex0.NaN.subtract(complex4);
      Complex complex6 = Complex.valueOf(1.5787194498912167E-8, 0.0);
      Complex complex7 = complex0.NaN.tan();
      complex6.ONE.multiply((-3207));
      complex5.pow(2288.449937);
      complex2.negate();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.divide(complex0);
      complex2.tanh();
      complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.ONE.asin();
      complex2.multiply((-953.3252209857));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.reciprocal();
      complex4.getReal();
      complex5.log();
      Complex complex7 = complex6.acos();
      complex4.INF.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.divide((-1127.923));
      complex7.acos();
      Complex.valueOf((-333.199876), (-953.3252209857));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.NaN.add(Double.POSITIVE_INFINITY);
      complex6.equals(complex9);
      complex2.sin();
      complex8.getArgument();
      complex8.pow(complex6);
      complex3.toString();
      complex10.asin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      complex1.ZERO.multiply(complex0);
      complex0.toString();
      Complex complex2 = complex0.ONE.add(0.0);
      Complex complex3 = complex2.NaN.add(complex0);
      complex0.readResolve();
      Complex complex4 = complex0.ONE.conjugate();
      complex2.isInfinite();
      complex3.sin();
      Complex complex5 = complex4.cosh();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1734.914377121);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ZERO.asin();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex1.I.getArgument();
      complex4.getField();
      complex3.getArgument();
      String string0 = complex0.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex9.I.negate();
      complex10.INF.getArgument();
      Complex complex11 = complex10.INF.multiply(0);
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getReal(), 0.01);
      assertTrue(complex11.isInfinite());
      
      Complex complex12 = complex6.reciprocal();
      Complex complex13 = complex1.log();
      Complex complex14 = complex13.NaN.subtract((-3.141592653589793));
      Complex complex15 = Complex.valueOf(1.5707963267948966, (-3.304167134225169E-8));
      complex15.ZERO.reciprocal();
      Complex complex16 = complex12.conjugate();
      Complex complex17 = complex3.divide(5.005103745740068E-8);
      Complex complex18 = complex17.ONE.exp();
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      complex8.isInfinite();
      assertSame(complex8, complex14);
      
      complex2.readResolve();
      assertSame(complex2, complex16);
      
      Complex complex19 = complex6.log();
      complex19.getField();
      complex1.subtract(complex12);
      Complex complex20 = complex19.log();
      assertTrue(complex20.equals((Object)complex9));
      
      complex15.hashCode();
      assertEquals(1.5707963267948966, complex15.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1106.6132, 1106.6132);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1106.6132, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1106.6132, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex0.isNaN();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.subtract(Double.NaN);
      Complex complex4 = complex0.I.add(0.0);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.add(complex0);
      complex5.isNaN();
      Complex complex6 = complex1.add(653.73776475);
      assertSame(complex6, complex5);
      assertSame(complex0, complex3);
      assertFalse(complex6.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-961.0701), (-961.0701));
      complex0.ZERO.abs();
      complex0.INF.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex2.ONE.add((-961.0701));
      Complex complex5 = complex4.NaN.exp();
      complex4.INF.createComplex((-961.0701), (-961.0701));
      Complex complex6 = complex5.NaN.divide((-961.0701));
      complex3.ONE.add(complex6);
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(4.203159541613745E-8, (-1605.894159));
      complex0.isNaN();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sqrt1z();
      assertEquals(4.203158726699487E-8, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex4.ZERO.exp();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      complex0.getArgument();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex7.pow(4.203159541613745E-8);
      Complex complex10 = complex5.cos();
      Complex complex11 = Complex.valueOf(4722.133268971446, (-1828.59903991066));
      List<Complex> list0 = complex10.nthRoot(1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex6));
      
      Complex complex12 = complex9.add(4.203159541613745E-8);
      complex12.NaN.createComplex((-7.724219106106896E111), (-1196.39215661));
      assertSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex13 = complex5.divide(1166.0);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(5.715566673903409E-8, complex3.getReal(), 0.01);
      assertEquals((-0.5998551901206912), complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1805.543125337646, 1805.543125337646);
      assertEquals(1805.543125337646, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1805.543125337646, complex0.getImaginary(), 0.01);
  }
}
