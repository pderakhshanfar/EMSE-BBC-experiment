/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:49:16 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(2118494644);
      Complex complex1 = complex0.multiply(2118494644);
      complex1.NaN.acos();
      complex1.tanh();
      Complex complex2 = Complex.valueOf((double) 2118494644, (double) 2118494644);
      complex2.ONE.readResolve();
      Complex complex3 = complex2.atan();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      int int0 = 676;
      complex0.pow(complex1);
      Complex complex2 = Complex.valueOf((-1379.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow(1.8597132378953187E-240);
      double double0 = 73.079249406597;
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex3.tanh();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2267.0639938906766);
      complex0.log();
      Complex.valueOf(427.515621698322, 6.753452542942992E-9);
      Complex complex1 = Complex.valueOf(708.0, (-2169.65697391));
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.multiply(708.0);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf(708.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.log();
      Complex complex5 = new Complex(1.3838964592430477E-87, 2.1151310700892382E-19);
      complex3.multiply(complex0);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1.544882070711032E-8, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2.827403943791541E7);
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.ONE.subtract(complex0);
      complex0.I.tan();
      Complex complex2 = Complex.valueOf((-20.0), 6.6872405477693402E17);
      Complex complex3 = new Complex(6.6872405477693402E17, (-20.0));
      Complex complex4 = complex2.NaN.pow(2.827403943791541E7);
      Complex complex5 = complex2.multiply(37);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.I.multiply(complex3);
      complex6.readResolve();
      complex7.cosh();
      Complex complex8 = complex5.INF.sqrt();
      complex5.I.exp();
      Complex complex9 = complex8.add((-1839.389247524959));
      complex9.ZERO.hashCode();
      Complex complex10 = complex3.sqrt();
      complex10.acos();
      Complex complex11 = complex1.divide(complex6);
      complex0.exp();
      complex11.sinh();
      complex10.ZERO.cos();
      complex8.equals("");
      complex11.asin();
      complex4.negate();
      complex9.subtract(2.827403943791541E7);
      complex10.multiply(37);
      try { 
        complex0.nthRoot((-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -899
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-36.37781495266), (-36.37781495266));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-864.1324828));
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-4350.232829849832), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.cosh();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1035.169829919221), Double.NaN);
      complex0.asin();
      Complex complex2 = Complex.ONE;
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.valueOf((-1.0), (-1.0));
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.multiply((-2045222521));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(2.4485788345336914, 2.4485788345336914);
      complex0.ONE.asin();
      complex0.hashCode();
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2.827403943791541E7);
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex0.I.tan();
      Complex complex3 = Complex.valueOf((-20.0), 6.6872405477693402E17);
      Complex complex4 = complex0.exp();
      complex3.NaN.pow((-4820.124697991889));
      Complex complex5 = complex3.multiply(37);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.I.multiply(complex4);
      complex6.readResolve();
      complex7.cosh();
      Complex complex8 = complex5.INF.sqrt();
      complex5.I.exp();
      complex8.add((-1839.389247524959));
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 1.266589879989624;
      Complex complex0 = new Complex(1.266589879989624);
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2.827403943791541E7);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.I.tan();
      Complex complex4 = Complex.valueOf((-20.0), 6.6872405477693402E17);
      complex0.exp();
      complex4.NaN.pow((-4819.455030424));
      Complex complex5 = complex4.multiply(37);
      complex5.sqrt1z();
      Complex complex6 = new Complex(2.827403943791541E7, 6.6872405477693402E17);
      Complex complex7 = complex6.multiply(complex0);
      complex7.I.exp();
      complex3.cosh();
      complex3.sqrt();
      Complex complex8 = complex5.exp();
      complex2.add(2.827403943791541E7);
      complex1.hashCode();
      Complex complex9 = complex5.sqrt();
      complex6.acos();
      Complex complex10 = new Complex((-3734.273), 6.9919903587080315E-56);
      complex10.divide(complex8);
      complex2.exp();
      complex9.sinh();
      complex9.cos();
      complex6.asin();
      Complex complex11 = new Complex(0.01554642094058778, (-3734.273));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(2.4485788345336914, 2.4485788345336914);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.exp();
      complex3.NaN.getArgument();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.INF.add(Double.NaN);
      complex5.pow(complex0);
      complex4.I.abs();
      complex1.ZERO.abs();
      Complex complex6 = complex4.multiply((-3479.0357308350076));
      complex5.I.subtract(0.0);
      Complex complex7 = complex6.I.pow(complex4);
      Complex complex8 = Complex.valueOf(3348.5);
      Complex complex9 = complex8.ZERO.atan();
      complex3.NaN.sqrt1z();
      Complex complex10 = complex9.NaN.divide(complex7);
      complex0.pow(complex1);
      complex10.ZERO.divide(3.479545684576179E-8);
      Complex complex11 = complex0.divide(Double.NaN);
      complex1.exp();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex11.negate();
      complex13.ONE.readResolve();
      Complex complex14 = Complex.NaN;
      Complex.valueOf(Double.NaN);
      complex14.ZERO.divide(complex11);
      complex5.hashCode();
      complex12.ZERO.divide(complex10);
      complex0.reciprocal();
      Complex.valueOf(1.0, 3.479545684576179E-8);
      complex6.abs();
      try { 
        complex12.nthRoot((-2045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.tanh();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(7.0, 0.5145297050476074);
      complex0.hashCode();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.exp();
      complex1.NaN.cos();
      Complex complex2 = complex1.tanh();
      complex2.getField();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex3.NaN.add(complex0);
      complex3.NaN.sinh();
      complex2.ZERO.multiply(7.0);
      complex2.divide(0.5145297050476074);
      Complex complex5 = complex0.multiply((-1));
      Complex complex6 = complex1.add(complex0);
      complex1.exp();
      complex5.asin();
      complex6.cos();
      complex4.atan();
      complex3.acos();
      Complex.valueOf(0.004183249377958775, (double) (-1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.cosh();
      Complex complex1 = complex0.NaN.pow(2.712977886199951);
      Complex complex2 = complex0.pow((-1492.711));
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex2.equals(complex0);
      Complex complex4 = complex2.INF.exp();
      complex0.INF.cosh();
      Complex complex5 = complex4.I.createComplex(Double.POSITIVE_INFINITY, (-20.0));
      Complex.valueOf(2.712977886199951);
      complex2.exp();
      complex1.negate();
      Complex complex6 = complex3.multiply(848.406277);
      complex5.readResolve();
      Complex complex7 = complex4.conjugate();
      complex7.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(3.1327834709132163, 3.1327834709132163);
      Complex complex1 = complex0.add(complex0);
      Complex complex2 = complex1.ZERO.asin();
      complex0.cosh();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.divide((-765.631112));
      complex4.toString();
      complex3.tan();
      Complex complex6 = complex5.reciprocal();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-19.62866455125412));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.asin();
      Complex complex3 = complex1.cosh();
      complex1.subtract(complex3);
      Complex complex4 = Complex.I;
      complex1.I.multiply((-19.62866455125412));
      complex2.multiply(complex4);
      complex2.divide(1793.8153);
      Complex complex5 = complex3.cos();
      complex4.toString();
      complex3.sqrt();
      complex5.tan();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(5317.3339596, 5317.3339596);
      Complex complex1 = complex0.asin();
      complex1.ONE.tan();
      Complex complex2 = complex1.tan();
      complex2.sinh();
      Complex complex3 = new Complex(109.2662858);
      Complex complex4 = Complex.NaN;
      complex3.sqrt();
      Complex complex5 = complex2.cosh();
      complex5.ZERO.subtract(98.31);
      complex1.subtract(complex0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(5317.3339596);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.cosh();
      complex0.multiply(complex2);
      complex1.log();
      complex2.divide((-3.00015852582934E-8));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.cos();
      complex7.toString();
      complex5.sqrt();
      complex4.divide((-765.631112));
      complex3.tan();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.negate();
      complex0.equals(complex0);
      Complex complex1 = complex0.pow(3147.0);
      try { 
        complex1.ZERO.nthRoot((-2230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,230
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 1.557407724654902);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.divide(complex5);
      complex2.sinh();
      Complex complex7 = new Complex(1.557407724654902);
      complex1.exp();
      Complex complex8 = new Complex((-755.5647914), (-755.5647914));
      complex0.toString();
      Complex complex9 = Complex.INF;
      complex9.cos();
      complex6.multiply(3196);
      complex7.asin();
      complex9.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply((-20.0));
      complex1.NaN.multiply(complex2);
      Complex complex3 = new Complex((-873.996242990706), Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      complex1.pow((-3.016329994276181E-8));
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-352.00064), 1.557407724654902);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.tan();
      complex4.divide(complex5);
      complex2.sinh();
      Complex complex6 = new Complex(1.557407724654902);
      complex1.exp();
      complex2.subtract(3641.8419637407274);
      complex2.pow(complex4);
      Complex complex7 = complex5.asin();
      complex1.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-600.88));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cosh();
      complex1.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(6.871063126720605E-9, (-600.88));
      complex3.toString();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf((-600.88), (-123901.02504158876));
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.multiply(3196);
      complex8.asin();
      complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1.8401154385280953);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf((-20.0), (-2252.4631583783));
      Complex.valueOf(1.8401154385280953, 1.8401154385280953);
      Complex complex4 = complex2.pow(complex3);
      complex0.ZERO.sqrt1z();
      Complex complex5 = new Complex((-2252.4631583783), (-20.0));
      Complex complex6 = Complex.valueOf((-1.0), (-20.0));
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      complex4.pow(1645.675849635);
      Complex complex7 = new Complex(7.1, 4.392983574030969E-147);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(3.1327834709132163, 3.1327834709132163);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex0.add(complex1);
      Complex complex3 = complex1.cosh();
      complex3.log();
      Complex complex4 = complex2.divide(743.802658);
      complex4.cos();
      complex1.toString();
      Complex complex5 = complex4.sqrt();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2180.424083163);
      Complex complex1 = complex0.divide(2180.424083163);
      complex0.subtract(complex1);
      complex0.getField();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex2.sinh();
      Complex complex7 = new Complex(1893.2117355403);
      complex3.exp();
      Complex complex8 = new Complex(109.2662858, 2914.009487);
      complex3.toString();
      complex5.cos();
      complex3.multiply(524);
      complex4.asin();
      Complex complex9 = Complex.valueOf(Double.NaN, (double) 524);
      complex7.divide(complex9);
      Complex complex10 = complex4.cosh();
      complex6.add(complex10);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(3.1327834709132163, 3.1327834709132163);
      Complex complex1 = Complex.I;
      complex0.add(complex1);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.divide((-765.631112));
      complex4.cos();
      complex0.INF.toString();
      Complex complex5 = complex3.sqrt();
      complex3.divide((-765.631112));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.557407724654902, 4661.994203);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex5.divide(complex7);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex10.divide(complex0);
      complex11.pow((-1203.99730915));
      Complex complex12 = complex6.pow(6.283185307179586);
      complex12.sqrt();
      complex8.abs();
      Complex complex13 = Complex.valueOf(6.284627619868033E-6, (-403.2787496057231));
      complex4.cosh();
      complex0.divide(208.767351);
      Complex complex14 = Complex.I;
      complex5.getArgument();
      complex10.add(complex0);
      Complex.valueOf((-1.4255188208147591), 1.557407724654902);
      complex7.sqrt();
      complex9.pow(Double.NaN);
      complex13.cosh();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(3.1327834709132163, 3.1327834709132163);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex3.log();
      Complex complex7 = complex5.divide((-765.631112));
      complex7.cos();
      complex0.INF.toString();
      Complex complex8 = complex6.sqrt();
      complex6.divide((-765.631112));
      complex8.asin();
      complex8.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.ONE;
      complex0.tanh();
      complex0.toString();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-120.0953), (-120.0953));
      complex0.atan();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      complex0.isInfinite();
      complex0.ZERO.sinh();
      complex0.NaN.toString();
      Complex complex2 = complex0.multiply(0);
      complex2.asin();
      complex0.divide(complex1);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(29.128452792308853);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.add(29.128452792308853);
      complex2.ONE.createComplex(29.128452792308853, 29.128452792308853);
      Complex complex3 = complex0.cos();
      complex3.NaN.log();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.sqrt1z();
      complex5.divide(4.999126524757713E-197);
      complex4.sqrt();
      complex2.sin();
      complex1.cosh();
      complex1.log();
      complex0.conjugate();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      Complex complex2 = complex1.I.subtract((-3814.830769));
      Complex complex3 = Complex.valueOf(0.0, (-1044.2));
      complex3.NaN.getField();
      complex2.INF.getArgument();
      complex1.ONE.readResolve();
      Complex complex4 = Complex.ONE;
      complex4.ONE.tan();
      Complex complex5 = complex2.INF.pow(complex4);
      complex0.add(complex1);
      Complex complex6 = complex4.pow((-3814.830769));
      complex5.INF.acos();
      complex2.readResolve();
      complex2.multiply(complex5);
      complex2.readResolve();
      complex2.getField();
      complex0.conjugate();
      Complex complex7 = new Complex((-1044.2), 2533.0);
      complex4.subtract(complex7);
      complex4.getImaginary();
      complex2.getImaginary();
      complex6.I.multiply(1);
      complex1.tan();
      complex6.pow(2533.0);
      complex4.getField();
      complex4.multiply(1700.1294721069928);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(3.1327834709132163, 3.1327834709132163);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex3.log();
      Complex complex7 = complex5.divide((-765.631112));
      complex7.cos();
      complex0.INF.toString();
      complex6.sqrt();
      complex6.divide((-765.631112));
      complex4.tan();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.cos();
      complex0.tanh();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.sin();
      complex1.NaN.negate();
      complex0.divide(complex1);
      complex0.ZERO.toString();
      complex1.NaN.add(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ONE.sin();
      complex4.multiply(complex1);
      complex0.abs();
      complex1.I.cosh();
      Complex complex5 = complex3.sinh();
      complex5.INF.multiply(Double.NaN);
      Complex.valueOf(1.0, Double.NaN);
      Complex.valueOf(1.0);
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-352.00064), 1.557407724654902);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex1.sqrt();
      complex1.divide(complex2);
      Complex complex7 = Complex.NaN;
      complex7.sinh();
      Complex complex8 = complex5.divide(complex4);
      complex5.pow((-352.00064));
      complex7.pow(208.767351);
      complex4.abs();
      Complex.valueOf((-2.3472125169205568E-7), (-403.2787496057231));
      complex5.cosh();
      Complex complex9 = complex8.divide((-1.0));
      Complex complex10 = Complex.I;
      complex10.getArgument();
      Complex complex11 = Complex.valueOf((-1017.7288359145), (-0.7071067811865476));
      complex11.sqrt();
      complex3.pow((-1446.6755549988));
      complex9.cosh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.1165866833118273E-8));
      Complex complex1 = complex0.createComplex((-1.0), (-1.1165866833118273E-8));
      complex1.getArgument();
      complex1.sin();
      Complex complex2 = complex0.conjugate();
      Complex.valueOf((-3.141592642423926), 0.0);
      complex0.sqrt();
      Complex complex3 = Complex.INF;
      complex0.subtract(complex3);
      complex0.pow(complex0);
      Complex complex4 = new Complex(0.0);
      complex4.multiply(0.0);
      Complex complex5 = Complex.I;
      complex2.equals(complex5);
      Complex complex6 = complex3.pow((-344.71495158));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.I.reciprocal();
      complex0.isInfinite();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = new Complex((-192.66973491), 1649.4359);
      complex4.divide(complex0);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex2.divide(complex3);
      complex6.pow((-2233.922));
      Complex complex7 = complex4.pow(208.767351);
      complex4.abs();
      Complex complex8 = Complex.valueOf((-2233.922), Double.POSITIVE_INFINITY);
      complex7.cosh();
      Complex complex9 = complex5.divide(1638.6788);
      complex6.getArgument();
      complex4.sqrt();
      complex8.pow(0.2470736801624298);
      complex9.cosh();
      Complex complex10 = Complex.valueOf(0.2470736801624298, 0.2470736801624298);
      complex10.conjugate();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(0.001743707384842767);
      complex3.I.hashCode();
      complex3.ONE.tanh();
      Complex complex4 = complex0.pow(complex0);
      complex4.ONE.negate();
      complex1.asin();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-600.88));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cosh();
      complex1.hashCode();
      Complex complex3 = complex1.tanh();
      complex3.toString();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      double double0 = 0.0;
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.INF.atan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = Complex.NaN;
      complex1.createComplex((-1409.076242392842), 0.0);
      Complex complex7 = complex4.subtract(complex2);
      Complex complex8 = complex5.subtract(complex7);
      int int0 = 2147483645;
      // Undeclared exception!
      complex8.ZERO.nthRoot(2147483645);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply((-1073741824));
      Complex complex3 = complex0.pow(0.0);
      complex0.conjugate();
      complex1.add((double) (-1073741824));
      complex1.readResolve();
      Complex complex4 = complex3.tanh();
      complex3.subtract((double) (-1073741824));
      complex0.isNaN();
      complex2.cosh();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.valueOf((-599.0940031112709), 0.0);
      complex6.getReal();
      complex2.sqrt1z();
      complex4.getArgument();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply((-1073741824));
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.add((double) (-1073741824));
      Complex complex6 = complex3.tanh();
      complex3.subtract((double) (-1073741824));
      complex0.isNaN();
      complex2.cosh();
      complex6.sqrt();
      complex6.ONE.reciprocal();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = Complex.NaN;
      complex8.createComplex(0.0, (-1.0));
      complex0.toString();
      Complex complex9 = complex5.subtract(complex4);
      complex7.sqrt1z();
      complex2.getArgument();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply((-1073741824));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.add((double) (-1073741824));
      Complex complex5 = complex1.tanh();
      complex1.subtract((double) (-1073741824));
      complex0.isNaN();
      complex2.cosh();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex5.ONE.reciprocal();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = Complex.NaN;
      complex9.createComplex(0.0, (-1.0));
      complex4.subtract(complex3);
      complex6.subtract(complex5);
      complex8.readResolve();
      complex1.equals((Object) null);
      complex7.pow(0.0);
      Complex complex10 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.conjugate();
      Complex complex1 = complex0.I.reciprocal();
      complex0.isInfinite();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.ZERO.exp();
      complex3.I.multiply((-817));
      complex0.NaN.toString();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.pow((-2178.0084503));
      complex1.atan();
      complex5.multiply(7);
      complex0.add((double) 7);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(5317.3339596);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex1.isInfinite();
      Complex complex3 = complex1.sinh();
      Complex complex4 = new Complex((-911.3303), 5317.3339596);
      complex4.exp();
      Complex complex5 = new Complex(308.455687911339, 92.632571466603);
      complex5.toString();
      complex3.cos();
      Complex complex6 = complex4.multiply(1148);
      Complex complex7 = complex3.tan();
      complex2.add(complex6);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(682.2430584);
      Complex complex1 = Complex.valueOf(3556.493, 0.14285714285714285);
      complex1.sqrt();
      Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.cosh();
      complex1.hashCode();
      Complex complex3 = complex1.pow(complex0);
      complex3.asin();
      Complex complex4 = Complex.INF;
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1.9722461073327933), (-20.0));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sin();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = Complex.valueOf((-1.0), (-2252.4631583783));
      complex3.add(complex0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.subtract(complex2);
      complex3.pow(complex5);
      complex2.multiply(0.0);
      complex5.equals(complex0);
      complex4.pow((-2252.4631583783));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex(1.2915711402893066, (-1839.0));
      complex1.getArgument();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.pow(1.2915711402893066);
      complex2.conjugate();
      Complex complex4 = complex2.add((-2453.30799));
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.subtract(5.054202073556894E-211);
      complex5.isNaN();
      complex0.cosh();
      complex2.sqrt();
      Complex complex7 = complex3.conjugate();
      complex3.createComplex(1.2915711402893066, 1.2915711402893066);
      complex0.toString();
      complex4.subtract(complex6);
      Complex complex8 = Complex.INF;
      complex8.subtract(complex7);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-600.88));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.cosh();
      complex2.hashCode();
      Complex complex4 = Complex.NaN;
      complex2.ONE.subtract(502207.6087378555);
      Complex complex5 = complex4.pow(complex2);
      complex5.asin();
      complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-1839.0), (-1.0));
      complex1.getArgument();
      Complex complex2 = new Complex(1.2915711402893066, (-3.141048879853286));
      complex2.conjugate();
      Complex complex3 = Complex.valueOf(56.8419684663712, 1.2915711402893066);
      Complex complex4 = complex1.add(complex0);
      complex0.sqrt();
      Complex complex5 = complex4.subtract(complex1);
      complex5.pow(complex3);
      complex1.multiply(2964360.0753530334);
      complex3.equals(complex1);
      complex5.pow(56.8419684663712);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sqrt();
      complex0.pow(Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.cosh();
      complex4.divide((-125.960305058));
      complex3.getArgument();
      Complex complex5 = complex3.sqrt();
      complex5.pow((-1409.73844));
      Complex complex6 = new Complex((-1409.73844), 1.5707963267948966);
      complex6.acos();
      complex2.negate();
      complex4.cosh();
      complex2.add((-125.960305058));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 208.767351);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.cos();
      complex2.ONE.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.divide(complex3);
      complex4.ONE.getField();
      Complex complex5 = complex3.subtract(complex1);
      complex4.createComplex(2.0, 2140.593988272);
      Complex complex6 = complex5.ZERO.multiply((-2690));
      complex3.readResolve();
      Complex complex7 = complex4.sinh();
      complex7.readResolve();
      Complex complex8 = complex4.tanh();
      complex8.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.divide(2140.593988272);
      complex2.negate();
      complex7.multiply(2.0);
      complex4.hashCode();
      Complex complex9 = complex7.exp();
      complex9.acos();
      complex6.getArgument();
      complex8.getReal();
      Complex.valueOf(1.604709595901607E-299);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(787.921075);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.multiply(2540.45742);
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex3.INF.exp();
      complex3.INF.sin();
      Complex complex5 = complex4.INF.reciprocal();
      complex0.ZERO.pow(1.3095299991573769E-143);
      Complex complex6 = complex0.NaN.cosh();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex6.I.multiply(Double.NaN);
      complex8.INF.getField();
      Complex complex9 = Complex.valueOf(1962.052561);
      complex4.NaN.tan();
      complex9.NaN.getField();
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex0.add(0.0);
      Complex complex12 = complex11.I.conjugate();
      complex10.getArgument();
      complex7.atan();
      complex11.getArgument();
      complex7.negate();
      complex12.getImaginary();
      complex5.cos();
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2306.49568038894);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.ONE.reciprocal();
      complex0.readResolve();
      complex0.toString();
      complex2.ZERO.subtract(complex0);
      complex0.multiply((-1.0));
      Complex complex4 = complex1.add(6.283185307179586);
      complex3.getImaginary();
      complex2.add(6.283185307179586);
      complex3.sinh();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.tanh();
      complex1.ONE.add(1.0);
      Complex complex2 = complex1.negate();
      complex2.I.asin();
      Complex.valueOf(0.0);
      Complex complex3 = null;
      try { 
        complex2.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-2582.1));
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.exp();
      complex1.isNaN();
      complex2.ONE.log();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.ONE.add(0.0);
      complex5.hashCode();
      complex3.isInfinite();
      complex6.sin();
      complex2.NaN.add(0.0);
      complex6.readResolve();
      complex1.cos();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.ZERO.cosh();
      complex0.hashCode();
      complex0.I.pow(complex1);
      Complex complex2 = complex0.asin();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      complex1.NaN.hashCode();
      complex0.getField();
      complex0.abs();
      complex0.abs();
      complex0.getReal();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.I.sqrt1z();
      complex1.I.sqrt1z();
      int int0 = 4697;
      complex3.INF.nthRoot(4697);
      try { 
        complex2.nthRoot((-977));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -977
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.negate();
      complex0.asin();
      Complex complex2 = complex0.tan();
      Complex.valueOf(20.0);
      complex2.abs();
      complex1.createComplex(396.95704609, 396.95704609);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-125.960305058));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.NaN.subtract(complex0);
      Complex complex5 = complex4.conjugate();
      complex1.I.conjugate();
      complex4.ONE.add(0.0);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex3.log();
      complex7.atan();
      complex6.ONE.toString();
      Complex complex8 = complex0.INF.negate();
      complex4.getReal();
      complex0.ONE.sinh();
      complex6.abs();
      Complex complex9 = complex7.cosh();
      complex3.sqrt1z();
      complex9.ZERO.tan();
      complex9.INF.toString();
      Complex complex10 = complex2.I.negate();
      complex10.NaN.toString();
      Complex complex11 = complex4.multiply((-3.2117127164185917E-77));
      complex11.NaN.hashCode();
      Complex complex12 = complex2.log();
      complex12.ONE.cos();
      complex12.NaN.multiply(2262);
      complex2.isNaN();
      complex3.conjugate();
      complex5.negate();
      complex8.isInfinite();
      complex1.createComplex(1.1752011936438014, Double.NaN);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.cosh();
      Complex complex2 = complex0.I.asin();
      complex0.getField();
      complex2.INF.hashCode();
      Complex complex3 = complex1.I.reciprocal();
      complex3.NaN.createComplex(0.0, 2055.794680031462);
      Complex complex4 = complex2.asin();
      complex0.getArgument();
      Complex complex5 = complex0.divide(complex1);
      complex5.NaN.sin();
      Complex complex6 = complex4.divide(0.0);
      complex6.I.toString();
      complex6.NaN.toString();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-299.12), (-299.12));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.multiply(0);
      Complex complex2 = complex0.cosh();
      complex0.multiply((-299.12));
      complex1.multiply(7);
      Complex.valueOf((-1275.2878722));
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(5317.3339596);
      Complex complex1 = complex0.NaN.divide(308.455687911339);
      complex0.nthRoot(4945);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.tan();
      complex3.NaN.add(complex2);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex0.divide(complex5);
      complex7.NaN.multiply(4945);
      Complex complex8 = complex7.INF.sinh();
      complex8.I.divide(complex1);
      complex7.pow(308.455687911339);
      complex2.abs();
      Complex complex9 = Complex.valueOf((-1097.9197247667), 1638.6788);
      complex9.NaN.cosh();
      Complex complex10 = complex3.divide(9.403991584150214);
      complex6.getArgument();
      Complex complex11 = complex6.sqrt();
      complex10.pow(1638.6788);
      complex10.add((double) 4945);
      complex9.negate();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ONE.multiply(0.0);
      complex3.add(0.0);
      Complex complex4 = complex0.I.pow(complex1);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex5.ONE.tanh();
      complex6.multiply((-1684));
      complex4.NaN.pow(0.0);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.add(0.0);
      complex5.NaN.tanh();
      complex8.subtract(0.0);
      complex8.isNaN();
      complex7.ONE.cosh();
      complex8.NaN.sqrt();
      complex7.conjugate();
      Complex complex9 = complex0.createComplex(0.0, 0.0);
      complex9.toString();
      Complex complex10 = complex5.subtract(complex0);
      complex9.subtract(complex8);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex1.getArgument();
      Complex complex3 = complex0.ZERO.sqrt();
      complex1.NaN.getArgument();
      Complex.valueOf((-1644.6));
      Complex complex4 = complex2.ONE.cosh();
      complex2.toString();
      complex1.INF.reciprocal();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex4.multiply(complex5);
      complex6.ZERO.add(Double.NaN);
      Complex complex7 = complex6.reciprocal();
      complex1.NaN.tan();
      complex7.NaN.sinh();
      complex3.getImaginary();
      Complex complex8 = complex1.sqrt1z();
      complex2.cosh();
      complex2.exp();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.acos();
      complex0.isNaN();
      complex1.ONE.add(0.0);
      Complex complex2 = complex0.cosh();
      complex2.ZERO.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(188);
      Complex complex3 = complex2.conjugate();
      complex2.sqrt();
      complex0.subtract(complex1);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = new Complex(188, 0.0);
      Complex complex6 = complex4.NaN.multiply(complex5);
      Complex.valueOf(0.0);
      complex2.acos();
      Complex complex7 = complex2.sinh();
      complex4.INF.cos();
      Complex complex8 = complex7.INF.pow(complex5);
      complex7.exp();
      Complex complex9 = complex5.NaN.multiply(complex3);
      complex9.ZERO.readResolve();
      complex2.multiply(complex4);
      complex8.equals(list0);
      complex2.sinh();
      complex8.isInfinite();
      Object object0 = new Object();
      complex6.equals(object0);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      Complex.valueOf(0.0, 0.0);
      complex0.INF.atan();
      complex1.getReal();
      Complex complex3 = complex2.sqrt1z();
      complex3.getArgument();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.I.sin();
      complex1.NaN.negate();
      complex0.divide(complex1);
      complex0.ZERO.toString();
      complex1.NaN.add(complex0);
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex2.ONE.sin();
      complex3.multiply(complex1);
      complex0.abs();
      complex1.I.cosh();
      Complex complex4 = complex2.sinh();
      complex4.INF.multiply(Double.NaN);
      complex1.exp();
      Complex.valueOf(1.0);
      complex3.isNaN();
      Complex complex5 = new Complex(Double.NaN);
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.sqrt1z();
      complex2.NaN.divide(complex1);
      complex2.divide(complex0);
      complex0.abs();
      complex0.getImaginary();
      complex1.ZERO.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.pow(complex3);
      complex4.INF.atan();
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex5.ZERO.atan();
      complex6.INF.getArgument();
      complex3.tan();
      Complex complex7 = complex5.I.atan();
      complex3.pow(0.0);
      complex6.isNaN();
      Complex.valueOf(376.547851330729, 376.547851330729);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-1.5314373779304356E296));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.multiply(complex1);
      complex1.add(complex0);
      Complex complex4 = complex3.tanh();
      complex0.ZERO.readResolve();
      complex4.INF.toString();
      Complex complex5 = complex4.ONE.divide(1.7984863104885375E-111);
      Complex complex6 = complex1.add(1.7984863104885375E-111);
      complex5.NaN.pow(complex3);
      complex6.I.add(complex3);
      Complex complex7 = complex1.INF.cosh();
      complex4.getReal();
      Complex complex8 = complex5.cos();
      complex8.multiply((-1.5314373779304356E296));
      complex8.divide(complex2);
      complex0.add(complex8);
      Complex.valueOf(4.16603235883392E133);
      Complex complex9 = complex5.pow(complex0);
      complex9.INF.multiply(37);
      complex7.getArgument();
      complex7.createComplex((-539.82), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      complex0.I.tanh();
      Complex complex2 = Complex.valueOf((-1678.0323850531777));
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex0.INF.negate();
      complex1.ZERO.divide(complex3);
      Complex.valueOf((-1678.0323850531777), 0.0);
      Complex complex5 = complex0.tan();
      Complex.valueOf((-1678.0323850531777));
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.asin();
      complex7.INF.add((-1678.0323850531777));
      complex7.NaN.tan();
      complex1.readResolve();
      complex3.getField();
      Complex complex8 = Complex.valueOf(0.0);
      complex6.pow(3.347954541376715E-8);
      complex0.ONE.nthRoot(95);
      complex3.log();
      complex7.getField();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      complex0.getArgument();
      complex0.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.divide(343.2891869729371);
      complex2.ONE.cosh();
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.ZERO.sin();
      Complex complex4 = complex1.NaN.conjugate();
      complex4.INF.multiply(0.0);
      complex2.isNaN();
      complex1.reciprocal();
      complex2.multiply(2.0);
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sqrt();
      complex0.toString();
      complex2.I.tanh();
      complex1.toString();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(1.4780692924846082E197);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.exp();
      complex3.NaN.getArgument();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.INF.add(Double.NaN);
      complex5.pow(complex0);
      complex4.I.abs();
      complex1.ZERO.abs();
      Complex complex6 = complex4.multiply((-3479.0357308350076));
      complex5.I.subtract(0.0);
      Complex complex7 = complex6.I.pow(complex4);
      Complex complex8 = Complex.valueOf(3348.5);
      Complex complex9 = complex8.ZERO.atan();
      complex3.NaN.sqrt1z();
      Complex complex10 = complex9.NaN.divide(complex7);
      complex0.pow(complex1);
      complex10.ZERO.divide(3.479545684576179E-8);
      Complex complex11 = complex0.divide(Double.NaN);
      Complex complex12 = complex1.exp();
      Complex complex13 = complex3.sinh();
      Complex complex14 = complex11.negate();
      complex14.ONE.readResolve();
      Complex complex15 = complex7.pow(complex12);
      complex15.ZERO.divide(complex11);
      complex5.hashCode();
      complex13.ZERO.divide(complex10);
      complex0.reciprocal();
      complex12.createComplex(0.0, Double.NaN);
      complex6.abs();
      try { 
        complex13.nthRoot((-2045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(630.3869603187);
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex0.I.abs();
      Complex complex3 = complex2.NaN.negate();
      complex3.ONE.multiply((-1428));
      Complex complex4 = complex3.ONE.subtract(20.0);
      complex4.ZERO.add(complex1);
      Complex complex5 = complex0.divide(885.3672209490292);
      Complex complex6 = complex0.INF.reciprocal();
      Complex complex7 = complex0.NaN.reciprocal();
      complex5.abs();
      Complex complex8 = complex0.add(885.3672209490292);
      complex8.ONE.sin();
      complex8.toString();
      int int0 = 2892;
      Complex complex9 = complex6.multiply(2892);
      complex7.subtract(0.0);
      complex9.INF.multiply(0);
      Complex complex10 = complex9.I.sqrt();
      complex10.NaN.hashCode();
      complex1.getArgument();
      try { 
        complex5.nthRoot((-2480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,480
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.divide((-460.9361233435255));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-1145.707025235477));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.tan();
      complex3.asin();
      complex2.add(complex1);
      complex0.add(4646.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(266.0);
      Complex complex3 = complex1.ONE.divide(complex0);
      Object object0 = complex2.readResolve();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.ZERO.multiply(complex4);
      complex2.equals(object0);
      Complex complex6 = complex5.NaN.log();
      complex6.NaN.hashCode();
      Complex complex7 = complex3.asin();
      complex3.NaN.sqrt();
      Complex complex8 = complex3.INF.add((-20.0));
      complex8.ZERO.abs();
      complex7.nthRoot(7);
      Complex complex9 = complex3.divide(complex5);
      Complex complex10 = complex9.negate();
      complex5.abs();
      complex3.add(complex4);
      complex1.isInfinite();
      Complex.valueOf(0.0, (-2825.6));
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.NaN.conjugate();
      complex0.INF.add(2.6010732940533088E-99);
      Complex complex2 = complex1.ZERO.sinh();
      complex2.cosh();
      complex1.getField();
      complex0.getImaginary();
      complex1.tan();
      complex0.toString();
      complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide((-419.6436492));
      complex2.INF.multiply(1847.0696553177788);
      Complex complex3 = complex0.acos();
      complex3.isInfinite();
      complex0.ONE.acos();
      complex1.readResolve();
      Complex complex4 = new Complex(4966.4575238);
      complex2.multiply(complex4);
      complex1.toString();
      Complex complex5 = complex4.multiply(1.4754809136835937E-8);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1010.3142873);
      Complex complex2 = complex0.I.pow(1010.3142873);
      Complex complex3 = complex2.add((-1436.216088));
      complex0.tanh();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.multiply((-1436.216088));
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex3.divide(complex2);
      complex4.ZERO.multiply((-592.280342445681));
      complex7.INF.readResolve();
      complex5.sinh();
      Complex complex8 = complex3.subtract(complex2);
      Complex complex9 = complex8.NaN.cosh();
      complex9.ONE.conjugate();
      complex0.multiply(complex1);
      complex4.isInfinite();
      Complex complex10 = complex1.pow(complex8);
      complex4.pow(2.4141423627760256E278);
      complex10.hashCode();
      complex5.multiply(2.4141423627760256E278);
      complex6.createComplex(9.2208866368527, 0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.ZERO.add((-1336.0));
      complex0.ZERO.conjugate();
      complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(9.517570994930463E-138);
      double double0 = 3668.2512355606;
      Complex complex1 = Complex.valueOf(3668.2512355606);
      complex1.I.add(complex0);
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.conjugate();
      Complex complex1 = complex0.I.reciprocal();
      complex0.isInfinite();
      Complex complex2 = complex0.ZERO.sinh();
      complex2.ZERO.exp();
      complex0.NaN.toString();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.multiply(0);
      complex3.tan();
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = Complex.I;
      complex3.I.multiply(complex4);
      complex3.NaN.pow(0.0);
      Complex complex5 = Complex.valueOf((-2998.385889790339), (-2596.190825863));
      Complex complex6 = complex5.ZERO.add(complex0);
      Complex complex7 = complex5.INF.exp();
      complex6.NaN.hashCode();
      complex5.getImaginary();
      complex5.INF.conjugate();
      complex6.divide((-2998.385889790339));
      complex1.multiply(1);
      Complex complex8 = complex0.subtract(0.0);
      Object object0 = complex8.readResolve();
      Complex complex9 = complex6.conjugate();
      complex1.equals(object0);
      complex1.I.tan();
      complex9.subtract((-1453.246999323));
      complex3.subtract(complex1);
      complex4.cosh();
      try { 
        complex7.nthRoot((-1699));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,699
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-196.290703345744));
      Complex complex1 = complex0.ONE.add(264.029);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.I.multiply(2115);
      assertEquals(2115.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = complex4.ONE.pow(20.7949196009851);
      Complex complex6 = complex5.ONE.asin();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = Complex.valueOf((-3916.809));
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex0.add(5.13004286606108E-207);
      Complex complex10 = complex9.conjugate();
      complex2.getArgument();
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex8.multiply(complex9);
      Complex complex13 = complex9.tan();
      Complex complex14 = complex10.cos();
      assertEquals(8.84991941814655E84, complex14.getReal(), 0.01);
      assertEquals((-4.540046597627813E-122), complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex0.sqrt1z();
      assertEquals(196.29325057160491, complex15.getReal(), 0.01);
      
      complex1.getImaginary();
      Complex complex16 = complex11.ONE.sqrt1z();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex17.ONE.conjugate();
      assertTrue(complex18.equals((Object)complex5));
      
      Complex complex19 = complex16.I.multiply(complex17);
      complex12.isInfinite();
      assertSame(complex12, complex4);
      
      complex9.getImaginary();
      double double0 = complex11.getArgument();
      assertEquals(0.7853981633974483, double0, 0.01);
      
      Complex complex20 = Complex.valueOf(0.0);
      assertEquals(0.0, complex20.getReal(), 0.01);
      
      Complex complex21 = complex13.subtract(complex2);
      assertFalse(complex13.equals((Object)object0));
      assertNotSame(complex21, complex19);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.createComplex((-3259.9518), (-3259.9518));
      Complex complex4 = complex0.ONE.tan();
      Complex complex5 = complex2.NaN.multiply(complex0);
      Complex complex6 = complex5.INF.multiply(3525);
      Complex complex7 = Complex.ONE;
      Complex.valueOf(2759.2754222209, 199.16658);
      complex7.nthRoot(7);
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex9.subtract(complex6);
      Complex complex11 = complex0.multiply(complex7);
      Complex complex12 = complex5.atan();
      complex11.I.multiply(complex8);
      complex3.add(complex10);
      Object object0 = new Object();
      complex9.equals(object0);
      Complex.valueOf((double) 3525, (-3259.9518));
      Complex complex13 = complex11.divide((double) 7);
      complex13.subtract((double) 3525);
      Complex complex14 = complex5.asin();
      complex14.ZERO.acos();
      complex14.isInfinite();
      complex1.log();
      complex12.getArgument();
      complex13.ONE.log();
      complex12.add((double) 7);
      complex7.subtract((double) 3525);
      complex13.pow(Double.NaN);
      try { 
        complex4.nthRoot((-2753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,753
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      complex1.isNaN();
      Complex complex2 = complex0.add(1200.1893362);
      Complex complex3 = complex2.subtract((-817.171371804));
      complex3.I.createComplex(1200.1893362, (-126.14218699));
      assertEquals(2017.3607080040001, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.I.divide(complex2);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(8.332018706033225E-4, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.I.log();
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.log();
      assertTrue(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      complex1.hashCode();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex(1.2915711402893066, (-1839.0));
      complex1.getArgument();
      Complex complex2 = complex1.I.sin();
      complex2.NaN.conjugate();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex1.NaN.add(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex5.INF.pow(complex1);
      Complex complex8 = complex7.I.multiply((-1839.0));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex7.equals((Object)complex4));
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertEquals((-1839.0), complex8.getImaginary(), 0.01);
      
      complex5.equals(complex0);
      Complex complex9 = complex5.pow((-1.5700940043762286));
      assertTrue(complex9.equals((Object)complex6));
      
      Complex complex10 = complex5.atan();
      assertTrue(complex10.equals((Object)complex0));
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.equals((Object)complex8));
  }
}
