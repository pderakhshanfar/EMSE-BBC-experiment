/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:59:14 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.I.divide(complex0);
      complex3.NaN.sinh();
      complex1.I.add(20.0);
      complex0.INF.pow(complex1);
      Complex complex4 = complex0.sqrt1z();
      complex2.ZERO.divide((-259.8430097011305));
      complex3.hashCode();
      Complex complex5 = complex2.pow(20.0);
      complex1.tan();
      complex5.I.subtract(complex4);
      complex5.multiply(0.22079706192016602);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(963);
      complex0.I.readResolve();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-567.674291), (-567.674291));
      Complex complex2 = complex1.multiply(2.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.negate();
      complex4.toString();
      complex4.ONE.getArgument();
      Complex complex5 = complex3.divide(610.7338741114);
      complex4.getField();
      complex1.hashCode();
      complex4.readResolve();
      complex3.getField();
      Complex complex6 = complex0.sqrt1z();
      complex4.atan();
      complex3.sqrt();
      Complex complex7 = complex5.tan();
      complex7.ZERO.getArgument();
      Complex.valueOf((-1720.033), 2.0);
      complex4.nthRoot(728);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(3217.2176408513, (-20.0));
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf((-20.0), (-255.25529575513067));
      complex0.divide(complex1);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cos();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tan();
      complex0.asin();
      Complex complex1 = complex0.negate();
      complex1.createComplex(1705.6, 3217.2176408513);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.multiply(1208);
      Complex complex3 = complex0.divide(2.2612379902222224);
      complex0.nthRoot(1084);
      complex1.readResolve();
      complex1.ONE.createComplex(2.6346492767333984, (-1.0));
      complex2.equals(complex3);
      complex0.sinh();
      Complex complex4 = Complex.valueOf(Double.NaN, 1.0);
      Complex complex5 = complex4.subtract(complex0);
      complex3.sin();
      complex0.nthRoot(1208);
      complex2.asin();
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-470594.0));
      Complex complex2 = complex1.createComplex((-470594.0), (-2039.0407915730268));
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex0.ZERO.createComplex(6.283185307179586, (-1677.03226137856));
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.NaN.negate();
      complex6.ZERO.tanh();
      complex3.readResolve();
      Complex complex7 = complex5.ONE.reciprocal();
      complex7.pow(786.661656);
      Complex complex8 = complex1.exp();
      complex8.ZERO.readResolve();
      complex3.add(complex5);
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex9.NaN.cosh();
      complex10.ZERO.add(complex2);
      complex5.I.tanh();
      Complex complex11 = complex3.multiply((-2265));
      complex6.getImaginary();
      complex8.createComplex(3.5037536832675478E-217, 6.283185307179586);
      complex4.asin();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(3070.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.NaN.multiply(193);
      Complex complex3 = complex2.atan();
      complex2.toString();
      Complex complex4 = complex2.ZERO.divide(complex3);
      Complex complex5 = complex2.INF.reciprocal();
      complex5.I.divide(complex3);
      Complex complex6 = complex0.sinh();
      complex2.toString();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex4.createComplex(193, 3070.0);
      complex7.getImaginary();
      Complex complex9 = complex0.I.tan();
      complex3.createComplex(Double.NaN, 193);
      Complex complex10 = complex7.log();
      Complex.valueOf((double) 193);
      Complex complex11 = complex3.sqrt1z();
      complex6.divide(complex10);
      complex2.ONE.asin();
      complex11.I.sin();
      complex4.multiply(complex7);
      Complex complex12 = complex8.sin();
      complex12.atan();
      complex11.NaN.asin();
      complex4.asin();
      complex11.isInfinite();
      complex9.sinh();
      complex7.conjugate();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(3217.2176408513, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(0.2845032215118408);
      complex2.I.acos();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(7260342.072870312, 7260342.072870312);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(7260342.072870312, 686.0);
      Complex complex5 = complex1.cos();
      Complex complex6 = Complex.valueOf(686.0, (-1.0));
      Complex complex7 = Complex.ONE;
      complex3.add(complex7);
      complex3.multiply(1431655765);
      Complex complex8 = complex6.divide((-303.37364));
      complex8.nthRoot(2300);
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      complex2.sinh();
      complex5.subtract(complex6);
      complex5.sin();
      complex0.nthRoot(7);
      complex4.asin();
      Complex complex9 = Complex.valueOf((-495.1018533));
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(3217.2176408513, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex.valueOf((-4050.6065064823006));
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.toString();
      Complex complex3 = complex0.sqrt1z();
      complex1.sin();
      complex2.divide(2048.9074895);
      complex3.tan();
      Complex complex4 = complex2.cos();
      try { 
        complex4.nthRoot((-3885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,885
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.negate();
      complex1.toString();
      Complex complex4 = Complex.valueOf((-2694.502379451596), (-2694.502379451596));
      complex4.negate();
      complex0.getField();
      complex2.hashCode();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(3217.2176408513, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.negate();
      complex0.multiply(1689);
      complex0.toString();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.ONE.negate();
      complex0.ZERO.getField();
      complex3.hashCode();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(3217.2176408513, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.negate();
      complex0.toString();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.negate();
      complex1.getField();
      Complex complex5 = new Complex(3217.2176408513, 3217.2176408513);
      complex5.hashCode();
      complex2.sqrt1z();
      complex3.createComplex(1.6400070480930697E-114, (-36.95));
      complex0.multiply(complex4);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-701.557620548404), (-701.557620548404));
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex((-701.557620548404), (-701.557620548404));
      complex2.negate();
      complex0.toString();
      Complex complex3 = Complex.valueOf(0.41421356237309515, (-3399.370718511));
      Complex complex4 = complex3.negate();
      complex3.getField();
      Complex complex5 = new Complex((-701.557620548404));
      complex5.hashCode();
      complex1.readResolve();
      complex3.getField();
      complex2.sqrt1z();
      complex4.atan();
      complex2.sqrt();
      Complex complex6 = Complex.INF;
      complex4.multiply(1375.08178258);
      Complex complex7 = Complex.ONE;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(3217.2176408513, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.negate();
      complex1.ONE.toString();
      Complex complex3 = complex2.I.divide((-3399.370718511));
      complex0.ZERO.getField();
      complex3.hashCode();
      complex2.INF.readResolve();
      complex0.getField();
      complex0.INF.sqrt1z();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.I.sqrt();
      complex5.INF.tan();
      Complex.valueOf(615.7730851643967, 2133.1);
      complex2.cos();
      Complex complex6 = Complex.valueOf(3217.2176408513, (-230.3));
      complex0.NaN.add(complex1);
      complex3.divide(0.41421356237309515);
      complex1.nthRoot(37);
      complex3.equals(complex2);
      complex1.sinh();
      Complex complex7 = complex5.subtract(complex2);
      complex6.sin();
      try { 
        complex7.nthRoot((-1198710089));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,198,710,089
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.0);
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-701.557620548404), (-701.557620548404));
      Complex complex1 = complex0.subtract((-701.557620548404));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.INF;
      complex2.getArgument();
      Complex complex4 = complex1.reciprocal();
      complex4.INF.toString();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.ONE;
      complex2.toString();
      complex5.readResolve();
      Complex complex8 = complex5.multiply(complex7);
      complex8.I.toString();
      complex6.sqrt1z();
      complex4.add((-701.557620548404));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.6082562331599));
      complex0.I.tan();
      Complex complex1 = complex0.cosh();
      complex0.nthRoot(2320);
      Complex.valueOf((double) 2320, (-700.6082562331599));
      Complex complex2 = Complex.ONE;
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.negate();
      complex1.tanh();
      Complex complex3 = Complex.NaN;
      complex3.atan();
      Complex complex4 = complex3.exp();
      complex2.negate();
      complex4.nthRoot(1158);
      Complex complex5 = Complex.valueOf(1.1691184043884277);
      Complex complex6 = new Complex((-20.0));
      complex5.isNaN();
      complex6.tanh();
      complex4.add(3382.7634760012897);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      complex1.I.reciprocal();
      Complex complex2 = complex1.I.multiply(2315);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.sinh();
      complex0.abs();
      complex1.asin();
      Complex complex5 = Complex.ONE;
      complex3.toString();
      complex2.I.add(complex4);
      Complex complex6 = Complex.valueOf(693.66, (-74.685));
      complex6.readResolve();
      complex5.multiply(complex4);
      Complex complex7 = Complex.ONE;
      complex7.add(complex2);
      Complex complex8 = Complex.valueOf(1626.9937445);
      complex8.multiply((-2169.378366115092));
      complex6.cosh();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.6082562331599));
      Complex complex1 = complex0.I.tan();
      complex0.cosh();
      complex1.NaN.atan();
      complex0.nthRoot(2320);
      Complex complex2 = complex0.negate();
      complex1.reciprocal();
      Complex complex3 = new Complex(1722.873, (-1.5723449006087263E-7));
      complex3.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-545.398568112));
      complex0.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ONE.tan();
      complex1.ZERO.readResolve();
      complex3.ONE.add(0.0);
      Complex complex4 = complex0.exp();
      complex0.I.conjugate();
      complex4.nthRoot(3146);
      Complex complex5 = complex2.subtract(545.398568112);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.multiply((double) 3146);
      complex7.multiply(complex6);
      Complex.valueOf((double) 3146);
      complex7.isInfinite();
      Complex.valueOf((-3391.0), 0.0);
      complex6.sin();
      Complex.valueOf((-20.0));
      complex2.subtract(complex1);
      // Undeclared exception!
      complex3.nthRoot(3146);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex3.ONE.atan();
      complex3.ONE.exp();
      Complex complex5 = complex0.negate();
      complex1.getField();
      complex2.getReal();
      complex5.pow(3282.85256454);
      complex4.readResolve();
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
      complex4.add((-1485.0));
      complex2.divide(500.79182026);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      complex0.I.hashCode();
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.ONE.atan();
      complex2.ONE.exp();
      complex0.negate();
      complex2.NaN.nthRoot(1149);
      complex2.pow(1.5707963267948966);
      complex2.readResolve();
      Complex complex4 = new Complex(0.1994270384311676, Double.NaN);
      complex1.equals(complex4);
      complex0.add(1.5707963267948966);
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.6082562331599));
      complex0.I.tan();
      Complex complex1 = complex0.cosh();
      complex0.nthRoot(2320);
      complex0.negate();
      Complex.valueOf((double) 2320, 0.7221492638118415);
      complex1.asin();
      Complex complex2 = complex0.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1739.656365344326, 1739.656365344326);
      Complex complex1 = complex0.tan();
      complex1.cosh();
      complex1.nthRoot(2275);
      complex0.negate();
      Complex complex2 = complex1.sinh();
      complex2.add(1739.656365344326);
      Complex complex3 = Complex.NaN;
      complex3.divide((-451.9));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = 500.79182026;
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      complex0.I.hashCode();
      complex0.cosh();
      int int0 = (-260);
      try { 
        complex0.nthRoot((-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.6082562331599));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.negate();
      complex1.tanh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.negate();
      complex5.nthRoot(1126);
      Complex.valueOf(Double.NaN);
      Complex complex7 = Complex.INF;
      complex6.isNaN();
      complex4.tanh();
      complex2.add((-533.955636));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.I.multiply(2315);
      Complex complex4 = complex3.I.cosh();
      complex0.abs();
      Complex.valueOf(0.0);
      complex0.readResolve();
      complex0.multiply(complex3);
      Complex complex5 = Complex.NaN;
      complex5.readResolve();
      Complex complex6 = Complex.NaN;
      complex6.equals(complex4);
      Complex complex7 = Complex.ONE;
      complex7.add(1.5707963267948966);
      complex3.divide((double) 2315);
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
      complex0.ZERO.abs();
      Complex complex1 = complex0.add((-1424.963039898172));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.add(complex2);
      complex2.getField();
      Complex complex4 = complex0.sinh();
      complex3.readResolve();
      complex2.I.asin();
      complex3.subtract(1.6584100275603453E-157);
      complex4.INF.getField();
      Complex complex5 = complex3.NaN.atan();
      Complex complex6 = Complex.valueOf((-5237.253289766726), Double.POSITIVE_INFINITY);
      complex4.divide(complex0);
      Complex complex7 = complex4.ZERO.divide(complex5);
      Complex complex8 = complex3.pow(complex6);
      Complex complex9 = complex0.log();
      complex9.INF.acos();
      complex8.ONE.toString();
      complex4.exp();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex10.I.pow(Double.POSITIVE_INFINITY);
      complex0.nthRoot(46);
      Complex complex12 = complex6.negate();
      complex12.add(0.0);
      complex1.abs();
      complex3.acos();
      complex7.toString();
      complex11.add(complex1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      complex0.reciprocal();
      complex1.sin();
      Complex.valueOf(Double.NaN, (-801.5021603682));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.getField();
      Complex complex2 = complex0.divide(0.1994270384311676);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.subtract(1.291561142865928E207);
      complex1.getArgument();
      complex1.getField();
      complex0.getReal();
      complex4.pow((-786.0539059853575));
      complex0.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      complex3.subtract(1.291561142865928E207);
      complex4.readResolve();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.cosh();
      complex2.ONE.getArgument();
      Complex complex4 = Complex.valueOf((-824.9421806));
      Complex complex5 = complex2.log();
      complex5.I.readResolve();
      Complex complex6 = complex4.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.ONE.add(Double.POSITIVE_INFINITY);
      complex7.I.hashCode();
      Complex complex8 = complex6.NaN.cos();
      Complex complex9 = complex0.sinh();
      complex9.ZERO.multiply((-156));
      complex1.toString();
      complex2.createComplex(Double.POSITIVE_INFINITY, (-824.9421806));
      complex1.NaN.asin();
      complex7.pow(Double.POSITIVE_INFINITY);
      complex3.reciprocal();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex8.abs();
      complex1.nthRoot(317);
      complex0.exp();
      complex6.divide(Double.POSITIVE_INFINITY);
      complex2.multiply((-551.094134037));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex1.pow(0.03308844187355592);
      Complex complex6 = Complex.valueOf(6.283185307179586, (-1865.0));
      complex6.INF.reciprocal();
      Complex complex7 = complex5.I.pow(complex0);
      Complex complex8 = complex6.I.conjugate();
      complex0.atan();
      Complex complex9 = complex0.createComplex((-54712.61396349785), (-1865.0));
      complex9.abs();
      Complex complex10 = complex5.conjugate();
      complex3.I.divide(complex4);
      Complex complex11 = complex10.divide(complex5);
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex5.exp();
      complex7.asin();
      Complex complex14 = complex3.asin();
      complex14.pow(Double.NaN);
      complex1.subtract(110.81175);
      Complex complex15 = complex13.cosh();
      Complex complex16 = complex6.multiply((-2971));
      complex16.NaN.toString();
      complex8.add(complex1);
      complex15.add(complex13);
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.multiply((-503.208));
      Complex complex4 = (Complex)complex2.readResolve();
      complex3.multiply(complex4);
      Complex complex5 = complex3.asin();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4217997464522202E-8);
      Complex complex1 = complex0.subtract(1285.505986104398);
      Complex complex2 = new Complex(1.4217997464522202E-8, 1285.505986104398);
      Complex complex3 = complex2.sinh();
      complex0.getField();
      Complex complex4 = complex2.divide(1285.505986104398);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.subtract(1.4217997464522202E-8);
      complex3.getArgument();
      complex5.getField();
      Complex complex8 = Complex.valueOf(1.4217997464522202E-8, 2038.993792976474);
      complex8.getReal();
      complex3.pow(1002.02711931707);
      complex1.readResolve();
      Complex complex9 = new Complex((-217.69535));
      complex5.equals(complex9);
      complex7.subtract(2475.25097763);
      complex7.readResolve();
      complex4.isNaN();
      complex7.divide(1774.1209704148);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      complex0.I.hashCode();
      complex0.ONE.sqrt1z();
      Complex complex1 = new Complex(500.79182026, 500.79182026);
      Complex complex2 = complex0.ONE.tanh();
      complex2.ONE.atan();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.negate();
      complex2.NaN.nthRoot(1149);
      Complex.valueOf((-533.955636));
      complex3.divide(Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.ONE.tanh();
      complex3.ONE.atan();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex2.sinh();
      complex7.NaN.cosh();
      complex4.add(complex1);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex3.I.divide(complex0);
      complex4.NaN.sinh();
      complex1.I.getField();
      complex1.I.add(20.0);
      complex0.INF.pow(complex1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.multiply(18.25453);
      complex6.ZERO.divide((-259.8430097011305));
      complex6.hashCode();
      Complex complex7 = complex3.pow(20.0);
      complex2.tan();
      complex7.I.subtract(complex6);
      complex7.multiply(0.22079706192016602);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = new Complex(3.172580666390786E211, 20.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.divide(complex4);
      complex3.getField();
      complex0.add(3.7906173667738715E-206);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.pow(complex3);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex1.multiply(3.172580666390786E211);
      complex7.divide(20.0);
      complex9.hashCode();
      complex3.pow(82.74204421);
      complex8.sin();
      complex6.atan();
      Complex complex10 = complex5.pow(complex9);
      complex9.reciprocal();
      complex10.sin();
      Complex.valueOf(82.74204421, (-1793.39736722));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-565.35));
      complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.divide(complex1);
      complex2.getField();
      Complex complex3 = complex0.add((-565.35));
      Complex complex4 = complex2.pow(complex1);
      complex4.sqrt1z();
      complex0.I.tanh();
      complex4.multiply(18.25453);
      complex4.divide((-1.0));
      complex3.getArgument();
      try { 
        complex2.nthRoot((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -9
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tanh();
      complex1.I.reciprocal();
      complex1.pow(0.41421356237309515);
      Complex complex2 = complex0.tan();
      double double0 = 2.4801413921885483E-274;
      Complex complex3 = complex2.divide((-557.8199216));
      complex3.getArgument();
      Complex complex4 = Complex.I;
      complex3.nthRoot(1);
      Complex.valueOf(3072.8316564, (-557.8199216));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.I.reciprocal();
      complex3.I.divide(complex0);
      complex1.I.getField();
      complex2.reciprocal();
      complex2.getImaginary();
      complex1.sinh();
      complex3.abs();
      Complex complex4 = complex1.asin();
      complex2.toString();
      complex2.sinh();
      complex1.nthRoot(50);
      Complex.valueOf((double) 50, (double) 1);
      Complex complex5 = new Complex(4.6874785847299414E13);
      Object object0 = new Object();
      Object object1 = new Object();
      complex4.equals(object1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4217997464522202E-8);
      Complex complex1 = complex0.subtract(1285.505986104398);
      complex0.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      complex1.getArgument();
      Complex complex3 = complex1.add(3.141592653589793);
      Complex complex4 = complex0.pow(complex1);
      complex4.sqrt1z();
      Complex complex5 = complex1.multiply(1.4217997464522202E-8);
      Complex complex6 = complex2.divide((-1502.0));
      complex1.hashCode();
      complex5.ONE.divide((-4.690417668647599E88));
      complex0.pow(1.0);
      Complex complex7 = complex4.sin();
      Complex complex8 = complex5.atan();
      complex7.pow(complex6);
      complex8.reciprocal();
      complex6.sin();
      Complex.valueOf((-1793.39736722), 0.0);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = (-3.8895196212251903E-4);
      Complex complex0 = new Complex(Double.NaN, (-3.8895196212251903E-4));
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(1739.656365344326);
      Complex complex1 = complex0.subtract((-2195.900372));
      complex0.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      complex1.getArgument();
      complex0.reciprocal();
      complex2.getImaginary();
      complex1.sinh();
      complex2.abs();
      complex2.asin();
      complex0.toString();
      Complex complex3 = complex1.sinh();
      complex3.nthRoot(757);
      Complex.valueOf((double) 757, 9.39987974788905E-8);
      Complex complex4 = new Complex(0.5657354593276978);
      complex3.equals("(1739.656365344326, 0.0)");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      Complex complex1 = complex0.I.conjugate();
      complex1.I.hashCode();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = Complex.I;
      complex4.ONE.log();
      Complex complex5 = complex4.divide(0.1994270384311676);
      complex5.conjugate();
      Complex complex6 = complex2.subtract(1.256828068633383E-7);
      complex1.getArgument();
      complex6.getReal();
      Complex complex7 = Complex.NaN;
      complex7.pow(0.1994270384311676);
      complex3.readResolve();
      Complex complex8 = new Complex(0.1994270384311676, 0.1994270384311676);
      Complex complex9 = Complex.I;
      complex8.equals(complex9);
      complex8.subtract((-1.5707963267948966));
      complex0.readResolve();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4217997464522202E-8);
      Complex complex1 = complex0.subtract(1285.505986104398);
      complex0.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      complex1.getArgument();
      complex2.reciprocal();
      complex2.getImaginary();
      Complex complex3 = complex1.sinh();
      complex0.abs();
      complex1.asin();
      complex3.toString();
      complex3.sinh();
      complex1.nthRoot(1);
      Complex complex4 = Complex.valueOf(5469.62455080804, 0.4580921530723572);
      Complex complex5 = new Complex(3.141592653589793);
      Object object0 = new Object();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.toString();
      complex0.equals((Object) null);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex0);
      complex4.getField();
      Complex complex5 = complex1.add((-1077.7032482197));
      Complex complex6 = complex5.pow(complex1);
      complex2.sqrt1z();
      complex4.multiply((-1706.7286));
      Complex complex7 = complex4.divide(18.25453);
      complex4.hashCode();
      complex7.pow((-259.8430097011305));
      Complex complex8 = complex3.sin();
      Complex complex9 = Complex.valueOf(18.25453);
      complex9.atan();
      Complex complex10 = complex2.pow(complex8);
      complex10.divide(2907.5720273044662);
      complex7.tanh();
      complex6.asin();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.multiply((-503.208));
      Complex complex3 = (Complex)complex2.readResolve();
      complex1.getField();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.I;
      complex5.abs();
      Complex complex6 = complex4.pow(complex1);
      complex2.pow(complex6);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.reciprocal();
      complex1.ZERO.sinh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.NaN.conjugate();
      complex4.tan();
      complex4.INF.nthRoot(36);
      Complex complex5 = complex4.INF.multiply((-752));
      Complex complex6 = complex4.ZERO.subtract(Double.NaN);
      Complex complex7 = complex6.INF.pow(complex1);
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex6.ZERO.log();
      complex9.toString();
      complex3.NaN.exp();
      complex0.abs();
      Complex complex10 = complex0.add(complex3);
      Complex complex11 = Complex.valueOf(0.0, (-3.845373872038116E-9));
      complex3.exp();
      Complex complex12 = complex10.log();
      complex12.isNaN();
      complex2.tan();
      complex5.sqrt();
      Complex complex13 = complex11.exp();
      Complex complex14 = Complex.ZERO;
      complex1.getField();
      Complex complex15 = Complex.ONE;
      complex15.sqrt();
      Complex complex16 = Complex.valueOf(1594.6, 9.250422086873268E-8);
      complex16.abs();
      complex4.pow(complex8);
      complex2.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.6082562331599));
      Complex complex1 = complex0.I.atan();
      complex1.I.tan();
      Complex complex2 = complex0.sin();
      complex0.cosh();
      Complex complex3 = complex0.multiply((-1924));
      complex2.nthRoot(2320);
      complex1.negate();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = new Complex((-700.6082562331599));
      Complex complex7 = Complex.NaN;
      complex7.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide((-1793.39736722));
      Complex complex2 = complex0.pow(0.0);
      complex0.readResolve();
      complex2.sinh();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.ZERO.pow(complex5);
      complex6.ZERO.cosh();
      complex0.NaN.acos();
      Complex complex7 = complex4.pow(20.0);
      complex7.I.divide((-1.0));
      complex1.I.pow(complex7);
      complex4.INF.add(0.0);
      complex5.atan();
      complex6.pow(complex0);
      Complex complex8 = complex2.divide(0.0);
      complex8.tanh();
      complex3.asin();
      Complex complex9 = new Complex((-1.0), (-1973.05069));
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-565.35));
      complex0.getArgument();
      complex0.sqrt1z();
      Complex complex1 = complex0.pow((-3080.09828575));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.divide(2.4801413921885483E-274);
      complex3.getArgument();
      Complex complex4 = Complex.I;
      complex4.nthRoot(1329);
      Complex complex5 = Complex.valueOf(3072.8316564, 2.4801413921885483E-274);
      complex5.multiply(complex0);
      Complex complex6 = Complex.valueOf(-0.0, (double) 1);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      complex0.sinh();
      complex1.getField();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.I;
      complex5.subtract((-217.69535));
      Complex complex6 = Complex.valueOf(0.0);
      complex6.getArgument();
      complex4.pow(1343.25456871201);
      complex6.readResolve();
      Complex complex7 = Complex.ZERO;
      Object object0 = complex7.readResolve();
      complex3.equals(object0);
      Complex complex8 = complex6.subtract(2.0);
      complex7.readResolve();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.divide((-503.208));
      complex1.hashCode();
      Complex complex4 = new Complex(593.1237093473, 593.1237093473);
      Complex complex5 = complex4.pow(593.1237093473);
      Complex complex6 = complex3.sin();
      Complex complex7 = Complex.ONE;
      complex7.atan();
      Complex complex8 = complex0.pow(complex5);
      complex6.divide(593.1237093473);
      Complex complex9 = Complex.valueOf((-503.208), 593.1237093473);
      complex9.tanh();
      complex4.asin();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(498.4);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.pow(Double.NaN);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex1.divide(5.5996586041611455E262);
      complex2.hashCode();
      Complex complex5 = complex2.pow((-259.8430097011305));
      Complex complex6 = complex5.sin();
      complex5.atan();
      complex4.pow(complex2);
      Complex complex7 = new Complex((-259.8430097011305), 5.5996586041611455E262);
      complex7.divide((-259.8430097011305));
      complex7.tanh();
      complex6.asin();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.subtract((-2717.822824));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.log();
      complex2.toString();
      Complex complex5 = complex3.exp();
      complex0.abs();
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = Complex.valueOf((-771.822589), 1.0);
      complex0.exp();
      complex5.log();
      complex5.isNaN();
      complex6.tan();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex8.sqrt1z();
      complex9.getField();
      complex10.sqrt();
      complex9.abs();
      Complex complex11 = Complex.ZERO;
      complex1.pow(complex11);
      Complex complex12 = Complex.valueOf((-2717.822824));
      complex12.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf((-2203.855860894809), (-2203.855860894809));
      complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      complex2.NaN.negate();
      complex2.NaN.tan();
      Complex complex3 = complex2.ONE.createComplex(20.0, 20.0);
      complex2.NaN.createComplex(0.0, 0.6603899002075195);
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex3.NaN.pow(7.836307815186044E132);
      complex2.cos();
      Complex complex6 = complex1.conjugate();
      complex6.I.sqrt();
      Complex complex7 = complex2.conjugate();
      complex7.ONE.atan();
      complex7.getArgument();
      complex5.getReal();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-867.02426), (-867.02426));
      Complex complex1 = complex0.ONE.sqrt();
      complex1.I.getField();
      complex1.INF.sqrt();
      Complex complex2 = complex0.ZERO.multiply(995);
      complex0.ONE.abs();
      complex2.NaN.reciprocal();
      try { 
        complex0.nthRoot((-2275));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,275
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-587.3599), 2036.64250154412);
      Complex complex2 = complex0.createComplex(4134.28, 4134.28);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex0.INF.exp();
      Complex complex8 = complex0.multiply(4134.28);
      complex5.ZERO.hashCode();
      complex3.isNaN();
      Complex complex9 = complex0.pow(complex6);
      complex9.ONE.multiply(complex8);
      complex2.hashCode();
      Complex complex10 = complex0.atan();
      complex10.INF.getField();
      complex10.NaN.divide(complex1);
      Complex.valueOf((-12.77647));
      Complex complex11 = complex7.exp();
      complex11.I.divide((-12.77647));
      complex5.cosh();
      complex5.isInfinite();
      complex4.getField();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.toString();
      Complex.valueOf((-1.0));
      Complex complex2 = complex1.ZERO.pow(676.9698381);
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.I.acos();
      complex2.ONE.exp();
      complex4.NaN.hashCode();
      Complex complex6 = complex5.I.pow(complex3);
      complex6.subtract(676.9698381);
      complex1.pow(6.283185307179586);
      complex2.subtract(676.9698381);
      Complex.valueOf(0.0, 676.9698381);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.115697961));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.pow((-919.115697961));
      complex0.abs();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.sinh();
      complex4.sinh();
      complex4.subtract(complex0);
      Complex complex5 = Complex.ONE;
      complex5.NaN.exp();
      Complex complex6 = complex0.INF.multiply((-3.448944157854234E-8));
      complex6.I.tan();
      Complex complex7 = complex3.divide(complex5);
      complex3.tanh();
      complex7.NaN.hashCode();
      complex0.getReal();
      complex7.getArgument();
      Complex.valueOf(0.0, 2301.4796080736173);
      complex1.log();
      complex2.toString();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.toString();
      complex0.equals((Object) null);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.acos();
      complex1.NaN.readResolve();
      complex0.getReal();
      Complex complex3 = complex1.pow(complex0);
      complex3.ZERO.atan();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex2.pow(1.0);
      Complex complex6 = complex5.INF.add(1.0);
      Complex complex7 = complex5.INF.sqrt1z();
      Complex complex8 = complex5.ONE.cosh();
      complex8.INF.subtract(2.0);
      complex8.ONE.getArgument();
      complex1.INF.multiply(complex6);
      complex1.getArgument();
      complex2.reciprocal();
      complex4.getImaginary();
      Complex complex9 = complex0.I.sinh();
      complex9.INF.abs();
      complex3.asin();
      complex3.toString();
      complex7.sinh();
      complex4.nthRoot(1);
      Complex.valueOf((double) 1, Double.NaN);
      Complex complex10 = new Complex(0.0);
      complex7.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.I.atan();
      complex2.ONE.readResolve();
      complex1.getArgument();
      Complex complex3 = complex0.sqrt1z();
      complex3.I.pow(0.0);
      complex1.INF.conjugate();
      complex3.divide(complex1);
      Complex complex4 = complex1.sqrt();
      complex1.tan();
      Complex.valueOf(1.5707963267948966);
      Complex complex5 = Complex.valueOf((-623.6462));
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.multiply((-503.208));
      complex2.readResolve();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.NaN.tan();
      complex0.ZERO.readResolve();
      complex2.ZERO.acos();
      Complex complex3 = complex2.INF.divide(complex0);
      complex1.multiply(complex2);
      complex1.NaN.asin();
      Complex complex4 = complex1.multiply(2509.796);
      complex4.ONE.getArgument();
      Complex complex5 = complex4.pow(1.0655345916748047);
      complex0.getArgument();
      complex1.cosh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex5.asin();
      complex7.I.sinh();
      Complex complex8 = complex6.reciprocal();
      complex8.atan();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.ONE.tan();
      Complex.valueOf(1.1108184705020206E-7);
      complex9.INF.tanh();
      complex1.hashCode();
      complex6.atan();
      complex3.pow(complex9);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(775.6518324223);
      complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex0.log();
      complex1.multiply(1550.07);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.getArgument();
      complex1.ZERO.toString();
      Complex complex3 = complex2.multiply(2.0);
      Complex complex4 = complex3.multiply(37);
      Complex complex5 = complex4.reciprocal();
      complex5.INF.multiply(330);
      complex2.I.subtract(complex3);
      Complex complex6 = complex2.acos();
      complex0.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.6082562331599));
      Complex complex1 = complex0.I.atan();
      complex1.I.tan();
      Complex complex2 = complex0.sin();
      complex0.cosh();
      Complex complex3 = complex0.multiply((-1924));
      complex2.nthRoot(2320);
      complex1.negate();
      Complex complex4 = complex3.reciprocal();
      complex4.NaN.sin();
      Complex.valueOf((double) 2320, (-700.6082562331599));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex3.I.divide(complex0);
      complex1.I.getField();
      complex1.I.add(20.0);
      Complex complex5 = complex0.INF.pow(complex1);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.multiply(18.25453);
      complex7.ZERO.divide((-259.8430097011305));
      complex7.hashCode();
      Complex complex8 = complex3.pow(20.0);
      complex1.ZERO.sin();
      complex4.atan();
      Complex complex9 = complex4.pow(complex2);
      complex2.divide(18.25453);
      complex5.tanh();
      complex9.asin();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.atan();
      complex3.NaN.divide(Double.NaN);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.ZERO.multiply((-215.715478));
      complex5.NaN.divide(0.0);
      complex4.NaN.add(complex1);
      Complex complex6 = complex0.asin();
      complex6.subtract(complex4);
      complex6.NaN.asin();
      complex6.INF.reciprocal();
      Complex complex7 = complex0.tanh();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.ONE.pow((-215.715478));
      Complex complex9 = complex7.sin();
      Complex complex10 = complex7.subtract(complex1);
      complex10.I.multiply((-772));
      complex1.isInfinite();
      Complex.valueOf((-2.5731071572354522E-8), 2626.2637696);
      complex9.isNaN();
      Complex complex11 = complex2.divide(complex9);
      complex6.abs();
      complex0.I.multiply(1140);
      complex8.divide(complex7);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(6.283185307179586);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.INF.toString();
      Complex complex3 = complex1.INF.sin();
      complex3.tanh();
      complex1.ZERO.sinh();
      int int0 = 0;
      Complex complex4 = complex0.INF.exp();
      complex4.pow((double) 0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(176.82374411465267);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      complex1.abs();
      complex0.ZERO.multiply((-1));
      complex0.NaN.sqrt1z();
      complex2.NaN.getField();
      complex1.INF.getArgument();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.valueOf(151.857913192776, 1299.8447180747808);
      Complex complex5 = complex4.INF.divide(complex1);
      Complex.valueOf(1299.8447180747808, 176.82374411465267);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.pow(complex6);
      complex3.I.nthRoot(1);
      Complex complex8 = complex0.createComplex(151.857913192776, 0.0);
      Complex complex9 = Complex.ZERO;
      complex0.NaN.subtract(complex9);
      complex8.NaN.tan();
      complex8.nthRoot(1);
      Complex.valueOf(151.857913192776);
      complex2.sin();
      complex7.sin();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      complex0.ONE.hashCode();
      complex0.sin();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.sinh();
      complex5.I.readResolve();
      Complex complex6 = complex3.divide(Double.POSITIVE_INFINITY);
      complex0.ONE.subtract(complex6);
      complex4.ONE.sin();
      Complex complex7 = complex1.tanh();
      complex7.ZERO.pow(complex4);
      Complex complex8 = complex6.pow(complex3);
      complex8.abs();
      complex7.sinh();
      Complex complex9 = complex3.sin();
      complex3.add(complex8);
      complex0.add(complex9);
      complex2.getArgument();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1323));
      complex0.isNaN();
      complex0.getArgument();
      complex0.getReal();
      complex1.toString();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex0.ONE.add((double) (-1323));
      complex2.ZERO.nthRoot(817);
      complex3.INF.getField();
      complex0.readResolve();
      complex1.hashCode();
      complex3.pow(0.0);
      complex3.exp();
      Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      complex4.subtract((-294.59514891));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-2826.941618246326));
      Complex complex1 = complex0.ONE.createComplex((-2826.941618246326), 0.0);
      Complex complex2 = Complex.NaN;
      complex2.ONE.pow(complex0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.acos();
      complex4.sinh();
      Complex complex6 = complex5.divide(complex4);
      complex6.sqrt();
      complex6.multiply(complex5);
      complex1.add(complex5);
      complex3.subtract((-2826.941618246326));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1994270384311676, 500.79182026);
      Complex complex1 = complex0.I.conjugate();
      complex1.I.hashCode();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex1.INF.negate();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex3.ONE.atan();
      complex3.ONE.exp();
      Complex complex5 = complex0.negate();
      complex3.NaN.nthRoot(1149);
      Complex complex6 = Complex.valueOf((-533.955636));
      complex6.I.multiply(complex4);
      complex0.isNaN();
      complex5.tanh();
      complex2.sinh();
      complex1.add((-533.955636));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
      complex0.ZERO.exp();
      Complex complex2 = Complex.valueOf(2294.3, 0.14518201351165771);
      Complex complex3 = complex2.conjugate();
      complex0.ZERO.asin();
      Complex.valueOf((-1.0), (-1.0));
      Complex.valueOf(0.0, 0.09228715300559998);
      complex0.getArgument();
      complex1.hashCode();
      complex1.isNaN();
      complex3.INF.abs();
      Complex complex4 = Complex.valueOf((-20.0), 0.0);
      complex4.NaN.createComplex(0.0, (-20.0));
      Complex complex5 = complex4.ZERO.sqrt1z();
      complex5.ZERO.cos();
      Complex complex6 = complex3.add(complex2);
      complex3.cos();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide((-1793.39736722));
      Complex complex2 = complex0.pow(0.0);
      complex0.readResolve();
      complex2.sinh();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.ZERO.pow(complex5);
      complex6.ZERO.cosh();
      complex0.NaN.acos();
      Complex complex7 = complex4.pow(20.0);
      complex7.I.divide((-1.0));
      complex1.I.pow(complex7);
      Complex complex8 = complex4.INF.add(0.0);
      Complex.valueOf((-1793.39736722));
      Complex.valueOf(0.0);
      complex8.equals(complex3);
      complex1.pow(0.0);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sinh();
      complex0.NaN.getField();
      Complex complex3 = complex2.I.divide((-217.69535));
      complex3.conjugate();
      complex3.I.subtract(0.0);
      complex0.getArgument();
      complex0.getField();
      complex0.getReal();
      Complex complex4 = complex0.INF.pow(0.0);
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex5 = complex4.subtract(0.0);
      complex5.readResolve();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.asin();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.INF.pow(Double.POSITIVE_INFINITY);
      complex4.NaN.exp();
      Complex complex5 = complex4.I.subtract((-5432.6777848237));
      Complex complex6 = complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, (-3450.342396));
      complex5.ZERO.divide((-71.783));
      complex6.NaN.divide(complex0);
      complex3.ZERO.getField();
      complex1.getArgument();
      Complex complex7 = complex2.acos();
      complex2.getReal();
      Complex complex8 = complex2.log();
      complex8.multiply(complex3);
      complex0.createComplex(54.977, (-1110.41577082));
      Complex complex9 = complex4.negate();
      complex9.ZERO.divide((-5432.6777848237));
      Complex.valueOf((-351.03976785));
      complex5.multiply((-20.0));
      complex9.getField();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3304.0, 3.4061835424180075E-242);
      Complex complex1 = complex0.cosh();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.reciprocal();
      complex1.ZERO.sinh();
      Complex complex3 = complex0.ZERO.add(Double.NaN);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex4.tan();
      complex4.INF.nthRoot(50);
      complex4.INF.multiply((-752));
      Complex complex6 = complex4.ZERO.subtract(Double.NaN);
      Complex complex7 = complex6.INF.pow(complex1);
      complex7.INF.tanh();
      Complex complex8 = complex6.ZERO.log();
      complex8.toString();
      complex3.NaN.exp();
      complex0.abs();
      Complex complex9 = complex0.add(complex3);
      Complex.valueOf(0.0, (-3.845373872038116E-9));
      Complex complex10 = complex3.exp();
      Complex complex11 = complex9.log();
      complex11.isNaN();
      complex2.tan();
      complex0.NaN.sqrt();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex11.sqrt1z();
      complex8.getField();
      complex12.sqrt();
      complex3.I.abs();
      complex1.pow(complex13);
      complex13.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(498.4);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.pow(Double.NaN);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.divide(2.4801413921885483E-274);
      complex1.getArgument();
      complex4.nthRoot(1);
      Complex complex5 = complex0.multiply(complex3);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.ZERO.getField();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.ZERO.multiply((-2306));
      Complex complex5 = complex3.sin();
      complex5.abs();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex1.ONE.add(complex2);
      complex3.acos();
      complex1.I.sin();
      complex3.conjugate();
      Complex complex8 = complex7.sqrt();
      Complex.valueOf((-5.238488022920792E-9), (-1599.649109));
      complex8.getImaginary();
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply((-32.0));
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      complex4.getField();
      complex2.sinh();
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = complex5.I.cos();
      complex4.getReal();
      complex4.tan();
      complex5.INF.createComplex((-142.6479681158), 0.0);
      Complex complex7 = complex0.add(0.0);
      complex7.atan();
      Complex complex8 = new Complex(0.0, 20.0);
      complex8.ONE.atan();
      complex0.pow(complex8);
      complex2.getImaginary();
      Complex complex9 = complex7.negate();
      complex1.ONE.tan();
      Complex complex10 = complex9.NaN.multiply((-36.40479163912424));
      complex1.multiply(0.0);
      complex6.negate();
      complex9.getReal();
      complex10.subtract(0.0);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1003.176));
      complex0.I.divide(1505.99);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.abs();
      Complex complex2 = complex0.createComplex((-1774.1209704148), (-1774.1209704148));
      complex2.ONE.add(complex1);
      complex0.cosh();
      Complex complex3 = complex0.pow((-1774.1209704148));
      complex1.ZERO.pow(complex3);
      complex2.INF.tan();
      complex2.multiply((-2687.1507933));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.tanh();
      complex1.ZERO.nthRoot(2829);
      Complex complex2 = complex0.divide(complex1);
      complex0.I.add(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex4.NaN.multiply(complex2);
      complex1.isNaN();
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex3.negate();
      complex8.INF.hashCode();
      complex4.ONE.readResolve();
      Complex complex9 = complex6.multiply(complex3);
      complex9.sin();
      Complex complex10 = complex7.sin();
      complex10.sqrt();
      try { 
        complex10.nthRoot((-856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -856
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.INF.add(complex0);
      Complex complex5 = complex4.INF.exp();
      complex0.hashCode();
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.multiply(1);
      complex7.NaN.asin();
      Complex complex8 = complex7.ONE.exp();
      complex8.ONE.nthRoot(1);
      complex6.subtract(complex1);
      complex8.subtract(complex3);
      complex4.toString();
      Complex complex9 = complex1.exp();
      Complex complex10 = Complex.valueOf((double) 1, 783.044452296026);
      complex10.ONE.add((-688.6660071010033));
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.NaN.atan();
      complex12.cos();
      Complex complex13 = complex2.asin();
      complex9.multiply(0);
      complex13.cosh();
      Complex complex14 = complex3.pow(complex13);
      complex7.subtract(complex10);
      complex14.pow(complex5);
      complex11.add(complex12);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(826.12644);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = complex0.subtract(0.0);
      complex3.ZERO.toString();
      complex0.getField();
      Complex complex4 = complex0.subtract(0.0);
      complex4.NaN.divide(complex2);
      complex4.INF.abs();
      complex0.getReal();
      complex1.equals(complex0);
      complex0.add(complex3);
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-757.4580328192);
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2488.071), (-2488.071));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(1195);
      Complex complex4 = complex3.NaN.add((double) 1195);
      complex4.I.divide(complex1);
      complex4.I.divide((double) 1195);
      int int0 = (-2006);
      try { 
        complex0.nthRoot((-2006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,006
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1033.474840829);
      complex0.INF.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.I.divide(1033.474840829);
      complex3.ZERO.cos();
      Complex complex4 = complex3.I.multiply(1865.926100150368);
      Complex complex5 = complex2.ZERO.sqrt1z();
      Complex complex6 = complex0.multiply(1502.355756025);
      Complex complex7 = complex0.I.divide(complex4);
      Complex complex8 = complex2.INF.pow(complex7);
      complex6.ONE.createComplex((-194.264), (-194.264));
      complex1.getArgument();
      complex6.sqrt1z();
      Complex complex9 = complex3.sqrt1z();
      assertEquals(1.0000004681338934, complex9.getReal(), 0.01);
      
      Complex complex10 = complex6.conjugate();
      complex8.NaN.exp();
      Complex complex11 = complex1.tanh();
      assertFalse(complex11.equals((Object)complex5));
      
      complex0.reciprocal();
      Complex complex12 = complex3.divide((-3416.018546087715));
      complex10.multiply(1502.355756025);
      Complex complex13 = complex10.atan();
      complex12.getField();
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex14 = complex8.log();
      assertEquals(5.359269051005899E-4, complex7.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex15 = complex13.cos();
      assertSame(complex15, complex14);
      assertSame(complex10, complex2);
      
      complex1.getImaginary();
      assertNotSame(complex1, complex8);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1739.656365344326);
      Complex complex1 = complex0.ONE.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sinh();
      complex2.NaN.add(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.log();
      assertTrue(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex.valueOf(1617.28764911473, 1617.28764911473);
      Complex complex6 = complex1.multiply(0.0);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex4.sqrt();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(1.2533141373155001, complex7.getImaginary(), 0.01);
      
      Complex complex8 = Complex.valueOf(0.0);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertTrue(complex8.equals((Object)complex6));
  }
}
