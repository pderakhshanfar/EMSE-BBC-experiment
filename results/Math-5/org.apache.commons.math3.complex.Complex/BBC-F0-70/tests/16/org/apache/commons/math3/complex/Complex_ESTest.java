/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:50:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.add((-1.0));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.asin();
      complex1.toString();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex3.multiply(2574);
      complex4.getArgument();
      Complex.valueOf(698.349306435, 1.5707963267948966);
      complex6.getField();
      complex4.tanh();
      complex5.nthRoot(2574);
      complex3.multiply((-3658));
      Complex complex7 = new Complex(2574, Double.POSITIVE_INFINITY);
      complex7.multiply((-362050.31384899997));
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-5170.0), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.009206802246051492, Double.POSITIVE_INFINITY);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.I.tan();
      complex1.ONE.hashCode();
      complex0.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.multiply(complex1);
      complex1.INF.divide(complex4);
      complex4.ONE.reciprocal();
      Complex.valueOf((-185.544343), 0.009206802246051492);
      complex1.pow(complex0);
      complex1.toString();
      complex3.tanh();
      Complex complex5 = complex4.createComplex(0.009206802246051492, Double.POSITIVE_INFINITY);
      complex5.NaN.exp();
      complex3.cosh();
      complex0.tanh();
      Complex complex6 = complex3.divide(6.283185307179586);
      complex6.INF.multiply(822);
      Complex complex7 = complex2.divide(Double.POSITIVE_INFINITY);
      complex7.I.sinh();
      Complex.valueOf((-300.2738689527562), Double.POSITIVE_INFINITY);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4313.62912297182, 9.45732984079136E214);
      Complex complex1 = complex0.createComplex(9.45732984079136E214, 266.4537654363014);
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.ZERO.subtract(complex0);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      complex0.I.tan();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.cosh();
      complex2.NaN.log();
      Complex complex3 = complex2.I.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.ONE.cos();
      complex7.pow((-2853.5262));
      complex0.toString();
      Complex complex8 = complex1.conjugate();
      complex8.readResolve();
      complex6.INF.sqrt();
      Complex complex9 = complex5.divide(0.0);
      complex9.ONE.reciprocal();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex3.subtract(complex0);
      Complex complex13 = complex12.I.atan();
      complex3.tan();
      Complex complex14 = complex12.add(0.0);
      complex14.ONE.sin();
      complex14.ZERO.conjugate();
      complex14.add(0.0);
      complex6.abs();
      complex12.multiply(0.5403023058681398);
      Complex complex15 = complex6.divide(0.0);
      complex15.createComplex(0.0, 0.5403023058681398);
      complex13.readResolve();
      complex6.log();
      complex13.asin();
      complex12.multiply((-1421.59942994));
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.add(0.01742541790008545);
      complex1.pow(0.01742541790008545);
      complex0.abs();
      Complex complex3 = complex0.negate();
      complex3.getReal();
      complex2.add(complex3);
      Complex complex4 = complex3.log();
      complex4.sqrt();
      complex1.multiply(complex3);
      complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex((-338.70911881236515), 749.1184);
      Complex complex2 = Complex.valueOf(3.0974593993948837E100);
      Complex complex3 = complex0.NaN.sinh();
      complex0.getField();
      complex1.pow(complex2);
      complex2.tanh();
      Complex complex4 = complex2.multiply(3.0974593993948837E100);
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex5.I.divide(3.0974593993948837E100);
      complex4.I.hashCode();
      Complex complex7 = complex2.acos();
      complex6.sinh();
      complex7.asin();
      complex4.cos();
      complex7.toString();
      Complex complex8 = complex2.multiply(complex6);
      Complex.valueOf((-17.5842), 6.283185307179586);
      complex4.getField();
      complex8.tanh();
      Complex complex9 = complex1.add(6.283185307179586);
      complex9.sqrt();
      complex3.tan();
      complex3.cos();
      Complex complex10 = new Complex(5.668317211521226, (-126.87));
      complex10.log();
      complex4.sinh();
      Complex complex11 = new Complex(2403.545076, 2403.545076);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, 680.34382);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1927.624962522));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.sqrt();
      complex3.ONE.exp();
      complex2.INF.toString();
      complex3.ZERO.atan();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(3.0974593993948837E100, 0.47402387857437134);
      Complex complex2 = Complex.valueOf(0.47402387857437134);
      Complex complex3 = complex2.sinh();
      complex3.getField();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.multiply(1386.6);
      Complex complex6 = new Complex(749.1184, 0.47402387857437134);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex7.divide(3.0974593993948837E100);
      complex1.hashCode();
      Complex complex9 = new Complex(1386.6, 343.41163240188);
      complex9.acos();
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex10.asin();
      complex4.cos();
      complex6.toString();
      complex4.multiply(complex8);
      Complex complex12 = Complex.valueOf(3442.86710538, 0.47402387857437134);
      complex5.getField();
      complex0.tanh();
      complex0.add(1.7379989624023438);
      complex1.sqrt();
      complex0.tan();
      complex11.cos();
      complex9.log();
      complex12.sinh();
      Complex complex13 = new Complex(1.777477741241455, (-1481.5774545));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-5.654443097386319E231));
      complex0.exp();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.NaN.getField();
      complex0.nthRoot(7);
      complex0.toString();
      Complex complex1 = complex0.multiply((double) 7);
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf((-574.799342));
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = Complex.valueOf((-174.002), (double) 7);
      Complex complex9 = complex4.atan();
      Complex complex10 = complex8.divide(complex7);
      complex2.divide(complex3);
      Complex complex11 = Complex.valueOf(649.2842349, 20.0);
      complex11.ONE.sin();
      complex10.ZERO.sqrt1z();
      Complex.valueOf(6.283185307179586, 8.565634931301247E-4);
      Complex complex12 = Complex.valueOf(0.0, 8.565634931301247E-4);
      complex11.divide(complex5);
      complex0.abs();
      complex9.abs();
      complex10.toString();
      complex4.pow(complex5);
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.nthRoot(321);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(2045.1243219694652);
      Complex complex4 = new Complex(1.020559890878452E89, (-20.0));
      complex0.readResolve();
      complex1.divide(1.020559890878452E89);
      complex0.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ZERO;
      complex4.tan();
      Complex.valueOf(2274.199615793624);
      complex3.acos();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 1;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 2.3998252479954764E-9);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.NaN;
      complex3.readResolve();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex2.tanh();
      Complex complex5 = Complex.NaN;
      complex5.NaN.sin();
      complex4.readResolve();
      complex4.sqrt1z();
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.conjugate();
      complex8.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1845.0), (-1845.0));
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(115.783117317);
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex0.divide(115.783117317);
      Complex complex5 = complex2.conjugate();
      complex5.readResolve();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.tan();
      complex4.pow(complex8);
      Complex complex9 = complex3.tanh();
      complex5.conjugate();
      Complex complex10 = new Complex(0.4517240438583735);
      complex10.divide(complex9);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.conjugate();
      Complex complex2 = Complex.NaN;
      complex1.readResolve();
      Complex complex3 = complex2.negate();
      complex3.sinh();
      // Undeclared exception!
      complex0.nthRoot(2146656419);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = complex0.add(3044.392941059375);
      Complex complex2 = complex1.NaN.pow(3044.392941059375);
      complex0.atan();
      Complex.valueOf(5.771457643937893E237);
      Complex complex3 = complex1.cosh();
      complex3.ZERO.tan();
      Complex complex4 = Complex.INF;
      complex1.I.divide(complex4);
      complex3.INF.divide(complex2);
      Complex complex5 = complex3.I.sqrt();
      complex5.ZERO.cos();
      Complex complex6 = complex3.add(3044.392941059375);
      Complex complex7 = complex0.multiply((-2129094999));
      complex5.add(1957.0);
      Complex complex8 = Complex.valueOf((double) (-2129094999), 3.780356501972095E-4);
      complex0.multiply(complex1);
      Complex complex9 = complex7.sinh();
      complex0.divide(complex9);
      complex8.reciprocal();
      complex6.cosh();
      complex9.divide(5.771457643937893E237);
      complex5.tanh();
      Complex complex10 = new Complex(3044.392941059375, Double.NaN);
      complex8.pow(complex10);
      Complex.valueOf((-1.0), 5.417117297912521E-4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.INF.cosh();
      complex3.abs();
      complex1.multiply(complex0);
      complex3.subtract(8.349390727162016E-202);
      complex3.acos();
      complex2.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(800.0, 800.0);
      Complex complex1 = complex0.tan();
      complex0.cosh();
      complex1.abs();
      complex1.multiply(complex1);
      Complex complex2 = Complex.INF;
      complex2.divide(800.0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.NaN;
      complex0.readResolve();
      Complex complex5 = complex1.negate();
      complex1.sinh();
      complex5.tanh();
      Complex complex6 = Complex.NaN;
      complex3.readResolve();
      complex1.conjugate();
      complex3.sqrt1z();
      Complex complex7 = Complex.ZERO;
      complex1.conjugate();
      complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex1 = complex0.tan();
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.INF.cosh();
      complex2.abs();
      complex2.readResolve();
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex2.conjugate();
      complex3.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ZERO;
      complex6.sinh();
      complex4.tan();
      Complex complex7 = complex6.tanh();
      Object object0 = complex5.readResolve();
      complex7.equals(object0);
      complex6.conjugate();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.08603434264659882, 687.0);
      Complex complex1 = complex0.ONE.cosh();
      complex1.ONE.subtract(687.0);
      complex0.acos();
      complex0.getArgument();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1845.0));
      complex0.nthRoot(17);
      Complex complex1 = new Complex((-1845.0));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.conjugate();
      complex0.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sinh();
      complex0.tan();
      complex0.tanh();
      complex1.equals("q;!]oDPAqlY87KW^");
      complex0.conjugate();
      Complex complex4 = new Complex(20.0);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.getImaginary();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.ZERO.acos();
      complex4.ZERO.sqrt();
      complex3.sqrt1z();
      complex3.ONE.getArgument();
      complex2.I.pow((-3685.27372782671));
      complex0.NaN.exp();
      complex1.divide(0.0);
      Complex complex5 = complex2.sin();
      complex5.INF.divide(0.0);
      complex1.ZERO.multiply(0.0);
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(464.816);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.acos();
      complex1.getField();
      complex3.nthRoot(571);
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.valueOf((-229.6443019558));
      complex6.hashCode();
      Complex complex8 = complex1.divide(complex2);
      Complex complex9 = complex7.tanh();
      complex2.divide(1.6939399242810123E299);
      complex5.conjugate();
      complex8.readResolve();
      complex2.negate();
      complex6.sinh();
      Complex complex10 = complex5.tan();
      complex9.tanh();
      complex5.equals(complex10);
      Complex complex11 = complex5.conjugate();
      complex2.sqrt1z();
      complex4.conjugate();
      complex11.sinh();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2362.1687908487525, 1247.45);
      Complex complex1 = complex0.add(2362.1687908487525);
      Complex complex2 = complex0.multiply(2.0);
      Complex complex3 = complex2.acos();
      complex3.acos();
      Complex complex4 = complex1.sqrt1z();
      complex3.getArgument();
      complex2.exp();
      Complex complex5 = complex1.divide(3369.0);
      Complex complex6 = complex2.sin();
      complex4.divide(2362.1687908487525);
      complex6.multiply(1439.07);
      complex6.multiply(2362.1687908487525);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(21);
      Complex complex2 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex3 = complex2.tan();
      complex2.ZERO.multiply(complex3);
      Complex complex4 = complex2.INF.cosh();
      complex4.abs();
      Complex complex5 = complex1.INF.divide(complex0);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex3.NaN.add(complex0);
      complex5.ZERO.cosh();
      complex3.multiply(complex2);
      Complex complex8 = complex7.ZERO.exp();
      complex6.I.sqrt1z();
      complex8.I.multiply(0.0);
      Complex complex9 = complex8.tanh();
      Complex complex10 = Complex.INF;
      complex10.divide(Double.POSITIVE_INFINITY);
      complex10.conjugate();
      Complex complex11 = Complex.NaN;
      complex11.readResolve();
      Complex complex12 = complex10.negate();
      complex2.sinh();
      complex9.tan();
      complex5.multiply(Double.NaN);
      complex12.multiply(0.0);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.getImaginary();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex3.multiply(complex2);
      Complex complex9 = complex7.exp();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex10.sqrt1z();
      Complex complex11 = complex9.tanh();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex10.conjugate();
      Complex complex15 = Complex.NaN;
      complex6.readResolve();
      Complex complex16 = complex8.negate();
      Complex complex17 = new Complex(Double.POSITIVE_INFINITY);
      complex14.tan();
      complex16.tanh();
      Complex complex18 = Complex.NaN;
      complex0.readResolve();
      complex15.equals(complex18);
      complex1.conjugate();
      complex15.sqrt1z();
      Complex complex19 = Complex.ZERO;
      Complex complex20 = Complex.ZERO;
      complex20.conjugate();
      complex13.reciprocal();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.I.getArgument();
      complex0.multiply(21);
      Complex complex1 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      Complex complex4 = complex1.INF.cosh();
      complex4.abs();
      Complex.valueOf((-4.278201128741098E-9), Double.NaN);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex3.sqrt1z();
      complex7.getArgument();
      complex7.exp();
      complex6.divide(0.0);
      complex5.sin();
      complex2.divide(1.5707963267948966);
      Complex complex8 = Complex.NaN;
      complex8.multiply(1.1931809916597331E7);
      complex4.multiply(975.52320450942);
      Complex complex9 = Complex.ZERO;
      complex9.createComplex(1.1931809916597331E7, 1.1931809916597331E7);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1845.5662650881661), (-1845.5662650881661));
      Complex complex1 = new Complex((-1399.67882), 1158.7);
      complex0.hashCode();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.reciprocal();
      complex3.readResolve();
      complex1.divide((-2748.58457341622));
      complex3.conjugate();
      complex1.readResolve();
      Complex complex4 = Complex.ZERO;
      complex2.negate();
      complex0.sinh();
      complex1.tan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.tanh();
      Complex complex7 = Complex.I;
      complex4.equals(complex7);
      complex6.conjugate();
      Complex complex8 = new Complex((-1572.0));
      Complex complex9 = Complex.I;
      Complex.valueOf((-1572.0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      complex0.sqrt1z();
      Complex complex2 = complex0.exp();
      Complex complex3 = new Complex(147.36724254184, (-1572.0));
      complex3.hashCode();
      Complex complex4 = complex2.reciprocal();
      complex1.readResolve();
      complex2.readResolve();
      complex4.getArgument();
      complex1.multiply(1);
      complex3.sinh();
      complex3.tan();
      complex4.tanh();
      complex2.equals("q;!]oDPAqlY87KW^");
      complex0.conjugate();
      Complex complex5 = new Complex(975.52320450942);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(21);
      Complex complex2 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Complex complex5 = complex2.INF.cosh();
      complex5.abs();
      Complex complex6 = complex1.INF.divide(complex0);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex3.NaN.add(complex0);
      Complex complex9 = complex6.ZERO.cosh();
      complex3.multiply(complex2);
      Complex complex10 = complex8.ZERO.exp();
      complex7.I.sqrt1z();
      complex10.I.multiply(0.0);
      Complex complex11 = complex10.tanh();
      Complex complex12 = Complex.INF;
      complex12.divide(Double.POSITIVE_INFINITY);
      complex12.conjugate();
      Complex complex13 = Complex.NaN;
      complex13.readResolve();
      Complex complex14 = complex12.negate();
      complex2.sinh();
      complex11.tan();
      Complex complex15 = complex4.tanh();
      Complex complex16 = Complex.NaN;
      Object object0 = complex16.readResolve();
      complex6.equals(object0);
      complex12.conjugate();
      complex5.sqrt1z();
      Complex complex17 = Complex.ZERO;
      complex17.conjugate();
      complex9.reciprocal();
      complex8.sin();
      complex15.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(21);
      Complex complex2 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Complex complex5 = complex2.INF.cosh();
      complex5.abs();
      Complex complex6 = complex1.INF.divide(complex0);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex3.NaN.add(complex0);
      Complex complex9 = complex6.ZERO.cosh();
      complex3.multiply(complex2);
      Complex complex10 = complex8.ZERO.exp();
      complex7.I.sqrt1z();
      complex10.I.multiply(0.0);
      Complex complex11 = complex10.tanh();
      Complex complex12 = Complex.INF;
      complex12.divide(Double.POSITIVE_INFINITY);
      complex12.conjugate();
      Complex complex13 = Complex.NaN;
      complex13.readResolve();
      complex12.negate();
      complex2.sinh();
      complex11.tan();
      complex4.tanh();
      Complex complex14 = Complex.NaN;
      Complex complex15 = Complex.valueOf(Double.NaN, 975.52320450942);
      complex6.equals(complex15);
      complex12.conjugate();
      complex5.sqrt1z();
      Complex complex16 = Complex.ZERO;
      complex16.conjugate();
      complex9.reciprocal();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = 6.751460509863465E-258;
      Complex complex0 = new Complex((-1247.66363621563), 6.751460509863465E-258);
      Complex complex1 = complex0.NaN.multiply(1126);
      complex1.INF.getArgument();
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.divide((-198.5));
      complex2.NaN.nthRoot(1126);
      Complex complex3 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex.valueOf((-5046.55240155));
      Complex complex1 = new Complex((-5046.55240155), 2284.6643526);
      Complex complex2 = complex0.pow(complex1);
      complex2.I.getField();
      Complex complex3 = complex2.INF.subtract((-5046.55240155));
      Complex complex4 = complex1.ONE.acos();
      complex4.INF.sqrt();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.NaN.exp();
      complex6.I.multiply(2284.6643526);
      Complex complex7 = complex5.NaN.sqrt1z();
      complex2.asin();
      complex3.tanh();
      complex0.multiply((-5046.55240155));
      complex2.sinh();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1.9426261544163577E-8);
      complex0.NaN.getField();
      complex0.NaN.multiply(complex0);
      double double0 = 4710.94411688;
      Complex complex1 = new Complex(4710.94411688, 4710.94411688);
      Complex complex2 = complex1.pow(4710.94411688);
      try { 
        complex2.nthRoot((-1138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,138
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.getImaginary();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.acos();
      complex0.ZERO.acos();
      Complex complex4 = complex3.sqrt1z();
      complex3.ONE.getArgument();
      Complex complex5 = complex0.NaN.exp();
      complex5.abs();
      complex3.sin();
      Complex complex6 = complex1.divide(4.1967567643852055E8);
      complex4.tanh();
      Complex complex7 = new Complex(4.1967567643852055E8, Double.POSITIVE_INFINITY);
      complex2.divide(complex6);
      Complex.valueOf(4.1967567643852055E8);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2362.1687908487525, 1247.45);
      Complex complex1 = complex0.add(2362.1687908487525);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.acos();
      complex2.getField();
      complex1.nthRoot(1259);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(2.272019649514069);
      complex4.hashCode();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex2.divide((-2201.352422047));
      complex4.conjugate();
      complex3.readResolve();
      Complex complex10 = complex5.negate();
      complex3.sinh();
      complex6.tan();
      complex1.tanh();
      complex7.equals(complex10);
      complex8.conjugate();
      complex8.sqrt1z();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.getImaginary();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.acos();
      complex0.ZERO.acos();
      Complex complex4 = complex3.sqrt1z();
      complex3.ONE.getArgument();
      Complex complex5 = complex0.NaN.exp();
      Complex complex6 = complex1.divide(0.0);
      Complex complex7 = complex2.sin();
      complex7.INF.divide(0.0);
      Complex complex8 = complex1.ZERO.multiply(0.0);
      Complex complex9 = complex8.I.multiply(0.0);
      complex4.equals((Object) null);
      complex5.multiply(complex9);
      complex5.cos();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4185792944363501, 975.52320450942);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.exp();
      Complex complex4 = new Complex(147.36724254184, (-1572.0));
      complex4.hashCode();
      complex2.add(complex1);
      complex3.reciprocal();
      Complex complex5 = (Complex)complex1.readResolve();
      Complex complex6 = complex1.divide(2723.7);
      complex3.conjugate();
      complex5.readResolve();
      Complex complex7 = Complex.ZERO;
      complex7.negate();
      complex6.sinh();
      complex2.tan();
      complex1.tanh();
      complex4.equals("q;!]oDPAqlY87KW^");
      complex2.conjugate();
      Complex complex8 = new Complex((-1572.0));
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.exp();
      complex0.readResolve();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.multiply(7);
      Complex complex6 = complex4.exp();
      complex3.sin();
      complex0.abs();
      complex1.conjugate();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex2.log();
      complex7.hashCode();
      complex1.createComplex((-760.1061667939059), (-2249.89805907));
      complex5.multiply(7);
      complex9.toString();
      complex0.getReal();
      complex9.toString();
      Complex complex10 = new Complex(376.4, 376.4);
      Complex complex11 = complex10.negate();
      complex1.atan();
      Complex complex12 = Complex.valueOf((-1324.196805822712));
      complex12.getArgument();
      complex11.cosh();
      Complex complex13 = complex2.add(3.141592653589793);
      complex13.hashCode();
      Complex complex14 = complex9.multiply((-2249.89805907));
      complex6.getImaginary();
      complex14.isInfinite();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = new Complex((-548.1070271), 0.6156264703860141);
      complex3.exp();
      Complex complex4 = new Complex((-1022.524422212184), (-304.286259916));
      complex4.hashCode();
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = Complex.I;
      complex7.readResolve();
      complex7.readResolve();
      complex1.getArgument();
      complex6.multiply(1);
      complex5.negate();
      Complex complex8 = new Complex((-4455.4393));
      complex6.exp();
      complex7.sinh();
      complex3.divide(1.5707963267948966);
      complex1.sqrt1z();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.add((-1845.0));
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.I.log();
      complex3.I.hashCode();
      complex0.toString();
      complex4.I.exp();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex3.sqrt1z();
      complex6.ONE.readResolve();
      Complex complex8 = complex0.sin();
      complex0.NaN.sinh();
      Complex complex9 = complex5.sinh();
      complex9.abs();
      complex9.ONE.abs();
      Complex complex10 = complex3.acos();
      complex10.I.exp();
      complex10.ONE.subtract(complex6);
      complex8.exp();
      complex2.pow(Double.POSITIVE_INFINITY);
      complex8.abs();
      complex4.getField();
      complex7.tan();
      complex0.createComplex(1.0, Double.NaN);
      try { 
        complex5.nthRoot((-1258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,258
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.INF.toString();
      Complex complex1 = complex0.NaN.tan();
      complex0.I.nthRoot(1);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf((-1762.049009412));
      Complex complex4 = complex2.NaN.multiply(2253);
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex0.sqrt();
      complex6.sinh();
      complex4.readResolve();
      Complex complex7 = complex5.sqrt();
      complex7.sqrt1z();
      Complex complex8 = complex1.sin();
      complex4.nthRoot(2056);
      complex8.reciprocal();
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1845.0), (-1845.0));
      Complex complex1 = complex0.ONE.add((-927.42927));
      complex0.ONE.log();
      Complex complex2 = complex0.INF.acos();
      complex2.getField();
      complex0.sin();
      complex0.reciprocal();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(343);
      Complex complex1 = Complex.I;
      complex1.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.divide(3801.85989593);
      Complex complex5 = Complex.INF;
      complex5.conjugate();
      Complex complex6 = new Complex(343);
      complex6.readResolve();
      Complex complex7 = new Complex(3801.85989593);
      complex2.sinh();
      complex2.tan();
      complex1.tanh();
      complex1.equals(complex0);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cosh();
      complex3.atan();
      Complex complex4 = complex2.I.sqrt1z();
      complex0.I.pow(complex4);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.ZERO.exp();
      complex7.abs();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex6.negate();
      Complex complex10 = complex9.multiply((-1));
      complex7.sinh();
      complex3.tan();
      complex7.tanh();
      complex7.equals(complex8);
      Complex complex11 = Complex.I;
      complex11.conjugate();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1550.60176));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.I.exp();
      complex0.ONE.readResolve();
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = complex0.multiply(20);
      Complex complex6 = complex5.NaN.exp();
      complex6.ZERO.sin();
      complex0.I.abs();
      complex2.conjugate();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex4.I.log();
      complex7.ZERO.hashCode();
      Complex complex10 = complex2.createComplex((-760.1061667939059), (-2249.89805907));
      complex10.add(0.0);
      complex10.add(complex8);
      Complex complex11 = complex0.INF.multiply(20);
      complex11.NaN.toString();
      complex0.getReal();
      complex7.toString();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex12.I.atan();
      complex2.getArgument();
      Complex complex14 = complex3.subtract(complex13);
      complex8.sinh();
      complex9.log();
      complex14.subtract(complex5);
      complex3.toString();
      complex6.divide(complex13);
      complex9.conjugate();
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.I.sqrt1z();
      Complex complex6 = complex0.I.pow(complex5);
      Complex complex7 = new Complex(1.0);
      complex4.add(complex7);
      Complex complex8 = new Complex((-388.22));
      complex8.pow((-161.5154780918687));
      complex8.multiply(1.0);
      complex2.atan();
      Complex complex9 = complex8.conjugate();
      complex9.toString();
      Complex complex10 = complex5.divide(complex1);
      Complex complex11 = complex4.divide((-388.22));
      complex11.isNaN();
      Complex complex12 = complex2.multiply(complex1);
      complex12.ZERO.pow(1.0);
      complex6.sin();
      complex4.abs();
      complex9.getArgument();
      Complex complex13 = Complex.NaN;
      complex13.multiply((-779));
      complex10.divide((-3.141592653589793));
      complex2.cos();
      complex1.sin();
      complex13.multiply((double) 0);
      complex7.getReal();
      Complex complex14 = new Complex(1200.822707172721, (-161.5154780918687));
      complex14.NaN.pow(1.0);
      complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(166);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex2.INF.reciprocal();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.I.pow(complex5);
      complex1.add(complex4);
      Complex complex8 = (Complex)complex7.INF.readResolve();
      complex7.conjugate();
      Complex complex9 = complex0.exp();
      complex0.abs();
      complex8.sin();
      complex8.divide(1.976868146639626E196);
      complex9.divide(complex1);
      Complex.valueOf(1.976868146639626E196);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.exp();
      Complex complex4 = new Complex(147.36724254184, (-1572.0));
      complex4.hashCode();
      complex2.add(complex1);
      Complex complex5 = complex3.reciprocal();
      complex1.readResolve();
      complex3.readResolve();
      complex5.getArgument();
      Complex complex6 = complex1.multiply(1);
      complex0.negate();
      Complex complex7 = new Complex((-4455.4393));
      Complex complex8 = complex7.exp();
      complex8.sinh();
      complex8.divide((double) 1);
      complex6.sqrt1z();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(1643.4694);
      complex2.I.getArgument();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.ZERO.add(complex3);
      Complex complex5 = complex3.INF.conjugate();
      complex4.ONE.hashCode();
      Complex complex6 = complex3.ONE.subtract(1567.6);
      complex2.NaN.hashCode();
      complex3.ONE.hashCode();
      complex1.getField();
      complex2.cos();
      complex5.getArgument();
      complex6.multiply(356);
      complex2.divide((-2.428235142859551));
      complex5.cos();
      Complex complex7 = complex3.sin();
      complex3.multiply((-4426.0));
      complex7.getReal();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1845.0), (-1845.0));
      Complex complex1 = complex0.ONE.add((-927.42927));
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex0.INF.acos();
      complex3.getField();
      complex3.ONE.nthRoot(357);
      Complex complex4 = Complex.I;
      Complex.valueOf((-927.42927));
      complex4.abs();
      Complex complex5 = complex2.conjugate();
      complex0.subtract((-1.8508157176809255));
      Complex complex6 = complex1.divide((-0.6156264703860141));
      complex0.acos();
      complex6.subtract((-927.42927));
      complex5.pow(1002.767022);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.log();
      complex4.NaN.sqrt();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex5.pow(0.0);
      complex8.nthRoot(1431655765);
      Complex complex10 = complex6.sqrt();
      complex3.getField();
      complex3.multiply((-2103987264));
      complex3.equals("");
      complex10.divide(complex5);
      complex7.isNaN();
      complex2.pow(20485.98729469782);
      complex7.toString();
      try { 
        complex9.nthRoot((-550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -550
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.11563024489807387), 975.52320450942);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(21);
      Complex complex2 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Complex complex5 = complex2.INF.cosh();
      complex5.abs();
      Complex complex6 = new Complex(21, 975.52320450942);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex3.NaN.add(complex0);
      complex3.multiply(complex2);
      Complex complex9 = complex8.ZERO.exp();
      complex7.I.sqrt1z();
      Complex complex10 = complex9.I.multiply((-0.11563024489807387));
      complex8.ONE.toString();
      complex0.getReal();
      complex3.readResolve();
      complex9.INF.tanh();
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex7.negate();
      Complex complex14 = complex13.divide(1251.920517338);
      complex14.I.tanh();
      complex9.abs();
      complex6.subtract(complex3);
      complex1.sinh();
      Complex complex15 = complex4.log();
      complex10.subtract(complex12);
      complex3.toString();
      complex2.divide(complex5);
      complex3.conjugate();
      complex15.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.nthRoot(1);
      Complex complex1 = Complex.ONE;
      complex0.equals(complex1);
      Complex complex2 = complex0.divide(complex1);
      complex1.isNaN();
      Complex complex3 = complex2.pow((double) 1);
      Complex complex4 = complex3.INF.cos();
      complex4.ONE.subtract(complex3);
      try { 
        complex3.nthRoot((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,741,824
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(21);
      Complex complex2 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex3 = complex2.tan();
      complex2.ZERO.multiply(complex3);
      Complex complex4 = complex2.INF.cosh();
      complex4.abs();
      Complex complex5 = complex1.INF.divide(complex0);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex3.NaN.add(complex0);
      complex5.ZERO.cosh();
      Complex complex8 = complex3.multiply(complex2);
      Complex complex9 = complex7.ZERO.exp();
      complex6.I.sqrt1z();
      complex9.I.multiply(0.0);
      complex7.ONE.toString();
      Object object0 = complex8.readResolve();
      complex8.equals(object0);
      Complex complex10 = complex5.negate();
      complex10.nthRoot(693);
      Complex complex11 = complex7.sqrt();
      complex1.getField();
      Complex complex12 = complex7.multiply(1437);
      complex11.equals("");
      complex12.divide(complex3);
      complex11.isNaN();
      Complex complex13 = complex11.pow(975.52320450942);
      complex13.toString();
      complex1.nthRoot(21);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.getImaginary();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.acos();
      complex0.ZERO.acos();
      complex3.sqrt1z();
      complex3.ONE.getArgument();
      Complex complex4 = complex0.NaN.exp();
      complex1.divide(0.0);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.INF.divide(0.0);
      Complex complex7 = complex1.ZERO.multiply(0.0);
      complex7.I.multiply(0.0);
      complex4.getReal();
      complex6.readResolve();
      Complex complex8 = complex4.tanh();
      complex8.sqrt();
      complex3.exp();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.negate();
      complex8.divide(447.0511943804);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.tanh();
      complex1.abs();
      complex7.subtract(complex11);
      Complex complex13 = complex10.sinh();
      complex9.log();
      complex7.subtract(complex12);
      complex13.toString();
      complex1.divide(complex0);
      complex6.conjugate();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.I.sqrt1z();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex7.pow(12.2915);
      complex2.sinh();
      Complex complex10 = complex8.add(12.2915);
      complex4.pow(12.2915);
      complex5.abs();
      Complex complex11 = complex10.negate();
      complex11.getReal();
      complex5.add(complex6);
      complex4.log();
      complex0.sqrt();
      complex9.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      complex0.INF.sin();
      complex0.pow(0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.log();
      complex2.NaN.sqrt();
      complex0.pow(complex3);
      Complex complex4 = complex1.conjugate();
      complex4.tan();
      Complex complex5 = complex3.exp();
      complex2.abs();
      complex3.sin();
      complex5.divide(20.0);
      complex4.divide(complex0);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.getImaginary();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.acos();
      complex0.ZERO.acos();
      Complex complex4 = complex3.sqrt1z();
      complex3.ONE.getArgument();
      complex0.NaN.exp();
      complex1.divide(0.0);
      Complex complex5 = complex2.sin();
      complex5.INF.divide(0.0);
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.I.multiply(0.0);
      complex4.equals((Object) null);
      Complex complex7 = complex3.negate();
      try { 
        complex7.I.nthRoot((-550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -550
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1845.0), (-1845.0));
      complex0.ONE.add((-927.42927));
      complex0.ONE.log();
      Complex complex1 = complex0.INF.acos();
      complex1.getField();
      complex1.ONE.nthRoot(357);
      Complex complex2 = Complex.I;
      complex2.I.hashCode();
      complex1.I.divide(complex2);
      Complex complex3 = complex0.INF.tanh();
      complex3.ZERO.divide(22.003447321426);
      complex3.conjugate();
      Object object0 = complex0.readResolve();
      complex3.NaN.negate();
      Complex complex4 = complex3.sinh();
      complex4.tan();
      complex0.tanh();
      complex3.equals(object0);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-7.814146377574201E-75));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.acos();
      complex3.INF.abs();
      complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.ZERO.sqrt1z();
      complex2.NaN.tanh();
      Complex complex5 = complex0.subtract((-7.814146377574201E-75));
      Complex complex6 = complex2.pow(complex1);
      Complex.valueOf((-7.814146377574201E-75));
      complex4.nthRoot(1429);
      complex5.divide(complex6);
      complex1.atan();
      try { 
        complex2.nthRoot((-114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -114
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.multiply((-1742));
      complex3.ZERO.getArgument();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.conjugate();
      complex4.I.cos();
      complex4.ONE.tanh();
      Complex complex7 = complex6.multiply((-957.85256025));
      complex7.ONE.divide(complex6);
      complex0.exp();
      Complex complex8 = complex7.NaN.sqrt();
      complex0.readResolve();
      complex2.getReal();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      complex1.INF.acos();
      complex1.hashCode();
      complex1.ZERO.getField();
      Complex complex2 = complex0.multiply((double) 0);
      complex2.ONE.cosh();
      Complex complex3 = complex2.NaN.multiply(0);
      Complex complex4 = Complex.valueOf((double) 0);
      complex4.INF.multiply(complex0);
      complex3.NaN.reciprocal();
      complex2.ONE.acos();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2523.0854), (-2523.0854));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.NaN.subtract((-2523.0854));
      Complex complex4 = complex3.I.add((-2523.0854));
      Complex complex5 = complex4.INF.pow(0.0);
      complex5.NaN.asin();
      complex0.I.multiply(1677);
      Complex complex6 = complex0.ONE.multiply((-2523.0854));
      complex6.I.sqrt1z();
      Complex complex7 = complex0.INF.subtract(complex1);
      complex7.ONE.add(complex3);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.NaN.add(complex1);
      complex9.NaN.multiply(2.6735267639160156);
      complex0.equals(complex8);
      Complex complex10 = complex0.exp();
      complex1.ZERO.divide(complex8);
      complex10.getArgument();
      complex10.acos();
      complex7.getField();
      Complex complex11 = complex2.subtract((-2523.0854));
      complex9.add(Double.NaN);
      complex2.I.nthRoot(1677);
      complex3.abs();
      complex7.toString();
      Complex.valueOf(Double.NaN);
      complex5.acos();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-279.75359202), (-6163.86028));
      Complex complex1 = Complex.valueOf((-6163.86028));
      Complex complex2 = complex0.NaN.subtract((-279.75359202));
      complex2.getArgument();
      complex0.ONE.acos();
      Complex complex3 = complex1.I.subtract(0.0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex4.divide(complex1);
      complex0.isNaN();
      Complex complex7 = complex6.ZERO.add(complex0);
      complex7.INF.divide(complex0);
      complex1.ONE.divide(2.0);
      Complex complex8 = new Complex((-6.038239639506472E-32));
      Complex complex9 = complex3.pow(complex8);
      complex9.INF.add((-279.75359202));
      complex2.sinh();
      Complex complex10 = complex6.multiply(383);
      complex5.getField();
      complex4.getArgument();
      complex3.conjugate();
      complex10.readResolve();
      complex4.nthRoot(383);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-2404.78855370628));
      Complex complex1 = Complex.ZERO;
      complex1.NaN.reciprocal();
      complex1.I.getArgument();
      complex1.NaN.atan();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.subtract((-2404.78855370628));
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.multiply((-738.04));
      Complex complex6 = complex5.pow((-2404.78855370628));
      complex6.createComplex((-2404.78855370628), 0.0);
      complex6.INF.sqrt();
      complex4.pow(complex5);
      complex3.negate();
      complex3.NaN.subtract(complex4);
      complex5.multiply(0);
      Complex complex7 = complex4.pow(0.0);
      complex7.ONE.hashCode();
      complex2.conjugate();
      complex7.ZERO.reciprocal();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.ZERO.sin();
      Complex complex9 = complex7.multiply((-1.8409546441412518E-8));
      complex9.getImaginary();
      complex3.multiply(0);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(94.7782119, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.multiply(complex0);
      complex3.INF.getField();
      Complex complex4 = complex2.I.add(94.7782119);
      complex0.NaN.sinh();
      complex4.NaN.getArgument();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.NaN.conjugate();
      complex6.NaN.hashCode();
      Complex complex7 = complex2.multiply(855.33734);
      complex7.ONE.nthRoot(1435);
      Complex complex8 = complex4.acos();
      complex7.INF.exp();
      complex8.equals(complex7);
      complex7.sqrt();
      Complex complex9 = complex4.conjugate();
      complex9.NaN.createComplex(94.7782119, 855.33734);
      complex0.subtract(600.018655189268);
      complex4.getImaginary();
      complex4.getImaginary();
      complex5.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(166);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex7.I.pow(complex6);
      complex1.add(complex5);
      complex8.INF.readResolve();
      complex7.I.sqrt();
      complex3.createComplex(166, 0.0);
      Complex complex9 = complex7.NaN.add(complex6);
      Complex complex10 = complex9.pow((double) 166);
      complex10.I.multiply((double) 166);
      complex0.atan();
      Complex complex11 = complex5.conjugate();
      complex11.ONE.toString();
      complex2.divide(complex4);
      Complex complex12 = complex7.divide(0.0);
      complex12.isNaN();
      Complex complex13 = complex12.multiply(complex3);
      Complex complex14 = complex13.INF.sin();
      complex14.ZERO.abs();
      complex1.getArgument();
      complex7.multiply(0);
      complex2.divide(0.0);
      Complex complex15 = complex3.cos();
      complex15.I.sin();
      Complex complex16 = complex12.multiply(1200.822707172721);
      complex12.getReal();
      complex16.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 975.52320450942);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(21);
      Complex complex2 = Complex.valueOf(975.52320450942, (double) 21);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Complex complex5 = complex2.INF.cosh();
      complex5.abs();
      Complex complex6 = complex1.INF.divide(complex0);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex3.NaN.add(complex0);
      complex3.multiply(complex2);
      Complex complex9 = complex8.ZERO.exp();
      complex7.I.sqrt1z();
      Complex complex10 = complex9.I.multiply(0.0);
      complex8.ONE.toString();
      complex0.getReal();
      complex3.readResolve();
      complex9.INF.tanh();
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex7.negate();
      Complex complex14 = complex13.divide(1251.920517338);
      complex14.I.tanh();
      complex9.abs();
      complex6.subtract(complex3);
      complex1.sinh();
      Complex complex15 = complex4.log();
      complex10.subtract(complex12);
      complex3.toString();
      complex2.divide(complex5);
      complex3.conjugate();
      complex15.getReal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex1.ONE.negate();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex4.log();
      complex3.subtract(1301.0);
      complex5.INF.cosh();
      complex1.isNaN();
      Complex complex6 = complex0.atan();
      complex3.tan();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.tanh();
      complex8.I.nthRoot(223);
      complex7.INF.abs();
      Complex complex9 = complex3.add(complex7);
      Complex complex10 = complex1.ZERO.log();
      complex9.ONE.sinh();
      complex7.ZERO.negate();
      complex6.abs();
      complex1.readResolve();
      complex9.multiply(0.7853981633974483);
      complex10.add(complex3);
      complex6.negate();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1570.815906520595, (-3825.9));
      complex0.I.nthRoot(728);
      Complex complex1 = Complex.valueOf(3519.993831938, 0.0);
      Complex complex2 = complex1.I.tan();
      complex2.ZERO.subtract(0.0);
      complex0.abs();
      Complex complex3 = new Complex(1570.815906520595, 0.0);
      complex3.ZERO.multiply(1570.815906520595);
      complex0.subtract(complex3);
      Complex complex4 = complex3.createComplex(0.0, 2247.6360288669);
      complex4.INF.exp();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cosh();
      complex3.atan();
      Complex complex4 = complex2.I.sqrt1z();
      complex0.I.pow(complex4);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.ZERO.exp();
      complex7.abs();
      Complex complex8 = complex5.sin();
      complex8.I.divide(20.0);
      complex4.divide(complex8);
      Complex.valueOf((-860.6210045359));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.INF.add(1433.9645);
      complex0.isNaN();
      Complex complex4 = complex0.subtract((-1.0));
      complex4.getField();
      Complex complex5 = complex0.sin();
      complex5.NaN.multiply(complex0);
      complex4.multiply(0.0);
      Complex complex6 = complex0.subtract(0.0);
      complex6.NaN.multiply(1206);
      Complex complex7 = complex3.tan();
      complex7.multiply((double) 1206);
      Complex complex8 = complex1.sinh();
      complex6.subtract(complex5);
      complex8.sqrt();
      complex7.nthRoot(3430);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-2272.9536328), (-2272.9536328));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.add(complex0);
      Complex complex3 = complex1.tan();
      complex3.cosh();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex2.INF.negate();
      complex1.I.acos();
      complex5.subtract((-2272.9536328));
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.add((-2272.9536328));
      Complex complex9 = complex0.multiply(complex1);
      Complex complex10 = complex9.createComplex((-2272.9536328), (-2272.9536328));
      Complex complex11 = complex2.I.add(complex7);
      complex11.NaN.getField();
      complex10.INF.multiply(complex1);
      complex10.ONE.add(complex6);
      Complex complex12 = complex6.I.multiply(complex7);
      complex10.I.getField();
      Complex complex13 = complex2.NaN.acos();
      complex13.ZERO.sinh();
      complex13.ZERO.readResolve();
      Complex complex14 = complex6.tan();
      complex14.ONE.hashCode();
      complex14.INF.subtract(complex12);
      complex5.getImaginary();
      complex6.NaN.add((-2272.9536328));
      complex14.readResolve();
      complex6.subtract(complex5);
      complex9.nthRoot(2053);
      complex8.sin();
      complex8.nthRoot(2053);
      complex4.cos();
      Complex.valueOf((-2272.9536328));
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      complex0.INF.sin();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.log();
      complex3.NaN.sqrt();
      complex3.negate();
      Complex complex5 = complex2.negate();
      complex5.NaN.sin();
      Complex complex6 = complex4.pow(0.0);
      complex4.sinh();
      Complex complex7 = complex3.add(0.0);
      complex7.I.pow(0.0);
      complex4.abs();
      complex6.negate();
      complex2.getReal();
      complex5.add(complex7);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.tan();
      complex0.createComplex(0.0, 1230.8266114);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.conjugate();
      complex1.I.getField();
      Complex complex4 = complex3.INF.add(complex1);
      complex1.readResolve();
      Complex complex5 = complex1.add((-822.1569706438826));
      complex2.sinh();
      complex3.add(complex5);
      complex4.cosh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.getField();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.abs();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex1.divide(0.0);
      complex0.acos();
      complex6.subtract(0.0);
      complex6.pow(0.0);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4813.6, 4813.6);
      Complex complex1 = complex0.pow((-143.0));
      complex0.ONE.divide(complex1);
      try { 
        complex0.nthRoot((-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,025
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1.9426261544163577E-8);
      Complex complex1 = Complex.ZERO;
      complex0.NaN.multiply(complex1);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(687.5830959);
      Complex complex2 = complex1.cos();
      complex1.getArgument();
      Complex complex3 = complex2.divide(0.0);
      complex1.ONE.sinh();
      complex1.equals((Object) null);
      complex2.toString();
      complex0.INF.exp();
      complex2.ZERO.sinh();
      Complex complex4 = complex2.ONE.subtract(complex0);
      Complex complex5 = complex3.ZERO.sqrt();
      complex3.nthRoot(37);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.ZERO.multiply(37);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.ZERO.multiply(complex8);
      complex3.isInfinite();
      Complex complex10 = complex2.add(complex0);
      complex10.ONE.hashCode();
      complex8.INF.readResolve();
      Complex complex11 = complex7.I.sin();
      complex4.tan();
      complex7.ZERO.log();
      Complex complex12 = complex5.subtract(complex9);
      Complex complex13 = complex2.sinh();
      complex12.ZERO.nthRoot(1);
      complex13.NaN.conjugate();
      complex12.isInfinite();
      complex11.subtract(0.0);
      complex8.getField();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-536.6633575584752), (-536.6633575584752));
      Complex complex1 = complex0.INF.sin();
      complex0.ONE.asin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.ONE.atan();
      complex0.abs();
      complex0.readResolve();
      complex0.ZERO.sin();
      Complex complex4 = complex0.ONE.cos();
      complex4.NaN.divide(complex0);
      Complex complex5 = complex2.I.add(complex0);
      Complex.valueOf(758.9565986878774);
      Complex complex6 = Complex.valueOf(758.9565986878774);
      Complex complex7 = complex6.conjugate();
      complex6.ONE.abs();
      complex3.readResolve();
      Complex complex8 = complex2.subtract(complex5);
      complex8.abs();
      complex8.atan();
      complex7.add(758.9565986878774);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getArgument();
      Complex complex1 = new Complex((-2903.891273909885));
      complex0.INF.add(complex1);
      complex0.ZERO.add(complex1);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ONE.reciprocal();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.add((-20.0));
      complex1.NaN.add(0.0);
      complex1.NaN.subtract((-20.0));
      complex1.INF.hashCode();
      Complex complex3 = complex0.subtract(453.8);
      Complex complex4 = Complex.valueOf((-20.0));
      complex4.NaN.multiply(complex2);
      complex3.INF.negate();
      Complex complex5 = complex2.tanh();
      complex5.getReal();
      complex5.divide(complex0);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.asin();
      complex0.INF.hashCode();
      complex0.abs();
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.INF.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1550.60176));
      Complex complex2 = complex0.I.pow(complex1);
      complex0.I.exp();
      complex0.ONE.readResolve();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex0.multiply(7);
      Complex complex5 = complex4.NaN.exp();
      complex5.ZERO.sin();
      complex0.I.abs();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.ONE.sqrt1z();
      complex7.I.sqrt1z();
      complex3.I.log();
      complex7.ZERO.hashCode();
      complex2.createComplex((-760.1061667939059), (-2249.89805907));
      Complex complex8 = complex0.INF.multiply(7);
      complex8.NaN.toString();
      complex0.getReal();
      complex7.toString();
      Complex complex9 = complex3.negate();
      complex9.I.atan();
      complex2.getArgument();
      complex0.ONE.cosh();
      Complex complex10 = complex2.add(1.0);
      complex4.hashCode();
      complex10.multiply(Double.NaN);
      complex7.getImaginary();
      complex10.isInfinite();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.add(1880.2225);
      complex0.INF.asin();
      complex0.I.getArgument();
      Complex complex1 = complex0.conjugate();
      complex1.NaN.tan();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 1880.2225);
      complex2.tan();
      Complex complex3 = complex2.reciprocal();
      complex2.I.cos();
      complex2.equals("");
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.INF.tanh();
      complex3.NaN.tan();
      complex0.abs();
      complex2.I.readResolve();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex7.ONE.multiply(complex0);
      Complex complex9 = complex7.ONE.sin();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex2.sqrt();
      complex6.getField();
      assertSame(complex6, complex8);
      
      Complex complex13 = complex10.tanh();
      String string0 = complex9.toString();
      assertEquals("(0.8414709848078965, 0.0)", string0);
      
      Complex complex14 = complex12.pow(1.494655405262451E154);
      complex11.getReal();
      Complex complex15 = complex12.divide(1.494655405262451E154);
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      complex5.isNaN();
      complex4.isNaN();
      complex9.getReal();
      assertEquals(0.6900760708753189, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex16 = complex14.pow((-1.5096182622106617E-105));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex15));
      assertFalse(complex12.isInfinite());
      assertTrue(complex12.equals((Object)complex13));
      assertSame(complex16, complex4);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.ZERO;
      complex0.NaN.divide(complex1);
      Complex complex2 = complex0.ONE.multiply(20.0);
      try { 
        complex2.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(1643.4694);
      complex2.I.getArgument();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.ZERO.add(complex3);
      Complex complex5 = complex3.INF.conjugate();
      assertTrue(complex5.isInfinite());
      
      complex4.ONE.hashCode();
      Complex complex6 = complex3.ONE.subtract(1567.6);
      assertEquals((-1566.6), complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      complex2.NaN.hashCode();
      complex3.ONE.hashCode();
      assertTrue(complex3.isNaN());
      
      complex1.getField();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.subtract(complex2);
      assertEquals((-2.2204460492503128E-16), complex9.getImaginary(), 0.01);
      assertEquals((-1644.6237541542569), complex9.getReal(), 0.01);
      
      Complex complex10 = complex7.acos();
      assertTrue(complex0.equals((Object)complex1));
      assertEquals((-2.2204460492503128E-16), complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex11 = Complex.valueOf((-2239.175));
      assertEquals((-2239.175), complex11.getReal(), 0.01);
  }
}
