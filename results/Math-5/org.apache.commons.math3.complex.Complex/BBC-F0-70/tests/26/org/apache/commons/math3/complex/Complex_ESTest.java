/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:05:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      complex1.I.readResolve();
      complex1.I.hashCode();
      Complex complex2 = complex0.tanh();
      complex2.getField();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.pow(2.0);
      complex4.ZERO.add(0.00847457627118644);
      Complex.valueOf(2.0);
      complex1.divide(complex4);
      complex1.pow(1.995861405035642E-102);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-195.04674799852023), 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(258.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(258.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 258.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(258.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(397.95, Double.POSITIVE_INFINITY);
      complex0.multiply((-5077));
      complex0.toString();
      complex0.tan();
      Complex.valueOf(3653.596233433, 12.41544734030846);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(258.0, Double.POSITIVE_INFINITY);
      complex0.tan();
      complex0.multiply(258.0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-954.33495978774), (-20.0));
      complex0.log();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), 20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4896127778163155E38, 268.0);
      Complex complex1 = Complex.valueOf(20.0, (-2816.046243955));
      complex1.abs();
      complex1.ZERO.multiply(1.5714110564653245E-8);
      complex1.sin();
      complex0.NaN.hashCode();
      Complex complex2 = complex0.divide(268.0);
      complex0.NaN.conjugate();
      complex0.subtract((-2816.046243955));
      complex1.sqrt1z();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((double) 268);
      complex1.divide(complex0);
      complex1.NaN.subtract(3539.0);
      Complex complex2 = complex1.exp();
      complex2.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex1.ZERO.atan();
      Complex complex3 = complex2.log();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-268.0), (-268.0));
      Complex.valueOf((-268.0));
      complex0.equals(complex0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex(2474.3624042475412, Double.NaN);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.reciprocal();
      complex2.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex2.add(complex3);
      Complex complex6 = complex4.subtract(complex5);
      complex3.multiply(1);
      try { 
        complex6.nthRoot((-2046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,046
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, (-505.05));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5002.38), (-5002.38));
      Complex complex1 = complex0.acos();
      complex1.tan();
      complex0.pow(2342.7);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((double) 286);
      complex1.exp();
      Complex complex2 = complex0.I.reciprocal();
      complex2.I.tan();
      complex0.ONE.nthRoot(286);
      complex1.ZERO.asin();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.ZERO.sqrt();
      complex4.nthRoot(286);
      Complex complex5 = complex1.multiply(complex3);
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.238642390386363E-244, 6.238642390386363E-244);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.sin();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = Complex.ONE;
      complex3.sinh();
      complex2.NaN.getArgument();
      Complex complex7 = complex5.ZERO.subtract(complex6);
      Complex.valueOf(6.238642390386363E-244, 882.2819176083988);
      complex4.NaN.exp();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex2.pow(complex3);
      Complex complex10 = Complex.valueOf(Double.NaN, 6.238642390386363E-244);
      Complex complex11 = complex10.INF.sqrt1z();
      complex0.INF.exp();
      complex5.toString();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex12.add(complex7);
      Complex complex14 = complex9.tan();
      complex14.INF.multiply(2493);
      complex10.I.divide(complex3);
      Complex complex15 = complex14.ONE.subtract(882.2819176083988);
      complex3.cosh();
      complex9.exp();
      Complex complex16 = complex15.multiply(complex14);
      complex16.asin();
      complex7.divide(complex11);
      complex14.tanh();
      complex13.createComplex((-546.7594298736898), Double.NaN);
      complex2.multiply(complex4);
      complex8.nthRoot(2493);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.exp();
      Complex complex2 = complex0.I.reciprocal();
      complex0.ONE.nthRoot(286);
      Complex complex3 = Complex.valueOf(1.0);
      complex2.sqrt();
      complex3.multiply(286);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(6.283185307179586);
      complex1.ZERO.add(complex0);
      complex1.sqrt();
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.947430508967955E-5), 2035.3760622);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(2035.3760622);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-133.051266073125));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.I.createComplex(Double.POSITIVE_INFINITY, 515.79879278317);
      complex0.conjugate();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(247.43);
      double double0 = 0.0;
      double double1 = 1.1542919775877893E7;
      Complex.valueOf(1.1542919775877893E7);
      complex0.sqrt();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, 2342.7);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = new Complex(0.0, 2342.7);
      complex3.ONE.sin();
      complex0.readResolve();
      Complex complex4 = complex3.add(complex0);
      complex4.tanh();
      complex1.tan();
      complex2.conjugate();
      complex3.multiply((-821.547348512));
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-133.051266073125));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.sqrt1z();
      complex0.nthRoot(1);
      complex0.add((-86.0));
      complex1.getField();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = Complex.valueOf(2342.7);
      complex0.ONE.acos();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.subtract(complex4);
      complex4.sqrt();
      complex5.ONE.multiply(17);
      complex1.ZERO.reciprocal();
      complex4.ZERO.nthRoot(1386);
      complex4.tanh();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-133.051266073125));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.add(complex3);
      complex2.equals(complex3);
      Complex complex5 = Complex.NaN;
      complex0.sqrt1z();
      Complex complex6 = new Complex((-133.051266073125));
      complex6.nthRoot(1305);
      complex4.add(6.753452542942992E-9);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2478.0746962), 2342.7);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.tanh();
      Complex complex4 = new Complex(Double.NaN, (-8.798780160176658));
      complex0.readResolve();
      Complex complex5 = complex4.add(complex1);
      complex5.tanh();
      complex5.tan();
      complex1.conjugate();
      complex0.multiply(Double.NaN);
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = Complex.valueOf(2342.7);
      complex0.equals(complex1);
      complex0.abs();
      Complex complex2 = complex1.createComplex(991.28023627517, (-4126.882851));
      complex2.ZERO.add(complex1);
      complex1.cos();
      Complex complex3 = Complex.ONE;
      complex3.pow(complex2);
      complex1.reciprocal();
      complex2.isNaN();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = 2101.7722;
      Complex complex0 = Complex.valueOf(2101.7722);
      Complex complex1 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
      complex2.I.acos();
      Complex complex3 = new Complex(0.0, 2342.7);
      Complex complex4 = complex3.add(complex0);
      complex1.tan();
      Complex complex5 = complex3.divide(complex0);
      complex4.conjugate();
      complex5.reciprocal();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 2342.7;
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = complex0.acos();
      complex1.tanh();
      double double1 = 0.0;
      Complex complex2 = new Complex(0.0, 2342.7);
      Complex complex3 = complex2.add(complex0);
      complex1.tan();
      Complex complex4 = complex3.pow(complex1);
      complex4.I.asin();
      Complex complex5 = null;
      complex0.exp();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.toString();
      complex0.ONE.conjugate();
      complex0.I.sqrt();
      complex0.pow((-3469.932));
      Complex complex1 = complex0.subtract((-3469.932));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.reciprocal();
      complex1.readResolve();
      complex3.createComplex((-3469.932), 1894.723);
      Complex complex4 = complex2.tan();
      complex0.conjugate();
      complex0.multiply(1071);
      complex4.pow(complex2);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = Complex.valueOf(2342.7);
      complex0.ONE.acos();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.add(complex2);
      complex4.equals(complex3);
      complex4.abs();
      Complex complex5 = complex4.tanh();
      complex3.pow(complex1);
      complex5.nthRoot(547);
      Complex complex6 = new Complex(2342.7);
      complex1.multiply((-43));
      Complex complex7 = Complex.ZERO;
      complex7.reciprocal();
      try { 
        complex1.nthRoot((-43));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -43
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0, (-4423.711592922645));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.negate();
      complex3.ZERO.nthRoot(558);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex1.tanh();
      complex4.sinh();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex5.createComplex(2814.275466684104, 94.593156966552);
      Complex complex9 = Complex.INF;
      complex6.readResolve();
      complex1.nthRoot(7);
      complex7.add((-4423.711592922645));
      complex8.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt1z();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(886.924);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex.valueOf(886.924);
      complex0.divide(complex2);
      Complex complex3 = Complex.I;
      Complex.valueOf(886.924);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex4.NaN.getField();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex0.asin();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.conjugate();
      complex2.multiply(2.0582268590356215E-7);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.createComplex(1789.0203, (-8025.168518423825));
      complex2.NaN.hashCode();
      Complex complex3 = complex1.ONE.pow(1789.0203);
      complex1.ZERO.nthRoot(5);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex4.multiply(complex0);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.add(1789.0203);
      Complex complex9 = complex7.I.negate();
      complex9.I.subtract(Double.NaN);
      complex6.exp();
      Complex complex10 = complex6.subtract((-8025.168518423825));
      complex10.ONE.conjugate();
      complex6.ZERO.getArgument();
      complex10.I.toString();
      complex3.multiply((-1441.5674));
      complex8.toString();
      Complex.valueOf((-1441.5674));
      complex5.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 2342.7;
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = complex0.acos();
      complex1.tanh();
      double double1 = 0.0;
      Complex complex2 = new Complex(0.0, 2342.7);
      Complex complex3 = complex2.add(complex0);
      complex1.tan();
      complex3.pow(complex1);
      Complex complex4 = null;
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2802.9);
      complex0.ONE.add((-1004.434394253));
      complex0.sqrt1z();
      complex0.nthRoot(1);
      complex0.add(2802.9);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((double) 286);
      Complex complex2 = complex0.subtract((double) 286);
      Object object0 = new Object();
      Complex complex3 = Complex.ZERO;
      complex3.getArgument();
      Object object1 = complex2.readResolve();
      complex1.equals(object1);
      Complex complex4 = complex3.sqrt1z();
      complex0.log();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = Complex.ONE;
      complex7.sinh();
      complex5.add(0.0);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex6.add(complex8);
      complex8.NaN.asin();
      Complex complex10 = Complex.NaN;
      complex10.atan();
      complex4.tanh();
      complex8.divide(0.0);
      complex0.log();
      complex7.isInfinite();
      complex1.readResolve();
      complex7.nthRoot(1201);
      Complex complex11 = new Complex(286);
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-3443.0), (-0.9999997454255973));
      Complex complex2 = complex1.tan();
      complex1.acos();
      complex2.negate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.sinh();
      complex0.sqrt1z();
      complex5.createComplex((-3443.0), 94.593156966552);
      Complex complex6 = Complex.INF;
      complex6.readResolve();
      complex3.nthRoot(917);
      complex6.add((-3443.0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-3443.0), (-0.9999997454255973));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.tanh();
      complex6.sinh();
      complex0.sqrt1z();
      Complex complex7 = complex3.pow((-943.41897054376));
      Complex complex8 = complex5.cosh();
      Complex complex9 = Complex.ONE;
      complex9.pow((-1118.8961031));
      complex1.equals(complex8);
      complex7.abs();
      complex6.tanh();
      complex7.pow(complex4);
      try { 
        complex3.nthRoot((-1484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,484
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-133.051266073125));
      Complex.valueOf((-105.9));
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(886.924);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex.valueOf(886.924);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.INF.subtract(complex4);
      complex3.conjugate();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.850385787215544E-8);
      complex0.equals((Object) null);
      complex1.abs();
      complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.pow(2.850385787215544E-8);
      complex3.cosh();
      Complex.valueOf(2.850385787215544E-8);
      Complex complex4 = Complex.NaN;
      complex2.equals(complex4);
      complex1.abs();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.tanh();
      int int0 = (-1484);
      complex4.pow(complex1);
      try { 
        complex6.nthRoot((-1484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,484
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex0.nthRoot(37);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.valueOf(2070.735712231078, 2.0);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = Complex.I;
      complex6.nthRoot(282);
      complex1.multiply(complex3);
      complex5.getField();
      Complex complex7 = complex0.negate();
      Complex complex8 = Complex.valueOf(1443.2104780383686);
      complex5.isNaN();
      complex4.hashCode();
      complex5.add(complex7);
      Complex complex9 = complex8.atan();
      Complex complex10 = Complex.NaN;
      complex10.pow(complex9);
      complex6.hashCode();
      complex3.nthRoot(282);
      complex4.hashCode();
      Complex complex11 = new Complex((-2134.0538083006427), 1443.2104780383686);
      Complex complex12 = complex0.multiply(complex11);
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-4126.882851));
      Complex complex1 = Complex.valueOf((-2232.333915989), 6.283185307179586);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = Complex.valueOf(2342.7);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex3.subtract(complex5);
      Complex complex7 = complex6.ONE.multiply(17);
      complex1.ZERO.reciprocal();
      complex7.atan();
      complex1.readResolve();
      complex4.tanh();
      complex4.sqrt();
      complex2.cosh();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.5811457633972168, 0.5811457633972168);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = new Complex((-14.71097347628296), 0.5811457633972168);
      complex0.I.add(complex4);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex2.pow(complex6);
      complex8.INF.multiply(complex0);
      Complex complex9 = complex8.INF.multiply(complex4);
      Complex complex10 = complex9.pow(0.0);
      complex10.NaN.tanh();
      Complex complex11 = new Complex(0.5811457633972168);
      Complex complex12 = complex7.pow((-14.71097347628296));
      complex12.I.cosh();
      complex12.NaN.pow(0.5811457633972168);
      complex1.equals(complex8);
      complex2.abs();
      complex6.tanh();
      int int0 = (-1484);
      complex9.pow(complex5);
      try { 
        complex7.nthRoot((-1484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,484
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((double) 286);
      complex1.exp();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.I.tan();
      complex0.ONE.nthRoot(286);
      complex1.ZERO.asin();
      complex0.conjugate();
      Complex complex4 = Complex.valueOf((-2.4467928392518484E-293), 1443.2104780383686);
      complex4.getField();
      Complex.valueOf((-2.4467928392518484E-293));
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf((-2.4467928392518484E-293));
      complex5.asin();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2802.9);
      complex0.multiply(1);
      Complex complex1 = complex0.divide(2802.9);
      Complex complex2 = new Complex((-1.0));
      complex0.ONE.reciprocal();
      complex2.asin();
      complex1.conjugate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(207.92706941, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.tan();
      complex1.I.acos();
      Complex complex2 = complex0.NaN.negate();
      complex2.NaN.sqrt();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.ZERO.createComplex(6.283185307179586, 207.92706941);
      complex0.INF.readResolve();
      complex4.equals(complex3);
      complex0.getImaginary();
      complex6.sqrt();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.asin();
      complex6.divide(39.19364547);
      Complex complex8 = Complex.INF;
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, 2342.7);
      Complex complex1 = Complex.valueOf(2342.7);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.ZERO.log();
      complex0.sin();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex0.subtract(complex4);
      complex2.exp();
      complex5.sqrt();
      complex6.nthRoot(1809419434);
      Complex complex7 = Complex.I;
      complex7.atan();
      complex6.readResolve();
      Complex complex8 = new Complex(2342.7, 1386);
      complex8.sqrt();
      complex3.cosh();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2167.713));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.atan();
      Complex.valueOf(947.31, 1.4522218089041417E-4);
      Complex complex4 = complex3.NaN.pow(0.0);
      complex4.ONE.subtract(0.0);
      Complex complex5 = (Complex)complex0.readResolve();
      complex0.isInfinite();
      complex2.INF.sqrt1z();
      Complex complex6 = complex5.negate();
      Complex complex7 = Complex.I;
      complex0.createComplex(1.0261880234452292E-10, 1.4522218089041417E-4);
      complex7.multiply(1621);
      complex2.readResolve();
      complex6.abs();
      complex5.reciprocal();
      Complex.valueOf(3.9335373658569176E-259, 567.1168565);
      Complex complex8 = Complex.NaN;
      complex8.exp();
      Complex complex9 = new Complex(2167.713, (-2167.713));
      complex9.sqrt1z();
      complex2.subtract(complex0);
      complex9.tanh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-897.13458985), (-897.13458985));
      Complex complex1 = Complex.valueOf((-20.0), 1197.07506311483);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.I.divide((-20.0));
      complex3.NaN.exp();
      Complex complex4 = complex1.acos();
      complex4.INF.exp();
      Complex complex5 = Complex.NaN;
      complex5.isNaN();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = Complex.valueOf(0.0020154178229673846);
      complex8.pow(complex9);
      complex2.divide(complex1);
      Complex complex10 = complex6.atan();
      complex8.readResolve();
      complex10.log();
      Complex complex11 = complex7.createComplex((-5.598276199126451E264), Double.NaN);
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.tanh();
      Object object0 = new Object();
      complex11.equals(object0);
      complex1.getImaginary();
      complex13.sqrt();
      complex6.sin();
      complex7.asin();
      complex6.divide((-5.598276199126451E264));
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2167.713));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.NaN.pow(0.0);
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex5 = complex2.INF.sqrt1z();
      Complex complex6 = complex0.acos();
      complex2.isNaN();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.ONE.add(complex8);
      complex1.pow(complex2);
      complex6.ONE.divide(complex2);
      complex5.ZERO.atan();
      complex7.ONE.readResolve();
      Complex complex10 = complex8.NaN.log();
      Complex complex11 = complex10.I.createComplex(0.0, (-5.598276199126451E264));
      complex11.I.pow(complex5);
      Complex complex12 = complex4.I.tanh();
      complex1.equals(complex7);
      complex5.getImaginary();
      Complex complex13 = complex12.pow(complex6);
      complex1.hashCode();
      Complex complex14 = Complex.valueOf((-1547.41737948643), 824.0);
      complex14.nthRoot(485);
      complex4.hashCode();
      complex9.multiply(complex14);
      complex14.getReal();
      complex13.createComplex((-1547.41737948643), (-280.36552179));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(286);
      complex0.subtract((double) 286);
      Complex complex1 = complex0.exp();
      complex0.reciprocal();
      complex1.tan();
      complex1.nthRoot(1488);
      complex1.asin();
      Complex complex2 = Complex.INF;
      complex2.conjugate();
      Complex.valueOf((double) 1488, 1443.2104780383686);
      complex0.sqrt();
      try { 
        complex0.nthRoot((-719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -719
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-3443.0), (-0.9999997454255973));
      Complex complex2 = complex1.tan();
      complex1.acos();
      complex2.negate();
      complex0.sqrt();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.sinh();
      complex0.sqrt1z();
      Complex complex5 = complex4.createComplex((-3443.0), 94.593156966552);
      Complex complex6 = Complex.INF;
      complex6.readResolve();
      complex6.getArgument();
      complex5.isNaN();
      Complex complex7 = Complex.INF;
      complex7.sqrt1z();
      complex6.cosh();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(349.73569, 2682.6402331741);
      complex0.equals((Object) null);
      Complex complex1 = new Complex(349.73569);
      complex1.abs();
      Complex complex2 = complex1.createComplex(349.73569, 1469.19667061249);
      complex2.cos();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = Complex.ONE;
      complex4.reciprocal();
      complex3.isNaN();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2167.713));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.atan();
      complex3.NaN.pow(0.0);
      complex0.readResolve();
      complex0.isInfinite();
      complex2.INF.sqrt1z();
      complex0.acos();
      complex2.isNaN();
      complex2.sqrt1z();
      Complex complex4 = new Complex((-2167.713), (-1167.735));
      complex4.sqrt1z();
      Complex complex5 = Complex.valueOf((-2167.713), 2295.841);
      // Undeclared exception!
      complex5.nthRoot(2116658277);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2802.9);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add(complex1);
      complex0.pow(complex3);
      Complex complex4 = complex1.divide(complex0);
      complex0.atan();
      complex3.readResolve();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.createComplex(0.0, 782.0);
      Complex complex7 = complex4.tanh();
      Object object0 = complex7.readResolve();
      complex4.equals(object0);
      complex0.getImaginary();
      complex5.sqrt();
      complex2.sin();
      Complex complex8 = Complex.ONE;
      complex6.divide(20.0);
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2167.713));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.NaN.pow(0.0);
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex5 = complex2.INF.sqrt1z();
      Complex complex6 = complex0.acos();
      complex4.ZERO.subtract(complex6);
      complex2.isNaN();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = Complex.INF;
      complex5.ONE.add(complex8);
      complex1.pow(complex2);
      complex6.ONE.divide(complex2);
      complex5.ZERO.atan();
      complex7.ONE.readResolve();
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex9.I.createComplex(0.0, (-5.598276199126451E264));
      Complex complex11 = complex4.I.tanh();
      complex1.equals(complex7);
      complex5.getImaginary();
      complex4.sqrt();
      complex11.sin();
      complex10.asin();
      complex6.divide((-2167.713));
      complex3.sin();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = Complex.valueOf(2342.7);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.add(complex3);
      complex3.subtract(complex5);
      complex1.hashCode();
      complex2.add(complex4);
      Complex complex6 = complex1.atan();
      complex4.pow(complex2);
      complex6.hashCode();
      complex1.nthRoot(10);
      complex2.hashCode();
      Complex complex7 = Complex.ZERO;
      complex7.multiply(complex5);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((double) 286);
      complex1.exp();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.I.tan();
      complex0.ONE.nthRoot(286);
      complex1.ZERO.asin();
      Complex complex4 = complex0.conjugate();
      Complex.valueOf((-2.4467928392518484E-293), 1443.2104780383686);
      Complex complex5 = complex0.ZERO.sqrt();
      complex5.nthRoot(286);
      Complex complex6 = complex1.multiply(complex4);
      complex6.I.getField();
      Complex complex7 = complex6.negate();
      Complex complex8 = Complex.valueOf(475.72203454714);
      complex8.ZERO.log();
      complex6.isNaN();
      complex7.hashCode();
      Complex complex9 = complex5.add(complex4);
      complex3.nthRoot(17);
      complex9.add(1443.2104780383686);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((double) 286);
      complex1.exp();
      Complex complex2 = complex0.I.reciprocal();
      complex2.I.tan();
      complex0.ONE.nthRoot(286);
      Complex complex3 = complex1.ZERO.asin();
      complex0.conjugate();
      Complex.valueOf((-2.4467928392518484E-293), 1443.2104780383686);
      complex3.getField();
      Complex complex4 = new Complex(2.0, 286);
      complex4.multiply(286);
      Complex complex5 = complex1.divide(349.73569);
      Complex complex6 = complex0.asin();
      complex6.conjugate();
      complex0.createComplex(349.73569, 2.0);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2342.7, (-4126.882851));
      Complex complex1 = Complex.valueOf(2342.7);
      complex0.ONE.acos();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.subtract(complex4);
      complex5.ONE.multiply(17);
      complex1.ZERO.reciprocal();
      complex4.ZERO.nthRoot(1386);
      complex4.tanh();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((double) 286);
      complex1.exp();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.I.tan();
      complex0.ONE.nthRoot(286);
      complex1.ZERO.asin();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.valueOf((-2.4467928392518484E-293), 1443.2104780383686);
      Complex complex6 = complex0.ZERO.sqrt();
      complex6.nthRoot(286);
      Complex complex7 = complex1.multiply(complex4);
      complex7.I.getField();
      Complex complex8 = complex7.negate();
      Complex.valueOf(475.72203454714);
      complex7.isNaN();
      complex8.hashCode();
      Complex complex9 = complex6.add(complex4);
      Complex complex10 = complex9.atan();
      complex10.pow(complex6);
      complex10.hashCode();
      complex4.nthRoot(286);
      complex7.hashCode();
      complex3.multiply(complex6);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(3795.1973, 2668.76524726387);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = Complex.valueOf(3795.1973, 3795.1973);
      Complex complex5 = complex4.I.multiply(complex1);
      complex5.I.conjugate();
      Complex complex6 = complex2.NaN.subtract((-1509.693591169));
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex1.add(complex6);
      complex0.NaN.readResolve();
      complex1.ONE.asin();
      Complex complex9 = complex2.tan();
      complex7.getField();
      complex2.ZERO.cos();
      complex8.I.log();
      Complex complex10 = complex3.subtract((-1509.693591169));
      Complex complex11 = Complex.I;
      complex4.INF.multiply(complex11);
      complex10.multiply(complex1);
      complex8.add(complex9);
      Complex complex12 = complex4.sin();
      complex12.getField();
      complex10.equals("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.297776915751238E-8);
      Complex.valueOf((-2122.97503));
      Complex complex1 = new Complex((-228.7331));
      complex1.NaN.hashCode();
      Complex complex2 = Complex.valueOf((-1397.6105671238768));
      complex2.INF.log();
      complex0.subtract(complex2);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex1.negate();
      complex3.NaN.getArgument();
      complex0.sqrt1z();
      complex5.isNaN();
      complex6.conjugate();
      Complex complex7 = Complex.valueOf(0.0, Double.NaN);
      complex7.ZERO.multiply(complex1);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(486.835464358, (-1.0));
      complex0.ZERO.sqrt();
      complex0.INF.negate();
      Complex complex1 = new Complex(486.835464358);
      complex1.INF.nthRoot(2273);
      Complex complex2 = Complex.valueOf((double) 2273, (-3.295268490032475E179));
      Complex complex3 = complex0.add(complex1);
      complex1.reciprocal();
      complex3.ONE.cos();
      complex0.equals(complex3);
      complex0.subtract(0.0);
      complex2.isInfinite();
      Complex.valueOf(486.835464358, 0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 2.0862154960632324);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(207.92706941, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.tan();
      complex1.I.acos();
      Complex complex2 = complex0.NaN.negate();
      complex2.NaN.sqrt();
      complex2.NaN.tanh();
      complex0.I.sinh();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.ZERO.createComplex(6.283185307179586, 207.92706941);
      complex0.INF.readResolve();
      complex0.getArgument();
      complex0.isNaN();
      Complex complex4 = complex0.sqrt1z();
      complex4.cosh();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(1385.4081394700725, 992.346030366247);
      Complex complex1 = Complex.ONE;
      complex1.ZERO.atan();
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.cosh();
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = null;
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, (-652.80656487));
      Complex complex1 = complex0.I.reciprocal();
      complex0.ONE.sqrt();
      int int0 = (-1615);
      complex1.ZERO.asin();
      try { 
        complex0.nthRoot((-1615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,615
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1001.0);
      complex0.ZERO.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.negate();
      complex0.abs();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.multiply(0);
      complex0.NaN.acos();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex5.ONE.atan();
      complex6.I.multiply(complex0);
      complex6.NaN.sin();
      complex0.sqrt1z();
      complex2.acos();
      complex0.NaN.sqrt();
      complex4.getField();
      complex2.subtract(complex5);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.tan();
      complex1.subtract(complex0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.NaN.negate();
      complex4.getField();
      Complex complex5 = complex0.NaN.subtract(complex3);
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex3.ONE.add(0.0);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex8.ZERO.multiply(993);
      complex9.I.readResolve();
      complex1.INF.atan();
      Complex complex10 = complex8.add(0.0);
      complex10.ZERO.asin();
      complex0.getField();
      complex10.getField();
      Complex complex11 = Complex.valueOf(0.0);
      complex11.getField();
      complex6.pow(complex8);
      Complex complex12 = Complex.I;
      complex1.multiply(complex12);
      complex6.sinh();
      complex7.toString();
      complex10.sinh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ZERO.reciprocal();
      complex3.hashCode();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex1.ZERO.add(complex0);
      complex2.ZERO.readResolve();
      complex0.getArgument();
      Complex.valueOf((-38.2416380396321));
      complex1.ZERO.conjugate();
      complex2.getReal();
      complex5.isInfinite();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.asin();
      complex6.getImaginary();
      Complex complex9 = complex0.NaN.sqrt();
      complex9.add(complex3);
      complex1.ONE.tanh();
      Complex.valueOf(0.0, Double.NEGATIVE_INFINITY);
      complex0.nthRoot(1078);
      complex8.getArgument();
      complex3.ONE.getField();
      Complex complex10 = complex5.divide((double) 1078);
      complex10.ZERO.subtract(complex4);
      Complex complex11 = complex3.reciprocal();
      complex11.toString();
      complex7.ZERO.sin();
      complex1.log();
      complex7.multiply((double) 1078);
      complex5.cosh();
      Complex complex12 = complex6.log();
      complex12.conjugate();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2208.2510245));
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.INF.add((-2465.0961902011));
      complex3.tan();
      complex0.NaN.add((-4737.992173));
      complex2.I.subtract((-2465.0961902011));
      complex1.ONE.getArgument();
      Complex complex4 = complex1.ZERO.subtract(complex0);
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.log();
      complex6.ONE.multiply((-2465.0961902011));
      complex2.readResolve();
      Complex complex7 = complex0.sqrt();
      complex7.NaN.cos();
      complex0.toString();
      complex2.sin();
      complex1.tan();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.conjugate();
      complex4.sinh();
      complex0.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.subtract((-1.0));
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex3.ZERO.conjugate();
      complex2.tan();
      complex3.I.tanh();
      complex2.createComplex(0.0, 0.0);
      Complex complex5 = complex0.INF.pow(complex4);
      complex5.INF.conjugate();
      Complex complex6 = complex2.add(629.4382);
      complex6.I.getArgument();
      Complex complex7 = complex1.sin();
      complex7.toString();
      complex1.ONE.divide(7.070450309820548E-99);
      complex5.multiply(1429);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4097.165069143), (-4097.165069143));
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(0.0, (-4097.165069143));
      complex0.INF.getArgument();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.negate();
      complex3.multiply(0.0);
      complex0.ZERO.subtract(complex3);
      complex0.getField();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.add(0.0);
      complex1.NaN.acos();
      Complex complex5 = complex2.divide(3709.5);
      complex0.isNaN();
      complex0.NaN.sqrt1z();
      complex4.createComplex(3709.5, 3709.5);
      complex0.ZERO.readResolve();
      Complex.valueOf(3709.5, 0.0);
      complex1.tanh();
      Complex complex6 = complex5.sin();
      complex6.exp();
      complex1.abs();
      Complex complex7 = complex0.I.conjugate();
      complex7.I.createComplex(3709.5, 524.956);
      complex5.multiply(1);
      complex3.sinh();
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2167.713));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.NaN.pow(0.0);
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex5 = complex2.INF.sqrt1z();
      Complex complex6 = complex0.acos();
      complex2.isNaN();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = Complex.INF;
      complex5.ONE.add(complex8);
      complex1.pow(complex2);
      complex6.ONE.divide(complex2);
      complex5.ZERO.atan();
      complex7.ONE.readResolve();
      Complex complex9 = complex8.NaN.log();
      complex9.I.createComplex(0.0, (-5.598276199126451E264));
      Complex complex10 = complex4.I.tanh();
      complex1.equals(complex7);
      complex5.getImaginary();
      complex4.sqrt();
      complex10.sin();
      complex6.asin();
      complex10.divide(535.01988584);
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2802.9);
      complex0.sqrt1z();
      complex0.nthRoot(1);
      complex0.add(2802.9);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.0);
      complex1.ZERO.subtract(1.0);
      Complex complex2 = Complex.valueOf(1.0);
      complex2.ZERO.getField();
      Complex complex3 = complex1.multiply((-967));
      complex3.NaN.divide(0.0);
      complex2.asin();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(5.7455368446308694E197, 0.0);
      Complex complex2 = complex1.ONE.sqrt();
      complex2.ZERO.cosh();
      Complex complex3 = complex0.pow(complex1);
      complex1.tanh();
      Complex complex4 = complex3.divide(complex1);
      complex4.multiply(1.0);
      complex1.acos();
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = complex5.INF.tanh();
      try { 
        complex6.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.getArgument();
      complex1.add(1.0);
      Complex complex3 = complex0.negate();
      complex1.exp();
      complex3.asin();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-1.0));
      try { 
        complex1.ZERO.nthRoot((-1944));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,944
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-897.13458985), (-897.13458985));
      Complex complex1 = Complex.valueOf((-20.0), 1197.07506311483);
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.I.divide((-20.0));
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.multiply((-1449));
      complex4.NaN.readResolve();
      complex0.abs();
      complex4.reciprocal();
      Complex complex5 = Complex.valueOf(3.9335373658569176E-259, (double) (-1449));
      complex5.exp();
      complex5.sqrt1z();
      complex3.subtract(complex0);
      complex0.tanh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(891.60375417, 891.60375417);
      Complex complex1 = complex0.ZERO.atan();
      complex1.INF.add(0.0);
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.divide(891.60375417);
      complex3.ONE.getField();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex6.INF.sin();
      Complex complex7 = complex0.ONE.conjugate();
      complex4.INF.nthRoot(464);
      Complex complex8 = Complex.valueOf(422.1195183556707, 0.0);
      Complex complex9 = complex4.ZERO.reciprocal();
      complex9.ZERO.multiply(0.0);
      complex0.reciprocal();
      Complex.valueOf(891.60375417);
      Complex complex10 = complex3.tan();
      complex10.INF.nthRoot(1022);
      Complex.valueOf(0.0, (double) 464);
      Complex complex11 = complex2.asin();
      complex4.getImaginary();
      complex1.readResolve();
      complex8.reciprocal();
      complex7.isNaN();
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.conjugate();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.44321345601866E-11));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.subtract((-76.3257072));
      Object object0 = new Object();
      complex0.I.getArgument();
      complex0.equals(object0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.log();
      Complex.valueOf(0.0);
      complex4.ZERO.reciprocal();
      Complex complex5 = complex1.sinh();
      complex5.NaN.add(0.0);
      Complex complex6 = complex3.add(complex1);
      complex6.atan();
      complex2.tanh();
      Complex complex7 = complex5.divide((-1119.740442));
      complex3.log();
      complex6.isInfinite();
      complex7.readResolve();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = (-2031.27638);
      double double1 = 2060.12267926091;
      Complex complex0 = Complex.valueOf((-2031.27638), 2060.12267926091);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.subtract(2060.12267926091);
      complex2.INF.divide(complex0);
      complex0.NaN.cos();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(958.0, 958.0);
      Complex complex2 = complex1.NaN.multiply((-120.11306));
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.NaN.subtract(complex1);
      complex4.sinh();
      Complex complex5 = complex0.NaN.add(complex1);
      complex3.INF.cos();
      complex5.NaN.hashCode();
      complex0.INF.tanh();
      complex0.sin();
      Complex complex6 = complex0.multiply(958.0);
      Complex complex7 = complex6.ONE.sqrt();
      complex6.getField();
      complex3.pow(complex7);
      Complex complex8 = Complex.valueOf(958.0);
      complex8.ZERO.getField();
      complex6.isNaN();
      complex1.hashCode();
      Complex complex9 = complex6.cosh();
      complex0.readResolve();
      complex2.getReal();
      complex1.I.subtract((-120.11306));
      Complex complex10 = complex2.sqrt();
      complex10.add(489.318534408);
      complex9.toString();
      complex4.createComplex(742.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex0.getField();
      Complex complex2 = complex1.sinh();
      complex2.divide(complex1);
      Complex complex3 = complex0.add(0.0);
      complex3.I.toString();
      Complex complex4 = complex3.ONE.sinh();
      complex3.I.readResolve();
      Complex complex5 = complex4.add(0.0);
      complex5.hashCode();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.ZERO.reciprocal();
      complex7.INF.subtract(0.0);
      complex7.ZERO.pow(0.0);
      complex1.sinh();
      Complex complex8 = complex3.createComplex(1299.859, 1.812535285949707);
      Complex complex9 = complex0.subtract(2783.03571);
      complex9.ZERO.divide(1.812535285949707);
      Complex complex10 = complex3.divide(complex1);
      Complex complex11 = complex8.ONE.multiply(complex2);
      complex8.nthRoot(2375);
      complex8.atan();
      complex10.ZERO.multiply(2783.03571);
      complex9.getReal();
      complex3.readResolve();
      complex10.reciprocal();
      complex4.multiply(948);
      complex5.exp();
      complex11.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.ZERO.sqrt();
      complex0.asin();
      complex3.multiply((-3036));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-133.051266073125));
      Complex complex1 = Complex.valueOf(0.0);
      complex0.INF.divide(complex1);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3.5702693195009266E204);
      Complex complex1 = complex0.createComplex(1.6903781197123503E-8, (-3131.022340369));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.pow((-2259.784079));
      complex1.ZERO.getField();
      Complex complex4 = complex2.NaN.multiply(1);
      Complex complex5 = complex4.ZERO.add(complex2);
      complex0.multiply(0);
      complex0.readResolve();
      Complex complex6 = complex1.log();
      Complex.valueOf(0.0);
      Complex complex7 = complex1.ONE.sin();
      complex1.NaN.sqrt();
      complex7.INF.add(complex3);
      complex7.NaN.cosh();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex2.I.log();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = complex10.atan();
      complex6.readResolve();
      complex0.getField();
      Complex complex12 = complex8.cosh();
      complex2.log();
      complex1.tan();
      complex5.abs();
      complex9.subtract(complex12);
      complex10.reciprocal();
      complex8.cosh();
      Complex complex13 = Complex.NaN;
      complex11.add(complex13);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.850385787215544E-8, 2.850385787215544E-8);
      complex0.equals((Object) null);
      complex1.abs();
      complex1.INF.createComplex(0.0, 991.28023627517);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.pow(complex1);
      complex3.INF.reciprocal();
      complex2.isNaN();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3564604642699844E-8);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.5811457633972168, 0.5811457633972168);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = new Complex(0.0, 0.0);
      complex0.I.add(complex4);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex2.pow(complex6);
      complex8.INF.multiply(complex0);
      Complex complex9 = complex8.INF.multiply(complex4);
      Complex complex10 = complex9.pow(0.0);
      complex10.NaN.tanh();
      complex10.sqrt1z();
      Complex complex11 = complex7.pow(0.0);
      complex11.I.cosh();
      complex11.NaN.pow(0.5811457633972168);
      complex1.equals(complex8);
      complex2.abs();
      complex6.tanh();
      int int0 = (-1484);
      complex1.INF.pow(complex5);
      try { 
        complex7.nthRoot((-1484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,484
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-1310.0));
      Complex complex1 = Complex.valueOf((-1310.0));
      Complex complex2 = complex1.ONE.multiply(1.0);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex3.ONE.divide((-1310.0));
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = complex4.ONE.reciprocal();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.NaN.pow(complex7);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      
      Complex complex9 = complex0.divide(1.0);
      Complex complex10 = complex9.ZERO.pow(complex1);
      assertTrue(complex10.equals((Object)complex8));
      assertNotSame(complex10, complex8);
      
      Complex complex11 = Complex.valueOf((-1310.0), 0.0);
      Complex complex12 = complex11.I.cosh();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex13.subtract(1587.124);
      complex14.I.conjugate();
      Complex complex15 = complex2.divide(1768.0658);
      Complex complex16 = complex13.divide((-1310.0));
      complex14.getImaginary();
      assertEquals((-1586.124), complex14.getReal(), 0.01);
      
      Complex complex17 = complex15.log();
      assertEquals((-7.477641459699616), complex17.getReal(), 0.01);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      
      complex13.getField();
      double double0 = complex16.abs();
      assertEquals(1.00000029135827, double0, 0.01);
      
      Complex complex18 = complex1.exp();
      assertTrue(complex18.equals((Object)complex5));
      assertEquals(0.0, complex18.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-2037.06786), (-2037.06786));
      assertEquals((-2037.06786), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2037.06786), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.subtract(complex0);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertSame(complex3, complex1);
      
      Complex complex4 = complex0.tan();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-1842.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.pow((-2879.284830378591));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.INF.subtract(complex2);
      Complex complex5 = complex3.NaN.cosh();
      complex4.ONE.abs();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex3.I.sinh();
      Complex complex7 = complex6.pow(complex5);
      Complex.valueOf((-1842.0), (-2879.284830378591));
      Complex complex8 = complex3.subtract(complex1);
      Complex complex9 = complex1.asin();
      Complex complex10 = complex0.INF.multiply(0);
      assertTrue(complex10.isInfinite());
      
      complex1.getImaginary();
      Complex complex11 = complex8.sqrt();
      assertEquals(42.91852746774987, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex4.sin();
      assertSame(complex4, complex5);
      assertSame(complex12, complex7);
      assertNotSame(complex4, complex2);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      
      complex1.INF.hashCode();
      Complex complex13 = complex9.sqrt1z();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex14 = complex8.exp();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
  }
}
