/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:46:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1182.33, (-20.0));
      complex1.sqrt1z();
      Complex complex2 = complex1.cos();
      complex1.tan();
      Complex complex3 = complex1.sqrt();
      complex3.tan();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.INF.getField();
      Complex.valueOf(1.1752011936438014, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.tanh();
      complex0.readResolve();
      Complex complex4 = complex3.createComplex((-20.0), (-20.0));
      Complex complex5 = complex4.tanh();
      complex5.INF.readResolve();
      Complex complex6 = complex1.divide((-20.0));
      complex6.ZERO.asin();
      complex3.log();
      complex6.ONE.cos();
      complex1.cosh();
      complex6.ONE.negate();
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.add(complex7);
      complex8.subtract(Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex5.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1196.38331847659));
      Complex complex11 = complex1.multiply(2045222521);
      complex11.ZERO.divide(complex5);
      Complex complex12 = complex10.cosh();
      complex12.ZERO.sqrt();
      Complex complex13 = complex1.sqrt();
      complex13.INF.reciprocal();
      Complex.valueOf((-1196.38331847659), 594.0);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-7.340587186324432E-93));
      complex1.I.getArgument();
      Complex complex2 = complex0.exp();
      complex1.INF.subtract(complex0);
      Complex complex3 = complex2.I.sqrt();
      complex3.ONE.pow(complex0);
      complex2.sinh();
      Complex complex4 = complex1.I.multiply((-3093));
      complex4.log();
      Complex complex5 = complex2.ZERO.subtract(complex1);
      Complex complex6 = complex5.ONE.divide(complex2);
      Complex complex7 = complex0.sqrt();
      complex7.ONE.multiply(1.5707963267948966);
      complex7.NaN.sin();
      complex1.sqrt();
      Complex complex8 = complex5.atan();
      complex8.ONE.subtract((-1.0000000000000004));
      try { 
        complex6.nthRoot((-3093));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,093
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      complex2.I.subtract(8.48292035519895E-10);
      complex0.nthRoot(4998);
      // Undeclared exception!
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.multiply(2051);
      complex1.toString();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1256.7231));
      Complex complex1 = Complex.INF;
      complex0.NaN.toString();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = Complex.valueOf(8.122111458739431E85, (-542.0));
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.ZERO.subtract(2432.65191266883);
      Complex complex7 = complex6.ZERO.pow((-542.0));
      complex7.ZERO.pow(complex1);
      Complex complex8 = complex5.log();
      complex8.INF.subtract(complex3);
      complex0.multiply(complex4);
      Complex complex9 = complex4.acos();
      complex9.INF.sqrt1z();
      complex3.tan();
      complex4.asin();
      complex5.abs();
      complex1.multiply(2011);
      complex5.exp();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.getField();
      complex0.pow(complex1);
      Complex complex2 = new Complex((-18.611701814216175), Double.NaN);
      complex2.ZERO.abs();
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex3.ONE.add(6.283185307179586);
      Complex complex4 = Complex.NaN;
      complex3.NaN.subtract(complex4);
      Complex complex5 = Complex.valueOf(856.0, 856.0);
      complex0.pow(complex5);
      Complex complex6 = complex5.sinh();
      complex0.tanh();
      Complex complex7 = Complex.valueOf(20.0);
      complex7.NaN.toString();
      complex5.asin();
      Complex complex8 = complex2.add(complex0);
      complex6.add(856.0);
      complex8.sin();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.tanh();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1990.69766490973, 93.0);
      Complex complex1 = new Complex(2005.410936591669, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      complex2.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      complex3.I.abs();
      complex3.NaN.asin();
      Complex complex4 = complex0.INF.sinh();
      complex0.toString();
      complex3.INF.acos();
      Complex complex5 = complex0.acos();
      complex4.abs();
      Complex complex6 = complex0.ONE.cos();
      complex3.toString();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex4.cos();
      complex8.getField();
      complex1.acos();
      complex5.negate();
      complex4.log();
      complex4.sqrt();
      complex6.toString();
      complex3.exp();
      complex7.sqrt1z();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(489.78194038901887, 4.793444363780116E219);
      complex0.sqrt1z();
      Complex complex1 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.ZERO.reciprocal();
      Complex complex1 = Complex.I;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.add(complex0);
      Complex complex2 = complex0.NaN.divide(251.6529089878433);
      Complex complex3 = complex0.sinh();
      complex3.readResolve();
      complex3.INF.divide(Double.NaN);
      complex2.sinh();
      complex3.tanh();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.9689123630523682);
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.tan();
      Complex complex2 = Complex.valueOf((-2891.982572708), Double.NaN);
      complex2.divide((-872.902372077));
      Complex complex3 = new Complex((-2247.7751171681334));
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(49.26, 49.26);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.cosh();
      complex2.INF.pow(complex1);
      Complex.valueOf(49.26);
      Complex complex3 = Complex.valueOf((-3523.3326612), (-24.31131926));
      Complex complex4 = complex1.I.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.negate();
      complex5.ONE.sqrt1z();
      complex5.INF.asin();
      Complex complex6 = complex4.divide(Double.POSITIVE_INFINITY);
      complex6.INF.cos();
      Complex complex7 = complex6.NaN.cos();
      complex0.NaN.subtract(Double.POSITIVE_INFINITY);
      complex6.NaN.toString();
      complex1.NaN.divide(5.982188667985611E-5);
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex0.asin();
      complex8.ZERO.cosh();
      complex6.conjugate();
      complex8.tanh();
      complex7.abs();
      complex3.sin();
      complex9.subtract(5.982188667985611E-5);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract((-4251.0));
      Complex complex2 = Complex.I;
      complex1.multiply((-4251.0));
      complex1.INF.atan();
      complex0.isInfinite();
      complex1.tan();
      complex0.equals(complex2);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex2.ZERO.reciprocal();
      complex0.isInfinite();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.add(20.0);
      Complex complex2 = Complex.valueOf(20.0, 0.9689123630523682);
      complex2.abs();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.valueOf((-673.0), 20.023456024554697);
      Complex complex5 = complex4.cos();
      Complex complex6 = new Complex(0.5523349046707153);
      complex6.readResolve();
      Complex complex7 = complex2.conjugate();
      complex7.getField();
      complex1.toString();
      complex5.tan();
      complex3.getReal();
      complex6.tanh();
      complex5.asin();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.log();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 4179.07250833922);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.reciprocal();
      complex3.toString();
      complex6.add(3264.5125427792946);
      complex5.multiply(complex1);
      complex2.getImaginary();
      Complex complex7 = Complex.NaN;
      complex7.divide(14.188934426644945);
      complex6.readResolve();
      Complex complex8 = Complex.NaN;
      complex8.isInfinite();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex(1576.6, (-1227.1275721792));
      Complex complex4 = Complex.valueOf((-2211.60042));
      Complex complex5 = complex1.reciprocal();
      complex3.toString();
      Complex complex6 = new Complex(3021.6429125990903);
      complex0.multiply(complex1);
      complex5.getImaginary();
      complex4.divide((-2211.60042));
      complex5.readResolve();
      complex2.isInfinite();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.add(2324.7620157);
      Complex complex2 = Complex.valueOf(0.5403023058681398, 1.0393192744604331E9);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.multiply(Double.NaN);
      Complex complex7 = Complex.valueOf(2324.7620157);
      complex4.abs();
      Complex complex8 = complex6.cos();
      complex2.sin();
      complex7.tanh();
      complex4.NaN.hashCode();
      Complex complex9 = new Complex(1853.113303348998);
      Complex complex10 = complex8.multiply(complex2);
      complex6.abs();
      complex2.divide(complex1);
      complex2.cos();
      complex4.readResolve();
      complex2.getField();
      complex9.toString();
      complex1.tan();
      Complex complex11 = Complex.valueOf(1.7619339198071775, 2324.7620157);
      complex11.getReal();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2056.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      complex0.log();
      complex0.multiply(complex2);
      complex2.multiply((-2056.0));
      Complex.valueOf(3021.6429125990903, Double.POSITIVE_INFINITY);
      complex2.reciprocal();
      complex2.sqrt();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.toString();
      complex2.tanh();
      Complex complex3 = Complex.I;
      complex0.getField();
      Complex.valueOf(4227135.0, 3021.6429125990903);
      Complex complex4 = new Complex(3021.6429125990903, 1.557407724654902);
      complex1.cos();
      Complex complex5 = Complex.valueOf(3021.6429125990903);
      complex5.readResolve();
      Complex complex6 = Complex.NaN;
      complex5.getField();
      complex0.toString();
      complex2.tan();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.571477929711754E-270), 747.0226095);
      Complex complex1 = new Complex(1510.90936, 747.0226095);
      Complex complex2 = complex1.NaN.multiply((-8.571477929711754E-270));
      complex2.readResolve();
      Complex complex3 = complex0.pow(complex1);
      complex1.cosh();
      Complex complex4 = complex3.multiply((-8.571477929711754E-270));
      complex4.I.hashCode();
      Complex complex5 = complex3.divide(complex1);
      complex5.subtract(100.39833);
      complex5.createComplex(1510.90936, 747.0226095);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4179.07250833922);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.multiply(4179.07250833922);
      Complex complex5 = Complex.valueOf(1.0, 1.0);
      Complex complex6 = complex5.reciprocal();
      complex5.sqrt();
      Complex complex7 = Complex.valueOf(3021.6429125990903);
      complex2.toString();
      complex6.add(3021.6429125990903);
      complex6.multiply(complex7);
      complex4.getImaginary();
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.INF.multiply((-569));
      Complex complex9 = Complex.valueOf(2.0, (-2124.921));
      Complex complex10 = complex9.multiply(Double.NaN);
      complex10.readResolve();
      complex10.getField();
      complex6.multiply((-1238));
      complex5.sqrt();
      complex2.tan();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.multiply(7);
      complex0.sin();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4179.07250833922);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.add(1.0);
      Complex complex5 = Complex.valueOf(2467.1852275199, (-75.87));
      Complex complex6 = complex5.sqrt1z();
      complex3.getField();
      Complex.valueOf(293.60738, (-1596.264136));
      Complex complex7 = complex5.pow(38.75649452209473);
      Complex complex8 = complex7.sqrt();
      complex6.toString();
      complex5.tanh();
      Complex complex9 = complex5.sqrt();
      complex4.getField();
      Complex complex10 = Complex.I;
      complex10.sin();
      complex7.nthRoot(698);
      complex8.sqrt();
      complex5.exp();
      Complex complex11 = Complex.NaN;
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-224.5687387317));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.add(20.0);
      Complex complex4 = Complex.valueOf(20.0, 0.9689123630523682);
      complex0.divide(complex1);
      complex0.tanh();
      Complex complex5 = complex4.sqrt1z();
      complex3.multiply(1.7619339198071775);
      Complex complex6 = Complex.valueOf(40.340999226073265);
      complex3.abs();
      complex4.cos();
      complex0.sin();
      Complex complex7 = complex6.tanh();
      Complex complex8 = new Complex((-2241.91457627437));
      complex7.multiply(complex8);
      complex2.abs();
      Complex complex9 = complex0.divide(complex6);
      Complex complex10 = complex6.cos();
      complex9.readResolve();
      complex10.getField();
      complex8.toString();
      complex5.tan();
      complex6.getReal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(2.7985410605162997);
      complex0.divide(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply(2.7985410605162997);
      Complex complex4 = Complex.valueOf(1.000445000830153, (-2241.91457627437));
      complex3.reciprocal();
      Complex complex5 = complex3.sqrt();
      Complex.valueOf(2.7985410605162997);
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = Complex.valueOf((-2241.91457627437), 2.7985410605162997);
      Complex complex8 = complex7.multiply(complex4);
      complex8.pow(1.0);
      complex3.conjugate();
      Complex complex9 = complex5.tanh();
      complex5.tan();
      Complex complex10 = Complex.ONE;
      complex5.exp();
      Complex complex11 = Complex.NaN;
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.reciprocal();
      Complex.valueOf((-20.0), (-20.0));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.NaN;
      complex4.tanh();
      complex3.sqrt1z();
      Complex complex5 = complex2.multiply(257.9061419193413);
      Complex complex6 = Complex.valueOf(257.9061419193413);
      complex5.abs();
      complex5.cos();
      complex6.sin();
      complex0.tanh();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.getArgument();
      complex2.sqrt1z();
      Complex complex3 = complex2.I.multiply((-1.0568403170659571E-8));
      Complex complex4 = complex3.I.add((-1.0568403170659571E-8));
      complex4.ONE.sqrt1z();
      Complex complex5 = Complex.valueOf((-1.0568403170659571E-8), 0.0);
      Complex complex6 = complex4.ONE.pow(0.0);
      Complex complex7 = complex6.sqrt();
      complex7.INF.toString();
      Complex complex8 = complex5.ONE.tanh();
      complex8.divide(complex5);
      complex3.equals(complex0);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.cos();
      complex10.readResolve();
      Complex complex11 = complex0.atan();
      complex11.getField();
      complex9.toString();
      complex1.tan();
      complex1.getReal();
      complex6.tanh();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.ONE;
      complex0.readResolve();
      complex4.abs();
      complex3.exp();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-2056.0));
      complex0.tanh();
      Complex complex1 = new Complex((-2056.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.divide(complex2);
      complex0.tanh();
      Complex complex5 = complex4.sqrt1z();
      complex4.equals(complex2);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex2.exp();
      complex0.multiply(complex4);
      Complex complex8 = complex6.log();
      Complex complex9 = new Complex(0.7071067811865475);
      complex8.getField();
      complex8.pow(0.4986113866728328);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex5.pow(complex7);
      complex11.negate();
      complex11.sqrt();
      Complex complex12 = complex3.subtract(complex5);
      complex8.pow(complex10);
      Complex.valueOf((-2056.0));
      complex3.acos();
      complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2056.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.createComplex(0.004615629563649412, 1158.77224);
      Complex complex3 = complex0.subtract(1.1882454749452428E-7);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ZERO;
      complex5.add((-2056.0));
      complex0.getImaginary();
      complex2.cos();
      complex3.getField();
      Complex complex6 = new Complex(1158.77224);
      complex6.sin();
      complex4.nthRoot(698);
      complex5.sqrt();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.hashCode();
      complex5.reciprocal();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply((-224.5687387317));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.negate();
      Complex complex3 = new Complex(20.0, (-224.5687387317));
      complex2.divide(complex1);
      Complex complex4 = Complex.ZERO;
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4179.07250833922);
      Complex complex1 = complex0.sqrt();
      complex0.getArgument();
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sqrt1z();
      complex0.multiply(1.3007591433188233);
      Complex complex4 = complex2.cosh();
      complex1.add(1100.627047073205);
      complex1.sqrt1z();
      complex3.getField();
      Complex complex5 = Complex.valueOf(0.0, 1085.619);
      complex2.pow((-3.6897084415718804E137));
      complex3.sqrt();
      complex3.toString();
      complex0.tanh();
      complex5.sqrt();
      complex0.cos();
      complex4.getField();
      Complex complex6 = Complex.NaN;
      complex6.sin();
      complex4.nthRoot(698);
      complex0.sqrt();
      Complex complex7 = Complex.NaN;
      complex7.hashCode();
      complex3.reciprocal();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4179.07250833922);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.multiply(complex2);
      complex0.multiply(4179.07250833922);
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      complex3.divide(3614.418448433061);
      complex2.subtract(3614.418448433061);
      Complex complex5 = complex4.tanh();
      Complex complex6 = new Complex((-2655.768662), 854.811);
      complex4.pow(complex6);
      Complex complex7 = complex5.pow(complex2);
      Complex.valueOf(3021.6429125990903, 0.0);
      complex2.subtract(854.811);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.subtract(complex0);
      complex9.divide((-1195.9497975639897));
      complex7.getField();
      complex8.divide(4179.07250833922);
      Complex complex10 = complex9.sqrt1z();
      complex1.subtract(complex3);
      complex10.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.NaN.add(0.0);
      complex3.ZERO.nthRoot(1);
      complex1.equals(complex2);
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.multiply(complex3);
      complex0.log();
      Complex complex7 = Complex.valueOf((-28.9837091527), 310.74583);
      complex7.reciprocal();
      Complex complex8 = complex3.sqrt();
      Complex.valueOf((-20.0));
      Complex complex9 = new Complex((-20.0));
      complex5.multiply(complex2);
      complex4.pow((-20.0));
      Complex complex10 = complex6.conjugate();
      complex8.tanh();
      complex8.tan();
      Complex complex11 = Complex.ONE;
      complex10.exp();
      Complex complex12 = Complex.NaN;
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2056.0), (-2056.0));
      Complex complex1 = complex0.asin();
      complex1.log();
      Complex complex2 = new Complex(4179.07250833922, (-205.91514478));
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.multiply(2.0);
      Complex complex5 = Complex.valueOf(0.5968599319458008, (-2056.0));
      Complex complex6 = complex4.reciprocal();
      complex3.sqrt();
      Complex.valueOf(4179.07250833922);
      Complex complex7 = new Complex(4179.07250833922);
      complex6.multiply(complex1);
      complex5.pow((-3608.293062862981));
      Complex complex8 = complex6.conjugate();
      Complex complex9 = Complex.ZERO;
      complex6.INF.cosh();
      complex9.tanh();
      Complex complex10 = complex2.tan();
      Complex complex11 = Complex.ONE;
      complex8.exp();
      Complex complex12 = Complex.NaN;
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2056.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.createComplex(0.004615629563649412, 1158.77224);
      complex3.NaN.multiply(complex1);
      Complex complex4 = complex1.subtract(1.1882454749452428E-7);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.add((-2056.0));
      complex5.multiply(complex2);
      complex1.getImaginary();
      Complex complex9 = complex8.divide((-1296.1));
      Complex complex10 = complex9.multiply(2.0);
      complex10.readResolve();
      complex4.getField();
      Complex complex11 = complex5.multiply((-1238));
      complex5.sqrt();
      complex2.tan();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-4251.0), 530.129532609962);
      Complex complex2 = Complex.valueOf((-549.88810897603), 909.3866635100143);
      complex1.add(complex2);
      complex2.I.multiply(831);
      Complex.valueOf((-1291.0625079));
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.ZERO;
      complex4.sqrt1z();
      complex2.abs();
      complex4.abs();
      complex4.add(1.09868411346781);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = Complex.valueOf(0.41389304399490356, 1.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.add(0.41389304399490356);
      complex2.divide(complex1);
      Complex complex3 = complex0.sin();
      complex3.tan();
      Complex complex4 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.pow(4179.07250833922);
      Complex complex4 = complex2.multiply(complex3);
      complex0.pow(4179.07250833922);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.tanh();
      complex5.tan();
      Complex complex7 = Complex.ONE;
      complex6.exp();
      Complex complex8 = Complex.NaN;
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.createComplex(2688.854091797815, 1158.77224);
      Complex complex4 = complex1.subtract(2688.854091797815);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.ZERO;
      complex8.add((-20.0));
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf((-20.0));
      complex2.getImaginary();
      complex7.divide(2688.854091797815);
      complex9.multiply((-20.0));
      complex10.readResolve();
      complex5.getField();
      complex4.multiply((-1238));
      complex3.sqrt();
      Complex complex11 = Complex.ONE;
      complex7.readResolve();
      complex10.getReal();
      complex2.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.41389304399490356, 1.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.add(0.41389304399490356);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.tan();
      Complex complex6 = new Complex(1.0);
      Complex complex7 = Complex.NaN;
      complex3.multiply(complex5);
      Complex complex8 = Complex.valueOf(952.0, (-20.0));
      complex8.getImaginary();
      complex5.divide(952.0);
      Complex complex9 = complex8.multiply((-1537.7996));
      complex9.readResolve();
      complex3.getField();
      complex4.multiply(490);
      Complex complex10 = complex6.sqrt();
      complex6.readResolve();
      Complex complex11 = Complex.I;
      complex11.getReal();
      complex10.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-4251.0));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.multiply((-4251.0));
      Complex complex4 = complex3.cosh();
      complex0.add(1.7966744899749756);
      Complex complex5 = complex3.sqrt1z();
      complex4.getField();
      Complex complex6 = Complex.valueOf((-6.788169932297778E170), (-6.788169932297778E170));
      Complex complex7 = complex1.sin();
      Complex complex8 = complex6.pow(1634.3879636);
      Complex complex9 = Complex.NaN;
      complex9.sqrt();
      complex8.tanh();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = Complex.NaN;
      complex11.cos();
      complex2.getField();
      Complex complex12 = new Complex((-4251.0), (-6.788169932297778E170));
      complex12.sin();
      complex8.nthRoot(698);
      Complex complex13 = complex6.sqrt();
      complex13.ZERO.cos();
      complex9.hashCode();
      complex5.reciprocal();
      complex7.reciprocal();
      complex10.divide((-4014.9291685));
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.negate();
      Complex complex1 = new Complex(4179.07250833922, 4179.07250833922);
      Complex complex2 = complex1.divide(complex0);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.subtract(0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.negate();
      complex3.pow(complex0);
      Complex complex4 = Complex.valueOf(2.0521614818695524E99, 2.0521614818695524E99);
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex3.divide((-1769.96642519549));
      complex5.subtract((-1769.96642519549));
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex3.pow(complex6);
      Complex complex9 = complex6.I.add((-433.3103366334));
      Complex complex10 = complex9.ONE.multiply(complex2);
      complex8.equals((Object) null);
      complex6.cos();
      complex7.readResolve();
      Complex complex11 = complex5.atan();
      complex5.getField();
      complex2.toString();
      complex10.tan();
      complex11.getReal();
      complex9.multiply(816);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex0.negate();
      complex4.pow(complex0);
      Complex.valueOf(2.0521614818695524E99, 2.0521614818695524E99);
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex4.divide((-1769.96642519549));
      Complex complex7 = complex5.subtract((-1769.96642519549));
      Complex complex8 = complex4.tanh();
      complex4.pow(complex6);
      Complex complex9 = complex6.I.add((-433.3103366334));
      complex9.ONE.multiply(complex3);
      complex5.getImaginary();
      complex7.divide(1085.619);
      complex6.multiply((-1769.96642519549));
      Complex complex10 = (Complex)complex6.INF.readResolve();
      complex4.getField();
      complex7.multiply(1683);
      complex8.getImaginary();
      complex1.conjugate();
      complex10.log();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.I.cosh();
      complex2.ZERO.subtract(complex0);
      Complex complex3 = complex0.negate();
      complex3.pow(complex0);
      Complex.valueOf(2.0521614818695524E99, 2.0521614818695524E99);
      complex0.INF.log();
      Complex complex4 = complex3.divide((-1769.96642519549));
      complex0.nthRoot(329);
      complex3.multiply(0.0);
      complex1.asin();
      Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.log();
      complex5.nthRoot(329);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2056.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      complex2.createComplex(0.004615629563649412, 1158.77224);
      Complex complex3 = complex1.subtract(1.1882454749452428E-7);
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.add((-2056.0));
      complex4.multiply(complex2);
      complex1.getImaginary();
      Complex complex8 = complex7.divide((-1296.1));
      Complex complex9 = complex8.multiply(2.0);
      complex9.readResolve();
      complex3.getField();
      complex4.multiply((-1238));
      complex4.sqrt();
      Complex complex10 = Complex.ONE;
      complex10.readResolve();
      complex7.getReal();
      complex2.pow((-2056.0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4179.07250833922);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.subtract(complex1);
      complex3.reciprocal();
      Complex complex4 = new Complex(0.0);
      complex2.pow(complex4);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.subtract(0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = Complex.valueOf(2.0521614818695524E99, 2.0521614818695524E99);
      Complex complex6 = complex3.divide((-1769.96642519549));
      Complex complex7 = complex4.subtract((-1769.96642519549));
      complex3.tanh();
      complex3.pow(complex6);
      Complex complex8 = complex6.I.add((-433.3103366334));
      Complex complex9 = complex8.ONE.multiply(complex2);
      complex5.getImaginary();
      complex7.divide(1085.619);
      complex6.multiply((-1769.96642519549));
      complex3.getField();
      complex7.multiply(1683);
      complex2.sqrt();
      complex9.getReal();
      complex3.multiply((-315));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1859.7), (-1859.7));
      Complex complex1 = Complex.valueOf(1873.48);
      complex1.INF.divide(complex0);
      Complex complex2 = complex1.multiply(1869.031456545977);
      complex2.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.pow(1869.031456545977);
      complex0.pow(0.0);
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex0.I.divide(complex3);
      complex1.ONE.tanh();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex2.ONE.multiply((-2635.65297));
      complex6.I.abs();
      complex6.NaN.sin();
      Complex complex7 = complex0.tanh();
      complex7.multiply(complex0);
      complex5.ONE.abs();
      complex1.divide(complex7);
      Complex complex8 = Complex.NaN;
      complex0.equals(complex8);
      Complex complex9 = complex0.cos();
      Complex complex10 = (Complex)complex5.readResolve();
      complex10.atan();
      complex10.getField();
      complex4.toString();
      complex9.tan();
      complex9.getReal();
      complex6.multiply(698);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.pow(4179.07250833922);
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex4.atan();
      complex3.acos();
      complex5.hashCode();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex0.I.divide(complex3);
      complex1.ONE.tanh();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex2.ONE.multiply((-2635.65297));
      complex6.I.abs();
      Complex complex7 = new Complex((-2635.65297));
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.multiply(complex0);
      complex5.ONE.abs();
      complex1.divide(complex8);
      Complex complex10 = Complex.NaN;
      complex0.equals(complex10);
      Complex complex11 = complex0.cos();
      Complex complex12 = Complex.ONE;
      complex11.sin();
      complex3.nthRoot(698);
      complex8.sqrt();
      Complex complex13 = complex10.asin();
      complex4.negate();
      complex9.nthRoot(698);
      complex13.multiply(698);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4179.07250833922);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.multiply(4179.07250833922);
      Complex complex5 = Complex.valueOf(1.0, 1.0);
      complex5.reciprocal();
      complex5.sqrt();
      Complex.valueOf(3021.6429125990903);
      Complex complex6 = new Complex(1.0);
      complex0.multiply(complex6);
      complex4.pow(1.0);
      complex3.conjugate();
      Complex complex7 = complex4.tanh();
      complex7.tan();
      Complex complex8 = Complex.ONE;
      complex8.exp();
      Complex complex9 = Complex.NaN;
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1301.1291), (-2239.6518743995584));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.conjugate();
      complex2.pow(6.283185307179586);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.atan();
      complex3.acos();
      complex4.hashCode();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(4179.07250833922, 4179.07250833922);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.pow((-918.6749755));
      complex2.subtract(complex3);
      complex2.atan();
      complex3.acos();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1859.7), (-1859.7));
      Complex complex1 = Complex.valueOf(1873.48);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.multiply(1869.031456545977);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.ZERO.pow(1869.031456545977);
      Complex complex6 = (Complex)complex5.NaN.readResolve();
      Complex complex7 = complex3.multiply(complex6);
      complex6.abs();
      complex7.divide(complex6);
      Complex complex8 = Complex.NaN;
      Object object0 = new Object();
      complex7.equals(object0);
      Complex complex9 = Complex.I;
      complex7.readResolve();
      complex1.atan();
      complex7.getField();
      complex3.toString();
      complex7.tan();
      complex4.getReal();
      complex0.multiply(2176);
      complex2.sinh();
      complex7.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4179.07250833922);
      Complex complex1 = Complex.I;
      complex1.ZERO.conjugate();
      Complex complex2 = complex0.ONE.pow(0.0);
      complex0.I.subtract(complex1);
      complex0.atan();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = new Complex(4179.07250833922, 4179.07250833922);
      complex4.asin();
      complex3.negate();
      Complex complex5 = new Complex(0.0, (-1.0));
      int int0 = 1073741824;
      // Undeclared exception!
      complex5.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      complex2.ZERO.abs();
      complex2.ZERO.log();
      Complex.valueOf(0.0, (-7.692065092509875E58));
      complex3.hashCode();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.ONE.log();
      complex4.INF.sin();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex6.divide(complex3);
      complex8.I.nthRoot(1131);
      Complex complex9 = complex1.add(0.0);
      complex9.getArgument();
      Complex complex10 = complex9.conjugate();
      complex0.ONE.log();
      complex9.INF.multiply(0);
      complex6.ZERO.add(complex3);
      complex1.atan();
      complex7.divide(complex6);
      complex10.acos();
      complex8.atan();
      complex0.sinh();
      complex7.sin();
      Complex complex11 = complex5.atan();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4179.07250833922);
      Complex complex1 = Complex.I;
      complex1.ZERO.conjugate();
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex0.I.subtract(complex1);
      complex0.atan();
      complex2.INF.acos();
      complex3.hashCode();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.ZERO.multiply(complex3);
      Complex complex5 = complex1.I.sinh();
      Complex complex6 = Complex.valueOf(4682.0);
      complex6.subtract(complex5);
      complex5.ZERO.multiply(1.7177785285061278E-7);
      Complex complex7 = complex0.atan();
      complex7.INF.exp();
      complex0.getImaginary();
      Complex complex8 = complex4.multiply(58);
      Complex complex9 = complex8.I.acos();
      complex3.INF.toString();
      complex3.NaN.log();
      complex8.ZERO.subtract((double) 58);
      complex8.ZERO.add(7.708777608683431E-178);
      complex7.getField();
      Complex complex10 = complex4.pow(1432.842232);
      complex8.exp();
      Complex complex11 = complex10.NaN.add(complex9);
      complex10.I.cos();
      complex11.cosh();
      complex10.abs();
      Complex complex12 = complex3.tanh();
      complex12.I.abs();
      complex0.conjugate();
      Complex complex13 = complex2.cos();
      complex13.I.abs();
      complex8.tan();
      complex13.multiply(Double.NaN);
      complex13.add(1.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      complex0.readResolve();
      complex0.abs();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.ONE.tanh();
      Complex.valueOf(0.0);
      Complex complex7 = complex4.I.createComplex(0.0, 0.0);
      Complex complex8 = complex4.createComplex(0.0, 0.0);
      Complex complex9 = complex8.I.cos();
      complex9.NaN.pow(0.0);
      complex1.abs();
      Complex complex10 = complex7.createComplex((-202.0554048541048), 0.0);
      complex10.getArgument();
      complex10.multiply((-180.658811581691));
      complex5.tanh();
      Complex complex11 = complex1.createComplex(0.0, (-650.365));
      complex1.add(3.141592653589793);
      complex3.add(complex6);
      Complex.valueOf(0.0);
      complex11.multiply(1372);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6338034868240356);
      Complex complex1 = Complex.valueOf(0.6338034868240356, 0.0);
      Complex complex2 = complex0.I.multiply(complex1);
      complex0.readResolve();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.INF.atan();
      complex2.INF.abs();
      complex0.ONE.readResolve();
      complex3.getReal();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ONE.abs();
      complex3.ZERO.abs();
      Complex complex6 = complex2.cosh();
      complex6.getArgument();
      complex3.isNaN();
      complex6.cosh();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.conjugate();
      complex4.readResolve();
      complex5.acos();
      complex8.reciprocal();
      complex4.abs();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1036.36);
      Complex complex1 = complex0.NaN.subtract((-2093.5966));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.negate();
      complex3.sin();
      complex2.INF.multiply((-443.176701));
      complex2.multiply(complex1);
      Complex.valueOf(741.572, (-360.24));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sqrt();
      complex2.cosh();
      complex1.INF.exp();
      double double0 = 3965.8029715610155;
      Complex complex3 = Complex.valueOf(3965.8029715610155);
      complex0.I.log();
      Complex complex4 = complex3.ZERO.atan();
      int int0 = 0;
      try { 
        complex4.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ONE.atan();
      Complex complex1 = complex0.pow(549.03731);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.reciprocal();
      complex0.toString();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = complex2.I.add(complex5);
      complex6.I.tanh();
      Complex.valueOf(2553.0);
      complex6.NaN.cosh();
      Complex complex7 = complex2.multiply(533);
      Complex complex8 = complex7.subtract(0.0);
      complex1.sinh();
      Complex complex9 = complex1.I.atan();
      complex7.I.nthRoot(1);
      complex1.ONE.tan();
      complex1.multiply(3224.051971);
      Complex complex10 = complex7.cos();
      Complex complex11 = complex10.ONE.pow(complex0);
      Complex complex12 = complex8.sqrt1z();
      complex12.I.getArgument();
      complex8.toString();
      complex3.readResolve();
      complex10.sinh();
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex9.subtract(complex4);
      complex14.I.cos();
      complex11.readResolve();
      complex0.cos();
      complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.I.nthRoot(1197);
      complex0.readResolve();
      complex0.subtract((-3510.0));
      complex2.atan();
      complex0.subtract((double) 1197);
      complex0.pow(5084.791219456649);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow((-2622.841293373061));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.pow((-2214.377354));
      complex2.NaN.conjugate();
      Complex complex4 = complex2.reciprocal();
      Complex.valueOf((-1.0), 782.883);
      Complex complex5 = complex4.ZERO.pow(complex2);
      complex5.subtract(complex0);
      complex0.conjugate();
      complex0.exp();
      Complex complex6 = complex1.asin();
      complex6.ZERO.multiply(complex1);
      complex3.multiply((-1884.6138562646418));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex1 = complex0.divide(1.0);
      Complex complex2 = complex0.tan();
      complex2.NaN.sqrt();
      Complex complex3 = complex1.I.atan();
      complex3.I.pow((-150.99018834));
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.ZERO.subtract((-2134.407691));
      Complex complex6 = complex5.INF.subtract(2.9300903540317107E-8);
      Complex complex7 = complex6.ONE.exp();
      complex7.atan();
      complex1.sqrt();
      complex1.sqrt();
      complex1.getImaginary();
      Complex complex8 = complex2.conjugate();
      complex1.log();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.log();
      complex4.I.multiply(complex0);
      Complex complex5 = complex2.ZERO.multiply(3021.6429125990903);
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex2.ONE.sqrt();
      Complex.valueOf(3021.6429125990903);
      complex2.multiply(complex6);
      complex2.pow(0.0);
      complex2.conjugate();
      complex1.tanh();
      complex3.tan();
      complex5.exp();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.I.reciprocal();
      try { 
        complex3.NaN.nthRoot((-103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -103
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1126.31969987317);
      Complex complex1 = new Complex((-20.0));
      complex1.I.add(Double.NaN);
      Complex complex2 = complex1.INF.sqrt1z();
      complex2.ZERO.createComplex(Double.NaN, 1126.31969987317);
      complex2.ZERO.getField();
      Complex complex3 = complex0.I.divide(complex1);
      complex3.NaN.divide((-20.0));
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.I.multiply(complex0);
      complex5.exp();
      complex0.toString();
      Complex complex6 = complex0.subtract(complex1);
      complex6.ONE.getArgument();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.ONE;
      complex6.ZERO.exp();
      Complex complex9 = complex7.I.pow(complex8);
      Complex complex10 = complex9.divide(complex3);
      complex10.ONE.multiply(1);
      Complex complex11 = complex0.pow(0.0);
      complex11.I.readResolve();
      Complex complex12 = complex2.sqrt1z();
      complex12.ONE.sinh();
      complex12.NaN.getArgument();
      complex1.pow(1.5574076175689697);
      complex8.getImaginary();
      complex11.getArgument();
      complex3.divide(complex9);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-387.6983));
      Complex complex2 = complex0.tan();
      complex2.ONE.getArgument();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.NaN.add(complex3);
      Complex complex6 = complex1.log();
      complex0.ZERO.toString();
      complex4.cosh();
      complex2.divide((-387.6983));
      complex0.subtract((-387.6983));
      complex1.getArgument();
      complex2.cos();
      complex6.readResolve();
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.ONE.sin();
      Complex.valueOf(0.0, 0.0);
      complex2.INF.exp();
      Complex.valueOf(0.0, 0.0);
      complex0.abs();
      complex1.sqrt1z();
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.getArgument();
      Complex complex3 = complex2.divide((-1.0568403170659571E-8));
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex3.I.multiply((-1.0568403170659571E-8));
      complex2.cosh();
      Complex complex6 = complex5.I.add((-1.0568403170659571E-8));
      complex6.ONE.sqrt1z();
      complex3.getField();
      Complex complex7 = Complex.valueOf((-1.0568403170659571E-8), 0.0);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.ONE.pow(0.0);
      complex9.sqrt();
      Complex complex10 = complex7.ONE.tanh();
      complex10.NaN.sqrt();
      complex2.cos();
      complex7.getField();
      complex1.ZERO.sin();
      complex5.nthRoot(698);
      complex1.sqrt();
      complex8.asin();
      complex4.negate();
      complex6.nthRoot(698);
      complex5.multiply(698);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ZERO.reciprocal();
      complex0.I.divide(complex3);
      complex1.ONE.tanh();
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex2.ONE.multiply((-2635.65297));
      complex5.I.abs();
      complex5.NaN.sin();
      Complex complex6 = complex0.tanh();
      complex6.multiply(complex0);
      complex4.ONE.abs();
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = Complex.NaN;
      complex0.equals(complex8);
      complex0.cos();
      complex4.readResolve();
      Complex complex9 = complex0.atan();
      complex9.getField();
      complex2.toString();
      Complex complex10 = complex2.tan();
      complex7.getReal();
      complex5.multiply(1);
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.NaN.reciprocal();
      complex0.NaN.hashCode();
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.getField();
      complex1.ONE.log();
      Complex complex4 = complex1.reciprocal();
      complex1.INF.atan();
      complex4.negate();
      Complex complex5 = complex4.ONE.subtract(20.0);
      complex5.INF.sqrt1z();
      Complex complex6 = complex4.multiply(0);
      complex6.NaN.log();
      Complex complex7 = complex4.pow(complex2);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2349.6373));
      complex0.toString();
      Complex complex1 = complex0.acos();
      complex1.ONE.hashCode();
      complex1.ONE.cos();
      Complex complex2 = complex1.NaN.sqrt();
      complex2.ZERO.hashCode();
      complex2.ONE.cosh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.pow((-2349.6373));
      Complex complex5 = complex2.sqrt();
      complex4.NaN.sqrt1z();
      Complex.valueOf((-2349.6373));
      complex4.sqrt();
      complex0.ONE.log();
      Complex complex6 = complex5.negate();
      complex3.conjugate();
      complex0.INF.divide(complex6);
      complex3.exp();
      try { 
        complex3.nthRoot((-452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -452
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.INF.sqrt();
      complex3.sqrt();
      Complex complex6 = complex0.NaN.acos();
      complex0.equals("(");
      Complex complex7 = complex1.multiply(3619);
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.subtract(1010.3185459901396);
      Complex.valueOf((double) 3619);
      Complex complex10 = Complex.valueOf(1263.76512324159);
      complex5.abs();
      Complex complex11 = complex9.pow(complex7);
      Complex complex12 = complex9.multiply(3619);
      complex12.getReal();
      Complex.valueOf(Double.NaN);
      complex9.NaN.multiply(complex7);
      complex0.readResolve();
      Complex complex13 = complex2.tan();
      Complex complex14 = complex11.multiply(complex6);
      Complex complex15 = complex14.NaN.pow(complex10);
      complex3.ONE.cos();
      complex15.acos();
      complex13.abs();
      Complex complex16 = complex12.pow(complex10);
      complex5.sinh();
      complex15.divide((double) 3619);
      Complex complex17 = complex16.cos();
      complex17.I.hashCode();
      complex12.divide(Double.NaN);
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.acos();
      complex2.INF.asin();
      complex0.INF.sinh();
      complex0.getArgument();
      Complex complex3 = complex0.cosh();
      complex3.ZERO.acos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.log();
      complex5.ZERO.toString();
      complex5.ONE.asin();
      complex5.toString();
      Complex complex6 = Complex.valueOf(883.825544246, 6.283185307179586);
      complex6.NaN.asin();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-4266.460987163927), (-4266.460987163927));
      complex0.I.getField();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.I.divide(995.44119);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex1.ZERO.sinh();
      Complex complex6 = complex0.sin();
      complex1.INF.exp();
      Complex complex7 = complex1.INF.sqrt();
      complex6.readResolve();
      complex0.equals(complex1);
      Complex complex8 = complex6.sqrt();
      complex8.ONE.add((-4266.460987163927));
      Complex complex9 = complex6.ONE.reciprocal();
      complex8.isNaN();
      Complex complex10 = complex9.negate();
      complex9.I.divide(complex2);
      Complex complex11 = complex8.cos();
      complex11.subtract(complex9);
      complex6.equals(complex4);
      Complex complex12 = complex4.subtract(complex7);
      Complex complex13 = complex12.ZERO.divide(complex7);
      complex13.I.atan();
      Complex complex14 = Complex.valueOf(2.9599693109692324E-149);
      complex12.sqrt();
      Complex complex15 = complex5.multiply(1);
      complex15.I.sqrt1z();
      complex4.cosh();
      complex12.exp();
      complex14.abs();
      complex0.hashCode();
      complex0.reciprocal();
      complex10.add((-2073.4));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.NaN.add(0.0);
      int int0 = 1;
      complex2.ZERO.nthRoot(1);
      complex1.equals(object0);
      complex1.I.conjugate();
      Complex complex3 = complex0.exp();
      complex3.multiply(complex2);
      int int1 = (-141);
      try { 
        complex1.nthRoot((-141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -141
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.multiply(1574.847979523);
      complex2.NaN.sqrt1z();
      complex0.NaN.tanh();
      complex2.subtract(complex0);
      Complex complex4 = complex3.ONE.createComplex(0.0, 1574.847979523);
      Complex complex5 = complex2.ZERO.subtract(0.0);
      complex5.ONE.acos();
      complex4.ZERO.log();
      complex1.ZERO.sqrt();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.ZERO.toString();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.INF.add(complex3);
      complex8.exp();
      Complex complex9 = complex8.multiply((-2592));
      complex8.ONE.reciprocal();
      complex9.INF.negate();
      Complex.valueOf(0.0);
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex10.I.sin();
      complex11.INF.subtract(1.2435453481209945E-123);
      complex0.equals(">>CX'Rk_9@p#;P`ce");
      complex4.multiply(0.0);
      complex9.negate();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.readResolve();
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.atan();
      complex3.sqrt1z();
      complex3.cos();
      complex2.reciprocal();
      complex0.log();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract((-4251.0));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract(complex0);
      complex3.reciprocal();
      complex1.pow(complex2);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.subtract(0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.negate();
      complex3.pow(complex0);
      Complex.valueOf(2.0521614818695524E99, 2.0521614818695524E99);
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex3.divide((-1769.96642519549));
      Complex complex6 = complex4.subtract((-1769.96642519549));
      complex3.tanh();
      complex3.pow(complex5);
      Complex complex7 = complex5.I.add((-433.3103366334));
      complex7.ONE.multiply(complex2);
      complex4.getImaginary();
      complex6.divide(1085.619);
      complex5.multiply((-1769.96642519549));
      complex5.INF.readResolve();
      complex3.getField();
      complex6.multiply(1683);
      complex2.sqrt();
      complex6.readResolve();
      complex5.getReal();
      complex5.pow(2938.40082327);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.conjugate();
      Complex.valueOf(3188.8102479);
      Complex complex3 = complex0.pow(3188.8102479);
      Complex complex4 = complex3.sqrt();
      complex2.negate();
      Complex complex5 = complex1.divide(1299.62557423);
      complex5.I.conjugate();
      Complex complex6 = complex4.I.pow(complex0);
      Complex complex7 = complex6.ONE.atan();
      complex2.getReal();
      Complex complex8 = complex4.sqrt1z();
      complex7.ZERO.subtract(complex6);
      complex8.ZERO.sqrt();
      try { 
        complex8.nthRoot((-2757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,757
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1859.7), (-1859.7));
      Complex complex1 = Complex.valueOf(1873.48);
      complex1.INF.divide(complex0);
      Complex complex2 = complex1.multiply(1869.031456545977);
      complex2.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.pow(1869.031456545977);
      complex3.NaN.readResolve();
      Complex complex4 = complex0.multiply((-1859.7));
      Complex complex5 = complex4.NaN.conjugate();
      complex5.INF.sinh();
      Complex complex6 = complex4.divide(566.26192);
      complex6.ZERO.getArgument();
      complex6.NaN.add((-3897.0));
      complex6.getArgument();
      complex4.negate();
      complex0.isNaN();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.pow((-546.0));
      Complex complex3 = complex0.NaN.conjugate();
      complex1.INF.hashCode();
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.I.tanh();
      assertEquals(1.557407724654902, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.ONE.reciprocal();
      complex7.NaN.getArgument();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      complex2.I.pow(7.270965670658928E13);
      Complex complex8 = complex3.cosh();
      complex1.I.createComplex(Double.NaN, Double.NaN);
      Complex complex9 = complex8.ONE.asin();
      complex9.ONE.getField();
      Complex complex10 = complex0.cosh();
      complex10.INF.reciprocal();
      complex0.nthRoot(2090);
      complex1.getImaginary();
      complex0.isInfinite();
      Complex complex11 = Complex.valueOf((double) 2090, (double) 2090);
      List<Complex> list0 = complex11.ZERO.nthRoot(2090);
      assertEquals(2090, list0.size());
      assertTrue(list0.contains(complex0));
      
      complex2.ZERO.createComplex(2090, (-388.808));
      complex3.multiply(2090);
      Complex complex12 = complex2.tanh();
      complex3.isInfinite();
      assertSame(complex3, complex12);
      
      complex0.negate();
      Complex complex13 = complex0.acos();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex13.getReal(), 0.01);
      
      Complex complex14 = complex4.add((-546.0));
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-2056.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      complex1.INF.nthRoot(1);
      Complex complex3 = complex2.multiply((-2056.0));
      assertEquals(3229.5572478903073, complex3.getReal(), 0.01);
      assertEquals((-17109.342720922417), complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.valueOf((double) 1, 1457.2888655186);
      complex5.ONE.log();
      List<Complex> list0 = complex5.nthRoot(1);
      assertFalse(list0.isEmpty());
      
      Complex complex6 = complex4.sin();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0394233446495043E-237, (-1068.07538283));
      try { 
        complex0.nthRoot((-3118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,118
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = Complex.valueOf(485.14345241, 0.0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.subtract(0.0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.sqrt1z();
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex3.abs();
      complex2.abs();
      Complex complex6 = complex2.add(485.14345241);
      assertEquals(970.28690482, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-50.9), (-50.9));
      Complex complex1 = complex0.INF.log();
      complex0.getField();
      complex1.hashCode();
      List<Complex> list0 = complex1.nthRoot(443);
      assertEquals((-50.9), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertEquals((-50.9), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(786.05974122064);
      complex0.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.add(complex5);
      complex6.ZERO.negate();
      complex6.readResolve();
      double double0 = complex3.getImaginary();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex7 = complex4.sqrt();
      assertEquals((-58844.87973590268), complex7.getImaginary(), 0.01);
      assertEquals(15677.26670813207, complex7.getReal(), 0.01);
  }
}
