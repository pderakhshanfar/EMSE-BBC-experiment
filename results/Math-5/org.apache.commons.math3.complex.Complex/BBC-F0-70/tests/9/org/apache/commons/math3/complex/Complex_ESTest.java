/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:39:50 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-842.47713));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.NaN.createComplex((-842.47713), (-2902.084904));
      Complex complex3 = complex2.cosh();
      complex0.ZERO.getField();
      Complex complex4 = complex0.exp();
      complex4.sin();
      Complex complex5 = complex4.multiply((-2902.084904));
      Complex complex6 = complex1.pow((-2902.084904));
      complex5.subtract((-20.0));
      Complex complex7 = complex2.exp();
      complex2.atan();
      complex7.abs();
      complex0.negate();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.sqrt1z();
      complex6.sqrt1z();
      complex3.sqrt();
      complex7.readResolve();
      complex3.cosh();
      Complex complex10 = complex4.createComplex(1.0, (-842.47713));
      Complex.valueOf((-1.0), 1.0);
      complex9.atan();
      Complex complex11 = new Complex(3086.5559796, 7712330.075451652);
      complex11.add((-2805.00629651497));
      Complex complex12 = complex10.sqrt();
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(21.23502137595838);
      Complex complex1 = Complex.valueOf(21.23502137595838, 20.0);
      Complex complex2 = new Complex(20.0, 20.0);
      complex2.tan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.sqrt1z();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex4.ZERO.exp();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.atan();
      Complex complex6 = new Complex(2665.7595009576385, Double.POSITIVE_INFINITY);
      complex3.multiply(complex6);
      complex5.asin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-3270.492484456768), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-3270.492484456768));
      complex0.multiply(complex1);
      complex1.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1333.833), (-1333.833));
      Complex complex1 = new Complex((-1333.833), 1416.4821014);
      Complex complex2 = new Complex((-1596.0), 630.6502447128364);
      complex0.multiply(complex1);
      Complex.valueOf((-20.0));
      complex0.asin();
      complex0.isNaN();
      Complex complex3 = new Complex(1416.4821014, (-20.0));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      complex0.abs();
      Complex complex1 = complex0.multiply((-2632));
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(1.0000000000000198);
      complex2.getArgument();
      complex0.abs();
      Complex complex5 = Complex.valueOf((-20.0), 1990.2452161747249);
      complex3.sqrt1z();
      Complex complex6 = complex2.atan();
      complex6.pow(complex4);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.NaN.log();
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.readResolve();
      complex0.createComplex((-20.0), (-20.0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.divide(4.639377780310443);
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.NaN.asin();
      Complex complex3 = complex0.sqrt();
      complex3.INF.cosh();
      Complex.valueOf(3140.26, 2501.8189601);
      Complex complex4 = complex3.ONE.subtract(4.639377780310443);
      complex0.getField();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.log();
      complex0.INF.cosh();
      complex0.getField();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.nthRoot(3169);
      complex3.abs();
      complex6.equals(complex0);
      complex3.ZERO.log();
      Complex complex7 = Complex.INF;
      complex4.atan();
      Complex complex8 = complex3.pow(complex2);
      complex7.sqrt();
      complex5.tanh();
      Complex complex9 = Complex.valueOf((-896.0), 9.529727908157224E95);
      complex8.add(complex6);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1.3373196561281372E-150, 1.3373196561281372E-150);
      Complex complex1 = Complex.valueOf((-34.078), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      complex3.pow(complex1);
      complex2.sqrt();
      Complex complex4 = complex3.tanh();
      Complex.valueOf(1.1554696041977512E-288, Double.POSITIVE_INFINITY);
      complex0.add(complex2);
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0, (-1.6832551772917334E11));
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = complex1.sqrt1z();
      complex2.multiply(complex0);
      complex0.getField();
      Complex complex3 = Complex.valueOf((-20.0), 410274.92944387096);
      Complex complex4 = complex1.asin();
      complex4.reciprocal();
      Complex complex5 = complex3.acos();
      Complex complex6 = Complex.I;
      complex6.isNaN();
      complex3.cosh();
      complex5.tan();
      complex5.createComplex(2431.0160836041587, (-3577.01));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.ZERO.nthRoot(1);
      complex1.sinh();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.sqrt1z();
      complex4.getField();
      Complex complex6 = complex3.multiply(0.0);
      complex1.nthRoot(3187);
      complex1.abs();
      complex6.equals(complex0);
      complex6.log();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.I;
      complex6.add(complex3);
      Complex complex9 = Complex.I;
      complex5.add(complex9);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.valueOf((-1229.0));
      complex2.INF.subtract(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.cos();
      complex5.getField();
      complex6.getArgument();
      Complex complex7 = new Complex(Double.NaN);
      complex7.abs();
      Complex.valueOf((-2616.645784541287), (-81.4103733));
      complex0.sqrt();
      complex7.atan();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-452.921035857174), (-452.921035857174));
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex0.ZERO.toString();
      Complex complex2 = complex0.divide((-452.921035857174));
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 453.35266312362177);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex1.toString();
      complex2.sqrt1z();
      Complex.valueOf(453.35266312362177, 1.337E-8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(1.8773906230926514);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.I;
      complex0.asin();
      complex2.sqrt1z();
      Complex complex4 = complex3.cos();
      complex4.getField();
      Complex complex5 = Complex.valueOf(Double.NaN, (-1.0772154376548336E-8));
      Complex complex6 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex3.asin();
      Complex complex7 = complex4.reciprocal();
      complex7.NaN.multiply(364);
      complex6.sqrt();
      complex5.atan();
      complex1.pow(complex5);
      Complex complex8 = complex1.sqrt();
      complex8.I.sqrt();
      Complex.valueOf((-1.0772154376548336E-8), (-1.0772154376548336E-8));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.ZERO.toString();
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.log();
      complex1.multiply(1.485138177871704);
      Complex complex6 = complex1.cos();
      complex2.getArgument();
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex5.cos();
      complex8.createComplex(Double.NaN, 0.07250232994556427);
      Complex complex9 = Complex.ZERO;
      complex8.add(complex7);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      complex4.ONE.log();
      Complex complex5 = complex0.INF.cosh();
      complex0.getField();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.nthRoot(3169);
      complex3.abs();
      complex6.equals(complex0);
      complex3.ZERO.log();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.NaN;
      complex8.getArgument();
      Complex complex9 = Complex.valueOf((double) 3169);
      complex4.getArgument();
      complex9.abs();
      Complex.valueOf(Double.NaN, 1.0);
      Complex complex10 = complex0.sqrt();
      complex1.atan();
      complex5.pow(complex1);
      complex10.sqrt();
      Complex complex11 = new Complex(20.0);
      complex11.tanh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2216.7845335));
      Complex complex1 = complex0.divide(0.0);
      complex0.toString();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.ONE;
      complex1.add(complex3);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 0.15469772266226817);
      complex0.add(complex4);
      Complex.valueOf(0.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ZERO;
      complex4.getField();
      Complex complex5 = complex1.multiply((-2071.1196638711));
      complex5.nthRoot(3187);
      complex5.abs();
      complex3.equals(complex5);
      complex5.log();
      Complex complex6 = complex4.sinh();
      complex3.getArgument();
      Complex.valueOf((-1132.679442428027));
      complex6.getArgument();
      complex4.abs();
      Complex complex7 = Complex.valueOf((-0.7979525403755398), 1.908415302517694E-250);
      complex7.equals(complex2);
      Complex.valueOf((-1475.0), (-5.635173762130303E-9));
      complex3.reciprocal();
      complex5.hashCode();
      Complex complex8 = new Complex(0.0, (-994.17134));
      Complex complex9 = complex8.pow(complex4);
      complex2.sqrt();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(2.055442242836307);
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.valueOf(2.055442242836307);
      complex1.subtract(complex3);
      Complex complex4 = Complex.I;
      complex4.asin();
      Complex complex5 = complex4.sqrt1z();
      complex2.cos();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.readResolve();
      complex4.equals(complex2);
      Complex.valueOf(2.055442242836307, Double.POSITIVE_INFINITY);
      complex4.reciprocal();
      Complex complex7 = Complex.I;
      complex7.hashCode();
      Complex complex8 = Complex.valueOf(2564.22);
      complex0.pow(complex8);
      complex6.sqrt();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add((-2298.1248));
      complex1.ZERO.tan();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.subtract((-2298.1248));
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.ZERO.multiply(3178);
      complex0.isInfinite();
      complex6.equals(complex0);
      complex7.I.getArgument();
      Complex complex8 = complex6.multiply((double) 3178);
      Complex complex9 = complex8.ZERO.log();
      complex6.INF.tanh();
      complex4.NaN.nthRoot(391);
      Complex complex10 = complex7.asin();
      complex10.readResolve();
      Complex complex11 = Complex.valueOf(0.6552567059063928, 1.5707963267948966);
      complex0.INF.readResolve();
      complex5.readResolve();
      complex4.INF.add(3.7090638727007096E-9);
      Complex complex12 = Complex.valueOf((-1058.44321135937), (double) 3178);
      complex12.cosh();
      complex4.log();
      complex6.I.reciprocal();
      complex11.sqrt();
      complex9.divide(2386.3);
      complex0.abs();
      Complex complex13 = complex5.sinh();
      complex13.pow((-4.30610076666344E-131));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2216.7845335));
      complex0.divide(0.0);
      complex0.toString();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.ZERO.toString();
      complex1.sqrt1z();
      Complex.valueOf((-2216.7845335), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-452.921035857174), (-452.921035857174));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.cosh();
      complex3.getField();
      Complex complex4 = new Complex(3.973222981713661E240, 3.973222981713661E240);
      Complex complex5 = complex4.multiply(3.973222981713661E240);
      complex2.nthRoot(925);
      complex5.abs();
      complex2.equals(complex5);
      complex0.tanh();
      complex2.log();
      Complex complex6 = complex3.sinh();
      complex1.getArgument();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.getArgument();
      complex0.abs();
      Complex complex8 = Complex.valueOf(6.570131928780839E11, 1771.6818251677244);
      complex8.equals(complex0);
      Complex complex9 = Complex.valueOf(2388.72686278911, 653.1);
      complex7.reciprocal();
      complex4.hashCode();
      complex5.pow(complex9);
      Complex complex10 = Complex.I;
      complex10.sqrt();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.pow(0.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = new Complex(0.0, (-2711.9497702107324));
      Complex complex5 = Complex.valueOf((-1.5707963267948966));
      complex3.acos();
      complex5.divide(complex2);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex((-9.18119349033801));
      complex2.cos();
      complex1.getField();
      Complex.valueOf(272.428014143, 1178.4);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.reciprocal();
      complex4.ZERO.add((-9.18119349033801));
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.atan();
      complex1.pow(complex3);
      complex5.sqrt();
      complex5.tanh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-452.921035857174), (-452.921035857174));
      complex0.ZERO.divide(0.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.tan();
      complex1.abs();
      complex0.sin();
      Complex complex2 = Complex.ZERO;
      complex2.add(1.0);
      complex0.subtract((-452.921035857174));
      Complex complex3 = complex1.acos();
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3212.308919), (-3212.308919));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.divide((-3212.308919));
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex1.sqrt1z();
      complex3.isNaN();
      complex5.cosh();
      complex2.tan();
      complex4.add(519.9);
      complex6.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tan();
      Complex complex1 = Complex.ONE;
      complex1.nthRoot(2822);
      Complex complex2 = Complex.ZERO;
      complex2.add(complex0);
      Complex.valueOf((double) 1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex(1.2445201873779297);
      Complex complex5 = complex4.asin();
      Complex complex6 = new Complex(Double.NaN);
      complex1.getField();
      Complex complex7 = Complex.valueOf((double) 1, 3.5306502960727705E247);
      complex3.asin();
      complex7.reciprocal();
      complex6.isNaN();
      complex7.cosh();
      complex5.tan();
      Complex complex8 = Complex.valueOf((double) 2822, 1.5368989286777202);
      complex8.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex0.nthRoot(108);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.divide(complex1);
      complex0.pow(1507.67313);
      Complex complex4 = complex0.sinh();
      complex4.abs();
      Complex complex5 = new Complex(1, 0.0);
      complex5.abs();
      complex1.multiply(322.65177109);
      complex4.isNaN();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(1507.67313, 1.0);
      complex7.hashCode();
      Complex complex8 = new Complex(20.0, 108);
      complex4.isNaN();
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.cosh();
      complex2.subtract(1.1752011936438014);
      complex3.getReal();
      complex1.tan();
      complex7.add(1507.67313);
      complex5.createComplex(2854.0, 2493.8918079426044);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.log();
      complex0.INF.cosh();
      complex0.getField();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.nthRoot(3187);
      complex3.abs();
      complex6.equals(complex0);
      Complex complex7 = complex2.tanh();
      complex7.ZERO.log();
      complex6.INF.sinh();
      complex4.getArgument();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.getArgument();
      complex5.abs();
      Complex complex9 = Complex.valueOf(0.0, (-1.3366540360587255E-8));
      complex9.equals("");
      Complex complex10 = Complex.valueOf(0.0, (double) 3187);
      complex10.reciprocal();
      complex9.hashCode();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex11.getImaginary();
      complex6.multiply(3187);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1.8097633115378247E227), 0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tan();
      complex2.tanh();
      Complex.valueOf((-885.7362925606254));
      Complex complex4 = complex2.cos();
      Complex complex5 = complex0.divide((-1045.7682965106));
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.multiply(0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex1.subtract(complex7);
      complex3.sinh();
      complex1.acos();
      Complex complex10 = complex9.add(complex8);
      complex8.atan();
      complex5.getArgument();
      complex7.getArgument();
      complex9.acos();
      complex2.abs();
      Complex.valueOf(6.283185307179586, (-1.8097633115378247E227));
      complex8.equals(complex6);
      complex10.reciprocal();
      complex5.hashCode();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex0.sinh();
      complex0.abs();
      complex4.abs();
      Complex complex5 = complex4.multiply((-1.0));
      complex1.isNaN();
      complex3.multiply(complex5);
      complex0.add(0.0688626617193222);
      Complex complex6 = complex3.multiply(0.0688626617193222);
      Complex complex7 = Complex.valueOf((double) 1, 833.8);
      complex7.cos();
      Complex complex8 = new Complex(1.7077150344848633, 0.0);
      complex8.getField();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex6.reciprocal();
      complex4.sqrt();
      Complex complex11 = new Complex(0.0);
      complex9.atan();
      Complex complex12 = new Complex(1);
      complex7.pow(complex12);
      complex10.sqrt();
      Complex complex13 = Complex.valueOf(6.283185307179586, (-1.0));
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.013765811920166, 1.013765811920166);
      Complex complex1 = complex0.NaN.log();
      complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.divide(complex2);
      Complex.valueOf((-1229.0));
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = new Complex(4.110787043867721E-160, Double.NaN);
      complex7.cos();
      complex1.getField();
      Complex complex8 = Complex.valueOf(4.110787043867721E-160, 4.110787043867721E-160);
      Complex complex9 = complex1.asin();
      complex3.reciprocal();
      complex4.sqrt();
      complex8.atan();
      complex8.pow(complex6);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.subtract(4.691921416188566E137);
      Complex complex4 = complex3.ONE.exp();
      complex1.log();
      Complex complex5 = complex2.sinh();
      complex5.getReal();
      Complex complex6 = new Complex(Double.NaN, Double.POSITIVE_INFINITY);
      complex6.sqrt1z();
      Complex.valueOf(624.06010367793);
      complex4.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY, 2.414213562373095);
      complex1.toString();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-452.921035857174), (-452.921035857174));
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex1.toString();
      Complex complex2 = complex0.divide((-452.921035857174));
      Complex complex3 = complex2.multiply(complex0);
      complex3.getField();
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.valueOf((-907.08));
      Complex complex6 = complex5.reciprocal();
      complex4.sqrt();
      Complex complex7 = new Complex(1258.423978707);
      complex7.atan();
      Complex complex8 = Complex.ONE;
      complex3.pow(complex8);
      complex1.sqrt();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.valueOf((-1229.0));
      complex3.ONE.multiply(1097);
      complex2.INF.subtract(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.cos();
      complex6.I.sqrt1z();
      Complex complex7 = Complex.ONE;
      complex2.sinh();
      complex5.acos();
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.valueOf(3385.0515);
      complex8.add(complex9);
      complex4.atan();
      Complex complex10 = Complex.NaN;
      complex10.getArgument();
      complex5.getArgument();
      complex2.acos();
      complex8.abs();
      Complex.valueOf(3385.0515, (-1094.660070849962));
      Complex complex11 = Complex.NaN;
      complex11.equals(complex2);
      complex5.reciprocal();
      Complex complex12 = Complex.NaN;
      complex12.hashCode();
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(0);
      complex1.abs();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(219.00375123910158);
      Complex complex4 = complex3.pow(Double.NaN);
      Complex complex5 = complex3.sinh();
      complex0.abs();
      complex1.abs();
      Complex complex6 = complex3.multiply(Double.NaN);
      complex3.isNaN();
      complex5.multiply(complex6);
      complex3.add(2617.7296343446);
      Complex complex7 = complex2.multiply(1634.4297669879504);
      complex6.cos();
      complex1.getField();
      Complex complex8 = complex4.asin();
      complex3.reciprocal();
      complex7.sqrt();
      Complex complex9 = new Complex(219.00375123910158);
      Complex complex10 = complex7.atan();
      complex2.pow(complex10);
      complex8.sqrt();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(204.0);
      complex0.isNaN();
      Complex complex1 = complex0.ZERO.createComplex(0.0, 204.0);
      Complex complex2 = complex1.ONE.tan();
      complex2.ZERO.tanh();
      Complex complex3 = Complex.valueOf(204.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.ONE.divide((-1094.660070849962));
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex6.NaN.multiply(0);
      Complex complex8 = Complex.ZERO;
      complex7.ZERO.subtract(complex8);
      complex1.INF.sinh();
      complex4.I.acos();
      Complex complex9 = complex0.add(complex3);
      complex9.I.atan();
      complex9.ONE.getArgument();
      complex0.asin();
      complex2.reciprocal();
      Complex complex10 = new Complex(0.0, 1196.3222813113105);
      complex10.sqrt();
      Complex complex11 = new Complex(0.0);
      complex10.atan();
      complex5.pow(complex3);
      Complex complex12 = complex6.sqrt();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-3212.308919), (-3212.308919));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.NaN.tan();
      complex3.NaN.tan();
      complex2.INF.abs();
      complex1.sin();
      complex3.isNaN();
      complex0.cosh();
      Complex complex4 = complex0.subtract(1.0);
      complex4.tan();
      complex2.add(2806.813357922565);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(204.0);
      complex0.isNaN();
      Complex complex1 = complex0.ZERO.createComplex(0.0, 204.0);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.divide(complex1);
      complex1.pow(6.283190273647335);
      complex4.sinh();
      complex3.abs();
      complex4.abs();
      Complex complex5 = complex1.multiply(0.5205078726367633);
      complex5.isNaN();
      complex2.multiply(complex1);
      Complex complex6 = Complex.valueOf(0.655410978310577);
      Complex complex7 = complex6.add(1195.666870333);
      complex1.multiply(20.0);
      Complex complex8 = complex0.cos();
      complex8.getField();
      complex3.asin();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = Complex.ZERO;
      complex10.sqrt();
      Complex complex11 = new Complex(0.655410978310577, 0.007634351591445598);
      complex4.atan();
      Complex complex12 = Complex.ONE;
      complex12.pow(complex0);
      complex9.sqrt();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.410026007738597, 1.7077150344848633);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(204.0);
      complex0.isNaN();
      complex0.ZERO.createComplex(0.0, 204.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf(1113.0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.divide(3038.99673164);
      Complex complex6 = complex1.log();
      complex1.multiply(0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.subtract(complex6);
      Complex complex9 = complex3.sinh();
      complex6.acos();
      Complex complex10 = complex4.add(complex8);
      Complex complex11 = complex10.atan();
      complex2.getArgument();
      complex7.getArgument();
      Complex complex12 = new Complex((-562.38), 3.141592653589793);
      complex12.acos();
      complex11.abs();
      Complex.valueOf((-1928.4348271590054), 4246.815896390708);
      Object object0 = new Object();
      complex3.equals(object0);
      complex9.reciprocal();
      complex4.hashCode();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.subtract(0.9999178732258956);
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex2.add((-1237.9491));
      complex4.INF.tan();
      Complex complex5 = Complex.valueOf(0.5403023058681398, 0.5403023058681398);
      Complex complex6 = complex2.NaN.tan();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex5.INF.log();
      complex8.getField();
      complex1.toString();
      complex7.add(complex6);
      complex7.multiply(0.9999178732258956);
      complex5.getField();
      Complex complex10 = complex0.subtract(0.5403023058681398);
      complex10.isInfinite();
      complex7.getField();
      complex1.sqrt1z();
      Complex complex11 = complex6.multiply(complex7);
      complex11.ONE.createComplex(8.954135150208654E-113, (-3129.366123));
      complex1.add(complex2);
      complex0.subtract(complex3);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      complex4.ONE.log();
      complex0.INF.cosh();
      complex0.getField();
      Complex complex5 = complex1.ZERO.multiply(0.0);
      complex5.nthRoot(3187);
      Complex complex6 = complex0.createComplex(156.0499733, 0.0);
      complex6.abs();
      complex6.equals(complex0);
      Complex complex7 = complex2.tanh();
      complex7.ZERO.log();
      complex5.INF.sinh();
      complex1.getReal();
      complex0.sqrt1z();
      Complex complex8 = Complex.valueOf(2367702.8817047346);
      complex8.readResolve();
      Complex.valueOf((-1516.55), 0.0);
      complex2.toString();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex.valueOf((-1229.0));
      complex2.INF.subtract(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.cos();
      complex4.getField();
      Complex complex6 = Complex.valueOf((-2616.645784541287), 452.43091282984);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex1.sqrt();
      complex5.atan();
      Complex complex10 = complex9.pow(complex8);
      complex10.sqrt();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1.013765811920166);
      complex0.isNaN();
      Complex complex1 = Complex.valueOf(1.013765811920166);
      complex1.createComplex(0.0, 0.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(828.91897550524, 828.91897550524);
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex4.divide((-1094.660070849962));
      Complex complex8 = complex4.log();
      Complex complex9 = complex0.multiply(994);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.valueOf(828.91897550524);
      Complex complex12 = complex11.subtract(complex7);
      Complex complex13 = complex4.sinh();
      complex8.acos();
      complex13.asin();
      complex2.add(complex11);
      Complex complex14 = Complex.valueOf((double) 0, (double) 0);
      Complex complex15 = complex14.atan();
      complex1.getArgument();
      complex12.getArgument();
      complex9.acos();
      complex6.abs();
      Complex complex16 = Complex.valueOf((-739.6814529477391), 70.0);
      complex16.equals(complex15);
      complex13.reciprocal();
      Complex complex17 = Complex.ZERO;
      complex17.hashCode();
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 204.0;
      Complex complex0 = Complex.valueOf(204.0, 204.0);
      Complex complex1 = complex0.log();
      complex1.nthRoot(1);
      complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.divide(complex1);
      complex1.pow(204.0);
      Complex complex4 = complex0.sinh();
      complex0.abs();
      complex0.abs();
      Complex complex5 = complex0.multiply(1.0);
      complex2.isNaN();
      complex5.multiply(complex4);
      Complex complex6 = Complex.valueOf(288.4995667241114);
      complex6.add(Double.NaN);
      complex4.multiply(2.0);
      complex3.abs();
      complex1.exp();
      Complex complex7 = complex0.multiply(3187);
      try { 
        complex7.nthRoot((-346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -346
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2369.949878309, 2369.949878309);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.atan();
      Complex complex3 = complex0.add(2369.949878309);
      Complex.valueOf(2369.949878309, 2369.949878309);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ONE.atan();
      complex4.INF.pow(2369.949878309);
      complex5.I.sqrt();
      Complex complex6 = complex4.ONE.multiply(530);
      complex6.sinh();
      Complex complex7 = complex5.ZERO.reciprocal();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = Complex.valueOf(2369.949878309);
      complex8.INF.sinh();
      Complex complex10 = complex5.ZERO.pow(complex9);
      complex10.NaN.sin();
      Complex complex11 = complex0.reciprocal();
      complex10.cosh();
      complex1.I.getField();
      complex4.getReal();
      complex7.subtract(complex11);
      Complex complex12 = complex1.divide(complex8);
      complex7.pow(complex10);
      Complex.valueOf(2369.949878309);
      complex7.pow(complex2);
      complex4.sinh();
      complex9.divide((double) 530);
      complex12.isNaN();
      complex0.pow(Double.POSITIVE_INFINITY);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      complex4.ONE.log();
      Complex complex5 = complex0.INF.cosh();
      complex0.getField();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.nthRoot(3187);
      Complex complex7 = complex0.createComplex(156.0499733, 0.0);
      complex7.abs();
      complex7.equals(complex0);
      Complex complex8 = complex2.tanh();
      complex8.ZERO.log();
      complex2.add(4.296027044486766E-61);
      Complex complex9 = complex8.multiply(1031.67);
      complex9.NaN.getField();
      complex4.abs();
      Complex complex10 = complex5.exp();
      complex10.multiply(3187);
      // Undeclared exception!
      complex0.nthRoot(3187);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-3212.308919), (-3212.308919));
      complex0.sinh();
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex((-3212.308919));
      Complex complex3 = complex1.divide(complex2);
      complex2.pow((-3212.308919));
      Complex complex4 = complex2.sinh();
      complex4.abs();
      complex1.abs();
      Complex complex5 = complex1.multiply(Double.NaN);
      complex5.isNaN();
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex1.add(Double.NaN);
      Complex complex8 = new Complex(1.7400655988987023E39, (-3212.308919));
      Complex complex9 = complex8.multiply(381.33415);
      complex6.abs();
      Complex complex10 = complex8.exp();
      Complex complex11 = complex10.multiply(3469);
      Complex complex12 = Complex.ONE;
      complex12.nthRoot(1237);
      complex9.subtract(complex11);
      complex5.abs();
      complex7.acos();
      Complex complex13 = new Complex(1.7400655988987023E39, 5.748660927640259E-5);
      complex13.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.013765811920166, 1.013765811920166);
      Complex complex1 = complex0.NaN.log();
      complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.reciprocal();
      complex1.divide(complex2);
      complex2.ZERO.pow(Double.NaN);
      Complex complex3 = complex2.sinh();
      complex3.ZERO.abs();
      complex0.ZERO.abs();
      Complex complex4 = complex0.multiply(1.0);
      complex4.isNaN();
      Complex complex5 = Complex.ZERO;
      complex5.hashCode();
      Complex complex6 = new Complex(Double.NaN, 0.0);
      complex6.isNaN();
      Complex complex7 = complex3.cosh();
      complex5.subtract(1059.695229184);
      complex0.getReal();
      complex7.tan();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.log();
      complex0.INF.cosh();
      complex0.getField();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.nthRoot(3187);
      Complex complex7 = complex0.createComplex(156.0499733, 0.0);
      complex7.abs();
      complex7.equals(complex0);
      Complex complex8 = complex2.tanh();
      complex8.ZERO.log();
      complex4.ONE.reciprocal();
      Complex complex9 = complex6.INF.sinh();
      complex1.getReal();
      complex0.exp();
      complex6.readResolve();
      complex2.abs();
      Complex complex10 = complex1.sqrt1z();
      complex10.ZERO.sinh();
      complex3.divide(Double.NaN);
      complex9.isNaN();
      complex9.pow(156.0499733);
      complex9.pow(complex10);
      Complex complex11 = complex5.sin();
      complex11.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex0.INF.cosh();
      complex0.getField();
      Complex complex7 = complex1.ZERO.multiply(0.0);
      complex7.nthRoot(3187);
      Complex complex8 = complex0.createComplex(156.0499733, 0.0);
      complex8.abs();
      complex8.equals(complex0);
      Complex complex9 = complex2.tanh();
      complex9.ZERO.log();
      complex7.INF.sinh();
      complex1.getReal();
      complex0.exp();
      complex0.ZERO.sqrt1z();
      complex7.readResolve();
      complex2.abs();
      Complex complex10 = complex5.multiply(3187);
      complex9.nthRoot(7);
      complex6.subtract(complex10);
      complex4.abs();
      complex6.acos();
      complex10.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.log();
      complex0.INF.cosh();
      complex0.getField();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.nthRoot(3187);
      Complex complex7 = complex0.createComplex(156.0499733, 0.0);
      complex7.abs();
      complex7.equals(complex0);
      Complex complex8 = complex2.tanh();
      complex8.ZERO.log();
      Complex complex9 = complex6.INF.sinh();
      complex1.getReal();
      complex0.exp();
      complex6.readResolve();
      complex2.abs();
      complex0.sqrt1z();
      Complex complex10 = complex9.sinh();
      Complex complex11 = new Complex((-2295.5152), (-2295.5152));
      complex11.divide(518.295485995);
      complex5.isNaN();
      complex5.pow((-2295.5152));
      Complex complex12 = new Complex(0.41421356237309515, (-132.8396661488));
      complex10.pow(complex12);
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2043.4394);
      Complex complex1 = new Complex(0.0, 2043.4394);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.INF.tan();
      complex4.NaN.exp();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex2.NaN.conjugate();
      complex6.ZERO.tan();
      Complex complex8 = complex5.I.negate();
      Complex complex9 = Complex.valueOf(2043.4394, 0.0);
      complex9.INF.divide(0.0);
      Complex complex10 = complex9.I.cosh();
      complex8.ONE.multiply(0.0);
      Complex complex11 = Complex.valueOf(2043.4394, 5.858546779607288E-181);
      complex11.ZERO.tanh();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex2.NaN.sqrt();
      complex12.hashCode();
      complex1.conjugate();
      complex2.add(0.0);
      complex8.toString();
      Complex complex14 = complex11.exp();
      complex13.I.sqrt();
      complex14.INF.cos();
      complex3.exp();
      complex10.multiply((-2301));
      try { 
        complex7.nthRoot((-2301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,301
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.013765811920166, 1.013765811920166);
      Complex complex1 = complex0.NaN.log();
      complex1.NaN.nthRoot(1);
      complex0.abs();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.sin();
      complex4.sqrt1z();
      complex3.tanh();
      complex4.hashCode();
      complex2.isNaN();
      Complex complex5 = new Complex((-2.0), 1004.5774474564249);
      complex5.cosh();
      Complex complex6 = complex0.subtract(707.5206731);
      Complex complex7 = Complex.ONE;
      complex6.tan();
      complex1.add(1.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.NaN.multiply(3.378413594504258E148);
      Complex complex2 = complex1.ONE.exp();
      complex2.INF.divide(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.INF.getField();
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = new Complex(0.0, 0.0);
      complex4.acos();
      complex3.NaN.pow(complex4);
      complex0.readResolve();
      try { 
        complex3.INF.nthRoot((-2218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,218
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3947.2739914);
      Complex complex1 = complex0.INF.reciprocal();
      complex1.sqrt();
      Complex complex2 = new Complex(3947.2739914);
      Complex complex3 = complex0.pow(complex2);
      complex0.ZERO.getArgument();
      Complex complex4 = complex0.INF.cosh();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.ONE.multiply(complex6);
      complex7.I.toString();
      Complex complex8 = complex0.multiply(0);
      Complex complex9 = complex8.multiply(complex2);
      complex8.readResolve();
      Complex complex10 = complex7.log();
      Complex complex11 = complex8.NaN.divide(complex9);
      complex11.log();
      complex8.ZERO.pow(complex0);
      complex9.I.conjugate();
      Complex.valueOf(0.0);
      complex3.equals("(0.0, 1.0)");
      complex9.exp();
      complex10.tanh();
      Complex.valueOf((-1432.1171), 0.0);
      complex4.add(0.0);
      complex0.tan();
      complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(204.0);
      complex0.isNaN();
      Complex complex1 = complex0.ZERO.createComplex(0.0, 204.0);
      Complex complex2 = complex1.ONE.tan();
      complex2.ZERO.tanh();
      Complex complex3 = Complex.valueOf(204.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.ONE.divide((-1094.660070849962));
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex6.NaN.multiply(0);
      Complex complex8 = Complex.ZERO;
      complex7.ZERO.subtract(complex8);
      complex1.INF.sinh();
      complex4.I.acos();
      Complex complex9 = complex0.add(complex3);
      complex9.I.atan();
      complex9.ONE.getArgument();
      complex3.getArgument();
      complex3.ONE.acos();
      complex0.abs();
      Complex complex10 = Complex.valueOf(0.0, 204.0);
      complex2.equals(complex10);
      complex0.reciprocal();
      complex2.hashCode();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.INF.tan();
      complex5.INF.nthRoot(3400);
      Complex complex6 = complex4.INF.atan();
      complex6.sqrt();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.INF.add(complex0);
      complex9.add(2616.5465967429172);
      complex9.ZERO.negate();
      complex9.add(3740.0);
      complex9.NaN.sinh();
      complex3.ONE.readResolve();
      Complex complex10 = complex2.add(complex8);
      complex10.add(complex3);
      complex2.getArgument();
      Complex complex11 = complex9.acos();
      complex11.NaN.cos();
      Complex complex12 = complex8.sqrt1z();
      Complex complex13 = complex12.cos();
      Complex complex14 = Complex.valueOf(Double.NaN, 0.0);
      complex14.hashCode();
      complex14.reciprocal();
      complex7.divide(complex12);
      complex13.sqrt1z();
      complex2.acos();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.valueOf((-3939.102803298451));
      Complex complex6 = complex4.ZERO.subtract(complex5);
      Complex complex7 = complex2.INF.exp();
      Complex complex8 = complex1.pow((-3939.102803298451));
      Complex complex9 = complex1.pow(complex5);
      complex9.NaN.divide(838.0216772288);
      Complex complex10 = complex2.conjugate();
      complex4.abs();
      Complex complex11 = complex2.log();
      Complex complex12 = complex11.NaN.sqrt();
      complex12.ZERO.tanh();
      Complex complex13 = complex3.atan();
      Complex complex14 = complex13.sqrt();
      complex14.ONE.divide(complex3);
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex2.asin();
      Complex complex17 = complex6.subtract((-580.680656592481));
      Complex complex18 = complex13.sqrt1z();
      complex18.ONE.asin();
      complex8.add((-121.077623012));
      Complex complex19 = complex18.divide(complex17);
      Complex complex20 = complex19.I.add((-3939.102803298451));
      complex15.ONE.pow(complex16);
      complex10.isNaN();
      complex2.multiply(7);
      complex15.getArgument();
      complex7.abs();
      complex20.divide((-580.680656592481));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2860.54623295797, 2860.54623295797);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.ZERO.nthRoot(1);
      complex1.INF.sqrt();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex2.I.acos();
      Complex complex5 = complex2.NaN.multiply(0);
      Complex complex6 = Complex.valueOf(0.0);
      complex4.I.subtract(complex1);
      complex5.toString();
      complex0.getField();
      Complex complex7 = Complex.valueOf(0.0, 1112.0);
      Complex complex8 = complex7.NaN.divide((double) 1);
      complex8.subtract(complex3);
      complex2.abs();
      complex5.isInfinite();
      complex1.log();
      complex1.tanh();
      complex1.getReal();
      complex4.sinh();
      complex6.sqrt1z();
      complex1.getReal();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2043.4394);
      Complex complex1 = new Complex(0.0, 2043.4394);
      Complex complex2 = complex0.I.add(complex1);
      complex2.I.tanh();
      Complex complex3 = complex0.INF.tan();
      complex3.NaN.exp();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ZERO.reciprocal();
      complex2.NaN.conjugate();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex4.I.negate();
      Complex complex8 = Complex.valueOf(2043.4394, 0.0);
      complex8.INF.divide(0.0);
      complex8.I.cosh();
      complex7.ONE.multiply(0.0);
      Complex complex9 = Complex.valueOf(2043.4394, 5.858546779607288E-181);
      complex9.ZERO.tanh();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex2.NaN.sqrt();
      complex10.hashCode();
      complex1.conjugate();
      complex2.add(0.0);
      complex7.toString();
      Complex complex12 = complex9.exp();
      complex11.I.sqrt();
      complex12.INF.cos();
      complex12.ZERO.cos();
      complex12.getField();
      complex3.asin();
      complex1.reciprocal();
      Complex complex13 = complex6.sqrt();
      complex13.I.atan();
      Complex complex14 = complex11.pow(complex7);
      complex14.sqrt();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.INF.log();
      complex3.ONE.cosh();
      complex3.I.multiply(complex2);
      Complex complex4 = complex3.asin();
      complex4.ONE.sqrt();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.NaN.hashCode();
      Complex complex6 = complex2.ZERO.subtract(complex4);
      complex3.ZERO.exp();
      Complex complex7 = complex3.ONE.reciprocal();
      complex7.INF.pow(complex2);
      Complex.valueOf((-1652.0799170348766), (double) 425);
      Complex complex8 = complex0.multiply(425);
      complex8.I.hashCode();
      complex6.getArgument();
      Complex complex9 = complex8.ONE.sqrt1z();
      complex2.readResolve();
      complex9.INF.readResolve();
      complex4.readResolve();
      Complex complex10 = complex9.pow(0.0);
      complex0.getReal();
      complex6.subtract((-191.685));
      complex10.isInfinite();
      Complex.valueOf((-2083.495453), 0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2638.33), (-2638.33));
      complex0.ONE.log();
      complex0.ONE.conjugate();
      complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex.valueOf(0.0, 0.0);
      Complex complex0 = null;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.INF.multiply(0.0);
      try { 
        complex1.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(1369.432639);
      complex1.multiply(0.0);
      Complex.valueOf(0.0, 1.1677812418806031E-60);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.hashCode();
      Complex complex3 = complex2.I.add(869.3766443864974);
      complex2.ZERO.cos();
      complex3.I.acos();
      complex3.NaN.tan();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex0.add(4926.4810723);
      Complex complex6 = complex1.log();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.ONE.subtract(complex3);
      complex2.ZERO.multiply(complex6);
      complex7.NaN.nthRoot(896);
      Complex complex9 = Complex.valueOf(1.1677812418806031E-60);
      complex5.add(complex9);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      complex5.divide(complex10);
      complex7.sinh();
      complex10.getField();
      complex4.sqrt();
      complex8.subtract(227.273);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.013765811920166, 1.013765811920166);
      Complex complex1 = complex0.NaN.log();
      complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.divide(complex2);
      complex2.ZERO.pow(Double.NaN);
      Complex complex4 = complex2.sinh();
      complex4.ZERO.abs();
      complex0.ZERO.abs();
      Complex complex5 = complex0.multiply(1.0);
      complex5.isNaN();
      complex1.I.multiply(complex3);
      Complex complex6 = complex1.add(1.7077150344848633);
      complex6.ONE.multiply(1.7077150344848633);
      complex5.abs();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.multiply(1);
      complex6.nthRoot(3469);
      complex6.subtract(complex0);
      complex8.abs();
      complex1.acos();
      complex4.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.asin();
      complex0.getField();
      Complex complex1 = complex0.multiply(2015.7458325);
      Complex complex2 = complex0.ZERO.cos();
      complex1.NaN.multiply(0);
      Complex complex3 = complex2.I.conjugate();
      complex3.ZERO.conjugate();
      complex2.ONE.getField();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.sqrt();
      complex1.NaN.sin();
      complex4.INF.tan();
      complex1.NaN.multiply((-2536));
      complex5.INF.sqrt1z();
      complex1.readResolve();
      complex4.sqrt1z();
      complex2.multiply(complex0);
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(0);
      complex1.abs();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.INF.divide(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sqrt1z();
      complex4.ZERO.tanh();
      complex3.hashCode();
      complex1.isNaN();
      Complex complex5 = complex3.I.cosh();
      complex5.ONE.subtract(707.5206731);
      complex3.getReal();
      complex3.tan();
      complex3.add(1.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(366.61430119, (-2155.2005));
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      complex0.getArgument();
      complex1.createComplex(1.1593703222523284E-8, (-1747.4167996));
      complex1.sqrt();
      Complex complex2 = complex1.sinh();
      complex2.ONE.acos();
      complex0.pow(0.0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide((-2.650684279637763E-14));
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.conjugate();
      complex3.INF.subtract(complex1);
      Complex complex4 = complex0.INF.reciprocal();
      complex1.hashCode();
      Complex complex5 = complex0.cosh();
      complex5.NaN.negate();
      complex1.ONE.atan();
      complex1.NaN.readResolve();
      complex0.pow((-1682.9));
      complex4.I.log();
      complex1.getField();
      Complex complex6 = complex4.ONE.multiply(588);
      complex0.getField();
      complex4.negate();
      complex6.acos();
      complex4.hashCode();
      Complex complex7 = Complex.valueOf((double) 588);
      Complex complex8 = complex7.ONE.multiply(588);
      complex7.sqrt1z();
      complex6.sqrt();
      complex6.isNaN();
      Complex complex9 = complex8.multiply(complex5);
      complex9.INF.getArgument();
      Complex.valueOf((-1682.9));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ONE.sinh();
      try { 
        complex2.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.NaN.multiply(complex2);
      complex4.I.cosh();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex0.divide((-6.1837904549178745E-9));
      complex2.ONE.subtract(1622.41581173);
      complex6.NaN.multiply(826.39359744471);
      Complex complex7 = complex2.negate();
      complex5.isInfinite();
      complex7.multiply((-6.1837904549178745E-9));
      complex2.multiply(1);
      complex3.cos();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex.valueOf((-1229.0));
      complex2.INF.subtract(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.sqrt1z();
      complex0.sqrt1z();
      complex0.divide(complex2);
      complex4.exp();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.subtract(4.691921416188566E137);
      complex3.ONE.exp();
      complex2.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.divide(complex1);
      complex4.reciprocal();
      Complex.valueOf(70.94357);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2369.949878309, 2369.949878309);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.atan();
      Complex complex3 = complex0.add(2369.949878309);
      Complex.valueOf(2369.949878309, 2369.949878309);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.INF.pow(2369.949878309);
      complex5.I.sqrt();
      Complex complex7 = complex4.ONE.multiply(530);
      complex7.sinh();
      Complex complex8 = complex5.ZERO.reciprocal();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = Complex.valueOf(2369.949878309);
      complex9.INF.sinh();
      Complex complex11 = complex5.ZERO.pow(complex10);
      complex11.NaN.sin();
      Complex complex12 = complex0.reciprocal();
      complex11.cosh();
      complex1.I.getField();
      complex4.getReal();
      Complex complex13 = complex8.subtract(complex12);
      Complex complex14 = complex1.divide(complex9);
      Complex complex15 = complex4.pow(2369.949878309);
      Complex complex16 = complex8.pow(complex11);
      Complex.valueOf(2369.949878309);
      complex8.pow(complex2);
      Complex complex17 = complex16.divide(complex15);
      complex6.atan();
      Complex complex18 = Complex.ZERO;
      complex13.subtract(complex18);
      complex8.NaN.sqrt1z();
      complex14.equals(complex6);
      complex13.isNaN();
      complex17.acos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1015.15119), (-1015.15119));
      complex1.ONE.subtract((-1015.15119));
      try { 
        complex1.NaN.nthRoot((-1532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,532
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.NaN.asin();
      complex2.I.sqrt();
      complex2.sqrt1z();
      Complex complex3 = complex1.ONE.asin();
      complex3.ZERO.cos();
      complex3.ONE.pow(6.283185307179586);
      Complex complex4 = complex3.ZERO.sqrt();
      complex4.ZERO.cos();
      Complex complex5 = Complex.valueOf(6.283185307179586, 20.0);
      int int0 = (-6747);
      try { 
        complex5.INF.nthRoot((-6747));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -6,747
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
      Complex.valueOf(0.0);
      double double0 = 0.0;
      try { 
        complex0.NaN.nthRoot((-1118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,118
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-452.921035857174), (-452.921035857174));
      complex0.ZERO.divide(0.0);
      complex0.ZERO.toString();
      Complex complex1 = complex0.divide((-452.921035857174));
      complex1.multiply(complex0);
      complex1.sqrt1z();
      complex0.readResolve();
      Complex.valueOf(20.0, (-452.921035857174));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-526.674529381746), (-2269.6));
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.cos();
      complex3.INF.tanh();
      complex3.I.createComplex(36.7068484943, (-2269.6));
      Complex complex4 = Complex.valueOf(2316.897);
      complex0.isInfinite();
      complex0.tanh();
      Complex complex5 = complex0.sin();
      complex4.ZERO.getField();
      try { 
        complex5.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(437.481939859703, 437.481939859703);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.I.multiply(471);
      complex3.ONE.sinh();
      complex2.ONE.conjugate();
      Complex complex4 = complex0.INF.divide(0.0);
      complex3.getArgument();
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex0.createComplex((-4297.3772601307), 437.481939859703);
      Complex complex7 = complex5.divide(complex4);
      Complex complex8 = complex7.I.sqrt1z();
      complex8.ONE.multiply(0.0);
      complex2.sqrt1z();
      complex2.nthRoot(471);
      complex5.isInfinite();
      complex6.isInfinite();
      Complex.valueOf((-4297.3772601307), 3685.38597);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 20.0);
      Complex complex1 = Complex.valueOf((double) (-198));
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex0.I.multiply((-198));
      complex4.multiply(complex0);
      complex4.ONE.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.valueOf(478.59605684034);
      Complex.valueOf(20.0);
      Complex complex7 = complex6.INF.tanh();
      complex7.NaN.exp();
      Complex complex8 = Complex.valueOf(9.697418238031897E-8, (-2793.870214));
      Complex complex9 = complex8.exp();
      complex8.negate();
      complex3.getImaginary();
      Complex complex10 = complex9.ZERO.atan();
      complex10.ONE.multiply((-20.0));
      complex10.ONE.hashCode();
      complex9.multiply((-683.69));
      Complex complex11 = complex5.divide(complex9);
      Complex complex12 = complex5.negate();
      complex12.ONE.abs();
      complex11.getImaginary();
      Complex complex13 = complex1.divide(0.0);
      complex3.toString();
      complex5.asin();
      complex13.isInfinite();
      complex4.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(130.21044, 0.034552380442619324);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.negate();
      complex2.NaN.cosh();
      Complex complex3 = complex0.add(complex1);
      complex3.INF.hashCode();
      complex0.log();
      complex3.INF.getField();
      complex0.I.hashCode();
      complex0.getReal();
      complex3.getArgument();
      complex0.createComplex(130.21044, 130.21044);
      complex1.atan();
      Complex.valueOf(7.808670894670738E56, (-452.039));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.getField();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.log();
      complex0.INF.cosh();
      complex0.getField();
      Complex complex6 = complex1.ZERO.multiply(0.0);
      complex6.nthRoot(3187);
      Complex complex7 = complex0.createComplex(156.0499733, 0.0);
      complex7.abs();
      complex7.equals(complex0);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex6.INF.sinh();
      complex1.getReal();
      complex0.exp();
      complex6.readResolve();
      complex2.abs();
      Complex complex11 = complex1.sqrt1z();
      complex11.ZERO.sinh();
      complex9.divide(156.0499733);
      complex10.isNaN();
      complex10.pow(156.0499733);
      complex10.pow(complex11);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-3212.308919), (-3212.308919));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.NaN.tan();
      complex3.NaN.tan();
      complex2.INF.abs();
      Complex complex4 = complex1.sin();
      complex0.add((-3212.308919));
      complex0.subtract(0.0);
      Complex complex5 = complex4.acos();
      complex0.add(complex5);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-122.3880535759587), (-122.3880535759587));
      Complex complex1 = complex0.NaN.createComplex((-122.3880535759587), (-122.3880535759587));
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.I.sin();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.pow(6.283185307179586);
      complex0.hashCode();
      Complex complex4 = complex3.NaN.multiply(4755);
      Complex complex5 = complex4.I.multiply(complex0);
      Complex complex6 = complex3.createComplex(4221.3714, (-122.3880535759587));
      Complex complex7 = complex6.log();
      complex3.isNaN();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex8.NaN.nthRoot(4755);
      complex7.cosh();
      complex7.readResolve();
      complex5.negate();
      complex5.sqrt1z();
      complex1.isInfinite();
      complex7.multiply(2054.8213721352);
      complex2.sinh();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.0, 2.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.ONE.acos();
      complex0.acos();
      complex0.sinh();
      complex2.getReal();
      Complex.valueOf((-3330.0161166311204), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex0.subtract(complex2);
      complex3.NaN.divide((-540.8330162));
      Complex complex5 = complex3.I.createComplex((-540.8330162), (-540.8330162));
      complex5.ONE.subtract(complex0);
      Complex complex6 = complex5.I.add((double) 0);
      complex6.ZERO.negate();
      complex3.INF.cos();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.I.pow(complex7);
      complex7.I.getArgument();
      complex8.INF.nthRoot(1);
      Complex complex9 = complex0.multiply(0);
      Complex complex10 = complex9.NaN.exp();
      complex10.getArgument();
      Complex complex11 = complex1.tan();
      complex11.multiply(complex7);
      complex11.ZERO.acos();
      Complex complex12 = complex2.NaN.sin();
      complex9.add((-944.0));
      Complex complex13 = complex9.log();
      complex13.ZERO.tan();
      Complex complex14 = complex4.add(1712.0030338939093);
      complex14.getImaginary();
      complex12.sin();
      complex7.conjugate();
      complex10.hashCode();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.sin();
      complex2.ONE.readResolve();
      Complex complex3 = complex1.divide((-6.972256643013266E-8));
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex7.ZERO.tanh();
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex6.ONE.add(complex5);
      complex5.toString();
      complex2.I.readResolve();
      Complex complex10 = complex1.subtract((-6.972256643013266E-8));
      Complex complex11 = Complex.valueOf((-6.972256643013266E-8));
      Complex complex12 = complex11.negate();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      complex3.getArgument();
      double double0 = complex4.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertTrue(complex4.equals((Object)complex7));
      
      double double1 = complex2.getReal();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, double1, 0.01);
      
      Complex complex13 = complex1.reciprocal();
      complex5.getField();
      complex3.NaN.exp();
      complex1.INF.createComplex(0.0, 0.0);
      Complex complex14 = complex13.NaN.pow(Double.NaN);
      Complex complex15 = complex14.NaN.sqrt1z();
      Complex complex16 = Complex.valueOf(0.8414709848078965, 0.8414709848078965);
      Complex complex17 = Complex.valueOf((-655.01876629));
      Complex complex18 = complex16.ZERO.add(complex17);
      assertEquals((-655.01876629), complex18.getReal(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex13.divide(complex16);
      assertSame(complex19, complex10);
      
      complex16.conjugate();
      Complex complex20 = complex16.sinh();
      assertFalse(complex20.isInfinite());
      assertEquals(0.8414709848078965, complex16.getImaginary(), 0.01);
      assertEquals(0.6292837272374442, complex20.getReal(), 0.01);
      
      complex14.toString();
      assertSame(complex14, complex15);
      assertSame(complex14, complex6);
      assertSame(complex13, complex9);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 1;
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(932.268529444, 887.462);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.cos();
      complex2.createComplex(887.462, 932.268529444);
      Complex complex3 = complex1.I.tanh();
      assertEquals(1.557407724654902, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex4.cos();
      assertEquals(1.773775678340353, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.I.sqrt1z();
      complex6.NaN.getArgument();
      complex6.ONE.abs();
      Complex complex7 = complex0.ONE.add(0.0);
      Complex complex8 = complex0.multiply(1);
      Complex complex9 = Complex.valueOf(932.268529444, (-1143.947));
      Complex complex10 = complex7.asin();
      Complex.valueOf(0.5607312917709351);
      Complex complex11 = complex10.sqrt();
      complex0.createComplex(33.283272154181, 0.0);
      Complex complex12 = complex9.sin();
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertTrue(complex12.isInfinite());
      
      complex9.negate();
      Complex complex13 = complex11.asin();
      assertEquals((-0.6975498630535741), complex13.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex8));
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1105.80264);
      Complex complex1 = Complex.valueOf(1105.80264, 0.0);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.cosh();
      complex3.INF.getArgument();
      String string0 = complex0.toString();
      assertEquals("(0.0, 1105.80264)", string0);
      
      Complex complex4 = complex2.atan();
      complex0.readResolve();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex0.ONE.subtract(complex3);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex7 = complex5.createComplex((-1.0), 734.0);
      complex7.getReal();
      complex5.NaN.getArgument();
      Complex complex8 = complex1.createComplex(0.0, 0.47827017307281494);
      complex8.INF.multiply(1);
      Complex complex9 = complex1.add(734.0);
      assertEquals(1839.80264, complex9.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf(0.0);
      assertTrue(complex10.equals((Object)complex6));
      
      complex5.isInfinite();
      assertEquals(0.4643371125098867, complex5.getImaginary(), 0.01);
      assertEquals((-0.885658538007725), complex5.getReal(), 0.01);
      
      Complex complex11 = complex4.sinh();
      assertEquals(2.0502906144685025E-6, complex11.getImaginary(), 0.01);
      assertEquals(2.2990307439207083, complex11.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex12 = Complex.valueOf(1.4033570289611816);
      assertEquals(1.4033570289611816, complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.ONE.hashCode();
      Complex complex2 = complex0.divide(0.0);
      complex1.NaN.getArgument();
      Complex complex3 = complex0.ZERO.pow(Double.NaN);
      assertSame(complex3, complex2);
      
      Complex complex4 = complex1.createComplex((-2349.38541), 1074.65846631587);
      Complex complex5 = complex4.INF.sinh();
      assertTrue(complex5.isNaN());
      
      double double0 = complex1.getImaginary();
      assertEquals((-0.8813735870195429), double0, 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }
}
