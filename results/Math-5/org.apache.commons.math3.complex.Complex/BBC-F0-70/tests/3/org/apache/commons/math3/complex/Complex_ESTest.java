/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:31:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.createComplex((-1.0), 2.872649515690124E56);
      complex1.toString();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.pow(complex2);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-1744.2060971268425), 0.9999735424868893);
      Complex complex1 = complex0.multiply((-1744.2060971268425));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ZERO.add((-1744.2060971268425));
      complex3.abs();
      complex0.INF.conjugate();
      Complex.valueOf((-3.118741081244705E266), (-1744.2060971268425));
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.multiply(complex5);
      complex0.getField();
      complex6.INF.conjugate();
      Complex complex7 = complex0.createComplex(2.872649515690124E56, (-1744.2060971268425));
      complex7.ZERO.toString();
      complex5.atan();
      complex0.pow(complex4);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(7.296670293275653E-10, 7.296670293275653E-10);
      Complex complex2 = complex1.acos();
      complex2.I.tan();
      Complex complex3 = Complex.ONE;
      complex2.tan();
      complex1.toString();
      complex3.pow(1109.60223745224);
      complex1.tan();
      Complex complex4 = Complex.ZERO;
      complex3.nthRoot(1624);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.9219478787856753E-98, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1581.3465893499, 1581.3465893499);
      complex0.hashCode();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-1.4674011002723395);
      double double1 = 1192.0129;
      Complex complex1 = new Complex((-1.4674011002723395), 1192.0129);
      Complex complex2 = null;
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex0.multiply(3.2441826014060764E125);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(6.12956339275823E-9, 1.0);
      Complex complex3 = new Complex(1.1236678658299506E-4, 5.456757565532369E272);
      Complex complex4 = complex0.acos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 2216.783842126611);
      complex5.ZERO.reciprocal();
      Complex complex6 = complex4.tan();
      complex1.multiply(672);
      complex4.multiply(448);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = Complex.NaN;
      complex1.multiply(complex0);
      Complex complex2 = new Complex((-1.784194848E7), Double.NaN);
      complex1.acos();
      Complex complex3 = Complex.NaN;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.createComplex(Double.POSITIVE_INFINITY, 2.2756495475769043);
      complex1.negate();
      Complex complex3 = complex0.acos();
      complex3.ONE.cosh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex((-1470.6884922640766), Double.POSITIVE_INFINITY);
      complex2.acos();
      Complex complex6 = Complex.I;
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-950.4646));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.INF.add(complex0);
      complex0.negate();
      Complex complex4 = complex3.multiply(1386.63817127);
      complex4.INF.createComplex(2588.08, 2.0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.I.asin();
      complex3.abs();
      Complex complex7 = complex5.cosh();
      complex2.negate();
      Complex complex8 = complex2.add(Double.POSITIVE_INFINITY);
      complex8.ONE.add(complex1);
      complex7.NaN.readResolve();
      Complex complex9 = complex2.add(complex6);
      Complex complex10 = complex0.sqrt();
      complex10.ONE.getArgument();
      Complex complex11 = complex7.sin();
      complex6.createComplex(1386.63817127, (-950.4646));
      complex6.toString();
      complex9.nthRoot(1300);
      Complex complex12 = complex2.exp();
      Complex complex13 = complex6.tan();
      complex13.pow(complex4);
      complex8.sin();
      complex12.pow(complex5);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-928.089));
      complex11.tan();
      complex7.abs();
      complex6.divide(Double.POSITIVE_INFINITY);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(19.20864994899324, 4264.157548661668);
      Complex complex2 = Complex.valueOf(570.3007572803348, (-14.588153122574202));
      complex2.subtract(complex0);
      complex1.acos();
      Complex complex3 = new Complex((-3271.0), 1.627922535);
      Complex complex4 = Complex.ONE;
      complex4.ONE.hashCode();
      complex1.acos();
      Complex complex5 = new Complex((-14.588153122574202), Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.tan();
      complex6.multiply(complex5);
      Complex.valueOf(19.20864994899324, (-14.588153122574202));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.281578975407609E-22), (-2.281578975407609E-22));
      complex0.ONE.atan();
      Complex complex1 = complex0.createComplex(Double.NaN, (-2.281578975407609E-22));
      Complex complex2 = complex1.cosh();
      complex2.ZERO.nthRoot(1);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex5.I.createComplex(1, Double.NaN);
      complex6.ZERO.sinh();
      complex5.ZERO.nthRoot(1468);
      complex4.ZERO.nthRoot(1);
      Complex complex7 = complex4.INF.pow(Double.NaN);
      complex7.I.tanh();
      Complex complex8 = complex3.ONE.pow(complex2);
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex1.divide(complex3);
      complex10.I.tanh();
      Complex complex11 = complex2.atan();
      Complex complex12 = Complex.valueOf((double) 1);
      complex12.INF.multiply(1);
      complex12.NaN.abs();
      complex4.sqrt();
      complex11.log();
      complex3.readResolve();
      complex9.sqrt();
      complex11.sinh();
      complex3.log();
      complex2.acos();
      complex8.acos();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(4.218440703602533E-170, 0.0);
      Complex complex2 = Complex.valueOf(1.836121932981337, (-1.166799420361101E-7));
      complex2.subtract(complex0);
      complex2.acos();
      Complex complex3 = new Complex(3.9928970846053405E15, (-20.0));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.acos();
      complex5.NaN.divide(complex4);
      Complex complex6 = new Complex((-14.588153122574202), 2927.7796208);
      complex3.tan();
      Complex.valueOf(2927.7796208, 0.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1278.0));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.log();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex6.sinh();
      complex8.ZERO.subtract((-1278.0));
      complex5.acos();
      complex1.ZERO.add(17.06);
      complex1.pow((-1278.0));
      complex3.log();
      complex7.divide(complex1);
      complex7.conjugate();
      complex4.abs();
      complex0.atan();
      Complex complex9 = complex1.log();
      complex9.INF.pow(complex0);
      complex7.nthRoot(1359);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex((-3115.4578113424), 1.0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2126.5477271757645, 2126.5477271757645);
      Complex complex1 = complex0.ONE.atan();
      complex1.NaN.subtract((-174.0));
      Complex complex2 = complex0.ONE.atan();
      complex2.ZERO.atan();
      Complex complex3 = complex0.add((-245.32404777));
      complex3.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(1825.2, (-245.32404777));
      complex4.ZERO.exp();
      Complex complex5 = complex0.NaN.divide(1825.2);
      complex5.exp();
      complex5.getArgument();
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex8.pow(complex6);
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex0.cos();
      complex11.NaN.divide(complex8);
      Complex complex12 = complex4.sqrt();
      complex12.INF.hashCode();
      complex10.createComplex(1825.2, 1825.2);
      complex1.getField();
      complex6.NaN.divide(complex11);
      complex4.sinh();
      complex9.getField();
      complex7.subtract((-174.0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      complex0.I.createComplex(0.0, 0.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      complex0.sin();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.ONE.createComplex((-1475.469), 594.9031414610877);
      complex0.I.hashCode();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.I.subtract(complex1);
      complex3.I.readResolve();
      complex0.NaN.getField();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2633.9762273));
      Complex complex6 = complex5.ONE.conjugate();
      Complex.valueOf(20.0, (-1475.469));
      Complex complex7 = complex5.NaN.cosh();
      Complex complex8 = complex0.add(Double.NaN);
      Complex complex9 = Complex.valueOf((-2881.21366574));
      complex9.sinh();
      complex0.abs();
      complex6.readResolve();
      complex3.divide(complex2);
      complex3.abs();
      complex5.sqrt();
      complex4.conjugate();
      complex8.tan();
      complex8.sinh();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0));
      complex1.toString();
      complex1.tanh();
      complex1.subtract((-616.02925));
      Complex.valueOf((-4656.7367466), (-828.37808));
      complex0.exp();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex((-2536.8509259826), (-3048.91023));
      Complex complex1 = Complex.valueOf((-3048.91023));
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex(2813.4308971);
      complex4.subtract(complex2);
      Complex complex5 = Complex.ONE;
      complex5.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-3048.91023));
      Complex complex8 = new Complex((-483.933428), Double.POSITIVE_INFINITY);
      Complex.valueOf(19.20864994899324);
      Complex complex9 = Complex.NaN;
      complex6.acos();
      Complex complex10 = complex9.tan();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1268.8551372), (-1.2838740533217976));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.cos();
      Complex complex1 = Complex.valueOf(6.380177790989479E207, 2.2838740533217976);
      complex1.getField();
      complex0.I.sinh();
      Complex complex2 = Complex.valueOf(4.734847423151223E-4);
      complex2.createComplex(463.0, 4.734847423151223E-4);
      complex1.acos();
      complex2.conjugate();
      Complex complex3 = complex0.acos();
      complex1.asin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(2665);
      Complex complex1 = complex0.multiply(2665);
      Complex complex2 = complex1.multiply((double) 2665);
      complex1.acos();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-4011.335), (-3437.17632414));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.NaN.pow((-3543.034097));
      complex3.cosh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex4.ONE.add(1046.12235365);
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.valueOf(20.0);
      Complex complex8 = complex7.tanh();
      complex6.getField();
      complex0.subtract(complex1);
      complex8.atan();
      Complex complex9 = Complex.valueOf((-963.0));
      complex9.I.sqrt();
      complex9.tan();
      Complex complex10 = complex6.sqrt();
      complex9.INF.sinh();
      Complex complex11 = complex9.subtract(complex10);
      complex11.log();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex0.multiply(37.57086427108928);
      complex3.subtract(complex13);
      Complex complex14 = complex2.multiply(0.2184450328350067);
      complex1.log();
      complex14.abs();
      complex8.sinh();
      complex5.toString();
      complex12.readResolve();
      Complex.valueOf(0.25671686333325927);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1698.20458, 1698.20458);
      Complex.valueOf(2.881416869529271E-112, (-5521.148294977347));
      Complex complex1 = complex0.add(1698.20458);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(2.9020207004099463, (-2290.2375569264177));
      complex1.exp();
      Complex complex2 = complex0.tanh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-346.5960240692866), (-346.5960240692866));
      Complex complex1 = Complex.I;
      complex1.multiply((-1524));
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(318.054532187, (-4260.13968));
      Complex complex1 = complex0.createComplex((-1465.240383463), 6383007.144576216);
      complex1.negate();
      Complex complex2 = complex1.subtract(complex0);
      complex0.acos();
      Complex complex3 = Complex.NaN;
      complex3.conjugate();
      Complex complex4 = new Complex((-1.784194848E7), Double.POSITIVE_INFINITY);
      complex0.acos();
      Complex complex5 = Complex.valueOf(6383007.144576216, (-787.722));
      complex5.tan();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(6383007.144576216, 76.40012);
      Complex complex2 = complex1.acos();
      complex2.pow(complex1);
      complex1.acos();
      complex2.asin();
      Complex complex3 = new Complex((-1870.24031425), 0.0);
      Complex complex4 = new Complex(1959.2980253427893);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1465.240383463));
      Complex complex1 = complex0.I.pow(0.18499611533288368);
      Complex complex2 = complex1.cos();
      complex2.atan();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 22317.87421110189);
      complex0.pow(199.45);
      Complex complex1 = Complex.I;
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.toString();
      complex0.tanh();
      complex0.createComplex((-1.0), (-4.074278020187305E13));
      Complex complex1 = Complex.ZERO;
      complex1.acos();
      Complex complex2 = new Complex(0.0, 8.614854799915606E7);
      Complex complex3 = complex2.conjugate();
      complex3.acos();
      complex3.asin();
      Complex complex4 = new Complex((-1.0));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ONE.sinh();
      complex0.I.getField();
      Complex complex3 = complex0.createComplex(0.0, (-1056.0));
      complex3.INF.acos();
      complex3.I.conjugate();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.asin();
      complex5.INF.multiply(complex2);
      complex4.tan();
      Complex.valueOf(2.414213562373095, (-20.0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.cos();
      complex0.I.getField();
      Complex complex1 = complex0.createComplex(0.0, (-1056.0));
      complex1.INF.acos();
      Complex complex2 = complex1.I.conjugate();
      complex2.cosh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.createComplex(8.069984512111955E198, (-445.096548127));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.multiply((-445.096548127));
      complex3.subtract(complex4);
      complex4.acos();
      Complex complex5 = Complex.NaN;
      complex2.conjugate();
      Complex complex6 = new Complex(Double.NaN, 1434.5);
      complex5.acos();
      Complex complex7 = complex6.asin();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = Complex.I;
      complex2.nthRoot(1);
      complex0.multiply(complex1);
      Complex.valueOf((double) 1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(Double.NaN, (-1033.71));
      Complex complex5 = complex4.reciprocal();
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.cos();
      complex0.nthRoot(2963);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow(complex0);
      complex1.multiply(2963);
      Complex complex4 = complex2.createComplex(483.787, (-951.3521662419043));
      Complex complex5 = new Complex(2.356194476609951);
      complex5.acos();
      complex3.createComplex(2963, (-82.972315849));
      complex1.cosh();
      complex4.tan();
      complex1.reciprocal();
      // Undeclared exception!
      complex2.nthRoot(2963);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = 2581;
      complex0.nthRoot(2581);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.cos();
      Complex complex1 = Complex.valueOf((-1126.63), 75.8864451);
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(75.8864451, 75.8864451);
      Complex complex4 = complex3.multiply(complex1);
      complex4.I.negate();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex2.createComplex(1431.909084504, (-114.2823402152055));
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.ONE;
      complex4.conjugate();
      complex4.acos();
      complex3.asin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 9.897578610425914;
      Complex.valueOf(9.897578610425914);
      double double1 = 4330116.069029867;
      Complex complex0 = Complex.NaN;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      complex0.I.getField();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.multiply(0.0);
      complex2.tanh();
      complex0.multiply(651);
      complex3.nthRoot(1);
      Complex.valueOf(Double.NaN, (double) 651);
      complex2.add(complex1);
      Complex.valueOf(0.0, 4287.702988042116);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract((-4656.736746609484));
      Complex complex3 = Complex.valueOf((-4656.736746609484), (-1.0));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.NaN.exp();
      complex5.I.multiply((-4656.736746609484));
      Complex complex6 = complex0.sqrt();
      complex4.acos();
      complex6.asin();
      complex3.cos();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      complex0.I.getField();
      Complex complex2 = complex0.createComplex((-2986.8), (-2986.8));
      Complex complex3 = complex2.acos();
      complex0.conjugate();
      Complex complex4 = complex3.acos();
      complex1.asin();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(6.283185307179586);
      Complex complex2 = complex1.add(6.283185307179586);
      complex2.I.multiply(6.283185307179586);
      Complex complex3 = new Complex(0.3241194486618042, (-2084.368159412437));
      Complex complex4 = complex2.add((-2084.368159412437));
      complex1.add(3.778006886646546);
      complex3.reciprocal();
      complex0.toString();
      complex4.isInfinite();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-2276.35422));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.tan();
      Complex.valueOf(0.0, (-2276.35422));
      complex3.add(complex4);
      Complex.valueOf(20.0, (-2276.35422));
      Complex complex5 = Complex.ONE;
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
      complex1.sinh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(11.158673211528967, 11.158673211528967);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.cos();
      complex0.I.getField();
      Complex complex1 = complex0.createComplex(0.0, (-1056.0));
      complex1.INF.acos();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = Complex.ONE;
      complex0.sqrt();
      complex0.negate();
      complex2.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.conjugate();
      complex3.nthRoot(1);
      complex2.asin();
      Complex complex4 = Complex.valueOf(1310.0, (-1492.351));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex5.pow((-1492.351));
      complex5.acos();
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = complex3.subtract(complex5);
      Complex complex10 = complex3.exp();
      complex7.sqrt();
      complex6.cos();
      complex6.NaN.multiply(2863);
      complex10.sqrt1z();
      complex9.isNaN();
      complex1.readResolve();
      Object object0 = complex9.readResolve();
      complex6.equals(object0);
      complex8.isInfinite();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-15.570312));
      Complex complex1 = Complex.valueOf((-357.824), (-357.824));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.INF.atan();
      complex3.ZERO.log();
      Complex complex4 = complex3.ZERO.sinh();
      complex4.ZERO.subtract(complex0);
      complex0.getField();
      Complex complex5 = complex0.divide((-357.824));
      Complex complex6 = complex1.multiply(1.0);
      Complex complex7 = complex5.multiply((-2684));
      complex7.NaN.conjugate();
      complex2.ZERO.subtract(complex6);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.pow(complex8);
      Complex complex10 = complex9.ZERO.multiply(1.0);
      complex10.INF.getField();
      complex9.ONE.atan();
      complex8.atan();
      complex7.getReal();
      complex8.getReal();
      complex2.sinh();
      complex2.readResolve();
      complex4.multiply((-2684));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-3459.8652332804), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.multiply((-3459.8652332804));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.I.sqrt();
      complex2.multiply(complex3);
      complex0.abs();
      complex0.I.getArgument();
      complex1.getReal();
      complex4.multiply(330.2474718585429);
      complex0.tanh();
      Complex complex5 = Complex.ZERO;
      complex5.multiply(6488);
      // Undeclared exception!
      complex1.nthRoot(1307772550);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.cos();
      complex0.nthRoot(2963);
      Complex complex2 = complex0.tan();
      complex2.pow(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.conjugate();
      complex2.multiply((double) 2963);
      complex4.asin();
      complex1.getField();
      complex1.getArgument();
      complex0.exp();
      complex5.negate();
      Complex complex6 = complex1.sinh();
      complex1.INF.sqrt();
      complex5.subtract(4183.17);
      complex4.subtract(2.3820250362443495E-79);
      complex6.exp();
      complex3.getImaginary();
      Complex complex7 = Complex.NaN;
      complex7.conjugate();
      complex6.pow(complex3);
      complex3.asin();
      Complex complex8 = complex2.sinh();
      Complex complex9 = Complex.I;
      complex8.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      complex0.subtract(complex1);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.cos();
      complex0.nthRoot(2963);
      Complex complex2 = complex1.subtract(1.0);
      Complex complex3 = complex0.subtract(330.787774164411);
      complex3.ONE.atan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.tan();
      complex1.conjugate();
      Complex complex6 = complex4.multiply(2377.01474392);
      Complex complex7 = complex0.asin();
      complex1.getField();
      complex1.getArgument();
      Complex complex8 = complex7.exp();
      complex6.negate();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.subtract(1.1236678658299506E-4);
      Complex complex11 = complex1.subtract(330.787774164411);
      Complex complex12 = complex4.exp();
      complex10.getImaginary();
      complex10.conjugate();
      complex12.pow(complex4);
      complex4.asin();
      complex12.sinh();
      Complex complex13 = complex0.divide(complex5);
      complex11.sqrt();
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(6.283185307179586);
      Complex complex2 = complex1.add(6.283185307179586);
      Complex complex3 = complex2.I.multiply(6.283185307179586);
      complex2.INF.nthRoot(1);
      Complex complex4 = complex1.I.multiply(complex3);
      Complex complex5 = complex1.I.conjugate();
      complex5.INF.nthRoot(1);
      Complex complex6 = complex0.asin();
      complex2.multiply((-154.0));
      complex3.asin();
      complex6.getField();
      complex2.getArgument();
      Complex complex7 = complex4.exp();
      complex7.negate();
      complex0.sinh();
      Complex complex8 = complex5.subtract((-2276.35422));
      Complex complex9 = complex8.subtract((double) 1);
      Complex complex10 = complex5.exp();
      complex9.getImaginary();
      complex8.conjugate();
      complex1.pow(complex5);
      Complex complex11 = Complex.ONE;
      complex11.asin();
      complex3.sinh();
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      complex3.nthRoot(1);
      complex2.asin();
      Complex complex4 = Complex.valueOf(1310.0, (-1492.351));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex5.pow((-1492.351));
      complex5.acos();
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = complex3.subtract(complex5);
      Complex complex10 = complex3.exp();
      complex7.sqrt();
      complex6.cos();
      complex6.NaN.multiply(2863);
      complex10.sqrt1z();
      complex9.isNaN();
      complex1.readResolve();
      Object object0 = complex9.readResolve();
      complex6.equals(object0);
      complex8.isInfinite();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(6.283185307179586);
      complex1.add(6.283185307179586);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex1.multiply(complex2);
      complex1.negate();
      complex3.multiply(3398.874);
      Complex complex4 = complex1.tan();
      complex4.I.hashCode();
      Complex complex5 = Complex.valueOf((-1058.09473157641), Double.NaN);
      complex0.add(complex2);
      Complex.valueOf(0.0, 0.0);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.toString();
      Complex complex1 = complex0.tanh();
      complex1.subtract((-4656.736746609484));
      Complex complex2 = Complex.valueOf((-4656.736746609484), (-1.0));
      complex2.isInfinite();
      Complex complex3 = Complex.ZERO;
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(6.283185307179586);
      Complex complex2 = complex1.add(6.283185307179586);
      Complex complex3 = complex2.I.multiply(6.283185307179586);
      complex2.INF.nthRoot(1);
      Complex complex4 = complex1.I.multiply(complex3);
      complex1.I.conjugate();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.multiply(414.0);
      complex5.tanh();
      Complex complex7 = complex6.multiply(2002);
      complex4.nthRoot(199);
      complex0.add((double) 1);
      Complex complex8 = complex6.pow(414.0);
      Complex complex9 = complex7.log();
      complex4.sqrt();
      complex9.negate();
      complex8.divide((double) 199);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3438.14887, 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex3.INF.subtract(0.0);
      complex2.I.tan();
      complex2.ZERO.conjugate();
      Complex complex5 = complex0.multiply(3438.14887);
      complex5.ZERO.asin();
      complex5.INF.getField();
      complex5.getArgument();
      Complex complex6 = complex0.exp();
      complex6.negate();
      Complex complex7 = Complex.ONE;
      complex5.pow((-2312.25353));
      Complex complex8 = complex4.log();
      complex8.sqrt();
      Complex complex9 = Complex.valueOf(1102.964226131515);
      complex9.negate();
      complex9.divide(2.3725087624341041E-7);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3438.14887, 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.INF.subtract(0.0);
      complex3.INF.subtract(0.0);
      Complex complex4 = complex1.ZERO.multiply(2883);
      complex4.I.tan();
      complex4.ZERO.conjugate();
      Complex complex5 = complex0.multiply(3438.14887);
      complex5.ZERO.asin();
      complex5.INF.getField();
      complex5.getArgument();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.negate();
      complex0.sinh();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex8.NaN.subtract((double) 2883);
      Complex complex10 = complex2.exp();
      complex6.getImaginary();
      Complex complex11 = complex9.conjugate();
      complex10.pow(complex5);
      complex2.asin();
      complex7.sinh();
      complex8.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.multiply(1.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ZERO.subtract(1.0);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex0.ONE.subtract(complex3);
      complex4.ONE.sqrt1z();
      complex0.INF.readResolve();
      complex4.createComplex(6.283185307179586, 1.0);
      Complex complex6 = Complex.NaN;
      complex1.equals(complex6);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1811.9074822367038, 1811.9074822367038);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1026.84);
      Complex complex2 = complex0.subtract(1811.9074822367038);
      Complex complex3 = complex2.ONE.multiply(0);
      complex3.I.cosh();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.multiply(complex2);
      complex0.subtract(complex1);
      Complex complex9 = complex5.sqrt();
      Complex complex10 = Complex.NaN;
      complex9.divide(complex10);
      complex8.add((double) 0);
      complex6.hashCode();
      complex4.isNaN();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.sin();
      Complex complex2 = new Complex(1684.77);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.INF.negate();
      complex3.I.getField();
      Complex complex5 = Complex.valueOf(1684.77, 1684.77);
      complex5.ZERO.getArgument();
      complex3.I.divide(complex2);
      Complex complex6 = complex2.multiply(4272.5539);
      Complex complex7 = complex0.multiply(1310);
      complex7.sqrt();
      Complex complex8 = Complex.valueOf(1684.77, (double) 1310);
      Complex complex9 = complex2.divide((double) 1310);
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex10.pow(complex7);
      Complex complex12 = complex2.add((double) 1310);
      complex9.getArgument();
      complex8.negate();
      complex12.sqrt();
      complex6.getField();
      Complex complex13 = complex4.conjugate();
      complex3.sinh();
      complex11.tanh();
      complex7.multiply(complex8);
      complex1.multiply(complex2);
      complex13.reciprocal();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cos();
      complex1.I.nthRoot(1);
      Complex complex2 = Complex.valueOf(3579.258750122);
      complex2.nthRoot(1896);
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex0.atan();
      complex0.isInfinite();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex5.INF.multiply((double) 1896);
      complex4.NaN.subtract(complex5);
      complex6.add(322.1);
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex7.ZERO.cosh();
      complex5.I.getField();
      complex2.cos();
      complex6.subtract(0.0);
      complex3.NaN.exp();
      Complex.valueOf(0.0);
      complex8.getField();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-1.0));
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex1.INF.exp();
      complex0.ONE.getField();
      complex0.getArgument();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.cosh();
      complex5.INF.abs();
      Complex complex6 = complex5.INF.sin();
      complex6.INF.tan();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.pow((-6.552819560439773E-9));
      Complex complex9 = complex1.asin();
      complex9.reciprocal();
      complex8.pow(complex0);
      complex0.abs();
      Complex complex10 = complex1.add(complex8);
      complex10.INF.readResolve();
      Complex complex11 = complex0.subtract(complex3);
      Complex complex12 = complex11.log();
      complex11.NaN.readResolve();
      complex10.divide(complex2);
      complex12.multiply(7);
      complex6.createComplex(0.0, 0.0);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-3459.8652332804), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.multiply((-3459.8652332804));
      Complex complex3 = Complex.NaN;
      complex3.I.sqrt();
      Complex complex4 = complex2.multiply(complex3);
      complex0.abs();
      complex0.I.getArgument();
      complex1.getReal();
      complex0.acos();
      Complex complex5 = complex1.cos();
      complex5.createComplex(0.0, (-3459.8652332804));
      Complex complex6 = Complex.valueOf(0.0);
      complex0.divide(complex6);
      Complex complex7 = complex0.tan();
      complex2.tanh();
      complex1.getImaginary();
      Complex complex8 = complex2.asin();
      complex8.I.readResolve();
      complex7.abs();
      complex8.cos();
      complex4.multiply((-1990));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.6192569732666016);
      complex1.ZERO.getField();
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex2.INF.negate();
      complex3.ONE.cos();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(5055.5);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.INF.pow(2.6192569732666016);
      complex3.ONE.divide(complex2);
      Complex complex7 = complex0.subtract(0.0);
      complex7.NaN.add(complex6);
      complex7.I.tan();
      complex4.negate();
      Complex complex8 = complex2.sin();
      complex8.NaN.divide(1132.517114877153);
      complex4.INF.divide(5055.5);
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex4.createComplex(0.0, (-300.8061));
      complex11.readResolve();
      complex10.toString();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.NaN.toString();
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.NaN.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.tan();
      complex0.getImaginary();
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex3.sin();
      complex2.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.ONE.createComplex(1292.626221019, 1292.626221019);
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex4.NaN.multiply(28.992798160297);
      complex9.I.multiply(complex4);
      complex7.INF.getField();
      complex4.asin();
      complex2.equals(complex3);
      complex8.ONE.hashCode();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex9.multiply(complex1);
      complex12.I.abs();
      complex5.divide(complex8);
      Complex.valueOf(28.992798160297, Double.POSITIVE_INFINITY);
      complex11.getField();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1349.0, 1349.0);
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.INF.negate();
      Complex complex2 = new Complex(1349.0);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.I.divide(1349.0);
      Complex complex6 = complex0.I.asin();
      complex0.isNaN();
      Complex complex7 = complex6.INF.pow(complex0);
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex0.subtract(complex6);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.sinh();
      complex11.ZERO.negate();
      complex2.atan();
      complex6.NaN.readResolve();
      Complex complex12 = complex2.cos();
      complex6.ZERO.sinh();
      Complex.valueOf(0.0, 1349.0);
      complex12.asin();
      complex3.isInfinite();
      Complex complex13 = complex10.multiply(1349.0);
      complex13.ONE.log();
      complex12.divide(complex5);
      complex9.conjugate();
      complex0.tan();
      complex4.tan();
      complex8.sinh();
      complex10.isInfinite();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.add(6.283185307179586);
      Complex complex2 = complex1.multiply((-1));
      Complex complex3 = complex2.I.add(6.283185307179586);
      Complex complex4 = complex3.INF.reciprocal();
      complex4.ONE.toString();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-2276.35422));
      Complex complex1 = complex0.cos();
      complex0.createComplex(0.0, (-2276.35422));
      complex1.cosh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = new Complex(741.66946191, 1.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.INF.subtract(complex1);
      Complex complex3 = complex0.INF.conjugate();
      complex3.ZERO.divide(complex1);
      complex3.ZERO.divide(complex1);
      complex3.ZERO.tan();
      complex0.ZERO.getField();
      Complex complex4 = complex0.sqrt();
      complex4.getArgument();
      complex1.getReal();
      complex0.sqrt1z();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.divide(2.0);
      complex1.log();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      int int0 = (-58);
      complex0.ZERO.multiply((-58));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.ONE.divide((double) (-58));
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex3.I.exp();
      complex3.INF.getField();
      complex0.ONE.abs();
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.atan();
      complex1.exp();
      Complex complex2 = complex0.pow(1298.668625203105);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.NaN.exp();
      complex4.ONE.negate();
      Complex complex5 = Complex.valueOf(3402.672123280575, 1298.668625203105);
      complex5.I.exp();
      complex2.toString();
      complex2.pow(1298.668625203105);
      Complex complex6 = Complex.INF;
      complex2.equals(complex6);
      complex6.isNaN();
      complex2.divide(0.0);
      complex2.reciprocal();
      Complex complex7 = complex6.divide(1298.668625203105);
      Complex complex8 = complex2.multiply(complex7);
      Complex complex9 = complex8.I.tanh();
      Complex.valueOf(1298.668625203105, 1056.681832);
      complex9.ONE.acos();
      complex7.ONE.reciprocal();
      complex6.getReal();
      Complex complex10 = complex7.divide(0.0);
      complex10.negate();
      int int0 = (-1);
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.pow((-1.2499290483167703E-9));
      complex1.NaN.getArgument();
      complex1.ZERO.getArgument();
      complex1.equals("(1.0, 0.0)");
      complex0.subtract(complex1);
      Complex complex2 = complex0.conjugate();
      complex2.subtract((-1.2499290483167703E-9));
      Complex complex3 = complex2.sin();
      complex3.I.abs();
      complex1.cos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      complex0.cos();
      complex0.nthRoot(2963);
      Complex complex1 = complex0.tan();
      complex1.pow(complex0);
      complex1.exp();
      Complex complex2 = complex1.multiply(0.0);
      complex0.tanh();
      complex2.INF.multiply(2963);
      // Undeclared exception!
      complex2.nthRoot(2963);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = (-660.0481883094693);
      Complex complex0 = new Complex(1788.578, (-660.0481883094693));
      Complex complex1 = complex0.add((-660.0481883094693));
      try { 
        complex1.INF.nthRoot((-4890));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,890
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.cosh();
      complex2.ONE.exp();
      Complex complex3 = complex0.createComplex((-3705.713), (-1755.38647776));
      Complex complex4 = complex3.exp();
      complex3.getField();
      complex3.isNaN();
      Complex complex5 = complex4.subtract(complex0);
      complex5.getField();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply((-469.979675));
      Complex complex1 = complex0.cosh();
      complex1.I.readResolve();
      complex1.divide(0.0);
      complex0.getImaginary();
      complex1.isNaN();
      Complex complex2 = complex1.createComplex((-1484.433014082005), 0.0);
      complex2.ZERO.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex3 = complex2.sinh();
      complex3.I.multiply(complex0);
      Complex.valueOf(0.0);
      Complex complex4 = complex1.sqrt1z();
      complex4.NaN.nthRoot(1897);
      complex0.nthRoot(466);
      Complex complex5 = Complex.valueOf((-1308.9383));
      complex5.isInfinite();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getArgument();
      complex0.hashCode();
      Complex complex1 = complex0.pow(1.5707963267948966);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex0.multiply(0.0);
      complex3.sin();
      Complex complex5 = complex1.INF.subtract(1.5707963267948966);
      Complex complex6 = complex4.I.sqrt1z();
      Complex complex7 = complex1.reciprocal();
      complex7.I.multiply(complex5);
      complex2.ZERO.sqrt();
      complex2.ONE.hashCode();
      Complex complex8 = complex1.sin();
      complex8.NaN.hashCode();
      complex3.isInfinite();
      Complex.valueOf(0.0);
      Complex complex9 = complex8.sqrt1z();
      complex4.readResolve();
      Complex complex10 = complex9.multiply(1344);
      complex10.ZERO.add(complex7);
      Complex complex11 = complex4.createComplex(0.0, 1.5707963267948966);
      complex11.I.pow(1154.57);
      complex6.subtract((double) 1344);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.divide(0.0);
      complex3.NaN.getField();
      Complex complex4 = complex0.divide(1.663275957107544);
      complex2.ONE.subtract(complex0);
      Complex complex5 = complex4.ZERO.pow(complex3);
      complex1.hashCode();
      Complex complex6 = complex2.sinh();
      complex0.subtract(0.0);
      complex1.NaN.subtract(complex0);
      Complex complex7 = complex3.multiply((-77));
      Complex complex8 = complex6.subtract(complex0);
      complex8.ZERO.add(complex7);
      complex6.negate();
      complex7.add(0.0);
      Complex complex9 = complex5.multiply(complex1);
      complex4.equals("");
      complex0.atan();
      Complex complex10 = complex2.divide(complex6);
      complex10.INF.sqrt1z();
      complex7.atan();
      Complex complex11 = Complex.I;
      Complex complex12 = complex5.divide(complex11);
      complex12.abs();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.ZERO.readResolve();
      complex0.NaN.toString();
      complex0.nthRoot(7);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.tanh();
      complex4.NaN.cos();
      Complex complex5 = complex1.atan();
      complex1.toString();
      Complex complex6 = complex5.subtract(complex0);
      complex2.NaN.hashCode();
      complex6.isNaN();
      Complex complex7 = complex5.pow(complex0);
      complex4.ONE.abs();
      Complex complex8 = complex7.NaN.multiply((double) 7);
      Complex.valueOf(1.0, 0.0);
      complex5.NaN.sinh();
      complex8.INF.sin();
      complex2.toString();
      complex5.hashCode();
      Complex complex9 = complex0.subtract(0.0);
      complex9.ONE.getArgument();
      complex9.NaN.subtract(complex0);
      Complex complex10 = complex4.negate();
      Complex complex11 = complex2.sinh();
      complex11.sqrt1z();
      Complex complex12 = complex10.exp();
      complex12.ONE.createComplex(1016.5566, 0.46853768825531006);
      complex12.cos();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      complex0.I.sinh();
      complex0.INF.reciprocal();
      Complex complex1 = Complex.valueOf((-1682.69), (-1682.69));
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-2087.73752754278), (-2087.73752754278));
      complex0.ONE.toString();
      Complex complex1 = complex0.INF.tanh();
      complex1.ZERO.tanh();
      Complex complex2 = complex0.ONE.exp();
      complex2.conjugate();
      complex2.INF.conjugate();
      complex0.exp();
      complex0.abs();
      complex0.sqrt1z();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(2.441415786743164);
      Complex complex1 = Complex.valueOf(7.77677492833005E251);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.negate();
      complex2.multiply((-2526.46119));
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex3.INF.add(complex4);
      Complex complex5 = Complex.valueOf(2.441415786743164, 7.77677492833005E251);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(2008.275913, 2.63809219778715E205);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = Complex.ONE;
      complex0.ZERO.log();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.ZERO.pow(2008.275913);
      complex2.INF.readResolve();
      complex0.I.conjugate();
      Complex complex5 = complex1.INF.pow(complex2);
      Complex complex6 = complex2.ZERO.add(0.0);
      complex6.ONE.abs();
      complex0.getImaginary();
      Complex complex7 = complex0.INF.reciprocal();
      complex0.getReal();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex1.createComplex(0.0, (-2957.0));
      complex2.isNaN();
      complex7.toString();
      Complex complex10 = complex1.negate();
      complex5.readResolve();
      complex1.NaN.tanh();
      complex10.hashCode();
      Object object0 = new Object();
      complex10.equals(object0);
      complex0.sin();
      Complex complex11 = complex7.cos();
      complex11.ZERO.hashCode();
      complex9.add((-311.0));
      Complex complex12 = complex4.asin();
      complex12.subtract((-1196.153));
      complex8.pow(complex1);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2021.344881500353, 2021.344881500353);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.ZERO.cosh();
      complex2.ONE.getArgument();
      complex1.pow((-3208.356869024018));
      Complex complex4 = complex0.multiply(331);
      Complex complex5 = complex0.ONE.acos();
      complex5.INF.acos();
      Complex complex6 = complex0.createComplex((-2351.9), (-2351.9));
      Complex complex7 = complex6.NaN.cosh();
      complex7.NaN.sqrt1z();
      Complex complex8 = complex6.ZERO.multiply(complex3);
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex9.ONE.pow(0.0);
      complex2.toString();
      complex5.I.pow(complex4);
      complex0.getField();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex7.exp();
      complex6.hashCode();
      complex12.tan();
      complex11.INF.multiply(2021.344881500353);
      Complex complex13 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex13.multiply(547);
      complex6.hashCode();
      complex10.divide(complex11);
      Complex.valueOf(0.0, 6.283185307179586);
      Complex complex14 = complex2.sqrt1z();
      complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.NaN.add((-1778.7));
      complex1.ZERO.divide(complex0);
      Complex complex2 = complex0.divide(0.0);
      complex2.ZERO.toString();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.pow(2519.1596667077833);
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.valueOf(2183.38457055);
      complex0.ONE.divide(222.2);
      complex6.I.pow(0.0);
      Complex complex7 = complex4.ONE.subtract(20.0);
      Complex complex8 = complex5.divide(complex3);
      complex4.exp();
      complex8.toString();
      Complex complex9 = complex5.divide(complex8);
      complex9.NaN.readResolve();
      complex8.isNaN();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.multiply(194);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.tanh();
      complex0.I.getArgument();
      Complex complex3 = complex2.ZERO.cosh();
      complex3.ONE.readResolve();
      complex1.ONE.hashCode();
      complex1.asin();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.pow(0.0);
      complex5.INF.toString();
      complex2.INF.add(1.5707963267948966);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex4.pow(complex2);
      complex7.INF.subtract(complex6);
      complex7.multiply(0.0);
      complex1.pow(1.5707963267948966);
      complex1.getArgument();
      complex2.negate();
      complex4.sqrt1z();
      complex0.hashCode();
      complex4.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      complex0.NaN.acos();
      complex0.NaN.pow(complex1);
      complex0.ONE.toString();
      Complex complex2 = complex0.I.tanh();
      complex2.subtract(0.0);
      complex0.isInfinite();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(6.283185307179586);
      Complex complex2 = complex1.add(6.283185307179586);
      Complex complex3 = complex2.I.multiply(6.283185307179586);
      complex2.INF.nthRoot(1);
      Complex complex4 = complex1.I.multiply(complex3);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals((-6.283185307179586), complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.I.conjugate();
      List<Complex> list0 = complex5.INF.nthRoot(1);
      assertTrue(list0.contains(complex0));
      
      Complex complex6 = complex0.asin();
      Complex complex7 = complex5.I.atan();
      Complex complex8 = complex5.ZERO.conjugate();
      Complex complex9 = complex6.pow((-3974.256));
      Complex complex10 = complex6.acos();
      Complex complex11 = complex5.divide(complex1);
      Complex complex12 = complex3.subtract(complex5);
      Complex complex13 = complex5.ZERO.exp();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex2.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex14.getReal(), 0.01);
      
      Complex complex15 = complex10.cos();
      Complex complex16 = complex10.sqrt1z();
      assertSame(complex16, complex9);
      
      complex8.isNaN();
      Object object0 = complex12.readResolve();
      complex11.equals(object0);
      assertFalse(complex11.equals((Object)complex13));
      assertTrue(complex11.equals((Object)complex8));
      
      boolean boolean0 = complex15.isInfinite();
      assertSame(complex15, complex7);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      double double0 = complex1.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      complex0.I.negate();
      complex0.nthRoot(1);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getArgument();
      complex0.I.getArgument();
      complex0.getImaginary();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ONE.pow(complex2);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.ONE.divide(0.0);
      complex0.abs();
      Complex complex6 = complex0.log();
      complex6.NaN.toString();
      Complex complex7 = complex0.I.divide(complex6);
      Complex.valueOf((-489.1));
      Complex complex8 = complex0.ONE.createComplex((-489.1), 1.0367934703826904);
      complex1.NaN.readResolve();
      complex6.isNaN();
      Complex complex9 = complex6.pow(complex0);
      Complex complex10 = new Complex((-1.9615359732789476E-7), (-725.8330487680643));
      Complex complex11 = Complex.valueOf((-1.1264032993918548E58));
      complex11.getField();
      Complex complex12 = complex7.add(complex10);
      assertSame(complex7, complex5);
      
      complex8.hashCode();
      Complex complex13 = Complex.valueOf(1.0);
      boolean boolean0 = complex4.equals(complex2);
      assertTrue(complex1.equals((Object)complex0));
      assertSame(complex3, complex12);
      assertFalse(boolean0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex9));
      assertNotSame(complex3, complex9);
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      
      Complex complex14 = complex13.tanh();
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex14.getReal(), 0.01);
  }
}
