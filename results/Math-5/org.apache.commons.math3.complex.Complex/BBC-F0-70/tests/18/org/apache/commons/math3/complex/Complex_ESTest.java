/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:52:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(2.787906051540986E261);
      Complex complex1 = complex0.reciprocal();
      complex0.toString();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.sinh();
      complex3.ZERO.hashCode();
      complex2.abs();
      complex2.ZERO.sqrt1z();
      Complex complex4 = complex1.asin();
      complex4.hashCode();
      Complex complex5 = complex1.sin();
      complex5.reciprocal();
      Complex complex6 = complex0.divide(complex5);
      complex4.readResolve();
      Complex complex7 = Complex.valueOf(316.47, 1.671417236328125);
      complex4.NaN.getArgument();
      complex6.NaN.divide(1.0);
      complex4.ONE.conjugate();
      complex7.ONE.getField();
      Complex complex8 = complex0.add(complex4);
      Complex complex9 = complex5.sin();
      complex0.INF.atan();
      Complex complex10 = complex8.pow(complex6);
      complex10.NaN.getField();
      complex9.add(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.I;
      complex3.add(complex11);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.multiply((-2505));
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.INF.multiply((double) (-2505));
      Complex complex6 = complex3.ZERO.tanh();
      complex5.I.cosh();
      Complex complex7 = complex5.I.reciprocal();
      complex7.INF.toString();
      complex1.log();
      Complex complex8 = complex2.ONE.reciprocal();
      complex4.subtract(complex0);
      Complex complex9 = complex4.multiply(complex1);
      Complex complex10 = complex1.sin();
      Complex complex11 = complex2.divide(complex9);
      Complex complex12 = complex3.add(complex11);
      complex10.negate();
      complex12.sin();
      complex10.multiply(522);
      complex11.atan();
      complex8.acos();
      complex7.atan();
      complex6.add((double) (-2505));
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(3.5590470673352285E198);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.I.sin();
      complex5.add(3.5590470673352285E198);
      complex0.ZERO.acos();
      Complex complex6 = complex3.divide(0.5718588702012102);
      Complex complex7 = Complex.valueOf((-738.011678678015), 0.5718588702012102);
      complex6.readResolve();
      complex4.INF.multiply(1631.482760333212);
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex3.subtract(complex8);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex2.multiply(complex9);
      complex11.INF.tan();
      Complex complex12 = complex10.sqrt1z();
      complex12.I.subtract(complex7);
      complex0.INF.pow(complex6);
      Complex complex13 = complex4.sqrt1z();
      complex0.getField();
      complex10.NaN.multiply(6.283185307179586);
      complex13.cosh();
      complex10.tan();
      Complex complex14 = complex3.negate();
      Complex.valueOf((-4387.9), (-4387.9));
      complex12.subtract(5.182580025786838E-34);
      complex14.nthRoot(1449);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(251.79, 20.0);
      complex2.readResolve();
      Complex complex4 = complex3.tan();
      complex3.ZERO.asin();
      complex3.acos();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.add((-1.0));
      complex0.divide((-674.75986788432));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.9063993642490108, (-20.0));
      Complex complex2 = complex0.tanh();
      complex1.asin();
      complex2.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex((-20.0));
      complex4.tanh();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-1780.855638877);
      Complex complex0 = Complex.valueOf((-1780.855638877), (-1780.855638877));
      Complex complex1 = new Complex((-1780.855638877), (-1780.855638877));
      Complex complex2 = complex0.createComplex((-1.284229500698855), (-1780.855638877));
      complex1.INF.abs();
      Complex complex3 = complex2.acos();
      try { 
        complex3.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.createComplex((-20.0), (-1068.7838928161066));
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.subtract(984.15376032855);
      complex5.acos();
      Complex.valueOf((-1640.5321448350105), 984.15376032855);
      Complex complex7 = Complex.valueOf((-1.0));
      complex4.equals(complex2);
      Complex complex8 = new Complex(2.5017542839050293, (-20.0));
      complex8.readResolve();
      Complex complex9 = Complex.INF;
      complex9.multiply(3271);
      complex4.log();
      Complex complex10 = Complex.INF;
      complex2.readResolve();
      complex8.tan();
      complex6.pow(984.15376032855);
      Complex complex11 = complex7.sqrt();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.createComplex(984.15376032855, (-8.248332290732976E-35));
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.subtract((-1420.2099));
      Complex complex5 = complex3.acos();
      Complex.valueOf((-8.248332290732976E-35), (-1420.2099));
      Complex complex6 = Complex.valueOf(400.86);
      Complex complex7 = Complex.INF;
      complex6.equals(complex7);
      complex3.readResolve();
      Complex complex8 = new Complex((-2376.26675), (-1420.2099));
      complex8.multiply(3271);
      complex5.log();
      Complex complex9 = Complex.INF;
      complex6.readResolve();
      complex4.tan();
      complex2.pow(984.15376032855);
      complex3.sqrt();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-9.381038709471357E11));
      int int0 = 2250;
      Complex complex1 = complex0.multiply(2250);
      complex0.NaN.subtract(0.4145021795722265);
      complex1.INF.atan();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf((double) 2250, 6.283185307179586);
      Complex.valueOf((-886.19), 0.4145021795722265);
      Complex complex4 = complex3.I.subtract(complex2);
      complex4.INF.exp();
      complex3.INF.toString();
      Complex complex5 = complex4.ONE.reciprocal();
      complex3.ONE.toString();
      Complex complex6 = complex2.pow((-1.5529608026276525E-8));
      Complex complex7 = complex6.ONE.divide(complex5);
      complex7.I.readResolve();
      Complex complex8 = complex0.asin();
      complex8.negate();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.855638877), (-1780.855638877));
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.pow((-0.3595163114392286));
      complex0.INF.sinh();
      Complex complex4 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.8813735870195428);
      Complex complex5 = complex0.tanh();
      complex3.pow((-1780.855638877));
      complex0.log();
      complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex((-1.2296934902142301E22), 1.196718116616528E-96);
      Complex complex3 = complex2.pow(1.196718116616528E-96);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex2.add((-8.248332290732976E-35));
      complex5.add(complex0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex2.divide(complex1);
      complex1.abs();
      complex6.subtract(complex7);
      complex3.acos();
      Complex complex9 = Complex.valueOf(1.196718116616528E-96, 0.0);
      complex2.readResolve();
      Complex complex10 = complex4.multiply(1);
      complex4.multiply(1.196718116616528E-96);
      complex9.acos();
      complex10.readResolve();
      complex8.tan();
      complex5.readResolve();
      complex4.tan();
      Complex complex11 = complex1.createComplex(Double.NaN, 5.080508242372161E-4);
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.145412771487496E-7);
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.conjugate();
      complex1.atan();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.tanh();
      complex1.tanh();
      Complex complex2 = complex1.asin();
      complex1.atan();
      Complex complex3 = complex1.pow(0.5718588702012102);
      complex3.tanh();
      complex2.pow((-909.530930723013));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.855638877), (-1780.855638877));
      complex0.getField();
      complex0.tanh();
      Complex complex1 = Complex.valueOf((-1780.855638877));
      complex1.pow((-769.0));
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.855638877), (-1780.855638877));
      complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.pow((-1780.855638877));
      Complex complex4 = complex1.negate();
      complex4.ZERO.pow(complex0);
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = Complex.NaN;
      complex6.divide(complex5);
      complex0.abs();
      complex3.subtract(complex6);
      complex3.acos();
      Complex.valueOf(2518.5101971284566, 0.0);
      complex5.readResolve();
      complex1.multiply(1);
      complex0.multiply((-549.834));
      complex4.add(Double.NaN);
      Complex.valueOf((-395.0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.subtract((-1780.855638877));
      complex0.conjugate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.createComplex(102.3776, 102.3776);
      Complex complex7 = Complex.valueOf(102.3776);
      complex7.acos();
      Complex complex8 = complex1.acos();
      complex3.negate();
      Complex.valueOf(0.2644653916358948, 9.701006658347815);
      complex1.multiply(9.701006658347815);
      complex8.abs();
      complex7.log();
      Complex complex9 = new Complex((-1635.9));
      complex9.getImaginary();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex6.sinh();
      complex12.exp();
      complex8.tanh();
      Complex complex13 = Complex.NaN;
      try { 
        complex13.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex.valueOf(1.145412771487496E-7);
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.log();
      complex0.acos();
      Complex complex2 = Complex.valueOf(1.145412771487496E-7, (-20.0));
      Complex complex3 = Complex.valueOf(1.0770423412322998);
      complex1.equals(complex2);
      complex2.readResolve();
      complex3.multiply(3271);
      Complex complex4 = Complex.INF;
      Complex complex5 = (Complex)complex1.readResolve();
      complex5.nthRoot(3271);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.createComplex(1.145412771487496E-7, (-3637.644357486));
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.asin();
      Complex complex2 = Complex.ONE;
      complex0.divide((-1052.95980071751));
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.pow((-1052.95980071751));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.pow(Double.NaN);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex1.add(complex0);
      complex6.divide(complex7);
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.abs();
      complex5.sin();
      Complex complex9 = new Complex(1.0, Double.NaN);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex2.acos();
      Complex complex12 = complex10.negate();
      Complex complex13 = Complex.valueOf((-2833.24785592361), 1321.0);
      complex4.multiply((-2520.71));
      Complex complex14 = Complex.valueOf(575.443488096);
      complex14.abs();
      Complex complex15 = complex12.log();
      complex13.getImaginary();
      Complex complex16 = Complex.ZERO;
      Complex complex17 = Complex.I;
      complex7.sinh();
      complex11.tanh();
      complex8.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.divide(complex1);
      complex3.abs();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sin();
      Complex complex6 = new Complex(1780.855638877, (-3467.08777));
      complex5.asin();
      Complex complex7 = new Complex((-2370.0));
      Complex complex8 = complex7.acos();
      Complex complex9 = complex5.negate();
      Complex.valueOf(0.0, 17.05352041075);
      Complex complex10 = complex2.multiply(17.05352041075);
      complex7.abs();
      Complex complex11 = complex10.log();
      complex8.getImaginary();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.I;
      complex9.sinh();
      complex3.tanh();
      complex11.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      complex3.I.atan();
      complex3.INF.pow((-1780.855638877));
      Complex complex4 = complex3.tanh();
      complex1.tanh();
      complex4.createComplex((-1780.855638877), (-1780.855638877));
      complex0.asin();
      Complex.valueOf(4822.0528918224, (-213.79305417));
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = Complex.valueOf(6.283185307179586, 2.335970335559215E136);
      complex1.toString();
      Complex complex2 = complex1.subtract(2.0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.I;
      complex5.createComplex(2.335970335559215E136, 2.0);
      Complex complex6 = complex5.log();
      complex3.acos();
      Complex complex7 = Complex.valueOf(604.59773, 984.15376032855);
      Complex.valueOf(604.59773);
      Complex complex8 = new Complex(604.59773, (-761.6678115596171));
      complex8.equals(complex6);
      Complex complex9 = new Complex(1.0, (-761.6678115596171));
      complex9.readResolve();
      complex7.multiply(3271);
      Complex complex10 = Complex.INF;
      complex3.readResolve();
      complex7.tan();
      complex0.createComplex((-8.676137737360023E-9), 1.2457494014128656E-7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2859.0), (-8.248332290732976E-35));
      complex0.toString();
      Complex complex1 = complex0.subtract(2475.0197055);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.createComplex(984.15376032855, (-8.248332290732976E-35));
      Complex complex5 = complex2.log();
      Complex complex6 = complex4.acos();
      complex1.acos();
      complex0.negate();
      Complex.valueOf((-8.248332290732976E-35), (-8.248332290732976E-35));
      complex0.multiply((-2430.5967));
      complex4.abs();
      complex1.log();
      complex3.getImaginary();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex1.sinh();
      complex5.tanh();
      complex6.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      Complex.valueOf(4822.0528918224, 0.01678682849510297);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract((-5610.6486));
      Complex complex1 = complex0.divide((-755.6986130674));
      Complex complex2 = complex1.divide(complex0);
      complex1.subtract((-1328.2286658));
      complex2.divide(757.4159590587166);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.INF.negate();
      complex3.ONE.readResolve();
      complex0.INF.multiply(604.1959);
      Complex complex4 = complex3.ZERO.pow((-1.0));
      Complex complex5 = complex0.negate();
      complex5.ZERO.sqrt();
      Complex complex6 = complex1.multiply(Double.NaN);
      complex6.NaN.getField();
      Complex complex7 = Complex.valueOf((-1.0), Double.NaN);
      complex6.tanh();
      complex2.NaN.multiply(904);
      complex7.I.atan();
      complex1.ZERO.multiply(complex7);
      try { 
        complex4.nthRoot((-3146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,146
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.855638877), (-1780.855638877));
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      complex2.toString();
      Complex complex3 = complex1.subtract((-1780.855638877));
      complex3.tan();
      Complex complex4 = Complex.valueOf(0.9999994758538385, (-1090.1103919889));
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.createComplex(0.9999994758538385, (-1780.855638877));
      complex6.log();
      complex6.acos();
      Complex complex7 = complex2.add((-196.148566041));
      Complex complex8 = Complex.NaN;
      complex7.pow(complex8);
      Complex complex9 = complex4.tan();
      complex9.exp();
      complex0.equals("(-1.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.INF.pow((-1780.855638877));
      complex2.tanh();
      complex1.tanh();
      Complex.valueOf(0.01678682849510297, 4822.0528918224);
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.INF.pow((-1780.855638877));
      Complex complex6 = complex2.multiply(complex1);
      complex5.I.conjugate();
      complex0.reciprocal();
      complex4.negate();
      complex4.getArgument();
      complex5.reciprocal();
      complex1.createComplex(5.74952254077566E-19, 2720.653);
      complex6.hashCode();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-1780.855638877), (-20.0));
      complex1.equals(complex8);
      complex2.pow(complex0);
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1666.2917534082, 1666.2917534082);
      complex0.tanh();
      Complex complex1 = Complex.valueOf(0.14518201351165771, 0.14518201351165771);
      complex1.add(0.14518201351165771);
      Complex.valueOf((-270.07));
      Complex complex2 = complex1.cos();
      complex2.asin();
      complex0.createComplex(4822.0528918224, 0.14518201351165771);
      complex0.sinh();
      Complex complex3 = Complex.ZERO;
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(181.8, 181.8);
      complex0.ZERO.abs();
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      complex0.getReal();
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.negate();
      Complex complex3 = complex1.add(20.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex2.asin();
      complex5.exp();
      Complex complex6 = complex3.atan();
      complex4.sqrt();
      complex6.getImaginary();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ZERO;
      complex2.add(1952.746977342134);
      complex2.ZERO.pow(complex0);
      complex1.acos();
      Complex complex3 = Complex.valueOf(119.13263377, 1952.746977342134);
      Complex.valueOf(1952.746977342134);
      complex3.INF.sqrt();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex4 = new Complex(2.5017542839050293);
      complex3.ONE.reciprocal();
      complex4.readResolve();
      complex2.multiply(3271);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ZERO;
      complex6.readResolve();
      complex3.tan();
      complex2.createComplex(119.13263377, 0.8281879431298736);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex1.I.nthRoot(664);
      complex0.INF.getArgument();
      Complex complex2 = complex0.subtract(2.0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.createComplex((-14649.480930563062), 0.7853981633974483);
      Complex complex5 = complex3.log();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-815.028855904311));
      complex0.subtract(complex5);
      complex4.acos();
      Complex.valueOf((-14649.480930563062), 1.5959614205422845E-225);
      complex0.readResolve();
      complex4.multiply(818);
      Complex complex7 = Complex.ONE;
      complex7.multiply((-2465.37643926491));
      complex1.readResolve();
      Complex complex8 = complex0.tan();
      complex0.createComplex((-685.543610739802), 0.7853981633974483);
      complex8.asin();
      complex6.multiply(complex4);
      complex1.cosh();
      complex5.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.INF.pow((-1780.855638877));
      complex5.I.negate();
      Complex complex6 = complex2.INF.add(complex0);
      Complex complex7 = complex2.divide(complex0);
      complex7.abs();
      Complex complex8 = complex0.sin();
      complex0.INF.asin();
      complex8.acos();
      complex1.ONE.negate();
      Complex complex9 = Complex.valueOf(1079.8811500873758, (-1780.855638877));
      complex9.multiply(3.720075801577098E-44);
      complex4.abs();
      complex5.log();
      complex0.getImaginary();
      Complex complex10 = Complex.ZERO;
      complex10.sinh();
      complex3.tanh();
      complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.855638877), (-1780.855638877));
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(4822.0528918224, 4822.0528918224);
      Complex complex4 = complex3.add((-1780.855638877));
      Complex.valueOf((-1.9392742205954563E-7));
      Complex complex5 = complex4.subtract((-1726.101619383));
      complex1.equals(" v?oH2O%|YF.pb'h{=");
      complex1.getArgument();
      Complex.valueOf(2.6489122816E10);
      complex5.cosh();
      complex3.atan();
      complex0.reciprocal();
      complex2.cosh();
      complex1.subtract(3.141592653589793);
      Complex.valueOf((-1780.855638877), 4822.0528918224);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(181.8, 181.8);
      Complex complex1 = Complex.valueOf((-847.45864723439), (-1757.0));
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.log();
      complex0.createComplex(2349.8488, (-1576.8723472544493));
      complex2.log();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.valueOf((-2659.5053560752685), 3160.3437553);
      Complex complex8 = Complex.valueOf(2723.889702);
      complex4.equals(complex0);
      complex7.readResolve();
      complex0.multiply(3271);
      complex2.multiply(Double.NaN);
      complex3.readResolve();
      complex6.tan();
      complex8.createComplex((-744.68894), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      complex1.getReal();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex3.multiply((-0.99999963076195));
      Complex complex6 = Complex.valueOf(419.7926);
      complex6.nthRoot(37);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.acos();
      complex8.readResolve();
      complex1.hashCode();
      complex8.pow((-413.731));
      complex8.pow(complex3);
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.NaN;
      complex5.subtract((-1.0));
      complex0.equals(complex5);
      complex7.getArgument();
      Complex.valueOf((-413.731));
      complex6.cosh();
      complex2.atan();
      complex5.reciprocal();
      complex3.cosh();
      complex3.subtract(-0.0);
      Complex.valueOf(1.5707963267948966, 0.3594330038102771);
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      complex3.I.atan();
      Complex complex4 = complex3.INF.pow((-1780.855638877));
      complex4.I.negate();
      complex2.INF.add(complex0);
      Complex complex5 = complex2.divide(complex0);
      complex5.abs();
      Complex complex6 = complex0.sin();
      complex0.INF.asin();
      complex6.acos();
      Complex complex7 = complex1.ONE.negate();
      Complex complex8 = complex7.INF.pow(0.0);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex6.multiply((-1780.855638877));
      Complex complex11 = complex9.atan();
      complex2.NaN.pow(0.0);
      complex9.log();
      complex11.cos();
      complex4.add(5547.8319706);
      Complex complex12 = complex0.cos();
      complex10.subtract(complex1);
      complex8.sin();
      complex12.multiply(complex2);
      complex7.multiply(complex4);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 325.8154041);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(5416557.861276973);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.negate();
      complex6.getArgument();
      complex6.reciprocal();
      Complex complex7 = complex5.createComplex((-1.5707963267948966), 14191.584428976945);
      Complex complex8 = Complex.ZERO;
      complex8.hashCode();
      Complex complex9 = complex7.createComplex(0.0, 14191.584428976945);
      complex8.abs();
      Complex complex10 = Complex.NaN;
      Complex complex11 = new Complex(20.0, (-1248.0));
      complex5.pow(complex11);
      complex4.multiply((-1248.0));
      Complex.valueOf((-3.948954622015801E-9), 5416557.861276973);
      complex7.toString();
      complex6.isInfinite();
      complex10.getImaginary();
      complex9.subtract((-4.3991443996021166E113));
      complex10.getArgument();
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.855638877), (-1780.855638877));
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(4822.0528918224, 4822.0528918224);
      Complex complex4 = complex3.add(1.5188732147216797);
      Complex complex5 = Complex.valueOf((-1.9392742205954563E-7));
      Complex complex6 = complex2.pow(complex5);
      complex6.ONE.cos();
      complex4.asin();
      complex1.createComplex((-1780.855638877), 7.584929067679175);
      complex0.sinh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1666.2917534082, 1666.2917534082);
      complex0.divide(complex1);
      complex0.nthRoot(1009);
      complex0.multiply(0);
      complex0.tan();
      complex0.hashCode();
      // Undeclared exception!
      complex1.nthRoot(2146195136);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(181.8, 181.8);
      complex0.ZERO.abs();
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      complex0.getReal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex2.INF.pow(complex0);
      Complex complex5 = complex2.asin();
      complex5.INF.acos();
      complex1.hashCode();
      Complex complex6 = complex3.pow(181.8);
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = Complex.I;
      complex2.abs();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex4.pow(complex0);
      complex3.multiply(1.0418684482574463);
      Complex.valueOf(1.0, (-4.3991443996021166E113));
      complex7.toString();
      complex0.isInfinite();
      complex10.getImaginary();
      complex1.subtract((-4.3991443996021166E113));
      Complex complex11 = new Complex(Double.NaN);
      complex11.getArgument();
      complex8.add(complex6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.nthRoot(245);
      Complex complex1 = Complex.valueOf(1666.2917534082, 1666.2917534082);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.ONE;
      complex3.tanh();
      complex2.add((-849.1216568394));
      Complex complex4 = Complex.valueOf(1666.2917534082, 0.6522845029830933);
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = new Complex((-1953.388992334146), 441.674);
      complex6.asin();
      complex5.createComplex(0.8281879431298736, 604.82203119);
      complex5.sinh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply((-711564293));
      Complex complex3 = Complex.ONE;
      complex3.abs();
      Complex complex4 = complex2.log();
      complex4.getImaginary();
      complex1.sinh();
      Complex complex5 = Complex.ONE;
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.I.cos();
      assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.atan();
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.ZERO.tanh();
      Complex complex6 = complex1.add(2.3616843223571777);
      Complex complex7 = Complex.valueOf(0.0, 2.3616843223571777);
      assertEquals(2.3616843223571777, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.pow(complex5);
      complex0.NaN.hashCode();
      Complex complex9 = complex6.ZERO.subtract(2.3616843223571777);
      Complex complex10 = complex9.INF.tan();
      assertFalse(complex10.equals((Object)complex8));
      
      Complex complex11 = new Complex(632.9488393742, (-2704.66704639466));
      complex9.ONE.negate();
      Complex complex12 = complex5.INF.add(complex11);
      assertTrue(complex12.isInfinite());
      
      complex9.I.getArgument();
      Complex complex13 = complex9.ONE.exp();
      complex6.equals(complex0);
      Complex complex14 = complex4.asin();
      Complex complex15 = complex6.asin();
      Complex complex16 = complex14.cosh();
      complex0.ZERO.add(4.621027492345726E-8);
      Complex complex17 = complex15.pow((-905.748199340061));
      String string0 = complex17.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex18 = complex8.sinh();
      assertTrue(complex5.equals((Object)complex3));
      assertFalse(complex18.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      double double0 = complex17.getReal();
      assertEquals(1.372925025420969E-306, complex17.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex16));
      assertEquals(1.7938595172298464E-306, double0, 0.01);
      
      complex13.abs();
      complex10.divide(4.621027492345726E-8);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.divide(complex3);
      complex4.nthRoot(1009);
      Complex complex5 = complex4.multiply(1009);
      Complex complex6 = complex5.tan();
      complex6.NaN.hashCode();
      complex6.I.nthRoot(1009);
      Complex complex7 = complex3.divide((double) 1009);
      complex7.I.add((double) 1009);
      Complex complex8 = complex2.cos();
      Complex complex9 = complex2.subtract(complex0);
      Complex complex10 = complex9.sin();
      complex8.multiply(complex1);
      complex8.multiply(complex4);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1666.2917534082, 1666.2917534082);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.createComplex((-1013.9534), 1666.2917534082);
      complex0.log();
      Complex complex3 = complex1.acos();
      Complex.valueOf(1780.855638877, 1.426849365234375);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.readResolve();
      Complex complex5 = new Complex(1.426849365234375, Double.POSITIVE_INFINITY);
      complex5.multiply(68);
      complex5.multiply((-5.905511605694905E-113));
      complex2.readResolve();
      complex2.tan();
      complex3.createComplex((-4742.0489354), 1666.2917534082);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex1.I.nthRoot(664);
      complex0.INF.getArgument();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(0.0, 0.0);
      complex2.multiply(complex3);
      Complex complex4 = complex0.pow(2.0);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex1.multiply((-2412));
      Complex complex7 = complex6.asin();
      complex6.asin();
      Complex complex8 = complex5.ONE.sinh();
      complex7.readResolve();
      Complex complex9 = complex6.multiply(complex4);
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex4.multiply(17);
      complex1.toString();
      complex10.sinh();
      complex9.getField();
      complex11.reciprocal();
      Complex complex12 = Complex.ONE;
      Complex.valueOf((double) 664);
      complex8.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(181.8, 181.8);
      complex0.ZERO.abs();
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      complex0.getReal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex2.INF.pow(complex0);
      Complex complex5 = complex3.NaN.multiply((-909.7772446375018));
      complex2.ZERO.nthRoot(37);
      Complex complex6 = complex2.asin();
      complex3.tan();
      complex1.hashCode();
      complex4.nthRoot(37);
      Complex complex7 = complex2.divide((-6.6045909118908625E-9));
      Complex complex8 = complex4.add(0.7615941559557649);
      Complex complex9 = complex5.cos();
      Complex complex10 = Complex.INF;
      complex10.subtract(complex8);
      complex6.sin();
      Complex complex11 = complex0.multiply(complex7);
      complex11.multiply(complex6);
      complex7.exp();
      complex0.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.13263377);
      Complex complex1 = new Complex(119.13263377);
      complex0.toString();
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.toString();
      complex0.subtract(119.13263377);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.I.createComplex(119.13263377, (-1068.7838928161066));
      complex4.INF.log();
      complex2.NaN.acos();
      complex0.add(85.65545954006934);
      complex2.pow(complex1);
      Complex.valueOf((-1718.4), (-2.548073509300398E61));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-920.063622967), (-920.063622967));
      Complex complex1 = complex0.I.add((-920.063622967));
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.tanh();
      complex4.ONE.log();
      Complex.valueOf(676.0);
      complex0.multiply(complex3);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.divide(complex3);
      complex4.nthRoot(1307);
      complex2.multiply(1307);
      Complex complex6 = complex1.tan();
      complex3.hashCode();
      complex3.nthRoot(37);
      Complex complex7 = complex0.divide(2557.09452528);
      complex7.add(2557.09452528);
      complex3.cos();
      Complex complex8 = complex7.subtract(complex6);
      complex8.NaN.sinh();
      Complex complex9 = complex5.sin();
      complex8.multiply(complex6);
      complex9.multiply(complex2);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(181.8, 1666.2917534082);
      Complex complex1 = complex0.exp();
      complex1.multiply(0);
      complex0.multiply((double) 0);
      complex1.abs();
      complex0.atan();
      Complex complex2 = complex0.log();
      complex2.getImaginary();
      complex1.sinh();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.731), (-847.45864723439));
      complex0.ONE.cosh();
      Complex complex1 = complex0.ONE.log();
      complex1.createComplex(4.577552838467682, (-3374.4));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(3763.6588, 3763.6588);
      Complex complex5 = Complex.valueOf(89.8602688);
      complex4.equals(complex1);
      complex1.readResolve();
      complex0.multiply(3271);
      complex3.multiply((-20.0));
      complex1.readResolve();
      Complex complex6 = complex5.tan();
      complex6.createComplex((-3113.475847943), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.13263377);
      Complex complex1 = Complex.ZERO;
      complex1.I.toString();
      complex0.I.subtract(complex1);
      complex0.toString();
      complex0.subtract(119.13263377);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf(549.33222185, 2298.461526239947);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.cosh();
      complex1.acos();
      Complex complex6 = complex2.tan();
      complex6.ZERO.tanh();
      complex2.toString();
      complex2.negate();
      Complex complex7 = complex0.cos();
      complex0.hashCode();
      complex5.sqrt();
      Complex complex8 = new Complex(3203.3561224396326, 119.13263377);
      complex4.pow(complex7);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex((-1.1356287358852729E-8), 1786.84590357);
      complex0.INF.getField();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.acos();
      Object object0 = complex0.readResolve();
      complex2.hashCode();
      Complex complex4 = complex0.pow(3.0);
      complex0.pow(complex2);
      Complex complex5 = Complex.I;
      complex5.subtract((-1897.65869));
      complex5.subtract((-1.1356287358852729E-8));
      complex1.equals(object0);
      Complex complex6 = Complex.valueOf((-1.1356287358852729E-8));
      complex6.getArgument();
      Complex.valueOf((-1.1356287358852729E-8));
      complex4.cosh();
      Complex complex7 = Complex.I;
      complex7.atan();
      complex1.reciprocal();
      complex2.cosh();
      complex3.subtract(3.0);
      Complex.valueOf(1218.1, 3.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.INF.pow((-1780.855638877));
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex2.INF.add(complex0);
      Complex complex8 = complex2.divide(complex0);
      complex8.abs();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex0.INF.asin();
      Complex complex11 = complex9.reciprocal();
      complex9.createComplex((-2482.327959150264), (-4192.4468643));
      complex1.hashCode();
      Complex.valueOf((-2482.327959150264));
      complex11.abs();
      complex0.getReal();
      complex3.pow(complex6);
      complex4.multiply((-755.66842260122));
      Complex complex12 = new Complex(181.8);
      complex6.toString();
      complex7.isInfinite();
      complex12.getImaginary();
      complex7.subtract((-2652.78823));
      complex4.getArgument();
      complex10.add(complex4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.negate();
      complex2.NaN.acos();
      Complex complex3 = complex1.ONE.exp();
      complex3.NaN.getField();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.divide(0.0);
      complex5.INF.pow(complex4);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.I.divide(0.0);
      complex8.ONE.log();
      complex0.getReal();
      complex0.toString();
      complex6.sin();
      Complex complex9 = complex2.pow(0.0);
      complex9.ONE.cos();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1356));
      Complex complex2 = complex1.I.log();
      complex0.toString();
      complex1.hashCode();
      complex1.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.log();
      complex3.INF.hashCode();
      Complex complex5 = complex4.ONE.sin();
      complex2.ZERO.subtract(complex1);
      complex5.INF.reciprocal();
      Complex complex6 = complex1.INF.subtract(0.0);
      complex6.NaN.readResolve();
      Complex complex7 = complex3.ZERO.multiply(complex0);
      complex7.ZERO.negate();
      complex7.NaN.getField();
      complex2.toString();
      Complex complex8 = complex2.tanh();
      complex8.I.multiply((-1356));
      complex3.acos();
      complex1.abs();
      complex3.sqrt();
      complex2.sinh();
      complex4.negate();
      complex5.sinh();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7173159016511951E-217);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.divide(3205.20259042);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex1.NaN.asin();
      Complex complex5 = Complex.valueOf(2107.245, (-473.69171));
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex0.add(3205.20259042);
      complex7.INF.divide(complex3);
      Complex complex8 = complex7.ONE.exp();
      complex1.getImaginary();
      complex8.sinh();
      complex5.multiply(complex0);
      complex8.sin();
      complex2.isNaN();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0319266319274902);
      Complex complex1 = new Complex(0.0);
      complex1.ZERO.getField();
      Complex complex2 = complex0.I.add(complex1);
      Complex.valueOf((-2.9013441705763093E-8));
      Complex complex3 = complex0.ONE.pow((-643.0));
      complex0.ONE.conjugate();
      complex0.INF.pow(complex1);
      Complex.valueOf((-643.0), (-643.0));
      complex0.add(2.0319266319274902);
      complex1.I.cos();
      Complex.valueOf(719.781804, 2.0319266319274902);
      complex0.hashCode();
      complex2.divide(95.7774663212);
      complex3.log();
      complex1.abs();
      complex3.tan();
      complex0.pow(0.15693697333335876);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2.0, 0.0);
      complex1.INF.cosh();
      Complex complex2 = complex1.INF.exp();
      complex0.ONE.nthRoot(1493);
      Complex complex3 = complex1.divide(1218.1);
      complex3.INF.tanh();
      Complex complex4 = complex1.INF.createComplex(0.0, 0.0);
      complex0.getArgument();
      Complex complex5 = complex1.asin();
      complex5.INF.conjugate();
      complex5.ONE.getArgument();
      complex5.NaN.getField();
      Complex complex6 = complex4.ZERO.conjugate();
      complex5.I.tanh();
      complex4.multiply(complex2);
      complex0.reciprocal();
      Complex complex7 = Complex.valueOf(4692.858076095853);
      Complex complex8 = complex6.createComplex(1218.1, 0.0);
      complex7.add((-1.0));
      complex7.tanh();
      complex3.getArgument();
      complex8.pow(725.601696337907);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1666.2917534082, 1666.2917534082);
      Complex complex2 = complex0.exp();
      complex2.I.multiply(0);
      complex1.INF.multiply(2743.3919588112217);
      complex1.NaN.abs();
      Complex complex3 = complex0.log();
      complex1.getImaginary();
      complex3.sinh();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(181.8, 181.8);
      complex0.ZERO.abs();
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      complex0.getReal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.negate();
      complex2.INF.pow(complex0);
      Complex complex4 = complex3.NaN.multiply((-909.7772446375018));
      complex2.ZERO.nthRoot(37);
      Complex complex5 = complex2.asin();
      complex5.INF.acos();
      complex5.INF.readResolve();
      complex1.hashCode();
      complex3.pow(181.8);
      complex3.pow(complex2);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.INF.subtract(0.0);
      complex7.ZERO.subtract(0.1970241367816925);
      complex2.equals(complex6);
      complex3.ZERO.getArgument();
      Complex complex8 = Complex.valueOf(2.6489122816E10);
      complex4.cosh();
      complex7.atan();
      Complex complex9 = complex6.reciprocal();
      complex9.NaN.cosh();
      complex8.subtract(181.8);
      Complex.valueOf(0.0, 0.1970241367816925);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = complex0.I.multiply(2481);
      Complex complex2 = complex0.multiply((-2514.7));
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex2.INF.subtract((-2514.7));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.ONE.sqrt();
      Complex complex7 = complex5.INF.subtract((-3667.804733));
      Complex complex8 = complex0.sin();
      Complex complex9 = Complex.valueOf((-2514.7), (double) 2481);
      Complex complex10 = complex8.ONE.subtract(complex3);
      Complex complex11 = complex10.exp();
      Complex complex12 = complex8.INF.pow(complex6);
      complex9.ONE.hashCode();
      complex12.INF.toString();
      complex12.ZERO.subtract(complex9);
      complex2.readResolve();
      complex5.I.divide((-2514.7));
      complex1.I.hashCode();
      Complex complex13 = complex5.sin();
      complex13.INF.divide(complex2);
      complex4.conjugate();
      complex5.getArgument();
      complex1.hashCode();
      complex12.cos();
      complex7.reciprocal();
      complex10.multiply(complex11);
      try { 
        complex3.nthRoot((-1829));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,829
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.atan();
      complex0.I.pow((-655.988918));
      Complex.valueOf((-655.988918), (-655.988918));
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply((-655.988918));
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ONE.abs();
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.valueOf((-20.0), 0.0);
      complex1.toString();
      complex2.nthRoot(1264);
      Complex complex8 = complex5.negate();
      Complex complex9 = complex2.cosh();
      complex9.NaN.pow(1.0);
      Complex.valueOf((-655.988918));
      complex2.multiply(17);
      complex7.isInfinite();
      complex4.tan();
      complex6.sinh();
      Complex complex10 = Complex.ZERO;
      complex6.divide(complex10);
      complex8.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-673.578561));
      complex0.sqrt1z();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.atan();
      complex2.sin();
      Complex complex4 = complex0.pow(complex1);
      complex4.INF.conjugate();
      complex4.ZERO.divide(complex3);
      complex4.INF.multiply((-274.6716));
      complex4.subtract(complex0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex1.I.nthRoot(664);
      complex0.INF.getArgument();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(0.0, 0.0);
      complex2.multiply(complex3);
      Complex complex4 = complex0.pow(2.0);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex1.multiply((-2412));
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.asin();
      complex5.ONE.sinh();
      complex7.readResolve();
      Complex complex9 = complex6.multiply(complex4);
      complex9.I.sqrt();
      complex4.add(complex5);
      complex8.exp();
      Complex complex10 = complex6.atan();
      complex10.sqrt();
      complex4.reciprocal();
      complex4.getImaginary();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1727.013788574098);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex0.cos();
      complex2.I.reciprocal();
      Complex complex4 = complex3.INF.add(1727.013788574098);
      complex4.I.sqrt();
      complex2.I.cos();
      Complex complex5 = complex2.sinh();
      complex5.INF.reciprocal();
      complex2.ZERO.multiply(1727.013788574098);
      complex0.I.conjugate();
      complex5.asin();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1780.855638877));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      complex3.I.atan();
      Complex complex4 = complex3.INF.pow((-1780.855638877));
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex2.INF.add(complex0);
      Complex complex7 = complex2.divide(complex0);
      complex7.abs();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex0.INF.asin();
      Complex complex10 = complex8.acos();
      Complex complex11 = complex1.ONE.negate();
      Complex complex12 = complex11.INF.pow(0.0);
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex8.multiply((-1780.855638877));
      Complex complex15 = complex13.atan();
      complex2.NaN.pow(0.0);
      complex13.log();
      Complex complex16 = complex15.cos();
      complex0.INF.pow((-1780.855638877));
      Complex complex17 = complex15.add(complex14);
      complex17.INF.pow(complex2);
      complex14.ONE.getArgument();
      complex15.hashCode();
      complex14.isInfinite();
      complex9.subtract(complex0);
      complex6.multiply((-2409));
      complex11.toString();
      complex12.sinh();
      complex16.getField();
      complex10.reciprocal();
      Complex complex18 = Complex.ONE;
      Complex.valueOf(0.0);
      complex5.subtract(complex18);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(3082.0, 0.0);
      complex0.readResolve();
      complex0.nthRoot(1160);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.log();
      complex5.INF.tan();
      Complex complex6 = complex1.add(complex0);
      complex6.ONE.hashCode();
      complex0.getReal();
      Complex.valueOf(3599.7479, 3082.0);
      complex3.I.sqrt();
      Complex complex7 = complex1.divide(complex0);
      complex1.tan();
      complex7.reciprocal();
      complex4.sin();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex((-587.207283903), (-587.207283903));
      complex1.INF.getField();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.createComplex((-718.1197393998), (-718.1197393998));
      Complex complex4 = complex3.I.negate();
      complex4.I.abs();
      Complex complex5 = Complex.valueOf((-718.1197393998), (-718.1197393998));
      Complex complex6 = Complex.valueOf((-587.207283903), (-1216.66791515486));
      Complex complex7 = complex6.createComplex((-435.3355388053), 3926.28828371);
      Complex complex8 = complex5.INF.reciprocal();
      complex8.INF.atan();
      Complex complex9 = complex5.multiply(complex0);
      complex9.ZERO.nthRoot(345);
      Complex complex10 = complex0.ONE.conjugate();
      complex2.equals((Object) null);
      complex2.getReal();
      Complex complex11 = complex10.ZERO.divide(complex3);
      Complex.valueOf(Double.NaN);
      complex2.hashCode();
      Complex complex12 = complex2.sinh();
      complex8.divide(complex10);
      Complex complex13 = complex7.multiply(complex4);
      complex13.ONE.add(complex0);
      complex11.getReal();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      complex3.ONE.asin();
      complex3.ONE.readResolve();
      Complex complex4 = complex0.tanh();
      complex2.pow(3393.367674935901);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.731), (-847.45864723439));
      Complex complex1 = complex0.ONE.cosh();
      complex0.ONE.log();
      Complex.valueOf((-3374.4), 549.33222185);
      complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.INF.acos();
      complex3.ONE.tan();
      complex2.toString();
      complex1.ZERO.negate();
      complex1.cos();
      complex1.hashCode();
      complex1.sqrt();
      Complex complex4 = new Complex((-3374.4), 549.33222185);
      complex1.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.createComplex((-1.1356287358852729E-8), 1786.84590357);
      complex0.INF.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tanh();
      complex2.add(1952.746977342134);
      complex2.ZERO.pow(complex0);
      Complex complex3 = Complex.valueOf(604.82203119, (-917.7593));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.subtract((-2212.2612321));
      Complex complex1 = Complex.valueOf(2327.3501802);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.multiply((-2287.25));
      Complex complex4 = complex3.I.sqrt1z();
      complex4.INF.sin();
      complex0.sqrt1z();
      Complex complex5 = complex1.sinh();
      complex5.I.pow(complex3);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.INF.pow(complex1);
      complex2.exp();
      complex7.subtract((-846.933094));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.pow(0.0);
      complex3.getField();
      complex1.abs();
      complex2.getReal();
      complex3.NaN.subtract((-833.787785));
      complex3.ZERO.divide(complex1);
      complex3.abs();
      complex3.ZERO.sinh();
      complex4.getField();
      Complex complex5 = complex3.asin();
      complex5.multiply(complex0);
      Complex complex6 = complex4.divide(complex5);
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.subtract(0.0);
      complex7.ONE.multiply(2092.1825);
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2482.61312, 2482.61312);
      Complex complex1 = complex0.pow(221.678398451);
      complex1.ZERO.multiply(2482.61312);
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.ONE.sinh();
      complex1.abs();
      complex0.readResolve();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      complex0.I.createComplex((-2138.673611896295), (-8.966500602352001E-8));
      complex0.ZERO.divide((-2138.673611896295));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.subtract(complex1);
      complex2.isNaN();
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex6.ONE.pow((-8.966500602352001E-8));
      Complex complex8 = complex3.multiply(complex5);
      complex8.INF.acos();
      complex4.ONE.atan();
      complex0.INF.toString();
      Complex complex9 = complex2.divide(complex3);
      Complex complex10 = complex9.ZERO.negate();
      complex2.readResolve();
      Complex complex11 = complex2.pow(complex0);
      complex11.divide(complex8);
      complex10.I.multiply((-8.966500602352001E-8));
      complex9.hashCode();
      complex11.cos();
      complex5.INF.tan();
      complex10.atan();
      Complex complex12 = complex8.pow((-2138.673611896295));
      complex10.ZERO.getArgument();
      Complex complex13 = complex8.multiply(complex4);
      complex10.getReal();
      complex5.add(complex1);
      complex13.getField();
      complex3.toString();
      complex12.createComplex(-0.0, 6.283185307179586);
      complex7.acos();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1.0768281419102595E-106);
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex1.ZERO.divide((-20.0));
      complex1.NaN.add(950.4);
      complex1.pow(complex0);
      complex0.add(complex2);
      Complex complex3 = complex0.NaN.sqrt1z();
      complex0.acos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.INF.reciprocal();
      complex6.ZERO.sin();
      Complex complex7 = complex3.asin();
      complex7.I.multiply(0);
      Complex complex8 = complex0.asin();
      complex8.readResolve();
      complex5.getField();
      complex1.equals("");
      complex7.sinh();
      complex5.readResolve();
      Complex.valueOf(1081.76998771);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-756.198839645));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.NaN.multiply(1612);
      complex0.equals((Object) null);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.multiply((-756.198839645));
      complex6.readResolve();
      Complex complex8 = complex7.sqrt1z();
      complex2.multiply(0);
      complex5.getArgument();
      Complex complex9 = complex4.reciprocal();
      complex9.I.pow(1404.0);
      complex8.sqrt();
      complex6.cosh();
      complex3.getImaginary();
      Complex.valueOf((double) 1612);
      complex1.getField();
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-502.5587667810653));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.I.subtract((-2703.4649937441845));
      complex2.ZERO.pow((-2703.4649937441845));
      complex0.NaN.toString();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf((-502.5587667810653), (-502.5587667810653));
      Complex complex5 = complex1.ZERO.sqrt();
      complex5.INF.divide(complex4);
      complex4.ZERO.exp();
      Complex complex6 = complex0.ZERO.pow(complex4);
      complex3.ONE.hashCode();
      complex4.INF.tanh();
      Complex complex7 = complex1.multiply((-489));
      complex1.ONE.createComplex((-489), (-489));
      Complex complex8 = complex0.sin();
      complex4.ZERO.divide(complex3);
      complex7.nthRoot(2441);
      complex6.reciprocal();
      complex4.sqrt();
      complex7.getImaginary();
      complex8.multiply((double) (-489));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.abs();
      Complex complex3 = complex0.ONE.acos();
      complex3.INF.pow(1.0);
      complex3.asin();
      Complex complex4 = complex0.divide(0.46853768825531006);
      Complex complex5 = complex0.asin();
      complex0.isNaN();
      complex4.toString();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex5.log();
      Complex complex8 = complex7.ZERO.cos();
      complex8.NaN.multiply((-812.066111718));
      Complex complex9 = complex6.add(complex0);
      complex9.INF.abs();
      complex0.getImaginary();
      complex5.isInfinite();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex1.sqrt1z();
      complex11.NaN.sqrt();
      complex2.getImaginary();
      Complex complex12 = complex10.log();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex.valueOf(353.4676442140005);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.INF.negate();
      complex4.ONE.getArgument();
      complex1.INF.reciprocal();
      Complex complex5 = complex4.createComplex((-755.66842260122), 20.0);
      complex5.ONE.hashCode();
      Complex complex6 = complex3.INF.createComplex((-3405.6923764635776), (-2104.22895198833));
      complex3.abs();
      complex3.getReal();
      Complex complex7 = complex4.pow(complex2);
      complex2.multiply((-2104.22895198833));
      Complex complex8 = Complex.valueOf((-755.66842260122), (-4.3991443996021166E113));
      complex6.toString();
      complex7.isInfinite();
      complex2.getImaginary();
      Complex complex9 = complex5.subtract((-20.0));
      complex5.getArgument();
      complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.createComplex(3585.579201330813, 3585.579201330813);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-8.248332290732976E-35));
      complex0.isNaN();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1881.0794011156308, 1881.0794011156308);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.I.subtract(complex0);
      complex1.INF.nthRoot(2178);
      complex0.ZERO.nthRoot(2178);
      complex0.ZERO.getArgument();
      complex0.equals((Object) null);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex5.I.subtract(complex2);
      complex1.ZERO.acos();
      Complex complex7 = complex5.INF.add((-5812.24022));
      complex4.I.multiply(complex2);
      complex6.ONE.createComplex(Double.NaN, 0.0);
      Complex complex8 = Complex.valueOf((double) 2178, 0.0);
      complex4.readResolve();
      complex8.INF.toString();
      Complex complex9 = Complex.ZERO;
      complex8.equals(complex9);
      Complex complex10 = complex6.NaN.add(complex3);
      complex8.NaN.add(complex6);
      Complex complex11 = complex4.pow(1881.0794011156308);
      complex1.exp();
      complex8.pow((-3474.3546173908844));
      complex6.negate();
      complex0.reciprocal();
      complex4.add(complex7);
      complex11.isNaN();
      complex2.getReal();
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-342.5401177912), 826.70192);
      Complex complex1 = complex0.multiply(0);
      complex1.INF.hashCode();
      Complex complex2 = complex1.ONE.asin();
      complex2.INF.tanh();
      Complex complex3 = complex0.cosh();
      complex3.nthRoot(1047);
      Complex complex4 = complex0.pow(complex3);
      complex4.conjugate();
      complex4.sin();
      complex4.I.exp();
      complex4.INF.readResolve();
      complex3.sqrt();
      Complex complex5 = complex4.asin();
      complex4.hashCode();
      complex0.hashCode();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex5.log();
      Complex complex7 = complex0.negate();
      complex7.ZERO.negate();
      Complex complex8 = complex1.reciprocal();
      complex8.I.pow((-1483.3388));
      complex0.hashCode();
      try { 
        complex6.nthRoot((-5756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,756
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.13263377);
      Complex complex1 = Complex.ZERO;
      complex1.I.toString();
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.toString();
      Complex complex3 = complex0.subtract(119.13263377);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.createComplex(119.13263377, (-1068.7838928161066));
      complex5.INF.log();
      complex2.NaN.acos();
      Complex.valueOf((-1068.7838928161066), 119.13263377);
      Complex complex6 = Complex.valueOf(0.0);
      complex0.equals((Object) null);
      complex3.readResolve();
      Complex complex7 = complex6.multiply(3271);
      complex7.INF.multiply((-1068.7838928161066));
      complex4.readResolve();
      Complex complex8 = complex2.tan();
      complex8.createComplex((-1070.413991795), (-2141.556592276));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract((-1758.1640481345));
      Complex complex3 = Complex.valueOf(0.0, (-1758.1640481345));
      complex1.isNaN();
      Complex complex4 = complex1.NaN.asin();
      complex1.add(0.0);
      complex0.ZERO.add(complex4);
      complex2.add(complex1);
      Complex complex5 = complex3.divide(complex2);
      complex4.toString();
      complex1.log();
      complex3.isInfinite();
      complex1.sinh();
      complex5.nthRoot(508);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.hashCode();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.sinh();
      int int0 = (-79);
      try { 
        complex2.ONE.nthRoot((-79));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -79
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.divide(complex3);
      complex4.nthRoot(1009);
      Complex complex5 = complex4.multiply(1009);
      Complex complex6 = complex5.tan();
      complex6.NaN.hashCode();
      complex6.I.nthRoot(1009);
      Complex complex7 = complex3.divide((double) 1009);
      complex7.I.add((double) 1009);
      Complex complex8 = complex2.cos();
      Complex complex9 = complex2.subtract(complex0);
      Complex complex10 = complex9.sin();
      complex8.multiply(complex1);
      complex8.multiply(complex4);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-1987.26), 1734.67);
      Complex complex1 = complex0.NaN.createComplex(1734.67, (-298.314691806489));
      Complex complex2 = complex0.NaN.multiply(17);
      complex2.I.log();
      complex0.NaN.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.negate();
      complex4.INF.getField();
      Complex complex5 = complex3.INF.cosh();
      complex3.INF.reciprocal();
      complex5.INF.divide(complex0);
      complex3.getField();
      complex3.acos();
      Complex complex6 = complex4.createComplex((-3511.0), (-3511.0));
      complex2.conjugate();
      Complex complex7 = Complex.valueOf((-298.314691806489));
      complex1.divide(1312.6407776138876);
      complex6.atan();
      Complex complex8 = complex6.exp();
      complex8.NaN.add((double) 17);
      complex0.tanh();
      complex0.subtract(2234.5);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-920.063622967), (-920.063622967));
      Complex complex1 = complex0.I.add((-920.063622967));
      complex0.atan();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.tanh();
      complex3.ONE.log();
      Complex.valueOf((-920.063622967));
      Complex.valueOf(676.0);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex(0.0, (-1.0));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
