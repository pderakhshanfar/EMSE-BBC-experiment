/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:35:24 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(546.57977);
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(3.7730204737910044E260, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      complex1.hashCode();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 546.57977);
      Complex complex7 = Complex.NaN;
      complex7.acos();
      complex0.abs();
      Complex complex8 = complex1.acos();
      Complex complex9 = Complex.I;
      complex5.acos();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.ONE;
      complex0.multiply(complex3);
      Complex complex12 = Complex.ONE;
      complex1.exp();
      Complex complex13 = Complex.NaN;
      complex13.ZERO.divide(546.57977);
      complex5.divide(complex7);
      complex11.sinh();
      complex8.atan();
      complex2.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1356.6094053));
      Complex complex1 = complex0.subtract((-1356.6094053));
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = Complex.valueOf(6.542198650045417E-4, (-85.3204));
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.add(complex3);
      complex1.I.hashCode();
      complex3.NaN.tan();
      Complex complex8 = complex4.I.tan();
      complex4.pow(2.0);
      complex5.readResolve();
      complex3.exp();
      complex3.add(complex6);
      complex1.tan();
      Complex complex9 = complex7.add(complex8);
      complex7.divide((-1.0));
      complex9.nthRoot(1903);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-1.2448938139338362E211), 37.0);
      complex1.cosh();
      complex1.acos();
      Complex.valueOf((-1.2448938139338362E211), 1.6496143246803731E199);
      Complex complex2 = complex1.multiply((-1.2448938139338362E211));
      complex2.pow(39.99999596097231);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2844404218972918E290));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.add((-4.0227923480202281E18));
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = complex4.NaN.log();
      complex5.ZERO.acos();
      Complex complex6 = complex0.subtract((-1.0));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.NaN.sinh();
      complex0.abs();
      Complex complex9 = complex0.sqrt1z();
      complex9.INF.multiply(complex6);
      Complex complex10 = complex0.exp();
      complex2.add(1.2844404218972918E290);
      Complex complex11 = complex10.subtract((-4.0227923480202281E18));
      complex11.I.reciprocal();
      complex3.readResolve();
      complex0.atan();
      complex1.tan();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2591.1724191529524, (-20.0));
      Complex complex2 = complex1.multiply(6.978506396034849E-116);
      complex0.getReal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.multiply(complex3);
      complex2.getField();
      complex4.multiply(complex0);
      complex0.divide(169.01437);
      Complex complex5 = complex3.sinh();
      complex5.multiply(2132);
      complex4.tanh();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex((-1169.6787));
      complex7.nthRoot(37);
      Complex complex8 = Complex.valueOf((-974.51109895839));
      Complex complex9 = Complex.valueOf((-1468.05732446836), 2378.7606);
      Complex complex10 = Complex.ZERO;
      complex6.toString();
      complex9.hashCode();
      complex3.isNaN();
      complex8.abs();
      complex8.acos();
      Complex complex11 = Complex.I;
      Complex.valueOf(6.978506396034849E-116, 169.01437);
      complex7.multiply(complex8);
      complex2.exp();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-1.0), (-2186.7982004));
      complex1.add(complex0);
      Complex complex2 = new Complex((-2186.7982004), (-4.869955151949929E-231));
      Complex complex3 = new Complex(2.8330789837569332E-8, 20.0);
      complex3.tan();
      complex1.ZERO.divide((-395.055669648709));
      complex2.pow(complex0);
      complex3.tan();
      complex1.cos();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.08), (-29.08));
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      complex0.atan();
      complex1.hashCode();
      complex2.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      complex0.acos();
      complex2.abs();
      // Undeclared exception!
      complex1.nthRoot(2005689993);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.NaN.pow(complex1);
      complex0.subtract(375.92866);
      Complex complex2 = complex0.asin();
      try { 
        complex2.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3528.3);
      Complex complex1 = Complex.valueOf((-1703.42395634), (-1647.2817423));
      complex0.NaN.multiply(complex1);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 3528.3);
      Complex complex3 = complex0.add(complex2);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.negate();
      complex0.pow(128.71365674057813);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-4.869955151949929E-231));
      complex1.NaN.log();
      complex0.multiply((-4.869955151949929E-231));
      complex1.tanh();
      Complex complex2 = new Complex((-4.869955151949929E-231), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.626756233436419), Double.POSITIVE_INFINITY);
      complex0.negate();
      complex0.multiply(4195.442070071256);
      Complex complex1 = Complex.INF;
      complex1.negate();
      Complex complex2 = Complex.ZERO;
      Complex.valueOf((-0.7875470999666825), (-6.663542893624021E-14));
      complex2.tan();
      Complex.valueOf(953.84224349555, 338.337462002);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.69379917057515E12));
      complex1.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.626756233436419), (-7.626756233436419));
      double double0 = 2.69894076449;
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1904));
      complex0.readResolve();
      Complex complex1 = complex0.multiply((-1904));
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.tan();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      complex0.abs();
      Complex complex1 = Complex.INF;
      complex0.abs();
      complex0.exp();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex(6.283185307179586, Double.NaN);
      complex0.nthRoot(468);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2952.99862028176, 2952.99862028176);
      Complex.valueOf(1.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-4.869955151949929E-231), 2.169320583343506);
      Complex complex2 = complex1.createComplex((-1.0), (-3316.851135));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.divide(complex1);
      complex0.subtract(complex1);
      complex2.acos();
      complex4.multiply(17);
      Complex.valueOf((double) 17);
      Complex complex5 = Complex.valueOf(20.0);
      complex2.tan();
      complex2.readResolve();
      complex0.nthRoot(17);
      try { 
        complex5.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1.0), (-4.869955151949929E-231));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.divide(complex0);
      complex0.subtract(complex0);
      complex1.acos();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.I.multiply(complex0);
      complex1.ONE.toString();
      complex1.multiply(4.3847165025801704E16);
      complex0.INF.divide(Double.NaN);
      complex0.INF.subtract((-519.9691406));
      Complex complex2 = new Complex(4.3847165025801704E16);
      Complex complex3 = complex2.I.multiply(4.3847165025801704E16);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ZERO.atan();
      complex5.I.asin();
      complex1.add(complex2);
      complex1.asin();
      complex1.divide(1223.7244115);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      Complex complex1 = Complex.ZERO;
      complex0.abs();
      Complex complex2 = Complex.ONE;
      complex2.ZERO.add(complex1);
      complex1.abs();
      Complex complex3 = complex0.negate();
      complex3.tan();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      Complex complex1 = complex0.multiply(2.169320583343506);
      Complex complex2 = complex1.createComplex((-0.002104218870385921), (-0.002104218870385921));
      Complex complex3 = complex2.createComplex((-8.697724830833087E-8), 2.169320583343506);
      Complex complex4 = Complex.NaN;
      complex0.divide(complex4);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.subtract(complex3);
      complex6.acos();
      Complex complex7 = Complex.ONE;
      complex7.ZERO.sqrt();
      Complex complex8 = complex7.multiply(1716);
      complex8.ONE.nthRoot(1717);
      Complex.valueOf(Double.NaN);
      Complex complex9 = Complex.INF;
      complex9.tan();
      complex0.add(Double.NaN);
      Complex.valueOf((-8.697724830833087E-8));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2561.43384), 2720.3688);
      complex0.NaN.exp();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.multiply(387);
      Complex complex3 = complex2.add(2720.3688);
      complex3.NaN.cosh();
      Complex complex4 = complex0.multiply(553);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.createComplex(1895.3, 634.9310547565);
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex6.ZERO.multiply(288);
      complex8.add(complex2);
      Complex complex9 = complex4.tan();
      complex9.conjugate();
      Complex complex10 = new Complex((-20.0), 7649.852417364773);
      complex10.I.getField();
      complex7.equals(complex10);
      Complex complex11 = Complex.ZERO;
      complex10.add(complex11);
      Complex complex12 = complex0.NaN.cosh();
      Complex complex13 = complex12.NaN.log();
      complex11.pow(1.3838964592430477E-87);
      complex6.divide((-2416.1802338633));
      complex13.multiply(0.0);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      Complex complex1 = complex0.multiply(2.169320583343506);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.subtract(2.169320583343506);
      complex0.readResolve();
      Complex complex4 = complex1.cosh();
      complex3.multiply(1148);
      Complex complex5 = complex2.multiply((double) 1148);
      Complex complex6 = Complex.valueOf(2.169320583343506, 1.5670874118804932);
      complex6.equals(complex0);
      Complex complex7 = Complex.valueOf((double) 1148);
      complex7.sqrt1z();
      Complex complex8 = Complex.I;
      complex6.divide(complex1);
      Complex complex9 = complex5.sin();
      Complex complex10 = Complex.valueOf(2.169320583343506);
      complex10.multiply((double) 1148);
      complex2.conjugate();
      Complex complex11 = complex9.negate();
      complex4.sinh();
      complex1.sqrt();
      complex9.getField();
      Complex complex12 = Complex.valueOf(503288.0);
      complex12.cos();
      Complex complex13 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      complex13.sqrt();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.60495372), (-1831.9046033511956));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-919.60495372));
      Complex complex3 = complex1.sin();
      complex3.ONE.acos();
      complex3.subtract((-919.60495372));
      complex0.readResolve();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex4.INF.multiply(2465);
      Complex complex6 = complex1.multiply((-919.60495372));
      complex0.equals(complex6);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = Complex.I;
      complex2.divide(complex8);
      Complex complex9 = complex7.sin();
      complex9.I.multiply((double) 2465);
      complex9.ZERO.conjugate();
      complex4.negate();
      Complex complex10 = complex5.sinh();
      complex10.ONE.sqrt();
      complex8.getField();
      complex0.cos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2.325147219074669E-10));
      complex0.ZERO.atan();
      Complex complex1 = Complex.valueOf((-2472.57), (-2.325147219074669E-10));
      Complex complex2 = complex0.ONE.divide((-2472.57));
      complex0.getField();
      Complex complex3 = complex2.I.add((-2472.57));
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.createComplex((-472.346897), (-472.346897));
      Complex complex6 = complex5.INF.exp();
      complex5.NaN.pow((-2676.565136377401));
      Complex complex7 = complex5.ZERO.reciprocal();
      complex7.ZERO.createComplex((-2676.565136377401), (-472.346897));
      complex1.divide((-2472.57));
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = complex8.sqrt1z();
      complex9.ONE.getArgument();
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex6.INF.tan();
      complex11.ZERO.atan();
      complex10.NaN.createComplex((-472.346897), (-2.325147219074669E-10));
      Complex complex12 = complex6.ZERO.sinh();
      complex12.ZERO.conjugate();
      complex0.nthRoot(37);
      Complex complex13 = complex1.atan();
      complex13.ONE.nthRoot(37);
      complex13.I.divide(complex5);
      complex2.sqrt();
      complex13.toString();
      complex6.divide((-2.325147219074669E-10));
      complex4.multiply(complex2);
      Complex complex14 = complex3.exp();
      complex14.subtract((-2472.57));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(963);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.sin();
      complex4.divide(complex1);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex0.cosh();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex2.divide(complex6);
      complex6.isInfinite();
      complex5.log();
      complex8.multiply((-3091));
      complex8.readResolve();
      Complex complex9 = Complex.NaN;
      complex6.subtract((double) 963);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(3.8410992889527954E-214, 6.910528108396216E258);
      complex0.ZERO.acos();
      complex0.sin();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex.valueOf(424.0, 424.0);
      Complex.valueOf(Double.NaN, 424.0);
      Complex complex0 = new Complex(424.0, 424.0);
      Complex complex1 = complex0.cosh();
      complex1.atan();
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex0.getField();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.sinh();
      complex2.tanh();
      Complex complex3 = Complex.INF;
      complex3.hashCode();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      complex4.tanh();
      complex4.getField();
      complex0.divide(20.0);
      complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      Complex complex1 = complex0.NaN.subtract((-1.602000800745108E-9));
      complex0.abs();
      complex0.subtract(0.0);
      Complex complex2 = complex0.negate();
      complex2.tan();
      complex0.add(2.169320583343506);
      Complex complex3 = complex0.multiply(complex1);
      complex0.multiply(complex3);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      complex0.ONE.getField();
      Complex complex1 = Complex.valueOf(1.0, 2.0);
      complex0.getImaginary();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      Complex complex1 = complex0.multiply(2.169320583343506);
      complex1.getReal();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex.valueOf(2.169320583343506);
      complex2.getField();
      complex1.multiply(complex3);
      Complex complex4 = complex2.divide(4.7059517933178086);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.multiply(1724.215543);
      Complex complex9 = complex4.negate();
      Complex complex10 = Complex.INF;
      complex10.I.pow((-1051.2877732717));
      Complex complex11 = Complex.NaN;
      Complex complex12 = new Complex(1.672538528645746);
      complex12.ZERO.multiply(complex9);
      complex5.equals(complex12);
      complex11.divide(1724.215543);
      complex7.pow((-756.91545972767));
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex4.acos();
      complex11.multiply(complex14);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2033441897));
      complex1.readResolve();
      complex0.multiply(complex1);
      Complex complex2 = complex1.subtract(20.0);
      complex2.toString();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      Complex complex1 = complex0.multiply(2.169320583343506);
      complex1.getReal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.multiply(complex3);
      complex1.nthRoot(2494);
      complex0.abs();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.tan();
      complex6.add(3.0678825900995004);
      Complex complex7 = complex2.multiply(complex1);
      complex6.multiply(complex5);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.subtract(0.9737224989891029);
      Complex complex3 = complex1.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex6.INF.reciprocal();
      complex4.ZERO.pow((-3915.896));
      Complex complex8 = complex6.negate();
      Complex complex9 = complex0.INF.log();
      complex9.ONE.abs();
      complex0.NaN.cosh();
      Complex complex10 = complex6.asin();
      complex10.equals(complex3);
      Complex complex11 = complex4.I.pow(1169.4624);
      complex2.acos();
      Complex complex12 = complex5.subtract((-20.0));
      Complex complex13 = complex6.add(2283.170794395021);
      complex13.ZERO.abs();
      Complex complex14 = complex11.exp();
      complex14.NaN.multiply(complex11);
      Complex complex15 = complex11.pow(complex12);
      complex15.getArgument();
      Complex complex16 = complex9.tan();
      complex16.INF.reciprocal();
      complex12.log();
      complex11.add(complex9);
      complex15.asin();
      complex8.add(complex6);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.multiply(5.370131904567218E-8);
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.NaN.getField();
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex3.ONE.divide(5.370131904567218E-8);
      Complex complex4 = complex1.sinh();
      complex4.ZERO.tanh();
      Complex complex5 = Complex.INF;
      complex5.multiply(1.0);
      complex1.negate();
      complex4.hashCode();
      complex5.isInfinite();
      Complex complex6 = Complex.NaN;
      complex6.acos();
      Complex complex7 = complex6.acos();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cosh();
      Complex complex3 = new Complex(Double.NaN);
      complex3.getImaginary();
      Complex complex4 = new Complex(0.0, Double.NaN);
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      Complex complex1 = complex0.multiply(2.169320583343506);
      complex1.getReal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.multiply(complex1);
      complex2.getField();
      complex1.multiply(complex3);
      Complex complex4 = complex2.divide(4.7059517933178086);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = Complex.INF;
      complex6.multiply(1724.215543);
      complex4.negate();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.NaN;
      Complex complex10 = new Complex(1.672538528645746);
      complex5.equals(complex10);
      complex9.divide(1724.215543);
      complex7.pow((-756.91545972767));
      Complex complex11 = Complex.ZERO;
      complex11.reciprocal();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      complex0.abs();
      Complex complex2 = complex0.ONE.negate();
      complex0.cosh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf((double) 2521, Double.NaN);
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.I;
      complex6.isInfinite();
      Complex complex7 = complex2.log();
      complex4.multiply(2521);
      complex7.readResolve();
      complex1.multiply(complex4);
      Complex complex8 = Complex.valueOf(6437469.281535903);
      complex8.subtract(2.5436656904062604E-13);
      Complex complex9 = Complex.NaN;
      complex9.toString();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply(complex1);
      complex0.getField();
      Complex complex3 = Complex.ONE;
      complex2.multiply(complex3);
      Complex complex4 = complex2.divide(Double.NaN);
      complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.sinh();
      complex4.hashCode();
      Complex.valueOf(5.8507482395329604E144);
      complex6.isNaN();
      complex5.abs();
      complex1.acos();
      complex2.acos();
      Complex complex7 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(325.5);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(4105.528240775449);
      Complex complex3 = complex2.multiply((-1568));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex3.divide(complex4);
      complex1.conjugate();
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.NaN;
      complex5.divide(complex6);
      complex3.isInfinite();
      complex6.log();
      Complex complex9 = complex0.multiply((-2979));
      complex9.readResolve();
      Complex complex10 = complex6.multiply(complex7);
      complex0.subtract((double) (-2979));
      Complex complex11 = Complex.INF;
      complex11.toString();
      complex6.asin();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.11203126037254307);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.ZERO.reciprocal();
      complex3.createComplex(0.11203126037254307, 1.4681467291666195E-5);
      complex1.ZERO.getField();
      complex1.ONE.getArgument();
      Complex complex4 = complex0.add(complex1);
      complex4.ZERO.readResolve();
      Complex complex5 = complex2.multiply(1.6779589653015137);
      Complex complex6 = Complex.valueOf((-3876.7));
      complex6.I.abs();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex3.sinh();
      complex8.ONE.multiply(complex2);
      complex2.log();
      Complex complex9 = complex1.pow(complex5);
      complex7.atan();
      complex1.subtract(1.0);
      Complex complex10 = complex1.add((-249.10930998104));
      complex10.INF.toString();
      Complex complex11 = complex0.I.exp();
      complex11.cosh();
      Complex complex12 = complex3.asin();
      complex12.ZERO.sqrt();
      complex9.toString();
      Complex complex13 = complex9.sqrt();
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1590.8471735050455, 1590.8471735050455);
      Complex complex1 = complex0.I.sqrt();
      complex0.INF.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.pow(0.0);
      complex1.INF.cosh();
      complex0.INF.getField();
      Complex complex4 = complex2.I.multiply(367);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex3.subtract((-3.835454246739619E-8));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex6.cosh();
      Complex complex10 = Complex.I;
      complex10.divide(complex1);
      Complex complex11 = new Complex(1590.8471735050455, 367);
      Complex complex12 = complex11.atan();
      complex8.readResolve();
      Complex complex13 = complex9.sinh();
      complex13.toString();
      complex5.toString();
      Complex complex14 = complex2.add(0.7853981633974483);
      complex7.sinh();
      complex7.cos();
      Complex complex15 = complex14.multiply(complex0);
      complex9.toString();
      Complex complex16 = Complex.INF;
      Complex complex17 = complex15.acos();
      complex8.isNaN();
      complex12.add(complex1);
      complex7.readResolve();
      complex15.equals(complex7);
      complex17.cosh();
      complex14.subtract(20.584739110544024);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(424.0);
      complex1.abs();
      Complex complex2 = complex1.subtract((-1.602000800745108E-9));
      Complex complex3 = complex0.tanh();
      complex0.getField();
      complex2.divide((-1257.346570205588));
      complex3.nthRoot(37);
      Complex.valueOf(816.00587031, 816.00587031);
      Complex complex4 = Complex.valueOf(0.8324455959228363, 0.0);
      Complex complex5 = complex4.asin();
      complex5.toString();
      Complex complex6 = complex5.multiply((double) 37);
      complex6.negate();
      Complex complex7 = complex1.tan();
      Object object0 = new Object();
      complex5.divide((double) 37);
      complex5.pow((-20.0));
      complex7.reciprocal();
      Complex complex8 = Complex.valueOf(0.8324455959228363, (double) 37);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-4018.9), 0.0);
      Complex complex1 = new Complex(0.0, (-4018.9));
      Complex complex2 = complex1.NaN.multiply(20.0);
      Complex complex3 = complex2.I.add((-1373.2908301851062));
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.INF.sin();
      complex6.ONE.atan();
      complex0.atan();
      complex4.subtract(complex2);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.1675544040771637, 0.1675544040771637);
      Complex complex2 = new Complex(0.1675544040771637, 0.00584227591753006);
      complex1.multiply(1.0);
      Complex complex3 = Complex.valueOf(0.00584227591753006, 0.00584227591753006);
      Complex complex4 = complex3.add((-1761.7113318076956));
      Complex complex5 = complex3.pow((-1761.7113318076956));
      complex2.pow(complex0);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex1.atan();
      complex8.atan();
      complex6.subtract(complex7);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.multiply(5.370131904567218E-8);
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.NaN.getField();
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex3.ONE.divide(5.370131904567218E-8);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = Complex.INF;
      complex6.multiply(1.0);
      complex1.negate();
      Complex complex7 = complex5.tan();
      complex5.equals(complex3);
      complex7.divide(1.0);
      complex7.pow(5.370131904567218E-8);
      complex4.reciprocal();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(5.370131904567218E-8);
      complex0.getReal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.multiply(complex2);
      complex1.getField();
      complex0.multiply(complex2);
      Complex complex4 = complex3.divide((-591.594602));
      complex3.sinh();
      Complex complex5 = complex3.tanh();
      complex0.hashCode();
      complex1.isInfinite();
      complex4.acos();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2153.97592717);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.multiply((-2052339302));
      complex2.sqrt();
      complex4.sin();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = new Complex(2153.97592717);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex1.cosh();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.divide(complex6);
      complex2.isInfinite();
      complex2.log();
      complex3.multiply(7);
      complex0.readResolve();
      complex5.multiply(complex7);
      complex10.subtract((double) (-2052339302));
      complex8.toString();
      Complex complex11 = new Complex(2153.97592717, (-1.615155621E7));
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-4018.9), 0.0);
      Complex complex1 = complex0.NaN.multiply(20.0);
      Complex complex2 = complex1.add(20.0);
      complex1.pow(3540.2127);
      complex2.pow(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.sin();
      complex2.atan();
      Complex complex5 = complex3.atan();
      complex4.subtract(complex1);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-248.689));
      complex0.multiply(3062.456868678445);
      // Undeclared exception!
      complex0.I.nthRoot(1518500250);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.cos();
      complex0.ONE.toString();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.sqrt();
      complex3.sin();
      Complex complex6 = complex1.divide(complex0);
      complex3.conjugate();
      Complex complex7 = complex5.cosh();
      Complex complex8 = Complex.NaN;
      complex0.divide(complex6);
      Complex complex9 = new Complex(0.0);
      complex9.isInfinite();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.log();
      complex2.multiply(37);
      complex7.readResolve();
      complex6.multiply(complex11);
      complex9.subtract((-767.1296275317));
      complex6.toString();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(424.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ZERO.multiply((-1187));
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex3.I.sin();
      complex0.divide(complex3);
      complex1.ZERO.conjugate();
      Complex complex5 = complex2.ONE.cosh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.divide(complex6);
      complex7.isInfinite();
      complex4.log();
      complex3.multiply((-1187));
      complex1.readResolve();
      complex2.multiply(complex6);
      Complex complex8 = complex4.subtract(424.0);
      complex7.toString();
      complex8.asin();
      complex5.sinh();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-0.9579117085802742));
      complex0.getReal();
      Complex complex2 = complex0.negate();
      complex2.getField();
      Complex complex3 = complex2.ONE.multiply(complex1);
      complex3.ONE.divide((-0.9579117085802742));
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.ZERO.tanh();
      complex4.ONE.hashCode();
      complex2.isInfinite();
      complex0.abs();
      complex0.equals(complex3);
      complex5.cosh();
      complex0.subtract((-0.9579117085802742));
      Complex complex6 = Complex.valueOf(1.0, 3333.516);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1417.29635, 0.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.createComplex(0.0, (-3.466267817480825E43));
      complex0.add(1.0);
      Complex.valueOf(0.0);
      Complex.valueOf(1417.29635);
      complex1.hashCode();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.169320583343506, 2.169320583343506);
      complex0.NaN.subtract((-1.602000800745108E-9));
      complex0.abs();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.tanh();
      complex2.ONE.getField();
      Complex complex3 = complex0.ONE.divide(2.169320583343506);
      complex3.NaN.nthRoot(37);
      Complex complex4 = Complex.valueOf(0.0, (-1.602000800745108E-9));
      Complex complex5 = complex1.asin();
      complex5.toString();
      Complex complex6 = complex4.multiply(3062.456868678445);
      Complex complex7 = complex6.I.negate();
      complex4.tan();
      complex6.equals(complex3);
      complex7.divide(3.0678825900995004);
      complex0.pow(3.0678825900995004);
      complex3.reciprocal();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = new Complex(Double.NaN);
          complex0.INF.readResolve();
          complex0.I.nthRoot(2521);
          complex0.abs();
          complex0.ONE.negate();
          Complex complex1 = complex0.tan();
          Complex complex2 = complex1.add((-425.4732));
          complex2.multiply(complex1);
          Complex.valueOf(0.0);
          Complex.valueOf(1.0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1873.14663, 1873.14663);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex0.acos();
      complex4.NaN.getArgument();
      Complex complex5 = complex2.ZERO.add(complex1);
      complex3.getField();
      complex3.INF.subtract(Double.NaN);
      Complex complex6 = complex2.INF.multiply((-699.120007461728));
      Complex complex7 = complex2.I.acos();
      Complex complex8 = complex7.NaN.sqrt();
      complex2.ONE.exp();
      Complex complex9 = complex2.createComplex(1873.14663, 1873.14663);
      Complex complex10 = complex2.negate();
      Complex complex11 = complex9.ONE.sinh();
      complex11.NaN.sinh();
      Complex complex12 = Complex.valueOf((-699.120007461728), (-699.120007461728));
      complex10.hashCode();
      Complex complex13 = complex9.pow(complex4);
      complex13.NaN.multiply(3300);
      complex3.getImaginary();
      complex2.add((-3962.210283));
      Complex complex14 = complex9.INF.sin();
      complex7.nthRoot(1948);
      complex8.subtract(complex11);
      complex10.sin();
      complex6.divide(complex2);
      complex5.subtract(complex14);
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.NaN.divide(complex1);
      complex0.ZERO.toString();
      complex0.abs();
      Complex complex4 = complex0.pow(1.0);
      Complex complex5 = complex4.ONE.exp();
      complex5.ONE.getArgument();
      complex4.I.getField();
      Complex complex6 = complex0.I.acos();
      Complex complex7 = complex6.INF.log();
      complex4.sin();
      complex2.INF.tanh();
      complex2.sqrt();
      complex1.readResolve();
      complex1.ZERO.subtract(complex7);
      Complex complex8 = complex1.add(0.0);
      complex1.I.hashCode();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex9.INF.reciprocal();
      complex2.add(complex3);
      complex10.ZERO.readResolve();
      complex9.getArgument();
      complex10.hashCode();
      Complex complex11 = complex4.add(0.0);
      complex11.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.NaN.conjugate();
      Complex complex3 = Complex.INF;
      complex3.INF.cosh();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.asin();
      complex1.NaN.getField();
      complex1.ZERO.divide(0.0);
      Complex complex2 = Complex.valueOf(1.5959614205422845E-225, (-3225.4807));
      complex2.I.multiply((-630));
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.ZERO.pow(2812.25);
      Complex complex5 = complex3.NaN.exp();
      complex1.ZERO.multiply((double) (-630));
      complex5.negate();
      int int0 = 37;
      complex0.I.multiply(37);
      Complex complex6 = complex3.negate();
      complex6.ZERO.atan();
      Complex complex7 = complex0.I.asin();
      complex7.ONE.sqrt1z();
      Complex complex8 = complex0.sqrt1z();
      complex4.NaN.sqrt();
      try { 
        complex8.ONE.nthRoot((-630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -630
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.NaN.cos();
      complex1.cos();
      complex0.ONE.toString();
      Complex complex2 = complex1.tan();
      complex1.ONE.getArgument();
      complex2.ONE.log();
      Complex complex3 = complex0.ONE.divide(complex1);
      complex2.I.negate();
      complex1.I.hashCode();
      Complex complex4 = complex3.I.add(0.0);
      complex4.sinh();
      Complex complex5 = complex0.cosh();
      complex4.add(0.0);
      complex2.add(3649.62027);
      complex1.sinh();
      complex5.cosh();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1044.37));
      Complex complex1 = complex0.negate();
      complex1.ONE.readResolve();
      complex0.sqrt1z();
      Complex complex2 = complex1.ONE.createComplex((-2086.25248927), (-551.868324377));
      complex0.readResolve();
      Complex complex3 = Complex.INF;
      complex2.INF.pow(complex3);
      Complex complex4 = complex2.INF.pow((-1039.43960574315));
      complex4.conjugate();
      Complex complex5 = complex0.negate();
      complex1.getImaginary();
      complex2.multiply(complex1);
      Complex complex6 = complex5.pow(Double.POSITIVE_INFINITY);
      complex6.ONE.tanh();
      Complex complex7 = Complex.valueOf((-551.868324377), (-1638.9767));
      Complex complex8 = complex0.subtract((-1044.37));
      complex7.getArgument();
      Complex complex9 = complex8.cos();
      complex9.NaN.sqrt();
      complex2.divide((-1193.6));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1590.8471735050455, 1590.8471735050455);
      Complex complex1 = complex0.I.sqrt();
      complex0.INF.getArgument();
      Complex complex2 = complex0.acos();
      complex0.pow(0.0);
      complex1.INF.cosh();
      complex0.INF.getField();
      Complex complex3 = complex2.I.multiply(367);
      Complex complex4 = complex3.ONE.atan();
      complex4.ZERO.conjugate();
      complex2.equals(complex0);
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.INF.divide((double) 367);
      complex7.INF.conjugate();
      complex5.abs();
      Complex.valueOf((double) 367);
      complex4.cos();
      complex7.INF.atan();
      complex7.sinh();
      complex7.isNaN();
      Complex complex8 = complex5.pow(0.7853981633974483);
      Complex complex9 = complex0.log();
      complex9.INF.subtract((-20.0));
      complex9.tan();
      complex0.atan();
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.NaN.multiply(17);
      Complex complex4 = complex0.NaN.cosh();
      complex0.toString();
      Complex complex5 = Complex.valueOf((-1811.45777004997));
      complex5.I.sqrt();
      Complex.valueOf((double) 17);
      complex3.sqrt();
      complex5.sinh();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = complex0.sin();
      complex1.I.readResolve();
      complex1.sqrt1z();
      complex0.NaN.abs();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.ONE.reciprocal();
      complex2.toString();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.sqrt1z();
      complex2.acos();
      complex1.toString();
      Complex complex6 = complex0.createComplex(0.0, 4268.93696147);
      complex5.sinh();
      Complex complex7 = complex6.ZERO.sinh();
      complex7.NaN.cosh();
      complex2.sqrt1z();
      complex3.isInfinite();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sin();
      complex1.reciprocal();
      Complex complex2 = Complex.valueOf(591.594602, (-1615.70490826493));
      Complex complex3 = complex1.NaN.reciprocal();
      complex3.I.add((-1615.70490826493));
      complex0.INF.abs();
      Complex complex4 = complex1.ONE.subtract(0.0);
      Complex complex5 = complex4.log();
      complex5.tan();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.cosh();
      complex5.I.createComplex(0.0, (-654.89255893));
      Complex complex8 = complex7.I.reciprocal();
      complex8.readResolve();
      complex0.readResolve();
      complex7.nthRoot(709);
      complex8.asin();
      Complex complex9 = complex2.atan();
      complex9.ZERO.divide(728.725693);
      Complex.valueOf((-1615.70490826493));
      complex5.NaN.subtract(complex9);
      complex1.atan();
      Complex complex10 = complex5.sqrt1z();
      complex4.pow(0.0);
      complex10.isNaN();
      Complex.valueOf((-654.89255893));
      complex6.multiply(complex0);
      complex9.createComplex(591.594602, 728.725693);
      complex2.createComplex(709, (-654.89255893));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-570.2582904), (-570.2582904));
      Complex complex1 = complex0.subtract(0.0);
      complex1.INF.atan();
      Complex complex2 = complex0.ZERO.divide(6.283185307179586);
      complex1.ZERO.hashCode();
      complex1.conjugate();
      complex0.getImaginary();
      Complex complex3 = Complex.valueOf(1.099358320236206);
      complex3.NaN.abs();
      complex1.sinh();
      complex2.getImaginary();
      complex1.createComplex(0.0, (-570.2582904));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2206.8242557));
      Complex complex1 = complex0.tan();
      complex1.ONE.abs();
      Complex complex2 = complex0.ONE.atan();
      complex0.ONE.getField();
      complex2.NaN.readResolve();
      Complex complex3 = complex0.pow((-2086.0));
      int int0 = (-2698);
      complex1.I.negate();
      try { 
        complex3.I.nthRoot((-2698));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,698
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.sqrt();
      complex4.ONE.negate();
      Complex complex5 = new Complex((-5188.8), (-5188.8));
      complex1.NaN.multiply(complex5);
      complex0.getImaginary();
      complex2.getField();
      complex2.getArgument();
      Complex complex6 = complex0.sqrt1z();
      complex6.ONE.abs();
      complex3.sinh();
      Complex complex7 = complex0.sqrt();
      complex3.reciprocal();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.ZERO.multiply((-4023.0));
      Complex complex5 = complex3.ZERO.createComplex((-1032.9399070157838), 3799.39);
      Complex complex6 = complex4.ONE.subtract(0.0);
      Complex complex7 = complex1.divide((-1032.9399070157838));
      Complex complex8 = complex7.tan();
      complex1.atan();
      complex7.NaN.reciprocal();
      Complex complex9 = Complex.valueOf((-1524.4189310026), (-1032.9399070157838));
      complex4.ZERO.pow(complex5);
      Complex complex10 = complex9.cosh();
      complex7.INF.pow(0.0);
      complex10.NaN.createComplex((-1317.2), (-1524.4189310026));
      complex1.multiply(0.0);
      Complex complex11 = complex8.negate();
      complex11.getReal();
      Complex complex12 = complex10.divide(complex2);
      complex12.INF.pow(complex1);
      complex8.acos();
      complex7.isInfinite();
      complex3.divide(Double.NaN);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(148.40632);
      Complex complex1 = complex0.I.pow((-3.096733638475319E128));
      complex1.INF.sqrt();
      complex0.abs();
      complex0.multiply(148.40632);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-4018.9), 0.0);
      Complex complex1 = new Complex(0.22626367211341858, (-4018.9));
      Complex complex2 = complex1.NaN.multiply(20.0);
      complex2.I.add((-1373.2908301851062));
      Complex complex3 = complex1.I.pow(1.0700758858011432E108);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.INF.sin();
      complex6.ONE.atan();
      complex0.atan();
      complex4.subtract(complex3);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.INF.negate();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.multiply(5.370131904567218E-8);
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.NaN.getField();
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex3.ONE.divide(5.370131904567218E-8);
      Complex complex4 = complex1.sinh();
      complex4.ZERO.tanh();
      complex4.ONE.hashCode();
      complex1.isInfinite();
      complex0.abs();
      complex0.acos();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-985.02971155), (-4239.317));
      Complex complex1 = complex0.INF.tanh();
      complex0.NaN.hashCode();
      Complex complex2 = complex0.ZERO.divide((-4239.317));
      complex0.sinh();
      complex2.sqrt();
      Complex complex3 = complex1.NaN.acos();
      complex3.INF.conjugate();
      Complex complex4 = complex1.ZERO.asin();
      complex4.NaN.abs();
      Complex complex5 = complex1.multiply(1465);
      Complex complex6 = complex5.ONE.sinh();
      complex3.NaN.acos();
      complex2.INF.hashCode();
      complex6.INF.getArgument();
      Complex complex7 = complex6.NaN.divide(complex3);
      complex7.ZERO.sin();
      Complex complex8 = complex4.INF.multiply(1465);
      complex0.cosh();
      complex1.equals(complex4);
      complex2.add(complex5);
      Complex complex9 = complex6.sqrt1z();
      complex0.conjugate();
      complex9.cos();
      Complex complex10 = complex6.conjugate();
      complex10.ZERO.pow(Double.NaN);
      complex1.divide(481.72);
      Complex complex11 = complex4.tanh();
      complex11.ZERO.asin();
      complex11.INF.divide(complex8);
      complex7.equals(complex4);
      complex4.tanh();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(2030.4122302804);
      complex0.INF.toString();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.INF.sin();
      complex2.ZERO.pow(complex0);
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex3.INF.subtract(complex0);
      complex4.subtract(complex3);
      complex4.ONE.sqrt();
      complex0.cos();
      Complex complex5 = complex3.conjugate();
      complex5.ZERO.sqrt();
      Complex complex6 = complex5.ZERO.cosh();
      complex5.sqrt1z();
      Complex complex7 = complex6.cosh();
      complex7.sqrt1z();
      Complex.valueOf(0.0);
      Complex.valueOf(2030.4122302804, 0.0);
      Complex complex8 = Complex.valueOf(2.404020521381534E-8, 0.0);
      complex0.add(complex8);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.INF.sin();
      Complex.valueOf(1615.77230618);
      Complex complex6 = Complex.valueOf(1615.77230618, (-77.8891411633));
      complex5.multiply(0.0);
      complex6.INF.cos();
      complex4.INF.nthRoot(212);
      Complex complex7 = complex2.I.sinh();
      Complex complex8 = complex7.INF.subtract(0.0);
      Complex complex9 = complex0.I.cos();
      Complex complex10 = complex9.ONE.cosh();
      complex9.ZERO.divide(complex6);
      complex8.ZERO.atan();
      complex10.ONE.readResolve();
      Complex complex11 = complex0.sinh();
      complex11.toString();
      complex9.ZERO.toString();
      complex9.I.add((-77.8891411633));
      Complex complex12 = complex11.sinh();
      complex12.cos();
      Complex complex13 = complex9.multiply(complex11);
      complex6.toString();
      complex11.subtract(complex9);
      Complex complex14 = complex1.acos();
      complex4.isNaN();
      complex8.add(complex1);
      Object object0 = complex13.readResolve();
      complex11.equals(object0);
      complex8.cosh();
      complex14.subtract((double) 212);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      complex1.I.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.divide(complex2);
      complex4.cosh();
      Complex.valueOf(137.111009, 137.111009);
      Complex complex5 = complex4.acos();
      complex4.NaN.nthRoot(1);
      complex5.subtract(450.585874913818);
      complex3.subtract(450.585874913818);
      complex0.getImaginary();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-221.024532);
      Complex complex1 = complex0.I.multiply((-221.024532));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.pow((-221.024532));
      complex4.ONE.exp();
      complex0.pow(complex2);
      complex1.INF.cos();
      Complex complex5 = complex1.NaN.tan();
      Complex complex6 = complex2.ONE.subtract(complex0);
      complex0.getField();
      complex0.isNaN();
      complex1.reciprocal();
      Complex complex7 = complex2.add(6.283185307179586);
      complex2.INF.multiply(7);
      complex7.NaN.getArgument();
      complex0.sqrt1z();
      Complex complex8 = complex5.reciprocal();
      complex8.INF.sin();
      Complex complex9 = complex6.subtract(complex5);
      complex9.I.pow(complex3);
      complex9.exp();
      complex2.equals("");
      int int0 = (-2903);
      try { 
        complex3.nthRoot((-2903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,903
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.NaN;
      Complex.valueOf(0.0, 0.0);
      complex1.INF.add(complex2);
      Complex complex3 = complex0.INF.sin();
      Complex.valueOf(0.0, (-7.12854317090566E-8));
      Complex complex4 = complex3.ZERO.divide(0.0);
      complex4.I.hashCode();
      complex4.NaN.createComplex(0.0, 0.0);
      complex4.ONE.abs();
      complex0.toString();
      complex4.tan();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      complex0.hashCode();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(932.1, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex0.NaN.add(complex2);
      complex5.ZERO.nthRoot(1);
      complex5.NaN.hashCode();
      complex4.ONE.multiply(1);
      complex3.I.abs();
      Complex complex6 = Complex.valueOf((-527.0), (-1049.85914746));
      complex6.ONE.log();
      try { 
        complex6.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2843.5997243, 2843.5997243);
      Complex complex2 = complex1.INF.add(complex0);
      complex0.subtract(complex1);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.valueOf(0.0, 520.00841);
      Complex complex6 = complex5.ONE.divide(3827.8061926751);
      complex6.I.getField();
      complex5.tan();
      complex4.ZERO.cos();
      Complex.valueOf(0.0);
      complex4.acos();
      Complex complex7 = Complex.valueOf((-567.129504294), 0.0);
      complex4.getImaginary();
      complex0.getField();
      Complex complex8 = complex2.reciprocal();
      complex8.INF.tan();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.exp();
      complex10.ZERO.log();
      complex6.add(3827.8061926751);
      complex4.cosh();
      complex7.subtract((-7.81295459930537E-72));
      complex5.toString();
      complex2.hashCode();
      Complex.valueOf((-20.0));
      Complex complex11 = new Complex(1.4615985810260016E275);
      complex4.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(20.0);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex3.acos();
      complex0.INF.getArgument();
      Complex complex7 = complex4.INF.conjugate();
      assertTrue(complex7.isInfinite());
      
      complex2.NaN.pow(20.0);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.I.conjugate();
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex2.divide(complex3);
      complex4.getArgument();
      Complex complex11 = complex10.INF.pow(2485.0798165);
      complex8.ONE.abs();
      complex3.getField();
      complex8.multiply(complex5);
      Complex complex12 = complex8.multiply(complex1);
      Complex complex13 = complex12.ZERO.multiply(7.095474414148981E-23);
      Complex complex14 = complex1.tan();
      Complex complex15 = complex14.NaN.tan();
      assertSame(complex15, complex5);
      
      Complex complex16 = complex1.conjugate();
      Complex complex17 = complex6.sqrt1z();
      complex17.isNaN();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.2113633229846195, complex17.getImaginary(), 0.01);
      
      double double0 = complex10.abs();
      assertSame(complex10, complex16);
      assertEquals(Double.NaN, double0, 0.01);
      
      complex8.isNaN();
      double double1 = complex8.getArgument();
      assertNotSame(complex8, complex13);
      assertTrue(complex8.equals((Object)complex11));
      assertSame(complex8, complex4);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.ONE.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.NaN.add(complex3);
      complex2.negate();
      Complex complex5 = complex2.INF.tan();
      assertSame(complex5, complex4);
      
      Complex complex6 = complex0.acos();
      assertEquals((-3.6882538673612966), complex6.getImaginary(), 0.01);
      
      double double0 = complex2.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.40808206181339196, complex2.getReal(), 0.01);
  }
}
