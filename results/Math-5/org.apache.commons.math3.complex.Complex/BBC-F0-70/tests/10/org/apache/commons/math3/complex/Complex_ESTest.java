/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:42:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(548.8492643);
      Complex complex3 = Complex.valueOf(548.8492643);
      complex2.toString();
      Complex complex4 = Complex.ZERO;
      complex4.sinh();
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = Complex.valueOf(548.8492643, Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.add(complex6);
      Complex complex8 = complex3.log();
      complex7.getField();
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex4.cos();
      complex10.readResolve();
      Object object0 = new Object();
      complex11.equals(object0);
      complex9.getImaginary();
      Complex complex12 = Complex.ZERO;
      complex4.asin();
      Complex complex13 = complex1.cos();
      complex4.readResolve();
      complex0.exp();
      complex4.exp();
      complex13.add(0.0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-20.0));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.I.negate();
      complex2.abs();
      complex3.getField();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(8.94633910890507E207, 2.0);
      complex0.abs();
      complex1.tan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1238058974550874E-214, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.log();
      complex1.I.acos();
      Complex complex2 = Complex.valueOf(1762.1, 2.1238058974550874E-214);
      complex1.pow(complex2);
      Complex complex3 = complex1.INF.divide(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.I.tan();
      complex0.toString();
      Complex complex4 = complex0.multiply(1073741824);
      Complex.valueOf((double) 1073741824);
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1034;
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(20.0);
      complex0.I.toString();
      Complex complex2 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(20.0, 20.0);
      Complex complex4 = complex0.I.add(complex0);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = (Complex)complex5.INF.readResolve();
      complex4.multiply(20.0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.subtract(complex6);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex1.pow(Double.POSITIVE_INFINITY);
      complex8.add(complex3);
      Complex complex11 = complex9.tan();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex4.isNaN();
      complex10.cosh();
      Complex complex12 = complex8.multiply((-2146812898));
      complex9.multiply(complex3);
      complex11.nthRoot(1868);
      complex12.sqrt();
      Complex complex13 = complex4.reciprocal();
      complex13.pow(118.56785);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = new Complex(6.283185307179586, Double.NaN);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.multiply(548.8492643);
      complex1.INF.abs();
      Complex.valueOf(548.8492643);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex1.I.divide(complex0);
      Complex complex5 = complex1.I.add(complex0);
      complex5.I.getField();
      Complex complex6 = complex1.INF.divide(complex1);
      complex2.getArgument();
      complex6.ZERO.log();
      complex5.ZERO.cos();
      complex4.readResolve();
      complex1.equals(complex3);
      complex0.getImaginary();
      complex2.acos();
      complex0.asin();
      complex0.cos();
      Complex complex7 = complex1.exp();
      complex7.hashCode();
      complex7.getField();
      Complex complex8 = complex2.negate();
      complex0.sqrt1z();
      complex8.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(3980.20665976619);
      Complex complex2 = complex1.multiply((-2744));
      try { 
        complex2.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(25.48844886056028, 25.48844886056028);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(25.48844886056028);
      Complex complex3 = complex2.ZERO.sinh();
      complex2.sinh();
      complex3.I.multiply(1022);
      complex0.cosh();
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.NaN;
      complex4.pow(137.92340421);
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex1.tan();
      complex7.ONE.acos();
      complex1.readResolve();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex0.getImaginary();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(25.48844886056028, 25.48844886056028);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(25.48844886056028);
      Complex complex3 = complex2.ZERO.sinh();
      complex2.sinh();
      complex3.I.multiply(1022);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.NaN;
      complex5.pow(137.92340421);
      complex5.add(complex0);
      Complex complex7 = complex1.tan();
      complex7.ONE.acos();
      complex3.readResolve();
      Complex complex8 = Complex.I;
      complex7.abs();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf((-728.158074));
      complex10.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.abs();
      Complex.valueOf(20.0);
      complex0.I.toString();
      Complex complex1 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(20.0, 20.0);
      Complex complex3 = complex0.I.add(complex0);
      Complex complex4 = complex3.INF.log();
      complex4.INF.readResolve();
      complex3.I.getField();
      Complex.valueOf(20.0);
      complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.subtract(complex2);
      complex5.nthRoot(1806);
      complex3.pow(20.0);
      Complex complex6 = Complex.I;
      Complex complex7 = complex1.sin();
      complex5.tan();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex5.isNaN();
      complex7.cosh();
      complex7.multiply(428);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-9.149755188170102E-9));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.ZERO.negate();
      complex3.NaN.exp();
      Complex complex4 = complex0.ONE.multiply((-411.8290533746634));
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex0.sqrt();
      complex0.ONE.tanh();
      complex4.nthRoot(1);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.tan();
      complex6.getArgument();
      complex6.sqrt1z();
      complex8.toString();
      Complex complex9 = complex2.log();
      complex9.INF.createComplex(1, 0.0);
      Complex complex10 = complex5.atan();
      Complex complex11 = complex10.multiply(1.505582332611084);
      complex8.acos();
      complex5.cosh();
      Complex complex12 = complex11.sin();
      complex12.NaN.subtract((-1708334.3583089854));
      complex8.nthRoot(1375);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(20.0);
      complex0.I.toString();
      Complex complex2 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(20.0, 20.0);
      Complex complex4 = complex0.I.add(complex0);
      complex4.I.getField();
      Complex complex5 = Complex.valueOf(20.0);
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.subtract(complex3);
      Complex complex7 = Complex.NaN;
      complex7.pow(20.0);
      Complex complex8 = Complex.I;
      complex6.isNaN();
      complex3.isNaN();
      complex1.abs();
      complex3.tanh();
      Complex complex9 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.divide(complex0);
      complex0.add(complex1);
      Complex complex4 = Complex.INF;
      complex2.getField();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.multiply((-20.0));
      Complex complex7 = complex3.cos();
      complex0.readResolve();
      Complex complex8 = Complex.I;
      Object object0 = complex6.readResolve();
      complex8.equals(object0);
      complex2.getImaginary();
      Complex complex9 = complex5.acos();
      complex1.asin();
      complex7.cos();
      complex9.readResolve();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(7.277212447141125E238);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.multiply(495);
      Complex complex5 = complex4.tan();
      complex2.subtract(2.6475448608398438);
      complex2.asin();
      complex3.sin();
      Complex complex6 = complex5.exp();
      complex1.negate();
      Complex complex7 = new Complex(1443.2878791910275);
      Complex complex8 = Complex.I;
      complex1.pow(complex8);
      Complex complex9 = new Complex((-67.75947178255), (-1934.33693960823));
      complex9.multiply((-1096));
      complex9.isNaN();
      complex6.isNaN();
      complex1.abs();
      complex7.tanh();
      complex4.multiply(1443.2878791910275);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.ZERO.subtract(complex0);
      complex2.NaN.add(complex1);
      complex1.ZERO.pow(complex0);
      Complex.valueOf(548.8492643, 548.8492643);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex complex3 = complex0.INF.sinh();
      complex3.ONE.multiply(complex2);
      complex0.I.divide(complex0);
      Complex complex4 = complex0.I.add(complex0);
      Complex complex5 = Complex.INF;
      complex4.I.getField();
      Complex complex6 = complex5.INF.divide(complex0);
      complex6.I.reciprocal();
      Complex complex7 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex7.multiply(359);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex0.nthRoot(2619);
      Complex complex2 = complex0.I.cos();
      complex1.sin();
      complex1.pow((double) 2619);
      // Undeclared exception!
      complex2.nthRoot(2619);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply(2147273542);
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.pow(Double.NaN);
      complex0.createComplex(2147273542, 2.2951597845188004E-8);
      complex3.getField();
      Complex complex4 = complex3.cosh();
      complex4.INF.hashCode();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(841.41904953);
      Complex complex1 = Complex.valueOf((-574.20489), (-574.20489));
      complex1.I.add(1304.81);
      complex1.I.tanh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.I.multiply((-467));
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.ZERO.tanh();
      complex1.toString();
      Complex complex6 = complex3.cos();
      Complex complex7 = Complex.valueOf(Double.NaN, (-574.20489));
      complex7.NaN.toString();
      Complex complex8 = complex0.NaN.multiply((-1));
      complex8.getArgument();
      Complex complex9 = complex7.I.exp();
      complex9.sqrt1z();
      complex3.I.toString();
      complex6.ZERO.atan();
      Complex complex10 = complex6.INF.sqrt1z();
      complex0.subtract(complex4);
      Complex complex11 = complex3.atan();
      complex11.INF.subtract(complex6);
      complex11.I.sinh();
      complex5.equals(complex6);
      Complex.valueOf((-1050.72352773504), 4.599382961926494);
      Complex complex12 = Complex.I;
      complex12.I.sqrt1z();
      complex10.divide(complex12);
      complex3.reciprocal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.368539456379101E-44, 1.368539456379101E-44);
      complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = new Complex(1.9354070598540276E-44);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = Complex.valueOf(4.851651954097903E8, Double.NaN);
      Complex complex6 = Complex.valueOf(1.8729002436664055E-88);
      complex6.toString();
      Complex complex7 = complex2.sinh();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.divide(complex1);
      Complex complex10 = complex7.add(complex8);
      Complex complex11 = Complex.INF;
      complex5.getField();
      Complex complex12 = complex11.divide(complex10);
      Complex complex13 = complex10.multiply(1.9354070598540276E-44);
      Complex complex14 = complex7.cos();
      complex9.readResolve();
      complex12.equals(complex13);
      complex5.getImaginary();
      complex9.acos();
      complex14.asin();
      complex2.cos();
      complex8.readResolve();
      complex14.abs();
      complex4.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex1.add(complex3);
      complex4.log();
      complex5.getField();
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex4 = Complex.ZERO;
      complex0.I.divide(complex0);
      Complex complex5 = complex0.I.add(complex0);
      Complex complex6 = complex5.INF.log();
      complex5.I.getField();
      complex6.INF.divide(complex0);
      complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.acos();
      complex3.subtract(complex7);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.pow(20.0);
      complex9.INF.atan();
      complex3.createComplex(Double.POSITIVE_INFINITY, (-1584.32));
      complex7.sinh();
      complex1.exp();
      complex0.exp();
      complex4.sqrt1z();
      Complex complex10 = Complex.INF;
      complex3.multiply(2040109465);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.toString();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex1.multiply((-1887954158));
      complex2.sinh();
      complex1.tanh();
      Complex complex3 = Complex.valueOf((double) (-1887954158), 595.70512248);
      complex3.tan();
      complex2.add(1791.2850879518);
      complex2.acos();
      Complex complex4 = Complex.INF;
      complex4.multiply((-1887954158));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.createComplex(1676.429415, 1119.01490888816);
      Complex complex3 = Complex.valueOf(1119.01490888816, 1119.01490888816);
      complex3.INF.toString();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.acos();
      complex1.subtract(complex4);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.pow(1676.429415);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex5.add(complex8);
      complex2.sin();
      Complex complex11 = Complex.ONE;
      complex10.tan();
      complex4.divide(1119.01490888816);
      complex11.isNaN();
      complex11.cosh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.768276122845335E109, 2.768276122845335E109);
      Complex complex1 = complex0.asin();
      complex1.conjugate();
      Complex complex2 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.multiply(495);
      complex2.tan();
      Complex complex3 = complex2.subtract((-4.4703076268400615E-80));
      Complex complex4 = complex3.sin();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex1.negate();
      Complex complex7 = new Complex(1410.64092);
      Complex complex8 = complex6.pow(complex7);
      complex1.multiply(935320922);
      complex3.isNaN();
      complex0.isNaN();
      complex5.abs();
      complex4.tanh();
      complex7.cos();
      complex8.isInfinite();
      complex8.nthRoot(935320922);
      complex8.add((double) 495);
      complex1.negate();
      complex5.createComplex(1410.64092, (-4.4703076268400615E-80));
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.sinh();
      complex1.multiply(1622);
      Complex complex3 = complex1.log();
      complex0.sin();
      Complex complex4 = complex2.sqrt1z();
      complex0.sqrt();
      Complex complex5 = complex3.negate();
      complex1.getReal();
      Complex complex6 = complex5.createComplex(1553.631370363561, 1119.01490888816);
      complex6.sinh();
      complex4.exp();
      complex3.exp();
      complex4.divide(1676.429415);
      complex6.asin();
      complex2.add(1676.429415);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.368539456379101E-44, 1.368539456379101E-44);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(1.368539456379101E-44);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.createComplex(208.0304511517, 3400.0);
      Complex.valueOf((-1395.121633803011), (-1067.0));
      complex2.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.I;
      complex6.reciprocal();
      complex5.sqrt();
      Complex complex7 = complex0.add(4953.8147069632005);
      Complex complex8 = complex7.add(complex3);
      complex0.tan();
      complex0.add(complex8);
      complex1.reciprocal();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.368539456379101E-44, 1.368539456379101E-44);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(1.368539456379101E-44);
      Complex complex3 = complex2.ZERO.sinh();
      complex2.sinh();
      complex3.I.multiply(1022);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.log();
      complex5.ONE.sin();
      Complex complex6 = complex4.sqrt1z();
      complex1.sqrt();
      Complex complex7 = complex6.negate();
      complex3.getReal();
      Complex complex8 = complex6.INF.createComplex(1022, 0.0);
      complex6.sinh();
      complex7.exp();
      complex0.exp();
      complex6.sqrt1z();
      complex8.divide((-1.0));
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1.2252256870269775);
      complex0.conjugate();
      complex0.getField();
      complex1.getArgument();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.3177432417869568, 1.3142988156905172E207);
      Complex complex1 = complex0.INF.add(1.3142988156905172E207);
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.INF.createComplex(1.3142988156905172E207, (-3554.03412));
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(3795.669, Double.NaN);
      complex3.I.add(complex1);
      Complex complex4 = complex2.subtract(2.291259288787842);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ONE.add(1.3142988156905172E207);
      Complex complex7 = complex1.conjugate();
      complex4.NaN.toString();
      complex7.cosh();
      complex7.multiply(1636);
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.ZERO.negate();
      complex9.NaN.toString();
      complex9.NaN.reciprocal();
      Complex.valueOf(1.3142988156905172E207, 0.3177432417869568);
      complex0.ZERO.multiply(complex6);
      Complex complex10 = complex7.divide(1.3142988156905172E207);
      complex4.equals(complex2);
      complex7.multiply(1.3142988156905172E207);
      Complex complex11 = complex0.sqrt();
      complex11.ONE.readResolve();
      complex1.asin();
      complex7.sqrt();
      complex0.log();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(403.03787298737);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.valueOf(1833.814399494006);
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex0.abs();
      Complex complex4 = complex3.ONE.add(23.0);
      Complex complex5 = complex4.ZERO.multiply(complex2);
      complex5.NaN.hashCode();
      complex0.cosh();
      complex0.readResolve();
      Complex complex6 = complex0.tan();
      complex6.I.sinh();
      complex4.pow(complex1);
      complex6.asin();
      complex5.exp();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(34.79628627951907);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex4.NaN.multiply(1);
      complex2.INF.tan();
      complex2.log();
      Complex complex6 = complex4.reciprocal();
      complex6.sqrt();
      complex6.add((-280.444));
      complex3.add(complex6);
      Complex complex7 = complex5.tan();
      complex7.ONE.asin();
      complex7.NaN.multiply(1);
      complex7.add(complex1);
      complex5.reciprocal();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.createComplex(1676.429415, 1119.01490888816);
      complex2.sinh();
      Complex complex3 = Complex.valueOf(1119.01490888816, 1119.01490888816);
      complex3.INF.toString();
      complex1.subtract(1119.01490888816);
      complex3.asin();
      Complex complex4 = Complex.valueOf(3.2195361624179725E244, 3.2195361624179725E244);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.negate();
      complex4.nthRoot(1);
      complex6.subtract((-1416.7421237067));
      complex4.multiply(complex2);
      Complex complex7 = complex5.sqrt1z();
      complex0.cosh();
      complex1.reciprocal();
      complex7.createComplex(1427.121688, 1427.121688);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.valueOf(0.0, (-1.0));
      complex1.tanh();
      complex0.multiply(37);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-908.93259), (-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.pow(complex3);
      complex4.I.nthRoot(1);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex6.I.conjugate();
      complex0.cos();
      Complex complex8 = complex7.add((double) 1);
      Complex complex9 = complex2.sinh();
      complex3.hashCode();
      complex5.multiply(1912);
      complex0.sinh();
      complex9.tanh();
      complex8.tan();
      complex7.add(0.0);
      complex4.acos();
      complex6.multiply(1);
      complex2.getArgument();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.pow(complex0);
      complex2.ZERO.nthRoot(225);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.log();
      complex0.ONE.getField();
      complex5.ONE.getArgument();
      complex5.add(0.0);
      Complex complex6 = complex5.pow(complex4);
      complex6.multiply(225);
      complex5.isNaN();
      complex5.isNaN();
      complex0.abs();
      Complex complex7 = complex0.tanh();
      complex4.cos();
      complex1.isInfinite();
      complex0.nthRoot(225);
      complex0.INF.sqrt();
      complex7.add(394.0);
      complex3.negate();
      complex2.createComplex(2.0, (-20.0));
      Complex complex8 = new Complex((-205.17986529), 1.975188970565796);
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.pow(complex0);
      complex2.ZERO.nthRoot(225);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.ONE.multiply(complex3);
      complex0.ONE.getField();
      complex4.ONE.getArgument();
      complex1.getField();
      complex1.INF.nthRoot(225);
      complex4.reciprocal();
      complex2.multiply(17);
      complex2.acos();
      complex4.divide(complex0);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.cos();
      Complex complex6 = (Complex)complex2.readResolve();
      Object object0 = new Object();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex4.add(complex6);
      Complex complex9 = complex6.log();
      Complex complex10 = new Complex((-2049.07), 1712.47645);
      complex10.getField();
      complex9.divide(complex7);
      complex8.multiply(1712.47645);
      Complex complex11 = complex5.cos();
      complex7.readResolve();
      complex11.equals(complex5);
      complex0.getImaginary();
      complex5.acos();
      Complex complex12 = new Complex(1712.47645, Double.POSITIVE_INFINITY);
      complex12.asin();
      complex3.cos();
      complex1.readResolve();
      complex4.exp();
      complex2.exp();
      complex4.add(1712.47645);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(548.8492643);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex3 = complex0.INF.sinh();
      complex0.I.divide(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.INF.log();
      complex4.I.getField();
      complex5.INF.divide(complex0);
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex4.ZERO.cos();
      Complex complex6 = (Complex)complex0.readResolve();
      complex0.equals(complex6);
      complex0.getImaginary();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex5.asin();
      complex0.ONE.cos();
      complex8.readResolve();
      complex8.exp();
      complex2.exp();
      complex6.add(757.69);
      complex7.negate();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex3.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.pow(complex2);
      complex3.I.nthRoot(1);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex1.I.atan();
      complex5.I.conjugate();
      Complex complex6 = complex0.cos();
      complex6.ZERO.getField();
      complex4.reciprocal();
      Complex complex7 = complex0.multiply(1);
      complex0.acos();
      Complex complex8 = complex1.pow(3830.46429938205);
      Complex complex9 = complex1.add(complex7);
      Complex.valueOf(3990.846876, 0.5455666780471802);
      complex0.getField();
      complex1.tan();
      complex8.exp();
      complex4.add((-6.11041311179286E-10));
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(0.0);
      Complex complex1 = Complex.I;
      complex0.asin();
      Complex complex2 = complex0.conjugate();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3398.8366, 3398.8366);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.add((double) 620);
      Complex complex3 = complex1.atan();
      complex3.abs();
      complex3.nthRoot(620);
      Complex complex4 = complex2.reciprocal();
      complex0.multiply(1);
      Complex complex5 = complex3.acos();
      Complex complex6 = complex3.subtract(complex5);
      complex0.pow(0.006583270306224844);
      Complex complex7 = complex6.add(complex5);
      complex0.sin();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex4.divide((double) 620);
      complex5.isNaN();
      complex3.cosh();
      Complex complex10 = complex8.conjugate();
      complex7.divide(0.006583270306224844);
      complex10.add(complex9);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.cos();
      Complex.valueOf(20.0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex3 = complex0.INF.sinh();
      complex0.I.divide(complex0);
      Complex complex4 = complex0.I.add(complex0);
      Complex complex5 = complex4.INF.log();
      complex4.I.getField();
      complex5.INF.divide(complex0);
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = Complex.NaN;
      complex8.pow(20.0);
      Complex complex9 = Complex.ZERO;
      complex1.add(complex9);
      Complex complex10 = complex3.sin();
      Complex complex11 = Complex.ONE;
      complex11.tan();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex7.isNaN();
      Complex complex12 = complex10.cosh();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.createComplex(1.0, 1676.429415);
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf((-4964.196049), (-4964.196049));
      complex1.toString();
      Complex complex5 = complex2.log();
      complex0.reciprocal();
      complex5.sqrt();
      complex4.divide(1967.08456434823);
      complex2.add(20.0);
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(548.8492643);
      Complex complex3 = Complex.valueOf(548.8492643);
      complex2.toString();
      Complex complex4 = Complex.ZERO;
      complex4.sinh();
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.valueOf(548.8492643, Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.add(complex6);
      Complex complex8 = complex3.log();
      complex7.getField();
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex4.cos();
      complex10.readResolve();
      Object object0 = new Object();
      complex11.equals(object0);
      complex9.getImaginary();
      complex10.acos();
      complex4.asin();
      Complex complex12 = complex1.cos();
      complex4.readResolve();
      complex0.exp();
      complex4.exp();
      complex12.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tan();
      Complex complex4 = new Complex((-908.93259));
      Complex complex5 = complex4.pow(complex3);
      complex0.nthRoot(1842);
      Complex complex6 = complex3.reciprocal();
      complex3.atan();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.cos();
      complex0.getField();
      complex5.reciprocal();
      complex8.multiply(1842);
      complex6.acos();
      Complex complex9 = complex8.subtract(complex5);
      double double0 = 3830.46429938205;
      complex2.pow((double) 1);
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.INF.abs();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(548.8492643);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.I.divide(complex0);
      complex3.nthRoot(1350);
      Complex complex5 = complex3.reciprocal();
      complex5.acos();
      Complex complex6 = complex4.subtract(complex0);
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(548.8492643);
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = complex6.sin();
      Complex complex10 = complex8.tan();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex9.ZERO.add(complex10);
      complex2.isNaN();
      complex9.cosh();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.multiply(495);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.subtract((double) 1);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex6.negate();
      Complex complex11 = new Complex(1);
      complex4.pow(complex2);
      complex7.multiply(1);
      complex6.isNaN();
      complex5.isNaN();
      complex8.abs();
      complex3.tanh();
      complex9.cos();
      complex8.isInfinite();
      complex7.nthRoot(1);
      Complex complex12 = complex10.add(1410.64092);
      complex12.I.negate();
      complex4.createComplex(1.975188970565796, 394.0);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex1.subtract((-640.349052626));
      complex2.asin();
      Complex.valueOf(1410.64092, 34.79628627951907);
      Complex complex8 = Complex.INF;
      complex8.exp();
      Complex complex9 = complex0.negate();
      complex1.nthRoot(57);
      complex5.subtract(1410.64092);
      Complex complex10 = complex4.multiply(complex5);
      complex6.sqrt1z();
      complex6.abs();
      complex3.negate();
      complex10.cosh();
      complex7.reciprocal();
      complex9.createComplex(3.479157135998568E214, 886.8948834948452);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.pow(complex3);
      complex4.I.nthRoot(1);
      complex4.I.reciprocal();
      complex1.I.atan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.cos();
      complex2.getField();
      complex6.reciprocal();
      Complex complex7 = complex5.multiply(1);
      Complex complex8 = complex7.acos();
      Complex complex9 = Complex.NaN;
      complex9.subtract(complex1);
      Complex complex10 = new Complex(0.0, (-886.8948834948452));
      Complex complex11 = complex10.pow((-676.913696972));
      complex8.add(complex10);
      Complex.valueOf(2251.59265364, 2251.59265364);
      complex0.getField();
      Complex complex12 = Complex.valueOf(3764.2);
      complex12.tan();
      complex6.exp();
      complex11.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.pow(complex3);
      complex4.I.nthRoot(1);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex1.conjugate();
      complex4.cos();
      complex4.getField();
      complex1.reciprocal();
      Complex complex8 = Complex.valueOf((-908.93259));
      complex8.multiply(1);
      Complex complex9 = complex6.acos();
      complex9.subtract(complex1);
      complex4.pow(222.6169035);
      complex7.add(complex5);
      Complex complex10 = Complex.valueOf(223.0074612297, 0.5455666780471802);
      complex6.getField();
      complex0.tan();
      Complex complex11 = complex10.exp();
      complex11.add(2.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.pow(complex0);
      complex2.ZERO.nthRoot(225);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.ONE.multiply(complex3);
      Complex complex5 = complex0.log();
      complex0.ONE.getField();
      complex5.ONE.getArgument();
      complex1.getField();
      Complex complex6 = complex4.reciprocal();
      complex2.multiply(17);
      complex2.acos();
      Complex complex7 = complex6.subtract(complex0);
      complex3.pow((-7.956144278281947E-8));
      complex2.add(complex3);
      Complex.valueOf((-1585.61), 1.0112214979786464E-43);
      complex2.getField();
      complex7.tan();
      Complex complex8 = new Complex(0.0, 17);
      complex8.exp();
      complex2.add(1.0112214979786464E-43);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(6.63595840453991E235);
      Complex complex2 = complex1.pow(6.63595840453991E235);
      Complex complex3 = complex1.cos();
      complex1.tan();
      Complex complex4 = complex2.pow(complex3);
      complex2.nthRoot(1899);
      complex2.reciprocal();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.conjugate();
      complex3.cos();
      complex6.getField();
      Complex complex7 = complex6.reciprocal();
      complex5.multiply(1899);
      complex0.acos();
      Complex complex8 = complex3.subtract(complex2);
      Complex complex9 = complex8.pow(1915.299951063);
      Complex complex10 = complex5.add(complex7);
      Complex complex11 = Complex.valueOf((double) 1, 0.41421356237309515);
      complex11.exp();
      complex10.getField();
      complex2.tan();
      complex0.exp();
      complex9.add(3830.46429938205);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.divide(Double.NaN);
      Complex complex5 = complex3.multiply((-2767.892));
      complex0.nthRoot(1941);
      complex5.subtract((double) 1941);
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = complex6.sqrt1z();
      complex2.abs();
      complex7.negate();
      complex4.cosh();
      complex7.reciprocal();
      Complex complex8 = new Complex((-214.1142912229), Double.NaN);
      complex8.createComplex(1153.24, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.6769026517868042);
      Complex complex2 = Complex.valueOf(0.6769026517868042);
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex0.atan();
      complex3.INF.createComplex(0.6769026517868042, 0.0);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex1.cos();
      complex3.getField();
      Complex complex8 = complex6.reciprocal();
      complex4.multiply(13);
      Complex complex9 = complex0.acos();
      complex2.INF.tanh();
      complex0.subtract(complex8);
      complex2.pow(3830.46429938205);
      complex7.add(complex6);
      Complex.valueOf(0.6769026517868042, 429.9417704);
      complex8.getField();
      complex9.tan();
      complex5.exp();
      complex1.add(0.5455666780471802);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.toString();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.divide(complex0);
      complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.divide(complex4);
      complex7.I.toString();
      complex4.hashCode();
      complex0.isInfinite();
      complex3.isInfinite();
      Complex complex8 = complex2.log();
      complex5.toString();
      Complex complex9 = Complex.valueOf((-232.3245506), (-232.3245506));
      Complex complex10 = complex9.subtract(complex2);
      complex10.NaN.cos();
      complex9.readResolve();
      Complex complex11 = Complex.valueOf(6.23514943204966E27, 0.3034266233444214);
      Complex complex12 = complex0.negate();
      complex11.sqrt();
      complex2.equals(complex8);
      Complex complex13 = complex12.atan();
      complex3.exp();
      complex5.subtract(complex11);
      complex7.conjugate();
      complex13.pow(2.0);
      complex4.multiply(complex13);
      complex0.createComplex(1.2637629975129189E-9, 1.2637629975129189E-9);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.createComplex(1676.429415, 1119.01490888816);
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf(1119.01490888816, 1119.01490888816);
      complex4.INF.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.reciprocal();
      complex3.I.sqrt();
      complex2.divide(1676.429415);
      Complex complex7 = complex1.add(1071.16468051005);
      Complex complex8 = complex1.add(complex3);
      complex1.tan();
      complex7.add(complex8);
      complex7.reciprocal();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.NaN.acos();
      complex0.ZERO.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.cos();
      complex2.readResolve();
      Object object0 = new Object();
      complex4.equals(object0);
      complex3.getImaginary();
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.INF;
      complex6.asin();
      Complex complex7 = complex3.cos();
      complex1.readResolve();
      complex7.exp();
      Complex complex8 = new Complex(0.6769026517868042, 0.6769026517868042);
      complex8.hashCode();
      Complex complex9 = new Complex(0.6769026517868042);
      complex9.getField();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.pow(complex0);
      complex2.ZERO.nthRoot(225);
      Complex complex3 = Complex.I;
      complex1.ONE.multiply(complex3);
      Complex complex4 = complex0.log();
      complex0.ONE.getField();
      complex4.ONE.getArgument();
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex5.ONE.sinh();
      complex1.hashCode();
      complex1.NaN.multiply((-719));
      Complex complex7 = complex5.sinh();
      complex7.tanh();
      Complex complex8 = complex2.tan();
      complex8.add((-4601.66269038));
      complex5.acos();
      complex6.multiply(225);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3398.8366, 3398.8366);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex2.atan();
      complex3.abs();
      complex0.NaN.nthRoot(620);
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex2.INF.reciprocal();
      Complex complex6 = new Complex(620);
      Complex complex7 = complex5.pow(complex0);
      complex4.multiply((-1768));
      complex0.isNaN();
      complex2.isNaN();
      complex7.abs();
      complex1.tanh();
      Complex complex8 = complex2.cos();
      complex6.isInfinite();
      complex0.nthRoot(956);
      Complex.valueOf((-413.58901280774));
      complex8.add((double) (-131));
      complex6.createComplex(529.7499724848, 2785.654);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.multiply(548.8492643);
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = Complex.valueOf(548.8492643);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.toString();
      complex1.INF.sinh();
      complex1.I.divide(complex0);
      Complex complex4 = complex1.I.add(complex0);
      Complex complex5 = complex4.INF.log();
      complex4.I.getField();
      Complex complex6 = complex5.INF.divide(complex1);
      Complex complex7 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex4.ZERO.cos();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex8 = Complex.INF;
      complex8.readResolve();
      complex3.sqrt1z();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex6.sin();
      complex7.tan();
      Complex complex10 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex10.divide(1192.2871702324142);
      complex6.isNaN();
      complex7.cosh();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.pow(complex3);
      complex4.I.nthRoot(1);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex0.cos();
      complex8.ZERO.getField();
      complex5.reciprocal();
      Complex complex9 = complex2.multiply(1);
      complex0.acos();
      complex3.subtract(complex7);
      Complex complex10 = complex2.pow(3830.46429938205);
      complex1.add(complex9);
      Complex.valueOf((-3423.70333759673), 0.5455666780471802);
      complex2.getField();
      complex2.tan();
      complex10.exp();
      complex5.add((-6.11041311179286E-10));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3398.8366, 3398.8366);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex2.atan();
      complex3.abs();
      complex0.NaN.nthRoot(620);
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex1.multiply(complex5);
      complex3.log();
      Complex complex7 = complex6.multiply(Double.NaN);
      Complex complex8 = Complex.valueOf((-2731.88991533292), 0.058150934374130235);
      complex8.cosh();
      Complex complex9 = complex7.add(complex4);
      complex9.ONE.multiply(483);
      complex9.NaN.getArgument();
      Complex complex10 = Complex.NaN;
      complex10.toString();
      complex1.isNaN();
      complex4.multiply(Double.NaN);
      complex0.sinh();
      complex7.add((-1989904.3377773461));
      complex8.hashCode();
      complex8.conjugate();
      Complex complex11 = complex6.acos();
      complex11.cosh();
      Complex.valueOf(2837.16, 2837.16);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.6769026517868042);
      Complex.valueOf(0.6769026517868042);
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.divide(0.0);
      Complex complex3 = complex0.NaN.multiply(0.0);
      Complex complex4 = new Complex(20.0);
      complex1.pow(complex0);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex1.isNaN();
      complex5.isNaN();
      complex0.abs();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.NaN.asin();
      complex4.cos();
      complex2.isInfinite();
      complex1.nthRoot(501);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex0.add(0.0);
      complex1.createComplex((-699.7176179563397), Double.NaN);
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(34.79628627951907);
      Complex complex2 = complex0.add(0.0);
      complex2.ONE.sinh();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.NaN.multiply(1);
      complex2.INF.tan();
      Complex complex5 = complex3.subtract(1410.64092);
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.valueOf(34.79628627951907, 34.79628627951907);
      Complex complex8 = complex7.ONE.exp();
      complex8.INF.negate();
      complex6.nthRoot(1);
      complex5.subtract(1410.64092);
      complex0.multiply(complex1);
      complex8.sqrt1z();
      complex2.abs();
      complex6.negate();
      complex1.cosh();
      complex5.reciprocal();
      complex4.createComplex(1410.64092, (-6.830955860192377E-8));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.pow(complex4);
      complex5.I.nthRoot(1);
      complex5.I.reciprocal();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex3.cos();
      complex8.ZERO.getField();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex3.negate();
      Complex complex11 = new Complex((-1728.8579823));
      Complex complex12 = complex4.pow(complex7);
      Complex complex13 = new Complex((-1728.8579823), 1);
      complex13.sin();
      complex13.multiply(311);
      complex12.isNaN();
      complex11.isNaN();
      complex12.abs();
      Complex complex14 = complex3.tanh();
      complex7.cos();
      complex7.isInfinite();
      complex9.nthRoot(1);
      Complex.valueOf(0.22039407830240246);
      complex12.add((-1728.8579823));
      complex10.createComplex(394.0, 394.0);
      complex14.multiply((double) 311);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.toString();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.divide(complex0);
      complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.divide(complex4);
      complex4.hashCode();
      complex0.isInfinite();
      complex3.isInfinite();
      Complex complex8 = complex2.log();
      complex5.toString();
      Complex complex9 = Complex.valueOf((-232.3245506), (-232.3245506));
      Complex complex10 = complex9.subtract(complex2);
      complex10.NaN.cos();
      complex9.readResolve();
      Complex complex11 = Complex.valueOf(6.23514943204966E27, 0.3034266233444214);
      Complex complex12 = complex0.negate();
      complex11.sqrt();
      complex2.equals(complex8);
      Complex complex13 = complex12.atan();
      complex3.exp();
      complex5.subtract(complex11);
      complex7.conjugate();
      complex13.pow(2.0);
      complex4.multiply(complex13);
      complex0.createComplex(1.2637629975129189E-9, 1.2637629975129189E-9);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      complex0.readResolve();
      complex0.tanh();
      complex0.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex2.subtract(complex3);
      complex4.conjugate();
      complex1.pow(3088972.4324812377);
      Complex complex5 = Complex.valueOf((-20.0), 0.0);
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      complex0.toString();
      Complex complex2 = complex0.createComplex((-3151.8382), (-3151.8382));
      Complex complex3 = Complex.valueOf((-1578.19), (-1578.19));
      complex3.divide(complex1);
      complex2.I.multiply(complex3);
      Complex complex4 = Complex.valueOf((-3151.8382));
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.tan();
      complex6.I.log();
      complex0.ZERO.multiply(2145698150);
      complex6.INF.hashCode();
      complex2.INF.add(complex0);
      complex1.hashCode();
      Complex complex7 = Complex.valueOf(7.307059786371152E43, (-1578.19));
      complex4.INF.toString();
      complex7.getImaginary();
      complex5.getReal();
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.multiply(548.8492643);
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = Complex.valueOf(548.8492643);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.toString();
      complex1.INF.sinh();
      Complex complex5 = complex1.I.divide(complex0);
      Complex complex6 = complex1.I.add(complex0);
      Complex complex7 = complex6.INF.log();
      complex6.I.getField();
      Complex complex8 = complex7.INF.divide(complex1);
      Complex complex9 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex6.ZERO.cos();
      complex1.readResolve();
      complex1.equals(complex10);
      complex3.getImaginary();
      complex7.acos();
      complex9.asin();
      complex1.cos();
      complex4.readResolve();
      complex8.exp();
      complex5.hashCode();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.multiply(548.8492643);
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.cos();
      Complex.valueOf(548.8492643);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.toString();
      Complex complex4 = complex1.INF.sinh();
      complex1.I.divide(complex0);
      Complex complex5 = complex1.I.add(complex0);
      Complex complex6 = complex5.INF.log();
      complex5.I.getField();
      Complex complex7 = complex6.INF.divide(complex1);
      complex3.getArgument();
      complex7.ZERO.log();
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex5.ZERO.cos();
      complex6.readResolve();
      complex6.equals(complex4);
      complex2.getImaginary();
      complex3.acos();
      complex2.asin();
      complex2.cos();
      Complex complex8 = complex1.exp();
      complex8.hashCode();
      complex8.getField();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.pow(complex3);
      complex4.I.nthRoot(1);
      complex4.I.reciprocal();
      Complex complex5 = complex1.I.atan();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex0.cos();
      complex7.ZERO.getField();
      complex2.INF.tan();
      Complex complex8 = complex1.multiply(complex7);
      Complex complex9 = complex8.NaN.log();
      complex9.ZERO.multiply(0.0);
      Complex complex10 = Complex.valueOf((-346.912816), (-908.93259));
      complex10.INF.cosh();
      Complex complex11 = complex10.add(complex8);
      complex1.toString();
      complex2.isNaN();
      Complex complex12 = complex1.NaN.multiply((-346.912816));
      complex12.NaN.sinh();
      Complex complex13 = complex7.add(1374.963492432);
      complex13.INF.hashCode();
      complex1.conjugate();
      complex13.acos();
      complex11.cosh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-0.029108305649023683));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.pow(0.0);
      complex1.ZERO.hashCode();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex0.NaN.createComplex(0.0, 0.0);
      complex2.getImaginary();
      Complex complex6 = complex1.multiply((-5.551115123125783E-17));
      complex1.multiply(1201);
      complex5.toString();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex1.NaN.divide(complex6);
      complex7.ONE.hashCode();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex9.NaN.divide(complex7);
      complex5.hashCode();
      complex6.isInfinite();
      complex4.isInfinite();
      Complex complex11 = complex2.log();
      complex5.toString();
      Complex complex12 = complex5.ZERO.subtract(complex8);
      complex12.ZERO.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex2.negate();
      Complex complex13 = complex5.sqrt();
      complex2.equals(complex5);
      complex13.atan();
      Complex complex14 = complex8.exp();
      complex14.I.subtract(complex11);
      complex2.conjugate();
      complex10.pow((-0.029108305649023683));
      complex7.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.multiply(548.8492643);
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = Complex.valueOf(548.8492643);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.toString();
      Complex complex5 = complex1.INF.sinh();
      complex1.I.divide(complex0);
      Complex complex6 = complex1.I.add(complex0);
      Complex complex7 = complex6.INF.log();
      complex6.I.getField();
      Complex complex8 = complex7.INF.divide(complex1);
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex6.ZERO.cos();
      Complex complex9 = (Complex)complex1.readResolve();
      complex0.equals(complex9);
      complex1.getImaginary();
      complex3.sqrt1z();
      complex0.multiply(717.75);
      complex9.sin();
      Complex complex10 = complex8.tan();
      complex4.divide((-20.0));
      complex5.isNaN();
      complex9.cosh();
      complex10.conjugate();
      complex7.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.multiply(548.8492643);
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.cos();
      Complex.valueOf(548.8492643);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.toString();
      Complex complex3 = complex1.INF.sinh();
      complex1.I.divide(complex0);
      Complex complex4 = complex1.I.add(complex0);
      Complex complex5 = complex4.INF.log();
      complex4.I.getField();
      complex5.INF.divide(complex1);
      Complex complex6 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex4.ZERO.cos();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex1.getImaginary();
      complex3.acos();
      Complex complex7 = complex5.asin();
      complex0.ONE.cos();
      complex7.readResolve();
      complex7.exp();
      complex1.hashCode();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.toString();
      complex1.readResolve();
      complex0.NaN.cos();
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.log();
      complex5.NaN.divide(complex4);
      complex0.INF.asin();
      Complex complex6 = complex1.ZERO.sqrt();
      complex6.NaN.atan();
      complex3.NaN.tan();
      complex0.toString();
      complex1.getArgument();
      complex1.divide(complex0);
      complex2.reciprocal();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.toString();
      complex1.ZERO.multiply(complex0);
      complex1.multiply((-3.5901655945224663E-10));
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5811884868243975E-11);
      Complex complex1 = complex0.INF.pow(1.5811884868243975E-11);
      Complex complex2 = complex0.divide(1.5811884868243975E-11);
      complex2.INF.pow(1.5811884868243975E-11);
      Complex complex3 = complex0.subtract(0.0);
      complex2.INF.getArgument();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = Complex.ZERO;
      complex4.add(complex5);
      complex4.atan();
      Complex complex6 = complex2.multiply(complex3);
      complex6.readResolve();
      Complex complex7 = complex2.divide(1.5811884868243975E-11);
      complex0.getReal();
      complex2.atan();
      complex1.tan();
      Complex complex8 = Complex.INF;
      complex3.add(complex8);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(1201.73681);
      Complex complex2 = complex0.cosh();
      Complex complex3 = new Complex(1201.73681, (-650.526060397096));
      complex3.NaN.hashCode();
      complex2.I.divide(complex3);
      complex0.ZERO.log();
      complex1.getArgument();
      complex0.cosh();
      complex1.exp();
      complex1.cos();
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.pow(complex0);
      complex2.ZERO.nthRoot(225);
      Complex complex3 = Complex.I;
      complex1.ONE.multiply(complex3);
      Complex complex4 = complex0.log();
      complex0.ONE.getField();
      complex4.ONE.getArgument();
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex5.ONE.sinh();
      complex1.hashCode();
      complex1.NaN.multiply((-719));
      complex5.sinh();
      Complex complex7 = complex2.tan();
      complex7.add((-4601.66269038));
      complex5.acos();
      complex6.multiply(225);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(616.6);
      complex0.I.multiply(6555);
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex2.I.abs();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ONE.createComplex(2628.9846, 1139.9987854384901);
      complex4.getArgument();
      complex2.ZERO.tanh();
      Complex complex5 = complex0.reciprocal();
      double double0 = (-105.92299018);
      Complex complex6 = complex5.I.subtract((-105.92299018));
      complex6.NaN.divide(925.357728501561);
      complex1.abs();
      Complex complex7 = complex3.multiply(616.6);
      complex0.INF.multiply(0);
      Complex complex8 = complex0.cos();
      complex8.INF.abs();
      complex7.I.multiply((-275));
      Complex complex9 = complex1.NaN.tan();
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1167.2836));
      Complex complex1 = complex0.sin();
      try { 
        complex1.I.nthRoot((-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -888
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.add(Double.POSITIVE_INFINITY);
      complex0.I.hashCode();
      Complex complex3 = complex0.multiply(695.04);
      Complex.valueOf(0.0);
      complex0.getImaginary();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex5.INF.sqrt();
      complex7.ONE.conjugate();
      complex7.ZERO.sinh();
      Complex complex8 = complex5.sinh();
      complex6.add(complex3);
      complex8.sqrt();
      Complex complex9 = complex8.INF.add(695.04);
      Complex complex10 = Complex.INF;
      complex9.subtract(complex10);
      Complex complex11 = complex0.log();
      try { 
        complex11.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.cosh();
      complex0.readResolve();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.reciprocal();
      complex0.add(complex2);
      Complex complex5 = complex3.pow(1694.248671856009);
      Complex complex6 = complex0.I.add(complex5);
      complex6.NaN.subtract(complex3);
      complex0.getImaginary();
      Complex complex7 = complex1.sqrt1z();
      complex7.NaN.toString();
      complex3.negate();
      Complex complex8 = complex2.pow(0.0);
      Complex complex9 = complex8.ONE.log();
      complex8.I.getArgument();
      complex3.tanh();
      complex4.pow(430.4530976331798);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.INF.getArgument();
      complex0.abs();
      complex8.subtract(complex3);
      complex4.sinh();
      complex0.nthRoot(1439);
      Complex complex12 = complex9.exp();
      complex10.getReal();
      complex12.createComplex((-39.796334263), (-20.0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3308.70228309), (-3308.70228309));
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex2.acos();
      complex4.ONE.add((-3308.70228309));
      Complex complex5 = complex2.ZERO.sin();
      complex0.I.tan();
      Complex complex6 = complex0.pow(complex1);
      complex0.isNaN();
      Complex complex7 = complex0.ZERO.negate();
      complex7.ZERO.conjugate();
      complex2.asin();
      complex0.INF.add((-490.0));
      complex7.ONE.log();
      complex6.toString();
      complex2.getArgument();
      complex6.I.acos();
      complex4.I.multiply(0);
      Complex complex8 = complex6.createComplex((-3308.70228309), (-3308.70228309));
      complex8.ONE.asin();
      complex6.cos();
      complex4.readResolve();
      Complex complex9 = Complex.valueOf(5.462874707256208E-270);
      Complex complex10 = complex5.pow(complex9);
      complex10.ONE.tan();
      complex2.log();
      Complex.valueOf(0.0);
      try { 
        complex3.nthRoot((-3854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,854
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.abs();
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.tan();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.NaN.cos();
      complex1.I.subtract(1.0);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.sqrt();
      complex5.ONE.negate();
      complex5.ONE.sqrt();
      complex6.ZERO.divide((-1.429109630340783E-7));
      complex3.ONE.readResolve();
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = Complex.valueOf((-1.429109630340783E-7));
      Complex complex9 = complex7.ONE.subtract(complex2);
      complex8.negate();
      Complex complex10 = complex8.sinh();
      complex10.ONE.cos();
      complex6.NaN.acos();
      Complex complex11 = complex7.atan();
      complex11.NaN.pow(complex9);
      complex3.hashCode();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(1308);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex1.INF.log();
      complex1.INF.hashCode();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.NaN.multiply(0.0);
      complex1.INF.sin();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex6.I.pow((-691.987));
      Complex complex8 = complex6.NaN.divide(complex4);
      Complex complex9 = complex4.NaN.divide(1069.13637677);
      Complex complex10 = complex9.NaN.multiply(1308);
      complex4.ZERO.pow(0.0);
      Complex complex11 = complex3.pow((double) 1308);
      complex5.tan();
      complex5.getField();
      complex2.exp();
      Complex complex12 = complex11.tanh();
      complex0.cos();
      complex12.divide(0.0);
      Complex complex13 = Complex.valueOf((-691.987));
      complex7.log();
      complex13.abs();
      complex10.readResolve();
      complex12.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 835.7);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.INF.divide(0.0);
      Complex complex4 = complex0.ZERO.createComplex((-1962.0), 835.7);
      complex4.ZERO.getField();
      Complex.valueOf(0.0, (-30.09806377921403));
      Complex complex5 = complex3.ZERO.cos();
      complex5.ONE.log();
      complex3.ZERO.nthRoot(37);
      Complex complex6 = complex0.multiply(complex1);
      complex2.NaN.readResolve();
      Complex complex7 = complex0.subtract(835.7);
      complex2.getImaginary();
      Complex complex8 = complex3.exp();
      complex8.NaN.multiply(0.0);
      Complex complex9 = Complex.valueOf(0.0, 2.100525379180908);
      complex1.toString();
      Complex complex10 = complex1.cos();
      complex7.isNaN();
      complex3.getArgument();
      complex9.subtract(1117.37416494785);
      complex9.getField();
      complex10.getField();
      complex4.reciprocal();
      complex3.sqrt();
      complex6.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.NaN.multiply(1);
      Complex complex5 = complex1.INF.tan();
      Complex complex6 = complex3.subtract(1410.64092);
      complex6.asin();
      Complex complex7 = complex2.I.sin();
      Complex complex8 = complex7.ONE.exp();
      complex8.INF.negate();
      Complex complex9 = new Complex(0.0);
      complex1.pow(complex9);
      Complex complex10 = complex1.I.multiply(1);
      complex0.isNaN();
      complex1.isNaN();
      complex2.abs();
      complex2.tanh();
      complex4.cos();
      complex5.isInfinite();
      complex0.nthRoot(956);
      Complex.valueOf(394.0);
      complex10.add(0.0);
      complex0.createComplex(0.0, (-73.3877127));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      complex0.toString();
      Complex complex2 = complex0.createComplex((-3151.8382), (-3151.8382));
      Complex complex3 = Complex.valueOf((-1578.19), (-1578.19));
      complex2.I.multiply(complex3);
      Complex complex4 = Complex.valueOf((-3151.8382));
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.tan();
      complex6.I.log();
      complex6.INF.hashCode();
      complex2.INF.add(complex0);
      complex1.hashCode();
      Complex complex7 = Complex.valueOf(7.307059786371152E43, (-1578.19));
      complex4.INF.toString();
      complex7.getImaginary();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.acos();
      complex4.NaN.multiply((-785.39108393784));
      complex1.I.multiply(complex0);
      Complex complex5 = complex0.I.sqrt();
      complex5.add(2.0);
      complex5.multiply((-1394.09587774));
      Complex complex6 = complex5.I.conjugate();
      complex6.INF.divide(871.241);
      Complex complex7 = Complex.valueOf(871.241);
      complex0.getField();
      Complex.valueOf(3.023383151402969E307);
      complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0), (-20.0));
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      complex1.I.abs();
      complex1.I.conjugate();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      Complex complex3 = complex2.ZERO.atan();
      complex3.ZERO.atan();
      complex2.I.getArgument();
      complex1.ZERO.hashCode();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf(1241.52623894259, 9.02268127425393E-232);
      Complex complex7 = Complex.valueOf((-3211.2415421));
      complex6.ZERO.subtract(complex7);
      complex5.NaN.acos();
      Complex complex8 = complex5.exp();
      complex5.I.sin();
      complex5.sqrt1z();
      complex8.asin();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.NaN.multiply((-924));
      complex1.I.getField();
      Complex complex3 = complex0.I.pow(3957.86191);
      Complex complex4 = complex0.INF.pow(1647.193063);
      Complex complex5 = complex0.I.atan();
      complex5.asin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex2.sqrt1z();
      complex2.ZERO.exp();
      Complex complex8 = complex0.divide(1647.193063);
      complex8.ONE.log();
      complex0.ONE.tan();
      Complex complex9 = complex2.I.add(870.499884);
      complex6.pow(complex5);
      complex3.subtract(complex5);
      complex2.getArgument();
      Complex complex10 = complex6.add(complex7);
      complex10.log();
      complex10.ZERO.divide(870.499884);
      complex3.divide(1647.193063);
      complex1.getField();
      complex9.hashCode();
      complex4.toString();
      Complex complex11 = complex2.createComplex(Double.NaN, (-924));
      complex11.INF.add(complex1);
      complex6.isNaN();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.multiply(1);
      complex2.getArgument();
      Complex complex3 = complex1.I.divide((double) 1);
      Complex complex4 = complex0.pow((-1361.4400869572064));
      Complex complex5 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ZERO.add(0.0);
      complex1.isInfinite();
      complex0.isInfinite();
      Complex complex7 = complex6.sin();
      complex7.NaN.pow(165.6338798479657);
      complex7.NaN.getArgument();
      complex3.NaN.nthRoot(1);
      complex0.pow(1299.280373121359);
      complex3.hashCode();
      complex4.tan();
      complex4.multiply((-768));
      complex5.I.acos();
      complex6.multiply(8.846862323478745E-8);
      complex0.isNaN();
      complex0.getField();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(478.854938, 478.854938);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.sqrt();
      complex2.ONE.sqrt1z();
      Complex complex3 = new Complex((-2655.4892797664), 478.854938);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex1.ONE.pow(complex3);
      complex5.INF.getArgument();
      complex5.INF.reciprocal();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex7.ZERO.sqrt();
      complex8.NaN.multiply(0);
      complex6.I.divide(complex4);
      Complex complex9 = complex1.cos();
      complex6.asin();
      complex9.readResolve();
      Complex complex10 = complex0.ZERO.sqrt1z();
      complex10.multiply((-2655.4892797664));
      complex2.sin();
      Complex complex11 = complex1.tan();
      complex11.ZERO.divide((-2655.4892797664));
      complex11.isNaN();
      complex5.cosh();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.nthRoot((-1223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,223
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.pow(1983.284676412791);
      complex0.I.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.NaN.subtract(complex3);
      complex4.ZERO.reciprocal();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex1.pow(complex2);
      complex6.ZERO.sinh();
      Complex complex7 = complex6.negate();
      complex4.hashCode();
      complex4.add(complex6);
      complex4.getReal();
      Complex complex8 = Complex.valueOf((-20.0));
      Complex complex9 = complex7.tan();
      complex9.I.exp();
      complex9.NaN.getField();
      complex5.add(complex8);
      complex0.divide(0.0);
      complex7.multiply(0.0);
      complex0.toString();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.6769026517868042);
      Complex complex2 = Complex.valueOf(0.6769026517868042);
      complex0.NaN.add(complex1);
      Complex complex3 = complex0.divide(0.0);
      complex0.NaN.multiply(0.0);
      complex0.ZERO.nthRoot(1063);
      Complex complex4 = complex3.ONE.subtract(6.283185307179586);
      Complex complex5 = complex4.NaN.multiply(complex0);
      complex5.sqrt1z();
      complex3.abs();
      Complex complex6 = complex3.negate();
      complex6.cosh();
      complex2.reciprocal();
      complex5.createComplex(1668.31, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.sqrt();
      complex0.pow(complex1);
      Complex complex2 = complex0.NaN.asin();
      complex2.ZERO.pow(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.I.createComplex(Double.NaN, Double.NaN);
      complex0.I.hashCode();
      Complex complex5 = complex3.NaN.pow((-1.6001563011916016E-8));
      complex5.ZERO.readResolve();
      complex0.multiply(complex3);
      complex4.divide(Double.NaN);
      Complex.valueOf(2.3709316816226527E-8);
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-1.0188117475357564E-260));
      complex0.getField();
      complex0.getField();
      Complex complex1 = Complex.valueOf(1.7069074829463731E180);
      Complex complex2 = complex0.pow(complex1);
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.NaN.multiply((-1270));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.multiply(37);
      Complex complex6 = complex3.ONE.add((double) 37);
      Complex complex7 = complex0.multiply((-394.564391));
      complex7.sinh();
      complex4.abs();
      complex1.abs();
      complex1.abs();
      complex0.pow(complex5);
      complex3.cosh();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex3.multiply(Double.NaN);
      complex6.pow((-394.564391));
      Complex complex11 = complex3.negate();
      complex9.isNaN();
      complex11.sqrt();
      complex10.conjugate();
      Complex.valueOf((-394.564391), (-221.3431342047676));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sin();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.pow(0.0);
      complex1.ZERO.hashCode();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex0.NaN.createComplex(0.0, 0.0);
      complex2.getImaginary();
      Complex complex6 = complex1.multiply(0.0);
      complex1.multiply(1201);
      complex5.toString();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex1.NaN.divide(complex6);
      complex7.ONE.hashCode();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex9.NaN.divide(complex7);
      complex5.hashCode();
      complex6.isInfinite();
      complex4.isInfinite();
      Complex complex11 = complex2.log();
      complex5.toString();
      Complex complex12 = complex5.ZERO.subtract(complex8);
      complex12.ZERO.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex2.negate();
      Complex complex13 = complex5.sqrt();
      complex2.equals(complex5);
      complex13.atan();
      Complex complex14 = complex8.exp();
      complex14.I.subtract(complex11);
      complex2.conjugate();
      complex10.pow(0.0);
      complex7.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      complex0.readResolve();
      complex0.tanh();
      complex0.abs();
      complex1.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-2682.432335), (-1434.616538));
      Complex complex1 = complex0.tanh();
      complex1.I.multiply(complex0);
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex2.tan();
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.sinh();
      Complex complex1 = complex0.sin();
      complex1.pow(complex0);
      Complex.valueOf(0.0, 85.9802533667);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow((-908.93259));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.pow(complex4);
      List<Complex> list0 = complex5.I.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex6 = complex5.I.reciprocal();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals((-0.7628276981031681), complex4.getImaginary(), 0.01);
      assertEquals(0.0446444445355529, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex7 = complex1.I.atan();
      Complex complex8 = complex7.I.conjugate();
      assertTrue(complex8.equals((Object)complex6));
      
      Complex complex9 = complex3.cos();
      complex9.ZERO.getField();
      complex2.INF.tan();
      Complex complex10 = complex1.multiply(complex9);
      Complex complex11 = complex10.NaN.log();
      Complex complex12 = complex11.ZERO.multiply(0.0);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = Complex.valueOf((-346.912816), (-908.93259));
      complex13.INF.cosh();
      Complex complex14 = complex13.add(complex10);
      complex3.toString();
      complex3.isNaN();
      Complex complex15 = complex1.NaN.multiply((-346.912816));
      Complex complex16 = complex15.NaN.sinh();
      assertSame(complex16, complex10);
      
      Complex complex17 = complex9.add(1374.963492432);
      complex17.INF.hashCode();
      complex1.conjugate();
      complex17.acos();
      Complex complex18 = complex17.cosh();
      assertTrue(complex2.equals((Object)complex5));
      assertSame(complex18, complex7);
      assertSame(complex18, complex14);
      
      Complex complex19 = Complex.valueOf((-346.912816), (-1478.2828));
      assertEquals((-1478.2828), complex19.getImaginary(), 0.01);
      assertEquals((-346.912816), complex19.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.abs();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.cosh();
      assertFalse(complex2.isInfinite());
      
      Complex complex3 = complex1.cos();
      assertNotSame(complex3, complex2);
      assertSame(complex3, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.I.conjugate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      
      Complex complex4 = complex0.divide(complex1);
      assertFalse(complex1.equals((Object)complex3));
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
  }
}
