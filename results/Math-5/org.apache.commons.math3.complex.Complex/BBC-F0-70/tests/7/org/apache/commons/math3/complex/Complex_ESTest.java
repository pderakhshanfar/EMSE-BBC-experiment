/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:36:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex1.ZERO.hashCode();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex4.INF.atan();
      complex3.ONE.tan();
      Complex complex6 = complex3.INF.subtract((-1537.35));
      Complex complex7 = complex2.ZERO.multiply(complex6);
      complex7.ONE.reciprocal();
      complex6.readResolve();
      Complex complex8 = complex3.createComplex(2859.0893, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.NaN.subtract(complex2);
      complex1.INF.tanh();
      complex9.NaN.sqrt1z();
      complex0.readResolve();
      complex6.sqrt1z();
      Complex complex10 = complex2.sqrt();
      complex8.asin();
      complex5.multiply((-462));
      Complex complex11 = complex1.pow(Double.POSITIVE_INFINITY);
      complex3.multiply((double) (-462));
      complex11.abs();
      complex9.multiply(378.76770001);
      Complex complex12 = Complex.valueOf((-2417.0), (double) (-462));
      complex5.getField();
      complex8.sinh();
      complex7.multiply(304);
      Complex complex13 = complex10.cos();
      complex12.reciprocal();
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-183.5977991), (-20.0));
      Complex complex1 = complex0.asin();
      complex1.divide(complex0);
      complex0.toString();
      Complex complex2 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.getReal();
      Complex complex2 = complex1.add(complex0);
      complex0.abs();
      Complex complex3 = complex0.pow(3.627172425759641E-305);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.tanh();
      complex3.negate();
      Complex complex7 = new Complex((-2072.3), Double.POSITIVE_INFINITY);
      complex7.toString();
      Complex complex8 = complex4.multiply(complex7);
      complex1.add(complex5);
      complex4.tanh();
      complex8.acos();
      try { 
        complex6.nthRoot((-670));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -670
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-20.0), (-124.22911));
      complex2.tanh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      complex0.asin();
      complex0.pow((double) 7);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex0.multiply(332);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-163.52643267802), (-163.52643267802));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      complex0.I.hashCode();
      Complex complex4 = complex0.pow(3156600.9225);
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.conjugate();
      complex6.ONE.pow((-2971.479));
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      complex1.sqrt();
      complex0.abs();
      Complex complex2 = complex1.add(9.150656302379135);
      Complex complex3 = complex2.tan();
      complex3.createComplex((-2.724174869314043E-8), Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-1673.627));
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(766.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.add(complex2);
      complex3.abs();
      complex3.add(4.5909386437919143E-48);
      complex0.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2984.192100885449), 389.0057735);
      complex0.INF.toString();
      complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(389.0057735);
      complex1.add(complex2);
      Complex complex3 = complex1.ONE.acos();
      complex1.abs();
      complex1.getField();
      Complex complex4 = new Complex((-4491855.36), 1154.884456575343);
      Complex complex5 = complex2.sinh();
      complex4.sqrt1z();
      complex2.subtract(3009.4398127896566);
      complex5.abs();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = Complex.INF;
      complex6.equals(complex0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN, 972.6785620557274);
      complex0.sqrt();
      Complex complex2 = Complex.valueOf((-2340.3879));
      Complex complex3 = new Complex((-2119.4));
      complex3.abs();
      Complex complex4 = complex2.tan();
      complex3.asin();
      complex4.negate();
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-2.0416603812329616E-8));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.ONE;
      complex2.abs();
      Complex complex3 = Complex.INF;
      complex0.divide(Double.NaN);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
      Complex complex1 = Complex.NaN;
      complex1.ONE.readResolve();
      Complex complex2 = complex0.multiply(complex1);
      complex1.ZERO.sin();
      complex2.acos();
      complex1.equals(complex2);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-873.1756914675905));
      Complex complex1 = complex0.tanh();
      complex1.NaN.cosh();
      complex0.nthRoot(1583);
      Complex complex2 = complex1.NaN.exp();
      complex1.getReal();
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.abs();
      Complex complex4 = complex0.pow(3.627172425759641E-305);
      Complex complex5 = Complex.ZERO;
      complex1.INF.asin();
      complex5.ONE.tanh();
      Complex complex6 = new Complex(1583, 3.627172425759641E-305);
      complex2.NaN.log();
      complex6.ONE.toString();
      Complex complex7 = complex0.negate();
      Complex.valueOf((-1.0));
      complex7.ZERO.tan();
      complex7.NaN.abs();
      complex4.getField();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex4.subtract(Double.POSITIVE_INFINITY);
      complex10.abs();
      complex4.sqrt1z();
      Complex complex11 = Complex.INF;
      complex8.sin();
      complex9.createComplex(1298.1099005189487, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-873.1756914675905));
      Complex complex1 = complex0.tanh();
      complex1.NaN.cosh();
      complex0.nthRoot(1583);
      Complex complex2 = complex1.NaN.exp();
      complex1.getReal();
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.abs();
      Complex complex4 = complex0.pow(3.627172425759641E-305);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.INF.asin();
      complex5.ONE.tanh();
      Complex complex7 = complex4.ONE.negate();
      complex7.ONE.toString();
      Complex complex8 = complex0.negate();
      complex6.NaN.readResolve();
      Complex.valueOf((-1.0));
      complex8.ZERO.tan();
      complex8.NaN.abs();
      complex6.getField();
      Complex complex9 = new Complex((-3241.79252088), Double.NaN);
      complex9.sinh();
      Complex complex10 = complex3.sqrt1z();
      complex6.subtract(2950.616409138899);
      complex2.abs();
      Complex complex11 = Complex.ZERO;
      complex11.sqrt1z();
      Complex complex12 = Complex.INF;
      complex9.sin();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.sin();
      complex2.getArgument();
      Complex complex3 = complex1.multiply((-2238.951573705941));
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex0.atan();
      complex5.cos();
      complex5.abs();
      complex5.getArgument();
      Complex complex7 = Complex.INF;
      complex6.acos();
      complex6.tanh();
      Complex complex8 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-2.0416603812329616E-8);
      Complex complex0 = new Complex((-2.0416603812329616E-8));
      Complex complex1 = complex0.ZERO.log();
      complex0.getArgument();
      Complex complex2 = Complex.ONE;
      complex1.hashCode();
      complex1.abs();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.pow(complex1);
      complex0.pow(complex4);
      complex2.hashCode();
      Complex complex5 = new Complex(-0.0);
      try { 
        complex5.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1118.1459005488944, 1118.1459005488944);
      Complex complex1 = complex0.multiply(1118.1459005488944);
      complex1.ONE.abs();
      complex1.asin();
      Complex complex2 = complex1.conjugate();
      complex2.cos();
      complex0.subtract(1118.1459005488944);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.ONE.log();
      complex0.hashCode();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.log();
      complex4.abs();
      complex2.INF.readResolve();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.valueOf(0.7853981633974483);
      complex6.ONE.nthRoot(19);
      Complex complex7 = complex1.multiply(1118.1459005488944);
      complex1.ZERO.multiply(261.7);
      Complex complex8 = complex5.add(310.994340351926);
      complex8.exp();
      Complex complex9 = complex2.subtract(0.7853981633974483);
      Complex complex10 = complex9.I.sqrt1z();
      complex10.INF.cosh();
      complex0.equals(complex3);
      complex7.asin();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex11.subtract(complex0);
      Object object0 = complex6.readResolve();
      complex1.equals(object0);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1224.904300457287));
      complex12.subtract((double) 19);
      Complex complex13 = complex10.multiply(complex2);
      complex13.asin();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(complex0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.divide((-297.1));
      complex3.cosh();
      Complex complex4 = complex1.atan();
      complex1.createComplex((-297.1), (-2752.0));
      Complex complex5 = complex2.tanh();
      complex5.acos();
      Complex complex6 = Complex.ONE;
      complex0.divide(complex6);
      Complex complex7 = complex4.pow(complex5);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.ZERO.sqrt();
      complex3.ZERO.divide((-233.5318));
      Complex complex4 = complex3.sin();
      complex4.I.getArgument();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex1.asin();
      complex6.tanh();
      Complex complex7 = complex5.divide(complex0);
      complex7.INF.acos();
      Complex complex8 = complex7.ZERO.add(complex3);
      complex7.getImaginary();
      complex5.ZERO.conjugate();
      complex5.multiply(complex6);
      complex3.cosh();
      complex7.NaN.pow((-941.3765625441714));
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.divide((-1886.8474));
      complex10.ZERO.toString();
      Complex complex11 = complex10.ONE.createComplex(1.0076552294433743E-119, (-233.5318));
      complex5.atan();
      Complex complex12 = complex9.asin();
      complex12.multiply((-2805));
      Complex complex13 = complex11.tan();
      complex13.ONE.pow((-2518.2415925265827));
      complex5.asin();
      complex13.add(complex8);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sqrt();
      complex2.ZERO.getField();
      complex1.readResolve();
      Complex complex3 = complex1.NaN.reciprocal();
      complex3.NaN.asin();
      complex3.INF.cos();
      complex3.INF.reciprocal();
      complex0.abs();
      complex2.toString();
      complex3.nthRoot(2658);
      complex0.add(1.450735092163086);
      complex0.subtract(complex3);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.NaN.subtract((-3904.2367401));
      Complex.valueOf(0.361492295721388);
      complex3.I.multiply(complex0);
      Complex complex4 = complex2.conjugate();
      complex0.hashCode();
      complex3.toString();
      complex4.pow((-3904.2367401));
      complex1.multiply((-958));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-873.1756914675905));
      Complex complex1 = complex0.tanh();
      complex1.getArgument();
      Complex complex2 = complex1.add(3.141592653589793);
      Complex complex3 = Complex.NaN;
      complex3.hashCode();
      complex3.abs();
      complex2.acos();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.pow(complex2);
      complex4.hashCode();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.subtract(complex6);
      Complex.valueOf(829.9394601080768);
      complex7.sin();
      complex7.getArgument();
      Complex complex8 = complex3.multiply(3.141592653589793);
      Complex complex9 = Complex.I;
      complex4.reciprocal();
      Complex complex10 = complex5.atan();
      complex9.cos();
      complex8.abs();
      Complex complex11 = new Complex((-873.1756914675905), (-148.276788646));
      complex11.getArgument();
      Complex complex12 = Complex.INF;
      complex10.acos();
      Complex complex13 = Complex.valueOf((-1.0), Double.NaN);
      complex13.tanh();
      Complex complex14 = Complex.ONE;
      complex14.getReal();
      complex3.log();
      Complex complex15 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(349.37, 294.4);
      Complex complex2 = complex1.asin();
      complex2.tanh();
      Complex complex3 = complex1.negate();
      complex1.toString();
      Complex complex4 = complex3.negate();
      complex4.NaN.readResolve();
      Complex.valueOf((-5001000.019657192));
      complex0.tan();
      complex4.abs();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ONE;
      complex6.getField();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sinh();
      complex8.sqrt1z();
      Complex complex9 = complex7.subtract(Double.NaN);
      complex9.cosh();
      complex7.abs();
      Complex complex10 = Complex.INF;
      complex3.sqrt1z();
      complex5.exp();
      Complex complex11 = new Complex((-364.92706385), 2979.54093902733);
      complex11.toString();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.NaN.subtract((-3904.2367401));
      complex3.I.multiply(complex0);
      Complex complex4 = complex2.conjugate();
      complex0.hashCode();
      complex3.toString();
      complex4.pow((-3904.2367401));
      complex1.multiply((-958));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1118.1459005488944, 1118.1459005488944);
      Complex complex1 = complex0.asin();
      complex0.getField();
      complex0.cosh();
      complex1.tanh();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(995.97811258518);
      complex0.cosh();
      // Undeclared exception!
      complex0.nthRoot(5414);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-873.176));
      Complex.valueOf((-873.176));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      complex1.tan();
      complex2.divide(complex1);
      Complex.valueOf((-873.176));
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-873.1756914675905));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.cosh();
      complex0.nthRoot(1583);
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.ONE.subtract(complex1);
      complex1.getReal();
      Complex complex5 = complex1.add(complex0);
      complex5.ZERO.abs();
      Complex complex6 = complex3.pow((double) 1583);
      Complex complex7 = complex1.add(0.0);
      Complex complex8 = complex7.tan();
      complex0.asin();
      complex2.tanh();
      complex6.negate();
      complex3.toString();
      Complex complex9 = complex4.negate();
      Complex complex10 = Complex.valueOf(2.0);
      complex6.tan();
      complex9.abs();
      complex7.getField();
      Complex complex11 = Complex.valueOf(1396.820626, 2.414213562373095);
      complex11.sinh();
      complex10.sqrt1z();
      complex4.subtract((-873.1756914675905));
      complex8.abs();
      Complex complex12 = Complex.NaN;
      complex12.sqrt1z();
      complex11.exp();
      Complex complex13 = Complex.valueOf(2.0, 0.0);
      complex13.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(complex0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.divide(1170.1024);
      Complex complex4 = complex1.atan();
      complex4.ZERO.subtract(1170.1024);
      complex2.tan();
      complex0.divide(complex3);
      Complex complex5 = new Complex(1170.1024, 2655.4105);
      complex5.I.toString();
      Complex complex6 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(995.97811258518);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.I.multiply(118);
      Complex complex5 = new Complex(0.0);
      complex5.getArgument();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex4.atan();
      complex9.cos();
      complex2.abs();
      complex8.getArgument();
      Complex complex10 = complex7.negate();
      complex7.acos();
      complex1.tanh();
      complex10.getReal();
      Complex.valueOf(0.0);
      Complex complex11 = Complex.ONE;
      Complex complex12 = new Complex(1.49173430507139E7);
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-873.1756914675905));
      Complex complex1 = complex0.tanh();
      complex1.NaN.cosh();
      complex0.nthRoot(1583);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex1.getReal();
      Complex complex4 = complex1.add(complex0);
      complex4.ZERO.abs();
      Complex complex5 = complex0.pow(3.627172425759641E-305);
      complex2.INF.add(0.0);
      Complex complex6 = complex5.tan();
      complex1.INF.asin();
      complex6.ONE.tanh();
      Complex complex7 = complex5.ONE.negate();
      complex7.ONE.toString();
      Complex complex8 = complex0.negate();
      Complex.valueOf((-1.0));
      complex8.ZERO.tan();
      complex8.NaN.abs();
      complex5.getField();
      complex8.sinh();
      complex2.sqrt1z();
      Complex complex9 = complex5.subtract(Double.POSITIVE_INFINITY);
      complex9.abs();
      complex5.sqrt1z();
      complex0.exp();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(complex0);
      complex1.negate();
      Complex complex2 = complex1.divide(1170.1024);
      complex1.atan();
      complex0.getArgument();
      complex1.reciprocal();
      complex2.sin();
      Complex.valueOf(1170.1024);
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1118.1459005488944);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.I.tan();
      complex3.divide(complex1);
      Complex.valueOf(1118.1459005488944);
      complex1.add((-84.95896));
      complex2.createComplex(1118.1459005488944, 1118.1459005488944);
      complex2.toString();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(1170.1024);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = Complex.valueOf(1170.1024, 1170.1024);
      Complex complex6 = complex2.ONE.add(complex3);
      Complex complex7 = complex6.divide(complex4);
      complex2.ZERO.multiply(1170.1024);
      Complex complex8 = complex5.ONE.sqrt1z();
      complex8.INF.divide(complex2);
      Complex complex9 = complex1.multiply(3586.31381);
      complex3.ONE.divide(complex1);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex10.ZERO.tan();
      complex9.add(763.585581);
      complex1.nthRoot(1);
      complex9.conjugate();
      Complex complex12 = complex0.atan();
      complex12.getField();
      complex11.multiply(225);
      complex2.conjugate();
      complex9.divide(complex7);
      Complex complex13 = Complex.valueOf(2196.109392208, 1170.1024);
      complex13.log();
      Complex complex14 = complex4.cosh();
      complex13.createComplex(1.0000003615151796, 4740.8758445281);
      complex14.readResolve();
      complex10.equals(complex4);
      complex1.abs();
      complex10.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1118.1459005488944);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.I.tan();
      complex3.divide(complex1);
      Complex.valueOf(1118.1459005488944);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.I;
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(1170.1024);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = Complex.valueOf(1170.1024);
      Complex complex6 = complex2.ONE.add(complex3);
      complex6.divide(complex4);
      complex2.ZERO.multiply(1170.1024);
      Complex complex7 = complex5.ONE.sqrt1z();
      complex7.INF.divide(complex2);
      Complex complex8 = complex1.multiply(3586.31381);
      complex3.ONE.divide(complex1);
      Complex complex9 = complex8.negate();
      complex9.ZERO.tan();
      complex8.add(763.585581);
      complex1.nthRoot(1);
      complex0.equals(complex3);
      complex7.subtract(1863.48);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1118.1459005488944);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.divide(complex0);
      double double0 = 3586.31381;
      double double1 = 20.0;
      complex1.multiply(20.0);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3862.297768261));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.asin();
      complex3.abs();
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex2.divide(complex3);
      complex2.negate();
      Complex complex4 = Complex.valueOf(3586.31381);
      complex4.tan();
      double double0 = 763.585581;
      complex2.add(763.585581);
      int int0 = (-1911192253);
      try { 
        complex0.nthRoot((-1911192253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,911,192,253
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1170.1024);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = Complex.valueOf(1170.1024, 1170.1024);
      Complex complex6 = complex2.ONE.add(complex3);
      Complex complex7 = complex6.divide(complex4);
      complex2.ZERO.multiply(1170.1024);
      Complex complex8 = complex5.ONE.sqrt1z();
      complex8.INF.divide(complex2);
      Complex complex9 = complex6.sin();
      complex9.negate();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.atan();
      Complex complex12 = Complex.ZERO;
      complex11.sin();
      Complex complex13 = new Complex(2453.00754155);
      complex13.getArgument();
      complex7.reciprocal();
      complex12.sin();
      complex2.isInfinite();
      Complex.valueOf(0.0);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.divide(1387.3718825);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex2.atan();
      complex3.abs();
      complex6.getArgument();
      complex6.negate();
      Complex complex8 = new Complex(1387.3718825, 851.9075);
      Complex complex9 = complex8.acos();
      complex3.tanh();
      complex3.getReal();
      complex9.log();
      Complex complex10 = new Complex((-3184.55), 0.0);
      complex7.pow(complex10);
      Complex complex11 = new Complex(Double.NEGATIVE_INFINITY);
      complex1.cosh();
      complex2.conjugate();
      complex5.atan();
      Complex complex12 = Complex.I;
      complex12.exp();
      Complex.valueOf(0.2679491924311228);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3862.297768261));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.asin();
      complex3.abs();
      Complex complex4 = complex1.I.sin();
      complex1.negate();
      Complex complex5 = Complex.INF;
      complex5.add(274.0613041);
      complex2.nthRoot(1824);
      complex5.conjugate();
      Complex complex6 = complex0.atan();
      complex4.getField();
      complex4.multiply(1824);
      Complex complex7 = Complex.I;
      complex7.conjugate();
      Complex complex8 = Complex.valueOf(9.088930322637719);
      Complex complex9 = complex8.divide(complex4);
      Complex.valueOf((-2257.574222), 118.2439);
      complex2.log();
      complex2.cosh();
      Complex complex10 = complex9.createComplex(1553.54629, 1553.54629);
      complex10.ZERO.createComplex(1553.54629, 9.088930322637719);
      complex0.readResolve();
      Complex complex11 = Complex.INF;
      complex7.equals(complex11);
      complex6.abs();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1070.9999789));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.pow((-1070.9999789));
      complex2.NaN.sqrt();
      Complex complex3 = Complex.valueOf(4233.0);
      complex2.INF.acos();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.NaN.multiply((-1070.9999789));
      complex5.ONE.getField();
      Complex complex6 = Complex.I;
      complex6.negate();
      Complex complex7 = complex6.ZERO.pow((-3135.4422886));
      complex6.ONE.getArgument();
      Complex complex8 = complex6.NaN.subtract(complex7);
      Complex complex9 = complex6.ZERO.sqrt1z();
      Complex complex10 = complex9.INF.subtract(complex5);
      complex0.pow(complex6);
      complex8.nthRoot(788);
      complex8.negate();
      Complex complex11 = complex10.pow((-1070.9999789));
      Complex complex12 = complex11.ONE.pow(complex3);
      complex12.NaN.atan();
      complex10.sqrt1z();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(1170.1024);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = Complex.valueOf(1170.1024, 1170.1024);
      Complex complex6 = complex2.ONE.add(complex3);
      complex6.divide(complex4);
      complex3.subtract(complex5);
      complex6.subtract(1170.1024);
      complex4.hashCode();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.multiply((-226.06763787722));
      complex0.toString();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = new Complex(698.66);
      complex10.abs();
      complex8.atan();
      Complex complex11 = Complex.valueOf(3156.0, 3156.0);
      complex11.getImaginary();
      complex4.divide(124.30281979232839);
      Complex complex12 = Complex.valueOf((-1844.35), 495.0);
      Complex complex13 = complex9.cos();
      complex13.acos();
      Complex complex14 = Complex.valueOf((-226.06763787722));
      complex12.asin();
      complex4.log();
      complex14.abs();
      complex0.multiply(3156.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.tan();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sinh();
      complex1.nthRoot(7);
      complex0.getReal();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.valueOf((double) 7, Double.POSITIVE_INFINITY);
      complex5.readResolve();
      complex5.getArgument();
      complex4.acos();
      complex1.readResolve();
      Complex complex6 = complex2.pow((-322.9857877928791));
      Complex complex7 = complex6.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.cos();
      complex3.add(complex1);
      Complex.valueOf(798.0279954419, (-1954.208861029025));
      complex2.add(complex6);
      Complex complex9 = new Complex((-2375.638310455), (-2375.638310455));
      complex9.sin();
      Complex complex10 = complex8.multiply(Double.POSITIVE_INFINITY);
      complex5.negate();
      complex10.sin();
      try { 
        complex7.nthRoot((-3540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,540
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-2.0416603812329616E-8));
      Complex complex1 = complex0.ZERO.log();
      complex0.ONE.getArgument();
      complex1.ZERO.hashCode();
      complex0.abs();
      complex1.I.acos();
      Complex complex2 = complex0.pow(complex0);
      Complex complex3 = complex2.pow(complex0);
      complex1.hashCode();
      Complex complex4 = complex1.subtract(complex1);
      Complex complex5 = complex2.pow((-640.082461));
      complex5.sin();
      complex5.getArgument();
      complex2.ONE.divide(3.163163464591171E-136);
      complex1.multiply((-1.3811462167E-314));
      Complex complex6 = complex0.INF.sinh();
      Complex complex7 = complex6.INF.reciprocal();
      complex7.atan();
      complex2.abs();
      complex0.getArgument();
      complex0.negate();
      complex5.INF.acos();
      complex4.tanh();
      Complex complex8 = complex5.multiply(3075);
      complex8.NaN.conjugate();
      Complex complex9 = complex3.divide(complex5);
      complex9.I.log();
      complex0.cosh();
      complex0.createComplex(830.365227869, (-2.0416603812329616E-8));
      Object object0 = complex9.readResolve();
      complex9.equals(object0);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-120.256771512), (-2259.490651419844));
      complex0.INF.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex1.ZERO.cosh();
      complex4.INF.subtract(0.0);
      Complex complex5 = complex1.log();
      complex5.ZERO.negate();
      complex3.ZERO.toString();
      Complex complex6 = complex5.reciprocal();
      complex3.nthRoot(1);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.I.acos();
      complex9.hashCode();
      complex0.getArgument();
      Complex complex10 = complex0.subtract((-2213.118306093593));
      complex2.toString();
      complex1.INF.getArgument();
      Complex.valueOf((-2259.490651419844), 1568.12917237069);
      Complex complex11 = complex6.sqrt();
      complex10.toString();
      complex11.getReal();
      complex11.isNaN();
      complex5.cosh();
      complex7.isInfinite();
      complex1.multiply(1.072843313217163);
      complex2.negate();
      Complex.valueOf(1.4780692924846082E197, 300.2031283722431);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-3423.6));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex((-736.0762251061269), (-3423.6));
      Complex complex3 = Complex.valueOf((-736.0762251061269));
      Complex complex4 = complex3.NaN.cosh();
      complex0.ONE.subtract(complex3);
      complex0.getReal();
      Complex complex5 = Complex.ZERO;
      complex5.I.conjugate();
      complex3.ZERO.divide(complex5);
      complex0.INF.readResolve();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.conjugate();
      complex7.I.multiply(complex4);
      complex7.I.sqrt1z();
      Complex complex8 = complex1.sinh();
      complex8.ZERO.subtract((-3423.6));
      complex8.getField();
      complex4.ONE.hashCode();
      Complex complex9 = complex2.pow((-3423.6));
      Complex complex10 = complex9.add(complex3);
      complex10.I.getArgument();
      complex2.hashCode();
      complex9.ONE.pow(2376.355741856405);
      Complex complex11 = complex4.add(complex10);
      complex0.ONE.sinh();
      Complex complex12 = complex2.pow(0.0);
      complex12.ZERO.readResolve();
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex9.sinh();
      complex10.exp();
      Complex.valueOf((-736.0762251061269));
      complex14.acos();
      complex11.isInfinite();
      complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.toString();
      complex0.getField();
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex1.I.conjugate();
      complex2.INF.getField();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex.valueOf((-1333.06), (-1333.06));
      complex1.ONE.nthRoot(1);
      complex1.NaN.abs();
      Complex complex4 = complex0.subtract(1.676081191364984E71);
      complex4.INF.toString();
      complex1.NaN.abs();
      complex4.INF.hashCode();
      Complex complex5 = complex4.asin();
      complex1.tanh();
      Complex complex6 = Complex.valueOf(0.0, 1.676081191364984E71);
      complex6.sqrt1z();
      complex5.cosh();
      complex5.getArgument();
      complex5.negate();
      complex4.toString();
      complex0.exp();
      complex5.isNaN();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.atan();
      complex2.ONE.negate();
      complex0.I.abs();
      complex1.I.nthRoot(610);
      Complex complex3 = complex0.I.subtract((-1419.66));
      complex1.multiply(complex0);
      complex1.I.add((-1315.63));
      Complex complex4 = complex1.createComplex((-767.0), 610);
      complex4.I.toString();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.add(1.0);
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.pow(1.4034725764547136E-8);
      complex1.getArgument();
      Complex complex5 = complex1.divide((-5.67996159922899E-5));
      Complex complex6 = complex0.subtract(20.0);
      Complex complex7 = complex5.I.tanh();
      complex4.ONE.add(1.4034725764547136E-8);
      complex7.ONE.getArgument();
      complex4.divide(complex6);
      Complex complex8 = complex1.acos();
      complex5.isNaN();
      Complex complex9 = Complex.valueOf(312.00693168);
      Complex complex10 = complex1.tanh();
      complex10.NaN.sinh();
      Complex complex11 = complex8.add(complex6);
      complex8.ZERO.subtract(complex10);
      complex6.NaN.hashCode();
      Complex complex12 = complex9.tanh();
      complex12.cos();
      complex12.NaN.acos();
      Complex complex13 = complex4.divide(0.0);
      Complex complex14 = complex13.asin();
      complex3.pow(complex11);
      complex1.sinh();
      complex11.readResolve();
      complex9.acos();
      complex14.multiply(958.969458);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2029.955490551));
      Complex complex1 = complex0.ZERO.subtract((-2029.955490551));
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.ZERO.subtract(0.0);
      Complex complex4 = complex0.ONE.cos();
      complex4.ZERO.pow(0.0);
      complex4.ZERO.getField();
      complex0.getImaginary();
      Complex complex5 = complex0.multiply(complex4);
      Complex.valueOf(0.0, (-3193.3471));
      complex5.negate();
      Complex complex6 = complex4.atan();
      complex0.ZERO.multiply(complex3);
      complex1.asin();
      Complex complex7 = Complex.NaN;
      complex7.I.getField();
      Complex complex8 = complex6.pow(complex7);
      complex8.I.pow(0.0);
      complex6.hashCode();
      complex2.getImaginary();
      complex6.readResolve();
      complex0.createComplex(4258.89, 0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2.0416603812329616E-8));
      Complex complex1 = complex0.ZERO.log();
      complex0.ONE.getArgument();
      Complex complex2 = complex0.add(830.365227869);
      complex2.ZERO.hashCode();
      complex2.abs();
      complex1.I.acos();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.pow(complex2);
      complex2.hashCode();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex3.pow((-640.082461));
      complex6.sin();
      complex6.getArgument();
      complex3.ONE.divide(3.163163464591171E-136);
      complex2.multiply((-1.3811462167E-314));
      Complex complex7 = complex0.INF.sinh();
      Complex complex8 = complex7.INF.reciprocal();
      complex8.atan();
      complex3.abs();
      complex2.getArgument();
      complex0.negate();
      complex6.INF.acos();
      complex5.tanh();
      Complex complex9 = complex6.multiply(3075);
      complex9.NaN.conjugate();
      Complex complex10 = complex4.divide(complex6);
      complex10.I.log();
      complex0.cosh();
      complex0.createComplex(830.365227869, (-2.0416603812329616E-8));
      Object object0 = complex10.readResolve();
      complex10.equals(object0);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.createComplex((-1893.13), (-2430.234612));
      Complex complex3 = complex1.sinh();
      complex3.ZERO.multiply(complex2);
      complex2.I.multiply((-635));
      complex2.NaN.tan();
      complex1.INF.toString();
      complex2.add(complex1);
      complex1.I.cosh();
      complex0.toString();
      complex0.divide(4592.524092953942);
      Complex complex4 = Complex.valueOf(4592.524092953942, 3639.69497436);
      Complex complex5 = complex1.negate();
      complex5.I.add(complex1);
      Complex complex6 = complex4.log();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3862.297768261));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.asin();
      complex3.abs();
      complex1.I.sin();
      Complex complex4 = complex2.sinh();
      try { 
        complex4.INF.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-681.97112));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.I.multiply((-864));
      complex2.I.sqrt1z();
      complex2.NaN.getField();
      complex1.ONE.cos();
      complex1.getField();
      complex0.nthRoot(777);
      Complex complex3 = complex1.exp();
      complex0.NaN.readResolve();
      Complex complex4 = Complex.valueOf((-861.36127));
      complex4.INF.multiply((-861.36127));
      complex0.getReal();
      complex4.hashCode();
      complex3.asin();
      Complex complex5 = complex4.sin();
      complex5.NaN.sqrt();
      complex5.INF.atan();
      complex1.multiply(218);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      complex0.NaN.pow(972.6785620557274);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.atan();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1685.0947247575205));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.getField();
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex1.I.pow(complex0);
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex3.multiply(37);
      complex0.ONE.tanh();
      Complex complex6 = complex0.sin();
      complex0.I.atan();
      Complex complex7 = complex6.ONE.sqrt();
      Complex.valueOf((-1685.0947247575205), (double) 37);
      complex7.NaN.abs();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex6.negate();
      Complex complex10 = complex9.ONE.add(Double.NaN);
      complex10.I.divide(1.785277385538302E272);
      Complex complex11 = complex8.reciprocal();
      complex11.NaN.sin();
      complex8.sin();
      complex5.abs();
      Complex complex12 = complex4.asin();
      complex12.ZERO.sinh();
      complex12.ZERO.pow(complex3);
      complex8.readResolve();
      complex4.log();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.NaN.subtract((-3904.2367401));
      complex3.I.multiply(complex0);
      complex2.conjugate();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3505.0));
      Complex complex1 = complex0.conjugate();
      complex1.NaN.log();
      Complex.valueOf(0.0);
      complex1.sinh();
      complex0.isInfinite();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-2737.687098313));
      Complex complex1 = complex0.subtract((-2737.687098313));
      complex1.nthRoot(37);
      complex0.getField();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.divide((double) 37);
      complex1.sqrt();
      Complex complex4 = complex3.sinh();
      try { 
        complex4.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1.0);
      complex0.divide(1.0);
      Complex complex2 = Complex.INF;
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4011.8952645294, 1142.039);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.subtract(complex1);
      complex2.abs();
      complex3.NaN.tan();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex4.acos();
      Complex complex7 = new Complex(2747.8569033, 1.0);
      Complex complex8 = complex6.ZERO.pow(complex7);
      complex8.ONE.sqrt1z();
      Complex complex9 = complex8.INF.sqrt1z();
      complex2.toString();
      Complex complex10 = complex4.sqrt();
      Complex.valueOf((-2235.2082820297));
      Complex complex11 = complex5.createComplex((-2000.6187591), (-2041.737432));
      Complex.valueOf(0.0, 0.0);
      complex5.ONE.negate();
      complex11.createComplex(0.0, 0.0);
      complex9.abs();
      complex10.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.nthRoot(1498);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.readResolve();
      complex1.INF.multiply(complex0);
      complex0.ONE.toString();
      Complex complex3 = complex0.sin();
      complex3.I.multiply(complex0);
      complex0.hashCode();
      Complex complex4 = complex1.INF.subtract(1191.467513408);
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.sin();
      complex3.I.cosh();
      Complex complex7 = complex1.cos();
      complex7.ONE.sqrt();
      Complex complex8 = complex7.subtract(complex0);
      complex8.ONE.subtract((double) 1498);
      complex7.I.conjugate();
      Complex complex9 = complex4.subtract((double) 1498);
      Complex complex10 = complex6.reciprocal();
      complex10.INF.hashCode();
      complex10.I.hashCode();
      complex10.abs();
      complex1.toString();
      complex4.tanh();
      complex1.log();
      complex9.getArgument();
      complex4.equals("(1.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(2372.0, 2372.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = complex3.createComplex((-110.223127298399), (-2.8169291774231604E126));
      complex2.nthRoot(512);
      complex5.getArgument();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.NaN.cosh();
      complex3.multiply(970.7061228813);
      Complex complex4 = complex3.INF.subtract(2.0);
      complex0.equals(object0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.NaN.atan();
      complex6.INF.add(complex2);
      complex5.conjugate();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.add(complex4);
      complex7.abs();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex4.add(2.0);
      Complex complex11 = complex10.cos();
      complex3.hashCode();
      Complex complex12 = complex9.multiply(1499);
      complex1.getReal();
      Complex complex13 = complex7.ZERO.multiply(Double.NaN);
      Complex complex14 = Complex.INF;
      complex14.sinh();
      complex8.divide(complex14);
      Complex.valueOf(4233.0);
      complex11.divide(complex3);
      complex7.subtract(0.0);
      complex0.getArgument();
      complex13.divide(complex12);
      complex10.negate();
      Complex complex15 = new Complex(1499, (-887.292166));
      complex12.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(1.0493479260117497E-96, (-5.598619958143586E-8));
      Complex complex3 = complex2.I.createComplex(1.0493479260117497E-96, (-2409.0));
      complex2.NaN.cosh();
      complex3.I.tanh();
      Complex complex4 = complex0.subtract(complex2);
      complex1.INF.cos();
      complex4.abs();
      complex0.isNaN();
      complex2.isInfinite();
      Complex complex5 = complex1.subtract(complex3);
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex2.ZERO.add(0.0);
      complex3.ONE.createComplex(521.454546, 521.454546);
      Complex complex4 = new Complex(0.0, 0.0);
      complex0.ONE.toString();
      complex4.add(complex2);
      complex0.ONE.asin();
      try { 
        complex4.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.tan();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.divide(1387.3718825);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.sin();
      complex4.I.getArgument();
      complex5.reciprocal();
      complex3.sin();
      complex4.isInfinite();
      Complex.valueOf(5.68253547942899E295);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      complex0.NaN.negate();
      complex0.I.tan();
      complex0.ONE.add(1409.984724562);
      Complex.valueOf(1409.984724562);
      Complex.valueOf(1409.984724562);
      Complex complex2 = complex0.exp();
      complex2.abs();
      Complex complex3 = complex2.subtract(complex0);
      complex3.ZERO.hashCode();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(2.955364187248884E203, 1163.59785537);
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.atan();
      complex2.multiply(complex3);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(1170.1024);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = Complex.valueOf(1170.1024, 1170.1024);
      Complex complex6 = complex2.ONE.add(complex3);
      complex6.divide(complex4);
      complex2.ZERO.multiply(1170.1024);
      Complex complex7 = complex5.ONE.sqrt1z();
      complex7.INF.divide(complex2);
      Complex complex8 = complex1.multiply(3586.31381);
      Complex complex9 = complex1.negate();
      complex9.ONE.divide(complex1);
      Complex complex10 = complex8.negate();
      complex10.ZERO.tan();
      complex8.add(763.585581);
      complex1.nthRoot(1);
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex0.atan();
      complex12.getField();
      complex0.getReal();
      complex8.log();
      complex8.pow(complex5);
      complex7.cosh();
      complex11.conjugate();
      complex9.atan();
      complex12.exp();
      Complex.valueOf(1079.70318627);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.add(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.add(complex1);
      complex2.INF.toString();
      Complex complex4 = complex0.reciprocal();
      Complex.valueOf((-1942.8394172754));
      complex4.ZERO.subtract(complex0);
      complex1.INF.multiply(0);
      Complex.valueOf((-1592.7998938));
      Complex complex5 = complex1.exp();
      complex2.sinh();
      complex3.getReal();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(3478.4796);
      complex1.getArgument();
      Complex complex2 = complex1.NaN.sinh();
      Object object0 = new Object();
      Complex complex3 = complex1.INF.sinh();
      complex0.equals(object0);
      Complex complex4 = complex1.acos();
      complex4.ZERO.log();
      Complex complex5 = complex0.ZERO.add(Double.NaN);
      complex5.INF.subtract(3478.4796);
      complex2.subtract(complex4);
      Complex complex6 = complex2.cos();
      complex3.reciprocal();
      complex3.toString();
      complex6.subtract(3478.4796);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(995.97811258518);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex0.I.multiply(118);
      complex0.add(complex1);
      Complex complex5 = complex0.conjugate();
      complex5.ONE.multiply(complex0);
      complex2.ONE.acos();
      complex3.INF.toString();
      complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      complex3.add(0.0);
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex1.I.cos();
      complex1.ZERO.acos();
      complex3.I.toString();
      complex1.getImaginary();
      complex0.subtract(complex3);
      Complex complex4 = complex0.subtract((-3132.4216064442));
      complex4.hashCode();
      complex2.ONE.multiply((-226.06763787722));
      complex4.toString();
      Complex complex5 = complex3.reciprocal();
      complex4.ZERO.abs();
      complex2.atan();
      complex1.getImaginary();
      complex4.divide((-1333.2));
      Complex complex6 = Complex.valueOf((-226.06763787722), (-226.06763787722));
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.NaN.acos();
      Complex.valueOf(-0.0);
      complex4.asin();
      complex5.log();
      complex8.abs();
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      complex2.cosh();
      complex0.I.asin();
      complex0.getArgument();
      Complex complex3 = complex1.I.negate();
      complex3.asin();
      complex0.isNaN();
      complex0.ONE.divide(0.7853981633974483);
      Complex complex4 = complex0.sqrt();
      complex4.NaN.reciprocal();
      complex0.getField();
      Complex.valueOf((-464.4703237376), 3072.016);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1417.89);
      complex0.ZERO.sin();
      Complex.valueOf(1417.89, 1417.89);
      Complex complex1 = complex0.INF.sin();
      complex1.ONE.getField();
      complex1.INF.getField();
      Complex complex2 = Complex.valueOf(1417.89, 1417.89);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      complex4.NaN.sin();
      Complex complex5 = complex0.exp();
      complex4.ZERO.conjugate();
      complex3.createComplex((-2943.20558551), (-2943.20558551));
      complex4.INF.getArgument();
      Complex complex6 = complex4.sqrt1z();
      complex6.ZERO.cosh();
      complex6.reciprocal();
      Complex complex7 = complex5.log();
      Complex complex8 = complex7.NaN.multiply((-1046));
      complex7.ZERO.pow(6.283185307179586);
      complex8.ZERO.multiply(complex4);
      complex7.INF.divide(1.568413405104933E58);
      complex5.readResolve();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.ONE.pow(complex0);
      Complex complex2 = Complex.valueOf(0.37304413318634033, 973.8265928726);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.I.tanh();
      complex4.INF.nthRoot(666);
      complex0.INF.subtract(complex3);
      complex0.toString();
      Complex complex5 = Complex.valueOf(2.6338455225993276E-166);
      complex5.nthRoot(17);
      Complex complex6 = complex5.conjugate();
      complex6.I.getField();
      Complex complex7 = Complex.valueOf(0.0, (-8.436135220472006E-9));
      complex2.sin();
      complex0.getImaginary();
      complex7.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      complex0.ZERO.multiply(0.0);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex1.NaN.divide(complex2);
      Complex complex5 = complex4.I.asin();
      complex2.NaN.pow(3720.6);
      Complex complex6 = complex0.conjugate();
      complex6.NaN.getArgument();
      complex3.toString();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex3.reciprocal();
      complex8.pow(complex3);
      Complex complex9 = complex2.multiply(0);
      complex9.negate();
      complex4.sinh();
      complex4.abs();
      Complex.valueOf((double) 0);
      Complex complex10 = complex7.negate();
      complex10.subtract((-648.9779650213203));
      complex5.log();
      complex10.pow(complex8);
      Complex complex11 = complex10.conjugate();
      complex10.add(complex11);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2468.61763), (-2468.61763));
      Complex complex1 = complex0.ONE.sin();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex1.ZERO.pow((-2534.019967));
      Complex complex6 = complex5.ZERO.sin();
      complex6.ONE.hashCode();
      complex0.getReal();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.INF.sin();
      complex3.getReal();
      Complex complex9 = complex1.log();
      Complex complex10 = complex7.reciprocal();
      complex7.add(0.0);
      complex8.sinh();
      complex0.multiply(2478);
      complex4.add(complex9);
      complex10.sin();
      complex1.getImaginary();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1118.1459005488944);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.I.tan();
      complex3.divide(complex1);
      complex2.INF.abs();
      Complex complex4 = complex0.exp();
      complex4.ZERO.asin();
      complex0.ZERO.createComplex((-493.14015217014), 563.25);
      complex2.divide(425.6092);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(755.504108157233, 6.283185307179586);
      Complex complex1 = Complex.ONE;
      complex1.ONE.sinh();
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.abs();
      complex1.hashCode();
      complex2.readResolve();
      Complex complex3 = complex2.exp();
      complex2.I.readResolve();
      complex3.I.getField();
      Complex complex4 = complex1.ONE.exp();
      complex3.getArgument();
      Complex complex5 = complex2.add(complex3);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex5.INF.add(755.504108157233);
      Complex complex8 = complex7.cos();
      complex2.getReal();
      Complex complex9 = complex6.exp();
      complex9.ONE.abs();
      Complex complex10 = complex6.INF.tan();
      complex9.ONE.getField();
      complex1.isInfinite();
      complex7.equals(complex4);
      complex6.abs();
      complex8.subtract(0.7853981633974483);
      Complex complex11 = complex1.sqrt1z();
      complex10.readResolve();
      complex11.toString();
      complex8.sinh();
      complex0.nthRoot(486);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-506.99746));
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(671.0, 2.0);
      complex0.equals((Object) null);
      complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = Complex.valueOf(2.0, 671.0);
      complex4.ONE.subtract(2.0);
      boolean boolean0 = complex3.isInfinite();
      assertTrue(boolean0);
      
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.ONE.atan();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex.valueOf(0.0, 2.0);
      Complex complex9 = complex4.cosh();
      assertEquals(1.149548905166106, complex9.getReal(), 0.01);
      
      Complex complex10 = complex2.NaN.atan();
      complex1.readResolve();
      complex6.getReal();
      Complex complex11 = complex2.cos();
      assertEquals(1.5430806348152437, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex.valueOf(2.0, 6.283185307179586);
      Complex complex12 = complex0.pow(671.0);
      assertTrue(complex12.equals((Object)complex3));
      
      double double0 = complex6.abs();
      assertEquals(671.0029806193113, double0, 0.01);
      
      complex2.getField();
      complex10.conjugate();
      assertTrue(complex10.equals((Object)complex5));
      
      Complex complex13 = complex6.tan();
      Complex complex14 = complex13.sqrt1z();
      assertFalse(complex13.equals((Object)complex2));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(1.4142135623730951, complex14.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ZERO.tanh();
      complex4.NaN.multiply(complex0);
      complex2.getImaginary();
      Complex complex5 = complex1.sin();
      complex5.ZERO.nthRoot(1021);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
