/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:57:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.930090525905761E-8);
      Complex complex1 = complex0.divide(4690.0353695161);
      complex1.I.conjugate();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.ZERO.log();
      complex3.ONE.asin();
      Complex complex4 = Complex.valueOf(2.930090525905761E-8, 2.930090525905761E-8);
      complex0.asin();
      Complex complex5 = complex0.atan();
      complex5.subtract(complex4);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1226.0, (-20.0));
      Complex complex1 = complex0.tan();
      complex1.pow((-7519350.336373421));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(830.642, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      Complex complex2 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((double) 1391, (-3438.42));
      Complex complex1 = Complex.valueOf((-3438.42));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(1.1479863663699871E296);
      complex1.asin();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(119.0, 119.0);
      Complex complex1 = complex0.subtract(2016.1391);
      Complex complex2 = complex0.createComplex(119.0, 2.7190020372374008E-8);
      complex1.readResolve();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.I.sinh();
      complex5.INF.nthRoot(1241);
      Complex.valueOf(0.5640701055526733);
      Complex complex6 = complex2.add(2.7190020372374008E-8);
      Complex complex7 = Complex.valueOf(1423.282019087664, 1423.282019087664);
      Complex complex8 = complex7.ZERO.multiply(complex0);
      complex8.cos();
      complex7.NaN.sqrt();
      Complex complex9 = complex1.tanh();
      complex9.INF.acos();
      Complex complex10 = complex2.sinh();
      complex1.NaN.nthRoot(1357);
      Complex complex11 = complex1.sqrt();
      complex6.pow(complex0);
      Complex complex12 = complex2.divide(complex11);
      complex12.divide(119.0);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1541756557557508E254);
      Complex complex1 = complex0.multiply(5.004471289207738);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(5.004471289207738);
      complex3.ONE.abs();
      complex3.readResolve();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.exp();
      complex5.ZERO.getField();
      Complex complex7 = complex0.sqrt1z();
      complex0.subtract(complex6);
      Complex complex8 = complex7.NaN.tanh();
      complex8.ZERO.atan();
      Complex.valueOf((-703.131), (-798.2190701956565));
      complex7.nthRoot(554);
      complex2.readResolve();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex0.pow(complex7);
      Complex complex11 = complex10.ZERO.divide(complex2);
      Complex complex12 = complex1.exp();
      complex12.NaN.sinh();
      complex9.subtract(complex10);
      complex0.add(1666.861084062065);
      complex11.subtract(complex4);
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.INF.toString();
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(637.34, Double.NaN);
      complex0.ZERO.cos();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-104.35994156484), (-104.35994156484));
      Complex complex1 = complex0.multiply(Integer.MAX_VALUE);
      complex1.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.add((-1110.21991985286));
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex3.ONE.multiply((-1110.21991985286));
      complex4.ZERO.asin();
      Complex complex5 = complex4.I.createComplex((-1110.21991985286), (-1110.21991985286));
      complex5.divide(complex2);
      complex3.I.getArgument();
      Complex complex6 = complex0.I.pow((-1110.21991985286));
      Complex complex7 = complex0.I.reciprocal();
      Complex complex8 = complex7.ZERO.createComplex((-1110.21991985286), (-1110.21991985286));
      Complex complex9 = Complex.valueOf((-1110.21991985286));
      complex0.getField();
      complex9.cosh();
      complex6.add(complex9);
      complex7.multiply(1514);
      Complex complex10 = complex6.cos();
      Complex complex11 = complex10.I.exp();
      complex11.NaN.subtract(complex3);
      complex10.I.tan();
      complex8.atan();
      Complex complex12 = Complex.valueOf(1.5707963267948966, (double) 1514);
      try { 
        complex12.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1898.4966834973172), (-1898.4966834973172));
      complex0.ONE.createComplex((-1898.4966834973172), Double.POSITIVE_INFINITY);
      complex0.nthRoot(1519);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4674011002723395), (-1.4674011002723395));
      Complex complex1 = complex0.NaN.add((-1.4674011002723395));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.multiply((-1.4674011002723395));
      Complex complex4 = complex1.INF.divide(complex2);
      complex0.ZERO.getField();
      complex1.I.pow(complex0);
      Complex complex5 = new Complex((-1.4674011002723395));
      Complex complex6 = complex5.I.pow(complex2);
      Complex complex7 = complex1.negate();
      Complex complex8 = Complex.valueOf((-2446.23607486781));
      complex2.INF.multiply(complex3);
      complex5.getField();
      Complex complex9 = Complex.valueOf((-1.4674011002723395), (-1.4674011002723395));
      complex7.pow(complex0);
      Complex complex10 = complex9.atan();
      complex2.NaN.getArgument();
      Complex complex11 = complex9.INF.pow((-2446.23607486781));
      Complex complex12 = complex11.I.sqrt();
      complex6.reciprocal();
      complex4.acos();
      complex6.tan();
      complex10.sqrt1z();
      complex8.cos();
      try { 
        complex12.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      complex0.asin();
      complex1.asin();
      Complex.valueOf((-2278.0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3715.56157), (-3715.56157));
      complex0.tanh();
      Complex complex1 = Complex.valueOf((-1082.7956004915206));
      complex1.tan();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = Complex.valueOf((-20.0), (-505.8154485737));
      complex1.tanh();
      Complex complex2 = Complex.valueOf((-2689.708353766982), (-716.35));
      complex2.multiply((-505.8154485737));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.INF.pow((-6.113203624663034E-8));
      complex0.I.pow(complex1);
      Complex complex2 = Complex.valueOf(1576.400580021054, 1576.400580021054);
      Complex complex3 = complex2.tanh();
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4674011002723395), (-1.4674011002723395));
      Complex complex1 = complex0.NaN.add((-1.4674011002723395));
      Complex complex2 = Complex.INF;
      complex0.multiply((-1.4674011002723395));
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.divide(complex3);
      complex2.getField();
      Complex complex5 = complex4.pow(complex2);
      complex4.tan();
      Complex complex6 = complex1.pow(complex0);
      complex5.negate();
      Complex.valueOf((-2446.23607486781));
      Complex complex7 = Complex.valueOf((-2446.23607486781), (-2835.7059));
      complex5.multiply(complex6);
      Complex complex8 = new Complex((-2321.477512861));
      complex8.getField();
      complex3.reciprocal();
      complex6.nthRoot(2444);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      complex2.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-6.736873974532501E-8), (-1442.78412));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.add((-1744.7785776));
      complex1.ZERO.createComplex((-1442.78412), (-1442.78412));
      Complex complex3 = complex0.ZERO.pow(complex1);
      complex3.INF.cos();
      complex0.tanh();
      complex1.readResolve();
      Complex complex4 = complex2.sqrt1z();
      complex4.getArgument();
      complex2.log();
      complex2.pow(complex4);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.NaN.conjugate();
      complex5.multiply(complex0);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-5280804.0));
      Complex complex1 = complex0.sqrt1z();
      complex0.ONE.tan();
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.tanh();
      Complex complex3 = complex2.NaN.reciprocal();
      complex2.I.sin();
      complex3.I.acos();
      complex1.sqrt();
      Complex complex4 = complex2.sqrt1z();
      complex2.ZERO.nthRoot(415);
      complex2.INF.hashCode();
      Complex complex5 = complex0.pow(complex4);
      Complex.valueOf((-5280804.0), (-5280804.0));
      complex3.ONE.readResolve();
      complex3.NaN.sqrt();
      complex2.atan();
      complex0.divide(complex5);
      complex2.getField();
      complex3.sqrt1z();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.acos();
      complex0.abs();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.reciprocal();
      complex4.abs();
      complex3.hashCode();
      Complex complex5 = complex3.conjugate();
      complex5.tan();
      complex0.abs();
      complex0.readResolve();
      complex4.sqrt();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex2.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex4.asin();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2446.23607486781), 20.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.I;
      complex1.nthRoot(3417);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1.557407724654902);
      complex0.sqrt();
      Complex complex1 = complex0.multiply((-1162));
      complex1.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.cos();
      complex3.I.exp();
      Complex complex4 = Complex.I;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.I;
      complex1.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.multiply((-2285));
      Complex complex2 = complex1.tanh();
      complex2.acos();
      Complex complex3 = Complex.I;
      complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex.valueOf(717.4771566559414, 362.129);
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.add(6.283185307179586);
      Complex complex2 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex3 = complex2.I.asin();
      complex3.NaN.asin();
      complex3.I.asin();
      complex3.NaN.acos();
      Complex.valueOf((double) (-2285), 2.8926683313922764E-176);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      complex0.isNaN();
      complex1.isInfinite();
      complex0.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.I;
      Complex complex5 = (Complex)complex4.readResolve();
      complex3.equals(complex5);
      complex3.reciprocal();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-3318.0672128462884), (-3318.0672128462884));
      Complex complex1 = complex0.multiply((-3318.0672128462884));
      Complex complex2 = complex1.INF.sqrt();
      complex1.I.pow((-1209.60302));
      Complex complex3 = complex1.createComplex((-1038.10031350407), 247.0);
      Complex complex4 = complex3.NaN.subtract(complex2);
      complex4.ONE.subtract((-3318.0672128462884));
      Complex complex5 = complex2.sin();
      complex5.INF.conjugate();
      complex0.createComplex((-1038.10031350407), 247.0);
      Complex complex6 = complex1.tan();
      complex6.reciprocal();
      Complex.valueOf((-1209.60302), 2043.1484499);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.I.subtract(complex0);
      complex0.sin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.nthRoot(2047);
      complex1.nthRoot(1);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.atan();
      complex3.getImaginary();
      complex2.multiply(complex3);
      complex4.atan();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 408.31234297627;
      Complex complex1 = Complex.valueOf(0.35060185194015503, 1920.060130011);
      Complex complex2 = complex0.divide(408.31234297627);
      complex2.getReal();
      complex1.readResolve();
      complex0.nthRoot(1);
      Complex complex3 = Complex.ZERO;
      complex2.nthRoot(1);
      Complex complex4 = complex2.exp();
      complex1.cosh();
      complex0.add(complex2);
      Complex complex5 = Complex.valueOf(1.4894955158233643, (double) 1);
      Complex complex6 = new Complex(1.9040305543598585E-6);
      complex4.cosh();
      Complex complex7 = new Complex(1.4894955158233643);
      try { 
        complex5.nthRoot((-387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -387
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1387.44113216, 1387.44113216);
      complex1.reciprocal();
      complex1.multiply((-5007));
      Complex complex2 = Complex.valueOf(845.635997, (double) (-5007));
      complex2.getField();
      Complex.valueOf(1387.44113216);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply((-2278));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.acos();
      complex2.abs();
      Complex complex5 = complex4.sqrt1z();
      complex3.reciprocal();
      complex5.abs();
      complex2.isInfinite();
      complex4.hashCode();
      Complex complex6 = new Complex(159698.30843124198, (-2278));
      complex6.tan();
      complex2.reciprocal();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.exp();
      Complex complex1 = complex0.reciprocal();
      complex1.INF.createComplex((-399.62145642), (-399.62145642));
      Complex complex2 = complex1.negate();
      complex2.ZERO.multiply((-399.62145642));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(37);
      complex0.tanh();
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf((double) 37, 2265.0);
      complex3.nthRoot(2709);
      Complex complex6 = Complex.I;
      complex6.nthRoot(3584);
      complex0.atan();
      complex5.getImaginary();
      complex2.multiply(complex2);
      complex4.atan();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.abs();
      complex0.NaN.abs();
      Complex complex1 = complex0.tanh();
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1657.3), 15.859651655567509);
      Complex complex1 = Complex.valueOf(15.859651655567509, 15.859651655567509);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.subtract(complex1);
      complex0.NaN.getField();
      complex3.ONE.multiply(complex0);
      complex3.ZERO.readResolve();
      Complex complex4 = complex0.ZERO.negate();
      complex0.add(complex1);
      complex3.NaN.nthRoot(3440);
      Complex complex5 = complex0.log();
      complex5.NaN.pow(complex3);
      complex0.add((-1657.3));
      Complex.valueOf((double) 3440);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply((-2285));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.acos();
      complex4.abs();
      complex1.sqrt1z();
      complex3.reciprocal();
      complex2.abs();
      complex3.isInfinite();
      Complex complex5 = Complex.ZERO;
      complex5.hashCode();
      Complex complex6 = complex5.pow(3061.9096547329323);
      Complex complex7 = Complex.INF;
      complex7.conjugate();
      complex5.tan();
      complex6.abs();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(770.0092469699);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.ONE.add(770.0092469699);
      Complex complex5 = complex3.I.tan();
      complex5.asin();
      Complex.valueOf(770.0092469699, (-1.0003835426629215));
      Complex complex6 = complex2.createComplex((-1.0003835426629215), 1408.9517959699);
      complex3.toString();
      Complex complex7 = complex6.pow(complex5);
      Complex complex8 = complex2.divide(959.5708491951277);
      complex6.getReal();
      complex2.readResolve();
      complex7.nthRoot(1);
      Complex complex9 = Complex.I;
      complex9.nthRoot(216);
      complex8.exp();
      Complex complex10 = complex7.cosh();
      Complex complex11 = Complex.INF;
      complex11.add(complex10);
      Complex.valueOf((-8.160628910742724E110), 959.5708491951277);
      Complex complex12 = new Complex(1408.9517959699);
      complex3.cosh();
      complex4.nthRoot(185);
      Complex complex13 = Complex.ONE;
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.exp();
      complex0.reciprocal();
      complex1.nthRoot(2524);
      complex2.nthRoot(1429);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.cosh();
      complex4.add(complex3);
      Complex.valueOf(1.1730463525082348E-7, (-1.5707963267948966));
      Complex complex5 = new Complex(1429);
      Complex complex6 = complex1.cosh();
      // Undeclared exception!
      complex6.nthRoot(1429);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.add(6.283185307179586);
      Complex complex2 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = Complex.valueOf((-20.0), (-20.0));
      complex4.nthRoot(1399);
      complex3.nthRoot(1);
      complex7.exp();
      complex5.atan();
      Complex complex8 = Complex.valueOf((-3123.9143), (double) 1399);
      complex8.getImaginary();
      Complex complex9 = complex1.multiply(complex3);
      Complex complex10 = Complex.valueOf(396.99883);
      complex10.atan();
      complex10.subtract(complex6);
      complex8.tanh();
      complex9.negate();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply((-2285));
      complex1.tanh();
      complex2.acos();
      complex0.multiply((-2285));
      complex2.tanh();
      complex1.acos();
      Complex complex3 = Complex.valueOf(408.31234297627, 6.833842035076675E301);
      try { 
        complex3.nthRoot((-2285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,285
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(956.14, 9.956860681280245E-10);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      complex2.NaN.getField();
      Complex complex3 = complex2.ZERO.divide((-8.194157257980706E-9));
      complex0.equals(complex1);
      complex2.isNaN();
      complex1.INF.add(complex0);
      complex1.nthRoot(1);
      Complex complex4 = complex0.pow(9.956860681280245E-10);
      complex1.nthRoot(1);
      complex3.cosh();
      complex2.add(complex4);
      Complex.valueOf(9.956860681280245E-10, (double) 1);
      Complex complex5 = new Complex(1429);
      complex0.cosh();
      complex0.nthRoot(1);
      Complex complex6 = Complex.ONE;
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply((-2285));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.subtract(1044.82);
      Complex complex5 = complex0.sinh();
      complex3.readResolve();
      Complex complex6 = complex4.sinh();
      Complex complex7 = new Complex(1044.82);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex5.add(complex8);
      Complex complex10 = Complex.valueOf((double) (-2285));
      complex10.getField();
      complex8.tanh();
      complex2.exp();
      complex9.add(complex0);
      complex6.cosh();
      complex3.toString();
      complex5.readResolve();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.isNaN();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.add(complex0);
      complex1.nthRoot(1);
      Complex complex3 = complex0.pow((-2446.23607486781));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.multiply(536);
      Complex complex6 = complex0.cos();
      complex5.toString();
      complex4.isInfinite();
      Complex complex7 = Complex.NaN;
      complex7.readResolve();
      complex2.cos();
      complex5.equals(complex6);
      complex3.reciprocal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(956.14, 9.956860681280245E-10);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      complex1.getField();
      complex2.ZERO.divide((-8.194157257980706E-9));
      Complex complex3 = new Complex(1603.736615152, 956.14);
      complex0.conjugate();
      complex1.asin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.exp();
      complex0.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(1073741824);
      complex0.cos();
      object0.toString();
      complex2.isInfinite();
      Object object1 = new Object();
      complex1.cos();
      Complex complex4 = Complex.NaN;
      object0.equals(complex4);
      complex4.reciprocal();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.NaN.divide((-1.0));
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.subtract(874.6219);
      Complex complex4 = complex0.sinh();
      complex3.I.readResolve();
      Complex complex5 = complex3.ZERO.sinh();
      Complex complex6 = new Complex((-1030.0));
      Complex complex7 = complex3.ZERO.add(complex6);
      complex7.ONE.getField();
      complex4.I.tanh();
      complex2.exp();
      complex1.add(complex2);
      complex3.cosh();
      complex5.toString();
      complex0.readResolve();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3214.521586);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.ONE.subtract(complex1);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex0.cosh();
      complex6.INF.getArgument();
      Complex complex7 = complex6.add(3214.521586);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex9.I.negate();
      complex10.ZERO.tan();
      complex1.nthRoot(1171);
      complex9.nthRoot(647);
      complex7.exp();
      complex10.atan();
      complex3.getImaginary();
      complex8.multiply(complex5);
      complex3.atan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.I.pow(6.283185307179586);
      Complex complex1 = complex0.add(6.283185307179586);
      Complex complex2 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.I.asin();
      complex3.NaN.acos();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.subtract(6.283185307179586);
      Complex complex7 = complex6.sinh();
      complex3.readResolve();
      complex4.sinh();
      Complex complex8 = new Complex((-1902.66611477339));
      complex4.add(complex0);
      complex5.getField();
      complex6.tanh();
      complex1.subtract(1.3608995799112174E108);
      Complex complex9 = Complex.valueOf(1.3608995799112174E108, (-1244.0));
      Complex complex10 = complex9.subtract(1848.2594002);
      complex3.log();
      complex10.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.INF.hashCode();
      Complex complex1 = complex0.NaN.divide((-1.0));
      Complex complex2 = (Complex)complex0.NaN.readResolve();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex0.subtract((-1.0));
      Complex complex4 = complex2.sinh();
      Complex complex5 = new Complex(0.0);
      complex5.readResolve();
      Complex complex6 = complex4.sinh();
      Complex complex7 = new Complex((-1.0));
      complex6.add(complex0);
      complex3.getField();
      complex0.tanh();
      complex0.subtract(0.005694466574758485);
      complex1.subtract((-2.863180390093667E-9));
      complex0.log();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-2446.23607486781));
      Complex complex1 = complex0.conjugate();
      complex1.ONE.asin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3214.521586);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.INF.multiply(complex2);
      complex5.INF.tanh();
      Complex complex6 = complex0.cosh();
      complex6.INF.getArgument();
      complex6.add(3214.521586);
      Complex.valueOf(3214.521586, 0.7853981633974483);
      Complex complex7 = complex6.exp();
      complex7.I.negate();
      complex3.getReal();
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sqrt();
      complex2.ZERO.log();
      Complex complex3 = complex2.reciprocal();
      complex1.I.sinh();
      complex2.NaN.sqrt1z();
      Complex complex4 = complex0.divide(complex1);
      complex4.ONE.abs();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.multiply(1.0);
      Complex complex8 = complex4.multiply(complex1);
      complex8.hashCode();
      Complex complex9 = complex6.add(1.0);
      complex0.ZERO.atan();
      Complex complex10 = complex9.sinh();
      complex10.readResolve();
      Complex complex11 = complex10.sinh();
      complex0.getImaginary();
      complex7.ONE.readResolve();
      complex4.pow(1.0);
      Complex complex12 = complex11.add(1.0);
      complex1.I.pow(complex9);
      complex12.ZERO.subtract(complex7);
      Complex complex13 = complex11.negate();
      complex0.getField();
      complex0.tan();
      Complex complex14 = complex0.tanh();
      complex14.isNaN();
      complex13.cos();
      complex0.getField();
      Complex.valueOf(2.0);
      Complex.valueOf(2.0, (-1.1862263158849434E-9));
      complex3.createComplex(2.0, 0.0);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(770.0092469699);
      Complex complex2 = Complex.valueOf(770.0092469699);
      complex0.ONE.readResolve();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.ONE.add(770.0092469699);
      complex3.I.tan();
      complex0.INF.asin();
      Complex.valueOf(770.0092469699, 770.0092469699);
      complex1.ONE.createComplex(770.0092469699, 770.0092469699);
      complex1.ONE.toString();
      Complex complex5 = complex2.INF.pow(complex1);
      complex5.I.divide(770.0092469699);
      complex0.getReal();
      complex0.readResolve();
      complex1.NaN.nthRoot(1);
      complex1.nthRoot(1429);
      Complex complex6 = complex3.exp();
      complex6.ZERO.cosh();
      complex3.add(complex5);
      Complex complex7 = Complex.valueOf(1.0, 1.0);
      complex7.ONE.tan();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.NaN.add((double) 1429);
      complex9.NaN.abs();
      complex5.pow(2.320822576772103E-287);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1828.0));
      Complex complex1 = complex0.ZERO.log();
      complex0.NaN.getArgument();
      complex1.ONE.multiply(complex0);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.INF.acos();
      complex0.abs();
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.valueOf(2.6102792042257208E-23, 1828.0);
      complex1.INF.add(Double.NaN);
      Complex complex6 = complex5.ZERO.sinh();
      complex6.ZERO.multiply(1828.0);
      Complex.valueOf((-7.836327226971707E174), 2.6102792042257208E-23);
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex7.log();
      complex1.divide(complex0);
      complex8.ZERO.asin();
      Complex complex9 = Complex.valueOf(1538.6, (-4.541194749189272E-10));
      Complex complex10 = complex9.INF.add(complex8);
      complex3.divide(complex4);
      complex6.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(956.14, 9.956860681280245E-10);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      complex2.NaN.getField();
      complex2.ZERO.divide((-8.194157257980706E-9));
      complex0.equals(complex1);
      complex2.isNaN();
      Complex complex3 = complex1.INF.add(complex0);
      complex1.nthRoot(1);
      Complex complex4 = complex0.pow(9.956860681280245E-10);
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex5.cos();
      complex6.toString();
      complex4.isInfinite();
      Object object0 = complex3.readResolve();
      complex3.ONE.cos();
      complex1.equals(object0);
      complex3.reciprocal();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(6471);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.add((double) 6471);
      complex3.INF.abs();
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex2.I.sinh();
      complex6.toString();
      Complex complex8 = complex5.add(complex3);
      complex8.ONE.add(Double.POSITIVE_INFINITY);
      complex5.I.atan();
      Complex complex9 = complex0.subtract(complex2);
      complex3.multiply((double) 6471);
      Complex complex10 = complex1.divide(complex8);
      complex8.multiply(1);
      complex10.abs();
      complex9.equals(complex7);
      complex8.exp();
      complex2.hashCode();
      complex8.getImaginary();
      Complex complex11 = complex1.cos();
      complex11.sqrt1z();
      complex4.tanh();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(351.2153);
      Complex complex1 = complex0.exp();
      complex1.NaN.atan();
      Complex complex2 = complex0.atan();
      complex2.INF.add(351.2153);
      Complex complex3 = complex2.ZERO.divide(1543.3);
      complex3.sqrt1z();
      Complex complex4 = complex0.multiply(1);
      complex4.hashCode();
      complex4.subtract(complex3);
      complex1.subtract(1543.3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      complex0.INF.hashCode();
      complex0.NaN.divide((-1.0));
      complex0.NaN.readResolve();
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.subtract(874.6219);
      Complex complex2 = complex0.sinh();
      complex1.I.readResolve();
      complex1.ZERO.sinh();
      Complex complex3 = new Complex((-1030.0));
      Complex complex4 = complex1.ZERO.add(complex3);
      complex4.ONE.getField();
      complex2.I.tanh();
      complex1.subtract((-2.863180390093667E-9));
      Complex complex5 = complex0.subtract((-2.863180390093667E-9));
      complex5.ZERO.log();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-1.6059226011778748E112), (-1.6059226011778748E112));
      complex3.I.readResolve();
      complex3.ZERO.reciprocal();
      complex3.INF.getField();
      Complex complex4 = complex0.INF.divide((-1.6059226011778748E112));
      Complex complex5 = Complex.valueOf((-99.4), 6.283185307179586);
      complex5.ONE.nthRoot(1079);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex2.exp();
      complex7.NaN.acos();
      Complex complex8 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex9 = complex0.ONE.divide(complex8);
      complex1.isNaN();
      complex9.I.multiply((-0.010714690733195933));
      complex2.isInfinite();
      complex8.sinh();
      complex9.ZERO.readResolve();
      complex0.hashCode();
      complex9.getArgument();
      complex9.atan();
      Complex complex10 = Complex.valueOf((-0.010714690733195933));
      complex10.ONE.getArgument();
      Complex complex11 = complex4.exp();
      complex6.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1556.2, 0.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.hashCode();
      Complex complex3 = complex1.cosh();
      complex0.multiply(2743);
      complex2.hashCode();
      Complex complex4 = complex3.multiply(2743);
      complex1.readResolve();
      complex0.abs();
      complex1.acos();
      complex4.ONE.nthRoot(2743);
      complex2.isNaN();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.atan();
      Complex complex7 = Complex.valueOf(1556.2);
      complex6.ONE.toString();
      complex7.NaN.sqrt();
      complex6.I.hashCode();
      complex5.multiply(1239);
      Complex complex8 = Complex.valueOf(1556.2, 0.0);
      complex3.divide(complex0);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.pow(complex9);
      complex0.getField();
      complex10.subtract(complex0);
      complex7.pow((-2340.492677));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      complex1.add(complex0);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.atan();
      double double0 = 613.758;
      complex1.I.asin();
      Complex complex4 = complex3.subtract(613.758);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.INF.subtract(complex0);
      complex1.I.toString();
      Complex complex7 = complex4.ZERO.add((-231.6466284856));
      complex7.ZERO.divide(complex2);
      complex7.ZERO.pow(complex6);
      complex7.I.sqrt();
      complex4.isNaN();
      Complex complex8 = complex4.NaN.multiply(complex2);
      complex8.multiply((-3213.79603));
      Complex complex9 = complex0.divide(complex4);
      complex9.acos();
      Complex complex10 = complex9.subtract(445.20194288);
      complex10.I.sqrt();
      Complex complex11 = complex0.INF.sqrt1z();
      complex11.ONE.sqrt1z();
      complex10.ZERO.multiply((-4495));
      complex5.sin();
      complex0.reciprocal();
      try { 
        complex9.nthRoot((-4495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,495
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(155.1);
      Complex complex1 = complex0.asin();
      complex1.NaN.toString();
      complex0.I.pow(complex1);
      Complex complex2 = complex0.sinh();
      complex2.NaN.conjugate();
      Complex complex3 = complex2.ONE.createComplex((-4339.9118708), 0.0);
      complex2.I.divide(155.1);
      complex2.multiply(complex0);
      complex0.ONE.pow(0.0);
      complex2.hashCode();
      complex1.getReal();
      complex3.getField();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex2 = complex1.I.subtract(1.0);
      complex2.I.toString();
      Complex complex3 = complex0.subtract(complex1);
      complex1.NaN.negate();
      Complex complex4 = complex3.INF.subtract(complex0);
      complex0.ONE.createComplex((-126.2), 0.0);
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = complex0.add(complex5);
      complex5.NaN.tan();
      Complex complex7 = complex6.I.sqrt1z();
      complex7.ZERO.divide(2311.0);
      Complex complex8 = complex1.log();
      Complex complex9 = Complex.valueOf(2.0);
      complex4.ONE.readResolve();
      Complex complex10 = complex8.pow(0.0);
      complex7.multiply(2.0);
      Complex complex11 = complex4.subtract(0.0);
      complex10.readResolve();
      Complex complex12 = complex5.sinh();
      complex12.I.exp();
      complex11.asin();
      complex9.createComplex(2311.0, 2.0);
      complex8.isNaN();
      complex6.pow((-1822.3438285618518));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.divide(complex0);
      complex4.asin();
      Complex complex6 = complex2.divide(complex1);
      complex6.NaN.abs();
      complex1.sqrt1z();
      Complex complex7 = complex0.reciprocal();
      complex7.NaN.abs();
      complex2.isInfinite();
      complex4.ONE.hashCode();
      complex5.pow((-413.0));
      complex4.conjugate();
      complex0.tan();
      complex2.abs();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double double0 = 3214.521586;
      Complex complex0 = Complex.valueOf(3214.521586);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.ONE.subtract(complex1);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.INF.multiply(complex2);
      complex4.INF.tanh();
      Complex complex5 = complex0.cosh();
      complex5.INF.getArgument();
      Complex complex6 = complex5.add(3214.521586);
      complex6.ZERO.cosh();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.I.negate();
      double double1 = (-1.0);
      complex8.ZERO.tan();
      try { 
        complex8.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex1.acos();
      complex0.getImaginary();
      Complex complex2 = complex0.createComplex((-5.78), 0.0);
      complex2.atan();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.sin();
      complex2.I.readResolve();
      complex0.INF.atan();
      Complex.valueOf(Double.NaN, (-782.249997137878));
      Complex.valueOf(2.0, (-782.249997137878));
      complex0.ONE.getArgument();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex1.multiply(complex0);
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.INF.divide(complex0);
      complex5.INF.abs();
      complex0.isInfinite();
      complex3.multiply(1476);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.ONE.add(complex1);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex3.ZERO.subtract(complex4);
      complex5.ZERO.createComplex((-791.612184), 0.0);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ONE.createComplex(0.0, (-1726.98));
      Complex complex7 = complex0.tan();
      complex7.pow(complex2);
      complex7.subtract(0.0);
      complex3.subtract(complex0);
      complex3.tan();
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex1.I.createComplex(0.0, 1.3655037879943848);
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.sin();
      Complex complex3 = complex0.I.add(2899.542016642);
      Complex complex4 = complex0.ONE.cos();
      complex4.NaN.multiply(complex2);
      Complex complex5 = complex0.ONE.subtract((-215.726));
      complex5.ONE.getArgument();
      complex1.getArgument();
      Complex complex6 = new Complex(0.0, (-20.0));
      complex0.INF.divide(complex6);
      complex1.reciprocal();
      complex0.reciprocal();
      Complex complex7 = complex1.divide(complex4);
      complex7.NaN.getArgument();
      complex3.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.log();
      complex2.INF.tan();
      Complex complex3 = complex1.sqrt1z();
      complex2.INF.abs();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.NaN.cos();
      complex2.acos();
      Complex complex6 = complex2.subtract(complex4);
      Complex complex7 = complex6.I.sin();
      complex3.cosh();
      Complex complex8 = complex2.acos();
      complex3.equals(complex0);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex9.INF.subtract(complex5);
      Complex complex11 = complex3.pow(complex0);
      complex11.ONE.createComplex(535.5223529, (-861.8382697));
      Complex complex12 = complex2.sinh();
      complex0.ZERO.pow(complex12);
      Complex complex13 = complex12.divide((-1066.15));
      Complex complex14 = complex13.pow(complex9);
      complex14.NaN.reciprocal();
      complex7.abs();
      Complex complex15 = complex3.asin();
      complex10.subtract(complex8);
      complex15.tanh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(1.2516618713553432E300, (-159.9));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.I.pow(complex0);
      complex0.getImaginary();
      Complex.valueOf(1.2516618713553432E300, 1.2516618713553432E300);
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex4.INF.tan();
      complex5.ZERO.multiply(complex2);
      complex0.NaN.hashCode();
      Complex complex6 = complex1.I.multiply(870);
      complex1.isInfinite();
      complex1.getImaginary();
      complex1.isNaN();
      Complex complex7 = complex0.sinh();
      complex7.INF.divide(complex6);
      complex1.tan();
      complex0.abs();
      complex5.I.tanh();
      Complex complex8 = complex1.pow(complex7);
      complex5.negate();
      complex3.add(complex8);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.add(complex1);
      Complex complex2 = complex0.conjugate();
      complex2.createComplex(0.0, 832.2242450958);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex1.divide(complex3);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(9.916187343252014E175);
      complex0.readResolve();
      Complex complex1 = complex0.createComplex(0.0, (-2041.4944314045024));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.multiply(complex1);
      complex2.NaN.asin();
      complex4.INF.createComplex((-2041.4944314045024), 0.0);
      Complex complex5 = complex3.INF.tanh();
      complex5.NaN.subtract((-2041.4944314045024));
      complex2.INF.log();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex6.ZERO.sqrt1z();
      complex1.tanh();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex9.ZERO.tan();
      complex8.subtract(complex6);
      complex7.isNaN();
      Complex complex11 = new Complex((-1557.23423), 0.0);
      complex10.divide(complex11);
      Complex complex12 = Complex.valueOf((-1959.93728806523));
      complex6.equals("94fNOAv;");
      Complex complex13 = complex12.pow(0.0);
      complex10.conjugate();
      complex13.nthRoot(1);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.log();
      complex0.abs();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.pow(complex1);
      complex0.getField();
      complex0.getImaginary();
      Complex complex4 = complex0.add(1.0);
      complex4.cosh();
      complex2.I.readResolve();
      Complex complex5 = complex4.add(complex0);
      complex5.readResolve();
      complex5.NaN.add(0.0);
      complex4.hashCode();
      Complex complex6 = complex0.I.log();
      Complex complex7 = Complex.valueOf(1.0);
      complex2.ZERO.exp();
      complex7.pow(complex2);
      Complex complex8 = complex3.NaN.conjugate();
      Complex complex9 = complex8.INF.exp();
      complex9.NaN.tan();
      Complex complex10 = complex3.divide(1.0);
      complex10.I.readResolve();
      complex7.reciprocal();
      Complex complex11 = complex2.multiply(complex6);
      complex11.INF.sqrt();
      complex11.I.multiply((-250));
      complex3.sqrt1z();
      complex10.subtract(0.0);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      complex1.ZERO.atan();
      Complex complex3 = complex1.ONE.negate();
      complex3.sqrt();
      complex3.ZERO.reciprocal();
      Complex complex4 = complex1.cos();
      complex4.getField();
      Complex complex5 = complex0.add(1181.01045436);
      complex0.tan();
      Complex complex6 = complex0.pow(1181.01045436);
      complex6.INF.cosh();
      complex6.ZERO.getArgument();
      Complex complex7 = complex2.divide(complex5);
      complex1.getImaginary();
      complex5.NaN.nthRoot(314);
      complex7.nthRoot(1);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      double double0 = 2.037139607241041E305;
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.I.createComplex(2.037139607241041E305, 2.037139607241041E305);
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex3.INF.exp();
      complex6.ONE.pow(complex2);
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex0.atan();
      complex8.ZERO.conjugate();
      int int0 = 0;
      complex7.INF.reciprocal();
      complex5.cosh();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.sinh();
      Complex complex1 = complex0.negate();
      complex0.isInfinite();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex1.INF.multiply(complex0);
      Complex complex2 = complex1.ONE.createComplex(6.283185307179586, 6.283185307179586);
      complex0.abs();
      complex1.sinh();
      Complex complex3 = complex0.sqrt1z();
      complex3.I.pow(complex2);
      Complex complex4 = Complex.ZERO;
      complex2.pow(complex4);
      complex0.getArgument();
      complex1.getField();
      try { 
        complex2.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.divide(complex2);
      complex0.ZERO.toString();
      complex0.readResolve();
      complex0.getArgument();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(121.99);
      complex3.ZERO.toString();
      Complex complex4 = complex3.createComplex((-2715.511), 121.99);
      complex4.ZERO.log();
      Complex.valueOf(0.6299605249474366, (-20.0));
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.subtract(Double.NaN);
      complex2.tan();
      complex6.ZERO.exp();
      complex3.isNaN();
      Complex complex7 = complex6.tanh();
      complex7.INF.getField();
      complex7.NaN.abs();
      Complex complex8 = Complex.valueOf((-2512.2));
      Complex complex9 = complex0.subtract(complex8);
      complex9.I.multiply(0);
      complex6.cos();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 0.6170841455459595;
      Complex complex0 = new Complex(0.6170841455459595, 0.0);
      complex0.abs();
      Complex complex1 = null;
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-716.35), 0.0);
      complex1.ONE.asin();
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex1.tan();
      complex3.readResolve();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.add(6.283185307179586);
      Complex complex2 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex3 = complex2.I.asin();
      complex3.I.asin();
      complex3.NaN.acos();
      Complex complex4 = complex0.multiply(complex2);
      complex4.ZERO.multiply((-2285));
      Complex complex5 = complex4.tanh();
      complex5.ZERO.acos();
      Complex complex6 = Complex.valueOf(5.3393125705958075E87, 1044.82);
      complex6.nthRoot(1);
      complex5.ONE.nthRoot(3440);
      Complex complex7 = complex6.exp();
      complex7.atan();
      complex6.getImaginary();
      complex5.multiply(complex1);
      complex4.atan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex.valueOf((-1538.15), Double.NaN);
      Complex.valueOf(0.0, (-1538.15));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.createComplex(1.029901759234897E-7, Double.NaN);
      Complex complex4 = Complex.valueOf(0.0, (-6.437492120743254E-9));
      Complex complex5 = complex4.I.pow(Double.NaN);
      Complex complex6 = complex3.cosh();
      complex3.subtract(1711.584935);
      complex3.ONE.tan();
      complex5.sqrt1z();
      complex6.add(complex0);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-1.395320103272191E-57), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.getField();
      complex2.getReal();
      complex1.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.sinh();
      int int0 = 7;
      complex2.ONE.nthRoot(7);
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex3.NaN.negate();
      complex1.NaN.multiply((-2380));
      complex0.ZERO.asin();
      Complex.valueOf((double) 7);
      complex0.multiply((-1945));
      double double0 = 3.720075801577098E-44;
      Complex.valueOf(3174.37, 3.720075801577098E-44);
      try { 
        complex2.nthRoot((-1945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,945
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      complex1.subtract(complex0);
      complex1.ZERO.exp();
      Complex complex2 = complex1.INF.multiply((-1.0));
      complex1.NaN.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.sinh();
      complex1.NaN.log();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.tan();
      complex5.INF.atan();
      complex4.getArgument();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.divide((-1.0));
      complex3.getReal();
      Complex.valueOf(6.283185307179586);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.INF.pow((-1.0));
      complex4.pow(0.0);
      Complex complex10 = complex3.atan();
      complex10.I.getField();
      complex10.NaN.sqrt();
      complex1.reciprocal();
      complex10.abs();
      Complex complex11 = complex0.subtract(complex6);
      Complex complex12 = complex11.INF.multiply(2.0);
      complex3.divide(0.0);
      complex10.negate();
      Complex complex13 = complex9.cos();
      complex7.subtract((-5429.72245));
      complex13.log();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.exp();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.createComplex((-399.62145642), (-399.62145642));
      Complex complex3 = complex1.negate();
      complex3.ZERO.multiply((-399.62145642));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex2.INF.subtract(0.0);
      complex0.INF.getField();
      Complex complex3 = complex1.NaN.exp();
      complex3.I.sqrt();
      complex1.I.add(complex0);
      Complex complex4 = complex3.I.subtract(complex1);
      complex4.ZERO.add(0.0);
      Complex.valueOf(460.6696515544313);
      complex4.ONE.negate();
      complex0.toString();
      complex0.log();
      try { 
        complex3.nthRoot((-304));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -304
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex0.I.getArgument();
      complex0.getReal();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.subtract((-1559.70735103));
      Complex complex2 = complex1.exp();
      Complex complex3 = new Complex((-201.42240761566555));
      complex0.subtract(complex3);
      complex0.I.hashCode();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex6.ZERO.add(complex3);
      Complex complex8 = complex1.NaN.add(0.0);
      complex7.I.getField();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex9.I.sqrt();
      List<Complex> list0 = complex12.NaN.nthRoot(308);
      assertTrue(list0.contains(complex10));
      assertEquals(0.7071067811865475, complex12.getImaginary(), 0.01);
      
      complex7.getReal();
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex9.createComplex((-201.42240761566555), (-1559.70735103));
      Complex complex15 = complex5.sinh();
      Complex complex16 = complex15.NaN.sqrt();
      Complex complex17 = Complex.valueOf(0.0, (-777.631271));
      Complex complex18 = complex16.INF.subtract(complex17);
      Complex complex19 = complex18.ONE.multiply((-673.0));
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      
      complex0.abs();
      complex13.subtract(complex1);
      Complex complex20 = complex7.conjugate();
      assertSame(complex6, complex8);
      
      complex14.cosh();
      Complex complex21 = complex3.tanh();
      assertTrue(complex3.equals((Object)complex20));
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals((-1.0), complex21.getReal(), 0.01);
      
      complex2.sin();
      assertTrue(complex2.equals((Object)complex18));
      
      Complex complex22 = complex13.tan();
      assertSame(complex22, complex15);
      assertSame(complex22, complex11);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex(12.67215252, 526.553);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ZERO.subtract((-1036.223324));
      Complex complex4 = new Complex(0.0, (-1.0));
      Complex complex5 = complex0.INF.multiply(complex4);
      Complex complex6 = complex0.asin();
      assertEquals(6.959789580147525, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex0.pow(1401.7615205);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex9.I.log();
      assertSame(complex9, complex2);
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      complex7.conjugate();
      assertEquals(1.0, complex7.getReal(), 0.01);
      
      Object object0 = complex5.readResolve();
      assertTrue(object0.equals((Object)complex8));
      
      double double0 = complex3.getReal();
      assertEquals(1036.223324, double0, 0.01);
  }
}
