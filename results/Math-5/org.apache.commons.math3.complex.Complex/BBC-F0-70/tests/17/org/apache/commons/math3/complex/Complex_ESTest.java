/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:52:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.00000002461168, Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      complex0.nthRoot(1187);
      complex1.multiply((double) 1187);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2.7813027425289027E-8);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex0.ZERO.negate();
      complex0.getField();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.negate();
      complex7.I.pow(239.3);
      complex0.I.subtract(complex2);
      Complex complex8 = complex1.createComplex(Double.NaN, 6.372298757235201E212);
      Complex complex9 = Complex.valueOf((-857.97066190297));
      complex8.ONE.multiply(complex9);
      complex5.createComplex(0.9126365759632116, 1461.1);
      Complex complex10 = complex4.add(complex0);
      complex1.add(complex3);
      complex3.sqrt();
      complex6.getField();
      complex8.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1064934E7), 20.0);
      complex0.I.pow(0.7615941559557649);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-373.13716658322));
      complex0.ONE.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.tanh();
      complex2.I.negate();
      complex2.hashCode();
      complex1.NaN.divide(complex2);
      complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.valueOf(1.0, (-373.13716658322));
      complex0.multiply(complex1);
      Complex complex6 = complex4.ONE.multiply(complex1);
      complex0.pow((-373.13716658322));
      complex4.reciprocal();
      complex1.I.log();
      complex0.log();
      Complex complex7 = complex5.tanh();
      complex6.sqrt1z();
      complex7.log();
      Complex.valueOf((-739.86796), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.8829871423339434E201);
      Complex complex2 = Complex.valueOf((-1.1064934E7), 2.8829871423339434E201);
      complex2.asin();
      Complex complex3 = new Complex(2899.311029538491, 2.8829871423339434E201);
      complex3.nthRoot(272);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = new Complex((-189.05060722815787), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.tan();
      complex1.INF.hashCode();
      complex0.abs();
      Complex complex2 = Complex.valueOf(90398.68389820692, 20.0);
      complex2.I.hashCode();
      complex2.I.readResolve();
      complex2.exp();
      Complex complex3 = complex1.divide(90398.68389820692);
      Complex complex4 = complex3.ONE.pow(2794.045);
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.divide(847.2);
      Complex complex7 = complex0.log();
      Complex complex8 = complex1.log();
      complex8.ONE.tan();
      complex6.pow(complex0);
      complex7.add(90398.68389820692);
      complex4.multiply(90398.68389820692);
      complex5.asin();
      complex1.divide(1903.48328982473);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex((-1.1064933960617485E7));
      complex2.asin();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.subtract(Double.NaN);
      complex2.getReal();
      complex0.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0, (-842.7010083));
      Complex complex4 = Complex.INF;
      complex3.pow(complex4);
      complex0.multiply((-842.7010083));
      Complex complex5 = new Complex((-2133.9403), Double.NaN);
      complex1.tanh();
      complex2.tan();
      Complex complex6 = Complex.ZERO;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1461.1));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.asin();
      complex3.NaN.negate();
      Complex complex4 = complex0.ONE.subtract((-1461.1));
      Complex complex5 = Complex.valueOf((-1461.1), (-238.0));
      Complex complex6 = complex4.NaN.createComplex((-1461.1), 2.0);
      complex2.cosh();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.INF.divide((-0.22101690190093917));
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = complex7.ZERO.tan();
      complex1.toString();
      Complex complex11 = complex4.tan();
      complex6.ONE.tan();
      complex11.NaN.nthRoot(237);
      complex4.createComplex((-2736.75073895674), (-2736.75073895674));
      complex0.add((-1544.328932017025));
      complex7.I.asin();
      Complex complex12 = complex6.pow((-2003.346056));
      complex12.ONE.add((-2003.346056));
      complex10.conjugate();
      complex9.sinh();
      complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-670.98));
      Complex complex1 = new Complex((-70644.37389083563), Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex2 = Complex.ZERO;
      Complex.valueOf(1363.8607601856);
      Complex complex3 = new Complex((-1.1064933960617485E7));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1.0;
      Complex complex1 = Complex.valueOf(1.0);
      complex0.INF.multiply(complex1);
      Complex complex2 = complex1.I.negate();
      Complex.valueOf(1.0);
      complex2.ZERO.toString();
      Complex complex3 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(0.0);
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(2.414213562373095);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-20.0);
      Complex complex0 = Complex.valueOf((-157.0778423797), (-20.0));
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = new Complex((-3.014948687973112));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.9998456174064271);
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = new Complex(0.9998456174064271, 20.02497668559559);
      Complex complex3 = complex0.multiply(300.0);
      Complex complex4 = new Complex(2.3019011105282883E103, (-1.1064933960617485E7));
      Complex complex5 = complex0.tanh();
      complex3.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.multiply(3.0916419577507934);
      Complex complex8 = Complex.INF;
      complex7.ONE.add(complex8);
      complex3.subtract(complex6);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      complex0.getArgument();
      Complex complex1 = new Complex(1771.64);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ONE;
      complex1.isNaN();
      complex2.tan();
      complex0.reciprocal();
      Complex complex4 = Complex.ONE;
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1);
      complex0.tanh();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.ZERO;
      complex0.multiply((double) 1);
      Complex.valueOf((double) 1, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(0.42325701654523984, Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, 0.42325701654523984);
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      complex3.equals("");
      complex0.getArgument();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 0.7853981633974483);
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.I;
      complex8.subtract(complex9);
      complex9.acos();
      complex9.tan();
      complex4.multiply(7);
      complex5.subtract((-363.018298957));
      Complex complex10 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      complex0.getReal();
      Complex complex2 = complex1.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.tanh();
      Complex complex5 = new Complex((-972.474093213), Double.POSITIVE_INFINITY);
      complex2.subtract(complex4);
      Complex complex6 = complex5.multiply(267);
      Complex complex7 = Complex.I;
      complex2.add(complex3);
      complex1.atan();
      Complex complex8 = new Complex(1.0);
      complex6.cos();
      Complex complex9 = new Complex((-258.821));
      complex1.sqrt();
      complex8.tan();
      Complex.valueOf((double) 2489);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9998456174064271, (-20.0));
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex0.divide(complex1);
      complex2.getArgument();
      Complex complex3 = new Complex(2508.48718);
      Complex complex4 = complex1.divide(complex0);
      Object object0 = new Object();
      complex0.equals(")");
      Complex complex5 = complex0.tan();
      complex5.INF.abs();
      Complex complex6 = complex0.reciprocal();
      complex3.tanh();
      Complex complex7 = new Complex(Double.NaN, 1134223.383149725);
      Complex complex8 = complex2.subtract(complex6);
      complex6.multiply(2489);
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.INF;
      complex10.add(complex3);
      complex10.atan();
      Complex complex11 = new Complex(1.6207470226338965);
      complex8.cos();
      Complex complex12 = new Complex(7.374632556282414E-4);
      complex4.sqrt();
      complex10.tan();
      Complex.valueOf(1.570796673021728);
      complex6.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = new Complex((-0.37331228176763576));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      complex3.equals(complex2);
      complex1.getArgument();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.reciprocal();
      complex5.NaN.pow(complex0);
      Complex complex6 = new Complex(0.0, 0.0010474477788775165);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex7.tan();
      complex10.ONE.add(2260.8);
      Complex complex11 = complex2.multiply(7);
      complex11.subtract(633.35888030206);
      Complex complex12 = Complex.ZERO;
      complex11.getImaginary();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1903.48328982473, 1903.48328982473);
      Complex complex1 = complex0.createComplex(1903.48328982473, 1903.48328982473);
      Complex complex2 = complex1.subtract(complex0);
      complex0.tan();
      Complex.valueOf((-19.277528582798624));
      Complex complex3 = new Complex(1903.48328982473, 217.5499);
      complex3.multiply((-794979204));
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-462.07729078876));
      Complex complex1 = complex0.createComplex((-462.07729078876), (-1460.248062283));
      Complex complex2 = complex0.multiply(378);
      complex2.getField();
      complex2.nthRoot(2435);
      complex2.multiply(4714.0);
      complex2.exp();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = Complex.valueOf(3101.311068462, 3.408223442335828);
      complex0.hashCode();
      Complex complex6 = complex1.sin();
      complex5.negate();
      complex2.abs();
      complex4.getArgument();
      Complex complex7 = new Complex(0.3164375305291165);
      Complex complex8 = complex7.divide(complex3);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex9 = complex4.tan();
      complex6.reciprocal();
      complex6.ONE.tanh();
      Complex complex10 = new Complex(2109.67579011063, (-1920.52910328));
      Complex complex11 = complex4.subtract(complex5);
      complex0.multiply(2489);
      Complex complex12 = Complex.I;
      complex6.add(complex11);
      complex0.atan();
      Complex.valueOf(Double.NaN);
      complex8.getField();
      complex9.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.INF.getField();
      Complex complex1 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex2 = complex1.divide(complex0);
      complex2.add(0.9640275800758169);
      complex2.isNaN();
      Complex complex3 = Complex.I;
      complex3.getField();
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.INF;
      complex4.reciprocal();
      Complex complex6 = new Complex((-1151.65179257), 1.557407724654902);
      complex6.I.readResolve();
      Complex.valueOf((-1151.65179257), (-20.0));
      complex0.subtract(complex4);
      Complex complex7 = Complex.I;
      complex5.add(complex0);
      complex1.atan();
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex(1.1004278077575267E-8);
      complex1.sqrt();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getArgument();
      double double0 = (-0.37331228176763576);
      Complex complex1 = new Complex(1.5707963267948966);
      complex1.divide(complex0);
      int int0 = 1065;
      // Undeclared exception!
      complex0.nthRoot(1033973608);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = Complex.NaN;
      complex2.getReal();
      Complex complex3 = complex0.divide(Double.NaN);
      complex3.tan();
      complex1.toString();
      complex1.tan();
      complex1.sinh();
      complex3.abs();
      complex0.multiply(1464.1496);
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.INF.getField();
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.conjugate();
      complex0.equals("xCEUcuBIL<$P?=h");
      complex2.pow(complex1);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex3.ZERO.conjugate();
      complex2.tanh();
      complex3.acos();
      Complex complex4 = complex2.log();
      complex2.multiply(complex4);
      complex0.multiply((-1908));
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex0.pow(complex5);
      Complex complex6 = Complex.NaN;
      complex5.abs();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = new Complex(1.5707963267948966);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.I;
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex3.getArgument();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = new Complex(0.9285714285714286, (-0.37331228176763576));
      Complex complex7 = Complex.ONE;
      complex0.subtract(complex2);
      complex6.tan();
      complex4.multiply(3565);
      Complex complex8 = new Complex(0.9285714285714286, 55.4009293885464);
      complex1.add(complex8);
      complex5.atan();
      complex7.cos();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(468.0, (-1160.0889042));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.I;
      complex1.equals((Object) null);
      complex0.getArgument();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = new Complex((-0.37331228176763576), 1.5707963267948966);
      Complex complex8 = Complex.ONE;
      complex6.subtract(complex3);
      complex5.tan();
      Complex complex9 = complex6.multiply(7);
      Complex complex10 = new Complex(2.0902045062932175E102, 2.0902045062932175E102);
      complex6.add(complex10);
      Complex complex11 = Complex.INF;
      complex11.atan();
      complex3.cos();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3640765.646400833, 0.7615941559557649);
      Complex complex1 = complex0.sin();
      complex1.getArgument();
      complex0.nthRoot(1065);
      complex1.hashCode();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.acos();
      complex1.pow(3640765.646400833);
      Complex complex4 = complex2.divide(2974.03965);
      complex3.atan();
      Complex complex5 = complex2.add((-1189.78419));
      complex4.getArgument();
      Complex complex6 = complex5.sin();
      complex6.multiply(1065);
      complex1.conjugate();
      Complex complex7 = Complex.valueOf(0.7615941559557649, (-326.5225635662));
      complex7.subtract(1.043905258178711);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1903.48328982473, 1903.48328982473);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.sqrt1z();
      complex0.cosh();
      complex1.toString();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = Complex.valueOf(3101.311068462, 3.408223442335828);
      complex0.hashCode();
      Complex complex6 = complex1.sin();
      complex5.negate();
      complex2.abs();
      complex4.getArgument();
      Complex complex7 = new Complex(0.3164375305291165);
      complex7.divide(complex3);
      Object object0 = new Object();
      complex0.equals(object0);
      complex5.getArgument();
      complex4.tan();
      complex6.reciprocal();
      complex6.ONE.tanh();
      Complex complex8 = new Complex(2109.67579011063, (-1920.52910328));
      Complex complex9 = complex4.subtract(complex5);
      complex0.multiply(2489);
      Complex complex10 = Complex.I;
      complex6.add(complex9);
      complex0.atan();
      Complex complex11 = new Complex(Double.NaN);
      complex11.cos();
      Complex complex12 = new Complex((-697.324));
      Complex complex13 = complex8.sqrt();
      complex13.tan();
      Complex.valueOf(5.672812341879918E178);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.multiply(251);
      Complex complex7 = complex0.log();
      Complex complex8 = complex6.add(complex7);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex6.log();
      complex0.divide(2.6197411946856397E-8);
      complex3.multiply(0.0);
      complex10.conjugate();
      Complex.valueOf(356.677107192718, 0.0);
      Complex complex11 = complex4.negate();
      complex11.multiply(complex0);
      complex2.multiply(1104.7534021);
      Complex complex12 = complex9.createComplex(356.677107192718, 2.5887417793273926);
      complex10.isNaN();
      complex12.tanh();
      Complex complex13 = Complex.valueOf(1104.7534021);
      complex13.getReal();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-462.07729078876));
      Complex complex1 = complex0.createComplex((-462.07729078876), (-1460.248062283));
      Complex complex2 = new Complex((-1460.248062283));
      Complex complex3 = complex1.divide(complex2);
      complex3.equals(complex2);
      complex1.getArgument();
      Complex complex4 = complex3.tan();
      complex3.reciprocal();
      Complex complex5 = new Complex((-20.0), 2.0);
      complex4.subtract(complex1);
      complex4.multiply(1309);
      Complex complex6 = Complex.I;
      Complex complex7 = complex1.add(complex5);
      complex7.atan();
      complex5.cos();
      Complex complex8 = new Complex((-1.0));
      complex2.sqrt();
      complex0.tan();
      complex3.multiply((-1460.248062283));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = Complex.valueOf(3.408223442335828, 3.408223442335828);
      complex5.NaN.hashCode();
      Complex complex6 = complex5.sin();
      complex6.negate();
      complex2.abs();
      complex3.getArgument();
      Complex complex7 = new Complex(2109.67579011063);
      complex0.divide(complex7);
      complex3.equals(complex0);
      complex2.ONE.add(Double.NaN);
      complex2.getArgument();
      complex2.tan();
      complex2.reciprocal();
      Complex complex8 = new Complex((-1.0), Double.NaN);
      complex1.divide(1009.0561717713962);
      Complex.valueOf(3129.9254, (-1.0));
      complex4.sin();
      complex7.subtract(complex0);
      Complex complex9 = new Complex(0.5403023058681398, 0.0);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3640765.646400833, 0.7615941559557649);
      Complex complex1 = complex0.INF.sin();
      complex0.INF.getArgument();
      complex0.I.nthRoot(1065);
      Complex complex2 = complex0.divide((-84.300370554));
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = (Complex)complex2.readResolve();
      complex2.reciprocal();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex5.cosh();
      complex0.subtract(complex5);
      Complex complex7 = complex1.multiply(836);
      Complex complex8 = Complex.I;
      complex7.add(complex0);
      complex4.atan();
      complex8.cos();
      Complex complex9 = new Complex(0.7853981633974483);
      complex6.sqrt();
      complex1.tan();
      Complex complex10 = Complex.I;
      complex9.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = Complex.valueOf(3.408223442335828, 3.408223442335828);
      complex5.NaN.hashCode();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.negate();
      complex2.abs();
      complex3.getArgument();
      Complex complex8 = new Complex(2109.67579011063);
      complex0.divide(complex8);
      complex3.equals(complex0);
      complex2.getArgument();
      complex2.tan();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = new Complex((-1.0), Double.NaN);
      complex4.log();
      complex9.multiply(complex7);
      Complex complex11 = new Complex(2109.67579011063, 1.5707963267948966);
      Complex complex12 = complex6.pow(1.2567956334920216E105);
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.INF.getField();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.conjugate();
      complex0.equals("xCEUcuBIL<$P?=h");
      Complex complex4 = complex3.INF.pow(complex2);
      Complex complex5 = complex4.multiply((-1617.61943));
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex1.subtract(complex4);
      complex8.multiply((-2146156910));
      Complex complex9 = Complex.I;
      complex5.add(complex7);
      Complex complex10 = complex3.atan();
      complex7.cos();
      Complex complex11 = new Complex((-2146156910));
      complex10.sqrt();
      complex0.tan();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      complex1.asin();
      Complex complex2 = complex0.multiply(1658.6092);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.log();
      complex3.multiply(complex2);
      complex4.multiply((-1908));
      complex2.pow((double) (-1908));
      complex4.sqrt();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-462.07729078876));
      complex0.createComplex((-462.07729078876), (-1460.248062283));
      Complex complex1 = complex0.multiply(378);
      complex1.getField();
      complex0.subtract(2.0);
      Complex complex2 = new Complex(2056.044050122923);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3640765.646400833, 0.7615941559557649);
      complex0.INF.sin();
      complex0.INF.getArgument();
      complex0.I.nthRoot(1065);
      Complex complex1 = complex0.divide((-84.300370554));
      Complex complex2 = complex0.I.sinh();
      complex1.readResolve();
      complex1.reciprocal();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.cosh();
      complex3.I.divide(0.7615941559557649);
      Complex.valueOf(3640765.646400833, 772.1);
      Complex complex5 = complex4.sin();
      complex2.subtract(complex5);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.multiply(0.0);
      complex2.I.abs();
      complex0.divide(3.408223442335828);
      complex2.isInfinite();
      Complex complex4 = complex3.tanh();
      complex4.INF.log();
      complex3.abs();
      complex4.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(8.720743087611513E168, 8.720743087611513E168);
      complex0.divide(8.720743087611513E168);
      Complex complex1 = Complex.valueOf((-1101.612003608978));
      Complex complex2 = complex1.divide((-1101.612003608978));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.divide((-2884.900151682));
      complex1.nthRoot(2102);
      complex3.isInfinite();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.multiply(1693.7);
      complex2.NaN.cos();
      complex4.sin();
      complex3.abs();
      complex3.sinh();
      complex6.isNaN();
      complex3.reciprocal();
      complex4.atan();
      complex4.reciprocal();
      complex5.readResolve();
      Complex complex7 = Complex.I;
      complex7.getReal();
      complex5.isInfinite();
      complex5.cos();
      Complex.valueOf(8.720743087611513E168, (-1101.612003608978));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = Complex.valueOf(3.408223442335828, 3.408223442335828);
      complex5.NaN.hashCode();
      Complex complex6 = complex5.sin();
      complex6.negate();
      complex2.abs();
      complex3.getArgument();
      Complex complex7 = new Complex(2109.67579011063);
      Complex complex8 = complex0.divide(complex7);
      complex3.equals(complex0);
      complex2.getArgument();
      complex2.tan();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = new Complex((-1.0), Double.NaN);
      Complex complex11 = complex2.subtract(complex9);
      complex8.multiply(1309);
      Complex complex12 = Complex.I;
      complex12.add(complex4);
      Complex complex13 = complex0.atan();
      complex13.cos();
      Complex complex14 = new Complex((-5384.249));
      complex14.sqrt();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.multiply((-3991.3339202955));
      complex1.ONE.abs();
      Complex complex2 = Complex.valueOf((-589.0470638952972), (-3991.3339202955));
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.negate();
      complex4.abs();
      complex2.getArgument();
      Complex complex5 = complex0.divide(complex2);
      complex5.equals(complex1);
      complex0.getArgument();
      Complex complex6 = complex3.subtract(1.0);
      Complex complex7 = Complex.ONE;
      complex7.toString();
      Complex complex8 = Complex.ZERO;
      complex8.abs();
      complex0.getReal();
      complex3.getImaginary();
      Complex complex9 = new Complex(0.0);
      complex9.toString();
      Complex complex10 = complex0.conjugate();
      complex6.log();
      complex8.conjugate();
      complex5.multiply(1211.800961);
      complex1.tanh();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1426.358));
      complex11.acos();
      Complex complex12 = complex5.log();
      complex6.multiply(complex10);
      complex12.multiply(724);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.toString();
      Complex complex2 = complex0.tanh();
      complex2.I.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex2.getField();
      complex0.I.log();
      complex0.equals(complex5);
      complex3.ONE.divide(complex1);
      Complex complex6 = complex5.add((-20.0));
      complex1.equals("(0.0, 1.0)");
      complex3.getField();
      complex2.ONE.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = (Complex)complex6.readResolve();
      Complex complex8 = complex5.tan();
      complex5.reciprocal();
      Complex complex9 = new Complex(6.283185307179586, (-320.1262771));
      Complex complex10 = Complex.ZERO;
      complex7.add(complex8);
      complex5.atan();
      complex4.cos();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.INF.getField();
      Complex complex1 = Complex.valueOf((-1751.1683), 1150.100811);
      Complex complex2 = complex1.divide((-309.9823883692));
      Complex complex3 = complex0.divide((-1751.1683));
      Complex complex4 = new Complex((-1751.1683), 556.148176527655);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex4.divide(556.148176527655);
      complex6.nthRoot(2102);
      complex4.isNaN();
      complex0.conjugate();
      Complex complex7 = complex1.multiply((-3165.60566828505));
      Complex complex8 = complex4.sin();
      complex7.abs();
      complex5.sinh();
      complex8.INF.negate();
      complex0.isNaN();
      complex8.reciprocal();
      complex0.atan();
      Complex complex9 = complex2.reciprocal();
      complex6.readResolve();
      complex9.getReal();
      complex2.isInfinite();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.toString();
      Complex complex2 = complex0.tanh();
      complex2.I.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex2.getField();
      complex0.I.log();
      complex0.equals(complex5);
      complex3.ONE.divide(complex1);
      Complex complex6 = complex5.add((-20.0));
      complex1.equals("(0.0, 1.0)");
      complex3.getField();
      complex2.ONE.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = (Complex)complex6.readResolve();
      Complex complex8 = complex6.subtract((-320.1262771));
      complex8.INF.toString();
      complex0.abs();
      complex0.getReal();
      complex8.getImaginary();
      complex4.toString();
      complex4.conjugate();
      Complex complex9 = complex6.log();
      complex9.ZERO.conjugate();
      complex7.negate();
      complex3.tan();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.toString();
      Complex complex2 = complex0.tanh();
      complex2.I.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex2.getField();
      complex0.equals(complex5);
      Complex complex6 = complex3.ONE.divide(complex1);
      complex4.abs();
      complex4.getArgument();
      Complex complex7 = complex2.divide(complex6);
      complex0.equals("(0.0, 1.0)");
      Complex complex8 = Complex.ONE;
      complex8.getArgument();
      complex5.tan();
      complex8.reciprocal();
      Complex complex9 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = new Complex((-32.001));
      Complex complex11 = complex4.multiply(7);
      Complex complex12 = Complex.INF;
      complex5.add(complex12);
      complex11.atan();
      complex7.cos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(932);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(1377.49547);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      complex0.multiply(7);
      Complex complex6 = new Complex((-654.56751));
      complex6.divide((double) 932);
      Complex.valueOf(0.2658022288340798);
      complex4.conjugate();
      complex2.isInfinite();
      complex3.cos();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.toString();
      Complex complex2 = complex0.tanh();
      complex2.I.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex2.getField();
      Complex complex6 = complex0.I.log();
      complex0.equals(complex5);
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.add((-20.0));
      complex1.equals("(0.0, 1.0)");
      complex3.getField();
      Complex complex9 = complex2.ONE.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.readResolve();
      Complex complex10 = complex8.subtract((-320.1262771));
      complex10.INF.toString();
      complex0.abs();
      complex0.getReal();
      complex3.abs();
      Complex complex11 = complex6.sinh();
      complex9.isNaN();
      complex11.reciprocal();
      complex9.atan();
      Complex complex12 = Complex.I;
      complex12.reciprocal();
      complex8.readResolve();
      complex3.getReal();
      complex4.isInfinite();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = new Complex((-0.37331228176763576));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      complex3.equals(complex2);
      complex1.getArgument();
      Complex complex4 = complex0.tan();
      complex4.reciprocal();
      Complex complex5 = new Complex(0.0, 0.0010474477788775165);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.subtract(complex0);
      complex6.tan();
      Complex complex8 = complex2.multiply(7);
      Complex complex9 = new Complex(507.8964673066, 0.0010474477788775165);
      complex7.add(complex9);
      complex3.atan();
      Complex complex10 = complex8.cos();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.tanh();
      Complex complex1 = complex0.multiply(7);
      complex1.readResolve();
      complex0.readResolve();
      Complex complex2 = complex1.divide((double) 7);
      Complex complex3 = Complex.NaN;
      complex3.I.tan();
      Complex complex4 = complex2.ONE.pow(complex3);
      complex4.conjugate();
      Complex complex5 = complex2.pow(0.0);
      Complex complex6 = complex5.multiply(complex2);
      complex2.getReal();
      Complex complex7 = complex0.createComplex(7.836307815186044E132, 0.0);
      complex7.toString();
      complex0.isNaN();
      complex6.getReal();
      Complex complex8 = complex7.INF.reciprocal();
      complex8.ONE.add(1826.8236);
      Complex complex9 = complex1.cos();
      complex9.NaN.multiply(0);
      Complex complex10 = complex5.ZERO.acos();
      complex5.isNaN();
      Complex complex11 = complex7.exp();
      complex6.INF.tan();
      Complex complex12 = complex11.I.divide(0.0);
      Complex complex13 = complex12.cos();
      complex13.ONE.cos();
      complex6.cosh();
      complex7.sqrt();
      complex10.tan();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2307.5));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      complex1.NaN.atan();
      Complex complex4 = complex0.INF.add(complex3);
      Complex complex5 = complex0.tanh();
      complex2.hashCode();
      complex0.NaN.sqrt1z();
      complex0.hashCode();
      complex0.getImaginary();
      Complex complex6 = complex4.divide(0.0);
      complex4.log();
      complex1.asin();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex6.subtract((-3.141592653589793));
      complex8.NaN.getArgument();
      Complex complex9 = complex0.ZERO.tan();
      complex9.getArgument();
      complex8.tan();
      complex5.asin();
      Complex complex10 = complex3.reciprocal();
      complex10.NaN.toString();
      complex6.log();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sinh();
      complex0.getField();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex3.negate();
      complex3.tanh();
      complex4.ZERO.getField();
      Complex complex5 = complex3.NaN.multiply(0.0);
      Complex complex6 = complex0.divide(0.0);
      complex6.ZERO.getArgument();
      complex0.ZERO.atan();
      Complex complex7 = Complex.valueOf(0.0, 3878.3347665595124);
      complex0.subtract(complex1);
      Complex complex8 = complex7.pow(74.7);
      Complex complex9 = complex8.add(74.7);
      complex1.tanh();
      Complex complex10 = complex7.pow(0.0);
      complex2.conjugate();
      complex7.exp();
      Complex complex11 = Complex.I;
      Complex complex12 = complex2.subtract(complex11);
      complex4.isNaN();
      complex10.ZERO.divide(0.0);
      Complex complex13 = complex10.tanh();
      complex4.nthRoot(566);
      complex13.negate();
      complex4.ONE.cos();
      Complex.valueOf((double) 566, 0.0);
      complex9.equals(complex5);
      complex4.isInfinite();
      complex11.isNaN();
      complex13.add(0.0);
      complex12.multiply((double) 566);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ZERO.divide(4.250734424415339E-289);
      complex1.I.abs();
      Complex complex3 = complex0.ZERO.divide(3454.29701449);
      Complex complex4 = complex0.subtract(3454.29701449);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.reciprocal();
      complex2.ZERO.exp();
      complex6.I.multiply((-825));
      complex0.equals((Object) null);
      complex0.getField();
      complex0.negate();
      Complex complex7 = complex1.createComplex(4.250734424415339E-289, 3454.29701449);
      complex7.createComplex(4.250734424415339E-289, Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.subtract(3454.29701449);
      Complex complex9 = complex8.ZERO.negate();
      complex9.ZERO.asin();
      Complex complex10 = Complex.NaN;
      complex10.I.cosh();
      Complex complex11 = complex0.INF.divide(complex10);
      Complex complex12 = complex11.INF.tan();
      complex12.INF.log();
      complex0.readResolve();
      complex3.conjugate();
      Complex complex13 = complex5.add(8.854771398921902E-70);
      complex13.NaN.sin();
      complex4.readResolve();
      Complex.valueOf(Double.NaN, 1.0);
      Complex complex14 = complex11.log();
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3404009342193604, 954.7);
      complex0.I.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.divide(1.3404009342193604);
      complex2.I.pow(954.7);
      complex2.acos();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.multiply((-3991.3339202955));
      complex1.ONE.abs();
      Complex complex2 = Complex.valueOf((-589.0470638952972), (-3991.3339202955));
      complex2.ZERO.sin();
      Complex complex3 = complex0.negate();
      complex3.abs();
      complex2.getArgument();
      Complex complex4 = complex0.divide(complex2);
      complex4.equals(complex1);
      complex0.getArgument();
      Complex complex5 = complex2.tan();
      complex5.I.reciprocal();
      Complex complex6 = new Complex(0.0, (-32.001));
      Complex complex7 = complex5.subtract(complex6);
      complex6.I.multiply(7);
      Complex complex8 = complex7.add(complex0);
      complex8.I.atan();
      complex2.cos();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(925.0215, 3881.513823325772);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.cos();
      complex0.NaN.readResolve();
      complex1.INF.hashCode();
      Complex complex3 = complex2.ONE.negate();
      complex3.I.acos();
      complex3.ONE.pow(Double.NaN);
      Complex complex4 = complex2.I.divide(925.0215);
      Complex complex5 = complex0.atan();
      complex5.ONE.add(925.0215);
      complex2.getArgument();
      complex4.sin();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.conjugate();
      complex0.INF.negate();
      Complex complex3 = complex2.NaN.log();
      complex2.subtract(complex3);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.toString();
      Complex complex2 = complex0.tanh();
      complex2.I.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.exp();
      complex2.getField();
      Complex complex6 = complex0.I.log();
      complex0.equals(complex5);
      Complex complex7 = complex3.ONE.divide(complex1);
      Complex complex8 = complex5.add((-20.0));
      complex1.equals("(0.0, 1.0)");
      complex3.getField();
      complex2.ONE.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.readResolve();
      Complex complex9 = complex8.subtract((-320.1262771));
      complex9.INF.toString();
      complex0.abs();
      complex0.getReal();
      complex9.getImaginary();
      complex4.toString();
      complex4.conjugate();
      Complex complex10 = complex8.log();
      complex10.ZERO.conjugate();
      complex10.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex9.acos();
      complex11.log();
      complex12.multiply(complex4);
      complex7.multiply(724);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      complex1.asin();
      Complex complex2 = complex0.multiply(1658.6092);
      complex1.divide(371.335219);
      complex1.isInfinite();
      complex2.tanh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.669404761339415E-165, 3.669404761339415E-165);
      Complex complex1 = complex0.subtract(3.669404761339415E-165);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.cos();
      Complex.valueOf(0.0, 3.669404761339415E-165);
      Complex complex4 = complex0.subtract(complex3);
      complex4.INF.add(complex2);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.INF.subtract(537.489878);
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.NaN.add(complex8);
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex10.acos();
      complex11.ONE.multiply(0.0);
      complex1.ONE.sqrt1z();
      Complex complex12 = Complex.valueOf(Double.NaN, 2153.128531443);
      complex12.I.log();
      complex12.ZERO.tan();
      complex2.getImaginary();
      complex1.readResolve();
      Complex.valueOf(3.669404761339415E-165);
      complex7.isInfinite();
      try { 
        complex9.nthRoot((-2363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,363
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(836.2932, 2604.862);
      Complex complex1 = complex0.sinh();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.multiply(291);
      Complex complex4 = Complex.valueOf(8.990862214387203E-308, 836.2932);
      complex1.readResolve();
      Complex complex5 = complex1.multiply(complex3);
      complex5.ZERO.toString();
      complex5.cosh();
      Complex complex6 = complex1.INF.tanh();
      Complex complex7 = complex5.sin();
      complex7.ZERO.tanh();
      complex5.conjugate();
      Complex complex8 = complex1.multiply((-932));
      complex8.I.atan();
      Complex complex9 = complex4.ZERO.add((-216.91679792462));
      Complex complex10 = complex1.sin();
      Complex complex11 = complex1.log();
      complex11.toString();
      complex10.sqrt1z();
      Complex complex12 = complex4.exp();
      complex12.ZERO.tan();
      Complex complex13 = Complex.valueOf((double) 291, 8.990862214387203E-308);
      complex2.isInfinite();
      complex5.acos();
      complex9.cosh();
      Complex complex14 = complex13.exp();
      complex14.ZERO.pow(complex0);
      complex6.cos();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1279.69111159488), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.asin();
      complex3.cosh();
      complex0.abs();
      complex0.isNaN();
      complex2.abs();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex5.ONE.pow(2.316005229949951);
      complex1.add((-872.7180784454449));
      Complex complex7 = complex1.cosh();
      complex7.I.add(complex2);
      Complex complex8 = complex0.multiply((-602.221092));
      complex1.getArgument();
      Complex complex9 = complex1.sqrt();
      complex9.ONE.createComplex(0.0, 0.0);
      complex2.getArgument();
      complex6.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.184154459111628E-8, 1.184154459111628E-8);
      Complex complex1 = complex0.INF.divide(1.184154459111628E-8);
      Complex complex2 = complex0.I.divide(1.184154459111628E-8);
      complex0.isInfinite();
      Complex complex3 = complex1.exp();
      complex1.getField();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.I.add(1.184154459111628E-8);
      Complex complex6 = complex3.multiply(1.184154459111628E-8);
      Complex complex7 = complex1.negate();
      complex7.ZERO.multiply(complex2);
      Complex complex8 = complex6.subtract(0.0);
      complex4.subtract(complex8);
      complex8.subtract(1.0);
      complex4.tanh();
      complex5.acos();
      Complex.valueOf(1.184154459111628E-8);
      complex5.atan();
      Complex.valueOf((-911.25));
      complex0.subtract(complex5);
      complex8.acos();
      complex1.cosh();
      complex3.nthRoot(403);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(336.94, 2.4977273040076145E-122);
      Complex complex2 = complex0.createComplex(4716.73396, 4716.73396);
      complex0.sinh();
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = complex1.divide(complex2);
      complex4.tan();
      complex4.sin();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.ONE.add(complex1);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(8.720743087611513E168, 8.720743087611513E168);
      Complex complex1 = complex0.NaN.cosh();
      complex0.cos();
      complex0.getImaginary();
      complex1.isNaN();
      Complex complex2 = Complex.INF;
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.082960673843353E-9);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = Complex.valueOf(9.082960673843353E-9, 0.0);
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex0.I.tanh();
      complex2.pow(complex1);
      Complex complex9 = complex4.ZERO.negate();
      complex9.atan();
      complex1.getImaginary();
      Complex complex10 = complex2.conjugate();
      complex2.ONE.tan();
      complex10.ZERO.tan();
      Complex complex11 = complex8.ZERO.subtract(complex4);
      complex4.isNaN();
      Complex complex12 = complex8.reciprocal();
      complex7.log();
      complex1.hashCode();
      complex12.divide(0.0);
      complex5.sqrt();
      complex5.getArgument();
      complex4.toString();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-968.010466));
      Complex complex3 = complex2.tan();
      complex3.getField();
      complex2.I.hashCode();
      complex0.hashCode();
      Complex complex4 = complex0.sqrt1z();
      complex2.ONE.getArgument();
      complex4.ZERO.readResolve();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex5.createComplex((-968.010466), (-968.010466));
      complex6.INF.multiply(complex2);
      Complex complex7 = Complex.valueOf((-968.010466));
      complex7.I.divide((-20.0));
      complex4.tanh();
      Complex complex8 = complex1.ONE.sin();
      complex0.sin();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.hashCode();
      complex2.NaN.add(complex1);
      complex2.negate();
      complex2.ONE.readResolve();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.sin();
      complex3.ONE.abs();
      Complex complex5 = complex4.NaN.sinh();
      complex5.I.subtract(complex2);
      Complex complex6 = complex5.NaN.pow(509.3714);
      complex6.ZERO.multiply(1);
      complex6.I.pow(complex0);
      Complex complex7 = Complex.valueOf(509.3714);
      Complex complex8 = complex1.INF.atan();
      complex8.ONE.getField();
      complex0.getArgument();
      complex0.nthRoot(2001);
      complex1.readResolve();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.ONE.tan();
      complex9.INF.add(complex1);
      Complex complex12 = complex8.multiply(complex9);
      complex8.multiply(1189);
      complex11.multiply(complex7);
      complex12.NaN.tanh();
      complex8.readResolve();
      complex12.getArgument();
      Complex complex13 = complex10.subtract(0.0);
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1675.5629110066516, 1675.5629110066516);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ONE.createComplex((-2534.43), 3.080714152600695E145);
      Complex complex4 = complex1.tan();
      complex1.ONE.getField();
      complex4.multiply(complex3);
      complex4.ZERO.abs();
      Complex complex5 = complex4.INF.add(0.0);
      Complex complex6 = complex2.ONE.divide(2.7751016140238277E-242);
      Complex.valueOf(2.7751016140238277E-242, (-3279.62713));
      complex6.nthRoot(3433);
      complex0.readResolve();
      complex1.getReal();
      complex1.ZERO.exp();
      complex0.hashCode();
      complex1.readResolve();
      complex0.abs();
      complex2.getImaginary();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = Complex.valueOf(260.33);
      complex8.I.cosh();
      complex6.abs();
      complex6.getImaginary();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex9.I.multiply(3433);
      Object object0 = new Object();
      complex4.equals(object0);
      complex10.isInfinite();
      complex5.getArgument();
      complex7.subtract((-713.37));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.sin();
      Complex complex1 = complex0.sin();
      complex1.ZERO.reciprocal();
      complex1.getArgument();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.negate();
      Complex complex1 = complex0.ONE.tan();
      complex1.INF.getArgument();
      Complex complex2 = complex1.I.sinh();
      complex2.conjugate();
      complex1.NaN.getField();
      Complex complex3 = complex0.sqrt1z();
      int int0 = 0;
      complex3.INF.cos();
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex3.NaN.pow((-533.0));
      complex4.NaN.getField();
      complex1.ZERO.divide(0.0);
      Complex complex5 = complex2.INF.divide(0.0);
      complex5.ONE.divide(complex2);
      Complex complex6 = complex4.divide((-1005.637056064));
      complex0.nthRoot(2102);
      complex2.isInfinite();
      Complex complex7 = complex0.conjugate();
      complex7.INF.multiply((-20.0));
      Complex complex8 = complex1.sin();
      complex0.abs();
      complex4.sinh();
      complex2.isNaN();
      Complex complex9 = complex6.reciprocal();
      complex9.atan();
      complex8.reciprocal();
      complex3.readResolve();
      complex0.getReal();
      complex4.isInfinite();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.cosh();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex2.INF.asin();
      complex2.NaN.sqrt1z();
      complex0.createComplex(0.0, 0.0);
      complex0.abs();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex5.INF.add(0.0);
      complex6.INF.asin();
      Complex complex7 = Complex.valueOf((-560.583149), 0.0);
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex8.INF.atan();
      complex4.getImaginary();
      complex0.conjugate();
      complex3.conjugate();
      complex3.pow(0.0);
      complex9.multiply((-525));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2974.9);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.NaN.cos();
      complex1.NaN.add(complex2);
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex2.ZERO.sqrt();
      Complex complex8 = complex7.NaN.createComplex(3970.102155794356, (-1558.1364663));
      Complex complex9 = complex7.ZERO.divide(complex4);
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex1.I.sqrt();
      complex0.getField();
      complex0.sqrt();
      Complex complex12 = complex9.INF.sin();
      Complex complex13 = complex2.atan();
      complex11.exp();
      Complex complex14 = Complex.valueOf(1.890268325805664, 2974.9);
      complex4.nthRoot(1);
      complex14.ZERO.conjugate();
      complex8.cosh();
      complex10.reciprocal();
      complex3.negate();
      complex6.cosh();
      complex12.subtract(complex8);
      complex13.I.toString();
      Complex complex15 = complex2.multiply(1);
      complex14.isNaN();
      complex13.reciprocal();
      complex7.add(2974.9);
      complex15.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex1.I.abs();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.multiply(complex2);
      complex1.I.cos();
      complex4.multiply(0.0);
      complex3.getReal();
      complex2.getImaginary();
      Complex complex5 = complex0.multiply(1);
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(1369.19719);
      Complex complex1 = new Complex(760.76614615979, 0.0);
      Complex complex2 = complex1.NaN.cosh();
      complex2.ONE.getArgument();
      Complex complex3 = complex0.divide(complex1);
      complex3.I.multiply(0);
      Complex complex4 = complex3.I.atan();
      complex1.abs();
      complex0.createComplex(0.0, 1369.19719);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1903.48328982473, 1903.48328982473);
      complex0.createComplex(1903.48328982473, 1903.48328982473);
      complex0.multiply(1.3006497185242537E-7);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.pow(complex1);
      complex4.ZERO.acos();
      complex2.hashCode();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.ZERO.add(complex2);
      complex6.I.nthRoot(76);
      complex5.I.tanh();
      Complex complex7 = Complex.valueOf(1766.0818608249335);
      complex2.add(complex7);
      Complex complex8 = complex6.acos();
      complex1.multiply(76);
      complex8.NaN.divide(20.0);
      Complex.valueOf((-3371.99));
      complex3.conjugate();
      complex0.isInfinite();
      complex3.cos();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.ONE.divide(4.8838973948592766E-8);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.abs();
      Complex complex1 = complex0.I.subtract(0.0);
      complex0.getReal();
      complex1.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.tan();
      complex2.I.toString();
      Complex complex3 = complex2.ONE.tan();
      complex3.ZERO.sinh();
      complex1.abs();
      complex1.getReal();
      complex1.pow(complex0);
      complex3.NaN.tanh();
      complex0.isNaN();
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.subtract((-1001.6539489191491));
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ZERO.toString();
      Complex complex3 = complex2.NaN.subtract((-1001.6539489191491));
      Complex complex4 = complex2.ZERO.sinh();
      complex1.getField();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.I.exp();
      complex6.NaN.nthRoot(1);
      Complex complex7 = complex5.multiply((-1001.6539489191491));
      complex1.getImaginary();
      Complex complex8 = complex5.sinh();
      complex8.I.hashCode();
      Complex complex9 = complex7.tan();
      complex9.pow((-1797.667862724));
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      complex1.I.createComplex(0.0, 5.058693461947143E-9);
      int int0 = (-93);
      try { 
        complex1.INF.nthRoot((-93));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -93
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-251.9235588456959), (-251.9235588456959));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.NaN.acos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(2.6474285478041252E281);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.I.sqrt();
      assertEquals(0.7071067811865475, complex5.getImaginary(), 0.01);
      
      Complex complex6 = (Complex)complex1.readResolve();
      complex4.equals(complex6);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.NaN.add(2.3789334438756013E245);
      complex1.multiply(complex0);
      Complex complex8 = complex4.ZERO.asin();
      Complex complex9 = complex8.NaN.subtract(complex1);
      double double0 = complex8.getArgument();
      assertEquals(-0.0, double0, 0.01);
      
      complex4.getReal();
      Complex complex10 = complex4.divide(complex1);
      Complex complex11 = complex3.NaN.log();
      complex11.ONE.pow(complex8);
      Complex complex12 = complex11.ONE.pow(complex4);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex8.atan();
      Complex complex14 = complex1.add(complex10);
      Complex complex15 = complex10.add(2.3789334438756013E245);
      List<Complex> list0 = complex14.INF.nthRoot(763);
      assertFalse(list0.contains(complex8));
      assertEquals(1, list0.size());
      assertTrue(complex10.equals((Object)complex15));
      assertEquals((-2.453570540662415E283), complex10.getImaginary(), 0.01);
      
      complex13.reciprocal();
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex16 = complex2.multiply(complex8);
      assertSame(complex16, complex9);
      
      Complex complex17 = complex2.negate();
      assertSame(complex17, complex7);
      assertFalse(complex1.equals((Object)complex12));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = complex4.multiply(251);
      Complex complex6 = complex3.ONE.log();
      Complex complex7 = complex2.ONE.add(complex1);
      Complex complex8 = complex2.INF.tan();
      Complex complex9 = complex7.ZERO.log();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex2.divide(0.0);
      Complex complex11 = complex0.I.multiply(0.0);
      assertTrue(complex11.equals((Object)complex6));
      
      Complex complex12 = complex8.conjugate();
      Complex complex13 = Complex.valueOf(0.0, 5322.7891038);
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex7.ONE.negate();
      Complex complex15 = complex14.ONE.multiply(complex2);
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      Complex complex16 = complex0.multiply(5.221136819669415E-9);
      assertEquals(0.0, complex16.getReal(), 0.01);
      
      complex10.I.createComplex(356.677107192718, 5.221136819669415E-9);
      assertSame(complex10, complex5);
      
      complex8.isNaN();
      assertFalse(complex8.equals((Object)complex9));
      assertSame(complex8, complex12);
      
      Complex complex17 = complex7.tanh();
      complex3.getReal();
      Complex complex18 = complex17.exp();
      assertTrue(complex1.equals((Object)complex15));
      assertEquals(0.7935183625044258, complex18.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3449.1343895502));
      complex0.hashCode();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-3449.1343895502), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }
}
