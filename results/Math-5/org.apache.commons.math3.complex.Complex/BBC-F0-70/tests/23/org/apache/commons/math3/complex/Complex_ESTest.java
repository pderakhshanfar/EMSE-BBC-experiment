/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:02:18 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1268.904425669, Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf(1.6829556040859853E-124, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1.3289115531074511E-110, 19.92903490959389);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1021.15031909869));
      complex1.sqrt();
      Complex complex2 = Complex.valueOf(2449.2);
      complex2.ZERO.subtract(complex0);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4128.11733856));
      complex0.getField();
      Complex complex1 = complex0.ONE.multiply(5.479138512760614E77);
      Complex complex2 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      complex3.ONE.add(complex1);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.add((-4128.11733856));
      complex5.INF.pow(complex2);
      complex2.subtract(2790.613084);
      Complex complex6 = complex2.multiply(1830);
      complex0.pow(complex1);
      complex1.exp();
      Complex complex7 = complex6.atan();
      complex1.multiply(2.648832130915005E-271);
      complex4.add(complex7);
      complex4.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.toString();
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1.0257158279418945, (-20.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-7.473726786981728E-4), (-7.473726786981728E-4));
      complex0.abs();
      Complex complex1 = complex0.INF.subtract(2080.98956);
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex2.NaN.multiply((-2147483465));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.INF.reciprocal();
      complex6.ZERO.subtract(20.0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.NaN.subtract(complex7);
      complex8.ZERO.log();
      complex5.toString();
      Complex complex9 = complex5.createComplex(0.0010569445783620657, (-1698.039042685771));
      Complex complex10 = complex9.cosh();
      complex9.ONE.sqrt1z();
      complex9.ZERO.exp();
      complex3.NaN.multiply(complex10);
      Complex.valueOf(4.7114495E7, 2080.98956);
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex1.pow(complex6);
      Complex complex13 = complex12.add(complex11);
      complex13.abs();
      complex11.sqrt1z();
      complex7.subtract(0.0010569445783620657);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 11.3);
      Complex complex1 = new Complex(11.3, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(7.636179075087608E73, 59.976323356519146);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      complex1.tan();
      complex2.sinh();
      Complex complex3 = new Complex(11.276093840856142, 14.431409755633634);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 14.431409755633634);
      Complex complex5 = complex4.sqrt1z();
      try { 
        complex5.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = Complex.I;
      complex1.asin();
      complex0.tan();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4126.457, 4126.457);
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf((-61.298693102));
      Complex complex2 = complex1.ONE.cos();
      complex2.pow(4126.457);
      Complex complex3 = complex0.exp();
      complex0.ONE.conjugate();
      complex1.INF.abs();
      Complex complex4 = complex3.subtract((-3400.8129315460596));
      complex4.ZERO.toString();
      Complex complex5 = complex4.I.createComplex(1946.5345826487335, 1946.5345826487335);
      complex0.exp();
      complex5.I.exp();
      Complex complex6 = complex3.divide(complex1);
      Complex.valueOf(1946.5345826487335, (-3400.8129315460596));
      complex6.pow(4.3079982556221595E-8);
      complex5.add(complex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2.3755626678466797, (-1.01738658407525E-7));
      Complex complex2 = complex0.multiply(complex1);
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1277141308, (-0.21322831244675658));
      Complex complex1 = complex0.multiply(1277141308);
      Complex complex2 = complex1.acos();
      complex2.pow((-0.21322831244675658));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.INF.abs();
      complex0.I.getField();
      complex0.I.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex0.log();
      Complex.valueOf(1.5707963267948966);
      complex4.asin();
      Complex complex5 = complex3.subtract(1236.0);
      complex5.tanh();
      complex5.I.acos();
      complex5.reciprocal();
      complex0.log();
      Complex complex6 = complex4.exp();
      complex6.toString();
      complex6.INF.readResolve();
      complex3.add(1.5707963267948966);
      complex1.sin();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.sin();
      complex0.I.tan();
      Complex complex4 = complex2.createComplex(20.0, 20.0);
      Complex complex5 = complex4.pow(20.0);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex6.ZERO.atan();
      complex7.ZERO.conjugate();
      complex7.INF.divide(643.8305);
      complex4.cos();
      complex4.subtract(complex2);
      complex3.ZERO.tanh();
      complex3.subtract((-4394.9149));
      complex6.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2.680137967689915E-304, 98.85561950255475);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.acos();
      complex1.asin();
      complex2.tan();
      Complex complex3 = Complex.valueOf(Double.NaN, 98.85561950255475);
      complex3.asin();
      Complex.valueOf(98.85561950255475, 98.85561950255475);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.3289115531074511E-110);
      complex0.INF.abs();
      Complex complex1 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-471.19740429481));
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
      Complex complex2 = complex1.log();
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      complex0.INF.hashCode();
      complex0.add(complex1);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sinh();
      complex5.tanh();
      Complex complex6 = complex0.multiply(6.815765836622074);
      complex2.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.exp();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tan();
      complex0.sinh();
      complex0.tanh();
      complex2.multiply(1155.1);
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3152.451));
      complex1.I.createComplex((-3152.451), (-20.0));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.pow(complex1);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.negate();
      complex0.asin();
      complex1.tan();
      complex5.nthRoot(1813);
      Complex complex6 = Complex.valueOf((double) 1813, Double.NaN);
      complex6.divide((-1301.1));
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2228.608177, 1289.227);
      Complex complex2 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex2.toString();
      complex2.log();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.asin();
      complex3.tan();
      complex4.asin();
      complex5.nthRoot(1786);
      complex2.multiply((double) 1819);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
      complex0.readResolve();
      Complex complex2 = complex1.log();
      complex2.NaN.acos();
      complex1.sqrt();
      Complex complex3 = complex2.sqrt1z();
      complex3.NaN.createComplex(0.0, 0.0);
      complex3.nthRoot(2316);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.3289115531074511E-110);
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
      complex0.readResolve();
      Complex complex2 = complex1.log();
      complex1.sqrt();
      complex2.sqrt1z();
      complex1.multiply(2316);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.reciprocal();
      complex2.multiply((-2045222732));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1338.0205465121785));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.atan();
      complex0.createComplex(1.5707963267948966, 2.1629743576049805);
      Complex complex3 = complex1.createComplex(1.5707963267948966, 1.0);
      complex1.tanh();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.sqrt();
      complex2.getField();
      complex3.abs();
      complex3.tanh();
      Complex complex7 = complex3.add(2.2038806519542315E-267);
      Complex complex8 = complex7.createComplex(1009.1755003698669, 4275.0313012);
      Complex complex9 = complex6.negate();
      Complex.valueOf(1301.25749734305, (-612.5122858));
      complex4.conjugate();
      complex8.readResolve();
      complex2.cos();
      complex9.readResolve();
      complex5.subtract(4275.0313012);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.createComplex((-3737.1768), 3017.02);
      Complex complex5 = complex0.createComplex((-3737.1768), 1.0);
      complex3.tanh();
      Complex complex6 = complex5.pow(complex3);
      complex4.tanh();
      Complex complex7 = complex1.sqrt();
      complex6.getField();
      complex0.tanh();
      Complex complex8 = complex7.add((-3737.1768));
      Complex complex9 = complex8.createComplex(Double.POSITIVE_INFINITY, 852.437695567);
      Complex complex10 = complex8.negate();
      Complex.valueOf((-700.7292971997), (-0.45054953406980763));
      Complex complex11 = Complex.ZERO;
      complex11.conjugate();
      complex6.readResolve();
      complex2.cos();
      complex9.readResolve();
      complex10.subtract(852.437695567);
      complex0.subtract((-8250024.865796001));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      complex1.sinh();
      complex1.nthRoot(911);
      Complex.valueOf((-323.556575), (double) 911);
      complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4575.85690836));
      complex0.cos();
      Complex complex1 = complex0.createComplex((-4575.85690836), (-4575.85690836));
      Complex complex2 = complex1.sqrt1z();
      complex2.I.abs();
      Complex complex3 = complex2.ZERO.cos();
      complex3.getField();
      complex0.I.negate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex3.multiply((-0.9999995021928852));
      complex7.NaN.pow((-4575.85690836));
      complex6.asin();
      Complex complex8 = complex5.log();
      complex4.readResolve();
      complex1.pow(2045.8042415);
      Complex complex9 = complex3.add(complex8);
      complex9.I.getArgument();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-4.814386594291911E-9), (-1338.0205465121785));
      complex0.atan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1338.0205465121785));
      Complex complex1 = complex0.divide((-1338.0205465121785));
      Complex complex2 = complex0.ZERO.atan();
      complex0.INF.log();
      Complex complex3 = complex0.divide((-1338.0205465121785));
      complex0.ZERO.conjugate();
      Complex complex4 = complex3.add(complex0);
      complex4.I.multiply((-1));
      Complex complex5 = complex4.subtract((-1338.0205465121785));
      complex5.ZERO.pow(complex1);
      Complex complex6 = new Complex((-1338.0205465121785));
      complex6.tanh();
      complex2.getField();
      complex3.divide(complex1);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2.680137967689915E-304, 119.47550247285807);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = new Complex(119.47550247285807, 2.680137967689915E-304);
      complex6.sin();
      Complex complex7 = Complex.NaN;
      complex7.pow(complex1);
      complex7.getArgument();
      Complex complex8 = complex5.tan();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(0.0, (-1.1587600174449919E-8));
      Complex complex3 = Complex.INF;
      complex1.equals(complex0);
      complex2.readResolve();
      complex3.log();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.I.divide(1.0);
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex2.multiply((-2834));
      complex3.INF.readResolve();
      complex3.NaN.multiply(complex1);
      Complex complex4 = complex0.createComplex(1.0, Double.NaN);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ZERO.log();
      complex5.NaN.add(complex0);
      Complex complex7 = complex6.NaN.subtract(1.0);
      Complex complex8 = complex7.ZERO.atan();
      complex3.NaN.hashCode();
      complex8.ONE.multiply((-1.0));
      complex6.ZERO.hashCode();
      Complex complex9 = complex0.ONE.sin();
      Complex complex10 = complex0.ZERO.log();
      Complex complex11 = complex10.NaN.add(complex2);
      complex11.INF.divide(complex10);
      Complex complex12 = complex5.pow(Double.NaN);
      complex3.toString();
      complex3.sqrt1z();
      complex9.log();
      complex12.multiply(26.06);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.pow(complex1);
      complex3.I.getField();
      Complex complex4 = complex0.INF.divide(complex1);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.INF.cos();
      Complex complex7 = complex6.ONE.sin();
      complex7.I.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.tanh();
      complex8.ONE.cos();
      complex4.INF.add(complex5);
      complex0.I.readResolve();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex.valueOf(2.680137967689915E-304);
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = new Complex((-20.0), (-2548.199));
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.NaN;
      complex0.log();
      Complex complex4 = complex1.subtract((-20.0));
      Complex complex5 = Complex.NaN;
      complex5.add(complex1);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = Complex.valueOf((-20.0));
      complex4.sinh();
      complex2.tanh();
      complex2.pow(3495.24);
      complex7.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf((-8.987403192163559E-12));
      complex3.tan();
      Complex complex4 = complex0.subtract((-8.987403192163559E-12));
      Complex complex5 = complex0.sqrt1z();
      complex3.add(complex2);
      complex4.multiply((-2713.554122097059));
      complex5.asin();
      complex2.log();
      complex4.readResolve();
      complex4.pow((-8.987403192163559E-12));
      Complex complex6 = Complex.ONE;
      complex6.add(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(3269017.5, 1.887237361505784E-207);
      Complex complex1 = Complex.valueOf((-960.43612787), 3269017.5);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.divide(Double.NaN);
      Complex complex4 = complex1.add(complex0);
      complex4.getArgument();
      complex1.sinh();
      complex3.multiply(complex2);
      complex0.cos();
      complex2.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      complex0.add(20.0);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.680137967689915E-304);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.add(complex1);
      Complex complex3 = new Complex((-2319.471144040405));
      complex3.getArgument();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.multiply(complex1);
      complex0.cos();
      complex5.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 22.6031);
      complex0.getArgument();
      complex0.sinh();
      Complex complex1 = new Complex(22.6031, 22.6031);
      Complex complex2 = complex0.cos();
      complex0.sqrt();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.068647541530525E13), 3.403564176796395E12);
      Complex.valueOf(26.06, 26.06);
      Complex complex2 = complex0.multiply(complex1);
      complex2.tan();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.subtract((-2713.554122097059));
      complex2.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex3.add(complex5);
      complex0.multiply((-1338.0205465121785));
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.ZERO;
      complex4.readResolve();
      Complex complex8 = complex5.pow(51.1302889899);
      complex8.add(complex2);
      complex6.subtract(789.6006544477705);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-1338.0205465121785));
      complex0.INF.sqrt1z();
      complex2.toString();
      complex2.log();
      complex0.acos();
      complex0.pow(complex2);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex1.sin();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.pow(complex3);
      complex5.NaN.abs();
      complex0.tan();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(3269017.5, 1.887237361505784E-207);
      Complex complex1 = Complex.valueOf((-960.43612787), 3269017.5);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.divide((-960.43612787));
      complex3.add(complex2);
      complex0.getArgument();
      Complex complex4 = Complex.NaN;
      complex2.multiply(complex4);
      complex4.cos();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf(3269017.5);
      complex6.reciprocal();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex.valueOf(2.680137967689915E-304);
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex1.INF.getField();
      Complex complex3 = Complex.valueOf((-2291.25691));
      complex1.getImaginary();
      complex2.getArgument();
      complex3.sinh();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-960.43612787), (-960.43612787));
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.tan();
      complex0.subtract(0.0);
      Complex complex3 = complex0.sqrt1z();
      complex2.add(complex3);
      complex1.multiply((-1.642361029990822E65));
      complex1.asin();
      Complex complex4 = complex0.log();
      complex2.readResolve();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2338823922832467E-200);
      Complex complex1 = new Complex(1.2338823922832467E-200);
      Complex complex2 = complex0.ONE.tan();
      complex2.I.getField();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.divide(complex3);
      complex3.NaN.pow(20.0);
      complex4.ZERO.negate();
      complex1.NaN.exp();
      complex4.nthRoot(1930779291);
      Complex complex5 = complex1.sin();
      complex5.ZERO.acos();
      Complex complex6 = complex1.createComplex(22026.46484375, 1930779291);
      Complex complex7 = null;
      try { 
        complex6.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.log();
      Complex complex5 = complex0.divide((-20.0));
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex1.tan();
      complex0.getArgument();
      Complex complex8 = complex5.add(complex6);
      Complex complex9 = Complex.I;
      complex9.multiply(complex7);
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex6.pow(507.34212568765);
      complex4.atan();
      complex7.divide(506.834949042);
      complex10.log();
      Complex complex12 = complex2.log();
      complex8.add(complex5);
      complex12.conjugate();
      complex11.tan();
      complex1.multiply((-369));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-3979.0204));
      Complex complex2 = complex1.I.sqrt1z();
      complex0.abs();
      complex0.getImaginary();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ONE.add(1.0);
      complex1.ZERO.exp();
      complex0.NaN.add(complex2);
      Complex complex6 = complex1.subtract(3.058997113995161E-8);
      complex5.isInfinite();
      complex0.tanh();
      complex0.log();
      complex4.subtract(1.0);
      complex1.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex0.toString();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.sin();
      complex6.pow(complex2);
      complex3.getArgument();
      complex4.tan();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1162.90648, 0.0);
      Complex complex1 = complex0.I.pow(0.0);
      complex0.NaN.getField();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.exp();
      complex2.add(complex4);
      complex4.subtract(3.058997113995161E-8);
      complex3.isInfinite();
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.NaN;
      complex6.log();
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.sinh();
      complex4.tanh();
      complex5.pow(3495.24);
      complex9.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.getArgument();
      Complex complex2 = complex0.add(complex0);
      complex0.multiply(complex1);
      complex2.sqrt1z();
      Complex.valueOf(2.271209716796875, 1.5707963267948966);
      complex0.pow(4325.0);
      Complex complex3 = Complex.valueOf(0.6931470632553101, 4325.0);
      Complex complex4 = complex3.atan();
      complex3.ONE.acos();
      Complex complex5 = complex1.divide(4325.0);
      Complex complex6 = complex4.log();
      complex5.log();
      Complex complex7 = Complex.INF;
      complex7.add(complex0);
      complex6.conjugate();
      complex0.tan();
      complex7.multiply(604);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4325.0));
      complex1.abs();
      Complex complex2 = complex0.divide((-4325.0));
      complex0.nthRoot(3435);
      Complex complex3 = complex0.pow((-4325.0));
      complex1.add(complex2);
      complex2.getArgument();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.multiply(complex1);
      complex3.cos();
      complex2.getImaginary();
      complex5.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf((-4.068233003401932E-9), 0.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex.valueOf(2004.4);
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2004.4, 20.0);
      complex1.tanh();
      complex1.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-3979.0204));
      Complex complex2 = complex1.I.sqrt1z();
      complex0.abs();
      complex0.getImaginary();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ONE.add(1.0);
      complex1.ZERO.exp();
      complex0.NaN.add(complex2);
      complex1.subtract(3.058997113995161E-8);
      complex5.isInfinite();
      Complex complex6 = complex0.tanh();
      complex0.log();
      Complex complex7 = complex4.subtract(1.0);
      Complex complex8 = complex7.ZERO.add(complex2);
      complex7.divide(complex8);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.I.atan();
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.add(complex0);
      complex0.getArgument();
      complex0.sinh();
      complex0.multiply(complex1);
      Complex complex2 = complex1.cos();
      complex2.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      complex0.toString();
      Complex complex1 = new Complex(2004.4);
      Complex complex2 = complex1.log();
      complex1.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.ONE;
      complex4.asin();
      complex1.pow(complex0);
      complex4.I.sqrt();
      Complex complex5 = Complex.NaN;
      complex5.sin();
      Complex complex6 = complex4.pow(complex5);
      complex0.getArgument();
      complex6.tan();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      double double0 = (-20.0);
      Complex complex1 = complex0.divide((-20.0));
      int int0 = 80795713;
      // Undeclared exception!
      complex1.nthRoot(80795713);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex1.INF.getField();
      Complex complex3 = Complex.valueOf((-2291.25691));
      complex3.NaN.divide(0.0);
      complex2.abs();
      complex1.createComplex(1.0, 1.0);
      complex0.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex3.NaN.createComplex(6.283185307179586, 6.283185307179586);
      Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      complex1.getArgument();
      Complex complex5 = complex4.acos();
      complex5.divide(859.16649311602);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1182.782));
      Complex complex2 = complex1.NaN.subtract((-1182.782));
      complex2.INF.tan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.add((-1182.782));
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = Complex.valueOf((-1182.782));
      Complex complex7 = complex6.ONE.pow(complex3);
      Complex complex8 = complex4.NaN.pow((-1182.782));
      Complex complex9 = complex5.I.multiply((-2290));
      complex9.INF.sqrt1z();
      complex9.ONE.getArgument();
      Complex complex10 = Complex.INF;
      complex10.cosh();
      complex3.pow(complex10);
      Complex.valueOf(0.0, 0.0);
      complex0.atan();
      complex9.sqrt1z();
      Complex complex11 = complex0.acos();
      complex11.subtract(complex2);
      Complex complex12 = complex7.sqrt1z();
      complex8.subtract(complex12);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add(5.906102862953403E-195);
      complex0.ONE.conjugate();
      Complex complex1 = complex0.createComplex(6.283185307179586, 0.0);
      Complex complex2 = complex1.I.negate();
      complex1.getField();
      complex0.equals(complex1);
      Complex complex3 = complex1.ONE.tan();
      complex0.log();
      complex1.add(0.0);
      Complex complex4 = complex1.subtract(0.0);
      complex4.NaN.atan();
      complex2.log();
      complex2.subtract((-2993.745396699));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = complex0.I.atan();
      complex1.INF.multiply(3408);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
      complex0.multiply(0);
      Complex complex4 = complex1.ONE.multiply((double) 3408);
      complex4.I.reciprocal();
      complex3.sinh();
      complex1.multiply(309.1817325865);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf(562.90391806601);
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex5.ONE.sin();
      complex4.ONE.exp();
      complex5.INF.hashCode();
      Complex complex7 = Complex.ZERO;
      complex1.I.add(complex7);
      complex0.multiply(2345);
      complex5.INF.atan();
      complex0.INF.sqrt();
      complex3.getReal();
      complex4.toString();
      complex6.multiply(complex3);
      complex1.pow(2579.04);
      complex2.getField();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1136.0));
      Complex complex1 = complex0.NaN.acos();
      complex0.abs();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.cosh();
      complex3.I.createComplex(1123.0586, 1562.259);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.divide(complex2);
      complex5.exp();
      complex5.ONE.abs();
      complex1.multiply(0.0);
      complex0.equals(complex2);
      Complex complex6 = complex4.pow((-1136.0));
      complex6.I.exp();
      Complex complex7 = complex0.subtract(1136.0);
      complex7.multiply(1136.0);
      complex7.ONE.cosh();
      complex2.sqrt();
      complex2.abs();
      complex7.createComplex(1.77227783203125, 0.0);
      Complex complex8 = complex3.pow(1136.0);
      complex7.tan();
      Complex complex9 = complex8.tan();
      complex9.pow(5.166420404109835E-55);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1973.5360218477651);
      Complex complex1 = complex0.pow(0.0);
      complex1.NaN.log();
      complex1.ZERO.toString();
      Complex complex2 = Complex.valueOf(1973.5360218477651, 1973.5360218477651);
      Complex complex3 = complex1.multiply(0);
      complex3.ONE.sqrt1z();
      Complex.valueOf((double) 0);
      complex3.equals(complex1);
      complex2.createComplex(0, 978.5);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.log();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(1408.788, 0.0);
      complex0.ONE.hashCode();
      Complex complex4 = complex0.log();
      complex3.isInfinite();
      complex4.ONE.divide(complex0);
      Complex complex5 = complex4.subtract((-345.8894732413929));
      complex2.ZERO.cosh();
      complex5.INF.negate();
      complex1.getArgument();
      complex5.ZERO.multiply((-1.5707963267948966));
      complex2.multiply((-1.0));
      Complex complex6 = complex1.add(complex2);
      complex6.I.pow((-1.0));
      complex5.INF.sqrt();
      try { 
        complex6.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.log();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex1.createComplex(1.7712635751001657E127, 1028.444607631);
      complex0.tanh();
      complex2.subtract(complex1);
      complex3.getReal();
      Complex.valueOf(1.7712635751001657E127, 0.38574057817459106);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1162.90648, 0.0);
      complex0.I.pow(0.0);
      complex0.NaN.getField();
      Complex complex1 = complex0.subtract(0.0);
      complex1.tan();
      try { 
        complex0.nthRoot((-379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -379
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-407.0566636405));
      Complex complex2 = complex1.ONE.createComplex((-3305.6), (-407.0566636405));
      complex0.getReal();
      complex2.ONE.sinh();
      Complex complex3 = complex1.ZERO.pow(1.132042407989502);
      complex3.ONE.acos();
      complex0.isNaN();
      Complex complex4 = complex1.createComplex(2897.0, (-20.0));
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex4.cosh();
      complex6.getField();
      Complex complex7 = complex6.tanh();
      complex7.ZERO.tan();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.ONE.acos();
      complex5.readResolve();
      complex8.getReal();
      complex0.exp();
      complex0.multiply(1406);
      complex4.hashCode();
      complex0.add((double) 1406);
      complex9.subtract(complex1);
      complex2.add(2.7002575714977818E-8);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-1338.0205465121785));
      complex0.divide((-1338.0205465121785));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.divide((-1338.0205465121785));
      Complex complex4 = complex0.ZERO.conjugate();
      complex2.I.tan();
      complex3.getArgument();
      complex3.add(complex0);
      Complex complex5 = complex1.multiply(complex2);
      complex5.NaN.sqrt1z();
      Complex complex6 = complex5.I.pow(-0.0);
      complex1.INF.atan();
      Complex complex7 = complex0.divide(0.0);
      complex3.log();
      complex4.log();
      complex7.add(complex5);
      complex5.conjugate();
      complex6.tan();
      complex1.multiply(604);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6931470632553101, 0.6931470632553101);
      Complex complex1 = complex0.ZERO.divide(598.2604024352);
      Complex complex2 = complex1.ONE.divide((-1603.3134781825));
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = Complex.valueOf((-372.17362308106));
      complex2.cos();
      Complex complex5 = complex0.cos();
      complex5.ZERO.reciprocal();
      Complex complex6 = complex4.cosh();
      complex6.ONE.hashCode();
      Complex complex7 = complex2.add(complex1);
      complex7.INF.cos();
      complex0.getArgument();
      complex0.asin();
      complex4.readResolve();
      complex1.sqrt1z();
      complex2.cos();
      complex0.reciprocal();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1079.014811942, 1.2904307529671472E-176);
      Complex complex1 = Complex.I;
      complex1.INF.abs();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex1.INF.sqrt();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.ZERO.pow((-2976.75914562535));
      Complex complex8 = Complex.INF;
      Complex complex9 = complex0.add(complex8);
      complex2.ONE.pow(1079.014811942);
      Complex complex10 = complex3.conjugate();
      complex10.equals(complex9);
      complex4.isNaN();
      Complex complex11 = complex2.INF.sin();
      complex11.ZERO.pow(complex8);
      complex3.toString();
      complex10.ONE.add(complex9);
      complex7.ZERO.multiply((-2976.75914562535));
      complex2.getField();
      complex10.I.tan();
      complex8.atan();
      complex6.subtract(complex10);
      complex7.equals(complex1);
      complex5.subtract(1.2904307529671472E-176);
      complex8.sin();
      Complex.valueOf(0.0, (-174.377372932718));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(712.4119876968896, 0.0);
      complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.I.add(0.0);
      complex3.I.hashCode();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.add(complex0);
      complex0.hashCode();
      Complex complex7 = complex1.tanh();
      complex7.INF.pow(712.4119876968896);
      complex5.ZERO.sinh();
      Complex complex8 = complex1.INF.multiply(1);
      complex8.divide(complex6);
      complex0.createComplex(0.0, 2.680137967689915E-304);
      complex2.add(712.4119876968896);
      complex4.negate();
      complex6.equals(complex1);
      complex6.nthRoot(1);
      Complex complex9 = complex6.log();
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex10.exp();
      complex11.INF.atan();
      complex11.createComplex(0.0, 2.680137967689915E-304);
      complex5.isNaN();
      complex4.getField();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.068233003401932E-9), 0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.multiply(1);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2004.4);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-2872.286));
      complex0.ONE.toString();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.I.conjugate();
      complex3.ZERO.divide(0.0);
      complex3.ZERO.getField();
      Complex complex4 = complex0.cosh();
      complex4.NaN.readResolve();
      complex4.I.readResolve();
      Complex complex5 = complex1.divide(complex4);
      complex5.INF.readResolve();
      Complex complex6 = Complex.valueOf(304.9985);
      Complex complex7 = complex6.ZERO.log();
      complex2.isInfinite();
      complex0.getField();
      Complex complex8 = complex2.acos();
      complex7.getReal();
      complex8.NaN.log();
      complex1.toString();
      complex7.add(304.9985);
      complex8.abs();
      complex2.equals("/pTY@:A_+");
      complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1111.46673745318);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.NaN.asin();
      complex3.NaN.negate();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex0.ZERO.sqrt1z();
      complex5.ONE.abs();
      complex0.NaN.atan();
      Complex complex6 = complex0.exp();
      complex1.hashCode();
      Complex complex7 = complex1.divide(complex0);
      complex7.abs();
      complex5.equals((Object) null);
      complex4.log();
      Complex complex8 = complex0.sqrt1z();
      complex8.divide(2.0);
      complex6.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = new Complex((-511.40051513), (-511.40051513));
      Complex complex2 = complex1.NaN.add((-511.40051513));
      Complex complex3 = complex0.add(complex1);
      complex3.ZERO.sinh();
      complex1.getImaginary();
      Complex complex4 = complex0.multiply((-1593));
      complex4.getReal();
      Complex complex5 = complex1.createComplex((-4622.23321027), (-1593));
      Complex complex6 = complex1.asin();
      complex6.ONE.divide(complex0);
      Complex complex7 = Complex.valueOf(9.894571625944288E-229);
      complex7.I.multiply(complex0);
      Complex complex8 = complex5.NaN.multiply(1394.619455206);
      Complex complex9 = complex5.INF.sqrt();
      complex4.acos();
      complex2.createComplex(81.636863246, 1394.619455206);
      complex9.tan();
      complex5.pow((-511.40051513));
      complex1.add(complex8);
      complex8.createComplex(842.0, 759.21);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.NaN.pow(860.682885);
      Complex complex1 = Complex.valueOf((-1.0), 5.8378869339035456E-257);
      complex1.getField();
      Complex complex2 = new Complex((-208.9871));
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.ONE.add(complex0);
      complex1.isInfinite();
      Complex complex5 = complex2.ZERO.pow(complex0);
      complex3.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex5.add((-3540.588930851629));
      complex7.isNaN();
      complex1.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.createComplex(2.2823266983032227, 1393.9483423022);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.sqrt();
      complex4.ZERO.hashCode();
      complex0.isNaN();
      complex2.readResolve();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex5.negate();
      complex7.NaN.acos();
      Complex complex8 = complex7.INF.cosh();
      complex6.I.getField();
      Complex complex9 = complex7.add(complex1);
      Complex complex10 = complex8.ZERO.tan();
      Complex complex11 = complex7.tanh();
      complex6.exp();
      Complex complex12 = complex8.acos();
      complex12.sqrt();
      Complex complex13 = complex9.tan();
      complex4.subtract(4826.0);
      complex13.ONE.atan();
      complex5.INF.readResolve();
      Complex complex14 = complex13.cosh();
      complex14.I.abs();
      complex1.multiply(complex12);
      Complex complex15 = complex10.subtract(complex11);
      complex6.log();
      complex8.createComplex(Double.POSITIVE_INFINITY, 2.2823266983032227);
      complex11.asin();
      complex15.toString();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sinh();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ONE.atan();
      complex3.atan();
      Complex complex4 = complex0.NaN.atan();
      complex4.INF.sin();
      Complex.valueOf(956.1478838319318, 956.1478838319318);
      complex0.getArgument();
      complex0.isNaN();
      Complex complex5 = complex3.add(complex0);
      complex5.sinh();
      complex2.negate();
      complex5.abs();
      Complex complex6 = complex1.pow(1.7853981633974483);
      complex3.I.subtract(0.0);
      complex4.pow(956.1478838319318);
      complex6.toString();
      complex3.add(956.1478838319318);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex0.equals((Object) null);
      Complex complex2 = complex0.multiply(Double.NaN);
      complex1.getReal();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.sinh();
      complex5.NaN.nthRoot(2631);
      complex4.equals(complex5);
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex3.exp();
      complex7.ONE.add(complex6);
      complex5.getField();
      complex6.ZERO.hashCode();
      Complex complex8 = Complex.valueOf((-1440.474851426));
      complex8.INF.multiply(3224);
      complex3.multiply(0);
      Complex complex9 = complex6.subtract(0.0);
      complex4.getArgument();
      Complex complex10 = complex4.add(Double.NaN);
      complex10.ONE.divide(3680.7);
      complex2.sqrt1z();
      complex8.multiply(complex9);
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(1.3748703002929688, 1.2928330898284912);
      complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = Complex.valueOf(0.0);
      complex1.getField();
      Complex complex5 = Complex.valueOf(1.2928330898284912);
      complex5.NaN.abs();
      Complex complex6 = Complex.valueOf(1.2928330898284912, 1.3748703002929688);
      Complex complex7 = complex2.subtract(1.2928330898284912);
      complex7.NaN.log();
      complex6.getArgument();
      complex1.getReal();
      complex6.I.acos();
      complex3.asin();
      complex3.readResolve();
      complex3.cosh();
      complex4.divide(20.0);
      complex6.cosh();
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.INF.divide(Double.NaN);
      complex1.I.nthRoot(3435);
      complex1.NaN.pow((-339.476));
      Complex complex2 = complex1.ONE.add(complex0);
      complex2.ZERO.getArgument();
      Complex complex3 = complex2.INF.sinh();
      complex3.ZERO.multiply(complex2);
      Complex complex4 = complex0.cos();
      complex4.getImaginary();
      complex0.sqrt();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.readResolve();
      complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex2.I.log();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.ONE.createComplex(1.0, 0.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.I.subtract(complex1);
      complex2.isInfinite();
      complex5.getField();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex1.cosh();
      complex7.multiply(0.0);
      complex3.NaN.divide(complex1);
      Complex complex9 = Complex.valueOf(1.0);
      complex9.ZERO.tan();
      complex8.multiply(complex9);
      complex5.ZERO.nthRoot(128);
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex5.cos();
      complex10.equals(complex11);
      Complex complex12 = Complex.valueOf(0.0);
      complex12.isNaN();
      complex6.ZERO.subtract(complex12);
      complex6.createComplex(128, 3333.0);
      complex2.getArgument();
      complex9.nthRoot(128);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(3269017.5, 1.887237361505784E-207);
      Complex complex1 = Complex.valueOf((-960.43612787), 3269017.5);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.NaN.tan();
      complex2.subtract((-2713.554122097059));
      Complex complex4 = complex0.INF.sqrt1z();
      complex4.I.add(complex1);
      complex2.ONE.multiply(0.0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.log();
      complex6.readResolve();
      complex3.pow(789.6006544477705);
      complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      complex2.createComplex((-1394.5), 0.0);
      complex2.isNaN();
      Complex complex3 = complex0.INF.sinh();
      complex3.ZERO.nthRoot(1578);
      complex2.sqrt1z();
      complex0.asin();
      complex2.sqrt();
      complex0.cosh();
      Complex complex4 = new Complex(0.0);
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-3979.0204));
      Complex complex2 = complex1.I.sqrt1z();
      complex0.abs();
      complex0.getImaginary();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ONE.add(1.0);
      complex1.ZERO.exp();
      complex0.NaN.add(complex2);
      complex1.subtract(3.058997113995161E-8);
      complex5.isInfinite();
      complex0.tanh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.subtract(1.0);
      complex7.ZERO.add(complex2);
      complex4.sinh();
      complex3.tanh();
      complex6.pow(5.4468361834451975E-9);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1995.935713676, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ZERO.subtract(complex1);
      Complex complex3 = Complex.valueOf(2.9676011119845104E-8, 2.9676011119845104E-8);
      Complex.valueOf(0.0);
      complex0.isInfinite();
      Complex complex4 = complex3.sin();
      complex4.ONE.negate();
      Complex.valueOf(1995.935713676, 0.0);
      complex1.createComplex(0.0, 2.9676011119845104E-8);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.734665280502264E-8);
      complex0.ONE.log();
      complex0.nthRoot(41);
      Complex.valueOf(1.734665280502264E-8, 20.0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.multiply(1);
      List<Complex> list0 = complex0.ZERO.nthRoot(2296);
      assertEquals(2296, list0.size());
      
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.multiply(1194);
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      String string0 = complex1.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex0.NaN.abs();
      Complex complex3 = complex0.negate();
      complex3.isNaN();
      Complex complex4 = complex0.conjugate();
      complex4.ZERO.sin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.divide(Double.NaN);
      Complex complex7 = complex6.exp();
      assertFalse(complex5.isNaN());
      assertSame(complex7, complex6);
      
      complex4.hashCode();
      Complex complex8 = complex4.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertNotSame(complex8, complex1);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.ZERO.log();
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex3.NaN.multiply(1);
      assertFalse(complex3.isInfinite());
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex1));
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.sinh();
      complex0.getField();
      Complex complex4 = complex0.exp();
      Object object0 = complex4.readResolve();
      List<Complex> list0 = complex2.nthRoot(1017);
      assertTrue(list0.contains(complex4));
      assertEquals(1, list0.size());
      
      Complex complex5 = complex2.multiply(complex0);
      complex5.ONE.hashCode();
      Complex complex6 = complex5.NaN.add((double) 1017);
      Complex complex7 = complex5.subtract((double) 1017);
      assertSame(complex2, complex6);
      
      complex4.isInfinite();
      assertSame(complex4, complex7);
      
      Complex complex8 = complex0.acos();
      assertFalse(complex8.equals((Object)complex1));
      assertSame(complex8, complex3);
      assertTrue(complex8.equals((Object)object0));
  }
}
