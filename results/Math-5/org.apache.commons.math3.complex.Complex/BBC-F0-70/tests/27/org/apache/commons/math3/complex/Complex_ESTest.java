/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:09:14 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.tanh();
      complex2.INF.cosh();
      complex0.tanh();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(1882.1418900061033);
      complex2.tanh();
      Complex complex3 = new Complex(20.0);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(0.4986113866728328);
      Complex complex3 = Complex.NaN;
      complex0.reciprocal();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.I;
      complex1.multiply((-1311.4035997088));
      Complex complex6 = Complex.valueOf(0.4986113866728328, 20.0);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.330635250808021E64), 0.0);
      Complex complex1 = complex0.subtract((-7.330635250808021E64));
      Complex complex2 = complex1.reciprocal();
      complex1.subtract(complex2);
      Complex complex3 = complex2.multiply((-7.330635250808021E64));
      Complex complex4 = complex0.asin();
      complex3.subtract(complex2);
      Complex complex5 = complex3.atan();
      Complex.valueOf(3724.4995, 0.9021439122050865);
      complex3.nthRoot(928426670);
      Complex complex6 = complex4.sinh();
      complex6.INF.acos();
      complex0.tan();
      Object object0 = new Object();
      Complex complex7 = Complex.ONE;
      complex5.abs();
      complex0.tan();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(68.1);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.acos();
      complex3.NaN.multiply(complex1);
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex1.cosh();
      complex0.tanh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
      complex0.sinh();
      Complex complex1 = Complex.INF;
      complex1.acos();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1448.711170572, Double.NaN);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide((-7.330635250808021E64));
      complex2.sin();
      complex2.tanh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.sqrt();
      Complex.valueOf((-2189.007747114));
      Complex.valueOf((-7.330635250808021E64));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.exp();
      complex0.multiply((-1227));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2488.61195790657), 0.0);
      Complex.valueOf((-2488.61195790657));
      complex0.exp();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.divide(622.383424389023);
      complex1.sin();
      complex0.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.getReal();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-20.379365969577115), Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.sin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf((-1019.8021333920817), 3329.992329091);
      complex4.tan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.INF;
      complex3.abs();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2.5811686515808105);
      complex0.INF.toString();
      complex0.INF.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(849);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.INF.add(5.005103745740068E-8);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.I.add(complex5);
      Complex complex7 = complex6.ONE.cos();
      complex1.hashCode();
      complex1.isInfinite();
      complex1.getReal();
      Complex complex8 = complex2.log();
      Complex complex9 = complex2.ONE.sinh();
      Complex complex10 = complex9.INF.add(complex5);
      Complex complex11 = Complex.valueOf(474.9972, (double) 849);
      Complex complex12 = complex2.atan();
      complex5.NaN.tanh();
      Complex complex13 = complex12.ZERO.tanh();
      complex7.I.createComplex(474.9972, 1948.13486879014);
      complex13.INF.readResolve();
      complex13.nthRoot(849);
      Complex complex14 = complex8.pow((double) 849);
      Complex complex15 = complex3.add(complex2);
      complex7.createComplex((-2074.71665), 5.005103745740068E-8);
      complex14.pow(1948.13486879014);
      complex10.divide((-2074.71665));
      complex15.isInfinite();
      complex11.cos();
      complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(68.1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.multiply(68.1);
      Complex complex5 = complex3.asin();
      complex5.subtract(complex1);
      Complex.valueOf(68.1, 68.1);
      complex0.reciprocal();
      complex2.sinh();
      Complex complex6 = Complex.I;
      complex1.readResolve();
      Complex complex7 = Complex.NaN;
      complex7.equals(complex1);
      complex4.cosh();
      Complex complex8 = Complex.ONE;
      complex1.abs();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.exp();
      complex2.getImaginary();
      Complex complex3 = Complex.valueOf(39.400491094227334, 9.490800658395667E290);
      complex3.multiply(complex0);
      Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(68.1);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.subtract(complex2);
      Complex.valueOf(877.4452206593, 68.1);
      Complex complex6 = complex4.reciprocal();
      complex1.sinh();
      Complex complex7 = Complex.valueOf(1768.5326658999);
      complex7.tan();
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex5);
      complex2.cosh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.NaN;
      complex10.abs();
      complex6.tan();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.110444293139153);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.069443122229477), 0.5550227455);
      Complex complex1 = complex0.multiply((-1227));
      complex1.sinh();
      Complex complex2 = Complex.INF;
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex3 = complex2.cosh();
      complex3.abs();
      complex1.createComplex(Double.NaN, (-709.73236));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-47.6148274), (-47.6148274));
      complex2.sin();
      complex2.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(68.1);
      Complex complex2 = complex1.I.reciprocal();
      complex2.INF.subtract(complex1);
      Complex complex3 = complex1.multiply(68.1);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.subtract(complex1);
      Complex.valueOf(68.1, 68.1);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.reciprocal();
      complex5.sinh();
      Complex complex8 = complex1.tan();
      complex4.equals(complex8);
      Complex complex9 = complex5.cosh();
      Complex complex10 = Complex.ONE;
      complex7.abs();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.add((-7.330635250808021E64));
      complex0.INF.pow(complex1);
      Complex complex2 = new Complex(20.0, (-2110.3));
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex2.I.subtract((-2110.3));
      complex4.multiply(complex3);
      complex3.readResolve();
      complex0.isInfinite();
      Complex complex5 = Complex.ZERO;
      complex4.NaN.pow(complex5);
      Complex complex6 = complex2.pow(complex3);
      Complex complex7 = complex0.conjugate();
      complex5.getField();
      Complex complex8 = complex3.NaN.pow(complex6);
      complex7.hashCode();
      complex2.toString();
      complex4.sinh();
      complex3.tan();
      complex5.sqrt();
      Complex.valueOf(1.0, 8.90310227565917E-9);
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-3233.856690772229));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-1128.0), (-2.7267718387865538E-8));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.sinh();
      complex1.tan();
      Complex complex5 = complex1.pow(complex0);
      complex5.pow((-1747.0));
      complex5.exp();
      complex2.getArgument();
      complex4.isNaN();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = complex3.asin();
      complex1.subtract(complex0);
      complex3.ONE.abs();
      Complex complex5 = Complex.valueOf((-1616.9285), 2.110444293139153);
      Complex complex6 = complex4.I.reciprocal();
      complex2.sinh();
      complex5.tan();
      complex4.equals(complex6);
      complex2.cosh();
      complex6.abs();
      complex1.subtract(Double.NaN);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex1 = complex0.divide((-7.330635250808021E64));
      complex1.sin();
      complex1.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ZERO;
      complex2.abs();
      Complex complex4 = Complex.valueOf((-7.330635250808021E64), (-20.379365969577115));
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(96552.41906329906, 96552.41906329906);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      complex2.getArgument();
      complex2.tan();
      Complex complex3 = Complex.INF;
      complex0.multiply(2424.38479);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.valueOf((-386.230392));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.acos();
      complex7.getField();
      complex1.tan();
      Complex.valueOf((-759.546052));
      Complex complex8 = Complex.I;
      complex0.log();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-17.26800542795235));
      complex0.divide((-17.26800542795235));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.ONE;
      complex2.abs();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(164.583);
      Complex complex2 = complex1.subtract(1407.148929);
      complex2.negate();
      Complex complex3 = complex2.exp();
      try { 
        complex3.nthRoot((-387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -387
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.tanh();
      complex2.I.atan();
      Complex complex3 = Complex.I;
      complex0.getArgument();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.ONE.multiply(2220.4011);
      complex5.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.sqrt();
      complex5.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.exp();
      complex0.getArgument();
      complex7.isNaN();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.subtract((-152.73404224227127));
      Complex complex2 = complex1.ONE.divide((-152.73404224227127));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.I.add(complex0);
      complex3.NaN.getArgument();
      complex3.tan();
      Complex complex5 = Complex.INF;
      complex1.ONE.divide(complex5);
      complex3.I.multiply((-152.73404224227127));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.acos();
      complex2.getField();
      complex8.tan();
      complex4.abs();
      Complex complex9 = Complex.valueOf((-20.0), (-63.0));
      complex9.reciprocal();
      complex0.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      complex1.sinh();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.INF;
      complex2.acos();
      complex3.equals(object0);
      complex3.cosh();
      Complex complex4 = Complex.valueOf(737.19467, Double.NaN);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 1796.59;
      Complex complex1 = complex0.sqrt();
      complex0.tanh();
      double double1 = (-1589.9393987672152);
      Complex complex2 = new Complex(0.29714956051231667);
      complex2.asin();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-3128.562));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.subtract(complex1);
      complex2.exp();
      Complex complex3 = new Complex((-1.4142763934081504E-8), (-3128.562));
      complex3.hashCode();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7636451721191406);
      Complex complex1 = complex0.subtract((-20.0));
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.tan();
      complex1.equals(complex2);
      Complex complex6 = complex2.pow(complex4);
      Complex complex7 = complex6.pow(2793.80452126);
      complex7.exp();
      complex5.getArgument();
      complex4.isNaN();
      Complex complex8 = complex4.sinh();
      complex8.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex(1796.59);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex((-1589.9393987672152));
      complex7.divide((-1589.9393987672152));
      Complex complex8 = Complex.valueOf(1796.59, 1796.59);
      complex3.subtract(complex7);
      Complex.valueOf(Double.NaN, (-456.35928112401));
      Complex complex9 = complex8.sinh();
      complex9.INF.subtract((-1589.9393987672152));
      complex5.tan();
      complex2.nthRoot(392);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2081.57313));
      Complex complex2 = Complex.valueOf(591.8981947523);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.divide((-4.30610076666344E-131));
      complex1.sin();
      Complex complex6 = complex5.tanh();
      complex6.getImaginary();
      complex2.tan();
      Complex complex7 = Complex.ZERO;
      complex2.sin();
      complex6.createComplex(Double.POSITIVE_INFINITY, (-7.330635250808021E64));
      complex4.getField();
      Complex complex8 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.INF;
      complex1.getArgument();
      Complex complex2 = Complex.INF;
      int int0 = 5189;
      // Undeclared exception!
      complex0.nthRoot(5189);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.90310227565917E-9, (-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tanh();
      complex2.getImaginary();
      Complex complex3 = new Complex((-0.010408018869345823));
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.ZERO;
      complex0.sin();
      complex0.createComplex((-152.73076868310267), (-152.73076868310267));
      complex4.getField();
      Complex complex6 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.subtract((-152.73404224227127));
      Complex complex2 = complex1.ONE.divide((-152.73404224227127));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.I.add(complex0);
      complex3.NaN.getArgument();
      complex3.tan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.ONE.divide(complex5);
      Complex complex7 = complex3.I.multiply((-152.73404224227127));
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex3.sinh();
      complex6.acos();
      complex8.getField();
      complex7.tan();
      complex2.multiply(Double.NaN);
      Complex complex10 = Complex.I;
      complex9.divide((-152.73404224227127));
      complex4.divide(complex6);
      Complex complex11 = Complex.ONE;
      complex5.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.subtract((-152.73404224227127));
      Complex complex2 = complex1.ONE.divide((-152.73404224227127));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.I.add(complex0);
      Complex complex5 = complex0.acos();
      complex2.getField();
      complex0.tan();
      complex2.multiply((-490.78617888));
      Complex complex6 = Complex.I;
      complex4.divide((-152.73404224227127));
      complex5.divide(complex3);
      Complex complex7 = Complex.ONE;
      complex3.divide((-3.1447742594536976E-4));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(6.905990750285027E-8, (-20.0));
      Complex complex1 = complex0.sqrt1z();
      complex1.add(complex0);
      complex0.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex2);
      complex0.multiply((-20.0));
      complex4.cosh();
      complex4.sinh();
      complex1.acos();
      complex0.getField();
      Complex complex5 = Complex.ZERO;
      complex5.tan();
      complex5.multiply((-4.30610076666344E-131));
      Complex complex6 = Complex.I;
      complex1.divide((-4.30610076666344E-131));
      Complex complex7 = Complex.INF;
      complex7.divide(complex6);
      Complex complex8 = Complex.ONE;
      complex5.divide((-425.86752398940195));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1.1854637363747602, 305.46808448454254);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.ONE.toString();
      Complex complex3 = Complex.valueOf(1.1854637363747602);
      complex2.NaN.add(complex3);
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.244950238958056E-7);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.divide(3227733.628099845);
      Complex.valueOf(1.4629070288546933);
      Complex complex4 = complex1.multiply(3049.95402);
      complex0.ZERO.abs();
      Complex complex5 = complex3.multiply(4154);
      Complex complex6 = complex5.I.add(complex3);
      complex1.sinh();
      complex5.sqrt();
      complex1.isInfinite();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.cos();
      complex8.pow(1.244950238958056E-7);
      complex4.multiply(complex0);
      complex1.reciprocal();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex1.subtract(complex4);
      complex10.multiply(1.0);
      complex2.add(3.1447742594536976E-4);
      complex9.subtract(2280.133);
      complex6.exp();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(3227734.6281, 0.0);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.tanh();
      complex5.atan();
      Complex complex7 = Complex.I;
      complex4.getArgument();
      complex3.subtract(complex4);
      complex0.multiply(2220.4011);
      complex0.divide(0.0);
      Complex complex8 = new Complex(1.1108054575913285E-11, 1.1108054575913285E-11);
      Complex complex9 = complex8.sqrt();
      complex2.divide(complex9);
      complex3.abs();
      Complex complex10 = Complex.ONE;
      complex6.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      double double0 = 0.0;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply((-1629));
      Complex complex3 = complex0.add(3215.784513909901);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.NaN;
      complex5.toString();
      complex5.reciprocal();
      complex0.multiply(complex4);
      complex2.getArgument();
      complex4.negate();
      Complex complex6 = new Complex((-681.0129087285));
      complex6.negate();
      Complex complex7 = Complex.valueOf(1020.8644009);
      complex7.multiply((-963.3140024326));
      Complex complex8 = new Complex((-681.0129087285), Double.POSITIVE_INFINITY);
      complex8.acos();
      Complex complex9 = new Complex(5107.83827785);
      complex9.tan();
      complex2.equals(complex1);
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-6.905990750285027E-8));
      Complex complex2 = complex1.ONE.sin();
      complex2.sqrt();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex1.INF.asin();
      Complex complex6 = complex5.NaN.subtract(complex4);
      Complex complex7 = Complex.valueOf((-6.905990750285027E-8), (-6.905990750285027E-8));
      Complex complex8 = complex7.NaN.sinh();
      complex5.sqrt1z();
      complex0.readResolve();
      Complex complex9 = complex4.conjugate();
      complex9.atan();
      complex7.exp();
      complex0.hashCode();
      complex8.subtract(complex3);
      complex6.sqrt1z();
      complex6.multiply(1173.91001);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.subtract((-152.73404224227127));
      Complex complex2 = complex1.ONE.divide((-152.73404224227127));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.I.add(complex0);
      complex3.NaN.getArgument();
      complex3.tan();
      Complex complex5 = Complex.INF;
      complex1.ONE.divide(complex5);
      complex3.I.multiply((-152.73404224227127));
      complex5.cosh();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.acos();
      complex2.getField();
      complex7.tan();
      Complex complex8 = complex4.multiply((-152.73404224227127));
      Complex complex9 = Complex.I;
      complex9.divide((-3.1447742594536976E-4));
      complex8.divide(complex9);
      Complex complex10 = Complex.ONE;
      complex4.divide((-152.73404224227127));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = Complex.I;
      complex0.getArgument();
      Complex complex5 = complex0.subtract(complex1);
      complex2.subtract((-20.379365969577115));
      complex1.pow((-172.771307193418));
      Complex complex6 = complex0.multiply((-172.771307193418));
      Complex complex7 = complex6.divide(complex3);
      Complex complex8 = new Complex(1.5707963267948966, 0.06703783571720123);
      complex8.asin();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex9.pow((-172.771307193418));
      complex6.conjugate();
      complex8.sqrt1z();
      complex7.readResolve();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex10.exp();
      complex12.abs();
      complex11.hashCode();
      Complex complex13 = new Complex((-545.4070039242));
      complex13.subtract(complex0);
      Complex complex14 = complex3.sqrt1z();
      complex11.multiply(Double.POSITIVE_INFINITY);
      complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.379365969577115), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.exp();
      complex0.sinh();
      Complex complex3 = complex1.divide((-7.330635250808021E64));
      complex3.sin();
      Complex complex4 = complex3.tanh();
      complex4.getImaginary();
      complex3.tan();
      Complex complex5 = Complex.ZERO;
      complex5.sin();
      complex2.createComplex(0.0, (-5.336750604754288));
      complex3.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.log();
      complex3.negate();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex1.reciprocal();
      complex6.ONE.divide(complex1);
      Complex complex7 = complex6.INF.divide(complex5);
      Complex complex8 = complex0.add(complex6);
      complex8.readResolve();
      complex0.abs();
      complex0.log();
      complex0.ONE.getArgument();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.ONE.getArgument();
      Complex complex10 = complex7.reciprocal();
      complex9.divide(complex7);
      Complex complex11 = complex2.sqrt();
      complex8.readResolve();
      complex7.pow(complex10);
      complex11.isInfinite();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.subtract((-152.73404224227127));
      complex2.ONE.divide((-152.73404224227127));
      Complex complex3 = complex2.sqrt1z();
      complex2.I.add(complex0);
      complex3.NaN.getArgument();
      complex3.tan();
      Complex complex4 = Complex.ZERO;
      complex3.pow(complex2);
      complex1.isInfinite();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.sin();
      Complex complex2 = new Complex(1796.59);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.sinh();
      Complex complex6 = new Complex((-1589.9393987672152));
      Complex complex7 = complex6.asin();
      complex2.subtract(complex6);
      Complex complex8 = Complex.valueOf(Double.NaN, (-456.35928112401));
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex4.tan();
      complex10.equals(complex1);
      complex9.pow(complex10);
      complex8.pow(Double.NaN);
      complex10.exp();
      complex6.getArgument();
      complex1.isNaN();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6118015050888062, 0.5550227455);
      Complex complex1 = complex0.multiply((-1227));
      Complex complex2 = Complex.INF;
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex3 = complex2.cosh();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.atan();
      complex3.tan();
      complex4.getArgument();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.multiply((-5449.0));
      complex1.divide((-5449.0));
      Complex complex8 = new Complex(Double.NaN, (-5449.0));
      Complex complex9 = complex7.divide(complex4);
      complex9.abs();
      complex5.log();
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.31132614612579346, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.ZERO;
      complex3.getArgument();
      complex1.I.nthRoot(193);
      complex3.nthRoot(3158);
      Complex complex4 = complex0.sin();
      complex1.getArgument();
      complex2.sin();
      Complex complex5 = new Complex(2591.9078212277, (-498.4198265));
      Complex complex6 = complex5.add(complex1);
      complex4.acos();
      Complex complex7 = Complex.I;
      complex7.divide(complex6);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.31132614612579346, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.I.tan();
      complex0.getArgument();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.acos();
      complex5.tan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.sqrt();
      complex8.toString();
      complex7.pow(complex3);
      complex2.sqrt1z();
      Complex complex9 = complex5.sin();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.INF;
      complex10.equals(complex11);
      complex9.hashCode();
      complex6.divide(complex8);
      Complex complex12 = complex11.multiply(1);
      complex12.subtract(1.5707963267948966);
      complex4.pow(3623.42296484963);
      Complex.valueOf((-605.885537903), (double) 1);
      complex11.multiply(1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1150.8), (-1150.8));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1970.5376874918363));
      complex0.ZERO.pow((-1970.5376874918363));
      Complex.valueOf(0.0, 1973.49);
      Complex complex1 = complex0.I.negate();
      complex1.NaN.abs();
      Complex complex2 = complex0.ONE.pow(3442.16603005);
      Complex complex3 = complex0.divide((-1970.5376874918363));
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.INF.reciprocal();
      complex5.ZERO.getField();
      Complex complex6 = complex0.pow(0.0);
      complex3.add(complex1);
      Complex complex7 = Complex.I;
      complex2.equals(complex7);
      complex1.add(complex6);
      complex7.nthRoot(213);
      complex2.sqrt1z();
      complex0.subtract(0.0);
      complex7.hashCode();
      Complex complex8 = complex7.exp();
      complex8.ZERO.sin();
      Complex complex9 = complex5.asin();
      complex9.cos();
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      complex0.add(0.0);
      complex0.I.sin();
      Complex.valueOf(3453.79284);
      complex1.getField();
      complex0.NaN.abs();
      Complex complex3 = complex2.NaN.multiply((-3003.980472));
      Complex complex4 = complex3.ONE.asin();
      complex4.ONE.pow(1111.13);
      complex0.getField();
      complex0.readResolve();
      Complex complex5 = Complex.valueOf((-1917.05), (-1917.05));
      Complex complex6 = complex5.INF.sqrt1z();
      complex6.ZERO.divide(complex2);
      Complex complex7 = complex0.tan();
      complex7.nthRoot(2951);
      complex2.sqrt1z();
      Complex complex8 = complex1.cosh();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.hashCode();
      complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.conjugate();
      complex2.I.tan();
      Complex complex4 = complex3.I.pow(1.7792143821716309);
      complex4.NaN.exp();
      Complex complex5 = complex1.add((-3084.6648156));
      Complex complex6 = complex5.ONE.divide(complex3);
      Complex complex7 = complex2.NaN.multiply(complex5);
      Complex complex8 = complex5.exp();
      complex2.readResolve();
      Complex complex9 = complex1.cos();
      complex9.I.cosh();
      complex8.INF.multiply(0.0);
      complex3.getImaginary();
      complex1.acos();
      complex8.isInfinite();
      Complex complex10 = complex5.add(20.0);
      complex10.ONE.exp();
      complex2.hashCode();
      Complex complex11 = complex3.multiply((-2035));
      complex7.multiply((-1148.3404864401036));
      complex6.negate();
      complex3.cosh();
      complex11.multiply((-3084.6648156));
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = (-1549.0);
      Complex complex0 = Complex.valueOf((-1549.0));
      Complex complex1 = complex0.tan();
      complex1.getField();
      complex0.hashCode();
      Complex complex2 = complex1.add(complex0);
      int int0 = (-1);
      try { 
        complex2.INF.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex0.toString();
      Complex complex2 = complex1.tanh();
      Object object0 = new Object();
      complex0.I.multiply(complex1);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex3.I.conjugate();
      complex4.subtract(852.869903408);
      complex0.equals(object0);
      Complex complex5 = complex0.createComplex(0.0, (-905.0837611));
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.tanh();
      complex7.asin();
      complex5.NaN.abs();
      Complex complex8 = complex5.subtract(complex6);
      complex8.tanh();
      Complex complex9 = complex1.negate();
      complex9.ZERO.hashCode();
      complex0.readResolve();
      Complex complex10 = complex9.cos();
      complex10.ONE.getField();
      Complex complex11 = complex6.tan();
      complex11.INF.pow((-1868.757485615));
      complex10.tan();
      complex4.readResolve();
      complex7.hashCode();
      complex1.ZERO.divide((-1868.757485615));
      Complex complex12 = complex10.sin();
      complex12.isNaN();
      Complex complex13 = complex2.cosh();
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3185.0), 2034.83);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.divide((-3185.0));
      complex2.INF.tan();
      Complex complex3 = complex1.conjugate();
      complex3.I.pow((-4208.54708168158));
      Complex complex4 = complex1.NaN.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.INF.multiply(0.0);
      Complex complex6 = complex1.INF.divide(complex0);
      complex0.toString();
      Complex.valueOf(2034.83);
      complex6.isNaN();
      complex4.acos();
      complex4.subtract((-8.689594184775204E146));
      Complex complex7 = complex4.multiply(253);
      complex0.add(1493.65764272351);
      complex7.sin();
      complex4.sinh();
      Complex complex8 = Complex.NaN;
      complex1.add(complex8);
      Complex complex9 = complex2.multiply(1.0854897499084473);
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-784.223242));
      Complex complex1 = complex0.NaN.createComplex((-784.223242), (-784.223242));
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.I.pow((-1023.0522));
      Complex complex4 = complex0.sin();
      complex4.I.toString();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex0.ONE.acos();
      Complex complex7 = complex0.sinh();
      complex7.ZERO.subtract(2508.44);
      Complex.valueOf(1.0);
      complex0.sqrt();
      complex5.add((-784.223242));
      Complex complex8 = complex6.tan();
      complex6.equals(complex2);
      complex3.divide((-453.648784));
      complex8.toString();
      Complex.valueOf(2090.04919);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.subtract((-152.73404224227127));
      Complex complex3 = complex2.ONE.divide((-152.73404224227127));
      Complex complex4 = complex2.sqrt1z();
      complex2.I.add(complex0);
      complex4.NaN.getArgument();
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.INF;
      complex2.ONE.divide(complex6);
      complex4.I.multiply((-152.73404224227127));
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex8.acos();
      complex3.getField();
      Complex complex10 = complex9.tan();
      complex0.I.subtract((-222.858011));
      Complex complex11 = complex1.pow(0.06703783571720123);
      complex11.I.multiply(Double.NaN);
      Complex complex12 = complex2.divide(complex0);
      complex12.I.asin();
      Complex complex13 = complex6.conjugate();
      Complex complex14 = complex2.pow(Double.NaN);
      complex14.ONE.conjugate();
      complex14.sqrt1z();
      complex10.readResolve();
      Complex complex15 = complex5.conjugate();
      complex15.NaN.exp();
      complex1.hashCode();
      complex13.subtract(complex7);
      complex10.sqrt1z();
      complex9.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.637415935329794E117));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.INF.divide(complex2);
      Complex complex5 = complex2.INF.multiply(complex1);
      Complex complex6 = complex0.sqrt1z();
      complex6.NaN.sin();
      Complex complex7 = complex2.ONE.exp();
      Complex complex8 = complex7.negate();
      complex8.ONE.pow(Double.NaN);
      complex7.INF.readResolve();
      complex3.add(Double.NaN);
      Complex complex9 = complex2.INF.exp();
      complex6.I.abs();
      Complex complex10 = complex5.subtract((-5.637415935329794E117));
      complex0.INF.readResolve();
      complex0.INF.nthRoot(381);
      Complex complex11 = complex2.ONE.add(complex1);
      Complex complex12 = complex11.ZERO.log();
      complex9.add(complex4);
      complex12.ZERO.subtract(complex7);
      Complex complex13 = complex5.conjugate();
      Complex complex14 = complex5.add(complex13);
      complex14.ONE.nthRoot(381);
      complex6.abs();
      complex0.add(complex10);
      Complex complex15 = complex0.cos();
      Complex complex16 = complex2.acos();
      complex16.INF.toString();
      complex15.multiply(complex9);
      complex15.getImaginary();
      Complex complex17 = complex3.cosh();
      complex5.ONE.add(complex17);
      complex0.readResolve();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double double0 = 3.087661273836024E-193;
      Complex complex0 = Complex.valueOf(3.087661273836024E-193);
      Complex complex1 = complex0.ZERO.atan();
      complex0.ZERO.cos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.I.multiply(complex0);
      complex3.add(2.2423186335040668E-8);
      complex1.NaN.hashCode();
      Complex complex4 = complex2.I.multiply(0.0);
      try { 
        complex4.NaN.nthRoot((-1820));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,820
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.toString();
      complex0.getImaginary();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex2.ZERO.log();
      complex0.I.multiply(complex1);
      complex3.cos();
      Complex.valueOf(970.7616466639);
      complex2.ZERO.hashCode();
      complex1.I.add(complex0);
      complex1.toString();
      complex0.divide(complex1);
      complex0.getReal();
      complex3.getField();
      complex0.readResolve();
      complex0.sqrt();
      complex0.pow((-830.5169439));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(3155.9929512);
      Complex complex1 = complex0.add(3155.9929512);
      complex0.readResolve();
      Complex complex2 = complex1.sin();
      complex0.NaN.subtract(1957.085);
      complex2.INF.multiply(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.ZERO.subtract(1957.085);
      complex4.NaN.add(complex3);
      Complex complex5 = complex0.pow(complex3);
      complex5.readResolve();
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex0.NaN.cosh();
      complex4.multiply((-1832));
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex5.I.reciprocal();
      complex6.INF.toString();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex6.I.multiply(complex0);
      complex7.ONE.getArgument();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex9.negate();
      complex10.I.multiply(0.0);
      complex2.acos();
      Complex complex11 = complex6.tan();
      complex11.I.sqrt();
      complex5.toString();
      complex3.pow(complex10);
      complex10.sqrt1z();
      Complex complex12 = complex0.sin();
      complex5.equals(complex12);
      complex7.hashCode();
      Complex complex13 = complex1.divide(complex8);
      Complex complex14 = complex8.multiply(1);
      complex14.ZERO.subtract((-1117.9218));
      complex13.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.ONE.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.I.add(complex2);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.I.subtract(0.0);
      Complex complex6 = complex0.log();
      complex1.exp();
      Complex complex7 = complex6.divide(complex2);
      complex7.sinh();
      Complex complex8 = complex5.cosh();
      complex8.NaN.exp();
      complex6.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.31132614612579346, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.tanh();
      complex2.I.atan();
      Complex complex3 = complex2.I.tan();
      complex0.getArgument();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.ONE.multiply(2220.4011);
      complex5.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.sqrt();
      complex6.I.divide(complex3);
      complex0.abs();
      complex0.log();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-2236.020168927), (-1083.627034522));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = Complex.valueOf((-1083.627034522));
      Complex complex5 = complex3.NaN.pow(2383.5456446);
      complex3.ONE.getField();
      Complex complex6 = complex5.ONE.sinh();
      complex5.NaN.toString();
      complex0.hashCode();
      complex0.ONE.abs();
      Complex complex7 = complex3.I.exp();
      complex6.I.readResolve();
      complex0.hashCode();
      Complex complex8 = complex2.pow(5.073114566291778E-164);
      complex8.ONE.readResolve();
      Complex complex9 = complex1.acos();
      complex7.ZERO.subtract(complex2);
      complex1.ONE.multiply(complex4);
      Complex complex10 = complex3.multiply((-1083.627034522));
      Complex complex11 = complex7.tan();
      Complex.valueOf((-2236.020168927));
      complex1.ZERO.multiply(0);
      complex1.sinh();
      complex6.getArgument();
      complex9.multiply((-3509));
      complex9.add((-1337.225912298983));
      complex11.isNaN();
      complex7.cos();
      complex1.acos();
      complex10.divide(537.151261453435);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(653.3638391598631);
      Complex complex1 = complex0.NaN.tanh();
      complex0.readResolve();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ZERO.tan();
      complex4.ONE.createComplex(653.3638391598631, 0.0);
      complex2.acos();
      complex0.getImaginary();
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      complex1.ZERO.abs();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.multiply(94);
      complex4.ZERO.getField();
      complex4.hashCode();
      complex0.tan();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.add(0.0);
      complex2.INF.createComplex(540.2746212855966, 0.0);
      complex0.isNaN();
      complex2.ONE.pow(complex1);
      Complex complex3 = complex1.divide(0.0);
      complex2.subtract(complex3);
      complex2.I.tan();
      Complex.valueOf((-1546.55));
      complex2.add((-1.0));
      Complex complex4 = Complex.valueOf(1560.0309264891603, 0.0);
      complex4.atan();
      complex2.pow(6.283185307179586);
      complex4.getReal();
      Complex.valueOf(0.0, 5493.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.INF.exp();
      complex0.ONE.tanh();
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex4.ONE.multiply(0.0);
      Complex complex6 = complex0.NaN.multiply(0.0);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = complex0.tan();
      complex9.NaN.subtract(0.0);
      complex9.getField();
      Complex complex10 = complex9.pow(complex7);
      complex10.multiply(0.0);
      complex3.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex10.isNaN();
      Complex complex11 = complex8.sinh();
      complex1.isInfinite();
      complex9.sqrt();
      Complex complex12 = complex6.multiply(0.0);
      Complex.valueOf(0.0, (-842.352813));
      Complex complex13 = complex5.sin();
      complex11.subtract(complex13);
      complex6.log();
      complex4.nthRoot(7);
      Complex complex14 = complex3.sqrt1z();
      complex14.subtract(complex12);
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.negate();
      complex0.tan();
      Complex complex3 = complex0.divide((-1809.2102700710211));
      Complex complex4 = complex3.I.reciprocal();
      complex4.ZERO.add((-1809.2102700710211));
      complex0.createComplex((-1809.2102700710211), 3372.3676870363142);
      Complex complex5 = Complex.valueOf((-1809.2102700710211));
      Complex complex6 = complex3.add(0.0);
      complex6.ZERO.exp();
      Complex complex7 = complex0.reciprocal();
      complex3.getField();
      Complex complex8 = complex1.sqrt();
      complex8.pow(0.0);
      Complex complex9 = complex7.exp();
      complex9.ZERO.multiply(804);
      Complex complex10 = complex5.multiply((-1809.2102700710211));
      complex10.INF.tan();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex3.negate();
      Complex complex13 = complex12.INF.exp();
      Complex complex14 = complex11.multiply(complex12);
      Complex complex15 = complex2.subtract(complex12);
      complex7.ZERO.reciprocal();
      Complex complex16 = Complex.valueOf(3372.3676870363142);
      complex6.conjugate();
      complex7.divide(3372.3676870363142);
      complex15.readResolve();
      Complex complex17 = complex13.add(3372.3676870363142);
      complex14.getReal();
      complex10.pow(3602.52006061);
      complex17.atan();
      complex16.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2592.0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.exp();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.cosh();
      complex4.I.divide(0.0);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex5.ZERO.tanh();
      complex1.getImaginary();
      Complex complex7 = complex5.tan();
      complex7.sin();
      complex2.createComplex((-3790.4902662665), (-1599.352416821663));
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(1712.5865);
      Complex complex1 = complex0.sqrt();
      complex1.INF.log();
      complex1.I.add(complex0);
      complex1.hashCode();
      Complex complex2 = complex1.multiply(1712.5865);
      complex2.asin();
      Complex.valueOf(1712.5865, 2.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-2.0821912536551675E-8));
      Complex complex2 = complex1.conjugate();
      complex2.multiply(complex0);
      Complex complex3 = complex1.ZERO.pow(complex0);
      complex0.add(complex1);
      Complex complex4 = Complex.valueOf(1.177137851715088, 3912.832124699608);
      Complex complex5 = complex4.INF.subtract(complex0);
      complex0.readResolve();
      Complex complex6 = complex0.multiply(0);
      complex0.pow((double) 0);
      complex4.isNaN();
      complex5.pow(complex0);
      complex0.atan();
      complex6.log();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7636451721191406);
      complex0.subtract((-20.0));
      Complex complex1 = complex0.negate();
      complex1.exp();
      complex1.nthRoot(2503);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(68.1);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.INF.subtract(complex1);
      complex0.exp();
      complex3.hashCode();
      Complex complex4 = complex3.log();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(4225.4055314358875);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.multiply(4225.4055314358875);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = Complex.valueOf(4225.4055314358875);
      Complex complex6 = complex4.NaN.subtract(complex5);
      Complex complex7 = complex6.INF.divide((-1.4300075619643524E-298));
      complex7.INF.cosh();
      Complex complex8 = complex2.ZERO.sin();
      complex4.hashCode();
      complex1.sqrt1z();
      complex1.abs();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex2.add(complex9);
      Complex complex11 = complex4.INF.tan();
      Complex complex12 = Complex.ZERO;
      complex11.ZERO.pow(complex12);
      complex9.multiply((-2588.3367649425536));
      complex1.ZERO.add(complex0);
      Complex.valueOf(1423.9863388, 2029.87);
      Complex complex13 = complex10.add(complex8);
      complex13.reciprocal();
      complex4.exp();
      complex10.sin();
      Complex complex14 = Complex.NaN;
      Complex complex15 = Complex.valueOf(8.348870518956934);
      complex6.equals(complex14);
      complex13.getArgument();
      complex5.tan();
      complex15.multiply(1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.ZERO.cos();
      complex2.readResolve();
      Complex.valueOf(0.0, 1719.1365028254452);
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex3.ZERO.log();
      complex0.isInfinite();
      Complex complex4 = complex1.exp();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.INF.sqrt1z();
      Complex complex6 = complex5.NaN.divide(6.283185307179586);
      complex0.isInfinite();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex2.pow(4.8410188461165925E-8);
      Complex complex9 = complex8.ZERO.divide(complex4);
      complex9.INF.atan();
      Complex complex10 = complex5.ZERO.log();
      complex10.divide(complex7);
      complex3.toString();
      complex10.I.cos();
      Complex complex11 = complex6.tan();
      complex10.abs();
      complex5.readResolve();
      complex11.tanh();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.90310227565917E-9, (-20.0));
      complex0.multiply((-1227));
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.06246116757392883, 0.06246116757392883);
      complex0.NaN.subtract(0.06246116757392883);
      Complex complex1 = complex0.I.multiply(17);
      complex0.ONE.getField();
      complex1.I.toString();
      Complex complex2 = complex0.createComplex(0.0, 0.06246116757392883);
      int int0 = 0;
      try { 
        complex2.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-4270.5670347516));
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex1.pow((-4270.5670347516));
      complex4.getField();
      complex3.I.nthRoot(37);
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex5.asin();
      complex6.ONE.add((-1.1701113164306871E-7));
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.multiply((-4270.5670347516));
      complex8.asin();
      try { 
        complex3.nthRoot((-372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -372
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      complex0.NaN.getField();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex1.INF.pow((-909.7989779));
      Complex complex4 = complex0.sqrt();
      complex4.NaN.sqrt();
      complex4.I.getField();
      complex4.getArgument();
      complex1.I.abs();
      Complex complex5 = complex1.negate();
      Complex complex6 = new Complex((-909.7989779));
      complex6.INF.hashCode();
      complex6.I.multiply(0.0);
      complex0.ONE.getArgument();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex3.add(complex6);
      complex5.isNaN();
      Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      Complex complex9 = complex4.cos();
      complex2.sinh();
      Complex.valueOf(0.0, 0.0);
      complex2.sqrt();
      complex1.isInfinite();
      Complex complex10 = complex9.pow(complex2);
      complex2.INF.readResolve();
      complex7.NaN.toString();
      complex10.NaN.multiply(0.0);
      Complex complex11 = complex8.multiply(0);
      Complex complex12 = complex11.multiply(1.0);
      complex7.getField();
      complex3.tanh();
      complex12.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4142763934081504E-8), (-1796.59));
      complex0.pow((-2.607907890164073E-8));
      complex0.cosh();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex0.INF.pow(0.5226693153381348);
      Complex complex6 = Complex.valueOf((-1218.728074456));
      Complex complex7 = complex6.INF.multiply(1);
      Complex complex8 = complex7.reciprocal();
      complex8.ZERO.subtract(complex4);
      complex3.INF.sin();
      complex0.getImaginary();
      complex1.multiply(2553.5033959950165);
      complex5.I.subtract(3418.962282288573);
      complex0.getField();
      Object object0 = new Object();
      complex2.I.add(complex5);
      complex1.equals(object0);
      Complex complex9 = complex2.multiply(0.0);
      Complex complex10 = new Complex((-1218.728074456));
      complex9.equals(complex10);
      Complex complex11 = complex5.log();
      complex11.ONE.multiply(complex3);
      complex0.reciprocal();
      Complex complex12 = complex3.pow((-1218.728074456));
      Complex complex13 = complex12.I.negate();
      Complex complex14 = complex3.negate();
      Complex complex15 = complex3.asin();
      complex1.ONE.sqrt();
      complex14.sinh();
      complex15.pow(0.5226693153381348);
      complex13.negate();
      complex1.subtract(complex15);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.acos();
      complex0.ONE.multiply(complex1);
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.tanh();
      complex3.ONE.hashCode();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.ONE.conjugate();
      complex5.I.tanh();
      Complex complex6 = complex5.ONE.divide(2.0);
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex0.pow(7.536337311795176E97);
      complex8.isNaN();
      Complex complex9 = Complex.valueOf(1223.524825135);
      Complex complex10 = complex9.atan();
      Complex complex11 = complex10.ONE.divide(2.0);
      complex0.ZERO.conjugate();
      Complex complex12 = complex1.multiply(1223.524825135);
      Complex complex13 = complex12.divide(1.1178574689680927E-7);
      Complex complex14 = complex8.atan();
      Complex complex15 = complex6.sinh();
      assertFalse(complex15.isInfinite());
      
      Complex complex16 = complex13.conjugate();
      Complex complex17 = complex4.add(complex0);
      Complex complex18 = complex17.add(1223.524825135);
      assertEquals(1225.524825135, complex18.getReal(), 0.01);
      
      complex16.divide(7.536337311795176E97);
      Complex complex19 = complex9.tan();
      Complex complex20 = complex17.log();
      complex14.conjugate();
      Complex complex21 = complex11.divide(complex19);
      assertEquals(0.06308835764072392, complex21.getReal(), 0.01);
      assertEquals((-5.551115123125783E-17), complex10.getImaginary(), 0.01);
      
      Complex complex22 = complex20.acos();
      Complex complex23 = complex22.atan();
      assertEquals(3.8545352927414376, complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex22.getImaginary(), 0.01);
      assertEquals(0.6777520353751318, complex23.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex23.getImaginary(), 0.01);
      
      String string0 = complex13.toString();
      assertEquals("(0.0, 1.441445555695514E10)", string0);
      
      Complex complex24 = complex8.multiply((-1473));
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertSame(complex24, complex7);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.readResolve();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex0.I.asin();
      assertEquals(0.8813735870195428, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1);
      assertTrue(list0.contains(complex0));
      
      Complex complex5 = complex3.divide(complex2);
      complex1.createComplex((-1469.4), 1);
      assertSame(complex1, complex5);
  }
}
