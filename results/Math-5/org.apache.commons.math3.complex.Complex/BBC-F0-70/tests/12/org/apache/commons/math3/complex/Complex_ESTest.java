/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:45:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.cosh();
      complex3.I.tanh();
      Complex complex4 = complex0.multiply((-3354.348));
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.valueOf(3300.17903291, 1.2246467991473532E-16);
      complex1.cosh();
      complex5.atan();
      complex6.pow(complex3);
      try { 
        complex0.nthRoot((-995));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -995
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3621.5234895), Double.POSITIVE_INFINITY);
      complex1.multiply((-1416.71322921));
      complex0.conjugate();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1286.3464067499), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      complex3.pow(complex2);
      Complex complex4 = complex3.asin();
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ONE.pow(2119.2049348);
      Complex complex4 = complex0.multiply((-1693666955));
      complex2.INF.readResolve();
      complex4.sqrt();
      Complex.valueOf((double) (-1693666955));
      complex4.ZERO.createComplex((-1693666955), 686.64278675);
      Complex complex5 = complex2.INF.createComplex(2119.2049348, 3615.94);
      complex1.toString();
      Complex complex6 = complex4.cos();
      complex6.INF.divide(complex3);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1447.31923, (-4816.9379605));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.subtract(6.88615578404537E182);
      Complex complex6 = complex3.tanh();
      complex4.NaN.pow(1447.31923);
      Complex complex7 = complex2.subtract(1844.1020079);
      Complex complex8 = complex4.subtract(complex3);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex3.pow(complex6);
      complex4.nthRoot(1282);
      Complex complex11 = complex5.acos();
      complex10.getImaginary();
      complex10.getField();
      complex1.ONE.cos();
      complex2.add(1844.1020079);
      Complex complex12 = complex5.sqrt();
      complex1.INF.pow(complex7);
      complex8.isInfinite();
      complex4.abs();
      complex0.pow(556.76335503894);
      complex6.log();
      complex1.multiply(complex11);
      complex12.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.sin();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.3657573572345427E-4, 442);
      complex1.divide((-2107.0));
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2.0);
      complex0.INF.multiply(complex1);
      complex0.asin();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0);
      complex1.readResolve();
      Complex complex2 = new Complex(1.0025, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(158);
      Complex complex4 = complex3.add(1.1626161722233519E-7);
      complex3.abs();
      Complex complex5 = new Complex(2.0);
      complex4.exp();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.multiply((double) 37);
      complex5.acos();
      complex7.multiply((-496));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.multiply(565);
      Complex complex2 = complex1.add((double) 37);
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.pow((double) 66);
      Complex complex5 = complex1.exp();
      complex0.multiply(1.5667905313839992);
      complex4.acos();
      complex3.sinh();
      complex1.subtract(complex5);
      complex1.tanh();
      Complex complex6 = new Complex(2095.213409360602);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1154.5094562534784, (-153.381630171));
      Complex complex1 = new Complex(2.3705435424427623E169, 1566.1843131514556);
      complex1.readResolve();
      complex0.readResolve();
      complex1.multiply(66);
      Complex complex2 = complex1.add((-1.0));
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.createComplex((-153.381630171), 2.3705435424427623E169);
      Complex complex5 = complex4.pow(2.3705435424427623E169);
      complex5.exp();
      Complex complex6 = complex4.multiply(1154.5094562534784);
      Complex complex7 = Complex.valueOf(20.0, 1566.1843131514556);
      complex7.multiply(0);
      Complex complex8 = complex2.acos();
      complex5.sinh();
      complex6.subtract(complex3);
      complex0.nthRoot(884);
      complex2.tanh();
      Complex complex9 = new Complex(884);
      Complex complex10 = complex1.sinh();
      complex10.sqrt1z();
      complex8.log();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1582.74125);
      complex0.readResolve();
      Complex complex1 = complex0.multiply(3093);
      Complex complex2 = complex1.add((double) 37);
      Complex complex3 = new Complex((-20.0), 3093);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.pow(20.0);
      complex0.getArgument();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex5.multiply(20.0);
      complex7.multiply(66);
      Complex complex9 = complex8.acos();
      complex9.sinh();
      complex4.subtract(complex7);
      complex0.multiply((double) 83);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      complex1.NaN.sinh();
      complex0.sqrt1z();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3996.187997);
      Complex complex1 = complex0.add((-1146.964));
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.pow((-1414.878194227));
      Complex complex4 = Complex.ONE;
      complex4.getArgument();
      Complex complex5 = complex2.cos();
      complex5.exp();
      complex3.multiply(1.5667905313839992);
      complex4.multiply((-940));
      complex4.acos();
      Complex complex6 = complex3.sinh();
      Complex complex7 = new Complex(4.983162653734032E-222);
      complex3.subtract(complex7);
      complex6.nthRoot(83);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.multiply((-357));
      Complex complex2 = complex0.multiply((-1546.558346766));
      complex0.divide((-20.0));
      complex0.isInfinite();
      Complex complex3 = complex0.asin();
      double double0 = 279.935322782;
      complex3.createComplex(279.935322782, 4.916314210412424E-9);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1141.4143767572));
      complex0.readResolve();
      complex0.readResolve();
      Complex complex1 = complex0.multiply(66);
      Complex complex2 = complex1.add((double) 37);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.pow(1.5667905313839992);
      complex2.getArgument();
      complex4.cos();
      complex2.exp();
      Complex complex5 = complex0.multiply(1.5667905313839992);
      complex0.multiply(856);
      complex5.acos();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex3.subtract(complex0);
      complex7.nthRoot(37);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1.0413759887481643E23);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.tanh();
      complex4.readResolve();
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.valueOf((-584.0), 1.0);
      Complex complex8 = complex2.add(complex5);
      Complex complex9 = complex4.tanh();
      complex6.toString();
      complex3.tan();
      Complex complex10 = Complex.ZERO;
      complex0.subtract(complex3);
      complex3.log();
      Complex complex11 = complex3.sin();
      complex8.sqrt1z();
      Complex complex12 = complex7.divide(1.0413759887481643E23);
      complex0.toString();
      Complex complex13 = complex12.reciprocal();
      complex9.conjugate();
      Complex complex14 = complex6.exp();
      Complex complex15 = complex14.conjugate();
      Complex complex16 = complex14.divide(3144.0);
      complex3.asin();
      Complex complex17 = complex16.subtract(complex15);
      complex1.atan();
      complex11.toString();
      Complex complex18 = new Complex(3144.0);
      complex18.toString();
      Complex complex19 = complex13.pow(complex11);
      complex19.multiply(Double.POSITIVE_INFINITY);
      complex17.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.multiply(83);
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.subtract((-348.79));
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.asin();
      complex2.multiply(1.4491061945808172E7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.abs();
      Complex complex1 = complex0.tan();
      complex0.nthRoot(4683);
      complex1.nthRoot(4683);
      Complex complex2 = complex0.exp();
      complex1.getField();
      Complex complex3 = complex2.subtract(1019.966809752);
      complex3.ZERO.reciprocal();
      complex3.createComplex((-29.248816323777376), 2.0);
      Complex complex4 = Complex.INF;
      complex4.INF.tan();
      complex4.I.getArgument();
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex5.ZERO.divide(complex0);
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = new Complex(20.0, 20.0);
      complex0.pow(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.tanh();
      complex0.readResolve();
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      Complex complex7 = complex4.add(complex0);
      complex6.tanh();
      complex1.toString();
      Complex complex8 = complex3.tan();
      complex8.tanh();
      complex1.cos();
      Object object0 = new Object();
      Complex complex9 = new Complex(2175.317906246, (-2.4921733203932487E-10));
      complex7.add(20.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      complex2.log();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.divide((-436.0396306336153));
      complex1.toString();
      Complex complex7 = Complex.INF;
      complex7.reciprocal();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = Complex.I;
      Complex complex10 = complex2.exp();
      Complex complex11 = Complex.NaN;
      complex7.conjugate();
      complex11.divide((-436.0396306336153));
      complex3.asin();
      complex7.subtract(complex4);
      Complex complex12 = Complex.NaN;
      complex12.atan();
      complex8.toString();
      complex7.toString();
      complex8.pow(complex11);
      complex6.divide((-436.0396306336153));
      Complex complex13 = new Complex(38.803050883202616, Double.NaN);
      complex10.tanh();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1.105818748474121, 1.105818748474121);
      Complex complex1 = complex0.tanh();
      complex1.I.createComplex(1.105818748474121, 1.105818748474121);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.createComplex(20.0, (-131.55));
      complex0.equals(complex3);
      complex3.cos();
      Complex complex4 = Complex.ZERO;
      complex4.subtract(complex0);
      complex4.reciprocal();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      double double0 = (-480.9182778292);
      Complex complex1 = complex0.conjugate();
      complex0.divide(2234.549582648);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.subtract(complex1);
      complex2.atan();
      complex0.toString();
      complex0.toString();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.exp();
      complex0.divide(complex1);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.tanh();
      complex3.divide(complex1);
      complex1.equals(complex3);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.nthRoot(99);
      complex0.I.hashCode();
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.pow(1.976868146639626E196);
      complex2.sqrt1z();
      Complex complex3 = complex0.sqrt();
      complex3.NaN.acos();
      try { 
        complex0.nthRoot((-1906));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,906
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.41421356237309515);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.atan();
      complex1.abs();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.ZERO.sqrt();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.asin();
      complex2.I.multiply(complex4);
      Complex complex7 = complex5.I.multiply(20.0);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex5.NaN.subtract(20.0);
      complex9.ZERO.sin();
      complex2.ZERO.hashCode();
      Complex complex10 = complex9.I.add(20.0);
      Complex complex11 = complex10.I.multiply(20.0);
      Complex complex12 = complex6.negate();
      complex6.INF.conjugate();
      complex6.divide((-3452.95498));
      complex12.isInfinite();
      complex1.getField();
      Complex complex13 = complex2.divide(20.0);
      complex3.cosh();
      Complex complex14 = complex8.log();
      complex14.readResolve();
      complex13.cos();
      complex1.readResolve();
      complex9.tanh();
      complex11.subtract(complex12);
      complex6.exp();
      complex7.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex1.ZERO.subtract(2.2056355476379395);
      Complex complex4 = complex1.NaN.tanh();
      complex0.INF.subtract(2.2056355476379395);
      Complex complex5 = complex4.NaN.subtract(complex0);
      complex4.ONE.sin();
      complex0.NaN.pow(complex3);
      complex5.exp();
      complex1.divide(complex3);
      complex4.exp();
      int int0 = 1073741824;
      // Undeclared exception!
      complex2.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.multiply(83);
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      complex1.pow(complex0);
      Complex complex2 = complex1.exp();
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1584.9757929126254, 0.8807715435552965);
      Complex complex1 = complex0.INF.reciprocal();
      complex1.NaN.multiply(complex0);
      complex1.I.tan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ZERO.atan();
      Complex.valueOf(1584.9757929126254, 0.8807715435552965);
      complex2.sqrt1z();
      Complex.valueOf(1584.9757929126254, (-3532.0));
      complex2.toString();
      complex3.createComplex(4.0682234376511035, 4.0682234376511035);
      Complex complex4 = complex3.sin();
      complex4.ONE.negate();
      complex4.NaN.getField();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.INF.multiply((-2721.9986));
      complex6.ONE.readResolve();
      complex3.tan();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2.3273415565490723, 2.3273415565490723);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ZERO.add(1.0696094577483825E-7);
      complex1.isInfinite();
      complex1.abs();
      Complex complex3 = complex0.pow(2.3273415565490723);
      complex3.log();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 2.3273415565490723);
      complex0.tanh();
      complex4.cosh();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      complex0.reciprocal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt1z();
      complex1.getArgument();
      complex1.multiply(complex2);
      Complex complex3 = complex1.multiply(37);
      complex1.getArgument();
      Complex complex4 = complex1.add(0.0);
      complex3.log();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex0.nthRoot(4683);
      complex1.nthRoot(4683);
      Complex complex3 = complex0.exp();
      complex1.nthRoot(1);
      Complex complex4 = complex0.acos();
      complex3.getImaginary();
      complex1.getField();
      Complex complex5 = complex3.add(Double.NaN);
      complex2.isInfinite();
      complex4.abs();
      Complex complex6 = complex5.pow(Double.NaN);
      Complex complex7 = complex2.log();
      complex6.multiply(complex2);
      Complex complex8 = new Complex(Double.NaN, 1);
      complex7.tan();
      Complex complex9 = Complex.I;
      complex9.tanh();
      complex3.cosh();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = complex0.reciprocal();
      complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.subtract(2.2056355476379395);
      Complex complex3 = complex1.NaN.tanh();
      complex0.INF.subtract(2.2056355476379395);
      complex3.NaN.subtract(complex0);
      complex3.ONE.sin();
      Complex complex4 = complex0.NaN.pow(complex2);
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(2.3273415565490723, 2.3273415565490723);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.cos();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      complex0.cos();
      Complex complex1 = Complex.ONE;
      complex1.readResolve();
      Complex complex2 = Complex.ONE;
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-4.916314210412424E-9), 6.283185307179586);
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.equals(complex0);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1737.5800589903, (-8.204903560604627E-9));
      complex0.createComplex((-2108.666018795), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.createComplex((-0.001189668938194427), (-20.0));
      Complex complex2 = complex1.sqrt1z();
      complex0.getArgument();
      complex2.divide(3.141592653589793);
      Complex complex3 = new Complex(2.0);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = new Complex(411.01);
      complex5.cos();
      complex3.log();
      Complex complex6 = new Complex((-914.05069), 3.141592653589793);
      complex6.pow(complex5);
      complex1.hashCode();
      complex4.isNaN();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = new Complex(411.01, 6.283185307179586);
      complex8.cosh();
      complex7.getImaginary();
      Complex complex9 = new Complex((-2038.2));
      complex9.createComplex((-750.8939130077), (-914.05069));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2809.118146), 1.5707963267948966);
      Complex complex1 = complex0.subtract((-2809.118146));
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = complex2.sin();
      complex1.pow(complex0);
      Complex complex4 = complex1.exp();
      complex2.divide(complex4);
      Complex complex5 = complex3.exp();
      complex0.tanh();
      Complex complex6 = Complex.valueOf(1.0);
      complex5.divide(complex6);
      Complex.valueOf((-1.0), (-8.880302882034106E-8));
      complex0.add((-508.74288));
      Complex complex7 = Complex.INF;
      complex7.atan();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.03006922239047917);
      Complex complex1 = complex0.pow(0.03006922239047917);
      Complex complex2 = complex0.cos();
      complex2.INF.hashCode();
      Object object0 = complex1.readResolve();
      complex2.I.add(1.3677729802316034E227);
      complex0.equals(object0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex4.INF.multiply(complex2);
      Complex complex6 = complex3.ONE.pow(5.092753117288608E212);
      complex4.NaN.multiply(complex3);
      complex4.readResolve();
      Complex complex7 = complex4.multiply(0.03006922239047917);
      complex7.ZERO.multiply(complex2);
      Complex complex8 = complex7.atan();
      Complex.valueOf(5.092753117288608E212, (-2.2056355476379395));
      Complex complex9 = complex6.tan();
      complex9.I.cosh();
      Complex complex10 = complex3.pow(complex2);
      complex7.NaN.subtract(complex5);
      complex10.ONE.divide(0.0);
      Complex complex11 = complex2.createComplex(0.03006922239047917, 5.092753117288608E212);
      complex11.ZERO.createComplex(1.3677729802316034E227, 5.092753117288608E212);
      complex11.subtract(5.092753117288608E212);
      Complex complex12 = complex4.cosh();
      complex12.atan();
      complex10.pow(complex2);
      complex7.add(790.068537);
      complex8.multiply((-5074.438));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 3827.002311571351;
      Complex complex0 = Complex.valueOf(3827.002311571351, 3827.002311571351);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt();
      complex1.isInfinite();
      complex2.tan();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.log();
      complex2.cosh();
      Complex complex5 = Complex.valueOf((-266.87163329749), 3827.002311571351);
      complex4.I.multiply(complex5);
      try { 
        complex0.I.nthRoot((-1036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,036
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-3355.15947945813), (-3355.15947945813));
      complex0.ONE.abs();
      complex0.abs();
      Complex complex1 = complex0.subtract((-1276.9601509));
      complex0.abs();
      Complex complex2 = complex0.multiply((-178));
      complex0.I.cos();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.I;
      complex2.equals(complex4);
      Complex complex5 = Complex.INF;
      complex5.subtract(complex2);
      complex2.pow(complex5);
      complex3.isInfinite();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2340.85162565));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(complex0);
      complex2.toString();
      Complex complex3 = complex0.log();
      complex3.toString();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.cosh();
      complex0.toString();
      Complex complex6 = complex3.log();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex6.asin();
      complex1.sinh();
      complex7.abs();
      complex8.toString();
      Complex complex9 = complex2.cosh();
      complex7.sin();
      complex9.divide(complex3);
      complex0.multiply(complex5);
      Complex complex10 = complex1.divide(2454.81375009938);
      complex10.NaN.negate();
      complex2.subtract(1526.564);
      complex0.reciprocal();
      Complex complex11 = complex9.createComplex(3670.74190804, (-2554.7077473147));
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2340.85162565));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(complex0);
      complex2.toString();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.log();
      complex0.toString();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.cosh();
      complex6.toString();
      Complex complex9 = complex3.log();
      complex4.sinh();
      Complex complex10 = complex3.asin();
      complex1.sinh();
      complex4.abs();
      complex9.toString();
      complex5.cosh();
      Complex complex11 = Complex.valueOf((-2.2056355476379395), (-1257.43284252));
      complex11.sin();
      Complex complex12 = complex4.divide(complex10);
      Complex complex13 = complex6.multiply(complex8);
      complex7.divide(2384.0);
      complex13.subtract((-2340.85162565));
      complex6.reciprocal();
      complex12.createComplex((-2.2056355476379395), 1939.87263304);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf((-2613.775970646), (-20.0));
      Complex complex2 = (Complex)complex1.readResolve();
      complex1.INF.abs();
      Complex complex3 = complex1.I.subtract(0.0);
      complex3.createComplex(0.0, (-20.0));
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.I.divide(complex5);
      complex6.I.subtract(complex4);
      complex6.I.pow(complex3);
      complex0.isInfinite();
      Complex complex7 = complex1.sqrt();
      complex0.tanh();
      Complex complex8 = Complex.I;
      complex8.divide(complex6);
      Complex.valueOf((-0.5541928921918648), 5906.025187256618);
      complex2.add(20.0);
      complex7.atan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 20.0;
      double double1 = 234.0;
      Complex complex0 = new Complex(20.0, 234.0);
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.ZERO.toString();
      Complex complex2 = complex1.I.reciprocal();
      complex2.ONE.acos();
      Complex.valueOf(234.0, 234.0);
      complex0.equals(complex1);
      Complex complex3 = complex2.exp();
      complex3.ONE.hashCode();
      try { 
        complex3.nthRoot((-462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -462
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = new Complex(1883.6751);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.subtract(2650.0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.subtract(2.0);
      Complex complex8 = complex6.subtract(complex5);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex6.pow(complex5);
      complex10.nthRoot(2843);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.acos();
      complex1.getImaginary();
      complex3.getField();
      Complex complex13 = complex7.add((-2826.80204));
      complex4.sqrt();
      complex4.isInfinite();
      complex9.abs();
      complex2.pow(0.0);
      complex13.log();
      Complex complex14 = new Complex((-186.48), 2.0);
      complex14.multiply(complex10);
      complex12.subtract(complex0);
      complex4.tan();
      complex12.tanh();
      complex9.cosh();
      complex7.cosh();
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 267.87163329749);
      Complex complex1 = complex0.ONE.sqrt();
      complex0.toString();
      Complex complex2 = complex0.sin();
      complex2.INF.toString();
      Complex complex3 = complex2.tan();
      complex3.isInfinite();
      complex1.isInfinite();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.subtract(complex2);
      complex0.hashCode();
      complex0.hashCode();
      complex4.toString();
      complex3.divide(complex0);
      complex5.add(0.0);
      Complex complex6 = new Complex(1);
      complex2.divide(complex3);
      complex4.multiply(1);
      Complex.valueOf(0.0);
      Complex.valueOf(0.3736028928213364, (double) 1);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf((-2613.775970646), (-20.0));
      complex1.readResolve();
      complex1.INF.abs();
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = complex2.createComplex(0.0, (-20.0));
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.I.divide(complex5);
      complex6.I.subtract(complex4);
      complex6.I.pow(complex2);
      complex0.isInfinite();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.ZERO.multiply(0.0);
      Complex complex9 = complex8.INF.add(complex6);
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex10.acos();
      complex11.INF.divide(complex1);
      complex3.INF.getArgument();
      Complex complex12 = Complex.valueOf((-1880.71059));
      complex12.ZERO.atan();
      complex3.createComplex((-57.633610352), (-1.5707963267948966));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 234.0);
      Complex complex1 = Complex.valueOf(20.0, 2885.3371500617677);
      complex1.ZERO.toString();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex3.ONE.tan();
      complex0.equals(complex1);
      Complex complex5 = complex0.subtract(3847.3994270863823);
      Complex complex6 = complex5.reciprocal();
      complex1.sqrt1z();
      complex2.getArgument();
      complex1.divide(1019.966809752);
      Complex complex7 = complex2.divide(complex6);
      complex0.cos();
      Complex complex8 = complex6.log();
      complex8.pow(complex4);
      complex1.hashCode();
      complex1.isNaN();
      complex8.pow(complex2);
      complex5.cosh();
      Complex complex9 = Complex.ZERO;
      complex9.getImaginary();
      complex7.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2.3273415565490723, 2.3273415565490723);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = (Complex)complex2.readResolve();
      complex1.reciprocal();
      complex3.cos();
      complex0.tan();
      Complex complex4 = Complex.I;
      complex4.sin();
      complex4.add((-893.0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(388.48, 388.48);
      Complex complex1 = Complex.valueOf(388.48);
      Complex complex2 = complex0.divide(388.48);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.asin();
      complex5.INF.conjugate();
      complex3.NaN.exp();
      Complex complex6 = complex2.INF.subtract(3.4042761729010895E29);
      complex6.ONE.multiply(complex4);
      Complex complex7 = complex1.sin();
      complex7.ONE.reciprocal();
      complex7.INF.getField();
      complex0.divide(complex7);
      complex3.readResolve();
      complex2.tanh();
      Complex complex8 = Complex.valueOf(388.48);
      complex7.getField();
      complex1.divide(388.48);
      complex8.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(1.8107659816741943);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide(complex0);
      complex4.subtract(complex5);
      Complex complex8 = complex5.pow(complex1);
      complex8.isInfinite();
      complex7.sqrt();
      Complex complex9 = complex5.multiply(3.106037603716254E-245);
      complex9.add(complex1);
      complex6.cosh();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.acos();
      complex2.divide(complex3);
      Complex.valueOf(3.106037603716254E-245);
      Complex.valueOf((-1033.05960236803), 2349.721839340691);
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2340.85162565));
      Complex complex1 = Complex.NaN;
      complex0.NaN.multiply(complex1);
      complex0.ZERO.toString();
      Complex complex2 = complex1.I.log();
      complex0.toString();
      complex0.tan();
      Complex complex3 = complex0.INF.cosh();
      complex3.INF.toString();
      complex3.I.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex3.cosh();
      complex1.hashCode();
      complex7.ONE.readResolve();
      complex6.ZERO.acos();
      complex7.hashCode();
      complex6.toString();
      complex2.add((-222.96075264957));
      Complex complex9 = complex1.multiply(1599);
      complex8.divide(complex2);
      complex8.multiply(17);
      Complex.valueOf((-2377.848623974121));
      Complex.valueOf((-1.0), (double) 17);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = new Complex(20.0, 234.0);
      double double1 = 2885.3371500617677;
      Complex complex1 = Complex.valueOf(20.0, 2885.3371500617677);
      complex1.ZERO.toString();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ONE.acos();
      complex3.ONE.tan();
      complex0.equals(complex1);
      Complex complex4 = complex2.exp();
      complex4.ONE.hashCode();
      try { 
        complex4.nthRoot((-462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -462
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex2.I.getField();
      Complex complex4 = complex0.multiply(complex2);
      complex4.I.negate();
      Complex complex5 = complex1.subtract(0.0);
      Complex complex6 = complex5.ZERO.add(0.0);
      Complex complex7 = complex6.INF.negate();
      complex1.abs();
      complex6.I.reciprocal();
      Complex complex8 = complex5.NaN.sqrt1z();
      complex2.NaN.add(complex8);
      Complex complex9 = complex0.divide((-1.0));
      Complex complex10 = complex9.INF.cos();
      complex10.ONE.divide(complex5);
      Complex complex11 = complex9.INF.pow(complex8);
      complex11.ONE.exp();
      complex10.INF.add(0.0);
      Complex complex12 = complex0.multiply(complex3);
      complex0.add(complex5);
      complex12.toString();
      Complex complex13 = complex0.sqrt();
      complex0.isInfinite();
      Complex complex14 = complex10.sin();
      complex14.NaN.asin();
      complex13.getReal();
      complex7.abs();
      complex13.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ZERO.divide(3783.7221152600737);
      complex0.toString();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex4.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.cosh();
      complex7.NaN.readResolve();
      Complex.valueOf(0.0, 6.327431953939798E60);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, 6.327431953939798E60);
      complex5.reciprocal();
      Complex complex8 = Complex.valueOf(622.8917326413, 0.0);
      complex8.INF.pow((-867.84888787477));
      complex3.abs();
      complex2.asin();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-3073.6619415623), (-3073.6619415623));
      Complex complex1 = complex0.INF.sinh();
      complex0.I.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      complex3.NaN.multiply((-3073.6619415623));
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.add(complex1);
      complex5.ZERO.acos();
      Complex complex6 = complex4.multiply((-2936));
      complex6.INF.nthRoot(1);
      complex1.pow(complex4);
      Complex complex7 = complex2.sinh();
      complex1.atan();
      Complex complex8 = complex3.subtract((double) (-2936));
      complex8.add((double) (-2936));
      complex7.subtract(2633.733);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(3172.2499);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex3.NaN.createComplex(3172.2499, 3172.2499);
      complex3.I.pow(complex2);
      complex3.pow(complex2);
      Complex complex4 = complex0.INF.subtract(complex2);
      Complex complex5 = complex0.INF.createComplex(0.0, 3501.8);
      Complex complex6 = complex0.divide(1763.0885199367);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1626.1));
      complex0.multiply((-2094));
      Complex complex7 = complex6.divide(complex5);
      complex7.ZERO.cos();
      complex4.cos();
      complex1.getImaginary();
      complex2.sqrt1z();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.hashCode();
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex4.ONE.createComplex((-739.3633514501133), (-739.3633514501133));
      complex0.toString();
      complex0.readResolve();
      complex4.hashCode();
      Complex complex6 = complex5.subtract(0.0);
      complex6.getField();
      Complex complex7 = Complex.INF;
      complex7.ZERO.getField();
      Complex complex8 = complex0.divide(complex7);
      complex4.I.asin();
      complex8.NaN.multiply((-357));
      double double1 = 86.67;
      Complex complex9 = complex5.multiply(86.67);
      complex9.divide((-20.0));
      complex1.isInfinite();
      complex2.asin();
      complex3.createComplex((-20.0), 279.935322782);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(388.48, 388.48);
      Complex complex1 = Complex.valueOf(388.48);
      Complex complex2 = complex0.divide(388.48);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex2.INF.subtract(3.4042761729010895E29);
      complex9.ONE.multiply(complex4);
      Complex complex10 = complex1.sin();
      complex10.ONE.reciprocal();
      complex10.INF.getField();
      complex0.divide(complex10);
      complex3.readResolve();
      complex2.tanh();
      Complex.valueOf(388.48);
      complex10.getField();
      complex1.divide(388.48);
      Complex complex11 = complex6.divide((-20.0));
      complex11.ONE.reciprocal();
      complex11.I.cos();
      complex11.tan();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      double double0 = 1219.373886324223;
      Complex complex2 = complex1.NaN.sin();
      complex2.I.getArgument();
      complex2.I.exp();
      Complex complex3 = complex1.NaN.pow(1219.373886324223);
      complex0.hashCode();
      complex3.readResolve();
      Complex complex4 = complex3.add(1219.373886324223);
      try { 
        complex4.NaN.nthRoot((-537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -537
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.INF.pow(0.0);
      complex0.getArgument();
      Complex complex5 = complex1.log();
      complex4.I.reciprocal();
      complex3.nthRoot(1);
      Complex complex6 = complex5.sin();
      complex6.ONE.pow(0.0);
      complex6.sinh();
      complex2.getField();
      Complex complex7 = complex3.INF.pow(complex4);
      complex7.NaN.acos();
      Complex complex8 = complex0.pow(Double.NaN);
      Complex complex9 = Complex.valueOf((double) 1, (double) 1);
      complex0.acos();
      Complex complex10 = complex8.NaN.createComplex(0.0, 1);
      complex10.INF.sqrt1z();
      Complex complex11 = complex9.ONE.reciprocal();
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      Complex complex13 = complex12.I.sqrt();
      complex13.INF.atan();
      complex3.multiply(1);
      complex9.pow(0.0);
      complex5.tanh();
      Complex complex14 = complex8.tan();
      complex14.INF.atan();
      Complex complex15 = complex10.pow((double) 1);
      complex15.INF.pow(873.304634931667);
      complex0.asin();
      complex10.multiply(1);
      complex11.asin();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 267.87163329749);
      Complex complex1 = complex0.ONE.sqrt();
      complex0.toString();
      Complex complex2 = complex0.sin();
      complex2.INF.toString();
      Complex complex3 = complex2.exp();
      complex3.I.divide(complex2);
      Complex complex4 = complex0.exp();
      complex4.tanh();
      complex4.ONE.divide(complex1);
      Complex.valueOf(0.0, 267.87163329749);
      complex0.add(267.87163329749);
      complex0.atan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf((-2613.775970646), (-20.0));
      complex1.readResolve();
      complex1.INF.abs();
      Complex complex2 = complex1.I.subtract(0.0);
      complex2.createComplex(0.0, (-20.0));
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.I.divide(complex4);
      complex5.I.subtract(complex3);
      complex5.I.pow(complex2);
      complex0.isInfinite();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.ZERO.multiply(0.0);
      complex7.INF.add(complex5);
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.acos();
      complex9.INF.divide(complex1);
      Complex.valueOf((-1880.71059));
      Complex.valueOf((-2613.775970646), 2331.2350192878384);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.subtract(complex1);
      complex5.ONE.subtract(complex0);
      Complex complex6 = complex1.sin();
      complex6.isNaN();
      complex6.isInfinite();
      Complex complex7 = complex6.add(complex3);
      complex2.isInfinite();
      complex3.createComplex((-1.0), 6.402020300783889E-254);
      complex7.pow(117.7608);
      complex4.multiply(0.0);
      Complex complex8 = complex0.cosh();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1915.3064829520413, 1915.3064829520413);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.divide((-1297.812172313));
      complex1.ZERO.add(0.0);
      Complex complex2 = complex1.I.negate();
      complex2.ONE.multiply((-550));
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.sqrt1z();
      complex5.INF.multiply((-550));
      complex4.multiply((-550));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.multiply(865);
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex0.NaN.reciprocal();
      complex4.NaN.abs();
      complex0.ZERO.multiply(865);
      Complex complex5 = complex0.pow(724.47134320104);
      Complex complex6 = Complex.valueOf((double) 865, 724.47134320104);
      Complex complex7 = complex0.I.tanh();
      complex7.ZERO.exp();
      complex6.hashCode();
      complex5.ZERO.getField();
      complex0.getImaginary();
      Complex complex8 = complex2.I.multiply(complex7);
      complex5.nthRoot(865);
      complex2.toString();
      complex2.getReal();
      Complex complex9 = complex0.cos();
      complex9.I.sqrt1z();
      Complex complex10 = complex9.sqrt();
      complex10.INF.pow(1.0);
      complex1.nthRoot(116);
      complex3.multiply(116);
      Complex complex11 = complex8.pow(20.0);
      complex11.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.abs();
      Complex complex1 = complex0.tan();
      complex1.INF.multiply(complex0);
      complex0.nthRoot(4683);
      complex1.nthRoot(4683);
      Complex complex2 = complex0.exp();
      complex1.getField();
      Complex complex3 = complex2.subtract(1019.966809752);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex3.createComplex(0.0, 2.0);
      Complex complex6 = complex5.sqrt1z();
      complex6.I.getArgument();
      Complex complex7 = complex6.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.ZERO.divide(complex0);
      complex8.I.cos();
      complex6.ZERO.log();
      Complex complex9 = complex4.pow(complex5);
      complex9.I.hashCode();
      complex6.isNaN();
      complex1.pow(complex0);
      complex9.cosh();
      complex9.getImaginary();
      complex0.createComplex(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex0.asin();
      complex2.ZERO.divide((double) 0);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.ONE.sin();
      complex4.INF.getArgument();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.INF.sin();
      complex7.ZERO.tanh();
      complex6.INF.multiply(0);
      complex4.INF.exp();
      complex0.atan();
      complex3.ONE.divide((double) 0);
      complex2.acos();
      complex5.readResolve();
      complex0.multiply(complex4);
      Complex complex8 = complex5.sin();
      complex8.I.negate();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(2490.039486341042);
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(2490.039486341042);
      complex0.readResolve();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.multiply(37);
      Complex complex3 = complex2.I.add(2490.039486341042);
      complex3.INF.log();
      Complex complex4 = complex3.ZERO.pow((double) 37);
      complex4.ZERO.getArgument();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex5.I.exp();
      complex6.multiply((-5.598276199126451E264));
      complex6.ONE.multiply(1309);
      complex1.acos();
      complex2.I.sinh();
      complex1.subtract(complex3);
      complex0.nthRoot(37);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(3391.14, 2.18713790898745E-148);
      Complex complex1 = complex0.ZERO.createComplex(6.967331001069377E-132, (-1560.997052));
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.I.add(complex2);
      complex3.ONE.asin();
      complex3.INF.getArgument();
      complex1.add((-1560.997052));
      complex0.sqrt();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.divide((-2799.1564));
      complex2.INF.multiply(32);
      Complex complex3 = complex0.INF.pow(complex1);
      complex0.ONE.getArgument();
      complex0.getImaginary();
      complex2.ONE.cosh();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex2.asin();
      complex6.ONE.cos();
      Complex.valueOf((-169.0));
      complex2.isInfinite();
      complex0.exp();
      Object object0 = new Object();
      complex3.equals(object0);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.INF.reciprocal();
      complex1.I.pow(complex2);
      complex0.isNaN();
      complex0.abs();
      complex2.ONE.nthRoot(407);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex4 = complex2.add(complex3);
      complex1.getImaginary();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.log();
      complex6.NaN.add(complex0);
      complex5.sqrt1z();
      complex5.INF.cos();
      Complex complex7 = complex3.I.multiply(complex1);
      Complex complex8 = Complex.valueOf(-0.0, 0.0);
      complex4.ONE.multiply(complex8);
      complex6.nthRoot(1318);
      complex4.isNaN();
      complex1.conjugate();
      complex7.sin();
      complex6.pow(complex4);
      Complex complex9 = complex2.add(0.0);
      complex9.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2577.0), (-2577.0));
      Complex complex1 = complex0.divide(9.082960673843353E-9);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.tan();
      complex3.add(complex1);
      Complex complex4 = complex1.I.subtract(complex3);
      complex3.multiply((-4547));
      complex0.cosh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      complex0.multiply((-480.9182778292));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      complex1.ZERO.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(489);
      complex3.ONE.log();
      Complex complex4 = Complex.valueOf((double) 489, 0.0);
      complex2.add(complex4);
      Complex complex5 = complex2.conjugate();
      complex5.divide((double) 489);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(319.8585041887561);
      Complex complex3 = complex0.I.divide((-2207.65007660198));
      Complex complex4 = complex3.I.asin();
      complex4.ZERO.tanh();
      Complex complex5 = Complex.valueOf((-1646.265110838824), (-1646.265110838824));
      Complex.valueOf(0.2231435477733612, 0.0);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.NaN.tan();
      complex10.ONE.divide((-20.0));
      complex8.getImaginary();
      Complex complex11 = complex7.subtract(Double.NaN);
      complex7.add(complex6);
      Complex complex12 = Complex.valueOf(Double.NaN, (-1.0));
      complex11.INF.subtract(complex12);
      complex2.negate();
      complex0.isInfinite();
      complex12.equals(complex6);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2340.85162565));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex0.ZERO.toString();
      complex1.I.log();
      complex0.toString();
      complex0.tan();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex0.INF.cosh();
      complex4.INF.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.sinh();
      complex6.INF.asin();
      Complex complex7 = complex6.sinh();
      complex2.abs();
      complex2.toString();
      Complex complex8 = complex2.cosh();
      complex8.sin();
      Complex complex9 = complex6.divide(complex8);
      complex3.multiply(complex9);
      complex8.divide(Double.NaN);
      complex8.subtract(0.0);
      complex7.reciprocal();
      complex9.createComplex(3670.74190804, (-2554.7077473147));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1286.3464067499), (-1286.3464067499));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.I.reciprocal();
      complex3.ZERO.readResolve();
      complex0.getImaginary();
      Complex complex4 = complex0.NaN.negate();
      complex4.ZERO.add(complex0);
      complex4.ZERO.acos();
      complex0.nthRoot(1318);
      complex4.getImaginary();
      complex1.nthRoot(1318);
      complex4.sqrt();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double double0 = (-1665.352969681383);
      Complex complex0 = Complex.valueOf((-1665.352969681383), (-1665.352969681383));
      Complex complex1 = complex0.INF.conjugate();
      complex1.ONE.asin();
      Complex complex2 = complex0.sqrt1z();
      complex2.I.log();
      Complex complex3 = complex2.cos();
      int int0 = 0;
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.I;
      complex0.multiply(complex2);
      Complex complex3 = complex0.ZERO.asin();
      complex3.I.negate();
      complex1.isNaN();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.divide(893.725531334715);
      complex5.I.add(6.283185307179586);
      complex5.ZERO.toString();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.43812888860702515, 9.140964977432485E-8);
      Complex complex1 = complex0.multiply(83);
      complex0.getReal();
      complex1.nthRoot(83);
      complex0.add(1944.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(4212.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ZERO.asin();
      complex0.I.abs();
      complex1.INF.nthRoot(79);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.multiply(complex4);
      complex5.hashCode();
      complex1.hashCode();
      Complex complex6 = complex3.multiply((-3872));
      complex1.conjugate();
      complex6.subtract((double) 79);
      complex6.ONE.getArgument();
      Complex complex7 = Complex.valueOf(3051.3);
      Complex complex8 = complex1.add(0.0);
      complex6.getReal();
      complex2.subtract(0.0);
      complex2.tan();
      Complex complex9 = complex4.add(complex1);
      complex9.ZERO.pow(complex7);
      complex8.getReal();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.I.hashCode();
      Complex complex2 = complex0.NaN.divide(0.0);
      complex2.ZERO.sinh();
      complex0.add(0.0);
      complex2.subtract(0.0);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = complex0.reciprocal();
      complex0.I.sqrt1z();
      complex1.INF.sqrt();
      Complex complex2 = complex1.ZERO.subtract(2.2056355476379395);
      Complex complex3 = complex1.NaN.tanh();
      complex0.INF.subtract(2.2056355476379395);
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex3.ONE.sin();
      complex0.NaN.pow(complex2);
      complex1.nthRoot(158);
      Complex complex5 = complex1.acos();
      complex5.getImaginary();
      complex5.getField();
      Complex complex6 = complex0.ONE.add(0.0);
      complex1.I.sqrt();
      complex0.isInfinite();
      complex1.abs();
      Complex complex7 = complex1.pow(2.2056355476379395);
      Complex complex8 = complex1.log();
      complex8.ONE.multiply(complex6);
      complex0.subtract(complex7);
      complex0.tan();
      complex6.tanh();
      complex1.cosh();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(1737.5800589903, (-8.204903560604627E-9));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2634.64835553), 1074.8370758);
      complex0.readResolve();
      Complex complex1 = complex0.acos();
      complex1.I.multiply(1449);
      Complex complex2 = complex1.I.tan();
      complex0.INF.hashCode();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex1.pow(complex3);
      complex3.ZERO.pow((-1448.400464));
      complex5.I.reciprocal();
      complex4.multiply(1449);
      Complex complex6 = complex5.ONE.createComplex((-2.5113270522478854E-277), 1074.8370758);
      Complex complex7 = complex0.cos();
      complex4.divide((-4693.436660088324));
      complex3.getReal();
      Complex complex8 = complex1.I.subtract((-2.5113270522478854E-277));
      complex4.getImaginary();
      complex3.NaN.asin();
      Complex complex9 = complex6.ZERO.sinh();
      Complex complex10 = complex5.subtract((-489.648166));
      Complex complex11 = Complex.valueOf((double) 1449);
      complex11.toString();
      complex11.ZERO.atan();
      complex2.acos();
      complex10.isNaN();
      complex6.divide(complex5);
      complex7.getImaginary();
      complex1.cos();
      complex2.toString();
      complex10.subtract((-2634.64835553));
      complex9.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.acos();
      complex2.readResolve();
      Complex complex3 = complex2.I.createComplex(0.0, 0.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.INF;
      complex4.I.multiply(complex5);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.subtract(complex0);
      complex7.INF.createComplex(0.0, (-1277.064280291));
      complex6.I.createComplex(2280.86, 2092.2);
      complex1.subtract(complex3);
      Complex complex8 = complex6.multiply(0.0);
      complex2.readResolve();
      complex6.tan();
      Complex.valueOf(0.0);
      complex1.sinh();
      complex8.getField();
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.negate();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1440.45704761);
      complex0.NaN.abs();
      Complex complex1 = complex0.multiply(2308);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.ONE.negate();
      List<Complex> list0 = complex0.nthRoot(1);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
      
      complex0.hashCode();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.add(Double.NaN);
      double double0 = complex3.getArgument();
      assertEquals((-3.141592653589793), double0, 0.01);
      
      Complex complex6 = Complex.valueOf(5358.918612);
      complex6.getField();
      complex1.NaN.sin();
      Complex.valueOf(0.0);
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex6.reciprocal();
      assertEquals(1.8660481197843576E-4, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      complex1.cos();
      Complex.valueOf(5358.918612);
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex3.sinh();
      double double1 = complex10.abs();
      assertEquals(1.1752011936438014, double1, 0.01);
      
      Complex complex11 = complex5.NaN.sin();
      complex5.hashCode();
      Complex complex12 = complex9.multiply((-3.141592653589793));
      assertSame(complex12, complex11);
      
      complex5.conjugate();
      assertSame(complex5, complex9);
      
      Complex complex13 = complex4.cos();
      Complex complex14 = complex4.cosh();
      assertEquals(1.0006771711034983, complex14.getReal(), 0.01);
      
      complex7.log();
      Complex complex15 = Complex.valueOf(1.1752011936438014, 0.0);
      complex6.hashCode();
      complex2.getArgument();
      complex13.isNaN();
      Complex complex16 = complex15.divide(complex7);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.3325698375701904);
      Complex complex3 = complex1.ONE.divide(0.0);
      Complex complex4 = complex3.NaN.subtract(complex0);
      Complex complex5 = complex2.NaN.pow(complex0);
      assertSame(complex5, complex3);
      
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.INF.sin();
      assertTrue(complex7.equals((Object)complex4));
      
      Complex complex8 = complex6.ONE.tan();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex8.getReal(), 0.01);
      
      complex6.ONE.abs();
      complex6.ZERO.hashCode();
      assertEquals(0.8813735870195428, complex6.getImaginary(), 0.01);
      
      complex0.subtract(363.2);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.log();
      complex9.getField();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex2.reciprocal();
      assertEquals(0.7504297124294823, complex12.getReal(), 0.01);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      complex11.add(complex10);
      assertEquals(0.9270202587673064, complex11.getReal(), 0.01);
      assertEquals(1.1102230246251564E-16, complex11.getImaginary(), 0.01);
      
      Complex complex13 = complex2.negate();
      assertFalse(complex13.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ZERO.multiply(1810);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.add(complex0);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertSame(complex5, complex4);
      assertFalse(complex2.equals((Object)complex1));
  }
}
