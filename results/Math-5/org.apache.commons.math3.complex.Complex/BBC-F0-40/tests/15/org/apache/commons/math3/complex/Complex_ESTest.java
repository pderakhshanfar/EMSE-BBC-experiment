/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:05:05 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(588351.5818147154, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-143.803542025291), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), 1.0);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.tanh();
      Complex complex3 = Complex.I;
      complex2.multiply(complex3);
      Complex complex4 = Complex.ONE;
      complex1.tanh();
      Complex complex5 = new Complex(1.0, (-1398));
      try { 
        complex5.nthRoot((-1398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,398
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-165.052812615), (-165.052812615));
      complex0.ZERO.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-165.052812615));
      Complex complex3 = Complex.valueOf(0.5979346036911011, 0.5979346036911011);
      complex2.multiply(complex3);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      complex5.tanh();
      complex1.subtract(88.34643933688452);
      Complex complex6 = new Complex(20.0);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-22.571137787043497), (-22.571137787043497));
      complex0.subtract(Double.NaN);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.subtract(complex0);
      Complex complex2 = Complex.I;
      complex1.pow(1345.52201662317);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.ONE;
      complex4.tanh();
      complex3.subtract(47.06793319790079);
      Complex complex5 = new Complex(47.06793319790079);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-23.528652728531778), (-23.528652728531778));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.atan();
      complex2.NaN.pow(complex0);
      complex2.pow((-3287.7406));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1894.1785569, (-1925.0));
      Complex complex1 = complex0.acos();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.ZERO.getField();
      Complex complex2 = complex1.INF.conjugate();
      complex2.ONE.readResolve();
      Complex complex3 = complex1.INF.log();
      complex0.toString();
      Complex complex4 = complex0.divide(complex1);
      complex4.getArgument();
      complex1.equals(complex0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.ZERO.subtract(1190.7199999999998);
      complex7.INF.reciprocal();
      complex1.createComplex(2250.638780514002, 2250.638780514002);
      Complex complex8 = complex1.pow((-1678.0));
      complex8.I.createComplex(3.141592653589793, 0.5156965255737305);
      complex3.multiply(complex1);
      complex4.reciprocal();
      complex3.tan();
      complex5.asin();
      complex5.asin();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1190.7199999999998), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(4.295976637760759);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.add(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.ZERO.multiply(4.295976637760759);
      Complex complex7 = complex2.I.cos();
      complex7.NaN.reciprocal();
      complex0.equals((Object) null);
      complex6.ZERO.multiply(complex0);
      complex2.subtract(complex4);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex6.acos();
      complex9.multiply(637);
      complex0.log();
      complex5.toString();
      Complex.valueOf(2.9346085631562248E7, 3.975449484028966E-31);
      complex8.getField();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(3702.936, 3702.936);
      Complex complex1 = new Complex(3702.936);
      complex0.INF.pow(complex1);
      complex0.subtract((-1.9073486328125E-6));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4), (-24.4));
      complex0.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.sin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex.valueOf((-24.4));
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-24.4));
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex((-24.4), (-1221.3990971025305));
      complex2.INF.multiply(complex3);
      complex0.readResolve();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1185.213355, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      complex0.readResolve();
      Complex complex2 = complex1.multiply(complex1);
      complex0.nthRoot(3390);
      complex1.getArgument();
      complex2.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4), (-24.4));
      Complex complex1 = complex0.asin();
      complex1.readResolve();
      Complex complex2 = Complex.NaN;
      complex2.multiply(complex1);
      complex0.nthRoot(3390);
      complex0.reciprocal();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4), (-24.4));
      complex0.NaN.getArgument();
      complex0.asin();
      complex0.readResolve();
      Complex complex1 = new Complex((-807.6880484));
      Complex complex2 = complex1.multiply(Double.NaN);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.I.conjugate();
      Complex.valueOf(4.020060558571273E-74, (-614.3797112));
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-2273.08941683), 2253.71);
      complex2.tanh();
      complex2.NaN.negate();
      Complex complex3 = new Complex(806.224403, Double.POSITIVE_INFINITY);
      complex3.multiply(7.674361647125109E-9);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract((-1139.437265));
      Complex complex2 = new Complex(0.0, 1.637974804801213E-273);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = Complex.valueOf(4.020060558571273E-74, (-614.3797112));
      Complex complex5 = (Complex)complex0.readResolve();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.pow(complex0);
      complex5.getField();
      complex7.nthRoot(1440);
      complex4.getArgument();
      Complex complex8 = complex4.tan();
      complex3.nthRoot(565);
      Complex complex9 = complex8.tanh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-24.4));
      complex0.getField();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex1.createComplex((-24.4), Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      complex3.subtract(289.88109368);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4), (-24.4));
      complex0.equals(complex0);
      Complex complex1 = complex0.multiply(complex0);
      complex1.getField();
      Complex complex2 = complex0.reciprocal();
      complex2.pow((double) 3390);
      Complex.valueOf(8.187871486648885E-8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.9999996544006348), (-571068.4466924769));
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      complex1.multiply(complex0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.subtract(complex1);
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.exp();
      complex3.acos();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4), (-24.4));
      Complex complex1 = complex0.asin();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.equals(complex2);
      Complex complex3 = complex0.multiply(complex1);
      complex2.multiply(2.7211316452521414E287);
      Complex.valueOf(2.7211316452521414E287);
      Complex complex4 = Complex.I;
      complex4.createComplex(87.07082, 87.07082);
      Complex complex5 = Complex.valueOf(5.4569682106375694E-12, 2.7211316452521414E287);
      complex5.subtract(87.07082);
      Complex complex6 = new Complex(2.508970297509374E-64);
      complex6.ZERO.subtract(complex5);
      complex6.cos();
      Complex complex7 = new Complex(2337.98848, 20.0);
      complex7.tan();
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4), (-24.4));
      Complex complex1 = complex0.asin();
      complex1.readResolve();
      Complex complex2 = Complex.NaN;
      complex1.equals(complex2);
      Complex complex3 = complex2.multiply(complex1);
      complex3.getField();
      complex0.nthRoot(3390);
      complex0.getArgument();
      Complex complex4 = complex0.tan();
      try { 
        complex4.ONE.nthRoot((-1991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,991
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-755.69137));
      Complex complex1 = complex0.asin();
      complex1.toString();
      Complex complex2 = complex0.ONE.subtract((-755.69137));
      complex1.pow(complex0);
      Complex complex3 = new Complex((-755.69137), (-755.69137));
      Complex complex4 = Complex.I;
      complex4.subtract((-755.69137));
      Complex complex5 = Complex.NaN;
      complex0.multiply((-2082.5401));
      Complex.valueOf(6.283185307179586);
      complex3.createComplex(7024.4589315, 2337.98848);
      Complex.valueOf(1841.95358, 2337.98848);
      complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex((-2082.5401), Double.POSITIVE_INFINITY);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.nthRoot(1848);
      Complex complex1 = complex0.ZERO.tan();
      complex1.INF.multiply((double) 1848);
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.tan();
      complex3.abs();
      complex2.INF.getArgument();
      complex2.NaN.abs();
      Complex complex4 = Complex.valueOf(0.4574742913246155, (double) 1848);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = (Complex)complex4.I.readResolve();
      complex5.I.sqrt();
      complex4.INF.getArgument();
      complex0.isNaN();
      Complex complex8 = complex0.asin();
      complex8.ZERO.toString();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex8.NaN.atan();
      complex10.NaN.atan();
      complex9.I.toString();
      complex9.ONE.tan();
      complex6.createComplex(Double.NaN, 0.7615941559557649);
      complex1.abs();
      complex4.getArgument();
      complex8.tanh();
      complex1.getImaginary();
      Complex complex11 = new Complex(0.11569066077835574, 8.3172929515975E-4);
      complex10.isInfinite();
      Complex complex12 = complex7.multiply((-171.81978));
      complex2.sqrt();
      Complex complex13 = Complex.INF;
      complex12.toString();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2253.71), (-2253.71));
      Complex complex2 = complex1.ZERO.asin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex2.ZERO.multiply(complex1);
      complex0.createComplex((-2511.542758401887), (-2511.542758401887));
      Complex.valueOf(211.19244003, (-2253.71));
      Complex complex3 = Complex.I;
      complex1.pow(1036.8541);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-24.4));
      complex1.I.getField();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      complex2.createComplex(4.1988574190754736E296, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(1841.95358, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.pow(Double.POSITIVE_INFINITY);
      complex6.readResolve();
      complex4.multiply(747);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex2.toString();
      Complex complex3 = complex0.NaN.sqrt1z();
      complex3.ONE.subtract((-24.4));
      complex1.NaN.abs();
      complex1.INF.getField();
      complex0.divide((-24.4));
      complex1.ONE.hashCode();
      complex0.getArgument();
      Complex complex4 = complex0.add(3893.3300696267);
      complex2.multiply(complex1);
      complex4.subtract(3893.3300696267);
      Complex complex5 = Complex.I;
      complex5.cos();
      Complex complex6 = Complex.valueOf(Double.NaN, (-24.4));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1036.8541);
      Complex.valueOf((-1035.776148), (-1035.776148));
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(1036.8541, 3.5127708120698784E48);
      complex1.pow(complex0);
      Complex complex2 = complex1.multiply((-2273.08941683));
      Complex complex3 = Complex.valueOf(1.3994258162094293E-130);
      complex0.subtract(complex1);
      Complex complex4 = complex2.acos();
      complex4.createComplex(3.5127708120698784E48, 1.3994258162094293E-130);
      complex0.abs();
      Complex complex5 = new Complex(1683.7143574851302);
      complex5.getArgument();
      Complex complex6 = complex3.tanh();
      complex0.getImaginary();
      Complex complex7 = new Complex(5.638724693948384E-8, 1.5714110564653245E-8);
      complex1.isInfinite();
      Complex.valueOf(6.283185307179586);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = Complex.INF;
      complex6.toString();
      complex8.multiply(1036.8541);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-681.9783), (-681.9783));
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(2245.55, (-614.3797112));
      Complex complex4 = complex2.multiply((-614.3797112));
      Complex.valueOf(Double.NaN);
      complex3.acos();
      complex4.abs();
      complex4.getArgument();
      Complex complex5 = Complex.ONE;
      complex5.tanh();
      Complex complex6 = new Complex((-2.4010028903507482E7), (-614.3797112));
      complex2.isInfinite();
      complex5.sqrt();
      Complex complex7 = Complex.INF;
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2.0, 3775.3);
      Complex complex2 = new Complex(3775.3, 3775.3);
      complex2.add(complex1);
      Complex complex3 = Complex.valueOf(3775.3, 3775.3);
      complex2.tanh();
      Complex complex4 = new Complex(2.0, 3775.3);
      Complex complex5 = complex3.multiply((-1761963163));
      complex5.ZERO.add(2.0);
      Complex complex6 = Complex.NaN;
      complex6.I.sqrt();
      complex0.log();
      complex0.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      complex1.hashCode();
      Complex complex2 = complex0.add(2404.6281232994093);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.negate();
      complex3.getArgument();
      Complex complex5 = complex1.subtract(0.0);
      complex3.acos();
      complex2.INF.sin();
      complex2.atan();
      complex4.nthRoot(17);
      complex5.atan();
      complex2.equals(complex1);
      complex4.add(3464.82531331);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2253.71), (-2253.71));
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.equals(complex3);
      Complex complex4 = Complex.valueOf((-3464.82531331), (-3464.82531331));
      complex1.readResolve();
      Complex.valueOf((-2142.5), (-1177.6719635));
      complex4.pow(complex3);
      complex1.multiply(2253.71);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.subtract(complex2);
      complex4.acos();
      Complex complex6 = Complex.ONE;
      complex6.createComplex(2076.57378455, (-2273.08941683));
      complex6.abs();
      complex0.getArgument();
      complex3.tanh();
      complex3.getImaginary();
      Complex complex7 = new Complex((-2.1749172296989992E-7), 2253.71);
      complex7.isInfinite();
      Complex complex8 = Complex.NaN;
      complex8.multiply(0.08182976725467839);
      Complex complex9 = complex5.sqrt();
      Complex complex10 = Complex.INF;
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4));
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-24.4), (-24.4));
      Complex complex3 = new Complex(1037.8333967, 1.634294033050537);
      complex1.add(complex2);
      Complex complex4 = Complex.valueOf(1.634294033050537, 1028.5556756);
      complex4.nthRoot(394);
      complex2.sin();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.INF;
      complex6.equals((Object) null);
      complex5.add(3768.667);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(2.4106173515319824);
      Complex complex1 = complex0.asin();
      complex1.toString();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.subtract(2.4106173515319824);
      complex0.abs();
      complex3.getField();
      Complex complex4 = complex2.divide(0.42096930742263794);
      complex4.hashCode();
      complex4.getArgument();
      Complex complex5 = complex2.add((-24.4));
      Complex complex6 = complex4.multiply(complex2);
      Complex complex7 = complex3.divide(0.0);
      Complex complex8 = complex6.sinh();
      complex7.hashCode();
      Complex complex9 = complex2.negate();
      complex5.cos();
      complex6.asin();
      complex8.atan();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      complex1.hashCode();
      Complex complex2 = complex0.add(2404.6281232994093);
      Complex complex3 = complex0.tan();
      complex3.negate();
      complex3.getArgument();
      complex1.subtract(0.0);
      complex3.acos();
      complex2.INF.sin();
      complex2.atan();
      complex3.tanh();
      Complex complex4 = new Complex(9.77929222446451E85, 0.8990805258005052);
      complex4.multiply(4102);
      Complex.valueOf((-989.7056642703));
      Complex complex5 = Complex.NaN;
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex2.divide(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.ZERO.multiply(complex0);
      Complex complex5 = complex2.ZERO.asin();
      Complex complex6 = complex0.add(Double.NaN);
      complex6.toString();
      complex6.tanh();
      complex2.tanh();
      complex5.readResolve();
      complex3.divide(Double.NaN);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.negate();
      Complex complex9 = new Complex(7.806779895279882E-132, (-3194.689885845));
      complex2.subtract((-3194.689885845));
      complex3.atan();
      complex3.tanh();
      complex4.toString();
      complex6.multiply(20.0);
      Complex complex10 = complex5.acos();
      complex10.reciprocal();
      Complex complex11 = Complex.ZERO;
      complex11.createComplex((-20.0), 2385.422462678514);
      Complex complex12 = Complex.ZERO;
      complex12.abs();
      complex8.pow(complex2);
      complex7.tan();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2263.6730040474877), (-2263.6730040474877));
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = Complex.ZERO;
      complex0.equals(complex3);
      Complex complex4 = complex2.ZERO.multiply(complex1);
      complex4.ONE.getField();
      complex0.nthRoot(2604);
      complex2.NaN.subtract((-2263.6730040474877));
      complex0.sin();
      Complex complex5 = complex2.atan();
      complex5.ONE.pow(complex0);
      complex1.equals(" gtiWb[[,qfpqR");
      complex1.add(0.7071067811865475);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2253.71), (-2253.71));
      Complex complex2 = complex1.ZERO.asin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ONE.getField();
      complex3.NaN.nthRoot(3390);
      Complex complex4 = complex3.ONE.divide((-1354.7371938305));
      complex4.INF.sqrt();
      complex1.sin();
      Complex complex5 = Complex.valueOf(2820.4463102661, (double) 3390);
      complex5.asin();
      complex0.atan();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.NaN.sinh();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.NaN.sinh();
      complex1.NaN.cos();
      Complex complex3 = complex0.reciprocal();
      complex3.pow((-1.053265874779237E-303));
      complex0.abs();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.ZERO.multiply(complex0);
      Complex complex6 = complex2.ZERO.asin();
      complex6.I.divide(complex0);
      Complex complex7 = complex0.add(Double.NaN);
      complex7.toString();
      complex7.tanh();
      Complex complex8 = Complex.valueOf((-1.5707963267948966), Double.NaN);
      complex0.equals(complex1);
      complex6.NaN.toString();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.I.sqrt();
      complex9.toString();
      Complex complex11 = complex8.createComplex(Double.NaN, (-460.2159207168049));
      complex3.cos();
      Complex complex12 = complex7.divide(1.5277988910675049);
      complex12.ZERO.toString();
      complex11.toString();
      complex10.nthRoot(4432);
      complex4.subtract((-1.5707963267948966));
      Complex complex13 = Complex.ONE;
      complex1.pow(complex13);
      complex5.multiply(4265.26257412317);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.nthRoot(1848);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.INF.multiply((double) 1848);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex3.tan();
      complex4.abs();
      complex3.INF.getArgument();
      complex3.NaN.abs();
      Complex complex5 = Complex.valueOf(0.4574742913246155, (double) 1848);
      Complex complex6 = complex5.ONE.sqrt();
      complex5.I.readResolve();
      complex6.I.sqrt();
      complex5.INF.getArgument();
      complex0.isNaN();
      Complex complex7 = complex0.asin();
      complex3.asin();
      Complex complex8 = Complex.ZERO;
      complex8.getField();
      complex2.multiply(complex7);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex2.toString();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.ONE.subtract((-24.4));
      complex2.pow(complex3);
      complex1.sin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.subtract((-24.4));
      Complex complex7 = complex6.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.log();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2126.40611795976));
      complex0.pow(complex3);
      Complex complex10 = complex9.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.I;
      complex7.ZERO.conjugate();
      complex0.subtract(complex8);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY, 2.9271223293841774E-106);
      complex10.divide((-1565.2078067));
      complex7.getField();
      complex9.multiply(complex3);
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(1.1232328414916992);
      complex2.getArgument();
      complex0.isNaN();
      Complex complex3 = complex1.asin();
      complex2.toString();
      Complex complex4 = complex2.atan();
      complex2.atan();
      complex2.atan();
      complex2.toString();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.conjugate();
      complex3.negate();
      complex3.sinh();
      Complex complex7 = Complex.valueOf(3.141592653589793, 0.0);
      complex7.multiply(complex6);
      // Undeclared exception!
      complex3.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.141592653589793, 3.141592653589793);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.add((-0.9999996062379596));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.negate();
      complex0.getArgument();
      complex0.subtract((-2804.205));
      Complex complex5 = complex0.acos();
      Complex complex6 = complex4.atan();
      complex3.INF.reciprocal();
      complex6.tanh();
      complex3.readResolve();
      complex0.divide(0.9999996541131301);
      Complex complex7 = complex4.subtract(0.0);
      Complex complex8 = new Complex((-2804.205), 0.9999996541131301);
      complex8.atan();
      Complex complex9 = complex7.tanh();
      complex5.toString();
      complex6.multiply(2875.2432733);
      complex6.acos();
      Complex complex10 = complex3.reciprocal();
      Complex complex11 = complex10.createComplex(3.141592653589793, (-2105.2841975525484));
      complex11.abs();
      Complex complex12 = complex9.pow(complex0);
      complex12.tan();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      complex0.I.hashCode();
      complex0.pow(complex1);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.subtract(2404.6281232994093);
      Complex complex4 = complex2.divide((-163.8368683887));
      Complex complex5 = complex4.log();
      Complex.valueOf((-163.8368683887), 2404.6281232994093);
      Complex.valueOf(6.283185307179586);
      complex3.createComplex(2404.6281232994093, (-2082.540104605));
      Complex complex6 = Complex.valueOf(4.895131474682867E-201, 1985.691395);
      complex5.subtract(695.515117125);
      complex3.cos();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.2708985520400816E62);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(1.2708985520400816E62, 4.020060558571273E-74);
      Complex complex4 = complex3.I.pow(complex2);
      complex4.I.negate();
      complex3.I.getField();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex6.ZERO.createComplex(4.020060558571273E-74, 1.2708985520400816E62);
      complex6.atan();
      Complex complex9 = complex5.tanh();
      complex2.readResolve();
      complex9.divide(1.2708985520400816E62);
      complex7.negate();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.subtract(1.2708985520400816E62);
      Complex complex12 = complex5.atan();
      complex7.tanh();
      complex9.toString();
      complex8.multiply((-45.10758));
      complex8.acos();
      Complex complex13 = complex12.reciprocal();
      complex7.createComplex((-1.0), (-45.10758));
      complex11.abs();
      complex13.pow(complex8);
      complex0.tan();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      complex1.hashCode();
      Complex complex2 = complex0.add(2404.6281232994093);
      Complex complex3 = complex0.tan();
      complex3.negate();
      complex3.getArgument();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex3.acos();
      complex2.INF.sin();
      Complex complex6 = complex2.atan();
      complex3.tanh();
      complex6.readResolve();
      Complex complex7 = complex5.divide(20.0);
      Complex complex8 = complex1.negate();
      Complex complex9 = new Complex((-0.9999996541131301), 568.59765582);
      Complex complex10 = complex9.subtract(2737.3092);
      Complex complex11 = complex2.atan();
      complex8.tanh();
      complex6.toString();
      complex10.multiply(2404.6281232994093);
      complex7.acos();
      complex11.reciprocal();
      complex3.createComplex(20.0, 2737.3092);
      complex7.abs();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.negate();
      Complex complex1 = complex0.add((-546.0477));
      Complex complex2 = complex1.multiply((-1));
      complex0.readResolve();
      Complex complex3 = complex0.atan();
      complex3.negate();
      Complex complex4 = Complex.ONE;
      complex4.reciprocal();
      Complex complex5 = complex2.log();
      Complex complex6 = Complex.valueOf((double) (-1), (double) (-2657));
      complex3.readResolve();
      Complex complex7 = complex1.add((-2592.8829696431));
      Complex complex8 = Complex.valueOf((-2592.8829696431), (-1431.45421518545));
      Complex complex9 = complex6.pow(complex8);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.multiply((-1431.45421518545));
      complex11.NaN.add((double) (-2657));
      Complex complex12 = Complex.I;
      complex3.subtract(complex7);
      Complex complex13 = new Complex((-1431.45421518545), 2464.19518116);
      Complex complex14 = Complex.NaN;
      complex14.divide(2464.19518116);
      complex9.getField();
      complex12.multiply(complex1);
      complex5.cosh();
      complex8.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.cosh();
      complex2.ZERO.multiply(complex0);
      Complex complex5 = complex2.ZERO.asin();
      Complex complex6 = complex0.add(Double.NaN);
      complex6.toString();
      complex6.tanh();
      Complex complex7 = Complex.valueOf((-1.5707963267948966), Double.NaN);
      complex0.equals(complex1);
      complex5.NaN.toString();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.I.sqrt();
      complex8.toString();
      Complex complex10 = complex7.createComplex(Double.NaN, (-460.2159207168049));
      complex3.cos();
      complex5.toString();
      complex6.divide(1.5277988910675049);
      complex10.toString();
      complex9.nthRoot(4432);
      complex4.subtract((-1.5707963267948966));
      Complex complex11 = Complex.ONE;
      complex1.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.NaN.sin();
      double double0 = 1772.6;
      Complex complex3 = complex0.add(1772.6);
      complex0.ONE.getArgument();
      complex3.reciprocal();
      Complex complex4 = complex0.add(1.5707963267948966);
      complex4.ZERO.divide(complex2);
      complex1.readResolve();
      Complex complex5 = complex4.divide(complex3);
      complex1.abs();
      complex1.divide(Double.NaN);
      complex1.multiply(1841.95358);
      Complex.valueOf(1.8214070796966553, 0.0);
      complex5.isInfinite();
      Complex complex6 = complex5.log();
      complex5.tan();
      try { 
        complex6.nthRoot((-3692));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,692
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.INF.asin();
      complex2.I.readResolve();
      complex1.INF.getArgument();
      Complex complex3 = complex0.INF.subtract(209.0);
      Complex complex4 = complex0.subtract(2569.1166755);
      Complex complex5 = Complex.valueOf(1990.15604, 2569.1166755);
      Complex complex6 = complex5.pow((-2537.193176));
      complex0.I.add(0.7853981633974483);
      Complex complex7 = complex5.add(209.0);
      complex7.ZERO.sqrt1z();
      Complex complex8 = complex0.pow(complex5);
      complex8.NaN.sin();
      Complex complex9 = complex3.asin();
      complex9.createComplex(2363.6718212721, 2363.6718212721);
      complex4.subtract(1990.15604);
      complex1.pow(complex3);
      complex6.toString();
      try { 
        complex0.nthRoot((-1260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex2.toString();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.ONE.subtract((-24.4));
      complex2.pow(complex3);
      complex1.sin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.subtract((-24.4));
      Complex complex7 = complex6.divide(Double.POSITIVE_INFINITY);
      complex4.log();
      complex0.multiply((-2082.540104605));
      Complex.valueOf(6.283185307179586);
      Complex complex8 = complex7.createComplex(4.1988574190754736E296, 2337.98848);
      Complex.valueOf(1841.95358, 2337.98848);
      complex6.subtract((-1719.87821));
      complex8.cos();
      complex0.tan();
      complex3.multiply(1841.95358);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex2.toString();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.ONE.subtract((-24.4));
      complex4.ZERO.exp();
      complex1.NaN.abs();
      complex1.INF.getField();
      complex0.divide((-24.4));
      complex1.ONE.hashCode();
      complex4.log();
      Complex complex5 = complex4.add((-982066.9171571695));
      complex2.readResolve();
      Complex complex6 = new Complex(Double.NaN);
      complex6.abs();
      complex5.getField();
      Complex.valueOf((-460.2159207168049), 843.92902684);
      Complex complex7 = Complex.INF;
      complex7.acos();
      complex0.readResolve();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.subtract(698.39180825);
      complex1.NaN.abs();
      complex1.getArgument();
      Complex complex2 = complex0.pow(2361.9);
      Complex complex3 = complex2.add(2361.9);
      complex2.multiply(complex0);
      Complex complex4 = complex3.divide((-20.0));
      Complex complex5 = complex1.sinh();
      complex5.hashCode();
      Complex complex6 = complex2.negate();
      complex1.cos();
      Complex complex7 = complex5.asin();
      complex7.readResolve();
      complex6.divide(2361.9);
      Complex complex8 = complex6.acos();
      complex0.multiply(1);
      Complex complex9 = complex5.tan();
      Complex complex10 = Complex.NaN;
      complex3.divide(complex10);
      complex9.multiply(1);
      complex8.getArgument();
      Complex complex11 = complex8.add((-1.9987622893254038E-7));
      complex4.pow(0.0);
      complex9.multiply(complex11);
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.2708985520400816E62);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(1.2708985520400816E62, 4.020060558571273E-74);
      Complex complex4 = complex3.I.pow(complex2);
      complex4.I.negate();
      complex3.I.getField();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex0.sin();
      complex6.I.conjugate();
      Complex complex7 = complex6.ZERO.createComplex(4.020060558571273E-74, 1.2708985520400816E62);
      Complex complex8 = Complex.valueOf(4.020060558571273E-74, (-614.3797112));
      complex0.readResolve();
      Complex complex9 = Complex.valueOf((-2273.08941683), 2253.71);
      Complex complex10 = complex1.pow(complex5);
      Complex complex11 = complex8.multiply(3.975449484028966E-31);
      Complex complex12 = Complex.valueOf((-1.0));
      complex12.subtract(complex7);
      complex11.acos();
      complex2.createComplex((-2.1749172296989992E-7), 2076.57378455);
      complex11.abs();
      complex0.getArgument();
      complex9.tanh();
      complex4.getImaginary();
      Complex complex13 = new Complex((-1.0), (-2.1749172296989992E-7));
      complex13.isInfinite();
      complex10.multiply(6.283185307179586);
      complex8.sqrt();
      Complex complex14 = Complex.INF;
      complex14.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(2.2364990583200056E-234);
      Complex complex3 = complex0.reciprocal();
      complex3.acos();
      complex2.conjugate();
      complex1.subtract(complex1);
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.ONE;
      complex5.acos();
      Complex complex6 = Complex.valueOf((-1.4674011002723395), (-1845.1));
      complex2.multiply(complex6);
      Complex complex7 = complex5.divide(5.471416081500162E-8);
      complex7.NaN.negate();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-24.4));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex2.toString();
      Complex complex3 = complex0.NaN.sqrt1z();
      complex3.ONE.subtract((-24.4));
      complex1.NaN.abs();
      complex1.INF.getField();
      Complex complex4 = complex0.divide((-24.4));
      complex1.ONE.hashCode();
      complex0.getArgument();
      complex0.pow(0.0);
      Complex complex5 = complex0.add(3893.3300696267);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex5.I.divide(3893.3300696267);
      Complex complex8 = complex6.ONE.sinh();
      complex5.ONE.hashCode();
      Complex complex9 = complex5.INF.negate();
      Complex complex10 = complex9.NaN.cos();
      Complex complex11 = complex2.asin();
      complex11.NaN.readResolve();
      complex5.divide(0.0);
      complex10.INF.acos();
      Complex complex12 = complex5.multiply(1);
      complex12.INF.tan();
      complex7.divide(complex12);
      Complex complex13 = complex7.multiply(1);
      complex13.NaN.getArgument();
      Complex complex14 = complex4.add(0.0);
      Complex complex15 = complex14.I.pow(3.141592653589793);
      complex10.multiply(complex14);
      complex8.sinh();
      complex15.multiply(3893.3300696267);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex2.toString();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.ONE.subtract((-24.4));
      complex1.NaN.abs();
      complex1.INF.getField();
      Complex complex5 = complex0.divide((-24.4));
      complex1.abs();
      complex1.conjugate();
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.NaN;
      complex4.divide(complex7);
      Complex complex8 = complex6.subtract((-3753.0));
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex2.createComplex((-24.4), 2.0);
      complex6.add(complex2);
      complex10.subtract(complex0);
      complex1.isInfinite();
      complex6.conjugate();
      complex5.toString();
      complex8.readResolve();
      complex1.atan();
      Complex complex12 = new Complex((-24.4), 2.0);
      complex12.sin();
      Complex complex13 = complex4.add(920.2604229012788);
      Complex complex14 = new Complex(0.0);
      complex14.abs();
      Complex complex15 = Complex.valueOf((-24.4));
      complex15.equals(complex13);
      complex11.readResolve();
      complex14.createComplex(Double.NaN, 1023126.2971604967);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract(698.39180825);
      complex1.NaN.abs();
      Complex complex2 = complex0.NaN.log();
      complex2.INF.add(Double.NaN);
      complex2.readResolve();
      complex0.abs();
      Complex complex3 = Complex.valueOf((-460.2159207168049), (-460.2159207168049));
      complex2.subtract(1.564388935484923);
      complex2.multiply(complex3);
      Complex.valueOf(0.9999997758335487);
      complex1.getArgument();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(1.982919692993164, 1.982919692993164);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.multiply(1.982919692993164);
      complex2.INF.multiply(complex0);
      complex2.ZERO.sqrt1z();
      complex0.I.sinh();
      Complex complex3 = complex1.I.subtract((-124.0));
      complex0.getArgument();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.exp();
      complex1.ZERO.abs();
      Complex complex6 = complex5.ONE.log();
      complex3.NaN.nthRoot(1);
      complex6.ZERO.hashCode();
      complex1.pow(1281.4308523949);
      Complex complex7 = complex4.INF.negate();
      complex7.I.log();
      complex0.hashCode();
      Complex complex8 = complex4.cos();
      complex1.isNaN();
      complex4.equals("");
      complex5.hashCode();
      complex3.getReal();
      complex2.subtract((-124.0));
      complex3.toString();
      complex1.add(complex8);
      Complex complex9 = Complex.valueOf((-2173.44));
      complex8.atan();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.tan();
      complex0.ONE.abs();
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-814.137403116677), (-814.137403116677));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sqrt();
      complex2.INF.sqrt();
      complex0.ONE.multiply(621);
      Complex complex3 = complex0.negate();
      complex3.NaN.exp();
      complex1.asin();
      complex3.toString();
      complex3.getArgument();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.32341301441192627);
      complex0.I.asin();
      complex0.INF.multiply(962);
      complex0.isNaN();
      complex0.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply((-2810));
      complex2.getField();
      Complex complex3 = complex2.atan();
      complex3.ONE.tan();
      complex2.ONE.conjugate();
      complex3.readResolve();
      Complex.valueOf((double) (-2810), (double) (-2810));
      Complex complex4 = complex2.sqrt();
      complex3.sqrt1z();
      complex4.cos();
      complex1.pow(6.789527378582775E-122);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-719.72766293));
      complex0.ONE.reciprocal();
      complex0.pow((-719.72766293));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1674.24986365));
      Complex complex1 = Complex.valueOf(0.0);
      complex0.NaN.pow(complex1);
      complex0.INF.pow(0.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ZERO.cos();
      complex3.NaN.sqrt();
      complex2.NaN.getField();
      Complex complex5 = complex2.INF.divide(0.2976420521736145);
      Complex complex6 = complex1.INF.negate();
      Complex complex7 = complex0.sqrt1z();
      complex7.NaN.sqrt1z();
      Complex complex8 = complex7.subtract(complex5);
      complex8.ZERO.reciprocal();
      Complex complex9 = complex6.ONE.multiply(0.2976420521736145);
      complex1.readResolve();
      complex5.sinh();
      complex1.multiply(1);
      complex1.subtract(complex6);
      complex2.sqrt1z();
      complex8.subtract(0.0);
      complex0.nthRoot(1);
      complex5.createComplex(1001.5696, 0.0);
      complex4.readResolve();
      complex9.multiply(3439);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.INF.hashCode();
      complex2.ONE.tan();
      complex2.NaN.readResolve();
      complex0.getArgument();
      Complex complex3 = complex0.NaN.multiply((-1));
      complex3.ONE.add((double) (-1));
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex1.NaN.negate();
      complex3.sqrt1z();
      Complex.valueOf(0.0, (double) (-1));
      Complex complex6 = complex5.ONE.atan();
      complex0.getImaginary();
      complex1.getArgument();
      Complex complex7 = complex3.add(0.0);
      complex7.ZERO.negate();
      Complex.valueOf(0.0, (-1.0));
      Complex complex8 = complex3.divide(complex6);
      complex7.ONE.divide((-2015.8555));
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex4.cos();
      complex10.INF.atan();
      Complex complex11 = complex1.sqrt1z();
      complex7.log();
      complex2.reciprocal();
      complex11.reciprocal();
      complex8.log();
      complex9.subtract(2425.731342093);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = Complex.valueOf(1987.496336, 1987.496336);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.NaN.add(1987.496336);
      complex3.ONE.multiply(1852.7835864935);
      complex5.ZERO.divide(1987.496336);
      Complex complex7 = complex1.NaN.atan();
      complex7.INF.abs();
      Complex complex8 = complex0.ONE.acos();
      Complex.valueOf(1852.7835864935);
      complex2.NaN.negate();
      complex5.nthRoot(254);
      Complex complex9 = complex2.multiply(37);
      Complex complex10 = complex2.subtract(2402.281650486363);
      Complex complex11 = complex8.subtract(complex6);
      complex9.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex11.ONE.divide(complex1);
      complex4.isNaN();
      complex1.acos();
      Complex complex12 = complex2.createComplex(0.0, 1987.496336);
      complex12.getArgument();
      Complex complex13 = complex1.acos();
      complex13.INF.divide((-2243.175933736598));
      complex4.sqrt1z();
      complex9.multiply(2402.281650486363);
      complex6.log();
      complex4.acos();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.toString();
      complex0.add(complex1);
      Complex complex2 = complex0.I.reciprocal();
      complex2.ZERO.toString();
      Complex complex3 = complex0.cos();
      complex0.add(0.0);
      Complex complex4 = complex3.ONE.divide(0.0);
      complex0.ONE.multiply(complex4);
      complex3.isNaN();
      complex0.toString();
      Complex complex5 = complex1.log();
      Complex.valueOf((-1624.234266950059), (-1624.234266950059));
      Complex complex6 = complex2.ONE.pow(complex1);
      Complex complex7 = complex5.ONE.pow(0.0);
      complex2.getReal();
      Complex complex8 = complex2.multiply(complex0);
      complex8.INF.pow(0.0);
      complex7.isNaN();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.atan();
      Complex complex11 = new Complex(0.0);
      Complex complex12 = complex10.INF.add(complex11);
      complex9.I.exp();
      complex10.getField();
      complex4.hashCode();
      complex4.toString();
      complex12.hashCode();
      complex11.ZERO.sinh();
      complex0.log();
      complex6.cosh();
      Complex complex13 = Complex.I;
      complex11.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.2708985520400816E62);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf(1.2708985520400816E62, 4.020060558571273E-74);
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex4.I.negate();
      complex3.I.getField();
      complex0.ZERO.sqrt1z();
      Complex complex6 = complex0.sin();
      complex6.I.conjugate();
      complex6.ZERO.createComplex(4.020060558571273E-74, 1.2708985520400816E62);
      Complex complex7 = complex0.ZERO.asin();
      complex7.INF.atan();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.tanh();
      complex9.I.acos();
      Complex complex10 = complex0.pow(3313.159);
      Complex complex11 = complex10.add(complex1);
      complex11.NaN.subtract(3313.159);
      Complex.valueOf((-61.038470788386));
      Complex complex12 = complex1.reciprocal();
      complex12.sin();
      complex2.getField();
      complex0.exp();
      complex9.cos();
      Complex.valueOf((-632.364181562));
      Complex complex13 = complex12.divide(3313.159);
      complex13.pow(complex12);
      complex5.divide(1.2708985520400816E62);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex.valueOf(2.2364990583200056E-234);
      Complex complex2 = complex0.reciprocal();
      complex2.acos();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.subtract(complex3);
      complex3.asin();
      complex5.divide(2464.19518116);
      complex1.getField();
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.multiply((-3108));
      complex0.I.cosh();
      complex0.getField();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1036.8541);
      Complex complex1 = complex0.multiply(4102);
      Complex.valueOf((double) 4102);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.nthRoot(1848);
      Complex complex1 = complex0.ZERO.tan();
      complex1.INF.multiply((double) 1848);
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.tan();
      complex3.abs();
      complex2.INF.getArgument();
      complex2.NaN.abs();
      Complex complex4 = Complex.valueOf(0.4574742913246155, (double) 1848);
      Complex complex5 = complex4.ONE.sqrt();
      complex5.ONE.tan();
      complex4.I.readResolve();
      complex5.I.sqrt();
      complex4.INF.getArgument();
      complex0.isNaN();
      Complex complex6 = complex0.asin();
      complex6.ZERO.toString();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex6.NaN.atan();
      complex8.NaN.atan();
      complex7.I.toString();
      complex7.ONE.tan();
      Complex complex9 = complex7.INF.conjugate();
      Complex complex10 = complex7.ONE.negate();
      complex10.ZERO.sinh();
      Complex complex11 = complex7.multiply(complex2);
      complex6.nthRoot(1848);
      complex3.NaN.getField();
      complex6.cosh();
      Complex complex12 = complex4.add(complex11);
      complex12.ONE.tanh();
      complex8.subtract(0.7853981633974483);
      complex8.multiply(complex3);
      Complex.valueOf((double) 1848);
      complex9.getArgument();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex0.getArgument();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      complex1.NaN.getArgument();
      Complex complex5 = complex0.multiply(complex4);
      complex5.INF.abs();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex6.ZERO.atan();
      complex7.divide(complex1);
      Complex complex8 = complex0.subtract(0.0);
      complex8.NaN.tanh();
      Complex complex9 = complex5.ZERO.sqrt();
      complex9.ONE.createComplex((-388.71417587097), 0.0);
      complex5.add(complex4);
      complex4.subtract(complex3);
      complex6.isInfinite();
      Complex complex10 = complex8.conjugate();
      complex10.INF.toString();
      complex6.readResolve();
      Complex complex11 = complex1.atan();
      complex11.ONE.sin();
      complex9.add(Double.POSITIVE_INFINITY);
      complex8.abs();
      complex1.equals(complex9);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex0.INF.subtract(0.0);
      complex2.ONE.cosh();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex3.multiply((-3285));
      Complex complex7 = complex1.pow(0.0);
      Object object0 = new Object();
      complex7.equals(object0);
      Complex complex8 = complex7.add(complex5);
      complex0.add(complex8);
      complex6.log();
      complex4.multiply(0.0);
      complex8.tan();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3092.80035726, (-355.267924));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = Complex.valueOf((-1052.7503098933), (-355.267924));
      complex2.NaN.reciprocal();
      Complex complex3 = complex2.subtract(3.221340469489223E-27);
      Complex complex4 = complex2.sqrt1z();
      complex4.ZERO.getArgument();
      complex4.ZERO.getField();
      complex4.ZERO.add(complex3);
      complex3.divide(complex1);
      complex1.cosh();
      complex3.acos();
      complex2.multiply(complex4);
      complex4.divide((-1527.1984993));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.141592653589793, 3.141592653589793);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.INF.sin();
      complex3.subtract(6.283185307179586);
      Complex complex4 = complex1.NaN.divide((-6.451285264969768E-9));
      complex4.log();
      complex0.ONE.multiply((-2082.540104605));
      Complex complex5 = Complex.valueOf(3.141592653589793);
      Complex complex6 = complex5.INF.createComplex(3.141592653589793, 3.141592653589793);
      Complex complex7 = Complex.valueOf(3.141592653589793, 347.636839532279);
      complex7.ONE.subtract((-1223.091907576163));
      complex0.cos();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-1.2268014119628852E249));
      Complex complex1 = complex0.NaN.negate();
      complex1.ZERO.tanh();
      complex0.NaN.abs();
      complex0.ZERO.cos();
      int int0 = (-419);
      try { 
        complex0.nthRoot((-419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -419
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-3010.0));
      Complex complex1 = complex0.add((-3010.0));
      Complex complex2 = complex1.I.log();
      complex2.INF.acos();
      Complex complex3 = complex1.tan();
      complex1.NaN.sqrt1z();
      Complex complex4 = complex1.add((-304.4504699720922));
      complex4.add(complex0);
      Complex complex5 = complex3.atan();
      complex5.getReal();
      Complex complex6 = complex4.conjugate();
      complex4.INF.toString();
      Complex complex7 = complex4.sqrt1z();
      complex7.NaN.conjugate();
      Complex complex8 = complex6.tanh();
      complex8.I.toString();
      Complex complex9 = Complex.valueOf((-3010.0));
      Complex complex10 = complex9.NaN.subtract((-2967.462081365074));
      Complex complex11 = complex10.INF.multiply(complex1);
      complex9.ONE.atan();
      Complex.valueOf((-3010.0), (-3056.42));
      complex9.atan();
      complex4.getArgument();
      complex11.hashCode();
      complex5.createComplex((-310.0), (-304.4504699720922));
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.hashCode();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = Complex.valueOf(1.0844638420493122E46);
      Complex complex4 = complex3.I.subtract(complex1);
      complex1.I.tanh();
      complex4.INF.nthRoot(1);
      Complex complex5 = complex4.INF.add(complex1);
      complex5.ZERO.multiply(complex2);
      Complex complex6 = complex3.ONE.negate();
      complex3.I.subtract(1.0844638420493122E46);
      complex6.I.negate();
      Complex complex7 = complex0.sinh();
      complex1.tan();
      Complex complex8 = complex1.ONE.conjugate();
      Complex complex9 = complex0.tan();
      complex9.I.negate();
      complex9.getField();
      complex0.reciprocal();
      complex1.getImaginary();
      complex3.divide(1.0844638420493122E46);
      complex6.subtract(4408.68);
      complex9.sin();
      complex6.getArgument();
      Complex complex10 = complex7.subtract(1.0844638420493122E46);
      Complex.valueOf(1.1752011936438014);
      complex8.sqrt1z();
      complex10.sinh();
      complex1.nthRoot(1);
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.pow(0.0);
      complex1.I.asin();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.NaN.pow(complex0);
      Complex complex2 = Complex.valueOf(1937.947448);
      complex0.ONE.toString();
      complex0.readResolve();
      complex0.INF.pow(complex1);
      Complex complex3 = complex0.sqrt();
      complex3.I.sin();
      complex3.NaN.exp();
      complex2.exp();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(383.619964497, 0.0);
      Complex complex1 = complex0.I.cos();
      complex0.negate();
      complex1.I.sin();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.getArgument();
      complex1.tan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 2.0);
      Complex complex1 = new Complex(20.0, 1.634294033050537);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex.valueOf((-1706.5635152238), 20.0);
      complex1.ONE.nthRoot(394);
      Complex complex3 = complex2.sin();
      complex3.atan();
      complex2.equals(" gtiWb[[,qfpqR");
      complex3.add(1.634294033050537);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ONE.multiply(complex2);
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = complex4.ONE.pow(complex3);
      complex0.getImaginary();
      Complex complex6 = complex0.I.sin();
      complex1.INF.conjugate();
      Complex complex7 = complex6.ONE.asin();
      complex7.toString();
      Complex complex8 = complex6.ONE.divide(complex0);
      complex8.add(complex1);
      Complex complex9 = complex8.ZERO.atan();
      complex0.ONE.hashCode();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.log();
      complex11.I.getField();
      complex11.NaN.readResolve();
      complex8.ZERO.tanh();
      complex11.tan();
      complex11.toString();
      Complex complex12 = complex6.pow(6.283185307179586);
      Complex complex13 = complex12.ZERO.pow(6.283185307179586);
      complex9.subtract(complex12);
      complex12.getImaginary();
      Complex complex14 = complex0.sin();
      complex14.INF.multiply(0.0);
      complex1.sqrt1z();
      Complex complex15 = complex13.subtract(complex6);
      complex15.NaN.sqrt();
      complex15.I.conjugate();
      complex1.abs();
      complex5.asin();
      complex10.getArgument();
      complex3.multiply((-8.124251825289188E-11));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ONE.add((-546.0477));
      Complex complex3 = complex2.ZERO.multiply((-2657));
      complex0.NaN.readResolve();
      complex2.NaN.atan();
      Complex complex4 = complex2.ONE.negate();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.log();
      Complex.valueOf((-546.0477), 0.0);
      complex6.INF.readResolve();
      Complex complex7 = Complex.valueOf(0.0, (-546.0477));
      complex3.ZERO.pow(complex6);
      complex7.ZERO.multiply(0.0);
      Complex complex8 = Complex.valueOf(2076.57378455);
      Complex complex9 = complex5.subtract(complex8);
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.createComplex((-2.1749172296989992E-7), (-2657));
      complex9.ONE.abs();
      complex11.ONE.getArgument();
      complex9.tanh();
      complex3.getImaginary();
      complex11.isInfinite();
      complex11.multiply((-546.0477));
      complex0.sqrt();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex((-2253.71), (-2253.71));
      Complex complex2 = complex1.ZERO.asin();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      assertTrue(boolean0);
      
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ONE.getField();
      List<Complex> list0 = complex3.NaN.nthRoot(3390);
      assertFalse(list0.contains(complex2));
      
      Complex complex4 = complex3.ONE.divide((-1354.7371938305));
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.ZERO.divide(complex3);
      Complex complex8 = complex7.ONE.pow((double) 3390);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.INF.exp();
      complex10.ONE.getArgument();
      complex10.NaN.abs();
      Complex complex11 = complex9.ONE.multiply((-2253.71));
      Complex complex12 = Complex.valueOf(0.0);
      complex12.I.subtract((-2253.71));
      Complex complex13 = complex9.INF.reciprocal();
      complex12.INF.readResolve();
      complex9.equals(complex6);
      Complex complex14 = complex1.subtract((-2253.71));
      complex2.getField();
      complex2.add((-1.3953728897042917E-8));
      complex12.I.divide(2369.44);
      List<Complex> list1 = complex14.nthRoot(3390);
      assertFalse(list1.contains(complex2));
      assertEquals(3390, list1.size());
      
      complex12.getReal();
      Complex complex15 = complex11.atan();
      assertEquals((-1.1102230246251565E-16), complex15.getImaginary(), 0.01);
      
      complex14.negate();
      complex13.negate();
      Complex complex16 = complex13.tan();
      assertTrue(complex16.equals((Object)complex2));
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(188.86210532723);
      Complex complex4 = complex0.cos();
      complex4.createComplex((-1.0), 188.86210532723);
      complex3.tanh();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-248.67462518), 666.5143715);
      Complex complex1 = complex0.asin();
      assertEquals(7.260373043996468, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = complex0.conjugate();
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      complex2.abs();
      complex2.pow(0.0);
      Complex complex5 = complex1.pow(complex3);
      complex0.log();
      Complex complex6 = complex5.negate();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals((-0.7071067811865475), complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.subtract(698.39180825);
      complex1.NaN.abs();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex2.INF.add(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      
      Complex complex4 = (Complex)complex2.readResolve();
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      complex0.abs();
      complex0.getField();
      Complex complex5 = Complex.valueOf((-460.2159207168049), (-460.2159207168049));
      assertEquals((-460.2159207168049), complex5.getReal(), 0.01);
      
      Complex complex6 = complex1.acos();
      Complex complex7 = (Complex)complex6.readResolve();
      assertEquals((-7.241926943149815), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex1.asin();
      assertEquals(7.241926943084372, complex8.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex8.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }
}
