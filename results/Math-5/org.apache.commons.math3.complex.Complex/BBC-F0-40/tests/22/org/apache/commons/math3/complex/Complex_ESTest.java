/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:16:51 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-183.0647379), (-183.0647379));
      complex0.INF.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = Complex.valueOf((-183.0647379), Double.POSITIVE_INFINITY);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.subtract((-20.0));
      Complex complex3 = complex2.pow(60.50153);
      complex1.NaN.divide(complex0);
      Complex complex4 = complex1.acos();
      complex4.ZERO.conjugate();
      Complex complex5 = complex0.subtract((-20.0));
      complex3.INF.sqrt();
      Complex complex6 = complex5.divide((-20.0));
      Complex complex7 = complex6.conjugate();
      complex2.NaN.acos();
      complex7.I.tan();
      complex5.add((-67025.3965247914));
      Complex complex8 = complex2.log();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.multiply((-67025.3965247914));
      complex9.acos();
      complex10.tanh();
      complex6.pow(complex8);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply(complex0);
      complex2.readResolve();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-151.466638456871), (-151.466638456871));
      Complex complex1 = Complex.valueOf((-151.466638456871), (-151.466638456871));
      Complex complex2 = complex1.ONE.divide((-151.466638456871));
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex0.sqrt();
      complex0.ONE.getArgument();
      complex4.ZERO.log();
      complex4.NaN.sqrt1z();
      Complex complex5 = complex4.subtract((-151.466638456871));
      Complex complex6 = complex5.ONE.reciprocal();
      complex3.I.pow(0.0);
      complex6.INF.getField();
      Complex complex7 = complex3.createComplex((-151.466638456871), 1.830322504043579);
      Complex complex8 = complex4.pow((-183.0647379));
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.ONE.log();
      Complex complex11 = complex10.ZERO.createComplex((-183.0647379), Double.POSITIVE_INFINITY);
      complex11.ZERO.multiply((-3408));
      complex5.sqrt();
      complex2.isNaN();
      complex8.divide((-183.0647379));
      complex7.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex((-151.466638456871), (-151.466638456871));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.divide((-151.466638456871));
      Complex complex3 = complex0.NaN.log();
      complex0.ONE.getArgument();
      complex2.NaN.sqrt1z();
      Complex complex4 = complex2.subtract((-151.466638456871));
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex3.I.pow(0.0);
      complex6.I.sin();
      complex5.INF.getField();
      complex3.createComplex((-151.466638456871), 1.830322504043579);
      complex2.pow((-183.0647379));
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex8.ZERO.createComplex((-183.0647379), Double.POSITIVE_INFINITY);
      complex9.multiply((-183.0647379));
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(20.0);
      complex1.tan();
      Complex complex2 = complex0.asin();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-541.0));
      Complex complex1 = complex0.subtract(22.28388274626674);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-541.0), 0.0);
      complex0.createComplex(459.0472, (-22941.142565424478));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.divide(complex2);
      complex3.readResolve();
      complex2.sqrt1z();
      Complex complex6 = complex2.createComplex(4533.033041397, 22.28388274626674);
      Complex complex7 = Complex.NaN;
      complex5.multiply(1680);
      complex2.tan();
      complex3.hashCode();
      complex3.sinh();
      complex4.sqrt();
      Complex complex8 = Complex.ONE;
      complex8.ZERO.conjugate();
      complex6.nthRoot(1213);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.120825884089511, 14.120825884089511);
      complex0.sinh();
      Complex complex1 = Complex.valueOf((-162.0327856498019), 4059.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.createComplex(1068.51, 459.0472);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.divide(complex4);
      complex3.readResolve();
      Complex complex6 = Complex.valueOf(2328.645262829603);
      Complex complex7 = complex6.sqrt1z();
      complex0.createComplex((-1125.649105), 0.0);
      complex7.atan();
      complex6.multiply(1058);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.divide(complex7);
      complex3.hashCode();
      complex9.sinh();
      complex9.sqrt();
      Complex.valueOf(459.0472, 459.0472);
      complex1.tanh();
      Complex complex10 = complex8.pow(complex3);
      complex4.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, (-9.698281856949837E-8));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1741.876), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1487.711569393));
      Complex complex3 = new Complex((-1487.711569393), (-1741.876));
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = Complex.I;
      complex0.NaN.abs();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex3.NaN.add(Double.NaN);
      complex3.exp();
      complex0.I.cos();
      complex0.INF.exp();
      Complex complex6 = complex0.sqrt1z();
      complex6.ONE.sqrt1z();
      Complex complex7 = complex3.atan();
      complex7.log();
      complex3.subtract(Double.NaN);
      complex7.NaN.divide(1866.554223328);
      complex2.log();
      Complex complex8 = complex5.subtract(complex4);
      complex8.conjugate();
      complex3.ZERO.multiply(Double.NaN);
      complex8.multiply(2273);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-3869.174));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.ONE.exp();
      complex0.ONE.toString();
      complex0.NaN.getArgument();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.ZERO.createComplex(Double.NaN, (-3869.174));
      complex4.sqrt1z();
      Complex complex7 = complex4.divide(complex2);
      complex7.INF.multiply(649);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex2.subtract((-1.0));
      Complex complex10 = complex0.asin();
      Complex.valueOf((-1.0));
      complex2.subtract(complex9);
      Complex complex11 = complex5.tan();
      Complex complex12 = complex5.divide(complex4);
      complex12.I.pow(Double.NaN);
      complex6.ZERO.cosh();
      complex8.tan();
      Complex complex13 = complex11.subtract(complex6);
      complex13.I.sqrt();
      complex10.add(complex4);
      complex2.asin();
      complex13.pow(complex3);
      Complex complex14 = complex1.createComplex((-1.0), 2070.0172401708);
      complex14.NaN.pow(complex12);
      complex13.tan();
      complex10.cosh();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(560.1320687, (-1.7976931348623157E308));
      Complex complex2 = complex1.pow(complex0);
      complex1.asin();
      Complex.valueOf((-514.0));
      Complex complex3 = complex2.negate();
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 13.924253024029136);
      Complex complex1 = complex0.exp();
      complex0.tanh();
      Complex complex2 = complex0.pow(complex1);
      Complex.valueOf(6.646702214537726E-13, (-20.0));
      complex2.log();
      Complex complex3 = complex2.tanh();
      complex3.I.negate();
      Complex complex4 = Complex.NaN;
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(404.6, (-4962.6944));
      Complex complex1 = complex0.sin();
      complex1.nthRoot(1031);
      Complex complex2 = Complex.NaN;
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(13.924253024029136, 13.924253024029136);
      complex0.tanh();
      complex0.equals(complex0);
      Complex complex1 = Complex.INF;
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex0.abs();
      Complex complex2 = complex0.pow(Double.NaN);
      Complex complex3 = complex0.NaN.acos();
      complex2.I.getField();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.createComplex(Double.NaN, Double.NaN);
      Complex complex7 = complex6.INF.sqrt();
      complex7.exp();
      Complex.valueOf(Double.NaN);
      complex2.INF.tan();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex1.asin();
      complex9.nthRoot(17);
      complex8.pow(complex9);
      Complex complex10 = complex2.sqrt1z();
      complex2.I.multiply(266);
      complex10.toString();
      complex9.createComplex(7.164663249266942E-88, 7.164663249266942E-88);
      Complex complex11 = complex10.cosh();
      Complex complex12 = Complex.valueOf((-2941.219), 7.164663249266942E-88);
      complex12.I.multiply(0.9171525174889656);
      complex3.log();
      complex4.tan();
      complex8.abs();
      Complex complex13 = complex8.tanh();
      complex13.getField();
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 895.0895173769192);
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex((-1736.064956430681), 895.0895173769192);
      complex2.exp();
      complex1.tanh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.cos();
      complex4.I.subtract(895.0895173769192);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.add(1.2469532489776611);
      complex6.getImaginary();
      complex0.readResolve();
      complex1.multiply(1);
      Complex complex7 = complex4.tan();
      Complex.valueOf((-399.99334));
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(946.0, (-1207.462434));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.subtract(0.0);
      complex3.cosh();
      complex3.subtract(0.0);
      Complex complex4 = Complex.ZERO;
      complex4.divide(complex1);
      Complex complex5 = Complex.valueOf((-1585.503557727496), (-1585.503557727496));
      Complex complex6 = complex5.asin();
      complex6.reciprocal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.19062360414733082;
      complex0.createComplex(2411.91938571727, 0.19062360414733082);
      Complex complex1 = new Complex(1610.7193174262352, 2411.91938571727);
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.subtract(1797.0);
      complex3.cosh();
      complex1.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.0, 2883.2882536);
      Complex complex5 = complex4.divide(complex3);
      complex3.asin();
      complex5.reciprocal();
      Complex complex6 = Complex.I;
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.exp();
      complex1.tanh();
      Complex.valueOf(0.0);
      Complex complex2 = complex1.acos();
      complex2.atan();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 895.0895173769192);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.subtract((-1736.064956430681));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.pow(699.95);
      complex0.getField();
      Complex complex6 = complex0.createComplex(4.6097680405580995E-243, 3.454660807101683E62);
      Complex complex7 = complex2.pow(895.0895173769192);
      complex6.asin();
      complex3.log();
      complex0.createComplex(4.6097680405580995E-243, 699.95);
      complex2.sqrt();
      complex4.isNaN();
      Complex complex8 = complex5.divide(4.6097680405580995E-243);
      complex5.nthRoot(7);
      Complex complex9 = Complex.INF;
      complex9.readResolve();
      complex5.equals(complex8);
      Complex complex10 = complex1.divide((-183.0647379));
      complex10.subtract((double) 7);
      complex1.pow(4.6097680405580995E-243);
      complex7.abs();
      Complex complex11 = Complex.valueOf(3.454660807101683E62);
      complex11.multiply((-1280.389));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.add(894.0895173769192);
      complex4.INF.hashCode();
      complex4.abs();
      complex3.log();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.multiply(2145215977);
      complex6.INF.sin();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex7.multiply(2146284725);
      complex7.sin();
      Complex complex9 = complex0.conjugate();
      complex9.NaN.exp();
      Complex complex10 = complex2.multiply(complex9);
      complex0.ONE.negate();
      complex0.nthRoot(2145215977);
      Complex complex11 = complex6.subtract(complex8);
      complex11.sinh();
      complex3.readResolve();
      complex5.ZERO.negate();
      Complex complex12 = Complex.ZERO;
      complex1.equals(complex12);
      complex10.sinh();
      complex12.abs();
      Complex.valueOf(894.0895173769192, (double) 2146284725);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(967.7639, 1736.064956430681);
      Complex complex1 = complex0.exp();
      complex1.tanh();
      Complex complex2 = Complex.ZERO;
      Complex.valueOf(967.7639, 1736.064956430681);
      Complex complex3 = Complex.valueOf(967.7639, 1.263202100290635E-8);
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.INF;
      complex0.subtract(complex5);
      Complex complex6 = Complex.ZERO;
      complex6.log();
      complex4.toString();
      Complex complex7 = complex6.sinh();
      complex7.multiply(7);
      Complex complex8 = new Complex((-412.703832));
      complex4.getField();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 895.0895173769192);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      complex1.exp();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex4.subtract(complex2);
      complex6.log();
      complex3.toString();
      Complex complex7 = new Complex(0.0);
      complex0.equals(complex2);
      Complex complex8 = new Complex(895.0895173769192, 1.3695101737976074);
      complex8.subtract(0.7615941559557649);
      complex3.hashCode();
      complex6.getArgument();
      Complex complex9 = Complex.INF;
      complex4.divide(complex5);
      Complex complex10 = Complex.valueOf(2.414213562373095, 0.0);
      Complex complex11 = complex10.reciprocal();
      complex7.divide(complex10);
      complex11.negate();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(895.0895173769192, 895.0895173769192);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.acos();
      complex1.cosh();
      complex1.subtract(99.94843366);
      Complex complex3 = complex1.cosh();
      complex2.subtract(0.0);
      complex1.divide(complex3);
      Complex complex4 = Complex.I;
      complex4.asin();
      complex0.reciprocal();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(288);
      Complex complex3 = complex2.I.createComplex(749.3, 749.3);
      complex2.ZERO.nthRoot(288);
      Complex complex4 = complex0.ONE.cos();
      complex4.I.acos();
      complex1.ZERO.add(Double.NaN);
      complex0.getImaginary();
      Complex complex5 = (Complex)complex1.readResolve();
      complex5.subtract(801186.244118046);
      Complex complex6 = complex4.multiply(1);
      Complex complex7 = complex0.tan();
      complex4.abs();
      complex5.sin();
      complex7.pow(complex2);
      complex0.isInfinite();
      complex3.isInfinite();
      complex6.subtract(Double.NaN);
      Complex.valueOf(0.20787944661813815, (-387.4392449652462));
      Complex complex8 = Complex.ONE;
      complex0.isInfinite();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.8179381815317125), 895.0895173769192);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.exp();
      complex5.subtract(complex4);
      Complex complex6 = complex5.subtract(complex2);
      complex6.log();
      complex5.toString();
      Complex complex7 = new Complex((-0.8179381815317125));
      complex7.equals(complex6);
      complex3.sinh();
      complex2.multiply(7);
      complex1.multiply(187);
      complex2.negate();
      complex2.divide((-1823.8021169090364));
      complex4.conjugate();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(873.1714586817099, 873.1714586817099);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sinh();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf(873.1714586817099);
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.add(1999.8367807);
      Complex complex6 = Complex.valueOf((-1386.5661394892));
      complex6.abs();
      complex0.equals(complex5);
      Complex complex7 = Complex.INF;
      complex7.divide(1386.5661394892);
      Complex.valueOf(0.5403023058681398);
      Complex complex8 = complex4.sinh();
      complex7.sin();
      complex8.getImaginary();
      complex4.exp();
      Complex complex9 = Complex.ZERO;
      complex6.tan();
      complex1.pow(complex0);
      complex3.multiply((-821));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.add(2.0);
      complex3.getImaginary();
      complex3.readResolve();
      Complex complex4 = complex3.multiply(239);
      Complex complex5 = Complex.ONE;
      complex5.tan();
      complex4.abs();
      Complex complex6 = Complex.valueOf((-1772.8721093708357), 0.0);
      complex6.sin();
      Complex complex7 = Complex.I;
      complex3.pow(complex7);
      complex2.isInfinite();
      complex0.isInfinite();
      complex6.subtract(0.003301092925141802);
      Complex.valueOf((-1016.536272), (-3628.947894178));
      Complex complex8 = Complex.ONE;
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(288);
      Complex complex3 = complex2.I.createComplex(749.3, 749.3);
      complex2.ZERO.nthRoot(288);
      Complex complex4 = complex0.ONE.cos();
      complex4.I.acos();
      complex1.ZERO.add(Double.NaN);
      Complex.valueOf(2.0121798515319824);
      Complex complex5 = complex3.acos();
      complex2.multiply(complex0);
      complex2.tan();
      complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.I.createComplex(749.3, 749.3);
      complex2.ZERO.nthRoot(288);
      Complex complex3 = complex0.ONE.cos();
      complex3.I.acos();
      complex1.ZERO.add(Double.NaN);
      Complex complex4 = new Complex(288);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1704.9927, (-560.1320687));
      complex0.nthRoot(288);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex((-1504.6938407));
      Complex complex3 = complex2.divide(complex0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-151.466638456871), 0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.sqrt();
      complex0.ONE.getArgument();
      Complex complex6 = complex5.ZERO.log();
      complex5.NaN.sqrt1z();
      Complex complex7 = complex5.subtract((-151.466638456871));
      complex7.ONE.reciprocal();
      Complex complex8 = complex4.I.pow(0.0);
      complex5.getField();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.createComplex(Double.POSITIVE_INFINITY, (-560.1320687));
      Complex complex11 = complex7.pow(3995.2);
      Complex complex12 = complex3.asin();
      complex6.log();
      Complex complex13 = complex9.createComplex(0.0, (-560.1320687));
      Complex complex14 = complex13.sqrt();
      complex14.isNaN();
      complex12.divide((-560.1320687));
      complex11.nthRoot(14);
      complex14.readResolve();
      complex4.equals(complex10);
      complex3.divide(237.034);
      complex2.subtract((-560.1320687));
      complex8.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex1 = complex0.createComplex((-1010.0), Double.POSITIVE_INFINITY);
      complex0.abs();
      complex1.nthRoot(1);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.multiply(440);
      complex4.NaN.add(complex3);
      complex2.exp();
      Complex.valueOf(2388698.0007500397, (double) 440);
      complex3.reciprocal();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(873.1714586817099, 873.1714586817099);
      Complex complex1 = Complex.valueOf(516.5225019, (-20.0));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.INF;
      complex4.exp();
      complex4.tanh();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex3.subtract(complex5);
      Complex complex7 = complex4.subtract(complex3);
      complex6.log();
      complex3.toString();
      Complex complex8 = new Complex((-20.0));
      complex4.equals(complex7);
      complex2.sinh();
      complex5.multiply((-7785));
      complex2.multiply(877);
      Complex complex9 = Complex.valueOf((double) (-7785));
      complex9.negate();
      Complex complex10 = new Complex(516.5225019, (-1704.6));
      complex10.divide(516.5225019);
      complex10.pow((double) (-7785));
      complex7.tan();
      complex1.abs();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(12.307178330424525);
      Object object0 = new Object();
      complex1.equals((Object) null);
      Complex complex4 = complex3.negate();
      complex4.add(2406.2434170085176);
      Complex complex5 = Complex.valueOf((-687.52642));
      complex3.abs();
      complex3.equals(complex5);
      Complex complex6 = complex5.divide(Double.NaN);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.sinh();
      complex6.sin();
      complex8.getImaginary();
      Complex complex9 = complex7.exp();
      complex6.cos();
      complex3.sqrt1z();
      complex1.tanh();
      complex2.exp();
      complex0.toString();
      complex5.getArgument();
      complex3.readResolve();
      complex9.NaN.add(complex7);
      complex9.subtract((-3484.166075));
      complex9.readResolve();
      complex8.conjugate();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-151.466638456871), 0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = new Complex((-151.466638456871), 0.0);
      complex0.ONE.getArgument();
      complex5.ZERO.log();
      complex5.NaN.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0, (-151.466638456871));
      Complex complex7 = complex6.ONE.reciprocal();
      Complex complex8 = complex4.I.pow(2.0483381089457398);
      complex7.INF.getField();
      complex4.createComplex(0.0, 1.830322504043579);
      complex5.pow((-183.0647379));
      Complex complex9 = complex0.asin();
      complex9.ONE.log();
      complex6.subtract(1.830322504043579);
      Complex complex10 = new Complex((-4261.492450247438), 0.0);
      Complex complex11 = Complex.ZERO;
      complex2.asin();
      complex3.reciprocal();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 895.0895173769192);
      Complex.valueOf(895.0895173769192);
      complex0.ONE.acos();
      Complex complex1 = complex0.ZERO.cosh();
      complex0.subtract(895.0895173769192);
      Complex complex2 = complex1.cosh();
      complex2.createComplex(2.7349591141837748E-201, 2.0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      complex3.sqrt();
      Complex complex4 = Complex.ZERO;
      complex4.isNaN();
      Complex complex5 = Complex.ONE;
      complex5.divide(2.0);
      complex3.nthRoot(7);
      complex5.readResolve();
      Object object0 = new Object();
      complex4.equals(object0);
      complex4.divide(1235.166347376);
      complex2.subtract(894.7358642917159);
      Complex complex6 = Complex.valueOf(9.761163062156018E179, 894.7358642917159);
      complex6.pow((double) 7);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(873.1714586817099, 873.1714586817099);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sinh();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf(873.1714586817099);
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.add(1999.8367807);
      Complex complex6 = Complex.valueOf((-1386.5661394892));
      complex6.abs();
      complex0.equals(complex5);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.INF.sinh();
      complex7.INF.sin();
      complex1.getImaginary();
      complex1.exp();
      Complex complex8 = complex3.cos();
      complex2.sqrt1z();
      complex8.tanh();
      Complex complex9 = complex8.exp();
      complex9.toString();
      complex4.getArgument();
      complex9.I.readResolve();
      complex4.ZERO.subtract((-1.0));
      Complex.valueOf((-2.356194490192345), Double.POSITIVE_INFINITY);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(288);
      Complex complex3 = complex2.I.createComplex(749.3, 749.3);
      complex2.ZERO.nthRoot(288);
      Complex complex4 = complex0.ONE.cos();
      complex4.I.acos();
      complex1.ZERO.add(Double.NaN);
      complex0.getImaginary();
      Complex complex5 = (Complex)complex1.readResolve();
      Complex complex6 = complex4.multiply(1);
      Complex complex7 = complex0.tan();
      complex4.abs();
      complex5.sin();
      complex7.pow(complex2);
      complex0.isInfinite();
      complex3.isInfinite();
      complex6.subtract(Double.NaN);
      Complex.valueOf(0.20787944661813815, (-387.4392449652462));
      Complex complex8 = Complex.ONE;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(98.71643495);
      complex0.cos();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sinh();
      complex2.I.sqrt();
      complex1.createComplex(98.71643495, 1117.935116187451);
      Complex complex3 = complex0.I.subtract(complex1);
      complex3.negate();
      Complex complex4 = complex1.ZERO.add(98.71643495);
      Complex complex5 = complex4.multiply(complex0);
      complex2.ONE.add((-874.1094667));
      complex2.subtract(1117.935116187451);
      complex4.I.sinh();
      Complex complex6 = complex5.NaN.conjugate();
      double double0 = 201.9;
      complex6.createComplex(201.9, 6.283185307179586);
      Complex complex7 = Complex.INF;
      complex7.abs();
      int int0 = 1073741824;
      // Undeclared exception!
      complex0.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(288);
      Complex complex3 = complex2.I.createComplex(749.3, 749.3);
      complex2.ZERO.nthRoot(288);
      Complex complex4 = complex0.ONE.cos();
      complex4.I.acos();
      complex1.ZERO.add(Double.NaN);
      complex0.getImaginary();
      Complex complex5 = (Complex)complex1.readResolve();
      Complex complex6 = complex0.NaN.createComplex((-20.0), (-1028.7168812844457));
      complex0.abs();
      Complex complex7 = complex3.multiply(complex5);
      complex0.abs();
      complex1.log();
      complex1.sqrt();
      complex3.equals(complex6);
      complex7.atan();
      Complex complex8 = complex3.pow(complex5);
      complex8.ONE.tanh();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(288);
      complex2.I.createComplex(749.3, 749.3);
      Complex complex3 = complex1.tanh();
      complex1.exp();
      Complex complex4 = new Complex(288, Double.NaN);
      complex3.subtract(complex4);
      Complex complex5 = Complex.ZERO;
      complex5.subtract(complex1);
      Complex complex6 = complex4.log();
      complex1.toString();
      Complex complex7 = new Complex(Double.NaN);
      complex3.equals((Object) null);
      complex0.sinh();
      complex2.multiply(257);
      complex6.multiply(288);
      complex3.negate();
      complex7.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.acos();
      Complex complex1 = complex0.multiply((-2052339302));
      Complex complex2 = complex1.createComplex(6.283185307179586, (-2052339302));
      complex1.nthRoot(288);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.acos();
      complex0.add(749.3);
      complex3.getImaginary();
      complex0.readResolve();
      Complex complex5 = new Complex(749.3, 259.096912157);
      complex5.createComplex((-127.0), 259.096912157);
      complex0.abs();
      complex4.nthRoot(288);
      complex1.acos();
      Complex complex6 = complex5.conjugate();
      complex2.multiply(295);
      complex6.exp();
      Complex complex7 = Complex.valueOf(0.1585290151921035, 1.69017999924E7);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 895.0895173769192);
      Complex complex1 = Complex.valueOf(895.0895173769192);
      complex0.ONE.acos();
      Complex complex2 = complex1.multiply(complex0);
      complex2.tan();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 895.0895173769192);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex7.log();
      complex4.toString();
      Complex complex9 = new Complex(0.0);
      complex9.equals(complex7);
      complex2.subtract(895.0895173769192);
      complex6.hashCode();
      complex3.getArgument();
      Complex complex10 = Complex.INF;
      complex2.divide(complex10);
      complex8.reciprocal();
      complex10.divide(complex5);
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(626.1508, 932.633076152015);
      Complex complex1 = Complex.I;
      complex1.ZERO.subtract(626.1508);
      complex1.multiply((-3884));
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.log();
      complex0.getField();
      Complex complex4 = complex3.negate();
      complex4.ONE.nthRoot(2742);
      complex1.readResolve();
      Complex complex5 = complex2.NaN.divide((double) 2742);
      Complex complex6 = complex4.divide(235.1843);
      Complex complex7 = complex6.conjugate();
      complex7.INF.sinh();
      complex2.atan();
      Complex complex8 = complex1.atan();
      complex2.getField();
      complex8.ZERO.negate();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.I.tanh();
      complex10.I.subtract(complex5);
      Complex complex11 = complex8.I.tan();
      Complex complex12 = complex3.multiply(complex6);
      complex8.equals(complex6);
      complex8.conjugate();
      complex11.abs();
      complex12.abs();
      Complex complex13 = complex0.divide(1379.06474052201);
      complex6.subtract(complex13);
      complex2.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(873.1714586817099, 873.1714586817099);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sinh();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf(873.1714586817099);
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.add(1999.8367807);
      Complex complex6 = Complex.valueOf((-1386.5661394892));
      complex6.abs();
      complex0.equals(complex5);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.INF.sinh();
      complex7.INF.sin();
      complex1.getImaginary();
      complex1.exp();
      Complex complex8 = complex3.cos();
      complex2.sqrt1z();
      complex8.tanh();
      Complex complex9 = complex8.exp();
      complex9.toString();
      complex4.getArgument();
      complex9.I.readResolve();
      complex4.ZERO.subtract((-1.0));
      complex9.readResolve();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.NaN.atan();
      complex0.multiply(1);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.ZERO.sinh();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex5.ZERO.createComplex(2.965546585110978E236, 2.965546585110978E236);
      complex0.subtract(2.965546585110978E236);
      complex2.I.hashCode();
      complex0.getArgument();
      complex6.ZERO.divide(complex5);
      complex0.hashCode();
      complex4.ZERO.multiply(complex6);
      complex2.getField();
      Complex complex7 = complex6.add(2.965546585110978E236);
      complex3.subtract(2.718281828459045);
      complex7.pow(2.965546585110978E236);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(98.71643495);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex2.createComplex(98.71643495, 1117.935116187451);
      complex5.getArgument();
      complex2.log();
      complex0.sqrt1z();
      complex4.subtract((-1256.7358312));
      Complex complex6 = complex4.pow(98.71643495);
      complex4.getField();
      Complex complex7 = complex6.createComplex(1207.94748, 98.71643495);
      complex1.pow(3.9782728352520784E-85);
      complex0.asin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.createComplex(Double.POSITIVE_INFINITY, 3.9782728352520784E-85);
      complex8.sqrt();
      complex6.isNaN();
      Complex complex10 = complex9.divide(1.830322504043579);
      complex8.nthRoot(7);
      complex7.readResolve();
      complex5.equals(complex10);
      Complex complex11 = complex8.divide(1117.935116187451);
      complex11.subtract((-1256.7358312));
      complex9.pow((double) 7);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex1 = complex0.createComplex((-1010.0), Double.POSITIVE_INFINITY);
      complex0.abs();
      complex1.nthRoot(1);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.conjugate();
      complex2.multiply(440);
      complex2.exp();
      Complex.valueOf(2388698.0007500397, (double) 440);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.ZERO.sinh();
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.INF.atan();
      Complex complex3 = complex0.I.tanh();
      complex0.subtract(2.965546585110978E236);
      complex2.I.hashCode();
      complex0.getArgument();
      complex1.divide(complex0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1103.56);
      Complex complex1 = Complex.valueOf(895.0895173769192);
      complex0.ONE.acos();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = Complex.valueOf(1103.56, 1103.56);
      complex1.multiply(complex2);
      Complex complex4 = complex3.tan();
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 895.0895173769192);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.exp();
      complex5.subtract(complex4);
      Complex complex6 = complex5.subtract(complex2);
      complex6.log();
      complex4.toString();
      Complex complex7 = new Complex(0.0);
      complex7.equals(complex6);
      complex3.sinh();
      complex2.multiply(7);
      complex1.multiply(187);
      complex2.negate();
      complex2.divide((-1823.8021169090364));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(431.3467162960279);
      complex3.acos();
      Complex complex4 = complex0.cosh();
      complex1.subtract(0.0);
      complex2.cosh();
      complex0.subtract(431.3467162960279);
      complex3.divide(complex0);
      complex0.asin();
      complex4.reciprocal();
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1389.1554));
      Complex complex2 = complex1.NaN.cos();
      complex1.divide(complex2);
      complex1.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      complex2.getField();
      complex3.add((-1389.1554));
      Complex complex4 = complex1.conjugate();
      complex4.negate();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.cos();
      complex2.NaN.cosh();
      complex1.ONE.getField();
      complex1.sqrt1z();
      Complex complex3 = complex1.multiply(0.0);
      complex3.sin();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex1.cosh();
      complex5.INF.nthRoot(2847);
      Complex complex6 = complex3.multiply((-290));
      Complex complex7 = complex6.I.reciprocal();
      complex4.toString();
      complex4.sqrt();
      complex7.multiply(482);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex1 = new Complex(4216.80841067645, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.subtract((-20.0));
      complex3.getField();
      complex2.exp();
      Complex complex4 = complex3.cosh();
      complex4.multiply(1096);
      Complex complex5 = complex1.cos();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex.valueOf(22941.142565424478, (-585.370295564));
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2261246749706581E-104, 1.2261246749706581E-104);
      Complex complex1 = complex0.I.acos();
      complex0.isNaN();
      Complex complex2 = complex0.multiply(1.2261246749706581E-104);
      complex2.getImaginary();
      Complex complex3 = complex1.INF.acos();
      complex3.ZERO.readResolve();
      complex0.add(complex1);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.subtract(complex1);
      complex2.ZERO.subtract(1.2261246749706581E-104);
      complex1.conjugate();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.tanh();
      complex7.ZERO.toString();
      complex4.conjugate();
      complex5.divide(complex3);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex3.INF.sqrt();
      complex2.NaN.readResolve();
      Complex complex5 = complex2.subtract(0.0);
      complex5.INF.pow(complex3);
      Complex complex6 = complex1.INF.sqrt1z();
      Complex complex7 = complex0.createComplex((-553.66371398), (-553.66371398));
      Complex complex8 = complex1.multiply(1113);
      complex6.I.hashCode();
      complex8.readResolve();
      Complex complex9 = complex6.sin();
      complex4.tan();
      complex8.I.nthRoot(1113);
      Complex complex10 = complex8.multiply((-5203.46));
      Complex complex11 = Complex.valueOf((-2200.630587362069), (double) 1113);
      Complex complex12 = complex9.createComplex((-553.66371398), 1113);
      complex12.log();
      complex10.add((-553.66371398));
      complex1.ONE.getField();
      complex4.I.divide(0.0);
      complex11.add(complex8);
      complex9.isNaN();
      Complex complex13 = complex4.tan();
      complex13.INF.conjugate();
      complex7.acos();
      complex11.multiply(1113);
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.I.multiply((-2481.145027));
      complex0.getReal();
      complex0.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = Complex.valueOf(0.0, 1.3861841053630075E-123);
      Complex complex7 = complex2.subtract(complex3);
      Complex complex8 = complex3.divide(Double.NaN);
      Complex complex9 = complex7.I.add(Double.NaN);
      complex9.I.cosh();
      complex8.tanh();
      Complex complex10 = complex5.NaN.pow(complex4);
      complex10.INF.sqrt1z();
      Complex complex11 = complex6.I.tan();
      complex11.ONE.exp();
      complex7.INF.multiply((-1905));
      Complex complex12 = complex0.ZERO.createComplex(547.7277691384422, 0.20660123229026794);
      complex12.ZERO.createComplex(547.7277691384422, 1688.0933790731);
      Complex complex13 = complex7.acos();
      complex6.I.sin();
      Complex.valueOf(487.795, (-2481.145027));
      complex5.equals(complex6);
      Complex complex14 = complex3.cos();
      Complex complex15 = complex14.tan();
      complex15.I.sinh();
      complex13.exp();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.NaN.multiply(385);
      complex1.multiply(complex0);
      complex2.INF.multiply((-1523.554714527));
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.NaN.createComplex((-1523.554714527), 385);
      Complex complex5 = complex0.ONE.cos();
      complex0.ONE.toString();
      complex0.getImaginary();
      complex5.toString();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex3.INF.atan();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex5.ZERO.createComplex(2.965546585110978E236, 2.965546585110978E236);
      complex0.subtract(2.965546585110978E236);
      complex3.I.hashCode();
      complex0.getArgument();
      complex6.ZERO.divide(complex5);
      complex0.hashCode();
      complex4.ZERO.multiply(complex6);
      complex3.getField();
      complex6.add(2.965546585110978E236);
      complex2.conjugate();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-151.466638456871), 0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.divide(0.0);
      complex1.sqrt();
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex0.sqrt();
      complex0.ONE.getArgument();
      complex4.ZERO.log();
      complex4.NaN.sqrt1z();
      Complex complex5 = complex4.subtract((-151.466638456871));
      Complex complex6 = complex5.ONE.reciprocal();
      complex3.I.pow(3.9782728352520784E-85);
      complex6.INF.getField();
      complex3.createComplex(0.0, 1.830322504043579);
      Complex complex7 = complex4.pow((-183.0647379));
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.ONE.log();
      complex9.ZERO.createComplex((-183.0647379), Double.POSITIVE_INFINITY);
      Complex complex10 = complex5.sqrt();
      complex2.isNaN();
      Complex complex11 = complex7.divide((-183.0647379));
      complex11.I.nthRoot(7);
      Object object0 = complex10.readResolve();
      complex10.equals(object0);
      Complex complex12 = complex7.divide(237.034);
      complex12.subtract(0.0);
      complex7.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(98.71643495);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.sinh();
      complex3.I.sqrt();
      complex2.createComplex(98.71643495, 1117.935116187451);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.I.subtract(complex2);
      complex5.negate();
      Complex complex6 = complex2.ZERO.add(98.71643495);
      Complex complex7 = complex6.multiply(complex0);
      complex3.ONE.add((-874.1094667));
      complex3.subtract(1117.935116187451);
      Complex complex8 = complex6.I.sinh();
      complex8.I.getField();
      complex7.NaN.conjugate();
      Complex complex9 = complex4.ZERO.multiply(0);
      complex9.I.tan();
      complex4.NaN.abs();
      Complex complex10 = complex4.sin();
      complex10.NaN.pow(complex0);
      complex2.isInfinite();
      complex7.isInfinite();
      Complex complex11 = complex3.subtract((-874.1094667));
      complex11.ZERO.divide(801.2);
      try { 
        complex1.nthRoot((-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -25
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex1.INF.hashCode();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.tan();
      complex1.I.conjugate();
      complex1.ONE.log();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.I.asin();
      complex6.atan();
      complex4.I.sqrt1z();
      complex2.getImaginary();
      Complex complex7 = complex0.multiply(0.0);
      complex7.pow((-889.0));
      complex4.pow(Double.NaN);
      complex0.getArgument();
      complex3.I.add(complex7);
      complex3.createComplex(0.0, 0.0);
      Complex.valueOf((-1002.532));
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.asin();
      Complex complex1 = complex0.ZERO.pow(6.283185307179586);
      double double0 = 1247.66;
      Complex complex2 = complex0.I.divide(1247.66);
      Complex complex3 = complex2.I.pow(complex0);
      complex3.ZERO.getArgument();
      Complex complex4 = complex1.INF.createComplex(1247.66, 1247.66);
      double double1 = 584.195;
      complex4.NaN.getArgument();
      complex4.INF.add(584.195);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.multiply(199.4188);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ONE.multiply((-3241));
      Complex complex3 = complex0.createComplex((-1252.21), (-1252.21));
      Complex complex4 = complex3.tan();
      complex3.isInfinite();
      complex0.getField();
      Complex complex5 = complex2.log();
      complex0.ONE.exp();
      complex5.ONE.getField();
      Complex complex6 = complex2.createComplex(0.0, (-2.5147255753587636E-8));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.pow(complex7);
      Complex complex9 = complex5.sin();
      complex7.I.getField();
      complex1.conjugate();
      complex7.NaN.sqrt1z();
      complex8.getField();
      Complex complex10 = complex1.log();
      complex10.NaN.readResolve();
      complex5.getReal();
      Complex complex11 = complex7.tan();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex3.add(complex12);
      Complex complex14 = complex13.tanh();
      complex14.reciprocal();
      complex4.getField();
      complex9.acos();
      complex7.getArgument();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.add(127.0);
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.readResolve();
      complex2.ZERO.acos();
      complex0.nthRoot(1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.exp();
      complex4.INF.tanh();
      complex4.I.getField();
      Complex complex5 = Complex.valueOf((double) 1, 0.0);
      complex2.toString();
      complex2.sin();
      Complex complex6 = complex1.sinh();
      complex6.INF.multiply(complex0);
      complex3.abs();
      complex0.log();
      Complex complex7 = complex0.sqrt();
      complex7.equals(complex2);
      complex5.atan();
      complex3.multiply(1);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.INF.multiply(6.753452542942992E-9);
      complex2.ZERO.toString();
      Complex complex3 = complex0.add(365.8140491585);
      complex3.sqrt();
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex5.ZERO.pow(20.0);
      complex5.I.sqrt();
      Complex complex7 = complex6.ONE.subtract(0.0);
      Complex complex8 = complex7.I.createComplex(0.0, 0.0);
      complex6.getField();
      complex6.INF.exp();
      complex0.isInfinite();
      complex6.negate();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex3.negate();
      complex10.ONE.subtract(0.0);
      complex0.readResolve();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex3.cosh();
      complex11.multiply(365.8140491585);
      complex12.toString();
      complex9.cos();
      complex8.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.INF.pow((-336.905134));
      complex0.divide(0.0);
      Complex complex5 = complex3.I.atan();
      Complex complex6 = complex5.ONE.pow(0.0);
      complex6.ONE.tan();
      Complex complex7 = complex0.ZERO.add(complex3);
      Complex complex8 = complex2.ONE.createComplex(0.0, (-872.1692474883691));
      complex2.pow(complex0);
      Complex.valueOf(0.0, (-1112.315006949012));
      complex2.hashCode();
      Complex complex9 = complex1.sqrt1z();
      complex9.ONE.getArgument();
      complex2.isInfinite();
      complex8.divide(complex0);
      complex2.divide(complex1);
      complex0.subtract(complex3);
      complex7.divide(complex2);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2793.1651958285656), 499.46084);
      complex1.NaN.abs();
      complex0.NaN.nthRoot(1378);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.I;
      complex6.I.log();
      complex0.INF.multiply((-2793.1651958285656));
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex0.divide(complex6);
      complex1.multiply(complex8);
      complex6.sinh();
      complex7.equals(complex5);
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex1.ONE.atan();
      complex1.I.multiply(1631.543459845);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.NaN.multiply(complex3);
      complex3.NaN.abs();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = Complex.valueOf((-1540.47661248));
      complex6.ZERO.readResolve();
      Complex complex7 = complex3.conjugate();
      complex5.readResolve();
      complex1.ZERO.pow(1631.543459845);
      complex5.readResolve();
      complex4.INF.createComplex(1631.543459845, 1.0);
      Complex complex8 = complex2.divide(1669.8067698747);
      complex0.pow(complex5);
      Complex complex9 = complex4.tan();
      Complex complex10 = Complex.valueOf((-1406.0), 0.0);
      complex10.sin();
      complex8.tan();
      complex7.pow(2952.355);
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-222.99));
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.multiply(1);
      complex0.isNaN();
      Complex complex2 = complex0.multiply(840);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex2.multiply(840);
      complex5.INF.toString();
      complex2.readResolve();
      Complex complex6 = complex4.divide(complex5);
      complex2.ZERO.reciprocal();
      complex4.ZERO.toString();
      complex0.abs();
      complex4.sin();
      Complex complex7 = complex2.I.multiply(840);
      complex7.ONE.pow(6.283185307179586);
      complex2.sqrt();
      complex2.getReal();
      Complex.valueOf(222.99, (double) 1);
      Complex complex8 = complex2.sinh();
      complex6.cosh();
      complex3.hashCode();
      complex8.getImaginary();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(843.07661);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = Complex.valueOf(843.07661, 216.1655122);
      complex1.cos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex3.multiply(1);
      complex5.ONE.divide(216.1655122);
      Complex complex6 = complex2.NaN.add(complex4);
      complex6.INF.hashCode();
      complex2.ZERO.createComplex(1, 1);
      Complex complex7 = Complex.valueOf((double) 1, 0.0);
      Complex complex8 = Complex.I;
      complex8.NaN.sin();
      complex7.ZERO.subtract(complex8);
      Complex complex9 = complex4.subtract(0.0);
      complex9.abs();
      Complex complex10 = complex0.I.sqrt();
      complex10.INF.subtract(complex3);
      complex9.I.toString();
      Complex complex11 = complex2.conjugate();
      complex11.I.divide(216.1655122);
      complex5.sqrt1z();
      complex0.getField();
      Complex complex12 = complex1.tanh();
      complex12.getArgument();
      complex10.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-789.663));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Complex.valueOf(0.0, (-789.663));
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.acos();
      complex2.I.add(9.420348186357043E-9);
      complex4.abs();
      Complex complex6 = complex5.acos();
      Complex.valueOf((-789.663));
      Complex complex7 = complex3.createComplex(0.0, 9.420348186357043E-9);
      complex7.equals(complex6);
      complex0.multiply((-733));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(288);
      complex2.I.createComplex(749.3, 749.3);
      complex2.ZERO.nthRoot(288);
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex3.I.acos();
      complex1.ZERO.add(Double.NaN);
      complex0.getImaginary();
      complex1.readResolve();
      complex0.NaN.createComplex((-20.0), (-1010.0));
      complex0.abs();
      complex0.nthRoot(288);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.ZERO.multiply(288);
      complex6.I.exp();
      Complex.valueOf(1.0, Double.NaN);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-326.2));
      complex0.I.toString();
      Complex complex1 = complex0.ONE.multiply(2139);
      complex0.NaN.getArgument();
      Complex complex2 = complex1.ONE.sin();
      complex2.sqrt();
      complex2.ZERO.asin();
      Complex complex3 = complex0.multiply((-326.2));
      complex3.NaN.getField();
      Complex complex4 = complex1.pow(Double.NaN);
      complex4.NaN.pow(45.1);
      complex0.INF.nthRoot(220);
      complex4.abs();
      Complex complex5 = complex4.tan();
      complex5.reciprocal();
      complex4.sin();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.acos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex.valueOf(0.0);
      complex0.createComplex((-295.6), (-657.487016659211));
      complex3.I.toString();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.tan();
      complex6.INF.pow(complex4);
      complex2.I.cos();
      Complex complex7 = complex1.multiply(787);
      Complex complex8 = complex7.multiply((-7.044869765481105E-8));
      complex7.ZERO.pow(complex0);
      Complex complex9 = complex6.reciprocal();
      complex2.getReal();
      complex0.abs();
      complex4.divide(complex2);
      Complex complex10 = complex2.tanh();
      complex10.I.sqrt();
      Complex complex11 = complex8.subtract(1.0);
      complex11.getField();
      complex5.add((-20.0));
      Complex complex12 = complex9.sqrt1z();
      complex1.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.conjugate();
      Complex complex1 = complex0.INF.tan();
      complex1.I.getField();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.sin();
      Complex complex3 = complex0.sin();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-2.812076759125914E-8));
      Complex complex1 = complex0.multiply((-248));
      complex1.negate();
      complex0.multiply((double) (-248));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4111.18));
      complex0.INF.cos();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.valueOf((-4111.18), 0.0);
      complex0.I.add(0.0);
      Complex complex3 = complex0.atan();
      complex0.getReal();
      Complex complex4 = complex1.multiply(complex3);
      complex2.sqrt1z();
      complex1.ZERO.hashCode();
      Complex.valueOf((-1617.1427429929538), 0.0);
      complex4.getField();
      Complex.valueOf(2906.9871, 0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2355.36764, 2355.36764);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(2355.36764);
      Complex complex4 = complex2.INF.subtract(complex3);
      complex2.log();
      Complex complex5 = complex1.tan();
      complex5.ZERO.cos();
      complex0.sqrt1z();
      complex0.sqrt1z();
      complex1.sqrt();
      complex5.getReal();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 497.830740268606;
      Complex complex0 = Complex.valueOf(497.830740268606, 497.830740268606);
      Complex complex1 = null;
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      complex0.ZERO.subtract(Double.POSITIVE_INFINITY);
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.ZERO.tan();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(589.63);
      Complex complex1 = complex0.ZERO.divide(589.63);
      Complex complex2 = complex0.add(589.63);
      Complex complex3 = complex0.reciprocal();
      complex3.INF.multiply(363);
      complex3.NaN.cos();
      complex3.ZERO.toString();
      complex2.reciprocal();
      Complex complex4 = complex1.conjugate();
      complex4.toString();
      Complex complex5 = complex1.sqrt();
      complex5.asin();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.nthRoot(7);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.multiply(1718.95513367363);
      complex3.I.readResolve();
      complex3.INF.acos();
      Complex.valueOf(336.5506438, 0.0);
      Complex complex4 = Complex.valueOf((double) 7);
      complex0.abs();
      Complex complex5 = complex4.subtract(Double.NaN);
      Complex complex6 = complex5.sinh();
      complex2.ONE.getArgument();
      complex0.sin();
      Complex complex7 = complex2.tanh();
      complex7.getArgument();
      Complex complex8 = complex2.asin();
      complex8.ONE.toString();
      Complex complex9 = complex0.tanh();
      complex1.NaN.hashCode();
      complex9.createComplex(3415.1104408566534, 0.0);
      Complex complex10 = complex6.cos();
      complex10.cos();
      complex7.multiply((double) 7);
      complex1.nthRoot(4798);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-1902.29565));
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2075.837251990987, 2075.837251990987);
      Complex complex1 = Complex.valueOf(1901.544, 3.886891475472745E177);
      complex1.tan();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      complex0.cosh();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.atan();
      complex2.INF.tan();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex3.tanh();
      complex3.exp();
      complex4.ONE.subtract(complex1);
      complex0.subtract(complex1);
      Complex complex5 = complex3.log();
      complex4.toString();
      complex5.equals(complex0);
      complex5.sinh();
      complex1.multiply(7);
      complex5.multiply(1);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(884.458990366);
      complex0.INF.negate();
      complex0.hashCode();
      Complex.valueOf(1697.66, (-2260.1793));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 946.0);
      Complex complex1 = complex0.log();
      complex1.INF.getField();
      complex1.ZERO.multiply((-2071));
      complex0.INF.hashCode();
      complex1.NaN.sin();
      complex0.multiply(946.0);
      Complex complex2 = new Complex(0.0);
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-3.197037359731606E-8));
      Complex complex1 = complex0.NaN.sin();
      complex0.NaN.hashCode();
      complex0.getField();
      Complex complex2 = complex0.multiply(1495);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.sin();
      complex4.I.sqrt1z();
      complex4.sqrt();
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.ONE.tan();
      complex5.INF.asin();
      Complex complex6 = complex5.NaN.divide((-414.0));
      Complex complex7 = complex2.sinh();
      complex7.cos();
      complex0.ONE.subtract((-1.0965324942770584E171));
      Complex complex8 = complex3.ZERO.negate();
      complex1.log();
      complex3.readResolve();
      complex2.pow(0.0);
      complex7.getField();
      complex0.createComplex((-3.197037359731606E-8), 0.0);
      complex8.divide((-3.197037359731606E-8));
      complex6.getReal();
      Complex.valueOf((-1.0965324942770584E171));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.tan();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.pow(0.0);
      complex4.INF.acos();
      complex3.NaN.hashCode();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = complex5.I.sqrt1z();
      Complex complex8 = complex5.INF.negate();
      complex0.NaN.toString();
      complex5.ZERO.readResolve();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex10.ZERO.reciprocal();
      Complex complex12 = complex9.ONE.tan();
      complex3.cos();
      Complex complex13 = complex12.ZERO.add(complex7);
      assertEquals(1.4142135623730951, complex13.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      complex6.isNaN();
      complex3.readResolve();
      Complex complex14 = complex10.INF.cos();
      Complex complex15 = complex12.cos();
      assertEquals(1.557407724654902, complex12.getReal(), 0.01);
      assertEquals(0.01338820214867596, complex15.getReal(), 0.01);
      
      complex8.subtract(complex10);
      assertTrue(complex8.isInfinite());
      
      Complex complex16 = complex4.exp();
      Complex complex17 = complex16.negate();
      assertSame(complex17, complex11);
      
      Complex complex18 = complex14.log();
      assertNotSame(complex9, complex4);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertSame(complex18, complex5);
      assertTrue(complex10.equals((Object)complex1));
      assertSame(complex9, complex6);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(809.66844009, 809.66844009);
      String string0 = complex0.toString();
      assertEquals("(809.66844009, 809.66844009)", string0);
      
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.pow(complex1);
      complex3.ONE.hashCode();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.subtract(complex4);
      Complex complex7 = Complex.ZERO;
      complex6.ZERO.add(complex7);
      Complex complex8 = complex6.NaN.multiply(809.66844009);
      assertEquals((-809.6684400900003), complex6.getReal(), 0.01);
      assertEquals(809.6684400900002, complex4.getImaginary(), 0.01);
      
      complex5.ZERO.add(complex0);
      assertEquals(7.736345601517303, complex5.getImaginary(), 0.01);
      assertEquals(0.7853979726726568, complex5.getReal(), 0.01);
      
      Complex.valueOf(809.66844009, 675.26845635915);
      Complex complex9 = complex2.subtract(2.0);
      double double0 = complex9.getImaginary();
      assertSame(complex9, complex8);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
