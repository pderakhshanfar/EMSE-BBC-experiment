/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:46:40 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0812448255518705E-301, 20.0);
      complex0.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.reciprocal();
      complex2.nthRoot(1588);
      complex0.cosh();
      complex1.tan();
      complex4.atan();
      complex4.sqrt1z();
      complex1.multiply(1588);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2130.295847153, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2130.295847153);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ZERO.negate();
      complex4.ONE.acos();
      Complex complex5 = complex2.NaN.sin();
      complex5.I.multiply(1059);
      Complex complex6 = complex2.divide((-438.45));
      complex6.NaN.add(2130.295847153);
      Complex complex7 = complex0.pow(2130.295847153);
      complex1.add(complex7);
      Complex complex8 = complex5.ONE.divide((-20.0));
      complex7.createComplex((-438.45), (-335.0));
      complex5.cosh();
      complex8.pow(8.881133159512924E277);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2130.295847153, 2130.295847153);
      complex0.INF.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.ONE.getField();
      Complex complex4 = complex0.pow((-278.496301738));
      complex4.exp();
      complex1.pow((-272.304074));
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex3.sqrt1z();
      complex6.sin();
      complex0.add(complex5);
      Complex complex7 = Complex.valueOf(1850.653, (-112.4628429609));
      complex7.atan();
      complex2.divide(complex7);
      complex2.subtract(complex4);
      Complex complex8 = Complex.NaN;
      complex8.sin();
      complex6.nthRoot(1588);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(2227.5811659848464, 2076.8);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5315.113578585618));
      Complex complex1 = complex0.I.divide((-5315.113578585618));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.createComplex((-5315.113578585618), (-2362.22737771));
      Complex complex5 = complex2.multiply(629);
      Complex complex6 = complex4.divide(complex0);
      complex3.multiply(0.0017509508786588412);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex1.multiply(629);
      complex8.readResolve();
      Complex complex9 = new Complex((-414.309277651165), 1473.0349882);
      Complex complex10 = complex9.sin();
      complex4.subtract((-5315.113578585618));
      complex10.tan();
      complex5.log();
      Complex.valueOf(0.0017509508786588412);
      complex4.getField();
      complex6.sqrt();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8120110690895695E7);
      Complex complex1 = complex0.asin();
      complex1.INF.multiply((-4822));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ZERO.multiply(2.8120110690895695E7);
      complex4.I.subtract(1.0);
      Complex complex5 = new Complex(2.8120110690895695E7);
      complex5.multiply((-1519.3675969044878));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.nthRoot(1780);
      complex0.I.sqrt();
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.INF.getArgument();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.ONE.sinh();
      complex4.toString();
      Complex complex5 = complex1.asin();
      Complex complex6 = Complex.valueOf((double) 1780, (-20.0));
      complex6.toString();
      Complex complex7 = complex6.tan();
      complex7.multiply(626.1107582784452);
      Complex complex8 = new Complex(0.7853981633974483);
      complex5.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-3.948954622015801E-9));
      complex0.ZERO.getField();
      complex0.abs();
      Complex complex1 = Complex.valueOf(6.283185307179586, 4.64541509313015E7);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.multiply((-1051.0070457));
      complex3.NaN.atan();
      complex0.exp();
      Complex complex5 = complex4.subtract(complex2);
      complex0.NaN.exp();
      complex3.pow(complex5);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.asin();
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.subtract(Double.NaN);
      complex4.ZERO.tanh();
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      complex5.I.readResolve();
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex6.INF.divide(complex3);
      Complex complex8 = complex7.tan();
      complex8.INF.pow(8.415152304682385);
      complex0.log();
      complex7.createComplex(Double.NaN, (-2.7872543595601883E7));
      complex5.nthRoot(1745678910);
      Complex complex9 = Complex.ZERO;
      complex2.add(complex9);
      complex3.pow(complex4);
      complex9.cos();
      complex3.acos();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-20.0), 1.0);
      complex1.cosh();
      Complex complex2 = new Complex(5096222.560546234);
      complex2.subtract(5096222.560546234);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply((-20.0));
      complex0.multiply(complex2);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-533.92763494111), (-533.92763494111));
      Complex complex1 = complex0.tan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 6.973406618232634);
      complex0.ONE.divide(6.973406618232634);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-533.92763494111));
      Complex complex1 = complex0.asin();
      complex1.tan();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-533.92763494111));
      Complex.valueOf((-533.92763494111));
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2097.65300421403, 1.5707963267948966);
      complex0.I.multiply(3173);
      complex0.NaN.abs();
      Complex complex1 = complex0.cos();
      complex1.sqrt();
      complex1.toString();
      Complex complex2 = Complex.valueOf(1.5707963267948966);
      Complex complex3 = complex2.ZERO.reciprocal();
      complex1.abs();
      complex1.getReal();
      Complex complex4 = complex0.exp();
      complex4.sinh();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-533.92763494111));
      Complex complex1 = complex0.asin();
      complex1.pow(complex0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(2115.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex((-1.0), (-848.0351789173117));
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.42735910415649414);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.multiply((-2120));
      complex0.log();
      Complex complex1 = new Complex(1.0, (-969.7));
      complex1.pow((-969.7));
      complex1.createComplex(1.0, (-969.7));
      complex1.conjugate();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1628.81307947805));
      complex0.isNaN();
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = Complex.valueOf(895.4320907460038, 895.4320907460038);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.valueOf(3.0127206145478672E231);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex0.conjugate();
      complex8.divide(complex4);
      Complex complex9 = Complex.INF;
      complex3.multiply(complex9);
      Complex complex10 = complex7.pow(complex2);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex5.divide(0.00839120709167322);
      Complex.valueOf(Double.NaN, (-3511.34));
      Complex complex13 = complex2.reciprocal();
      complex10.negate();
      complex13.getImaginary();
      complex8.getField();
      complex3.reciprocal();
      complex6.tanh();
      complex12.subtract(complex8);
      complex11.asin();
      complex5.divide(0.00839120709167322);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.exp();
      complex0.equals(complex2);
      Complex complex3 = complex1.pow((-414.889519));
      Complex complex4 = complex1.pow((-20.0));
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = Complex.ONE;
      complex3.divide((-1.0));
      Complex.valueOf((-20.0), (-20.0));
      Complex complex7 = new Complex((-414.889519), (-414.889519));
      Complex complex8 = complex7.reciprocal();
      complex2.negate();
      complex5.getImaginary();
      complex0.getField();
      complex2.reciprocal();
      complex3.tanh();
      complex7.subtract(complex8);
      complex0.asin();
      complex2.divide((-1279.9938452495));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.createComplex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.divide(complex2);
      complex2.getArgument();
      Complex.valueOf(1.7177785285061278E-7);
      complex1.add(complex2);
      Complex complex5 = Complex.ZERO;
      complex4.multiply(954);
      Complex complex6 = new Complex(0.42319912171599805, Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.exp();
      complex4.cosh();
      Complex complex8 = new Complex(Double.NaN);
      complex2.hashCode();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex2.NaN.readResolve();
      complex1.add(complex2);
      complex3.log();
      Complex complex4 = Complex.valueOf((-3805.0), 874.667136184);
      complex4.pow(874.667136184);
      Complex.valueOf(6.283185307179586);
      Complex.valueOf((-633.6));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1231.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.INF.abs();
      Complex complex3 = complex2.ONE.cosh();
      complex3.INF.sinh();
      complex0.tan();
      Complex complex4 = complex1.ZERO.multiply(1942.73);
      Complex complex5 = Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex0.conjugate();
      complex1.divide(complex8);
      complex4.multiply(complex2);
      complex5.pow(complex7);
      Complex complex9 = Complex.ONE;
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf((-5.907349480138712E-8), 0.024984324964314908);
      Complex complex10 = complex1.reciprocal();
      complex2.negate();
      Complex complex11 = new Complex(1942.73, (-1.0));
      complex11.getImaginary();
      complex10.getField();
      complex10.reciprocal();
      complex5.tanh();
      complex7.subtract(complex9);
      complex2.asin();
      Complex.valueOf(100.05357, 878.2507);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex1.sqrt1z();
      complex1.isNaN();
      Complex complex4 = complex0.multiply(1942.73);
      complex1.cos();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = new Complex(1, 1);
      Complex complex7 = complex2.subtract(complex5);
      complex6.sinh();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex5.divide(complex3);
      Complex complex10 = new Complex(1.6168320178985596, 20.0);
      complex9.multiply(complex10);
      complex8.pow(complex2);
      Complex complex11 = complex3.divide((double) 1);
      Complex.valueOf(3.012720614547867E231, (double) 1);
      complex1.reciprocal();
      Complex complex12 = complex2.negate();
      complex12.getImaginary();
      Complex complex13 = Complex.valueOf(1942.73, 0.7615941559557649);
      complex13.getField();
      complex13.reciprocal();
      complex11.tanh();
      complex7.subtract(complex4);
      complex8.asin();
      Complex complex14 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.subtract(697.9533514295);
      complex1.readResolve();
      Complex complex4 = complex1.subtract(complex2);
      complex2.asin();
      complex0.sin();
      complex0.getArgument();
      Complex complex5 = complex2.atan();
      complex3.readResolve();
      Complex complex6 = complex0.asin();
      complex2.abs();
      complex1.add(complex4);
      complex6.sinh();
      complex6.sqrt();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.3367192431762989);
      complex3.sqrt();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.exp();
      complex0.equals(complex2);
      complex0.INF.cosh();
      Complex complex3 = complex1.pow((-414.889519));
      Complex complex4 = complex1.pow((-20.0));
      complex4.log();
      complex0.abs();
      Complex complex5 = Complex.ZERO;
      complex4.readResolve();
      Complex complex6 = complex2.createComplex(0.03341798107940747, (-20.0));
      complex6.acos();
      Complex complex7 = complex3.atan();
      complex6.divide(complex5);
      Complex.valueOf(0.9060367009005804, (-745.0));
      complex5.getArgument();
      Complex complex8 = Complex.valueOf((-20.0));
      complex7.add(complex8);
      Complex complex9 = Complex.ZERO;
      complex3.multiply((-1094));
      complex5.sinh();
      complex8.exp();
      complex3.cosh();
      Complex complex10 = new Complex((-1094));
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      complex1.tanh();
      complex1.sinh();
      complex1.getImaginary();
      Complex.valueOf(0.7853981633974483);
      complex1.readResolve();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1231.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.INF.abs();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.ZERO.multiply(1942.73);
      Complex complex7 = Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.I.cos();
      complex0.ONE.subtract(complex6);
      Complex complex9 = complex5.ZERO.sinh();
      Complex complex10 = complex9.NaN.conjugate();
      complex9.ONE.divide(complex10);
      complex10.INF.multiply(complex8);
      complex10.pow(complex9);
      complex0.I.divide(0.0);
      Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      complex2.ZERO.reciprocal();
      Complex complex11 = complex5.negate();
      complex11.getImaginary();
      complex2.getField();
      Complex complex12 = complex1.reciprocal();
      complex12.INF.tanh();
      complex4.subtract(complex3);
      complex7.asin();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1231.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.INF.abs();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.ZERO.multiply(1942.73);
      Complex complex7 = Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.I.cos();
      complex0.ONE.subtract(complex6);
      Complex complex9 = complex5.ZERO.sinh();
      Complex complex10 = complex9.NaN.conjugate();
      complex9.ONE.divide(complex10);
      complex10.INF.multiply(complex8);
      complex10.pow(complex9);
      Complex complex11 = complex0.I.divide(0.0);
      Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      complex2.ZERO.reciprocal();
      Complex complex12 = complex5.negate();
      complex12.I.nthRoot(1165);
      complex12.getImaginary();
      complex2.getField();
      Complex complex13 = complex1.reciprocal();
      complex13.INF.tanh();
      complex4.subtract(complex3);
      complex11.asin();
      complex0.sin();
      complex7.multiply((-1497.754285));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      complex0.I.abs();
      Complex complex2 = (Complex)complex1.ONE.readResolve();
      complex1.multiply(1);
      complex1.sqrt1z();
      complex1.isNaN();
      complex2.multiply(1942.73);
      Complex complex3 = Complex.valueOf(3.012720614547867E231, (double) 1);
      complex1.cos();
      complex2.getImaginary();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex3.equals(complex2);
      complex1.subtract(93.917499891);
      complex1.cos();
      Complex complex4 = new Complex(93.917499891, (-168.5283381428281));
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.cosh();
      Complex complex2 = complex1.sinh();
      complex1.tan();
      complex2.multiply(1942.73);
      Complex complex3 = Complex.valueOf((-1.538273497873993E260));
      Complex complex4 = complex3.cos();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.multiply(complex4);
      Complex.valueOf((-20.0), (-1.538273497873993E260));
      complex3.reciprocal();
      complex1.negate();
      complex6.getField();
      complex5.tanh();
      complex1.subtract(complex4);
      complex3.asin();
      Complex.valueOf(0.0, 1126.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex1.negate();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.getField();
      complex0.multiply(0);
      complex0.tan();
      complex1.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      complex2.NaN.conjugate();
      Object object0 = complex0.INF.readResolve();
      object0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.pow((-2068.91591875618));
      Complex complex4 = complex1.log();
      complex2.abs();
      Complex complex5 = Complex.ZERO;
      complex4.readResolve();
      Complex complex6 = complex5.createComplex(Double.NaN, Double.NaN);
      complex1.acos();
      complex6.atan();
      Complex complex7 = complex5.divide(complex1);
      complex4.getArgument();
      complex3.add(complex2);
      Complex complex8 = Complex.ZERO;
      complex6.multiply(1051);
      complex0.sinh();
      complex7.exp();
      complex4.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex1.ONE.readResolve();
      Complex complex3 = complex1.multiply(1);
      complex1.sqrt1z();
      complex1.isNaN();
      complex0.pow((double) 1);
      Complex complex4 = complex1.multiply(3093.399738813735);
      Complex complex5 = complex4.tanh();
      complex5.nthRoot(1);
      complex2.sqrt();
      Complex complex6 = new Complex(0, (-4227.6163566577));
      complex0.cosh();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.tan();
      Complex complex1 = complex0.exp();
      complex0.equals(complex1);
      complex0.INF.cosh();
      complex0.nthRoot(37);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ONE.multiply(1);
      Complex complex4 = complex0.I.add((double) 1);
      complex3.ONE.toString();
      Complex complex5 = Complex.valueOf(0.0, 761.65);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex0.add(761.65);
      Complex complex8 = complex7.INF.subtract(0.0);
      Complex complex9 = complex8.I.atan();
      Object object0 = new Object();
      complex0.equals(complex9);
      complex2.subtract(2760.672751);
      complex4.cos();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(3.3192589952456465E-232, (-28.92401));
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.subtract(complex5);
      complex6.sinh();
      complex5.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.divide(complex7);
      complex8.multiply(complex0);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex1.divide(77.713522459);
      Complex complex11 = Complex.ONE;
      complex8.reciprocal();
      complex4.negate();
      complex0.getImaginary();
      complex10.getField();
      Complex complex12 = complex6.reciprocal();
      // Undeclared exception!
      complex12.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sin();
      complex3.abs();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex1.sinh();
      complex0.tan();
      Complex complex6 = complex1.multiply((-0.999999899362356));
      Complex complex7 = Complex.valueOf((-0.999999899362356), (-1.0555555555555556));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex7.subtract(complex5);
      complex1.sinh();
      complex6.conjugate();
      complex1.divide(complex8);
      Complex complex10 = Complex.INF;
      complex7.pow(complex0);
      complex7.divide(0.9986967766711408);
      Complex complex11 = Complex.valueOf((-0.999999899362356), Double.NaN);
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = new Complex(0.9986967766711408, Double.NaN);
      complex13.negate();
      Complex complex14 = new Complex(Double.NaN);
      complex14.getImaginary();
      complex9.getField();
      complex1.reciprocal();
      complex4.tanh();
      complex5.subtract(complex12);
      complex10.asin();
      Complex.valueOf((-1270.020431), 1942.73);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
      complex1.cosh();
      complex0.nthRoot(37);
      complex0.sinh();
      Complex complex2 = complex1.multiply(37);
      Complex complex3 = complex0.add(1741.51799);
      Complex complex4 = Complex.NaN;
      complex4.toString();
      Complex.valueOf(8915.89091429239, 8915.89091429239);
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex(761.65, Double.NaN);
      Complex complex7 = complex6.add(761.65);
      complex3.subtract((-849.1401687737));
      complex2.atan();
      complex5.getImaginary();
      complex4.cos();
      Complex complex8 = Complex.ONE;
      complex8.add(5.551115123125783E-17);
      complex7.tanh();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.add((-2881.0458816682));
      complex10.hashCode();
      Complex complex11 = complex10.tan();
      complex11.ZERO.sqrt();
      complex7.atan();
      complex4.multiply(37);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex1.ONE.readResolve();
      Complex complex3 = complex1.multiply(1);
      complex1.sqrt1z();
      complex1.isNaN();
      Complex complex4 = complex2.multiply(1942.73);
      Complex complex5 = Complex.valueOf(3.012720614547867E231, (double) 1);
      complex1.cos();
      Complex complex6 = complex3.subtract(complex2);
      Complex complex7 = complex6.sinh();
      complex7.INF.conjugate();
      complex7.conjugate();
      Complex complex8 = complex5.divide(complex2);
      complex3.multiply(complex6);
      complex6.pow(complex3);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.divide(3.012720614547867E231);
      Complex complex11 = Complex.valueOf((double) 1, 3.012720614547867E231);
      complex11.reciprocal();
      complex3.negate();
      complex1.getImaginary();
      complex4.getField();
      Complex complex12 = complex10.reciprocal();
      complex12.tanh();
      complex8.subtract(complex9);
      complex1.asin();
      Complex.valueOf(0.0, (-611.54));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1231.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.INF.abs();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.pow(0.9060367009005804);
      complex6.log();
      complex4.abs();
      Complex complex8 = Complex.ZERO;
      complex7.readResolve();
      complex5.createComplex((-2767.6951362031), 2076.1176);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.acos();
      complex5.atan();
      Complex complex11 = Complex.valueOf(0.0);
      complex5.divide(complex11);
      complex9.getArgument();
      Complex complex12 = complex10.add(complex3);
      Complex complex13 = Complex.ZERO;
      complex9.multiply(1073500856);
      complex12.sinh();
      complex13.exp();
      complex5.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      Complex.valueOf(0.07884006202220917, 0.07884006202220917);
      Complex complex3 = complex2.NaN.conjugate();
      complex0.isInfinite();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4457.94551322584);
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(4457.94551322584);
      complex1.readResolve();
      complex1.asin();
      Complex complex3 = complex0.sin();
      complex0.getArgument();
      Complex complex4 = complex3.atan();
      complex1.readResolve();
      Complex complex5 = complex0.asin();
      complex4.abs();
      complex1.add(complex4);
      complex2.sinh();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.sinh();
      Complex.valueOf(2799.409753);
      complex4.exp();
      complex6.subtract(complex8);
      complex5.cos();
      Complex complex9 = Complex.ONE;
      complex9.getImaginary();
      complex2.acos();
      Complex complex10 = new Complex(0.0);
      Complex.valueOf(0.0, 2799.409753);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.04226739708981E-9));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex2.cosh();
      complex1.hashCode();
      Complex complex5 = complex4.sin();
      complex5.pow(complex0);
      complex2.add(complex5);
      Complex complex6 = complex1.conjugate();
      complex3.hashCode();
      complex1.negate();
      complex3.conjugate();
      complex6.add((-4.04226739708981E-9));
      complex4.readResolve();
      Complex complex7 = new Complex((-4.04226739708981E-9));
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.04226739708981E-9));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.cos();
      complex2.NaN.nthRoot(17);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.NaN.sin();
      complex5.I.add(0.0);
      Complex complex6 = complex0.NaN.createComplex(7.316033240396569E150, 7.316033240396569E150);
      complex6.ZERO.cos();
      complex3.NaN.getField();
      complex0.isNaN();
      Complex complex7 = Complex.valueOf((-4.04226739708981E-9), (-4.04226739708981E-9));
      complex3.isInfinite();
      complex7.ONE.asin();
      Complex complex8 = Complex.valueOf(2.0, (-1572.55292284));
      complex7.log();
      complex7.subtract(2.0);
      complex4.cos();
      complex8.INF.reciprocal();
      complex8.NaN.sin();
      complex1.sin();
      complex8.subtract(complex0);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex1.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.add(0.6684302091598511);
      Complex complex4 = complex2.createComplex(1902.05241, 1276.845289007);
      Complex complex5 = complex4.cos();
      complex4.getField();
      complex4.isNaN();
      Complex complex6 = Complex.valueOf(0.0, (-1.4255188208147591));
      complex6.isInfinite();
      complex5.asin();
      Complex complex7 = Complex.valueOf((-1.4255188208147591), (-1572.55292284));
      complex0.log();
      complex4.getArgument();
      Complex.valueOf(7.316033240396569E150);
      complex3.divide(complex7);
      complex4.tanh();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1231.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.INF.abs();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.ZERO.multiply(1942.73);
      Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.I.cos();
      Complex complex8 = complex0.ONE.subtract(complex6);
      complex8.readResolve();
      complex1.asin();
      complex5.abs();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.0));
      complex9.add(complex7);
      complex4.sinh();
      Complex complex10 = Complex.ONE;
      complex10.sqrt();
      complex6.sinh();
      Complex.valueOf((-1.0));
      complex8.exp();
      complex0.subtract(complex1);
      complex6.cos();
      complex5.getImaginary();
      complex10.acos();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex1.sqrt1z();
      complex1.isNaN();
      Complex complex4 = complex0.pow((double) 1);
      complex4.pow(5016085.6805223515);
      complex4.log();
      complex3.abs();
      Complex complex5 = Complex.ZERO;
      complex5.readResolve();
      Complex complex6 = complex4.createComplex(5016085.6805223515, 935.0166045062003);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex5.atan();
      complex8.divide(complex0);
      complex6.getArgument();
      complex8.add(complex5);
      Complex complex9 = Complex.ZERO;
      complex9.multiply(1);
      complex9.sinh();
      complex7.exp();
      complex6.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.createComplex((-1.5707963267948966), (-500.692792138));
      Complex complex5 = complex0.cos();
      complex1.isNaN();
      complex1.sqrt1z();
      Complex complex6 = Complex.valueOf((-500.692792138), (-1.5707963267948966));
      complex0.isInfinite();
      Complex.valueOf((-1572.55292284), 2.0);
      Complex complex7 = complex6.log();
      complex7.getArgument();
      Complex.valueOf((-2500.417338519));
      complex5.divide(complex4);
      complex6.tanh();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tan();
      complex2.INF.multiply((-3466.4));
      complex2.tanh();
      complex0.nthRoot(1166);
      complex1.sqrt();
      Complex complex3 = new Complex(0, 582.75152);
      complex3.cosh();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      int int0 = (-1475);
      Complex complex1 = complex0.ZERO.add(Double.NaN);
      Complex complex2 = complex1.NaN.exp();
      complex2.cos();
      try { 
        complex0.nthRoot((-1475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,475
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.I.getArgument();
      Complex complex3 = new Complex((-2239.66218));
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.INF.sqrt1z();
      complex5.INF.conjugate();
      Complex complex6 = complex5.ONE.divide(complex0);
      complex6.I.getArgument();
      complex0.equals(complex3);
      complex3.tanh();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.INF.multiply((-2239.66218));
      complex1.INF.toString();
      complex8.NaN.getArgument();
      complex1.getField();
      Complex complex9 = complex8.INF.multiply(0.0);
      complex9.ONE.divide(0.0);
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex1.pow((-2239.66218));
      Complex.valueOf(20.0);
      complex11.add(complex2);
      complex2.toString();
      complex3.pow(complex11);
      complex10.cosh();
      complex3.nthRoot(1403);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.ZERO.cosh();
      complex1.hashCode();
      complex2.ZERO.sin();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex2.conjugate();
      complex6.ZERO.hashCode();
      complex4.negate();
      complex5.conjugate();
      complex5.add(0.0);
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.INF.acos();
      complex1.NaN.exp();
      Complex complex4 = complex2.INF.subtract(complex1);
      Complex complex5 = complex4.sqrt();
      complex5.NaN.sqrt1z();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex1.multiply(835);
      Complex complex8 = complex6.divide((double) 835);
      complex8.ONE.divide(complex3);
      complex7.nthRoot(835);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 152.0;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.I.multiply(1.0);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.sin();
      Complex complex6 = Complex.ONE;
      complex4.equals(complex6);
      complex2.add(complex5);
      complex5.getImaginary();
      complex4.equals(complex1);
      complex2.equals(complex1);
      complex3.log();
      complex1.asin();
      complex6.createComplex(3931.955, 0.6349639147847361);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.multiply(1);
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.INF.multiply((double) 1);
      Complex complex8 = complex1.divide(155.796426412048);
      complex5.getReal();
      complex6.asin();
      complex5.INF.asin();
      complex8.readResolve();
      complex4.ZERO.log();
      complex3.sin();
      complex5.tan();
      complex8.log();
      complex4.getArgument();
      complex4.tan();
      complex6.abs();
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      complex7.reciprocal();
      complex9.sqrt1z();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1439.46268), (-1439.46268));
      Complex complex1 = complex0.NaN.conjugate();
      complex1.NaN.reciprocal();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.subtract((-533.92763494111));
      complex2.ONE.readResolve();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex3.ONE.asin();
      complex1.sin();
      complex4.getArgument();
      Complex complex5 = complex4.atan();
      complex5.ONE.readResolve();
      Complex complex6 = complex5.NaN.asin();
      complex0.abs();
      Complex complex7 = complex4.add(complex3);
      complex7.sinh();
      Complex complex8 = complex7.sqrt();
      complex8.INF.sinh();
      Complex complex9 = Complex.valueOf(0.0);
      complex5.exp();
      complex2.subtract(complex9);
      Complex complex10 = complex2.cos();
      complex6.getImaginary();
      complex10.acos();
      complex8.divide(2076.1176);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.NaN.pow(complex0);
      complex3.ONE.sqrt();
      complex2.log();
      Complex complex4 = complex2.NaN.add((-20.0));
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.valueOf(0.22392448782920837);
      complex6.INF.multiply(complex5);
      complex2.NaN.cos();
      Complex complex7 = complex0.divide(8.759667154796094E-8);
      Complex.valueOf(1.2111317421229415E158, 0.2386477291584015);
      Complex complex8 = Complex.valueOf((-20.0));
      complex2.multiply(complex0);
      Complex complex9 = Complex.valueOf(8.759667154796094E-8, 8.759667154796094E-8);
      complex0.reciprocal();
      complex8.cos();
      complex9.atan();
      Complex.valueOf((-1010.271), 6.283185307179586);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.INF.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.INF.negate();
      complex2.ONE.hashCode();
      Complex complex5 = complex4.ZERO.sqrt1z();
      complex5.ONE.subtract(complex3);
      complex3.INF.subtract(complex1);
      Complex complex6 = complex0.sin();
      complex2.getArgument();
      complex3.I.tanh();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex0.INF.sqrt();
      complex4.isNaN();
      complex5.multiply(181);
      complex4.conjugate();
      complex0.multiply(1.5707963267948966);
      complex6.cosh();
      Complex complex9 = complex8.acos();
      complex9.multiply(2.0);
      complex7.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1022.909546);
      complex0.NaN.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.acos();
      complex1.I.acos();
      Complex complex3 = complex2.I.sqrt();
      complex3.I.getField();
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex2.ZERO.tanh();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex1.sinh();
      complex7.NaN.cosh();
      Complex complex8 = new Complex(0.0, 1022.909546);
      complex7.NaN.add(complex8);
      Complex complex9 = complex6.I.multiply(647);
      complex9.I.hashCode();
      complex1.NaN.getField();
      Complex complex10 = complex9.conjugate();
      complex5.getField();
      complex7.getArgument();
      Complex complex11 = complex10.sqrt();
      complex11.INF.multiply(647);
      Complex complex12 = complex4.createComplex(0.0, (-1804.8192838624));
      complex12.add(Double.NaN);
      complex9.sinh();
      complex12.add(complex1);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(63.7753788921, (-496.504988));
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.getArgument();
      complex0.getImaginary();
      Complex.valueOf((-496.504988));
      complex1.exp();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex2.multiply(0.4818955063819885);
      Complex complex5 = complex4.ONE.log();
      complex5.INF.hashCode();
      Complex complex6 = complex0.divide(complex4);
      complex6.INF.sin();
      complex6.NaN.nthRoot(3534);
      complex3.isInfinite();
      Complex.valueOf(2090.5077095229);
      complex2.readResolve();
      complex4.exp();
      complex4.negate();
      complex4.multiply(2090.5077095229);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(3936.961479020881);
      Complex complex1 = complex0.ZERO.add(3936.961479020881);
      complex0.getArgument();
      Complex complex2 = complex1.NaN.subtract((double) (-1616));
      Complex complex3 = complex1.multiply((-1616));
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.atan();
      complex2.ONE.asin();
      complex0.ONE.tan();
      complex2.INF.sqrt();
      complex5.NaN.pow((-1592.326407694));
      Complex complex6 = complex5.asin();
      Complex complex7 = complex5.INF.pow(complex2);
      complex7.ZERO.getField();
      complex5.ONE.pow((double) (-1616));
      complex2.sqrt();
      Complex complex8 = complex3.sinh();
      complex8.I.getArgument();
      complex6.sin();
      complex0.equals(complex8);
      complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex1.ONE.multiply(285.56);
      Complex complex3 = complex0.INF.add(285.56);
      complex2.pow(complex3);
      Complex complex4 = complex0.subtract(3015.45631266304);
      complex0.nthRoot(1);
      complex2.acos();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex5.negate();
      complex4.I.createComplex(1473.034988185993, 3015.45631266304);
      complex2.multiply(1);
      complex7.divide(complex6);
      complex6.multiply(285.56);
      Complex complex8 = complex3.cos();
      Complex complex9 = complex8.multiply(1);
      complex9.NaN.readResolve();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.ZERO.subtract((double) 1);
      complex2.tan();
      complex11.ONE.log();
      Complex complex12 = Complex.valueOf(2011.3509596);
      complex12.ONE.getField();
      complex0.sqrt();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      complex2.NaN.conjugate();
      complex0.INF.readResolve();
      complex0.divide((-790.2));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.sqrt();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex3.I.reciprocal();
      complex3.INF.add(complex2);
      complex3.I.sinh();
      Complex complex5 = complex3.ONE.createComplex(3.203391672602453E-8, 3.203391672602453E-8);
      Complex complex6 = complex5.NaN.tanh();
      complex6.I.sinh();
      Complex complex7 = complex1.I.exp();
      complex0.getImaginary();
      Complex.valueOf((-3353.244987586752));
      Complex complex8 = Complex.valueOf(0.0);
      Object object0 = new Object();
      complex2.equals(object0);
      complex7.nthRoot(7);
      complex8.subtract(93.917499891);
      complex1.cos();
      complex3.sin();
      complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      complex2.I.cosh();
      complex2.NaN.readResolve();
      Complex.valueOf(20.0);
      Complex complex3 = complex1.tan();
      complex3.INF.getField();
      complex0.equals("rfPHdHFG;~+EY/B9");
      Complex complex4 = complex1.pow(20.0);
      complex1.reciprocal();
      complex4.add(20.0);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex0.I.createComplex(0.0, (-1046.750613));
      complex0.toString();
      Complex complex3 = complex2.asin();
      complex2.ZERO.asin();
      complex0.sqrt1z();
      complex3.divide(complex0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.INF.sin();
      complex2.I.subtract(0.0);
      Complex complex3 = complex2.INF.sqrt();
      complex3.ZERO.tanh();
      complex3.ONE.log();
      complex0.ZERO.negate();
      Complex complex4 = complex0.sinh();
      complex4.INF.atan();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      complex0.isNaN();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.multiply(complex5);
      complex6.INF.divide(4706.886);
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex2.I.pow(complex3);
      Complex.valueOf(0.0);
      Complex complex9 = complex0.ONE.createComplex(1.0, 512.087385747);
      complex9.ONE.log();
      Complex complex10 = complex8.I.cosh();
      Complex.valueOf(0.0);
      complex10.nthRoot(1368);
      complex7.hashCode();
      complex7.equals(complex3);
      complex2.getField();
      Complex complex11 = complex2.cos();
      complex2.exp();
      complex1.tan();
      Complex.valueOf(512.087385747, 2951.229549);
      complex11.atan();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.pow((-2552.7));
      Complex complex3 = complex0.NaN.divide(complex1);
      complex0.getImaginary();
      Complex complex4 = complex3.NaN.negate();
      complex0.I.divide(complex3);
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex0.divide(1.0);
      complex6.ONE.reciprocal();
      complex6.NaN.add(complex4);
      complex0.ZERO.add(1.0);
      complex5.NaN.divide(complex2);
      complex6.INF.sqrt();
      complex3.isNaN();
      Complex complex7 = complex3.divide(complex6);
      int int0 = 1;
      complex0.nthRoot(1);
      complex4.readResolve();
      complex7.equals(complex4);
      Complex complex8 = complex1.asin();
      complex8.INF.sinh();
      Complex complex9 = complex8.I.createComplex(0.0, (-1.0));
      complex8.NaN.tan();
      try { 
        complex9.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1231.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.INF.abs();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.ZERO.multiply(1942.73);
      Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.I.cos();
      complex0.ONE.subtract(complex6);
      Complex complex8 = complex5.ZERO.sinh();
      Complex complex9 = complex8.NaN.conjugate();
      complex8.ONE.divide(complex9);
      complex9.INF.multiply(complex7);
      complex9.pow(complex8);
      complex0.I.divide(0.0);
      Complex.valueOf(1942.73, Double.POSITIVE_INFINITY);
      complex2.ZERO.reciprocal();
      Complex complex10 = complex5.negate();
      complex10.getImaginary();
      complex2.getField();
      Complex complex11 = complex1.reciprocal();
      complex11.INF.tanh();
      complex4.subtract(complex3);
      complex11.asin();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.cos();
      complex3.ONE.subtract((-2652.15020323368));
      complex1.subtract((-2652.15020323368));
      Complex complex4 = Complex.valueOf((-2652.15020323368));
      Complex complex5 = complex4.ZERO.subtract(31.8286539);
      complex5.I.getArgument();
      complex5.I.sin();
      complex0.ZERO.sinh();
      Complex complex6 = Complex.valueOf((-2652.15020323368), (-2652.15020323368));
      complex6.ZERO.multiply(complex5);
      complex6.INF.cos();
      Complex complex7 = complex3.subtract(complex2);
      Complex complex8 = complex7.NaN.multiply((-2652.15020323368));
      Complex complex9 = complex8.asin();
      complex9.ONE.reciprocal();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex2.sqrt1z();
      complex11.NaN.asin();
      Complex complex12 = complex3.reciprocal();
      complex3.cosh();
      complex11.hashCode();
      complex8.toString();
      Complex complex13 = complex12.conjugate();
      complex10.multiply(374);
      complex1.subtract(complex9);
      complex13.hashCode();
      complex5.getImaginary();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2012.0), 0.0);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex2.cos();
      complex4.ZERO.multiply(0.0);
      complex0.getImaginary();
      Complex complex5 = complex2.ONE.add((-877.274));
      complex5.readResolve();
      Complex complex6 = complex0.multiply(1);
      complex3.getField();
      Complex complex7 = complex3.subtract(181.43355);
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex1.NaN.tan();
      complex7.I.atan();
      Complex complex10 = Complex.valueOf((-585.347553621), 53.8722664686375);
      complex10.INF.hashCode();
      complex8.INF.sqrt();
      Complex complex11 = Complex.valueOf(0.0, 812.26);
      complex11.NaN.hashCode();
      complex7.equals(complex4);
      complex9.INF.subtract(complex3);
      complex7.conjugate();
      Complex complex12 = complex2.divide((-585.347553621));
      Object object0 = complex8.readResolve();
      complex12.INF.cos();
      complex6.equals(object0);
      complex12.getArgument();
      complex9.sin();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.ONE.multiply((-980.88476779747));
      complex0.getField();
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = complex3.tan();
      complex4.pow((-1.882201085012735E-7));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.ONE.getArgument();
      Complex complex2 = complex1.NaN.log();
      Complex.valueOf((-1675.5798766), 0.0);
      complex0.I.getArgument();
      complex0.ONE.readResolve();
      complex0.getReal();
      complex0.getReal();
      complex1.ZERO.sinh();
      complex0.acos();
      complex1.readResolve();
      complex1.ZERO.pow(complex2);
      Complex complex3 = new Complex((-4008.4514839343), 0.0);
      complex3.ZERO.asin();
      Complex complex4 = complex1.pow(complex3);
      complex4.sinh();
      complex4.ZERO.getField();
      complex3.abs();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      complex0.isInfinite();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = new Complex(2.0020234215759705E-8, 2.0020234215759705E-8);
      Complex complex4 = complex0.ZERO.subtract(complex3);
      complex2.INF.sqrt();
      Complex complex5 = complex4.ONE.add(0.0);
      complex2.INF.pow(0.0);
      complex1.readResolve();
      complex1.hashCode();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex2.pow(complex5);
      complex1.I.conjugate();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex8.INF.reciprocal();
      complex9.INF.divide(complex1);
      complex7.subtract(complex3);
      Complex complex10 = complex3.I.divide(0.0);
      Complex complex11 = complex6.subtract(complex2);
      complex4.tanh();
      complex2.tan();
      Complex.valueOf(2.0020234215759705E-8, 4498.3);
      complex10.exp();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
      Complex complex1 = complex0.pow(2.553589344024658);
      complex1.multiply(2.553589344024658);
      Complex complex2 = new Complex((-1863.53578294799), (-1863.53578294799));
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.I.createComplex(0.0, 0.0);
      complex2.NaN.readResolve();
      Complex complex3 = complex2.divide(complex1);
      complex3.INF.add(complex2);
      complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.pow(0.0);
      complex4.NaN.divide(0.0);
      complex0.ZERO.getArgument();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ZERO.multiply(1);
      complex6.I.sqrt1z();
      complex1.isNaN();
      complex0.pow(0.0);
      Complex complex7 = complex2.pow(340.548443549404);
      Complex complex8 = complex2.INF.log();
      complex1.abs();
      complex7.readResolve();
      Complex complex9 = complex2.createComplex(1, 0.0);
      complex9.INF.acos();
      complex5.ONE.atan();
      Complex complex10 = complex7.divide(complex4);
      complex6.getArgument();
      complex10.add(complex6);
      complex0.multiply(1);
      complex8.sinh();
      complex7.exp();
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ZERO.tan();
      complex2.ONE.tanh();
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      complex0.isNaN();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(0.0);
      complex1.sinh();
      Complex complex5 = complex4.INF.multiply(complex1);
      complex5.ZERO.cosh();
      complex4.getReal();
      complex3.hashCode();
      complex4.acos();
      Complex complex6 = complex2.sin();
      complex6.INF.hashCode();
      Complex complex7 = complex6.INF.exp();
      complex5.ZERO.add(0.0);
      complex7.ONE.getArgument();
      complex3.isNaN();
      complex2.asin();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(1.6730501651763916);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.I.negate();
      double double0 = complex2.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.divide(2088.34370126);
      complex1.isNaN();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex6.multiply(complex4);
      Complex complex9 = complex6.sinh();
      complex8.getArgument();
      complex8.getImaginary();
      Complex complex10 = complex7.I.tan();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex1.add((-1706.0079));
      assertEquals((-1706.0079), complex11.getReal(), 0.01);
      
      Complex complex12 = complex7.negate();
      Complex complex13 = complex12.ZERO.divide(833.620815);
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex9.log();
      double double1 = complex14.abs();
      assertFalse(complex3.isInfinite());
      assertSame(complex4, complex5);
      assertSame(complex9, complex12);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.asin();
      assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.subtract((-1.0));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.INF.log();
      complex1.INF.pow(complex0);
      try { 
        complex0.nthRoot((-1868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,868
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.04226739708981E-9));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.cos();
      complex2.NaN.nthRoot(17);
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.I.add(0.0);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.NaN.createComplex(7.316033240396569E150, 7.316033240396569E150);
      Complex complex8 = complex7.ZERO.cos();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      complex3.NaN.getField();
      complex0.isNaN();
      Complex complex9 = Complex.valueOf((-4.04226739708981E-9), (-4.04226739708981E-9));
      complex3.isInfinite();
      Complex complex10 = complex9.ONE.asin();
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex.valueOf(2.0, (-1572.55292284));
      Complex complex11 = complex9.log();
      double double0 = complex11.getArgument();
      assertEquals((-3.0180828893077383), double0, 0.01);
      
      Complex complex12 = Complex.valueOf(7.316033240396569E150);
      Complex complex13 = complex7.divide(complex12);
      Complex complex14 = complex13.NaN.tanh();
      assertEquals(1.0, complex13.getReal(), 0.01);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex5);
      
      Complex complex15 = complex3.sinh();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(1.9350668221743568, complex15.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(826.34237, 826.34237);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.negate();
      complex4.hashCode();
      complex4.add(complex0);
      Complex complex5 = complex3.atan();
      assertEquals(0.11376295365064838, complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-1101.5978));
      complex0.getField();
      Complex complex1 = complex0.multiply(0.512191891670227);
      Complex complex2 = complex1.NaN.negate();
      complex1.multiply(1835.0958);
      Complex complex3 = Complex.valueOf(0.512191891670227);
      assertEquals(0.512191891670227, complex3.getReal(), 0.01);
      
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.add(complex4);
      String string0 = complex5.toString();
      assertEquals((-564.2294610417605), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertSame(complex5, complex2);
      assertEquals("(NaN, NaN)", string0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex3 = complex0.pow(2431.1);
      assertTrue(complex3.equals((Object)complex1));
      assertNotSame(complex3, complex1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = Complex.valueOf(0.0);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.ONE.add(2.0133131420595028E-8);
      Complex complex4 = complex3.INF.negate();
      assertEquals(1.0000000201331314, complex3.getReal(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex5 = complex0.subtract(0.0);
      double double0 = complex5.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex6 = complex0.log();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex5));
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex((-647.33935355), 3150.722422236199);
      Complex complex1 = complex0.ONE.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.conjugate();
      assertEquals((-3150.722422236199), complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.divide(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals((-647.33935355), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
  }
}
