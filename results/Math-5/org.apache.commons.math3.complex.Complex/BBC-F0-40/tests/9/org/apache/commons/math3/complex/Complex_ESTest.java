/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:56:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex1.NaN.tanh();
      complex5.ZERO.multiply(complex2);
      complex3.nthRoot(1271);
      Complex complex6 = Complex.valueOf(1.0582132028666558E-263);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.subtract(complex3);
      Complex complex9 = complex6.NaN.asin();
      complex9.NaN.cosh();
      complex8.INF.add(complex3);
      Complex.valueOf(1.0);
      Complex complex10 = complex1.INF.sin();
      Complex.valueOf(2389.21, 338.965527);
      Complex.valueOf(2.19442549292391E258);
      Complex complex11 = complex6.sinh();
      complex11.INF.divide(1.0582132028666558E-263);
      Complex complex12 = complex11.sqrt();
      complex12.ONE.pow(14.873382727936);
      complex12.ZERO.multiply(complex10);
      Complex complex13 = complex7.multiply(complex4);
      Complex complex14 = complex1.sqrt1z();
      complex13.asin();
      complex14.tanh();
      complex13.cos();
      Complex complex15 = complex7.subtract(2.19442549292391E258);
      complex15.acos();
      complex10.add((-2646.8817040780173));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-595.5761831007826), (-595.5761831007826));
      complex0.nthRoot(345);
      Complex complex1 = Complex.valueOf((-595.5761831007826));
      Complex complex2 = complex0.multiply(610.46937922);
      Complex complex3 = complex2.multiply(345);
      Complex complex4 = complex2.multiply(372);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex4.log();
      Complex complex7 = complex5.tan();
      Complex complex8 = new Complex(0.48884476611500693, (-595.5761831007826));
      Complex complex9 = complex8.negate();
      Complex.valueOf((double) 345, (double) 372);
      complex9.subtract(complex7);
      complex4.multiply(356);
      complex1.createComplex(356, (-3386184.1452810005));
      complex2.multiply(1334);
      complex9.tan();
      complex6.readResolve();
      Complex.valueOf(0.48884476611500693, 610.46937922);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.035228270659617415), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.add((-0.035228270659617415));
      complex1.I.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.pow((-0.035228270659617415));
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex0.ONE.add((-423.58));
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex0.add((-1.3476708817387295));
      complex6.ZERO.cos();
      Complex complex8 = complex7.add((-1.3476708817387295));
      complex2.nthRoot(3351);
      Complex complex9 = complex6.multiply(complex7);
      complex7.asin();
      Complex complex10 = complex9.sqrt1z();
      complex10.INF.hashCode();
      complex8.abs();
      complex4.pow((-1.0732735585199074E280));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), 1.0524719896550007E251);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-604.463683), (-604.463683));
      Complex complex1 = Complex.valueOf((-1762.192164), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-1.3810978455418157), Double.NaN);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.463683), (-604.463683));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.multiply(7);
      complex2.ONE.sqrt();
      complex1.acos();
      Complex complex3 = Complex.valueOf((-4174.156835096512), Double.POSITIVE_INFINITY);
      complex1.equals(complex0);
      Complex complex4 = complex1.tan();
      complex4.ZERO.divide(1072.8073840318027);
      complex1.negate();
      complex2.reciprocal();
      complex3.multiply(7);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.I.multiply((-574.2));
      complex2.INF.subtract(complex0);
      Complex complex3 = complex0.divide(1.0);
      complex3.NaN.multiply(0);
      Complex complex4 = complex3.subtract(331.13874895076);
      complex0.readResolve();
      Complex complex5 = complex0.add(331.13874895076);
      complex5.ONE.atan();
      Complex complex6 = complex5.NaN.subtract(complex4);
      Complex complex7 = complex5.sinh();
      complex1.multiply(18);
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex8.tan();
      complex10.NaN.hashCode();
      Complex complex11 = complex7.negate();
      complex11.INF.subtract(complex6);
      Complex complex12 = complex9.ONE.multiply(18);
      complex11.I.createComplex(0, 1.0);
      Complex complex13 = complex9.INF.multiply(10);
      complex13.NaN.subtract((double) 18);
      Complex complex14 = complex9.sin();
      complex14.NaN.reciprocal();
      complex5.tan();
      complex5.sqrt1z();
      complex11.asin();
      complex5.pow(883.206401313);
      complex12.nthRoot(1187);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = (-604.463683);
      Complex complex0 = Complex.valueOf((-604.463683), (-604.463683));
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      complex1.toString();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-329.103162769), (-2800.949));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = Complex.ZERO;
      complex2.ZERO.add((-2800.949));
      complex4.INF.divide((-2800.949));
      complex0.divide(complex4);
      complex4.toString();
      complex2.INF.log();
      complex1.asin();
      Complex complex5 = complex3.atan();
      complex5.I.multiply((-1329));
      Complex.valueOf((-2800.949));
      complex4.toString();
      complex0.readResolve();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.subtract(Double.NaN);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.463683), 20.0);
      complex0.sqrt();
      complex0.atan();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.equals(complex0);
      Complex complex2 = new Complex(4.4228706309734985E-8);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex0.divide(complex1);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.cosh();
      complex0.divide(complex3);
      Complex complex4 = new Complex(20.0);
      Complex complex5 = complex2.tanh();
      complex5.tanh();
      complex1.asin();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1087.954839);
      complex1.divide(1087.954839);
      Complex complex2 = new Complex(1414.35534195);
      Complex complex3 = Complex.valueOf(1055.114810416902);
      Complex complex4 = Complex.valueOf((-20.0), 1414.35534195);
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.divide(complex1);
      complex4.divide(complex2);
      complex3.cosh();
      Complex complex6 = Complex.I;
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(199.44164878, Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      complex0.isInfinite();
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex.valueOf(0.0);
      Complex complex0 = Complex.ZERO;
      complex0.I.divide(0.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex2.INF.pow(0.0);
      complex4.sinh();
      Complex complex5 = complex4.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex1.equals(complex5);
      complex0.getField();
      complex3.toString();
      complex4.multiply(complex3);
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.035228270659617415), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.add((-0.035228270659617415));
      complex1.I.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.pow((-0.035228270659617415));
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex0.ONE.add((-423.58));
      complex5.ZERO.exp();
      Complex complex6 = complex0.add((-1.3476708817387295));
      Complex complex7 = complex6.add((-1.3476708817387295));
      Complex complex8 = complex7.NaN.multiply(complex6);
      complex2.nthRoot(3351);
      Complex complex9 = complex8.multiply(complex6);
      complex6.asin();
      Complex complex10 = complex9.sqrt1z();
      complex10.INF.hashCode();
      complex7.abs();
      complex4.pow((-1.0732735585199074E280));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.abs();
      Complex complex2 = Complex.INF;
      complex0.getField();
      Object object0 = new Object();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(0.7956932015674808);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = Complex.valueOf((-955.0));
      complex3.readResolve();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex3.divide(complex2);
      complex6.cosh();
      Complex complex7 = complex5.divide(complex0);
      Complex complex8 = Complex.valueOf((-28.386292635883258), 1287.691);
      complex6.tanh();
      complex7.getField();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2.0, 4.669411536841198E-13);
      Complex complex2 = complex1.ONE.tan();
      complex1.INF.sinh();
      complex0.cosh();
      // Undeclared exception!
      complex2.nthRoot(5981849);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2911.2312262472, 2911.2312262472);
      complex1.INF.toString();
      Complex.valueOf(0.4132472276687622);
      Complex complex2 = Complex.valueOf((-1392.964809768), (-604.4636826131687));
      Complex complex3 = complex0.multiply(complex2);
      complex2.NaN.readResolve();
      Complex complex4 = Complex.valueOf((-2753.0369197), 1.196718116616528E-96);
      complex4.I.getField();
      Complex complex5 = complex2.INF.sin();
      Complex complex6 = complex4.I.divide(complex0);
      complex6.I.add(complex3);
      Complex complex7 = complex2.multiply(complex4);
      Complex complex8 = complex3.asin();
      complex7.exp();
      complex4.pow((-1392.964809768));
      Complex.valueOf(1.196718116616528E-96, (-308.33995368));
      complex8.ZERO.cos();
      Complex complex9 = complex8.cos();
      complex4.I.subtract(complex5);
      Complex complex10 = new Complex((-1392.964809768), (-17.716092));
      complex5.equals(complex10);
      complex6.acos();
      complex9.exp();
      complex5.multiply(343);
      complex2.subtract((double) 343);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex0.sin();
      complex2.abs();
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.INF;
      complex3.getField();
      complex3.subtract(Double.NaN);
      Object object0 = new Object();
      Complex.valueOf(0.0, 604.463683);
      complex1.isInfinite();
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(2810.537000338307);
      Complex complex3 = new Complex((-28.386292635883258));
      complex3.add(complex0);
      Complex.valueOf(2810.537000338307);
      Complex complex4 = complex0.conjugate();
      complex0.readResolve();
      complex2.divide(complex1);
      Complex complex5 = complex4.sqrt();
      complex0.getImaginary();
      complex5.INF.acos();
      Complex complex6 = new Complex(1.7383009254496851E289, (-28.386292635883258));
      complex1.multiply(complex6);
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.937573278));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      complex0.equals((Object) null);
      Complex complex3 = Complex.valueOf((-2388.937573278));
      complex3.pow(complex1);
      complex2.cosh();
      Complex complex4 = Complex.valueOf((-1.1862263158849434E-9), (-1.1862263158849434E-9));
      Complex complex5 = complex4.asin();
      complex0.reciprocal();
      Complex.valueOf((-2388.937573278), 0.36787944117144233);
      complex4.pow((-374178.60000000003));
      complex3.multiply(complex5);
      Complex.valueOf(2.990526156053854E268);
      Complex complex6 = Complex.ONE;
      complex6.getReal();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-805.78160961));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex1.add((-805.78160961));
      complex5.isNaN();
      complex4.ZERO.add(complex3);
      complex6.getField();
      complex4.toString();
      complex7.divide(6.10626893063691E-8);
      Complex.valueOf((-805.78160961), 6.10626893063691E-8);
      Complex.valueOf((-805.78160961));
      complex0.getReal();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0024820582845724096);
      Complex complex2 = complex0.createComplex(0.0024820582845724096, (-493.92333023));
      Complex complex3 = complex1.ZERO.sqrt();
      complex3.divide(1.557407724654902);
      complex2.getImaginary();
      complex1.add(complex2);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-997.8096));
      complex0.exp();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf((-1.1862263158849434E-9), (-770.021713573));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.reciprocal();
      Complex.valueOf((-231.0604958), 2.645481533470164E-4);
      complex3.exp();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.divide(complex2);
      Complex complex9 = Complex.valueOf(1.2915711402893066, 0.36787944117144233);
      complex6.tanh();
      Complex.valueOf((-281.3661886392), 2.645481533470164E-4);
      complex8.exp();
      complex4.isInfinite();
      complex2.createComplex(1852.4596, Double.NaN);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.937573278));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      complex0.equals((Object) null);
      Complex complex3 = Complex.valueOf((-2388.937573278));
      complex3.pow(complex1);
      complex2.cosh();
      Complex complex4 = Complex.valueOf((-1.1862263158849434E-9), (-1.1862263158849434E-9));
      complex4.asin();
      complex0.reciprocal();
      Complex.valueOf((-604.4636826131687), 709.204);
      Complex complex5 = Complex.ZERO;
      complex5.tanh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 709.204);
      Complex complex7 = complex6.exp();
      complex4.readResolve();
      complex6.hashCode();
      complex7.tan();
      Complex complex8 = Complex.valueOf(365375.34359827347, (-604.4636826131687));
      Complex complex9 = new Complex(0.0);
      complex8.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.equals(complex0);
      complex0.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex(8.187871486648885E-8);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex1.divide(complex3);
      complex4.readResolve();
      complex2.add(complex1);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.divide(0.0);
      complex1.getField();
      Complex complex3 = complex0.sin();
      complex2.abs();
      complex0.cosh();
      Complex complex4 = Complex.INF;
      complex2.getField();
      Complex complex5 = complex3.multiply(complex0);
      complex1.hashCode();
      Complex complex6 = Complex.I;
      complex6.conjugate();
      Complex complex7 = new Complex(Double.NaN);
      complex7.cosh();
      complex3.readResolve();
      complex5.tan();
      Complex complex8 = new Complex(0.9999969196885917);
      complex0.equals((Object) null);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(787.1161919118);
      Complex complex3 = Complex.valueOf(787.1161919118, 787.1161919118);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf(787.1161919118);
      complex5.multiply((-2587.01373186755));
      complex3.conjugate();
      Complex complex6 = Complex.valueOf((-788.0));
      Complex complex7 = complex6.add(635.0);
      complex2.atan();
      complex7.getReal();
      complex4.multiply((-2146));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(4.370126523166307E-5);
      Complex.valueOf(1435.385756221618);
      complex0.conjugate();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-805.78160961));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex1.add((-805.78160961));
      Complex complex8 = complex5.sinh();
      complex4.equals(complex3);
      complex7.INF.getField();
      complex8.subtract(4.0962906236847E-236);
      Complex complex9 = complex6.cos();
      Complex complex10 = complex8.sinh();
      complex0.createComplex(20.0, 20.0);
      complex0.equals(complex5);
      complex0.getField();
      complex7.toString();
      Complex complex11 = complex10.multiply(complex9);
      complex4.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-1385.46548564));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.cosh();
      Complex complex7 = new Complex((-4895.585961428));
      Complex complex8 = Complex.ONE;
      Complex.valueOf((-1385.46548564), Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex2.exp();
      complex0.readResolve();
      complex2.pow(complex4);
      complex6.getArgument();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(2810.537000338307);
      Complex complex3 = new Complex((-28.386292635883258));
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = Complex.valueOf(2810.537000338307);
      complex5.multiply((-2587.01373186755));
      Complex complex6 = complex0.conjugate();
      complex0.readResolve();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(3925.1, (-1.0));
      complex4.hashCode();
      complex6.tan();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.divide(2810.537000338307);
      Complex complex2 = new Complex((-28.386292635883258));
      Complex complex3 = complex2.add(complex0);
      complex3.pow(Double.POSITIVE_INFINITY);
      complex0.conjugate();
      complex3.sqrt1z();
      Complex complex4 = complex0.pow(2238.91988);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add((-1218.6));
      complex1.atan();
      complex4.getReal();
      Complex complex5 = complex3.multiply(1223);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-997.8096));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.ONE;
      complex3.exp();
      Complex complex4 = Complex.valueOf((-1385.46548564));
      Complex complex5 = complex1.divide(complex4);
      complex5.cosh();
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = Complex.valueOf((-604.4636826131687), (-604.4636826131687));
      Complex complex8 = complex5.tanh();
      Complex complex9 = Complex.valueOf((-604.4636826131687), (-2063.549398));
      Complex complex10 = complex9.exp();
      complex6.readResolve();
      complex3.pow(complex8);
      complex7.getArgument();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-1385.46548564));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.add(Double.NaN);
      Complex complex6 = complex0.sinh();
      complex5.equals(complex4);
      complex5.getField();
      Complex complex7 = complex0.subtract(561.5815331);
      complex6.cos();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex7.add((-1385.46548564));
      Complex complex10 = new Complex((-405.3964193515), 0.002288029423137149);
      complex10.getReal();
      Complex complex11 = complex0.multiply(complex8);
      complex6.hashCode();
      complex11.conjugate();
      Complex complex12 = complex7.cosh();
      complex12.readResolve();
      complex0.tan();
      Complex complex13 = new Complex(561.5815331);
      complex11.equals(complex8);
      complex6.add(1052.004303);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4300075619643524E-298), (-604.4636826131687));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.ONE;
      complex1.exp();
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex0.cosh();
      complex3.divide(complex6);
      Complex complex7 = Complex.valueOf(2490.4147001859924, 131.917);
      complex2.tanh();
      Complex.valueOf((-20.0), 131.917);
      Complex complex8 = complex3.exp();
      complex8.readResolve();
      complex5.pow(complex7);
      complex6.getArgument();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-997.8096));
      Complex complex1 = complex0.exp();
      complex1.nthRoot(375);
      Complex complex2 = complex0.pow((double) 375);
      Complex complex3 = complex2.conjugate();
      complex0.sqrt1z();
      Complex complex4 = complex1.pow(0.16442140936851501);
      Complex complex5 = Complex.valueOf(1.8267512321472168);
      Complex complex6 = complex1.add((-1385.46548564));
      complex3.atan();
      complex6.getReal();
      complex4.multiply(375);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.divide(0.0);
      complex1.getField();
      complex0.sin();
      complex2.abs();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.INF;
      complex2.getField();
      complex2.subtract(Double.NaN);
      Object object0 = new Object();
      Complex.valueOf(0.0, Double.NaN);
      complex2.isInfinite();
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-1385.46548564));
      Complex complex1 = complex0.exp();
      complex1.ONE.nthRoot(375);
      Complex complex2 = complex0.pow(0.0);
      complex2.ONE.conjugate();
      Complex complex3 = complex1.sqrt1z();
      complex3.ONE.pow(3129.237);
      Complex.valueOf((-1385.46548564));
      Complex complex4 = complex1.add((-131.917));
      Complex complex5 = complex4.atan();
      complex1.getReal();
      complex5.equals(complex3);
      complex3.add(Double.NaN);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.937573278));
      Complex complex1 = complex0.tan();
      complex0.cosh();
      complex0.equals((Object) null);
      Complex complex2 = Complex.valueOf((-2388.937573278));
      Complex complex3 = complex2.pow(complex1);
      complex1.conjugate();
      Complex complex4 = complex0.multiply(5.205969622575851E-174);
      Complex complex5 = Complex.valueOf((-2388.937573278), (-1052.004303));
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex0.log();
      complex4.asin();
      complex6.subtract(complex0);
      Complex.valueOf(2490.4147001859924, 3.052403851440098E-263);
      Complex complex8 = complex4.tanh();
      Complex complex9 = Complex.valueOf(159.080078354, 0.0);
      complex0.exp();
      complex7.readResolve();
      complex5.pow(complex0);
      complex8.getArgument();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1160.6));
      Complex complex1 = new Complex((-1.730424167425052E-8));
      Complex complex2 = new Complex((-1160.6), 6.283185307179586);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.sqrt();
      complex3.getImaginary();
      complex2.multiply(complex0);
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1279.127378745868, (-1898.6));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.I.multiply((-1898.6));
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex0.NaN.subtract(1279.127378745868);
      Complex complex6 = complex4.pow(1279.127378745868);
      complex5.multiply(complex0);
      Complex complex7 = complex5.ZERO.sinh();
      complex7.ZERO.getField();
      Complex complex8 = complex2.INF.subtract(complex5);
      complex5.INF.pow(1279.127378745868);
      Complex complex9 = complex0.multiply(0.9999919356464587);
      Complex complex10 = complex9.divide(complex4);
      complex2.sinh();
      Complex complex11 = complex0.acos();
      complex11.divide(complex1);
      Complex complex12 = complex10.add(complex3);
      Complex complex13 = Complex.valueOf((-763.2079772044), (-20.0));
      Complex complex14 = Complex.valueOf(Double.NaN);
      complex9.multiply(complex3);
      Complex complex15 = complex1.multiply(complex13);
      complex6.NaN.asin();
      Complex complex16 = complex3.log();
      complex16.divide(complex6);
      complex14.tan();
      complex15.negate();
      complex9.getImaginary();
      complex12.cosh();
      complex8.subtract(complex13);
      complex10.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-1385.46548564));
      Complex complex1 = complex0.exp();
      complex1.ONE.nthRoot(375);
      Complex complex2 = complex0.pow((-604.4636826131687));
      complex2.conjugate();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ONE;
      complex3.INF.readResolve();
      Complex complex6 = Complex.ONE;
      Complex.valueOf((double) 375);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.add(2.0);
      Complex complex9 = Complex.INF;
      complex9.atan();
      complex4.getReal();
      Complex complex10 = complex4.multiply((-981305269));
      complex8.reciprocal();
      complex10.subtract(complex3);
      Complex.valueOf(2031.8835421);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-1385.46548564));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.cosh();
      complex2.divide(complex5);
      Complex complex7 = Complex.valueOf(0.0, 2490.4147001859924);
      Complex complex8 = complex4.tanh();
      Complex.valueOf((-948.703299433971), (-948.703299433971));
      complex8.exp();
      complex6.readResolve();
      complex7.pow(complex5);
      complex7.getArgument();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0584469687624562E-7);
      Complex complex1 = complex0.conjugate();
      complex1.ONE.cos();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.NaN.subtract((-1.0));
      complex3.ONE.sqrt();
      complex0.multiply(510);
      complex3.getArgument();
      Complex complex4 = new Complex(2031.8835421, 1.0584469687624562E-7);
      complex4.tanh();
      complex4.log();
      Complex.valueOf((double) 510);
      complex2.subtract(2301.55353765);
      Complex.valueOf(-0.0, 2301.55353765);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.negate();
      complex0.pow(3868.4);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.createComplex(1.1442882046418682E-260, 6.283185307179586);
      complex2.equals(complex4);
      complex1.getField();
      complex3.toString();
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.937573278));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex0.reciprocal();
      complex2.conjugate();
      complex5.add((-2388.937573278));
      Complex complex6 = complex1.sinh();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex7 = complex1.subtract(4.0962906236847E-236);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex6.sinh();
      complex9.add((-2388.937573278));
      complex1.getReal();
      complex1.hashCode();
      complex7.conjugate();
      complex6.cosh();
      Complex complex10 = complex8.tan();
      Complex complex11 = new Complex(2868.5316447);
      Object object1 = complex10.readResolve();
      complex9.equals(object1);
      complex6.add((-377.0));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(700.160940743725);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.multiply(complex1);
      complex0.isInfinite();
      Complex complex4 = complex0.sinh();
      complex3.sin();
      Complex complex5 = complex2.divide((-3654.58894555998));
      Complex complex6 = new Complex((-274.673617));
      complex5.add(complex6);
      Complex.valueOf((-131.318453018));
      complex3.multiply((-2102.83028627502));
      complex1.conjugate();
      complex0.readResolve();
      complex3.divide(1835.221829642);
      Complex.valueOf(0.04767347127199173, 690.64);
      complex4.tan();
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(3.4742610108480497E-91);
      Complex complex1 = Complex.valueOf(3.4742610108480497E-91, 152.1141652855143);
      Complex complex2 = Complex.ZERO;
      complex2.NaN.getField();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.add(152.1141652855143);
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.valueOf((-646.680348), (-1357.0));
      Complex complex7 = complex6.tanh();
      complex6.sin();
      Complex complex8 = complex5.multiply((-859.979659075471));
      complex4.subtract(complex8);
      complex6.pow((-1624.4763498257016));
      complex7.exp();
      Complex complex9 = complex3.negate();
      complex4.exp();
      complex9.hashCode();
      complex1.log();
      complex2.getArgument();
      complex8.acos();
      complex4.getField();
      Complex complex10 = Complex.valueOf((-949.81944), (-859.979659075471));
      complex10.log();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.937573278));
      Complex complex1 = complex0.tan();
      complex0.cosh();
      complex0.equals((Object) null);
      Complex complex2 = Complex.valueOf((-2388.937573278));
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.multiply(5.205969622575851E-174);
      Complex complex6 = Complex.valueOf((-2388.937573278), (-1052.004303));
      Complex complex7 = complex3.pow(complex6);
      Complex complex8 = complex0.log();
      complex5.asin();
      Complex complex9 = complex7.subtract(complex0);
      complex0.divide(0.0);
      complex9.getField();
      complex4.sin();
      complex6.abs();
      Complex complex10 = complex2.cosh();
      complex5.multiply((-1266));
      complex10.getArgument();
      Complex complex11 = complex4.tanh();
      complex11.log();
      complex5.tanh();
      Complex.valueOf((-5274.309543));
      complex6.sinh();
      complex8.subtract(1965.1796354);
      Complex.valueOf(1.0, 1965.1796354);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1.730424167425052E-8));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex1.isInfinite();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sinh();
      complex4.sin();
      complex1.I.cos();
      Complex complex5 = complex2.divide(1835.221829642);
      Complex complex6 = new Complex((-1.730424167425052E-8));
      Complex complex7 = new Complex((-2724.70577045), 6.283185307179586);
      complex7.add(complex5);
      Complex complex8 = Complex.valueOf(3.425518820814759);
      complex1.multiply(6.666995350067512E-4);
      Complex complex9 = Complex.ONE;
      complex9.conjugate();
      complex2.readResolve();
      complex6.divide(1.0);
      Complex.valueOf((-1.730424167425052E-8), (-2077.016575));
      complex6.tan();
      complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf((-2077.016575), 1385.46548564);
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.INF;
      complex5.subtract(complex0);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = new Complex(1385.46548564);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex7.add(6.353384093665193E-135);
      Complex complex10 = complex6.sinh();
      Object object0 = new Object();
      complex0.equals(object0);
      complex8.subtract(1385.46548564);
      Complex complex11 = complex10.cos();
      complex4.sinh();
      Complex complex12 = complex9.add(750.7);
      complex11.getReal();
      complex12.hashCode();
      complex8.conjugate();
      Complex complex13 = Complex.INF;
      complex13.cosh();
      complex12.tan();
      Complex complex14 = new Complex((-2077.016575));
      complex5.equals(complex3);
      complex5.add(2868.5316447);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.937573278));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.isInfinite();
      Complex complex3 = complex2.sqrt1z();
      complex3.asin();
      complex0.negate();
      Complex complex4 = complex0.pow((-6567.67009509262));
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.sinh();
      complex0.createComplex((-6567.67009509262), (-1122.250489229));
      Object object0 = new Object();
      complex5.equals(object0);
      complex6.getField();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.toString();
      Complex complex8 = complex3.multiply(complex4);
      complex3.divide(complex8);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(3.4742610108480497E-91);
      Complex complex1 = Complex.valueOf(3.4742610108480497E-91, 152.1141652855143);
      Complex complex2 = Complex.ZERO;
      complex2.NaN.getField();
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.NaN.getField();
      Complex complex4 = new Complex(3.4742610108480497E-91);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = Complex.ONE;
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      complex4.add(152.1141652855143);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.divide(0.0);
      complex2.sqrt1z();
      complex1.asin();
      complex1.negate();
      Complex complex3 = Complex.I;
      complex3.pow((-1100.05166));
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.createComplex((-2077.016575), 0.9654061073978906);
      Object object0 = new Object();
      complex4.equals(object0);
      complex0.getField();
      complex0.toString();
      complex1.multiply(complex4);
      Complex complex6 = Complex.valueOf(1732.6422991, 812.992032);
      complex6.divide(complex5);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(290.33989991997);
      complex0.I.acos();
      complex0.NaN.nthRoot(980);
      Complex complex1 = complex0.add((double) 980);
      Complex complex2 = complex0.atan();
      complex2.getReal();
      complex1.multiply((-2372));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(2810.537000338307);
      Complex complex3 = new Complex((-28.386292635883258));
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = Complex.valueOf(2810.537000338307);
      Complex complex6 = complex5.multiply((-2587.01373186755));
      Complex complex7 = complex3.conjugate();
      complex6.readResolve();
      complex2.divide(635.0);
      Complex.valueOf((-2587.01373186755), 3925.1);
      complex0.hashCode();
      Complex complex8 = complex4.tan();
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2384.4432976542635));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.isInfinite();
      Complex complex3 = complex0.ONE.sinh();
      complex3.ZERO.sin();
      complex2.divide((-2112.6));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-805.78160961));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex1.add((-805.78160961));
      Complex complex8 = complex5.sinh();
      complex4.equals(complex3);
      complex7.INF.getField();
      complex8.subtract(4.0962906236847E-236);
      complex6.cos();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex1.add(0.002288029423137149);
      complex7.getReal();
      complex10.I.multiply(complex5);
      complex7.hashCode();
      Complex complex11 = complex1.conjugate();
      Complex complex12 = complex10.cosh();
      complex12.INF.readResolve();
      complex4.tan();
      Complex complex13 = new Complex((-2741.362));
      complex0.equals(complex11);
      complex3.add((-8.939932297357388E-58));
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.937573278));
      Complex complex1 = Complex.INF;
      complex0.ONE.multiply(complex1);
      complex0.isInfinite();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.ZERO.sin();
      complex3.NaN.divide((-2724.70577045));
      Complex complex4 = new Complex(1835.221829642);
      complex0.add(complex4);
      Complex complex5 = Complex.valueOf(635.0);
      complex5.multiply(1835.221829642);
      Complex complex6 = complex4.conjugate();
      complex6.ONE.readResolve();
      Complex complex7 = complex6.divide(635.0);
      Complex.valueOf(3925.1, 635.0);
      complex7.tan();
      complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex3.ZERO.asin();
      complex3.NaN.negate();
      Complex complex5 = complex4.INF.pow(0.0);
      complex5.NaN.sinh();
      complex2.INF.createComplex(0.0, 0.0);
      complex0.equals(complex1);
      complex0.NaN.getField();
      complex0.toString();
      Complex complex6 = complex1.multiply(complex0);
      complex6.divide(complex2);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      complex0.NaN.abs();
      Complex complex1 = complex0.NaN.divide((double) 0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.I.acos();
      complex2.I.multiply(4776.7696);
      complex3.INF.multiply(complex2);
      complex3.I.divide(complex0);
      Complex complex4 = complex0.I.multiply(0);
      Complex complex5 = complex4.ZERO.multiply(0);
      complex5.NaN.nthRoot(422);
      Complex complex6 = complex4.ONE.negate();
      complex6.ZERO.acos();
      Complex complex7 = complex0.createComplex((-1058.732909453901), (-1058.732909453901));
      complex7.INF.tanh();
      Complex complex8 = complex6.atan();
      complex8.divide(Double.NaN);
      complex6.sqrt();
      complex2.subtract((-1058.732909453901));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-805.78160961));
      complex0.INF.readResolve();
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.multiply(complex2);
      complex0.conjugate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.multiply(complex4);
      complex3.ONE.pow(complex5);
      complex6.pow(8.924048768324976E-200);
      Complex complex7 = complex4.ONE.sin();
      complex6.I.abs();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.I.tan();
      complex9.ZERO.add(1.5070531368255615);
      complex0.negate();
      Complex complex10 = complex0.tanh();
      complex10.I.sin();
      complex10.multiply(0.0);
      complex10.subtract(complex1);
      Complex complex11 = complex4.pow(0.0);
      Complex complex12 = complex11.exp();
      complex7.negate();
      complex7.exp();
      complex11.NaN.hashCode();
      complex6.log();
      complex12.getArgument();
      complex8.acos();
      complex10.getField();
      complex7.log();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.I.pow(0.0);
      complex1.hashCode();
      Complex complex3 = complex0.ZERO.subtract(0.0);
      complex3.ZERO.exp();
      Complex complex4 = Complex.valueOf((double) 2794);
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = Complex.valueOf(0.0);
      complex2.I.reciprocal();
      complex5.INF.getArgument();
      complex0.INF.nthRoot(2794);
      complex5.ZERO.tanh();
      Complex complex7 = complex0.subtract(complex3);
      complex7.INF.negate();
      complex0.add(774.995);
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex2.multiply(complex5);
      complex10.INF.toString();
      complex8.isNaN();
      complex9.hashCode();
      complex2.isNaN();
      complex10.multiply(2794);
      Complex complex11 = new Complex((-926.5358));
      complex7.INF.add(complex11);
      Complex complex12 = complex0.add(complex6);
      complex6.sinh();
      complex12.negate();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.hashCode();
      Complex complex1 = complex0.cos();
      complex1.I.subtract(170.8);
      Complex complex2 = complex1.INF.multiply(170.8);
      Complex complex3 = complex2.NaN.acos();
      complex1.abs();
      Complex complex4 = complex0.ONE.acos();
      complex0.isInfinite();
      Complex complex5 = complex1.NaN.cosh();
      complex5.ONE.hashCode();
      complex0.hashCode();
      Complex complex6 = complex2.subtract(complex1);
      complex2.INF.pow(complex3);
      complex6.ZERO.cos();
      complex2.toString();
      Complex complex7 = complex6.conjugate();
      complex7.NaN.tanh();
      Complex complex8 = complex4.divide(complex0);
      complex8.ONE.hashCode();
      complex0.multiply(1.5430806348152437);
      complex7.tanh();
      complex1.getArgument();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.tanh();
      complex2.NaN.tan();
      complex2.ONE.multiply((-1));
      Complex complex3 = complex2.reciprocal();
      complex3.tanh();
      complex3.ZERO.pow(complex0);
      complex2.readResolve();
      Complex complex4 = complex1.multiply(538);
      complex4.INF.conjugate();
      complex4.abs();
      Complex complex5 = complex0.subtract(complex1);
      complex0.hashCode();
      complex5.ONE.add(complex2);
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1479.881723519);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(684.548215763, 0.0);
      complex0.toString();
      Complex complex1 = new Complex((-3475.998650497696));
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = complex0.divide(complex1);
      complex5.readResolve();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = Complex.valueOf(684.548215763, (-3475.998650497696));
      complex0.INF.tan();
      complex7.NaN.atan();
      complex2.equals(complex7);
      complex0.abs();
      complex1.subtract(1196.056089798);
      complex4.exp();
      complex5.log();
      complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.cosh();
      complex3.ONE.asin();
      complex3.reciprocal();
      Complex complex4 = complex0.exp();
      complex4.INF.divide(complex1);
      Complex complex5 = complex1.cosh();
      complex5.INF.divide(complex1);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.ONE.tanh();
      Complex complex7 = Complex.valueOf(186.956063044362, (-948.703299433971));
      complex0.INF.exp();
      complex7.readResolve();
      complex2.pow(complex1);
      complex0.getArgument();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(700.160940743725);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.ZERO.subtract(complex3);
      complex4.ZERO.reciprocal();
      complex4.NaN.conjugate();
      Complex complex5 = complex2.ZERO.add(700.160940743725);
      complex4.I.sinh();
      complex0.equals(complex2);
      Complex complex6 = complex3.subtract(4.0962906236847E-236);
      complex6.NaN.cos();
      Complex complex7 = complex3.sinh();
      complex4.add(2868.5316447);
      complex5.getReal();
      complex5.hashCode();
      complex5.conjugate();
      complex7.NaN.cosh();
      complex7.tan();
      Complex complex8 = new Complex(700.160940743725);
      complex7.equals(complex8);
      complex1.add(895.167);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-751.27452599977));
      Complex complex1 = Complex.valueOf((-867.0), 0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.ONE.subtract(0.0);
      complex0.isNaN();
      Complex complex4 = complex1.multiply(complex0);
      complex2.multiply(complex1);
      complex4.ZERO.multiply((-2065.7918321));
      complex4.asin();
      Complex complex5 = complex1.add((-867.0));
      Complex complex6 = complex5.negate();
      complex4.pow(0.0);
      complex3.isNaN();
      complex5.subtract(0.0);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(1084.23923628796, 1084.23923628796);
      complex0.I.multiply(1);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = complex2.INF.asin();
      complex3.NaN.toString();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex0.multiply(complex4);
      complex5.tan();
      complex3.hashCode();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-1.730424167425052E-8));
      Complex complex1 = complex0.I.tan();
      complex0.ONE.cosh();
      complex0.equals((Object) null);
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.NaN.conjugate();
      Complex complex3 = complex0.ONE.multiply((-1.730424167425052E-8));
      Complex complex4 = Complex.valueOf(0.0, (-1.730424167425052E-8));
      Complex complex5 = complex4.INF.pow(complex1);
      complex5.INF.log();
      complex1.I.asin();
      Complex complex6 = complex0.subtract(complex4);
      complex6.I.divide(2.0);
      complex6.INF.getField();
      Complex complex7 = complex4.sin();
      complex4.abs();
      complex3.cosh();
      complex4.multiply((-1266));
      complex4.getArgument();
      complex7.tanh();
      Complex complex8 = complex2.log();
      Complex complex9 = complex8.tanh();
      Complex.valueOf(0.0);
      complex9.sinh();
      complex4.subtract((-2329.2));
      Complex.valueOf(2.0, (-1.730424167425052E-8));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(3.4742610108480497E-91);
      Complex.valueOf(3.4742610108480497E-91, 152.1141652855143);
      Complex complex1 = Complex.ZERO;
      complex1.NaN.getField();
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.NaN.getField();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.I.tanh();
      complex4.sqrt1z();
      complex0.pow(complex1);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 2.4224166870117188;
      Complex complex0 = new Complex(2.4224166870117188);
      complex0.isInfinite();
      complex0.getImaginary();
      complex0.getImaginary();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.add(0.0);
      complex1.NaN.hashCode();
      Complex complex3 = complex0.sqrt();
      complex3.cosh();
      complex0.divide(0.0);
      try { 
        complex2.ONE.nthRoot((-1030));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,030
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(438.05617520342, 438.05617520342);
      Complex complex1 = new Complex(438.05617520342, 2084.3914145284853);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.INF.pow(complex2);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.NaN.divide(438.05617520342);
      Complex complex7 = complex4.ONE.conjugate();
      complex7.INF.negate();
      complex1.sqrt();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex2.asin();
      complex8.ZERO.divide(3327.0692057);
      complex3.toString();
      complex4.reciprocal();
      Complex complex10 = complex5.tan();
      complex9.createComplex(3327.0692057, 438.05617520342);
      complex6.add(complex10);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.nthRoot(3946);
      Complex complex1 = complex0.I.asin();
      complex1.NaN.sin();
      complex0.I.getArgument();
      complex0.readResolve();
      complex0.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.sinh();
      complex3.INF.getField();
      complex3.ONE.readResolve();
      complex2.isNaN();
      complex0.getReal();
      complex2.getReal();
      Complex complex4 = complex0.exp();
      complex0.pow(complex4);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.cosh();
      complex6.INF.abs();
      complex6.createComplex((-2932.25336), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      complex1.INF.reciprocal();
      Complex complex2 = complex0.INF.sqrt1z();
      complex0.ONE.createComplex((-2098.176261688878), (-2098.176261688878));
      complex2.I.readResolve();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.divide(1.8652499723625443E107);
      complex4.tan();
      complex3.toString();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.valueOf(1155.364);
      complex3.ZERO.subtract(1155.364);
      complex2.ZERO.multiply(569);
      Complex complex5 = complex0.ONE.subtract(1880.2916689);
      complex3.INF.tanh();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex0.tan();
      complex7.ZERO.getArgument();
      complex1.sqrt();
      complex1.toString();
      complex1.multiply(complex5);
      complex2.pow(1155.364);
      complex1.nthRoot(2092);
      complex4.ZERO.pow(0.0);
      Complex complex8 = complex6.add(complex4);
      complex8.ZERO.nthRoot(569);
      complex0.add(complex8);
      complex8.abs();
      complex0.negate();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-1.0), 1769.8);
      complex2.NaN.multiply((-3125));
      complex0.ONE.atan();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.ZERO.cosh();
      complex5.ZERO.nthRoot(1);
      complex0.NaN.multiply(1621);
      complex5.ZERO.add(0.0);
      complex1.ZERO.hashCode();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex4.sqrt1z();
      complex2.I.pow(0.0);
      complex6.sqrt();
      Complex complex9 = complex8.subtract(1769.8);
      Complex complex10 = complex4.tan();
      complex10.ZERO.hashCode();
      complex8.INF.pow(complex3);
      complex3.toString();
      Complex.valueOf((double) 1621, 0.0);
      Complex complex11 = complex8.subtract(complex3);
      complex2.isNaN();
      complex9.toString();
      complex7.hashCode();
      complex8.nthRoot(921);
      complex11.sinh();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.I.negate();
      complex2.ONE.asin();
      complex0.toString();
      complex0.equals("(0.0, 0.0)");
      Complex complex3 = complex0.NaN.multiply((-1500));
      complex0.ONE.add(0.0);
      complex0.isInfinite();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex3.ZERO.add(complex4);
      complex0.I.exp();
      complex5.NaN.pow((-3154.911));
      complex5.ONE.pow((double) (-1500));
      complex5.getField();
      complex1.isNaN();
      complex6.sin();
      Complex complex7 = complex1.acos();
      complex7.ZERO.sqrt1z();
      try { 
        complex4.ZERO.nthRoot((-1500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,500
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.pow(0.0);
      complex1.ONE.pow(complex0);
      complex2.ZERO.divide((-141.0));
      complex2.getReal();
      Complex complex3 = complex1.multiply(Double.NaN);
      complex3.ZERO.multiply((-689.338));
      complex2.sqrt1z();
      complex0.createComplex(1095.971086876538, 1095.971086876538);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex1.NaN.add(2.0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.I.conjugate();
      complex4.tan();
      Complex complex6 = complex5.ZERO.createComplex(0.0, 0.0);
      Complex complex7 = complex4.pow(complex0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.cosh();
      complex9.NaN.asin();
      Complex complex10 = complex5.log();
      complex10.NaN.getField();
      complex1.log();
      complex5.subtract(complex3);
      complex6.asin();
      try { 
        complex2.nthRoot((-2260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-604.4636826131687), (-1385.46548564));
      Complex complex1 = complex0.exp();
      complex1.ONE.nthRoot(375);
      Complex complex2 = complex0.pow(0.0);
      complex2.ONE.conjugate();
      Complex complex3 = complex1.sqrt1z();
      complex3.ONE.pow(3129.237);
      Complex.valueOf((-1385.46548564));
      Complex complex4 = complex1.add((-131.917));
      complex4.atan();
      complex1.getReal();
      Complex complex5 = complex1.multiply(375);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1122.606320266));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.acos();
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      complex1.I.nthRoot(3367);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex1.INF.pow(complex6);
      complex7.ZERO.pow(0.0);
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex0.cosh();
      complex0.acos();
      Complex complex9 = Complex.valueOf(Double.NaN, (double) 3367);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex9.ONE.pow(1746.47542);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex1.add(complex2);
      complex4.pow(complex0);
      Complex.valueOf((-2843.22674), (-768.9));
      complex12.isNaN();
      Complex complex13 = complex2.sinh();
      complex4.isNaN();
      complex13.getReal();
      complex8.getReal();
      complex12.multiply(complex7);
      assertFalse(complex6.equals((Object)complex10));
      
      complex12.getImaginary();
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex0, complex11);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 1390.38;
      Complex complex0 = new Complex(1390.38, 1390.38);
      complex0.INF.createComplex(1390.38, 1390.38);
      double double1 = 2188.793;
      Complex complex1 = complex0.createComplex((-560.46602678), 2188.793);
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.INF.pow(1.0);
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.add(1.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(2.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(1812);
      Complex complex2 = complex1.NaN.multiply((double) 1812);
      Complex complex3 = complex0.reciprocal();
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      List<Complex> list0 = complex2.nthRoot(37);
      assertSame(complex2, complex1);
      assertEquals(1, list0.size());
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(list0.contains(complex1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0584469687624562E-7);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.cos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.I.add(complex0);
      assertEquals(1.0584469687624562E-7, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.NaN.subtract((-1.0));
      Complex complex5 = complex4.ONE.sqrt();
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      
      complex1.getField();
      Complex complex6 = complex1.subtract(1.0584469687624562E-7);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cos();
      complex0.getImaginary();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.INF.pow(0.0);
      complex0.sinh();
      Complex complex4 = complex2.ONE.pow(complex3);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.divide(2.0769322678328357E-128);
      assertEquals(2.6014440347249044E127, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.asin();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      complex2.conjugate();
      Complex complex7 = complex1.exp();
      assertEquals(1.7165256995489035, complex7.getReal(), 0.01);
      
      complex3.readResolve();
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      double double0 = complex1.getImaginary();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1911.75, 2.156647205352783);
      boolean boolean0 = complex0.isInfinite();
      assertEquals(2.156647205352783, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(1911.75, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1473.629309233538, 1473.629309233538);
      Complex complex1 = complex0.divide(1822.6354);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.asin();
      complex2.tan();
      Complex.valueOf(1822.6354, 277.0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex3.subtract(2.0);
      complex5.add(0.0);
      complex1.divide(complex0);
      complex4.isNaN();
      complex1.pow(complex0);
      complex5.sin();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.pow((-1054.849536429934));
      complex1.INF.getField();
      complex0.INF.multiply(complex1);
      complex0.hashCode();
      Complex complex2 = complex0.cos();
      try { 
        complex2.nthRoot((-907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -907
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
