/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:17:50 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.reciprocal();
      complex2.toString();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.add((-315.0462));
      complex4.NaN.multiply((-315.0462));
      complex2.atan();
      double double0 = (-1.0);
      Complex complex5 = complex3.subtract((-1.0));
      Complex complex6 = complex5.add((-1.0));
      complex6.NaN.sqrt();
      complex6.ZERO.subtract((-9.998203918186166E-15));
      complex6.I.add(complex0);
      complex1.NaN.multiply(1258);
      Complex complex7 = complex1.sqrt();
      double double1 = 7.8962956959744E13;
      Complex complex8 = complex7.divide(7.8962956959744E13);
      Complex complex9 = Complex.INF;
      complex4.ZERO.multiply(complex9);
      complex8.toString();
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = complex0.multiply(1598.505);
      Complex complex2 = Complex.INF;
      complex1.getField();
      Object object0 = complex1.readResolve();
      ((Complex) object0).I.add(complex2);
      Complex complex3 = new Complex(4235.793409823633, (-3098.498856284483));
      complex3.equals(complex1);
      Complex complex4 = Complex.I;
      complex4.NaN.reciprocal();
      Complex complex5 = complex0.reciprocal();
      complex2.readResolve();
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex6.divide(complex7);
      Complex complex9 = complex8.asin();
      Complex complex10 = Complex.NaN;
      complex5.sin();
      complex9.abs();
      complex6.cos();
      Complex complex11 = complex1.conjugate();
      complex11.subtract(complex0);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(4.1218749988429474E239, (-660.945778058));
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.pow(6.283185307179586);
      Complex complex4 = complex0.sqrt();
      complex4.getField();
      complex0.I.toString();
      Complex complex5 = complex1.sqrt1z();
      complex5.cos();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(810, 20.0);
      Complex complex2 = new Complex(470.0247);
      complex2.cosh();
      complex1.tan();
      Complex complex3 = Complex.valueOf((-2.0), (double) 810);
      Complex complex4 = complex3.multiply(2444.95);
      complex1.tan();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.0), 6.283185307179586);
      Complex complex2 = Complex.I;
      complex2.abs();
      Complex complex3 = Complex.valueOf((-1.0));
      complex3.sin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.exp();
      complex1.add(Double.POSITIVE_INFINITY);
      complex3.cos();
      Complex.valueOf(6.283185307179586);
      complex5.cos();
      Complex complex6 = new Complex(2.0, (-20.0));
      complex6.tan();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(3.047601928063002E193);
      complex0.cos();
      Complex complex2 = Complex.valueOf(3.047601928063002E193);
      complex2.cos();
      complex1.tan();
      Complex complex3 = new Complex((-1436.897375404495), Double.NaN);
      complex3.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      complex1.add(2153.7478791329);
      Complex complex2 = new Complex((-1111.08784));
      Complex complex3 = complex2.cos();
      Complex.valueOf(3098.498856284483);
      Complex complex4 = complex1.cos();
      complex4.tan();
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      complex1.reciprocal();
      Complex complex2 = new Complex(20.0, 20.0);
      Complex complex3 = complex0.multiply(complex1);
      complex1.add(complex3);
      complex1.divide(complex2);
      complex3.asin();
      complex2.tanh();
      Complex complex4 = Complex.ONE;
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-981.3));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.equals("RJPKA?3N`m");
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex(2589.048, 2589.048);
      Complex complex4 = Complex.valueOf((-662.916));
      complex0.multiply(complex4);
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex5.divide(complex0);
      complex6.ONE.createComplex((-229.294227222), 1203.1530469201596);
      complex2.asin();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ZERO;
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3646.030742664943), (-2.35387025694381E-8));
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sin();
      complex0.exp();
      Complex complex3 = Complex.valueOf((-20.0), 1.1677812418806031E-60);
      complex2.exp();
      complex3.tanh();
      Complex complex4 = new Complex((-3646.030742664943), (-2303.3224));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.tan();
      complex3.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.447644624208044E-6);
      complex0.toString();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.divide(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf(0.0, (-1.0));
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.INF.negate();
      complex3.multiply(7);
      complex0.nthRoot(1);
      complex2.abs();
      Complex complex4 = complex2.ONE.pow(Double.NaN);
      Complex complex5 = complex4.INF.exp();
      complex2.asin();
      complex2.INF.readResolve();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex2.multiply(complex0);
      Complex complex8 = complex0.add(complex2);
      complex8.NaN.createComplex(Double.NaN, (-2989.8615017));
      complex6.getField();
      complex8.getField();
      Complex complex9 = Complex.valueOf(3.3530854719770997, (double) 1);
      Complex complex10 = complex2.subtract(complex9);
      Complex complex11 = complex10.ONE.subtract(complex7);
      complex11.ZERO.cos();
      Complex complex12 = complex7.atan();
      Complex complex13 = Complex.valueOf((-1095.362459267), (double) 1);
      complex5.equals(complex13);
      complex7.divide(complex12);
      complex10.pow(3.3530854719770997);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = complex0.multiply(1598.505);
      Complex complex2 = Complex.INF;
      complex1.getField();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf((-3098.498856284483));
      complex4.equals(complex1);
      Complex complex5 = Complex.I;
      complex0.reciprocal();
      complex5.subtract(Double.NaN);
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      complex1.multiply(complex6);
      Complex complex7 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sqrt();
      complex3.tan();
      complex0.toString();
      complex3.INF.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.cosh();
      complex1.reciprocal();
      Complex complex6 = Complex.INF;
      complex5.readResolve();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = new Complex((-3098.498856284483));
      Complex complex2 = Complex.INF;
      complex1.getField();
      complex1.readResolve();
      Complex complex3 = new Complex(4235.793409823633, (-3098.498856284483));
      complex3.equals(complex1);
      Complex complex4 = complex2.divide(complex1);
      complex0.reciprocal();
      complex2.abs();
      complex0.reciprocal();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 1598.505);
      Complex complex6 = Complex.ZERO;
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(2.67091703414917, 2.67091703414917);
      complex0.NaN.sin();
      complex0.I.sin();
      Complex.valueOf(Double.NaN);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(930.2789513901, 930.2789513901);
      Complex complex1 = Complex.valueOf((-6413.796473654729), 930.2789513901);
      complex0.I.nthRoot(306);
      complex1.INF.getArgument();
      complex1.multiply(306);
      complex1.INF.readResolve();
      complex0.NaN.getField();
      Complex complex2 = complex0.add(930.2789513901);
      Complex complex3 = complex0.asin();
      complex1.sqrt();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.cosh();
      complex4.ZERO.add((-254.66));
      Complex complex6 = Complex.valueOf((-152.157), (double) 306);
      Complex complex7 = complex4.subtract(complex3);
      complex7.ONE.hashCode();
      complex7.ONE.cosh();
      Complex.valueOf(2610.81156926461, 0.7853981633974483);
      complex0.readResolve();
      Complex complex8 = complex6.negate();
      complex2.sqrt1z();
      complex7.multiply(complex1);
      complex4.conjugate();
      complex6.asin();
      complex1.add(complex5);
      complex8.log();
      complex4.divide(2831.6328);
      Complex complex9 = new Complex((-152.157));
      complex1.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(7.351660019638507, 1096.0734412057043);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = new Complex(0.282734236824459, 0.282734236824459);
      complex0.equals(complex4);
      complex1.divide(complex4);
      complex3.reciprocal();
      Complex complex5 = new Complex(0.282734236824459, 3.11611905696257E-10);
      complex5.INF.multiply(1985485679);
      Complex complex6 = complex0.divide((-237.780826983));
      complex6.I.sqrt1z();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.add(0.0);
      Complex complex5 = complex3.cos();
      Complex complex6 = Complex.ONE;
      complex6.nthRoot(7);
      Complex complex7 = complex1.sqrt();
      complex4.tan();
      complex7.toString();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex7.multiply(0.0);
      complex5.I.subtract((double) 0);
      Complex complex10 = Complex.valueOf(2005.87822749443);
      complex10.multiply(0);
      complex5.divide(complex9);
      complex4.getField();
      complex8.isNaN();
      complex10.multiply(complex9);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex3.reciprocal();
      Complex complex4 = new Complex(2800.056130218, 2800.056130218);
      complex3.sqrt1z();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-2.35387025694381E-8), (-2.35387025694381E-8));
      complex0.readResolve();
      Complex complex1 = new Complex((-2.35387025694381E-8), 4235.793409823633);
      complex0.equals(complex1);
      complex1.divide(complex0);
      Complex complex2 = complex0.reciprocal();
      complex1.abs();
      complex2.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.ONE;
      complex3.add(complex4);
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.valueOf((-2772.9468521119215));
      Complex complex7 = complex6.divide(complex0);
      complex7.acos();
      complex3.cos();
      complex6.createComplex(4235.793409823633, 20.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = complex0.multiply(1598.505);
      Complex complex2 = Complex.INF;
      complex1.getField();
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = new Complex(4235.793409823633, (-3098.498856284483));
      complex4.equals(complex1);
      complex2.divide(complex1);
      Complex complex5 = complex0.reciprocal();
      complex2.abs();
      Complex complex6 = (Complex)complex2.readResolve();
      Complex complex7 = complex4.multiply(complex1);
      Complex complex8 = complex7.add(complex5);
      Complex complex9 = complex7.divide(complex8);
      Complex complex10 = complex9.asin();
      Complex complex11 = Complex.NaN;
      complex5.sin();
      complex10.abs();
      complex7.multiply(0);
      complex0.divide(complex6);
      complex3.getField();
      complex9.isNaN();
      complex2.multiply(complex1);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2678272724151611, (-616.4094081879076));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(4003.98);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.acos();
      complex2.getField();
      complex1.ZERO.sinh();
      complex4.readResolve();
      Complex complex5 = new Complex(2684.801, 410.32801922239065);
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = new Complex(4003.98);
      Complex complex8 = complex7.reciprocal();
      complex7.abs();
      complex5.readResolve();
      complex3.multiply(complex0);
      Complex complex9 = complex3.add(complex6);
      Complex complex10 = Complex.NaN;
      complex2.reciprocal();
      complex4.divide(complex9);
      complex9.asin();
      Complex complex11 = Complex.NaN;
      complex8.sqrt();
      complex6.pow(complex7);
      Complex complex12 = Complex.ONE;
      complex12.acos();
      Complex complex13 = Complex.valueOf(410.32801922239065);
      complex9.exp();
      complex13.atan();
      Complex.valueOf(Double.NaN, 252.034238);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-529.7193));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.INF;
      complex2.toString();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ONE.add((-529.7193));
      Complex complex5 = complex0.tanh();
      Complex.valueOf((-529.7193), 1520.311);
      complex3.readResolve();
      Complex complex6 = new Complex(1520.311, Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex6.add(complex4);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = complex8.divide(complex4);
      Complex complex12 = complex6.asin();
      complex12.NaN.createComplex((-1193.0079606762), Double.POSITIVE_INFINITY);
      Complex complex13 = Complex.NaN;
      complex7.sqrt();
      Complex complex14 = complex3.pow(complex7);
      complex5.acos();
      complex7.multiply(complex14);
      complex10.exp();
      complex4.atan();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = complex0.multiply(1598.505);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.acos();
      complex3.getField();
      Complex complex4 = (Complex)complex1.readResolve();
      Complex complex5 = new Complex(4235.793409823633, (-3098.498856284483));
      complex3.divide(complex1);
      complex0.reciprocal();
      complex2.abs();
      Complex complex6 = Complex.ZERO;
      complex1.sin();
      Complex complex7 = Complex.valueOf(1340.70448);
      complex6.negate();
      complex4.tanh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.ZERO;
      complex10.cosh();
      complex9.reciprocal();
      complex8.cos();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1558.78199);
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex(1558.78199, 538.2);
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      Complex complex4 = new Complex(0.0, 2.0);
      Complex complex5 = complex1.divide(complex4);
      complex4.reciprocal();
      complex4.abs();
      complex1.readResolve();
      Complex complex6 = complex5.multiply(complex1);
      complex4.add(complex5);
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = Complex.valueOf(2.0);
      complex6.ONE.add(complex1);
      complex8.asin();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex1.sin();
      complex6.abs();
      complex8.multiply((-1806));
      complex2.divide(complex10);
      complex4.getField();
      Complex complex11 = Complex.valueOf(2.0, 1558.78199);
      complex11.isNaN();
      complex9.multiply(complex4);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1558.78199);
      Complex complex1 = complex0.ZERO.subtract((-1204.1196541440786));
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.sin();
      complex4.abs();
      complex1.multiply(0);
      complex3.divide(complex5);
      Complex.valueOf(2.4175248449172035E-87);
      complex7.getField();
      complex8.isNaN();
      complex4.multiply(complex1);
      complex5.add(1.9833559429116576E-4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-2.35387025694381E-8));
      Complex complex1 = new Complex(1817.0761363081167, Double.POSITIVE_INFINITY);
      complex1.divide(1817.0761363081167);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = complex0.multiply(1598.505);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.acos();
      complex3.getField();
      complex1.readResolve();
      Complex complex4 = new Complex(4235.793409823633, (-3098.498856284483));
      complex4.equals(complex3);
      Complex complex5 = complex3.divide(complex1);
      complex0.reciprocal();
      complex2.abs();
      complex2.readResolve();
      Complex complex6 = complex4.multiply(complex1);
      complex3.nthRoot(1894);
      complex0.sqrt();
      Complex complex7 = complex6.tan();
      complex5.toString();
      Complex complex8 = complex7.sqrt();
      complex8.multiply((-1364.63170492));
      Complex complex9 = complex7.cosh();
      complex9.reciprocal();
      complex5.cos();
      Complex complex10 = Complex.valueOf(1598.505);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(9835.8400508345, 7.980432566722885E241);
      Complex complex1 = complex0.I.subtract(7.980432566722885E241);
      Complex complex2 = complex1.pow(7.980432566722885E241);
      complex0.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.ZERO.add(1.0267179012298584);
      complex2.ZERO.cos();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.divide(complex6);
      complex1.asin();
      Complex complex9 = Complex.NaN;
      complex2.sin();
      complex1.abs();
      Complex complex10 = complex5.multiply(1045);
      Complex complex11 = Complex.INF;
      complex11.divide(complex4);
      complex3.getField();
      complex10.isNaN();
      Complex complex12 = Complex.valueOf(7.980432566722885E241);
      complex12.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-2.35387025694381E-8), (-2.35387025694381E-8));
      complex0.readResolve();
      Complex complex1 = new Complex((-2.35387025694381E-8), 4235.793409823633);
      complex0.equals(complex1);
      Complex complex2 = complex1.divide(complex0);
      complex0.reciprocal();
      complex1.abs();
      complex2.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf((-2772.2357675));
      complex7.divide(complex0);
      complex3.asin();
      Complex complex8 = Complex.NaN;
      complex2.sin();
      complex8.abs();
      complex2.multiply(4028);
      Complex complex9 = Complex.I;
      complex9.divide(complex8);
      complex2.getField();
      complex9.isNaN();
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = (-1436.03799889787);
      Complex complex0 = Complex.valueOf((-1436.03799889787));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3616843223571777);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      complex0.toString();
      Complex complex3 = complex0.cos();
      complex3.hashCode();
      complex1.abs();
      Complex complex4 = complex2.reciprocal();
      complex2.equals(complex4);
      complex3.negate();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(4917.92, 4917.92);
      complex0.INF.exp();
      Complex complex1 = complex0.createComplex(4917.92, (-0.7615941559557649));
      complex1.I.getField();
      Complex complex2 = complex0.multiply(1.6944255828857422);
      Complex complex3 = complex2.divide(1.6944255828857422);
      Complex complex4 = complex2.ZERO.pow(4917.92);
      complex2.add(complex3);
      Complex complex5 = complex3.divide(complex0);
      complex0.acos();
      complex0.nthRoot(1068);
      complex5.equals(complex0);
      complex3.ONE.getArgument();
      complex3.pow(4917.92);
      complex3.reciprocal();
      Complex complex6 = complex1.add(1605.375813434736);
      complex6.atan();
      complex4.reciprocal();
      complex4.abs();
      complex0.tanh();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.542967150507818E-8, (-3281.2975635048));
      Complex complex1 = complex0.multiply(7);
      complex0.nthRoot(457);
      Complex complex2 = new Complex(4074, 7.542967150507818E-8);
      Complex complex3 = complex0.subtract((-3.632649959929127E10));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex1.multiply(complex2);
      complex4.INF.sqrt1z();
      Complex complex7 = Complex.INF;
      complex5.abs();
      complex3.divide(23076.497735147506);
      complex5.getArgument();
      complex6.cosh();
      complex7.abs();
      Complex.valueOf((double) 7, 602.827);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-2416.98867), (-2416.98867));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.valueOf((-2416.98867), (-2416.98867));
      complex5.toString();
      complex3.exp();
      Complex complex6 = Complex.ONE;
      complex6.tanh();
      Complex.valueOf(318.1, (-2041.7));
      Complex complex7 = complex4.sin();
      Complex.valueOf(318.1);
      complex6.negate();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex9.multiply((-2416.98867));
      Complex complex11 = Complex.I;
      complex11.abs();
      complex5.multiply((-1));
      complex10.divide(complex7);
      complex1.getField();
      complex10.isNaN();
      complex2.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-1410.8443719322206));
      Complex complex1 = Complex.ONE;
      complex1.exp();
      Complex complex2 = Complex.valueOf((-1410.8443719322206), 2219.44454593);
      complex2.tan();
      complex2.getArgument();
      complex1.multiply((-3341));
      complex0.abs();
      complex2.asin();
      Complex complex3 = new Complex(1.0);
      complex3.abs();
      complex3.getArgument();
      complex2.getArgument();
      Complex.valueOf((-1410.8443719322206), 1.0);
      Complex complex4 = Complex.valueOf(2.1370349107012063, (-4952965.914265027));
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-529.7193));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      complex3.toString();
      complex2.exp();
      complex0.tanh();
      Complex.valueOf((-529.7193), 1520.311);
      Complex complex4 = Complex.ZERO;
      complex4.sin();
      Complex.valueOf(Double.NaN);
      complex0.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex((-529.7193), (-529.7193));
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = Complex.INF;
      complex0.abs();
      Complex complex9 = complex5.divide(Double.NaN);
      Complex complex10 = Complex.ONE;
      complex10.getArgument();
      complex9.cosh();
      complex1.abs();
      Complex.valueOf(Double.NaN, 529.7193);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      complex0.I.divide((-3098.498856284483));
      complex0.toString();
      Complex complex1 = Complex.valueOf(0.0, (-2340.4065945988796));
      Complex complex2 = complex1.cosh();
      complex0.reciprocal();
      complex0.cos();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = complex0.multiply(1598.505);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.acos();
      complex3.getField();
      complex1.readResolve();
      Complex complex4 = new Complex(4235.793409823633, (-3098.498856284483));
      complex4.equals(complex3);
      complex3.divide(complex1);
      Complex complex5 = complex0.reciprocal();
      complex2.abs();
      complex2.readResolve();
      Complex complex6 = complex4.multiply(complex1);
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex6.divide(complex7);
      complex9.asin();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex5.sin();
      complex5.negate();
      Complex complex12 = Complex.ZERO;
      complex12.exp();
      complex12.negate();
      complex11.sinh();
      complex10.sinh();
      Complex complex13 = Complex.NaN;
      complex13.sinh();
      Complex.valueOf((-3098.498856284483));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.toString();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(318.1, 318.1);
      complex3.sin();
      Complex complex5 = Complex.valueOf((-2.35387025694381E-8));
      complex1.negate();
      complex3.tanh();
      Complex complex6 = new Complex((-1.0356006160554071E245), 318.1);
      Complex complex7 = complex6.multiply(1.8508157176809255);
      complex4.abs();
      Complex complex8 = complex1.multiply((-1));
      complex8.divide(complex3);
      Complex complex9 = Complex.valueOf(449.8613341908816);
      complex9.getField();
      complex7.isNaN();
      complex5.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(complex0);
      complex1.ONE.toString();
      Complex complex2 = complex0.cos();
      complex1.NaN.hashCode();
      complex0.abs();
      Complex complex3 = Complex.INF;
      complex1.ONE.pow(0.0);
      complex0.isInfinite();
      complex1.negate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-529.7193));
      complex0.isInfinite();
      Complex complex1 = new Complex((-529.7193), (-529.7193));
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex0.multiply(complex1);
      complex4.INF.abs();
      complex3.NaN.getArgument();
      Complex complex5 = complex3.multiply((-529.7193));
      complex5.abs();
      complex4.multiply(266);
      complex1.divide(complex2);
      complex2.getField();
      complex3.isNaN();
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-2.35387025694381E-8), 5841833.23090837);
      Complex complex1 = complex0.divide((-2.35387025694381E-8));
      complex1.multiply((-2235.9));
      complex0.divide(2633.07335764001);
      Complex complex2 = complex1.createComplex((-2.35387025694381E-8), 1010.2369061181);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-529.7193));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      complex3.toString();
      complex2.exp();
      Complex complex4 = complex0.tanh();
      Complex.valueOf((-529.7193), 1520.311);
      Complex complex5 = Complex.ZERO;
      complex5.sin();
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex0.negate();
      Complex complex7 = complex4.tanh();
      complex2.multiply(3284.10892);
      Complex complex8 = new Complex(Double.NaN, 318.1);
      complex8.abs();
      Complex complex9 = complex1.multiply(120);
      Complex complex10 = Complex.INF;
      complex9.divide(complex10);
      complex6.getField();
      complex7.isNaN();
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = (Complex)complex1.I.readResolve();
      complex3.ZERO.multiply(4586);
      complex0.nthRoot(4074);
      Complex complex4 = new Complex(0.8813735870195432, 4074);
      complex1.I.subtract(9.83920263200211E-9);
      complex3.sqrt();
      Complex complex5 = complex1.add(complex2);
      complex2.multiply(complex5);
      Complex complex6 = Complex.INF;
      complex6.abs();
      complex4.divide((double) 4074);
      complex1.getArgument();
      complex6.cosh();
      complex2.abs();
      Complex.valueOf(2664.8846, (-2589.048));
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.add(153.1453);
      Complex complex3 = Complex.valueOf(153.1453);
      Complex complex4 = Complex.valueOf(1.0000213188709943, 153.1453);
      Complex complex5 = complex4.pow(complex1);
      complex2.toString();
      complex1.abs();
      complex4.cos();
      complex3.hashCode();
      complex1.abs();
      complex5.reciprocal();
      complex5.getReal();
      complex2.pow(1.557407724654902);
      Object object0 = new Object();
      complex3.equals(object0);
      complex5.negate();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1598.505));
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.valueOf(1.0);
      complex4.tan();
      Complex complex5 = complex0.multiply(1598.505);
      Complex complex6 = complex5.sqrt();
      complex0.acos();
      complex3.getField();
      Complex complex7 = (Complex)complex1.readResolve();
      complex5.equals(complex7);
      Complex complex8 = complex1.divide(complex4);
      Complex complex9 = complex3.reciprocal();
      complex9.abs();
      complex0.readResolve();
      complex2.multiply(complex5);
      complex0.add(complex8);
      Complex complex10 = Complex.NaN;
      complex4.divide(complex10);
      Complex complex11 = complex4.asin();
      Complex complex12 = Complex.NaN;
      complex12.sin();
      complex6.negate();
      complex9.exp();
      complex1.negate();
      complex11.sinh();
      Complex complex13 = complex0.sinh();
      complex13.sinh();
      Complex.valueOf((-307.8884693945));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2119.6);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.tan();
      complex0.getArgument();
      Complex complex4 = complex1.multiply((-3341));
      Complex complex5 = complex4.asin();
      complex5.abs();
      complex3.getArgument();
      complex5.getArgument();
      Complex.valueOf(1.6659181744283111, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.subtract(0.0);
      complex0.toString();
      Complex complex2 = complex1.negate();
      complex1.log();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.valueOf((-2.35387025694381E-8), (-2.35387025694381E-8));
      Complex complex7 = complex6.cos();
      complex3.add(0.0);
      complex6.nthRoot(805);
      Complex complex8 = Complex.valueOf((-2.35387025694381E-8));
      Complex complex9 = complex2.exp();
      complex5.tanh();
      Complex complex10 = new Complex((-2.35387025694381E-8));
      complex9.abs();
      complex6.sqrt();
      complex7.pow((-2.35387025694381E-8));
      complex8.hashCode();
      Complex complex11 = Complex.valueOf(2712.0, (-0.38109784554181547));
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.subtract(0.0);
      complex0.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex1.NaN.atan();
      complex2.ONE.asin();
      complex2.I.sinh();
      Complex complex6 = Complex.valueOf((-9.83920263200211E-9), (-9.83920263200211E-9));
      complex6.ZERO.cos();
      Complex complex7 = complex3.add(0.0);
      complex0.ONE.nthRoot(1);
      complex2.conjugate();
      complex3.exp();
      Complex complex8 = complex6.tanh();
      complex5.I.sqrt();
      complex5.abs();
      complex7.sqrt();
      complex6.pow(0.0);
      complex5.hashCode();
      complex4.getField();
      complex8.conjugate();
      complex0.multiply((-9.83920263200211E-9));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.add(153.1453);
      Complex complex3 = complex0.INF.reciprocal();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.INF.subtract(153.1453);
      complex2.I.pow(complex0);
      Complex complex6 = complex0.divide((-2.0));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex3.ONE.multiply(complex7);
      Complex complex9 = complex2.NaN.tanh();
      complex9.I.sin();
      Complex complex10 = complex6.I.divide(complex5);
      Complex complex11 = complex0.NaN.atan();
      complex0.hashCode();
      complex0.toString();
      complex1.hashCode();
      complex6.ONE.getField();
      complex5.reciprocal();
      complex8.abs();
      complex5.readResolve();
      complex7.multiply(complex4);
      complex10.add(complex0);
      complex7.divide(complex3);
      Complex complex12 = complex2.asin();
      complex11.sin();
      Complex complex13 = complex12.negate();
      complex13.exp();
      complex8.negate();
      Complex complex14 = Complex.valueOf(1.178204606523101E-7, 1.178204606523101E-7);
      complex14.sinh();
      complex1.sinh();
      Complex complex15 = Complex.I;
      complex15.sinh();
      Complex.valueOf((-0.8));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.I.createComplex((-363.065), (-1113.8752007));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.I.tan();
      Complex complex8 = complex4.I.multiply(610.8);
      Complex complex9 = complex5.ONE.sqrt();
      Complex complex10 = complex0.INF.acos();
      complex10.NaN.getField();
      complex3.equals(complex4);
      Complex complex11 = complex6.INF.divide(complex9);
      complex10.getField();
      Complex complex12 = complex3.asin();
      Complex complex13 = new Complex((-1.0));
      complex8.pow(complex13);
      complex1.toString();
      Complex complex14 = Complex.valueOf(0.5762182474136353, 5.909041310777802E-8);
      Complex.valueOf((-1.0));
      Complex complex15 = complex14.divide(complex12);
      complex7.multiply(complex2);
      complex8.getField();
      Complex complex16 = complex11.add(2083.5);
      complex15.createComplex(4795.51, (-1113.8752007));
      complex15.abs();
      complex3.acos();
      complex4.divide(complex16);
      complex0.subtract(610.8);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.subtract(0.0);
      complex0.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.log();
      complex3.I.subtract(complex2);
      complex1.NaN.atan();
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = Complex.valueOf((-9.83920263200211E-9), (-9.83920263200211E-9));
      Complex complex6 = complex5.ZERO.cos();
      complex1.toString();
      complex3.pow(2038.0987435264);
      complex3.abs();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.negate();
      complex5.multiply(829.5632);
      complex4.add(0.0);
      complex1.divide(complex3);
      complex6.cos();
      complex7.isInfinite();
      complex1.nthRoot(326);
      Complex.valueOf(1.792532422030812);
      Complex complex8 = Complex.I;
      complex8.getField();
      complex0.subtract(complex8);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2.35387025694381E-8), (-2235.9));
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(246.946023978891, 1.976868146639626E196);
      Complex complex3 = complex2.sin();
      complex3.negate();
      Complex complex4 = complex2.exp();
      complex2.negate();
      complex2.sinh();
      complex4.sinh();
      Complex.valueOf(1.976868146639626E196);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-529.7193));
      complex0.isInfinite();
      Complex complex1 = new Complex((-529.7193), 0.041666666666666664);
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex0.multiply(complex1);
      complex4.INF.abs();
      Complex complex5 = complex4.INF.divide(0.041666666666666664);
      complex5.NaN.getArgument();
      Complex complex6 = complex3.multiply((-529.7193));
      complex6.abs();
      complex4.multiply(266);
      complex1.divide(complex2);
      complex2.getField();
      Complex complex7 = Complex.valueOf((double) 266);
      complex7.isNaN();
      complex1.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-2.35387025694381E-8), (-2235.9));
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.nthRoot(333);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      complex1.ZERO.divide(complex0);
      complex1.I.readResolve();
      int int0 = 4074;
      complex0.nthRoot(4074);
      complex0.getField();
      Complex complex2 = complex0.subtract((-1712.27053790992));
      complex2.ONE.abs();
      Complex complex3 = Complex.ONE;
      complex1.NaN.pow(complex3);
      complex2.getArgument();
      complex2.ZERO.tan();
      complex1.I.sqrt1z();
      // Undeclared exception!
      complex1.ZERO.nthRoot(4074);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.add((-403.567942303282));
      Complex complex2 = complex0.add(732.455094774);
      complex0.asin();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.abs();
      Complex complex1 = complex0.ONE.asin();
      complex0.readResolve();
      complex0.getField();
      Complex complex2 = complex1.subtract((-1560.77181668));
      complex0.INF.getArgument();
      Complex complex3 = complex1.asin();
      complex2.abs();
      complex1.getReal();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.divide((-1.0));
      complex5.NaN.subtract((-1397.999877905609));
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex0.multiply((-1073));
      Complex complex8 = complex6.subtract(complex7);
      Complex.valueOf(1562.3426130067949, 1.0);
      complex4.NaN.toString();
      complex8.NaN.abs();
      complex7.cos();
      Complex complex9 = complex7.INF.negate();
      complex1.multiply(complex3);
      complex4.pow(complex7);
      complex9.sinh();
      complex8.multiply((-1073));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1376.3217);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.subtract(653.72064371144);
      Complex complex4 = complex2.ONE.tanh();
      Complex complex5 = complex2.ZERO.cos();
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex5.INF.reciprocal();
      complex7.NaN.cos();
      Complex complex8 = Complex.valueOf(1104.72743, 653.72064371144);
      complex0.I.asin();
      Complex complex9 = complex6.I.subtract(1104.72743);
      Complex complex10 = complex2.exp();
      complex10.INF.conjugate();
      complex1.isInfinite();
      Complex complex11 = complex2.sin();
      Complex complex12 = complex5.sinh();
      complex12.INF.multiply(complex9);
      complex3.readResolve();
      complex5.multiply(666);
      complex10.tanh();
      complex11.hashCode();
      complex12.add((-1.1623181434592597E-259));
      complex11.sinh();
      complex9.subtract((-1.0));
      complex8.multiply(0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(7.462678536479685E-9);
      Complex complex3 = complex0.pow(complex1);
      complex3.NaN.cos();
      complex1.getImaginary();
      Complex complex4 = complex2.tan();
      complex4.INF.sqrt1z();
      complex2.I.pow(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex4.INF.abs();
      complex0.multiply(0);
      Complex complex6 = complex5.tan();
      complex6.negate();
      complex3.cos();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      int int0 = 891;
      Complex complex1 = complex0.multiply(891);
      complex0.ZERO.divide((double) 891);
      complex0.isInfinite();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.ONE.tanh();
      complex3.ZERO.tanh();
      complex1.readResolve();
      complex2.I.exp();
      Complex complex4 = Complex.valueOf((double) 891);
      Complex complex5 = complex4.I.add(0.0);
      complex5.log();
      Complex complex6 = complex4.I.conjugate();
      complex6.NaN.multiply(complex2);
      complex4.tanh();
      complex0.getImaginary();
      Complex complex7 = complex2.cos();
      complex4.equals(complex1);
      double double0 = 0.0;
      complex7.NaN.createComplex(0.0, 0.0);
      complex0.nthRoot(891);
      int int1 = (-4358);
      try { 
        complex7.nthRoot((-4358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,358
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.I.createComplex((-363.065), (-1113.8752007));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.cos();
      complex1.I.tan();
      Complex complex6 = complex3.I.multiply(610.8);
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex0.INF.acos();
      complex8.NaN.getField();
      complex2.equals(complex3);
      complex5.INF.divide(complex7);
      Complex complex9 = complex4.reciprocal();
      complex9.abs();
      complex9.NaN.readResolve();
      Complex complex10 = complex9.ONE.multiply(complex3);
      Complex complex11 = complex10.I.add(complex2);
      Complex complex12 = complex4.divide(complex5);
      complex12.asin();
      complex6.sin();
      Complex complex13 = complex7.negate();
      complex13.exp();
      complex11.negate();
      complex11.sinh();
      complex5.sinh();
      complex4.sinh();
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.log();
      complex2.createComplex(Double.NaN, 0.0);
      complex2.ZERO.createComplex(0.0, 0.0);
      complex0.INF.sqrt1z();
      Complex complex3 = complex0.reciprocal();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(151.82);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.createComplex(151.82, 6.283185307179586);
      complex2.NaN.sqrt();
      complex0.cosh();
      Complex.valueOf(0.0, 151.82);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      complex0.getArgument();
      complex0.isInfinite();
      complex1.divide(Double.NaN);
      complex1.INF.conjugate();
      complex0.I.nthRoot(1);
      Complex complex2 = complex1.pow(0.0);
      complex1.cosh();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(2569.1866594, (-445.5628376883));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.sin();
      complex0.ONE.cos();
      complex2.NaN.getField();
      complex0.pow(2569.1866594);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.add(2798.953153260508);
      complex0.getField();
      Complex complex2 = complex1.ZERO.cos();
      complex1.I.acos();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.ZERO.asin();
      Complex complex6 = complex4.I.sin();
      complex6.NaN.negate();
      complex0.conjugate();
      Complex complex7 = complex1.createComplex((-6304.18), (-6304.18));
      complex7.INF.log();
      Complex complex8 = complex0.divide(complex7);
      complex8.isInfinite();
      Complex complex9 = complex7.subtract((-6304.18));
      Complex complex10 = Complex.valueOf(1.364171028137207, 0.0);
      Complex complex11 = complex10.I.add(complex8);
      complex5.getReal();
      Complex complex12 = complex4.atan();
      complex7.createComplex(2798.953153260508, 0.0);
      complex9.atan();
      complex12.toString();
      complex12.acos();
      complex3.toString();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex1.I.add(1.376213550567627);
      complex4.I.getField();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex3.multiply((-1300));
      Complex complex7 = complex6.ZERO.pow(complex0);
      Complex complex8 = complex5.multiply(198);
      complex8.equals((Object) null);
      Complex.valueOf(0.0);
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.INF.tan();
      Complex complex2 = complex0.I.pow(6.283185307179586);
      complex2.divide(6.283185307179586);
      complex0.getArgument();
      complex0.getField();
      complex2.getImaginary();
      Complex complex3 = complex0.ZERO.subtract((-0.4303012170000917));
      Complex complex4 = complex2.divide(1.0);
      complex0.log();
      Complex complex5 = complex2.NaN.subtract(complex4);
      complex5.INF.createComplex(0.0, 1.0);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex6.add(1.0);
      complex7.INF.add(6.283185307179586);
      complex1.acos();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3098.498856284483), (-3098.498856284483));
      Complex complex1 = complex0.I.divide((-3098.498856284483));
      Complex complex2 = complex0.multiply((-3098.498856284483));
      complex2.divide((-3098.498856284483));
      complex1.createComplex((-3098.498856284483), (-41.4));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.hashCode();
      complex2.ZERO.sqrt();
      Complex complex3 = complex0.ZERO.sinh();
      complex0.toString();
      Complex complex4 = complex0.multiply((-369));
      Complex complex5 = complex4.ZERO.negate();
      complex4.INF.acos();
      complex0.toString();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex6.NaN.add(2846.4960705368358);
      Complex complex8 = complex6.INF.sin();
      complex8.ONE.abs();
      Complex complex9 = complex3.tan();
      complex5.ONE.log();
      complex0.atan();
      complex9.ZERO.toString();
      Complex complex10 = complex3.subtract((double) (-369));
      complex6.getImaginary();
      Complex complex11 = complex10.sqrt();
      complex11.INF.conjugate();
      Complex complex12 = complex0.acos();
      complex12.I.getArgument();
      complex8.asin();
      complex3.cos();
      complex0.negate();
      complex7.divide(complex4);
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-529.7193));
      complex0.isInfinite();
      Complex complex1 = new Complex((-529.7193), 0.041666666666666664);
      Complex complex2 = complex1.I.sqrt();
      complex2.INF.add(complex0);
      Complex complex3 = complex0.multiply(complex1);
      complex3.INF.abs();
      Complex complex4 = complex3.INF.divide(0.041666666666666664);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.cosh();
      complex5.I.abs();
      Complex.valueOf(315.65933657185, (-8.332543237340988E-249));
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2.600448597385527E-8, (-1072.0));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.subtract((-297.825));
      complex3.ONE.sqrt();
      Complex complex4 = complex1.ONE.cosh();
      complex1.toString();
      Complex complex5 = complex4.NaN.negate();
      complex5.NaN.abs();
      complex0.getArgument();
      complex0.INF.divide(0.0);
      complex0.isInfinite();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex6.abs();
      complex6.isInfinite();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.cos();
      complex10.getField();
      Complex complex11 = complex10.ZERO.cos();
      complex1.conjugate();
      complex7.pow(0.6480542736638855);
      Complex complex12 = complex8.atan();
      Complex complex13 = complex12.atan();
      complex13.I.subtract(0.0);
      complex13.atan();
      complex0.cos();
      complex13.cosh();
      complex7.tanh();
      complex0.abs();
      Complex complex14 = complex9.multiply((-1392));
      complex14.toString();
      complex8.sqrt1z();
      Object object0 = complex8.readResolve();
      complex11.equals(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-2116.2981218963123));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.add((-697.7439642273));
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex4.I.add((-697.7439642273));
      complex4.INF.getArgument();
      Complex complex6 = complex0.INF.sqrt1z();
      Complex complex7 = complex6.subtract(complex2);
      complex7.hashCode();
      complex6.NaN.hashCode();
      complex3.I.toString();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.atan();
      complex9.createComplex((-1.0), (-1.0));
      Complex complex10 = complex8.negate();
      Complex.valueOf((-1.0));
      complex0.isNaN();
      complex3.sin();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex0.ONE.divide(0.7853981633974483);
      complex12.abs();
      Complex complex13 = complex4.divide(complex11);
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex13.add(complex14);
      complex15.INF.exp();
      complex10.sin();
      complex14.equals(complex6);
      complex2.isInfinite();
      complex1.reciprocal();
      complex11.subtract(complex14);
      Complex complex16 = complex5.subtract(complex15);
      complex16.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.I.readResolve();
      complex0.nthRoot(4074);
      complex0.getField();
      Complex complex3 = complex0.subtract((-1712.27053790992));
      complex3.ONE.abs();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.NaN.pow(complex4);
      complex3.getArgument();
      Complex complex6 = complex3.ZERO.tan();
      Complex complex7 = complex1.I.sqrt1z();
      complex7.ZERO.toString();
      complex6.I.pow((-2.2555535676499395E-7));
      complex0.abs();
      Complex.valueOf(0.0);
      Complex complex8 = complex0.negate();
      complex1.I.multiply(1.0);
      complex3.add(1.0);
      Complex complex9 = complex8.NaN.divide(complex0);
      complex9.ONE.cos();
      complex3.isInfinite();
      complex2.nthRoot(4074);
      Complex.valueOf((double) 4074);
      complex6.getField();
      complex6.subtract(complex5);
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-1427.95553685046));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.log();
      complex3.ONE.createComplex((-1427.95553685046), (-1427.95553685046));
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.I.pow((-2061.0));
      complex6.ZERO.reciprocal();
      Complex.valueOf((-1427.95553685046), 0.0);
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex7.conjugate();
      complex8.ONE.abs();
      complex5.ONE.reciprocal();
      complex5.add((-2061.0));
      complex2.atan();
      Complex.valueOf(0.0, (-2061.0));
      complex5.createComplex(0.0, (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-381.6));
      complex0.I.readResolve();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.reciprocal();
      complex0.INF.subtract(complex1);
      int int0 = (-891);
      int int1 = 0;
      complex2.INF.cos();
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1558.78199);
      Complex complex1 = complex0.ZERO.subtract((-1204.1196541440786));
      Complex complex2 = complex0.NaN.cos();
      complex1.ONE.sqrt();
      complex0.log();
      complex0.sin();
      complex0.isNaN();
      complex2.multiply(105);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(340.58463);
      complex0.subtract(complex1);
      complex0.divide(1050.12032);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.add(153.1453);
      Complex complex3 = complex0.INF.reciprocal();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.INF.subtract(153.1453);
      complex2.I.pow(complex0);
      Complex complex6 = complex0.divide((-2.0));
      Complex complex7 = Complex.ZERO;
      complex3.ONE.multiply(complex7);
      Complex complex8 = complex2.NaN.tanh();
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex6.I.divide(complex5);
      Complex complex11 = complex0.NaN.atan();
      complex0.hashCode();
      complex0.toString();
      complex1.hashCode();
      complex6.ONE.getField();
      complex2.getField();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex12.pow(complex0);
      complex11.toString();
      Complex complex14 = Complex.valueOf(1803.670902, 4795.51);
      Complex.valueOf(0.0);
      complex14.NaN.divide(complex1);
      complex10.multiply(complex0);
      complex0.I.getField();
      complex12.add(153.1453);
      complex1.createComplex((-2.0), 4795.51);
      complex10.abs();
      complex12.acos();
      complex9.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      complex1.getArgument();
      complex0.I.divide(complex1);
      Complex complex2 = complex0.add(0.0);
      complex2.INF.toString();
      Complex complex3 = complex0.acos();
      complex3.NaN.tan();
      Complex complex4 = complex2.conjugate();
      Complex.valueOf(Double.NaN);
      Complex complex5 = complex2.pow(0.0);
      complex4.acos();
      complex2.isNaN();
      complex1.divide(Double.NaN);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      complex0.NaN.getArgument();
      complex0.getReal();
      complex1.asin();
      complex0.getArgument();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-756.8));
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.conjugate();
      complex0.divide(2033.03306769424);
      complex1.subtract(complex3);
      complex0.getReal();
      complex2.tan();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.subtract(0.0);
      complex0.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex1.NaN.atan();
      complex2.ONE.asin();
      Complex complex6 = Complex.valueOf((-9.83920263200211E-9), (-9.83920263200211E-9));
      complex6.ZERO.cos();
      Complex complex7 = complex3.add(0.0);
      complex0.ONE.nthRoot(1);
      complex2.conjugate();
      complex3.exp();
      complex6.tanh();
      complex5.I.sqrt();
      complex5.abs();
      complex7.sqrt();
      complex6.pow(0.0);
      complex5.hashCode();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2416.98867));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.tan();
      complex2.ONE.getArgument();
      Complex complex3 = complex2.multiply((-3341));
      complex0.asin();
      complex0.abs();
      complex3.getArgument();
      complex1.getArgument();
      Complex.valueOf((-2416.98867), (-1497.7511588384));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.divide((-1534.0));
      complex0.hashCode();
      complex1.readResolve();
      complex0.INF.asin();
      Complex complex2 = complex1.multiply((-486));
      Complex complex3 = complex2.NaN.negate();
      complex3.ONE.pow(5.205969622575851E-174);
      complex0.multiply(0);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex1.ONE.sqrt1z();
      try { 
        complex0.INF.nthRoot((-1290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,290
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(547.5634497281653);
      Complex complex1 = complex0.pow((-1468.7121414648));
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex1.atan();
      complex3.ZERO.sinh();
      complex3.INF.log();
      complex0.getArgument();
      Complex complex4 = complex3.sin();
      complex0.conjugate();
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex1.INF.acos();
      complex6.sin();
      Complex.valueOf(547.5634497281653, (-1468.7121414648));
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex1.acos();
      Complex complex9 = Complex.valueOf(756.7, Double.POSITIVE_INFINITY);
      complex9.ONE.divide(0.0);
      Complex complex10 = complex2.multiply(20.0);
      complex10.NaN.subtract(Double.POSITIVE_INFINITY);
      complex7.cosh();
      complex3.abs();
      complex8.sqrt();
      complex6.log();
      complex5.pow(complex2);
      complex0.cos();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.subtract(0.0);
      try { 
        complex0.nthRoot((-378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -378
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1090.7134633063), (-1090.7134633063));
      complex1.pow((-1090.7134633063));
      complex1.I.divide(complex0);
      complex0.INF.multiply(0);
      Complex complex2 = complex0.createComplex((-193.52), (-193.52));
      complex2.createComplex(8697.583072019499, 0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1714.801, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.I.sqrt();
      complex2.ZERO.getField();
      Complex complex3 = complex0.ONE.pow((-1671.1261265714));
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex4.INF.log();
      Complex complex5 = complex4.NaN.divide(complex2);
      Complex complex6 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.ONE.toString();
      Complex complex7 = Complex.valueOf(1714.801, 2076.7175122);
      Complex complex8 = complex0.pow(0.0);
      complex8.log();
      Complex complex9 = complex8.add(0.0);
      Complex complex10 = complex8.ONE.multiply(0.0);
      complex10.I.add(complex5);
      complex3.sinh();
      complex8.exp();
      Complex.valueOf(2076.7175122);
      complex7.reciprocal();
      complex0.multiply(1714.801);
      complex6.sin();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ONE.toString();
      complex2.I.abs();
      Complex complex3 = complex0.cos();
      complex2.NaN.hashCode();
      complex0.abs();
      complex2.reciprocal();
      complex2.getReal();
      complex2.ONE.pow(0.0);
      complex0.equals(complex2);
      complex2.negate();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1436.03799889787));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.cos();
      complex2.ONE.getArgument();
      complex0.atan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.createComplex(20.0, (-4374.600051717035));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = (Complex)complex1.INF.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.NaN.subtract(complex0);
      Complex complex6 = complex0.sqrt();
      complex0.getReal();
      complex0.I.sqrt();
      double double0 = complex6.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.ZERO.log();
      assertTrue(complex8.isInfinite());
      
      Complex complex9 = complex5.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      String string0 = complex7.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex10 = complex7.cos();
      Complex complex11 = Complex.valueOf(20.0, 0.0);
      complex11.ONE.multiply(complex5);
      complex0.I.sqrt();
      Complex complex12 = complex11.I.add(complex10);
      Complex complex13 = complex3.cosh();
      Complex complex14 = complex5.createComplex((-1245.0), 0.0);
      Complex complex15 = complex5.sin();
      Complex complex16 = complex13.I.createComplex(4617.276, 0.0);
      Complex complex17 = complex14.asin();
      Complex complex18 = complex13.multiply(37);
      assertTrue(complex18.equals((Object)complex9));
      
      complex2.isInfinite();
      Complex complex19 = complex17.pow(complex0);
      assertEquals(1.0, complex19.getReal(), 0.01);
      assertEquals(7.820037828329047, complex17.getImaginary(), 0.01);
      
      Complex complex20 = Complex.I;
      complex1.multiply(complex20);
      Complex complex21 = complex16.multiply(37);
      assertEquals(170839.212, complex21.getReal(), 0.01);
      
      Complex complex22 = complex12.sinh();
      assertSame(complex7, complex15);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertSame(complex22, complex3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = complex0.I.acos();
      complex1.ONE.createComplex((-302.4816268576), 1.0);
      Complex complex2 = complex1.pow(749.5692137776779);
      String string0 = complex2.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex2.I.pow(1.0);
      assertEquals(2.40419743359941E188, complex2.getImaginary(), 0.01);
      
      Complex complex3 = Complex.valueOf(1103.062320838597, 1.0);
      Complex.valueOf(178.686);
      Object object0 = complex3.I.readResolve();
      complex1.getField();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.exp();
      Complex complex6 = Complex.valueOf(749.5692137776779);
      complex4.negate();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.sqrt();
      assertTrue(complex8.isNaN());
      
      complex5.hashCode();
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertTrue(complex0.equals((Object)object0));
      
      Complex complex9 = complex3.negate();
      assertEquals((-1103.062320838597), complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      int int0 = 0;
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex0.NaN.log();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.ONE.asin();
      String string0 = complex3.toString();
      assertEquals("(1.5707963267948966, -0.0)", string0);
      
      Complex complex4 = complex0.exp();
      assertFalse(complex4.isInfinite());
      assertEquals(2.718281828459045, complex4.getReal(), 0.01);
      
      complex0.tanh();
      Complex complex5 = Complex.valueOf(1520.311, 318.1);
      Complex complex6 = complex5.ONE.sin();
      assertEquals(0.8414709848078965, complex6.getReal(), 0.01);
      
      Complex complex7 = Complex.valueOf(6.283185307179586);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex3.tanh();
      assertEquals(0.9171523356672743, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex3.multiply(6.283185307179586);
      double double0 = complex8.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex11 = complex10.ZERO.multiply((-1));
      assertEquals(-0.0, complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex1.divide(complex8);
      complex0.getField();
      complex2.isNaN();
      Complex complex13 = complex10.multiply(complex1);
      assertSame(complex13, complex12);
      assertNotSame(complex13, complex5);
  }
}
