/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:04:38 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.log();
      Complex complex2 = Complex.INF;
      complex2.isNaN();
      Complex complex3 = Complex.ZERO;
      complex0.subtract((-20.0));
      Complex complex4 = Complex.valueOf((-20.0), (-20.0));
      complex4.tanh();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-89.3559), (-1095.12536068771));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      complex1.ONE.toString();
      Complex complex3 = Complex.valueOf((-4.820065619207094E-9), (-1095.12536068771));
      Complex complex4 = complex3.ZERO.cos();
      complex4.cosh();
      Complex complex5 = complex0.ONE.subtract(complex2);
      complex2.NaN.negate();
      Complex complex6 = complex0.atan();
      complex1.readResolve();
      complex1.ZERO.toString();
      Complex complex7 = complex5.INF.sin();
      Complex complex8 = complex0.conjugate();
      complex8.INF.add((-1095.12536068771));
      complex7.I.conjugate();
      Complex complex9 = complex8.add(complex5);
      complex9.add(complex8);
      complex0.tan();
      complex3.add(complex5);
      complex8.negate();
      complex6.getField();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex6.add((-89.3559));
      complex11.negate();
      Complex complex12 = Complex.valueOf((-4.820065619207094E-9));
      complex12.ZERO.multiply((-1522.388324518952));
      complex7.cosh();
      Complex complex13 = complex5.cosh();
      complex2.INF.cos();
      complex1.getField();
      complex2.multiply(complex1);
      complex10.acos();
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2760.845390193341), Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1.0686474223616E13, 2047.29932612);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(9.959152908532152E194);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.isNaN();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.cos();
      complex0.nthRoot(1360);
      Complex complex4 = complex0.sqrt();
      complex1.getField();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.divide(1224.91306);
      complex6.cos();
      complex1.readResolve();
      Complex complex7 = complex2.tanh();
      complex7.NaN.asin();
      Complex complex8 = complex4.multiply(complex6);
      complex6.sqrt1z();
      complex3.nthRoot(368);
      Complex complex9 = complex2.log();
      complex9.ZERO.divide(complex0);
      complex4.divide(1224.91306);
      Complex complex10 = Complex.valueOf(1224.91306);
      complex10.asin();
      complex6.acos();
      complex3.cosh();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1.8784760208391767E259, (-3060.244333576706));
      complex0.log();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.INF;
      complex2.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-281.227344870711), Double.POSITIVE_INFINITY);
      complex1.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2444.8118, (-3907.05));
      Complex complex1 = new Complex(1.0, Double.NaN);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4275.330607861149), (-4275.330607861149));
      complex0.toString();
      complex0.log();
      Complex complex1 = Complex.I;
      complex0.isInfinite();
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.NaN;
      complex2.atan();
      complex1.readResolve();
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      complex0.pow(complex1);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1867.49810336));
      complex0.tan();
      Complex complex1 = Complex.NaN;
      complex1.multiply(complex0);
      Complex complex2 = Complex.valueOf(20.0, (-1867.49810336));
      complex1.isNaN();
      complex1.multiply(917);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.tanh();
      complex2.exp();
      Complex complex5 = complex3.sinh();
      complex4.equals(complex5);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4504.17);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      complex0.I.sin();
      Complex complex4 = complex3.ZERO.divide(835.5185658281686);
      Complex complex5 = complex3.INF.subtract((-3.718924074653624E-8));
      Complex complex6 = complex4.ONE.reciprocal();
      complex6.pow(complex1);
      complex0.INF.cos();
      Complex complex7 = complex1.pow(1.0);
      Complex complex8 = complex7.multiply((-3.718924074653624E-8));
      Complex complex9 = Complex.valueOf(6089.0, 835.5185658281686);
      complex9.ONE.sin();
      complex8.ONE.log();
      Complex complex10 = complex3.pow(1272.0179573120174);
      complex10.isInfinite();
      Complex complex11 = complex2.negate();
      complex10.add(complex11);
      complex2.toString();
      complex8.conjugate();
      complex3.log();
      complex4.atan();
      complex9.createComplex((-493.594821845), 1939.102705884);
      complex5.reciprocal();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.948446835865), (-594.9496));
      Complex complex1 = new Complex((-594.9496), 20.0);
      complex1.isNaN();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.add(complex2);
      complex3.subtract(1158.9799526362);
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.I;
      complex3.isNaN();
      Complex complex6 = Complex.valueOf(2876.673350212, 3232.2510305589963);
      complex6.pow(1986.7688255527);
      complex4.multiply(1158.9799526362);
      complex5.equals(complex2);
      Complex complex7 = new Complex(0.9950547536867305);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-835.5185658281686), (-835.5185658281686));
      complex0.ZERO.toString();
      Complex complex1 = complex0.log();
      complex0.isNaN();
      Complex complex2 = complex1.negate();
      complex0.add(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.subtract((-621.451446835865));
      Complex complex6 = complex5.pow(7.016736290557636E20);
      complex4.multiply(1986.7688255527);
      complex5.equals(complex6);
      Complex complex7 = new Complex((-1065.950327451), 2876.673350212);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      complex1.hashCode();
      complex1.subtract(1799.7);
      Complex complex2 = Complex.valueOf(1715.3539, 1799.7);
      complex2.isNaN();
      Complex complex3 = complex0.pow(3.740887543345041E-260);
      complex3.multiply(1715.3539);
      complex0.equals(complex2);
      Complex complex4 = new Complex(3.740887543345041E-260, 1799.7);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.948446835865), (-594.9496));
      Complex complex1 = complex0.exp();
      complex0.subtract(complex1);
      Complex complex2 = Complex.valueOf(1.6374611405314333E-7);
      complex1.abs();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = new Complex((-462.503), (-158.948446835865));
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex5.tanh();
      Complex.valueOf(1442.43);
      complex2.acos();
      complex4.multiply(complex6);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.reciprocal();
      complex8.getReal();
      try { 
        complex1.nthRoot((-588));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -588
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(Double.NaN);
      complex1.sqrt1z();
      complex2.hashCode();
      Complex.valueOf(Double.NaN);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.pow(complex2);
      complex1.nthRoot(957);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-353.177824491067), (-353.177824491067));
      Complex complex1 = complex0.NaN.multiply((-353.177824491067));
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex0.isNaN();
      Complex complex3 = complex0.add((-20.0));
      Complex complex4 = complex0.pow(3.3058299602856804E-8);
      complex2.INF.readResolve();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex5.NaN.pow(complex0);
      complex7.readResolve();
      complex3.isNaN();
      Complex complex8 = complex3.pow(complex4);
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex4.add(complex2);
      Complex complex12 = complex11.multiply(complex5);
      complex12.NaN.readResolve();
      Complex complex13 = complex2.multiply(complex3);
      complex13.INF.add(0.0);
      complex4.sinh();
      complex12.ZERO.multiply(2394);
      Complex.valueOf(0.0, (-2224.723));
      complex8.pow(complex12);
      complex3.asin();
      complex6.getImaginary();
      complex10.add(3.3058299602856804E-8);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(5.68750888749913E-12);
      complex1.INF.tanh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(5.68750888749913E-12);
      complex3.divide(complex0);
      Complex complex4 = Complex.I;
      complex4.getArgument();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.I;
      complex6.reciprocal();
      complex6.getReal();
      Complex complex7 = Complex.ZERO;
      try { 
        complex5.nthRoot((-2705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,705
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(918.530659159993, 918.530659159993);
      complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(3644.77185091);
      complex0.subtract(complex1);
      Complex complex2 = Complex.valueOf(3663.923652);
      complex2.abs();
      complex2.add(complex1);
      Complex complex3 = new Complex((-142.5296321230512), 3663.923652);
      Complex complex4 = new Complex((-6.437492120743254E-9));
      complex1.add(complex2);
      complex2.tanh();
      Complex.valueOf(0.008750664070248604);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.acos();
      complex6.multiply(complex1);
      Complex complex7 = Complex.ONE;
      complex0.reciprocal();
      complex3.getReal();
      Complex.valueOf(533.36, 3663.923652);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.cosh();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(0);
      complex1.NaN.hashCode();
      Complex complex3 = complex1.NaN.sqrt();
      complex3.ONE.subtract(complex1);
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = Complex.valueOf(4328.8662845);
      complex4.INF.getField();
      Complex complex6 = complex1.ONE.add(complex0);
      Complex complex7 = complex6.NaN.add(complex3);
      complex7.ZERO.multiply(0);
      Complex.valueOf(2193.3);
      complex7.getArgument();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex6.reciprocal();
      complex9.getReal();
      complex5.reciprocal();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, (-1743.714));
      Complex complex2 = Complex.valueOf((-361.85832404));
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.cos();
      complex2.getField();
      complex1.getImaginary();
      Complex complex5 = complex3.multiply(3175.3);
      complex0.sqrt();
      complex0.hashCode();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.pow((-1743.714));
      complex6.multiply((-1743.714));
      complex7.equals("");
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.log();
      complex2.hashCode();
      Complex complex3 = complex2.createComplex(Double.POSITIVE_INFINITY, 337.440222);
      complex3.NaN.getField();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.multiply(1234);
      complex2.atan();
      complex4.toString();
      complex4.pow(complex1);
      complex2.nthRoot(1);
      complex5.reciprocal();
      complex0.createComplex((-6.655106680680314E-8), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(918.530659159993, 918.530659159993);
      complex0.ZERO.toString();
      complex0.ZERO.sqrt1z();
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex1.createComplex(918.530659159993, 918.530659159993);
      Complex.valueOf((-2.738246981762776E132));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.multiply(1352);
      complex2.tan();
      Complex complex5 = complex0.negate();
      complex5.cosh();
      complex1.multiply((-2.738246981762776E132));
      complex5.sinh();
      complex5.cos();
      Complex complex6 = Complex.NaN;
      complex5.add(2578.6556546883626);
      Complex.valueOf(2.0, 5.68750888749913E-12);
      complex4.createComplex((-2.738246981762776E132), (-21.2468974));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.log();
      complex2.isNaN();
      Complex complex4 = complex1.negate();
      complex1.hashCode();
      Complex complex5 = complex0.add(complex4);
      complex0.subtract(2876.673350212);
      Complex complex6 = complex5.exp();
      Complex.valueOf(509.4044951, 3371.359353824483);
      complex4.log();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.cosh();
      complex8.getReal();
      complex3.tan();
      complex6.negate();
      Complex complex9 = complex0.cosh();
      complex8.multiply(509.4044951);
      Complex complex10 = complex9.sinh();
      complex2.cos();
      Complex complex11 = Complex.NaN;
      complex7.add(1896.49024);
      Complex.valueOf(4215.4022549298, 4215.4022549298);
      complex2.createComplex(2.0, Double.POSITIVE_INFINITY);
      complex9.equals(complex2);
      complex10.multiply(1236);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-594.9496), (-375.087688994784));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.valueOf(977.7731);
      complex2.abs();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = new Complex((-375.087688994784), 2.718281828459045);
      Complex complex7 = new Complex(1.997844754509471E-9);
      complex0.add(complex5);
      complex7.tanh();
      Complex.valueOf(2.718281828459045);
      complex1.acos();
      complex6.multiply(complex0);
      Complex.valueOf((-450.1947862562632), 2.718281828459045);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex4.reciprocal();
      complex9.getReal();
      Complex.valueOf((-594.9496), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-274.41149815918), (-274.41149815918));
      complex0.I.readResolve();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.INF.sqrt();
      complex0.ONE.hashCode();
      Complex complex3 = complex0.subtract((-274.41149815918));
      Complex complex4 = complex0.tanh();
      complex3.tan();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex5.INF.multiply(complex4);
      complex3.abs();
      Complex complex7 = complex0.log();
      complex7.toString();
      Complex complex8 = complex0.sin();
      complex8.ONE.multiply(2245.2761623016445);
      complex6.log();
      Complex complex9 = complex6.add((-274.41149815918));
      Complex complex10 = complex2.multiply(complex1);
      complex8.I.add(complex4);
      Complex complex11 = complex10.multiply(complex8);
      complex11.ONE.multiply((-274.41149815918));
      complex9.log();
      complex4.multiply(1073741187);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.cosh();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(0);
      complex1.NaN.hashCode();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex2.ONE.reciprocal();
      Complex complex6 = Complex.valueOf(4328.8662845);
      complex5.INF.getField();
      Complex complex7 = complex1.ONE.add(complex0);
      complex3.toString();
      complex5.tanh();
      complex6.multiply(0);
      complex4.add(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf((double) 0, Double.POSITIVE_INFINITY);
      complex3.multiply(complex8);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex9.add(93.19297);
      Complex complex11 = complex10.multiply((-1010580540));
      complex3.multiply((-5428));
      Complex complex12 = complex5.log();
      Complex complex13 = new Complex(Double.NaN);
      complex12.reciprocal();
      Complex complex14 = complex2.asin();
      Object object0 = new Object();
      Object object1 = complex11.readResolve();
      complex14.equals(object1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex1.ZERO.log();
      complex1.readResolve();
      complex2.isNaN();
      Complex complex3 = complex2.negate();
      complex1.hashCode();
      Complex complex4 = Complex.INF;
      complex4.subtract(complex2);
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2.522906629540626E-122));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(0.8364288087425561);
      Complex complex3 = complex1.multiply((-978103361));
      complex1.hashCode();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.valueOf((-7134.907641199));
      complex1.getField();
      Complex complex8 = complex5.add(complex7);
      Complex complex9 = complex3.add(complex4);
      Complex complex10 = complex6.multiply(0);
      complex2.sqrt();
      complex6.atan();
      Complex complex11 = complex5.subtract(4328.8662845);
      Complex complex12 = complex11.exp();
      Complex complex13 = Complex.INF;
      complex13.log();
      Complex complex14 = complex10.atan();
      complex1.cosh();
      complex9.getReal();
      complex5.tan();
      complex1.negate();
      complex6.cosh();
      complex12.multiply((-2.522906629540626E-122));
      complex14.sinh();
      Complex complex15 = complex8.cos();
      complex15.add((double) (-978103361));
      Complex.valueOf((-3051.76809389966), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex.valueOf(0.0, (-2006.679954650232));
      Complex complex2 = Complex.valueOf((-2006.679954650232), 0.0);
      complex2.toString();
      complex1.sqrt1z();
      complex2.log();
      complex0.hashCode();
      complex1.createComplex(6.283185307179586, (-2006.679954650232));
      Complex complex3 = Complex.valueOf((-399.876));
      Complex complex4 = complex2.multiply((-1));
      Complex complex5 = Complex.ZERO;
      complex0.toString();
      complex4.pow(complex3);
      try { 
        complex5.nthRoot((-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -70
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.abs();
      complex1.getReal();
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.NaN.tanh();
      complex2.getArgument();
      Complex complex6 = complex1.reciprocal();
      complex6.ONE.toString();
      complex2.divide(0.0);
      Complex complex7 = complex1.NaN.log();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex0.sqrt1z();
      complex8.NaN.acos();
      Complex complex10 = complex4.ZERO.subtract((double) 17);
      Complex complex11 = complex9.exp();
      Complex complex12 = complex3.log();
      complex11.atan();
      complex12.cosh();
      Complex complex13 = Complex.valueOf(1.5707963267948966);
      complex13.getReal();
      complex10.tan();
      Complex complex14 = complex5.negate();
      complex7.cosh();
      complex14.NaN.acos();
      complex4.multiply(1.5707963267948966);
      complex14.sinh();
      complex9.cos();
      complex8.add((-721.160629472));
      Complex.valueOf(0.0, (-2274.4935));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.conjugate();
      Complex complex1 = Complex.I;
      complex0.add(complex1);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-594.9496));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex.valueOf((-594.9496));
      complex2.ONE.abs();
      complex1.NaN.add(complex0);
      Complex complex3 = new Complex((-594.9496), 1.0);
      Complex complex4 = new Complex((-1.0));
      Complex complex5 = complex3.ZERO.add(complex4);
      complex0.tanh();
      Complex.valueOf(1.0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex1.ZERO.multiply(complex6);
      Complex.valueOf((-450.1947862562632), (-594.9496));
      Complex complex8 = Complex.ONE;
      complex5.reciprocal();
      complex7.getReal();
      Complex.valueOf(1.0, 638.8007354);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-594.9496));
      complex0.I.exp();
      Complex complex1 = complex0.multiply((-928426670));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.tanh();
      complex4.getArgument();
      complex0.reciprocal();
      complex0.toString();
      Complex complex5 = complex1.divide(1.5707963267948966);
      Complex complex6 = Complex.I;
      complex6.log();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex8.subtract(1.5707963267948966);
      complex9.exp();
      complex7.log();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex1.cosh();
      complex12.getReal();
      Complex complex13 = complex11.tan();
      complex6.negate();
      Complex complex14 = complex4.cosh();
      complex14.ZERO.hashCode();
      complex6.multiply(0.0);
      Complex complex15 = complex6.sinh();
      complex15.cos();
      complex13.add(0.0);
      Complex.valueOf((-3.015709444206057E-226), (-272.279923117));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = new Complex(1436.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex1.log();
      Complex complex3 = Complex.valueOf(2.8926683313922764E-176, 672.836604167205);
      complex3.createComplex(2.8926683313922764E-176, 672.836604167205);
      Complex.valueOf(4531.331342);
      Complex complex4 = complex1.multiply(413);
      complex0.multiply(2237);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.negate();
      complex6.cosh();
      complex1.toString();
      Complex complex7 = Complex.ONE;
      complex2.pow(complex7);
      complex3.nthRoot(1);
      Complex.valueOf((double) 1, 4531.331342);
      complex4.divide(0.6480542736638855);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(443.47167769552, 443.47167769552);
      Complex complex1 = complex0.INF.multiply(3213);
      complex1.INF.atan();
      Complex complex2 = complex0.ZERO.createComplex(443.47167769552, 443.47167769552);
      Complex complex3 = complex0.ZERO.reciprocal();
      complex0.I.getArgument();
      complex2.NaN.cosh();
      complex0.getField();
      complex0.log();
      Complex complex4 = complex2.conjugate();
      complex4.NaN.getArgument();
      complex3.pow((-910.8768324555745));
      Complex complex5 = complex2.sin();
      complex5.ONE.createComplex(1.5707963267948966, 3.3212950284273017E149);
      complex2.exp();
      complex5.multiply(complex4);
      Complex.valueOf(443.47167769552, (double) 3213);
      complex5.readResolve();
      complex2.getImaginary();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-644.240950559));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.I.divide((-644.240950559));
      complex3.tanh();
      complex1.ZERO.asin();
      Complex complex4 = complex2.ONE.conjugate();
      complex1.NaN.pow((-1973.352409478538));
      complex4.ONE.divide((-1973.352409478538));
      complex0.toString();
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex0.NaN.multiply(1123);
      complex0.add((-644.240950559));
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex1.sin();
      complex8.add((-1973.352409478538));
      Complex complex9 = complex6.multiply(1123);
      Complex complex10 = complex4.multiply(1123);
      complex9.log();
      complex4.equals(complex10);
      complex5.reciprocal();
      complex3.asin();
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(0);
      complex2.NaN.hashCode();
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex3.ONE.reciprocal();
      Complex.valueOf(4328.8662845);
      complex6.INF.getField();
      Complex complex7 = complex2.ONE.add(complex0);
      Complex complex8 = complex7.NaN.add(complex4);
      complex8.ZERO.multiply(0);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.NaN.atan();
      complex8.subtract(Double.POSITIVE_INFINITY);
      Complex complex11 = complex5.exp();
      Complex complex12 = complex10.log();
      Complex complex13 = complex11.atan();
      complex12.cosh();
      complex10.getReal();
      Complex complex14 = complex3.tan();
      complex14.negate();
      complex1.cosh();
      complex13.multiply(Double.NaN);
      complex13.sinh();
      complex13.cos();
      complex12.add(194.2485235);
      Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1170.051148681);
      Complex complex1 = complex0.log();
      complex0.getReal();
      Complex complex2 = complex0.divide(complex0);
      Complex complex3 = new Complex(1.0227576096874604);
      complex3.subtract((-2504.2062));
      Complex complex4 = complex2.divide(complex0);
      complex0.getField();
      Complex.valueOf(1170.051148681, (-1.0));
      complex1.abs();
      complex2.divide(complex0);
      complex4.abs();
      complex3.pow((-1920.7567871303795));
      Complex complex5 = Complex.ZERO;
      complex5.multiply((-1.0));
      // Undeclared exception!
      complex4.nthRoot(2136484928);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(918.530659159993, 918.530659159993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.log();
      complex1.I.toString();
      complex2.hashCode();
      Complex.valueOf(0.0);
      Complex complex3 = complex1.multiply(1930);
      complex2.atan();
      complex3.toString();
      complex3.pow(complex1);
      try { 
        complex0.nthRoot((-3005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,005
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.cosh();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(0);
      complex1.NaN.hashCode();
      Complex complex3 = complex1.NaN.sqrt();
      complex3.ONE.subtract(complex1);
      Complex complex4 = complex2.ONE.reciprocal();
      Complex.valueOf(4328.8662845);
      complex4.INF.getField();
      Complex complex5 = complex1.ONE.add(complex0);
      Complex complex6 = complex5.NaN.add(complex3);
      complex6.ZERO.multiply(0);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.NaN.atan();
      complex8.INF.subtract(complex3);
      Complex complex9 = Complex.NaN;
      complex8.INF.multiply(complex9);
      Complex complex10 = complex1.tan();
      complex2.conjugate();
      Complex complex11 = new Complex(3015.04, Double.POSITIVE_INFINITY);
      complex11.hashCode();
      complex10.tan();
      complex2.pow(6.283185307179586);
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.multiply(0.8414709848078965);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.cos();
      complex2.I.getField();
      complex0.getImaginary();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.multiply(3175.3);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex3.divide(1469.2147);
      complex1.readResolve();
      complex1.hashCode();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex6.cos();
      complex0.conjugate();
      complex9.cosh();
      Complex complex10 = new Complex(20.0, 0.6466736793518066);
      Complex complex11 = complex10.sqrt();
      complex11.ZERO.multiply(3175.3);
      complex10.readResolve();
      complex9.sinh();
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(0);
      complex2.NaN.hashCode();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.subtract(1564.516688);
      double double1 = 5137.181442746;
      complex1.divide(complex3);
      complex2.getField();
      Complex.valueOf(1564.516688, 1170.051148681);
      complex1.abs();
      complex5.divide(complex4);
      complex4.abs();
      Complex complex6 = new Complex(194.2485235);
      complex6.pow(1945.6667900533);
      Complex complex7 = Complex.valueOf((double) 0);
      complex7.multiply(0.0);
      int int0 = (-234);
      try { 
        complex6.nthRoot((-234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -234
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1170.051148681);
      Complex complex1 = complex0.ONE.log();
      complex0.getReal();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.valueOf(4328.8662845);
      complex2.getField();
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex1.multiply((-826));
      complex8.INF.add((-4194.0));
      Complex complex9 = complex6.sqrt();
      complex4.atan();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.subtract(complex3);
      Complex complex12 = Complex.NaN;
      complex11.multiply(complex5);
      complex7.tan();
      complex6.conjugate();
      complex9.divide(2234.894039414942);
      complex1.readResolve();
      complex5.hashCode();
      complex1.tan();
      complex1.cos();
      complex4.conjugate();
      Complex complex13 = complex6.cosh();
      complex6.sqrt();
      complex13.readResolve();
      complex5.sinh();
      complex2.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.getReal();
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.tanh();
      complex4.getArgument();
      Complex complex5 = complex1.reciprocal();
      complex0.toString();
      Complex complex6 = complex2.divide(1698.34636189);
      Complex complex7 = complex3.log();
      complex6.tanh();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.acos();
      complex6.subtract(918.530659159993);
      complex9.exp();
      Complex complex10 = complex8.log();
      complex2.atan();
      complex9.cosh();
      complex0.getReal();
      complex3.tan();
      Complex complex11 = Complex.ONE;
      complex11.negate();
      complex5.cosh();
      complex11.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.INF;
      complex12.sinh();
      complex10.cos();
      Complex complex13 = Complex.INF;
      complex13.add(Double.NaN);
      Complex.valueOf((-1985.7688255527), 1985.7688255527);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-594.9496));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = Complex.valueOf((-594.9496));
      complex2.ONE.abs();
      Complex complex4 = complex1.NaN.add(complex0);
      complex1.cosh();
      Complex complex5 = new Complex((-1.0));
      Complex.valueOf((-1.0), 0.0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex7.ONE.createComplex((-1.0), 4.1218749988429474E239);
      Complex complex9 = complex0.acos();
      complex1.ZERO.multiply(complex9);
      Complex.valueOf((-450.1947862562632), (-594.9496));
      Complex complex10 = complex1.pow(0.0);
      Complex complex11 = complex0.INF.add(complex7);
      Complex complex12 = Complex.valueOf((-445.9747085));
      complex12.toString();
      Complex complex13 = new Complex(93.0765, (-2818.7333428352));
      complex13.atan();
      complex2.isInfinite();
      Complex.valueOf((-1932.7570674181));
      complex11.readResolve();
      complex4.isNaN();
      complex13.sinh();
      complex6.subtract(93.0765);
      complex10.tan();
      complex5.add(93.0765);
      complex8.getField();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-594.9496));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex.valueOf((-594.9496));
      complex2.ONE.abs();
      complex1.NaN.add(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = new Complex((-1.0));
      complex3.ZERO.add(complex4);
      complex0.tanh();
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex5.ONE.createComplex((-1.0), 4.1218749988429474E239);
      Complex complex7 = complex0.acos();
      complex1.ZERO.multiply(complex7);
      Complex complex8 = Complex.valueOf((-450.1947862562632), (-594.9496));
      complex1.pow(0.0);
      complex0.INF.add(complex5);
      complex0.toString();
      complex4.atan();
      complex5.isInfinite();
      Complex.valueOf((-0.4161468365471424));
      Complex complex9 = Complex.NaN;
      complex9.readResolve();
      complex7.isNaN();
      complex8.sinh();
      complex0.subtract(1.0);
      complex5.tan();
      complex6.add((-450.1947862562632));
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.ZERO.log();
      complex0.readResolve();
      complex0.isNaN();
      Complex complex4 = complex3.negate();
      complex0.I.hashCode();
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex5.INF.add(complex0);
      complex6.I.subtract(2876.673350212);
      complex6.ONE.subtract(1986.7688255527);
      complex3.isNaN();
      Complex complex7 = Complex.ZERO;
      complex7.nthRoot(246);
      Complex complex8 = complex1.atan();
      Complex complex9 = Complex.ONE;
      complex9.sinh();
      Complex complex10 = complex2.createComplex((-1985.7688255527), 246);
      complex10.equals(complex8);
      complex6.getReal();
      Complex complex11 = Complex.ZERO;
      complex11.multiply(2876.673350212);
      Complex complex12 = Complex.valueOf((double) 246);
      complex12.negate();
      Complex.valueOf(4163.620528788, (-5.598276199126451E264));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(0);
      complex2.NaN.hashCode();
      Complex complex4 = complex2.NaN.sqrt();
      complex4.ONE.subtract(complex2);
      Complex complex5 = complex3.ONE.reciprocal();
      Complex complex6 = Complex.valueOf(4328.8662845);
      complex5.INF.getField();
      Complex complex7 = new Complex(0);
      Complex complex8 = complex7.NaN.add(complex4);
      Complex complex9 = complex8.ZERO.multiply(0);
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex10.NaN.atan();
      complex11.INF.subtract(complex4);
      Complex complex12 = Complex.NaN;
      complex11.INF.multiply(complex12);
      Complex complex13 = complex2.tan();
      complex3.conjugate();
      Complex complex14 = complex13.divide(Double.POSITIVE_INFINITY);
      complex14.I.readResolve();
      complex2.ONE.hashCode();
      complex14.ONE.tan();
      Complex complex15 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex16 = complex15.NaN.conjugate();
      complex2.cosh();
      complex15.sqrt();
      complex9.readResolve();
      complex6.sinh();
      complex16.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 918.530659159993;
      Complex complex0 = Complex.valueOf(918.530659159993, 918.530659159993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.I.log();
      complex0.hashCode();
      Complex complex2 = complex0.createComplex(918.530659159993, 918.530659159993);
      complex2.exp();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.asin();
      complex0.add(complex2);
      complex1.add(334.23);
      int int0 = (-2541);
      try { 
        complex3.nthRoot((-2541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,541
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.readResolve();
      complex0.I.getField();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = Complex.ZERO;
      complex4.NaN.multiply(complex3);
      complex4.NaN.readResolve();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex1.divide(complex4);
      complex6.ZERO.pow(complex2);
      Complex complex7 = complex6.ONE.reciprocal();
      Complex complex8 = complex3.multiply(1164);
      Complex complex9 = complex2.exp();
      Complex complex10 = Complex.valueOf((double) 1164);
      complex10.getArgument();
      Complex complex11 = complex9.asin();
      complex9.INF.add(complex4);
      Complex complex12 = complex2.add(334.23);
      complex11.nthRoot(1164);
      complex8.pow(complex12);
      Complex complex13 = complex0.multiply(complex4);
      Complex complex14 = Complex.ONE;
      complex8.NaN.cosh();
      complex13.equals(complex14);
      complex2.pow(complex8);
      complex8.nthRoot(1164);
      complex12.asin();
      complex4.reciprocal();
      complex7.getReal();
      Complex complex15 = complex12.sqrt1z();
      complex15.pow(complex5);
      Complex.valueOf((-2026.533306426386), 0.0);
      complex10.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-594.9496));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.log();
      complex0.readResolve();
      complex1.isNaN();
      Complex complex3 = complex2.negate();
      complex0.hashCode();
      complex2.subtract(complex3);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex0.subtract((-594.9496));
      complex5.subtract(2876.673350212);
      Complex complex6 = Complex.valueOf((-553.46));
      complex6.isNaN();
      complex5.multiply(1142);
      complex4.getArgument();
      complex3.tanh();
      Complex complex7 = new Complex((-2174716.222981577));
      complex2.add(complex7);
      complex0.exp();
      Complex complex8 = complex5.pow((-553.46));
      complex3.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1170.051148681);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.ONE;
      complex2.toString();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.log();
      complex4.hashCode();
      complex4.createComplex((-1.0), 3789.0);
      Complex.valueOf(1.7622455019548098E-8);
      complex3.multiply((-113));
      complex4.atan();
      complex1.toString();
      complex3.pow(complex0);
      complex0.nthRoot(686);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(0);
      complex2.NaN.hashCode();
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex3.ONE.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.INF.getField();
      Complex complex7 = complex2.ONE.add(complex0);
      Complex complex8 = complex7.NaN.add(complex4);
      complex8.ZERO.multiply(0);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.NaN.atan();
      complex10.INF.subtract(complex4);
      Complex complex11 = Complex.NaN;
      complex10.INF.multiply(complex11);
      complex11.pow(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.ONE;
      complex12.multiply((-251.61919));
      Complex complex13 = new Complex(0.41421356237309515, 0);
      complex13.nthRoot(730);
      Complex complex14 = Complex.ZERO;
      complex14.atan();
      Complex complex15 = complex10.sinh();
      complex4.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.getReal();
      complex5.multiply(4514.360700392707);
      Complex complex16 = Complex.valueOf((double) (-234));
      complex16.negate();
      complex15.log();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1170.051148681);
      Complex complex1 = complex0.ONE.log();
      complex0.getReal();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.I.subtract(0.0);
      Complex complex4 = complex1.divide(complex0);
      complex4.I.getField();
      Complex complex5 = Complex.valueOf(2.0, 5137.181442746);
      complex5.INF.abs();
      Complex complex6 = complex5.NaN.divide(complex0);
      complex6.I.abs();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex3.conjugate();
      complex1.divide(1.1779047733143515);
      complex8.readResolve();
      complex0.hashCode();
      complex3.tan();
      complex5.cos();
      Complex complex9 = Complex.INF;
      complex9.conjugate();
      complex2.cosh();
      complex8.sqrt();
      complex1.readResolve();
      Complex complex10 = complex7.sinh();
      complex10.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.isNaN();
      Complex complex4 = complex2.negate();
      complex0.I.hashCode();
      Complex complex5 = complex4.subtract(complex1);
      complex3.createComplex((-887.60836015725), (-887.60836015725));
      Object object0 = new Object();
      double double0 = 133.119563;
      Complex complex6 = complex2.createComplex(133.119563, 3.7944631664558904E-85);
      Complex complex7 = new Complex(3.7944631664558904E-85);
      complex7.equals("");
      complex3.toString();
      complex0.isInfinite();
      complex2.reciprocal();
      complex1.cosh();
      complex6.sin();
      complex5.conjugate();
      Complex.valueOf(2000.0);
      try { 
        complex3.nthRoot((-1106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,106
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.multiply(1);
      complex1.multiply(3.137374584307575E254);
      complex7.INF.getArgument();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex7.NaN.pow(complex8);
      complex10.ZERO.add(3.137374584307575E254);
      Complex complex11 = Complex.valueOf((-7315.423721119717));
      Complex complex12 = Complex.ONE;
      complex11.ZERO.subtract(complex2);
      complex12.I.add(0.0);
      complex11.multiply(complex12);
      Complex complex13 = Complex.valueOf((-7315.423721119717), 0.0);
      Complex complex14 = complex13.NaN.multiply(complex7);
      complex13.getArgument();
      complex9.getField();
      complex8.cos();
      complex14.multiply(complex0);
      Complex complex15 = complex2.cos();
      Complex complex16 = complex14.sinh();
      complex8.exp();
      complex5.equals((Object) null);
      complex16.multiply(0.0);
      complex15.divide((-41.02048));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.exp();
      Complex complex1 = complex0.ZERO.multiply(1.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(complex2);
      complex3.abs();
      Complex complex4 = complex0.divide(complex3);
      complex4.I.negate();
      complex0.conjugate();
      complex0.multiply(37);
      Complex complex5 = complex1.multiply(1.0);
      complex3.cosh();
      complex5.asin();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(Double.NaN);
      complex2.toString();
      Complex complex3 = complex2.ONE.multiply(0);
      complex3.divide(complex1);
      complex1.toString();
      complex2.NaN.cos();
      complex2.getImaginary();
      Complex complex4 = complex1.ONE.createComplex(Double.NaN, 1246.535);
      complex4.I.readResolve();
      Complex complex5 = Complex.valueOf((-1.5483926773679628E93));
      complex3.readResolve();
      complex0.NaN.multiply((-339));
      complex2.log();
      Complex.valueOf((-766.0), 475.7048641062);
      Complex complex6 = new Complex((-508.179674));
      Complex complex7 = complex4.add(complex6);
      complex7.I.asin();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(671.3, 1619.77969833277);
      Complex complex1 = Complex.valueOf(671.3);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.pow(complex1);
      complex0.ZERO.sinh();
      complex3.ONE.getField();
      complex0.toString();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.add(0.42225050926208496);
      complex0.readResolve();
      complex4.getArgument();
      Complex.valueOf(0.42225050926208496, 0.42225050926208496);
      complex2.INF.getArgument();
      Complex complex6 = complex2.subtract(complex1);
      complex4.INF.atan();
      Complex complex7 = complex0.sqrt1z();
      complex7.ONE.pow(0.42225050926208496);
      complex4.abs();
      complex5.multiply(complex6);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-745.90733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.sinh();
      complex0.getArgument();
      complex0.getArgument();
      complex1.getField();
      try { 
        complex2.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex1.multiply(1.4624861244004054E-31);
      Complex complex6 = complex0.ONE.exp();
      Complex complex7 = complex5.multiply(1.4624861244004054E-31);
      complex7.abs();
      Complex complex8 = complex1.I.pow(complex7);
      complex8.INF.pow(complex3);
      complex1.log();
      complex2.add(complex3);
      complex3.ONE.acos();
      complex0.tan();
      complex4.sin();
      complex6.toString();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.readResolve();
      complex0.I.getField();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = Complex.ZERO;
      complex4.NaN.multiply(complex3);
      complex4.NaN.readResolve();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = complex6.ONE.reciprocal();
      Complex complex8 = complex3.multiply(1164);
      Complex complex9 = complex2.exp();
      complex3.ONE.abs();
      Complex complex10 = Complex.valueOf((double) 1164);
      complex3.ONE.exp();
      complex10.getArgument();
      Complex complex11 = complex9.asin();
      complex9.INF.add(complex4);
      Complex complex12 = complex2.add(334.23);
      complex11.nthRoot(1164);
      complex8.pow(complex12);
      Complex complex13 = complex0.multiply(complex4);
      Complex complex14 = Complex.ONE;
      complex8.NaN.cosh();
      complex13.equals(complex14);
      complex2.pow(complex8);
      complex8.nthRoot(1164);
      complex12.asin();
      complex4.reciprocal();
      complex7.getReal();
      Complex complex15 = complex12.sqrt1z();
      complex15.pow(complex5);
      Complex.valueOf((-2026.533306426386), 0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(2115.464990547);
      complex0.ONE.abs();
      Complex complex1 = Complex.valueOf(2115.464990547);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply((-737));
      complex3.ONE.atan();
      complex3.INF.getArgument();
      Complex complex4 = complex0.sin();
      complex2.isNaN();
      complex1.tanh();
      Complex complex5 = complex0.sin();
      complex4.subtract(1.0);
      complex0.getArgument();
      Complex complex6 = complex5.subtract(0.0);
      complex6.ZERO.getArgument();
      Complex.valueOf((double) (-737), 2115.464990547);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.abs();
      complex1.getReal();
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.reciprocal();
      complex4.NaN.tanh();
      complex2.getArgument();
      Complex complex5 = complex1.reciprocal();
      complex5.ONE.toString();
      complex2.divide(0.0);
      complex1.NaN.log();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.sqrt1z();
      complex6.NaN.acos();
      complex4.ZERO.subtract((double) 17);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex2.log();
      complex8.INF.atan();
      complex7.ONE.cosh();
      complex6.getReal();
      complex8.tan();
      complex0.negate();
      Complex complex10 = complex4.cosh();
      complex4.multiply(0.0);
      complex10.sinh();
      complex7.cos();
      complex9.add(0.0);
      Complex.valueOf(4305.0, 0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.ZERO.log();
      complex0.readResolve();
      complex0.isNaN();
      Complex complex4 = complex3.negate();
      complex0.I.hashCode();
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex5.INF.add(complex0);
      Complex complex7 = complex6.I.subtract(2876.673350212);
      Complex complex8 = complex6.ONE.subtract(1986.7688255527);
      complex3.isNaN();
      complex0.multiply(2790);
      complex1.getArgument();
      complex3.tanh();
      complex3.add(complex2);
      complex7.exp();
      complex8.pow(2876.673350212);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(478.882269339);
      complex0.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.reciprocal();
      complex0.I.abs();
      Complex complex4 = complex3.exp();
      complex4.ONE.getField();
      Complex complex5 = Complex.valueOf((-780.436182347), (-780.436182347));
      Complex complex6 = complex1.NaN.log();
      Complex complex7 = complex4.ZERO.divide(478.882269339);
      complex7.INF.getField();
      complex2.isNaN();
      complex3.hashCode();
      Complex complex8 = complex5.NaN.sqrt1z();
      complex3.INF.readResolve();
      Complex complex9 = complex1.sqrt();
      complex9.ZERO.exp();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex3.multiply(complex10);
      Complex complex12 = complex11.NaN.cos();
      complex2.NaN.getArgument();
      Complex complex13 = complex11.asin();
      Complex complex14 = complex13.ONE.conjugate();
      complex14.ONE.divide(complex12);
      complex13.ONE.subtract(0.0);
      Complex complex15 = complex3.subtract(478.882269339);
      complex5.hashCode();
      complex8.multiply(0);
      complex8.tanh();
      Complex complex16 = complex7.multiply(1);
      complex6.log();
      complex16.equals(complex15);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.equals((Object) null);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply((-1377.09841146919));
      Complex complex3 = complex2.acos();
      complex3.I.subtract(complex2);
      Complex complex4 = complex3.sqrt();
      complex3.ONE.subtract((-1377.09841146919));
      complex1.equals((Object) null);
      Complex complex5 = complex2.multiply(complex1);
      complex3.NaN.add((-1528.0200124389798));
      complex1.isInfinite();
      complex3.cos();
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex1.ONE.subtract(complex4);
      complex4.multiply(1896);
      complex5.ONE.multiply(complex3);
      Complex complex8 = complex5.multiply((-452.79));
      Complex complex9 = complex1.sqrt1z();
      complex4.sqrt();
      Complex.valueOf((-452.79));
      complex8.hashCode();
      complex5.conjugate();
      complex1.acos();
      complex3.acos();
      complex7.getField();
      complex9.readResolve();
      Complex complex10 = Complex.valueOf((-452.79), 0.0);
      complex10.sinh();
      complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.exp();
      complex0.ZERO.hashCode();
      complex3.pow(complex1);
      complex3.ZERO.sin();
      Complex complex4 = complex3.NaN.sin();
      complex4.ONE.getArgument();
      Complex complex5 = complex2.subtract(3095.31561072333);
      Complex complex6 = complex5.INF.cosh();
      complex6.I.multiply(complex2);
      complex5.INF.subtract(1851.9691753);
      Complex complex7 = complex2.exp();
      complex3.toString();
      complex0.isNaN();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-2708.167752266), 0.0);
      Complex complex1 = complex0.I.multiply((-2708.167752266));
      complex1.ONE.exp();
      Complex complex2 = complex1.INF.multiply(1839);
      Complex complex3 = complex1.ONE.add(complex0);
      complex3.I.conjugate();
      complex0.hashCode();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex4.multiply(0.0);
      complex6.I.cos();
      complex4.isInfinite();
      complex5.getField();
      complex5.nthRoot(1594);
      complex5.subtract((-6.764191876212205E-9));
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex0.INF.log();
      Complex complex9 = complex8.ZERO.reciprocal();
      complex7.NaN.subtract(complex3);
      complex2.asin();
      complex8.getField();
      complex9.createComplex(0.0, (-6.764191876212205E-9));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(3561.579101361078);
      Complex complex1 = complex0.I.divide(3561.579101361078);
      complex1.I.pow(3561.579101361078);
      Complex complex2 = complex0.pow((-114.3784064645));
      complex2.add(3561.579101361078);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.tanh();
      complex2.ZERO.sinh();
      Complex complex3 = complex0.sin();
      complex0.ZERO.cos();
      complex3.getArgument();
      Complex complex4 = complex3.INF.tanh();
      complex4.NaN.tan();
      int int0 = (-586);
      complex1.INF.multiply((-586));
      Complex complex5 = complex4.asin();
      complex0.tanh();
      try { 
        complex5.I.nthRoot((-3621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,621
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.ZERO.tanh();
      Complex complex1 = complex0.NaN.subtract(881.212397);
      Complex complex2 = complex0.INF.negate();
      complex0.getReal();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.cosh();
      complex4.ONE.getArgument();
      Complex complex5 = complex1.exp();
      complex4.pow(59.49634793363234);
      complex5.add(387.0);
      Complex complex6 = new Complex(772.1725);
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sinh();
      complex0.INF.pow(complex1);
      Complex complex3 = complex0.multiply((-453));
      Complex complex4 = complex3.divide((double) (-453));
      complex4.ZERO.subtract((-806.0));
      complex4.readResolve();
      complex0.getImaginary();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.I.multiply(1491);
      complex2.hashCode();
      complex5.readResolve();
      Complex complex6 = Complex.valueOf((-1822.0));
      complex6.ZERO.sinh();
      complex0.multiply((-453));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.ZERO.multiply(1.0);
      complex1.ZERO.log();
      Complex complex2 = Complex.valueOf((-2408.40349120682), (-2408.40349120682));
      complex2.INF.negate();
      complex2.negate();
      complex2.negate();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.asin();
      Complex complex4 = complex1.NaN.divide((-1322.014));
      complex0.getReal();
      complex0.toString();
      complex4.getImaginary();
      complex3.nthRoot(5);
      complex1.sin();
      complex1.toString();
      complex2.abs();
      complex4.readResolve();
      complex1.divide(2364.1);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2894.4262), (-2894.4262));
      complex0.subtract((-2894.4262));
      complex0.ONE.acos();
      complex0.getArgument();
      complex0.createComplex(1116.1872468885238, (-2.356194490192345));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-1143.4826098091862), (-1143.4826098091862));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex1.ZERO.getArgument();
      complex1.ONE.getField();
      complex0.NaN.getArgument();
      complex0.I.getField();
      complex2.I.acos();
      complex0.toString();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex2.subtract(0.0);
      complex4.tanh();
      complex4.multiply(0.0);
      complex4.getField();
      complex1.getImaginary();
      complex1.log();
      complex3.sin();
      complex0.subtract(complex2);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.ZERO.tanh();
      complex0.readResolve();
      complex0.getField();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double double0 = 1170.051148681;
      Complex complex0 = new Complex((-1.0), 1170.051148681);
      Complex complex1 = complex0.ONE.log();
      complex0.getReal();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.I.subtract(0.0);
      Complex complex3 = complex1.divide(complex0);
      complex3.I.getField();
      Complex complex4 = Complex.valueOf(2.0, 5137.181442746);
      complex4.INF.abs();
      Complex complex5 = complex4.NaN.divide(complex0);
      complex5.I.abs();
      Complex complex6 = complex1.pow((-1.0));
      Complex complex7 = complex6.multiply((-1.0));
      try { 
        complex7.nthRoot((-234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -234
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2255.643, 6.283185307179586);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.createComplex(2255.643, 6.283185307179586);
      complex2.I.createComplex(2255.643, 1173.243);
      complex2.ZERO.pow(complex1);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf(2255.643, 2255.643);
      Complex complex4 = complex3.INF.asin();
      complex4.INF.createComplex((-45.7708899011411), 0.0);
      Complex complex5 = complex0.ONE.conjugate();
      Complex complex6 = complex5.I.multiply(1173.243);
      complex6.INF.sqrt1z();
      complex3.nthRoot(3717);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.divide((-89.3559));
      Complex complex9 = Complex.ONE;
      complex2.I.toString();
      complex8.multiply((-144));
      complex9.ZERO.cos();
      complex8.add(complex9);
      Complex complex10 = complex0.acos();
      complex10.subtract((-1527.827044567142));
      complex10.NaN.exp();
      complex1.hashCode();
      complex2.tanh();
      complex7.ONE.asin();
      Complex complex11 = complex7.multiply(0.6011518239974976);
      complex11.isInfinite();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ONE.pow((-2122.9442));
      complex2.INF.getField();
      Complex complex3 = complex0.INF.cos();
      complex0.ONE.toString();
      Complex complex4 = complex2.INF.divide(complex0);
      Complex complex5 = complex4.I.subtract(65.47693144164);
      complex0.readResolve();
      complex0.isNaN();
      Complex complex6 = complex3.exp();
      complex0.getImaginary();
      complex6.getReal();
      complex3.abs();
      Complex complex7 = complex2.subtract(Double.NaN);
      Complex complex8 = complex7.I.sqrt1z();
      complex7.INF.subtract(complex3);
      complex3.NaN.add((-3.517594695450786E-279));
      Complex complex9 = complex2.negate();
      Complex complex10 = complex5.acos();
      complex4.getField();
      complex9.subtract(Double.NaN);
      Complex complex11 = complex10.multiply(0.0);
      complex11.cos();
      complex3.reciprocal();
      complex11.getImaginary();
      complex8.sinh();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-483.54171775));
      complex1.sin();
      complex0.createComplex((-1127.6059035), 0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.add(complex1);
      complex2.INF.cos();
      complex2.I.getField();
      complex0.getImaginary();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.multiply(3175.3);
      Complex complex5 = complex4.I.sqrt();
      complex4.NaN.hashCode();
      complex3.tan();
      complex0.pow(0.0);
      complex5.multiply(3175.3);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double double0 = (-2323.815961064641);
      Complex complex0 = Complex.valueOf((-2323.815961064641), (-2323.815961064641));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-3671.0), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex0.toString();
      complex0.I.acos();
      complex0.getField();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex1.ONE.add((-2318.4273459));
      Complex complex5 = complex3.NaN.multiply((-1076));
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex1.cosh();
      complex2.getField();
      complex7.getField();
      Complex complex8 = complex6.cosh();
      complex8.INF.reciprocal();
      complex5.cosh();
      Complex complex9 = complex7.multiply(1522);
      complex4.abs();
      complex9.INF.pow(0.0);
      Complex complex10 = complex4.tanh();
      complex2.subtract(complex0);
      Complex complex11 = Complex.INF;
      complex5.multiply(complex11);
      Complex complex12 = new Complex(0.0);
      Complex.valueOf((-3671.0), 1799.822400766636);
      complex10.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.ZERO.createComplex(0.0, 0.0);
      complex0.getReal();
      Complex complex6 = complex0.ZERO.sqrt();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.sqrt1z();
      complex1.ZERO.multiply(Double.NaN);
      complex5.getField();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex4.sinh();
      complex10.ZERO.tan();
      Complex complex11 = complex8.sin();
      complex9.sqrt();
      complex9.nthRoot(302);
      complex6.divide(complex11);
      complex7.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(865.586);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.NaN.conjugate();
      complex3.NaN.hashCode();
      complex3.pow(865.586);
      Complex complex4 = complex2.tanh();
      complex4.NaN.sinh();
      Complex complex5 = complex0.NaN.cos();
      complex5.tan();
      complex0.ZERO.createComplex(865.586, 0.0);
      Object object0 = new Object();
      Complex complex6 = complex0.createComplex(865.586, 865.586);
      complex0.equals(object0);
      complex5.toString();
      complex5.isInfinite();
      Complex complex7 = complex5.reciprocal();
      complex7.cosh();
      complex7.INF.sin();
      complex0.I.conjugate();
      Complex complex8 = Complex.valueOf(865.586);
      complex5.nthRoot(1286);
      Complex complex9 = complex7.divide(865.586);
      complex9.NaN.pow(complex8);
      complex2.isNaN();
      complex0.divide(865.586);
      Complex.valueOf((double) 1286);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-353.177824491067), (-353.177824491067));
      Complex complex1 = complex0.NaN.multiply((-353.177824491067));
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex0.isNaN();
      Complex complex3 = complex0.add((-20.0));
      Complex complex4 = complex0.pow(3.3058299602856804E-8);
      complex2.INF.readResolve();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex5.NaN.pow(complex0);
      complex7.readResolve();
      complex3.isNaN();
      Complex complex8 = complex3.pow(complex4);
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex4.add(complex2);
      Complex complex12 = complex11.multiply(complex5);
      complex12.NaN.readResolve();
      Complex complex13 = complex2.multiply(complex3);
      complex13.INF.add(0.0);
      complex4.sinh();
      complex12.ZERO.multiply(2394);
      Complex.valueOf(0.0, (-2224.723));
      complex8.pow(complex12);
      complex11.asin();
      complex6.getImaginary();
      complex10.add(3.3058299602856804E-8);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(0);
      complex2.NaN.hashCode();
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex3.ONE.reciprocal();
      Complex complex7 = Complex.valueOf(4328.8662845);
      complex6.INF.getField();
      assertTrue(complex6.equals((Object)complex5));
      
      Complex complex8 = complex2.ONE.add(complex0);
      Complex complex9 = complex8.NaN.add(complex4);
      Complex complex10 = complex9.ZERO.multiply(0);
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex11.NaN.atan();
      complex12.INF.subtract(complex4);
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex12.INF.multiply(complex13);
      Complex complex15 = complex2.tan();
      complex3.conjugate();
      Complex complex16 = complex15.divide(Double.POSITIVE_INFINITY);
      complex16.I.readResolve();
      complex2.ONE.hashCode();
      Complex complex17 = complex16.ONE.tan();
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      Complex complex18 = complex8.cos();
      Complex complex19 = complex18.NaN.conjugate();
      complex2.cosh();
      Complex complex20 = complex18.sqrt();
      assertEquals((-0.6450944400218795), complex20.getImaginary(), 0.01);
      
      complex10.readResolve();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertSame(complex4, complex14);
      
      Complex complex21 = complex7.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex21.getReal(), 0.01);
      
      Complex complex22 = complex19.multiply(complex1);
      assertTrue(complex2.equals((Object)complex15));
      assertTrue(complex1.equals((Object)complex11));
      assertSame(complex2, complex16);
      assertSame(complex22, complex9);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(3.7944631664558904E-85);
      complex0.INF.toString();
      complex0.ZERO.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.negate();
      complex0.getField();
      complex2.isInfinite();
      try { 
        complex1.nthRoot((-2185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,185
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1326.0), 0.0);
      Complex complex1 = complex0.NaN.multiply(2819);
      Complex complex2 = complex0.add(0.0);
      complex0.NaN.getArgument();
      Complex complex3 = complex2.ONE.sqrt1z();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.negate();
      assertSame(complex6, complex1);
      
      String string0 = complex2.toString();
      assertEquals("(-1326.0, 0.0)", string0);
      
      Complex complex7 = complex2.cosh();
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertTrue(complex7.equals((Object)complex5));
      assertFalse(complex0.isInfinite());
      assertFalse(complex7.isInfinite());
  }
}
