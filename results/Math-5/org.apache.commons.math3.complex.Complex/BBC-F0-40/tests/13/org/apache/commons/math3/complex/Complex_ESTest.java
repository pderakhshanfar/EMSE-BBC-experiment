/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:02:39 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.799164177397836E-9, 488.796);
      Complex complex1 = complex0.add(4.326260249991663E15);
      complex1.asin();
      complex1.createComplex((-906.9329107047195), 1525.36109);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      complex1.I.abs();
      Complex complex4 = complex3.ZERO.subtract(complex2);
      complex0.readResolve();
      complex1.tanh();
      Complex complex5 = complex1.ONE.acos();
      Complex complex6 = complex5.ZERO.divide(1.0);
      Complex complex7 = complex5.NaN.acos();
      complex5.ONE.divide(complex4);
      Complex complex8 = complex1.negate();
      complex5.I.cosh();
      Complex complex9 = complex8.sin();
      complex9.I.tanh();
      complex9.ZERO.multiply(7);
      complex0.acos();
      Complex complex10 = complex6.divide(478.0);
      complex3.subtract(20.0);
      complex6.negate();
      complex7.toString();
      complex10.add(1.0);
      complex2.abs();
      complex10.readResolve();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.NaN;
      complex3.getImaginary();
      Complex complex4 = complex2.createComplex(1.5234465914578058E-153, 1.5234465914578058E-153);
      Complex complex5 = complex1.acos();
      Complex complex6 = new Complex(1.5234465914578058E-153, 1.5234465914578058E-153);
      Complex complex7 = complex3.tanh();
      complex5.abs();
      Complex complex8 = Complex.ZERO;
      Object object0 = new Object();
      complex8.equals(complex1);
      Complex complex9 = complex0.exp();
      complex3.sqrt1z();
      Complex complex10 = complex9.sqrt();
      complex10.I.subtract(643.3432353925192);
      Complex complex11 = complex4.divide(Double.NaN);
      Complex complex12 = complex6.acos();
      complex12.sin();
      Complex complex13 = new Complex(1.0988372954605789E-8);
      complex11.subtract(2.5107736678364745E-4);
      Complex complex14 = Complex.I;
      complex14.cosh();
      complex11.cosh();
      complex0.createComplex(8.78143490611431E-5, 8.78143490611431E-5);
      complex6.reciprocal();
      complex11.multiply(950.798);
      complex7.subtract((-1762.0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3.4061835424180075E-242, (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      complex0.nthRoot(963);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(3117.226, Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0235056525096769E156), 0.9958665626506596);
      complex0.getArgument();
      Complex.valueOf(3.141592653589793, 6.283185307179586);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(0.9958665626506596);
      Complex.valueOf(1.0);
      Complex.valueOf((-2603.86709));
      complex2.tan();
      Complex.valueOf((-100.34165187556702), 5969.49749);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-2397.91061201), (-133.419));
      Complex complex2 = complex0.pow(complex1);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-818.4238911256194), (-2.643043719093745E12));
      Complex complex1 = complex0.multiply((-818.4238911256194));
      Complex complex2 = complex0.acos();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      complex0.ZERO.exp();
      complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      Complex complex1 = new Complex(1.5234465914578058E-153);
      try { 
        complex1.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(2637.5);
      Complex complex1 = Complex.valueOf((-20.0), 2.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(471.0, 4702629.840595186);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1828997135162354, 6.985680101040896E24);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.negate();
      complex3.I.multiply(12);
      complex2.equals(complex1);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.NaN.pow(Double.NaN);
      complex1.sinh();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex5.ONE.cosh();
      complex7.I.nthRoot(12);
      Complex complex8 = Complex.valueOf(6.985680101040896E24, (-259.95));
      complex8.I.divide(complex5);
      complex6.equals((Object) null);
      complex4.subtract(complex6);
      Complex complex9 = complex0.tan();
      complex9.ZERO.getArgument();
      complex0.conjugate();
      complex9.sqrt();
      Complex complex10 = complex0.divide(1.1828997135162354);
      complex10.toString();
      complex2.add(complex4);
      complex8.log();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex11.I.tan();
      complex12.ZERO.getField();
      complex1.exp();
      complex5.acos();
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-818.4238911256194), (-2.643043719093745E12));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply((-818.4238911256194));
      complex2.acos();
      Complex complex3 = new Complex((-2.643043719093745E12));
      complex3.sin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 3.1520070828798975E-212;
      Complex complex0 = Complex.valueOf(3.1520070828798975E-212, (-322.711334));
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      complex1.INF.reciprocal();
      complex0.NaN.toString();
      Complex complex2 = complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      Complex complex3 = new Complex(1.5234465914578058E-153);
      complex2.pow(complex3);
      complex0.reciprocal();
      Complex.valueOf(1.5234465914578058E-153);
      complex0.tan();
      complex3.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      Complex complex2 = new Complex(1.5234465914578058E-153);
      complex1.pow(complex2);
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      complex3.sqrt1z();
      complex2.readResolve();
      Complex.valueOf(4.357168123448786E243);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply((-41.158035256));
      complex1.multiply(complex0);
      Complex complex2 = complex0.reciprocal();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-557.2318377), (-557.2318377));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.subtract(2.0);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex2.ONE.multiply(1986.96475695223);
      Complex complex6 = complex5.ZERO.pow((-557.2318377));
      complex5.INF.acos();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.pow(complex2);
      Complex complex9 = complex0.atan();
      complex9.sqrt();
      complex9.sin();
      Complex.valueOf((-2427.32));
      complex8.multiply(2.337279322276433E-135);
      Complex complex10 = complex2.subtract(complex3);
      complex10.ZERO.multiply(1843.90566482);
      complex4.sin();
      complex6.cos();
      complex10.add(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1030.1005);
      Complex complex2 = new Complex(1030.1005);
      complex2.multiply(complex0);
      complex2.reciprocal();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(152);
      complex0.isInfinite();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.tan();
      complex2.equals(complex0);
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex1.pow(complex0);
      complex4.reciprocal();
      Complex complex5 = complex1.reciprocal();
      complex0.ONE.multiply(complex3);
      Complex.valueOf((-1692.983866134139));
      complex2.isInfinite();
      Complex complex6 = complex2.add(complex3);
      Complex.valueOf((-1080.853));
      complex6.tanh();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2026.598607));
      complex0.abs();
      Complex complex2 = complex1.createComplex((-2807.1), 20.0);
      complex2.tan();
      Complex complex3 = Complex.valueOf(1.2781631468016048E205, 3475.115025);
      Complex complex4 = complex3.log();
      complex4.nthRoot(130);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply((-41.158035256));
      complex0.add((double) (-2147482044));
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.sqrt();
      complex1.equals(complex2);
      complex0.pow((double) (-2147482044));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-360.83516364413134), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-1636.8471713206538));
      complex1.acos();
      complex1.getArgument();
      complex0.nthRoot(1);
      complex1.tanh();
      Complex complex2 = complex1.sqrt1z();
      complex2.readResolve();
      Complex.valueOf(2.4175248449172035E-87);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1068.741379277), (-1068.741379277));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow((-1068.741379277));
      complex2.ONE.add((-1068.741379277));
      complex1.multiply((-1020.5807526423));
      complex0.reciprocal();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-818.4238911256194), (-2.643043719093745E12));
      Complex complex1 = complex0.multiply((-818.4238911256194));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.multiply(complex0);
      complex1.reciprocal();
      Complex complex4 = complex2.acos();
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.3945753355078105, (-35.0856002332));
      Complex complex2 = complex1.multiply(426.50594339);
      Complex complex3 = complex1.acos();
      complex1.nthRoot(1);
      complex3.tanh();
      complex2.readResolve();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-40.6396388559735));
      complex1.INF.acos();
      complex0.getArgument();
      complex1.nthRoot(1);
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((-40.6396388559735));
      complex3.INF.negate();
      complex2.tanh();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.multiply(1.987228872666507E-7);
      complex0.getImaginary();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.pow(complex1);
      complex1.I.atan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.reciprocal();
      complex5.isInfinite();
      Complex complex6 = Complex.INF;
      Complex.valueOf(-0.0);
      Complex complex7 = complex0.add(complex4);
      complex7.sqrt1z();
      complex2.tan();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-818.4238911256194), (-2.643043719093745E12));
      Complex complex1 = complex0.multiply((-818.4238911256194));
      Complex complex2 = complex0.acos();
      complex0.getArgument();
      complex2.nthRoot(1);
      Complex complex3 = complex2.tanh();
      complex3.ONE.sqrt1z();
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply((-41.158035256));
      Complex complex2 = complex1.createComplex((-41.158035256), 968.312507059749);
      Complex complex3 = complex2.subtract((-1.8374207360194882E-11));
      Complex complex4 = complex0.tanh();
      complex1.I.log();
      complex4.NaN.multiply(2.0);
      complex3.getArgument();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(159.5420060469986, 1.2904307529671472E-176);
      Complex complex1 = complex0.multiply(152);
      Complex complex2 = new Complex(159.5420060469986, (-2678.4569041133));
      complex2.add((-136.43032));
      Complex complex3 = Complex.valueOf((-3968.315334891), 159.5420060469986);
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.multiply(152);
      complex0.add((-2678.4569041133));
      Complex complex1 = complex0.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(2637.5);
      Complex complex2 = complex1.divide(complex0);
      complex1.log();
      complex2.createComplex(2637.5, 2609.83);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-2730.95034001489), (-1.3130352854993315));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.multiply(complex2);
      complex2.getReal();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.atan();
      complex4.abs();
      complex3.getArgument();
      complex3.nthRoot(6);
      complex5.tanh();
      complex3.readResolve();
      Complex complex6 = Complex.valueOf((-15.145383779602));
      complex2.tanh();
      complex6.abs();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = new Complex(888.48555693482, 888.48555693482);
      complex1.multiply(1.5234465914578058E-153);
      Complex complex2 = complex0.acos();
      complex1.sinh();
      complex2.getField();
      complex2.divide(complex1);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply((-41.158035256));
      complex0.getImaginary();
      Complex complex2 = complex1.atan();
      complex1.pow(complex0);
      Complex complex3 = complex0.reciprocal();
      complex2.reciprocal();
      complex0.isInfinite();
      Complex complex4 = Complex.INF;
      complex3.add(complex4);
      Complex complex5 = complex2.sqrt1z();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.createComplex(968.312507059749, 968.312507059749);
      complex3.acos();
      Complex complex4 = complex3.subtract(5.38733640215475E-8);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.reciprocal();
      complex1.reciprocal();
      complex2.atan();
      complex6.isInfinite();
      Complex complex7 = Complex.ZERO;
      double double0 = (-3644.040295642638);
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply((-41.158035256));
      complex1.INF.acos();
      complex0.getArgument();
      complex1.nthRoot(1);
      Complex complex2 = complex1.tanh();
      complex2.readResolve();
      Complex.valueOf((-41.158035256));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(2637.5);
      complex0.isInfinite();
      Complex complex2 = complex0.add(complex1);
      complex1.reciprocal();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.reciprocal();
      complex2.INF.multiply(complex1);
      Complex complex4 = complex3.createComplex(1.0, 0.7144331820606135);
      complex4.abs();
      complex4.NaN.getArgument();
      Complex complex5 = Complex.valueOf(0.7144331820606135);
      complex0.ONE.multiply((double) 2146132861);
      // Undeclared exception!
      complex5.nthRoot(2146132861);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ZERO.abs();
      Complex complex2 = complex0.asin();
      complex2.ZERO.readResolve();
      Complex complex3 = complex0.multiply(Double.NaN);
      complex0.getImaginary();
      complex0.atan();
      complex0.abs();
      complex3.getArgument();
      complex0.nthRoot(1);
      Complex.valueOf((-2175.1932), 8.738538345057937E-4);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tanh();
      complex5.readResolve();
      Complex.valueOf(8.738538345057937E-4);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply((-41.158035256));
      complex0.getImaginary();
      Complex complex2 = complex1.createComplex((-41.158035256), 968.312507059749);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.subtract((-1.8374207360194882E-11));
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.reciprocal();
      complex7.ONE.atan();
      complex6.isInfinite();
      Complex complex8 = Complex.ZERO;
      complex4.INF.createComplex(2.0, (-818.4238911256194));
      complex8.add(complex5);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      Complex complex2 = complex1.NaN.negate();
      complex1.pow((-3074.0060547428957));
      Complex complex3 = complex0.pow(complex2);
      complex3.reciprocal();
      complex3.isInfinite();
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      complex0.divide((-1.8374207360194882E-11));
      Complex complex1 = new Complex(0.0);
      complex1.acos();
      Complex complex2 = Complex.valueOf(0.4203280806541443);
      complex2.atan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      complex1.ONE.cos();
      Complex complex2 = complex1.multiply((-2633.084211));
      complex0.abs();
      Complex complex3 = Complex.valueOf((-2633.084211));
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.pow(complex3);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-818.4238911256194));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-1426.0882178445));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.cosh();
      complex3.readResolve();
      complex1.getReal();
      complex5.nthRoot(2750);
      complex3.acos();
      complex2.getArgument();
      complex5.getReal();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.tanh();
      complex1.atan();
      Complex complex2 = complex0.divide(1579.6784216);
      complex2.acos();
      Complex.valueOf(1610.7);
      complex2.tanh();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(602.2339604749);
      complex2.getImaginary();
      Complex complex3 = complex1.createComplex((-2.3945753355078105), Double.NaN);
      Complex complex4 = complex2.acos();
      complex4.abs();
      complex4.I.cosh();
      Complex complex5 = complex2.pow(1.0);
      complex3.equals(complex5);
      complex4.exp();
      complex3.sqrt1z();
      complex1.sqrt();
      complex3.divide(2.0);
      complex2.acos();
      complex2.subtract(Double.NaN);
      complex1.cosh();
      complex0.createComplex(0.0, Double.NaN);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2026.598607));
      complex0.abs();
      Complex complex2 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      Complex complex2 = complex1.NaN.negate();
      complex2.getImaginary();
      Complex complex3 = complex2.createComplex((-0.46788333408597516), 1.0988372954605789E-8);
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex(1.0988372954605789E-8, (-0.46788333408597516));
      Complex complex6 = complex5.tanh();
      complex1.abs();
      Complex complex7 = complex1.pow(863260.5047912766);
      Object object0 = new Object();
      complex1.equals(object0);
      complex4.exp();
      Complex complex8 = complex3.sqrt1z();
      complex6.sqrt();
      Complex complex9 = complex8.divide((-43358.846410071455));
      complex9.acos();
      Complex complex10 = complex3.sin();
      Complex complex11 = new Complex(0.0);
      complex11.subtract(1.5234465914578058E-153);
      complex10.cosh();
      complex6.createComplex(0.0, (-0.46788333408597516));
      complex6.reciprocal();
      complex7.multiply((-43358.846410071455));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ZERO.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      Complex complex4 = complex0.multiply(Double.NaN);
      Complex complex5 = complex0.pow(2198.43402);
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      complex6.multiply(complex4);
      Complex complex7 = complex5.multiply(complex0);
      complex4.getReal();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex5.atan();
      complex7.abs();
      complex8.getArgument();
      complex4.nthRoot(985);
      Complex.valueOf((double) 985, Double.NaN);
      Complex complex10 = complex3.tanh();
      complex9.readResolve();
      complex9.isInfinite();
      complex3.add(complex10);
      Complex complex11 = Complex.ZERO;
      complex11.isNaN();
      Complex complex12 = complex0.tan();
      complex12.reciprocal();
      complex9.divide(0.41421356237309515);
      complex0.getArgument();
      Complex complex13 = new Complex(2198.43402, (-1709.368305599473));
      complex5.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.NaN;
      complex2.hashCode();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.cos();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-818.4238911256194));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ZERO.abs();
      Complex complex2 = complex0.asin();
      complex1.readResolve();
      Complex complex3 = complex2.multiply(2.7698267293941856E-162);
      complex3.getImaginary();
      complex1.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.tanh();
      complex2.abs();
      Complex complex6 = complex5.pow(0.0);
      complex0.equals(complex3);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex3.divide((-2644.425719406));
      complex5.acos();
      Complex complex12 = complex11.sin();
      complex10.subtract(0.0);
      complex8.cosh();
      complex12.createComplex(Double.NaN, (-726.21656718));
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2026.598607));
      complex0.abs();
      Complex complex2 = complex1.createComplex((-1394.0071338283674), 5.016820182185716E-121);
      complex1.tan();
      complex0.log();
      complex2.nthRoot(1013);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = new Complex(1204.516179539);
      complex4.abs();
      Complex complex5 = complex1.pow((-1.0000000000000004));
      complex5.equals((Object) null);
      complex3.exp();
      complex3.sqrt1z();
      Complex complex6 = new Complex((-1.0000000000000004));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex1.divide((-153.20555186));
      Complex complex9 = complex5.acos();
      complex9.I.pow((-1.0));
      Complex complex10 = Complex.INF;
      complex10.sin();
      complex7.subtract(1204.516179539);
      Complex complex11 = Complex.NaN;
      complex11.cosh();
      complex8.ZERO.subtract(complex3);
      complex8.createComplex((-3672.6523706981), (-1.2542332720182776E186));
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tan();
      Complex complex1 = complex0.tanh();
      complex1.ONE.atan();
      Complex complex2 = complex1.I.divide(1579.6784216);
      complex1.acos();
      Complex.valueOf(1610.7);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      complex1.ONE.toString();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.negate();
      complex5.ONE.subtract(complex2);
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex1.sin();
      complex7.getField();
      complex1.createComplex(20.0, 20.0);
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex6.ZERO.acos();
      Complex complex10 = complex6.ONE.divide(complex2);
      complex10.INF.readResolve();
      Complex complex11 = Complex.valueOf(0.0, (-2729.8246681765895));
      complex6.exp();
      complex8.pow(complex1);
      Complex complex12 = complex6.tan();
      Complex complex13 = complex12.multiply(7);
      Complex complex14 = complex13.ONE.atan();
      complex9.hashCode();
      complex11.reciprocal();
      complex7.sqrt();
      complex4.isInfinite();
      complex14.toString();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.add(0.0);
      Complex complex1 = Complex.valueOf((-399.263187), (-399.263187));
      complex1.ONE.abs();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.subtract(complex1);
      complex4.I.reciprocal();
      Complex.valueOf(1.0, (-399.263187));
      Complex complex5 = complex0.multiply((-364));
      complex5.ZERO.hashCode();
      Complex complex6 = complex5.acos();
      complex5.equals("Es6eeehyJsm]zHIy9");
      complex4.getReal();
      complex4.atan();
      complex6.isNaN();
      complex4.sqrt();
      complex3.divide(3010.280896993224);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(1126.7439665);
      complex0.ONE.abs();
      complex0.nthRoot(1);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.I.pow(766.1549832592573);
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex2.I.multiply(complex1);
      Complex complex6 = complex3.ONE.atan();
      complex5.ZERO.asin();
      complex5.ONE.hashCode();
      Complex complex7 = complex4.subtract(0.0);
      complex1.ONE.getArgument();
      complex4.ZERO.readResolve();
      complex0.createComplex(1, 1993.48);
      Complex complex8 = complex5.multiply(766.1549832592573);
      complex1.add(complex4);
      complex2.abs();
      complex8.NaN.hashCode();
      complex3.getImaginary();
      Complex complex9 = complex8.pow(complex6);
      complex9.NaN.sinh();
      complex7.subtract(complex4);
      complex3.isInfinite();
      complex3.sqrt1z();
      complex9.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.NaN.multiply(1037);
      complex2.ZERO.getArgument();
      Complex complex4 = complex3.ONE.multiply(complex2);
      complex4.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.NaN.multiply((-1137));
      complex3.sinh();
      Complex complex6 = complex2.I.multiply((-1308));
      Complex complex7 = complex6.I.reciprocal();
      complex7.ONE.subtract(20.0);
      complex0.hashCode();
      Complex complex8 = complex2.sinh();
      complex8.ONE.negate();
      complex8.INF.negate();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(1897.54233542968);
      Complex complex1 = complex0.INF.sqrt();
      complex1.ONE.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.tan();
      complex4.ONE.divide((-93.24));
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex0.ZERO.asin();
      complex8.ONE.abs();
      Complex.valueOf(1897.54233542968);
      complex7.ZERO.toString();
      complex2.cos();
      Complex complex9 = complex1.sqrt1z();
      complex6.equals(complex3);
      complex4.readResolve();
      complex9.add((-4469.2463492322));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.divide((-1044.13525648179));
      complex0.ONE.divide(complex1);
      Complex complex2 = complex1.I.acos();
      complex2.readResolve();
      complex2.NaN.multiply(complex0);
      Complex complex3 = complex1.INF.multiply(0);
      Complex complex4 = Complex.valueOf(4883.30923);
      complex3.ONE.pow(complex4);
      Complex.valueOf(983.099, 20.0);
      complex0.exp();
      Complex complex5 = complex1.multiply(1);
      Complex.valueOf((-319.603), (-1044.13525648179));
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex0.NaN.getField();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.acos();
      complex4.ZERO.getField();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ONE.pow(complex2);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.ZERO.add(complex4);
      Complex complex9 = complex7.negate();
      Complex complex10 = complex7.multiply((-536.1641860418863));
      Complex complex11 = complex0.multiply(complex10);
      complex2.atan();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex12.ZERO.sin();
      complex9.equals((Object) null);
      complex11.reciprocal();
      complex13.sinh();
      Complex.valueOf(4081.02537921728, (-536.1641860418863));
      complex10.NaN.atan();
      Complex complex14 = complex13.add(Double.POSITIVE_INFINITY);
      complex1.ONE.subtract(complex13);
      complex14.I.getArgument();
      complex14.NaN.add((-4.83901764243093E-296));
      complex14.cosh();
      complex6.cosh();
      complex8.getArgument();
      Complex complex15 = complex0.conjugate();
      complex2.multiply((-4.83901764243093E-296));
      complex15.multiply((-1168));
      complex10.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(595.277305816967, 1146.5909486822272);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex(0.14285714285714285);
      complex2.INF.subtract(complex3);
      complex1.readResolve();
      complex3.conjugate();
      Complex.valueOf(0.14285714285714285);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-2325.96));
      Complex complex1 = complex0.exp();
      complex1.isNaN();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.atan();
      complex0.atan();
      Complex complex4 = complex1.divide((-2325.96));
      Complex complex5 = complex1.I.createComplex((-4197.515193249058), 921.0);
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex4.multiply(complex0);
      complex7.ZERO.negate();
      complex0.ZERO.divide((-4197.515193249058));
      Complex complex8 = complex7.ZERO.subtract(complex6);
      complex8.subtract(882.421404);
      Complex complex9 = complex7.I.subtract(1451.7334);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex9.ZERO.conjugate();
      complex3.equals(complex1);
      Complex complex12 = Complex.valueOf((-2325.96), 1451.7334);
      complex12.I.subtract(complex9);
      Complex.valueOf(921.0);
      complex1.multiply(1451.7334);
      complex9.getImaginary();
      Complex complex13 = complex10.tan();
      Complex complex14 = complex9.asin();
      complex10.tan();
      Complex complex15 = complex5.sinh();
      complex15.ONE.multiply(2475.77425165768);
      complex13.acos();
      complex10.getReal();
      complex6.atan();
      complex14.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2026.598607));
      complex0.abs();
      Complex.valueOf((-2026.598607));
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex1.ONE.multiply(1291);
      complex0.add(complex1);
      Complex complex2 = complex0.createComplex((-848.194734162758), 6.283185307179586);
      complex2.ONE.getField();
      complex0.isInfinite();
      Complex complex3 = complex0.add(complex2);
      complex3.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.cosh();
      Complex complex1 = complex0.sinh();
      complex0.getArgument();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.ONE.pow(0.0);
      complex1.INF.sin();
      complex2.ZERO.createComplex(0.0, 1809.076);
      complex2.ZERO.tan();
      complex1.log();
      complex2.nthRoot(1013);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(2036.904, 2076.77701666056);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cosh();
      complex2.sqrt1z();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.ONE.cosh();
      complex0.toString();
      Complex.valueOf(2076.77701666056, 0.0);
      complex4.ONE.multiply(0.0);
      Complex complex5 = Complex.valueOf(0.0, 2036.904);
      complex4.multiply(complex5);
      Complex.valueOf(0.0, 2076.77701666056);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex0.acos();
      complex1.acos();
      complex2.nthRoot(1);
      Complex complex5 = complex1.subtract(complex0);
      complex5.I.atan();
      complex0.tanh();
      Complex.valueOf((double) 1);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.ZERO.multiply(86);
      complex7.NaN.sqrt1z();
      Complex complex8 = complex7.ZERO.reciprocal();
      complex1.pow((double) 1);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex6.pow((-1189.9099049659483));
      complex9.abs();
      complex5.equals(complex10);
      Complex complex11 = complex3.pow(complex5);
      Complex complex12 = complex2.pow((-1189.9099049659483));
      complex12.NaN.getField();
      complex11.divide((-1189.9099049659483));
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.I;
      complex1.ZERO.pow(complex2);
      Complex complex3 = complex1.I.reciprocal();
      complex3.ZERO.reciprocal();
      complex0.isInfinite();
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.NaN;
      complex2.NaN.multiply(complex3);
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex4 = complex0.NaN.multiply(complex1);
      complex0.getField();
      Complex complex5 = complex0.I.subtract(complex4);
      complex1.getArgument();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.ZERO.exp();
      complex4.NaN.getField();
      complex6.ZERO.acos();
      complex4.NaN.abs();
      complex6.INF.divide(0.0);
      complex4.isInfinite();
      complex4.NaN.negate();
      complex4.sqrt1z();
      Complex complex8 = complex7.asin();
      complex6.getField();
      complex1.getField();
      Complex complex9 = complex8.tan();
      complex9.I.log();
      complex5.createComplex(2962.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1160.229919189361));
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-1663.48509));
      complex2.I.cos();
      complex3.ONE.nthRoot(739);
      complex3.INF.tanh();
      Complex complex4 = Complex.valueOf(299.46857727597);
      complex3.ONE.getField();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      complex2.getReal();
      complex5.tanh();
      complex2.nthRoot(37);
      Complex complex6 = complex3.sin();
      complex6.NaN.acos();
      Complex complex7 = complex6.ZERO.reciprocal();
      complex7.ONE.multiply(1440);
      Complex.valueOf(299.46857727597);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.158035256), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply((-41.158035256));
      complex1.INF.acos();
      complex1.I.divide(Double.POSITIVE_INFINITY);
      complex0.ZERO.sinh();
      complex0.getField();
      complex1.divide(complex0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-818.4238911256194));
      complex0.hashCode();
      Complex complex1 = complex0.cos();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ZERO.abs();
      Complex complex2 = complex0.asin();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.multiply(Double.NaN);
      complex0.getImaginary();
      Complex complex4 = complex0.createComplex(0.0, 1920.5829607);
      complex2.INF.acos();
      complex1.tanh();
      complex0.abs();
      Complex complex5 = complex1.pow(1920.5829607);
      complex4.equals(object0);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex6.INF.sqrt1z();
      complex7.I.sqrt();
      complex3.divide(0.0);
      Complex complex8 = complex1.acos();
      complex8.NaN.sin();
      complex6.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.cosh();
      complex9.createComplex((-3672.6523706981), 20.0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.NaN.log();
      complex2.NaN.multiply(complex1);
      complex3.ZERO.exp();
      complex0.getArgument();
      Complex complex4 = complex1.divide(complex0);
      complex1.NaN.divide(complex2);
      Complex complex5 = complex4.ZERO.pow(complex2);
      Complex complex6 = complex5.I.cosh();
      complex5.I.readResolve();
      complex2.getReal();
      complex0.nthRoot(2750);
      complex1.acos();
      complex6.getArgument();
      complex1.getReal();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.negate();
      complex1.NaN.sinh();
      complex2.ONE.readResolve();
      complex2.I.readResolve();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex3.atan();
      complex4.INF.multiply(0.0);
      Complex complex6 = complex4.add(0.0);
      Complex complex7 = complex6.I.add(0.0);
      complex7.ZERO.hashCode();
      complex7.I.conjugate();
      complex3.I.cos();
      complex3.ONE.asin();
      Complex complex8 = complex6.ONE.pow(1282.605547156863);
      Complex complex9 = complex8.ZERO.reciprocal();
      Complex complex10 = complex9.ZERO.cos();
      complex3.toString();
      complex4.add(0.0);
      complex4.getArgument();
      Complex complex11 = Complex.ONE;
      complex11.NaN.subtract(complex5);
      Complex complex12 = complex6.add(complex11);
      complex11.ONE.getArgument();
      complex12.NaN.sinh();
      complex12.readResolve();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.divide(complex2);
      complex4.ONE.abs();
      complex2.ZERO.toString();
      Complex complex5 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.INF.conjugate();
      complex6.INF.acos();
      Complex complex7 = complex6.NaN.multiply(complex1);
      Complex complex8 = complex7.ZERO.sqrt();
      complex8.ONE.subtract((-941.341336));
      complex2.toString();
      complex0.pow(Double.POSITIVE_INFINITY);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.I.createComplex(0.0, 1.5234465914578058E-153);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.pow((-2986.788));
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex3.ONE.multiply(complex1);
      complex3.getReal();
      Complex complex6 = complex5.NaN.sin();
      complex3.atan();
      complex1.abs();
      complex5.getArgument();
      complex0.nthRoot(1);
      Complex complex7 = Complex.valueOf(1.5707963267948966, (-2175.1932));
      complex7.INF.tanh();
      complex4.readResolve();
      complex1.isInfinite();
      complex3.add(complex5);
      complex2.isNaN();
      complex3.I.tan();
      Complex complex8 = complex2.reciprocal();
      complex8.I.divide(1.5707963267948966);
      complex8.ZERO.getArgument();
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1105));
      complex1.I.getArgument();
      complex1.INF.pow((double) (-1105));
      complex0.I.toString();
      complex0.ZERO.getField();
      complex0.I.conjugate();
      complex1.ZERO.getField();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.ZERO.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(686.0, 686.0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.NaN.log();
      complex8.NaN.acos();
      Complex complex9 = complex0.subtract(complex7);
      complex9.ONE.add((-536.8501500399));
      complex7.toString();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex10.asin();
      complex11.ONE.subtract(complex4);
      Complex complex12 = complex10.ONE.cos();
      complex10.pow((-1101.765646174429));
      complex10.ONE.createComplex((-20.0), 301.95945263254);
      Complex complex13 = complex3.multiply(Double.POSITIVE_INFINITY);
      complex13.ONE.tan();
      complex8.isNaN();
      Complex complex14 = complex13.tanh();
      complex6.negate();
      complex4.cos();
      complex14.conjugate();
      complex0.sqrt();
      complex12.add(Double.POSITIVE_INFINITY);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.I.sin();
      Complex complex3 = complex0.subtract(3290.0);
      complex0.getImaginary();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.I;
      complex4.ZERO.divide(complex5);
      Complex complex6 = complex4.acos();
      complex6.INF.acos();
      complex0.nthRoot(2626);
      complex3.equals("ijS-64oXOp:8nG!wB");
      complex3.asin();
      Complex complex7 = complex3.reciprocal();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.pow((double) 37);
      Complex complex1 = complex0.ONE.multiply(37);
      complex1.atan();
      complex0.ONE.hashCode();
      complex1.INF.exp();
      complex0.INF.cos();
      Complex complex2 = complex0.cosh();
      try { 
        complex2.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex1.log();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = complex6.log();
      Complex complex8 = complex6.ONE.cosh();
      complex8.ONE.tanh();
      complex8.I.pow((double) 286);
      Complex complex9 = complex6.ONE.tan();
      Complex complex10 = complex4.multiply(286);
      complex6.sinh();
      complex9.readResolve();
      Complex complex11 = complex3.acos();
      complex11.ZERO.createComplex(286, 286);
      complex11.add(complex10);
      Complex complex12 = complex2.divide((-3037.587037024117));
      complex12.ONE.tanh();
      complex5.getReal();
      complex0.multiply(complex7);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.divide(complex1);
      complex0.subtract(complex1);
      Complex complex3 = complex1.multiply(complex2);
      complex2.ONE.nthRoot(518);
      complex3.ZERO.sinh();
      complex3.tan();
      complex1.abs();
      complex0.cosh();
      Complex.valueOf(40.8738);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1213.4378993576);
      complex0.I.subtract(complex1);
      Complex complex2 = complex1.ZERO.cosh();
      complex2.ZERO.nthRoot(818);
      complex0.ONE.getField();
      Complex complex3 = complex0.atan();
      complex0.isInfinite();
      Complex complex4 = complex3.sqrt1z();
      complex0.ZERO.multiply(complex4);
      complex4.INF.divide(1213.4378993576);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.subtract(0.0);
      complex1.ZERO.toString();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-184.94879), (-184.94879));
      Complex complex2 = complex1.ZERO.negate();
      complex2.ONE.readResolve();
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex3.add(0.0);
      complex5.I.divide(complex0);
      complex3.add(0.0);
      complex3.add((-5.376251584638963E-8));
      Complex.valueOf(700.2236);
      complex4.hashCode();
      complex4.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.tanh();
      complex0.isNaN();
      complex0.pow(0.0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.cos();
      complex2.INF.getField();
      Complex complex3 = complex1.tanh();
      complex1.I.getArgument();
      complex3.NaN.abs();
      Complex complex4 = complex0.I.add(complex3);
      Complex complex5 = complex1.add((-1957.21));
      complex5.ZERO.hashCode();
      Complex.valueOf((-1957.21), (-1957.21));
      complex1.sinh();
      complex3.getImaginary();
      Complex.valueOf((-20.0), (-20.0));
      complex4.sinh();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.add(complex1);
      Complex complex3 = complex0.tanh();
      complex3.I.getField();
      complex0.ZERO.sinh();
      complex3.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex0.reciprocal();
      complex4.log();
      complex0.toString();
      Complex complex5 = complex2.INF.createComplex(1212.7819235878244, 0.0);
      Complex complex6 = Complex.ONE;
      complex1.acos();
      complex0.equals(complex6);
      complex2.isInfinite();
      Complex complex7 = complex3.subtract(0.0);
      complex7.tan();
      complex7.ONE.pow(157.922032);
      Complex complex8 = Complex.valueOf((-2471.6616940963));
      Complex.valueOf(157.922032, 1212.7819235878244);
      complex1.ZERO.getArgument();
      complex8.add((-2471.6616940963));
      complex3.isInfinite();
      complex5.conjugate();
      complex0.multiply(2748);
      Complex.valueOf(151.40191391714222);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-807);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.sqrt1z();
      try { 
        complex0.ZERO.nthRoot((-807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -807
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.NaN.conjugate();
      complex1.sqrt();
      Complex complex2 = complex0.tanh();
      complex2.INF.add(0.0);
      Complex complex3 = complex0.reciprocal();
      complex2.INF.abs();
      Complex complex4 = complex2.NaN.add(complex3);
      Object object0 = complex2.readResolve();
      complex0.NaN.hashCode();
      complex2.equals(object0);
      complex0.divide((-2391.0));
      complex3.abs();
      complex4.subtract(0.0);
      Complex complex5 = complex0.multiply((-2580));
      complex3.toString();
      Complex complex6 = complex5.asin();
      complex6.getArgument();
      Complex complex7 = complex6.pow(0.0);
      complex5.I.multiply((-1.0));
      complex7.INF.asin();
      complex7.ZERO.hashCode();
      complex6.INF.createComplex(0.0, (-2580));
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(82.897);
      Complex complex1 = Complex.valueOf((-1037.7856212642), (-371.97185298098935));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.NaN.pow(0.0);
      complex0.getImaginary();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex0.multiply(complex4);
      complex5.ONE.abs();
      complex0.getReal();
      Complex complex6 = Complex.ONE;
      complex6.multiply((-476));
      complex1.divide(complex6);
      Complex complex7 = complex4.conjugate();
      complex1.readResolve();
      complex0.pow(complex4);
      Complex complex8 = complex4.divide((-1037.7856212642));
      complex7.subtract(1087.63412);
      complex2.multiply(82.897);
      complex3.add(complex6);
      complex0.subtract((-371.97185298098935));
      complex0.subtract((-694.6693496724));
      complex8.add((-727.0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex1.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.multiply(complex1);
      complex3.ONE.toString();
      complex0.getReal();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.sin();
      complex3.I.conjugate();
      Complex complex4 = complex1.tan();
      complex1.sqrt1z();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.multiply(1.0333241479437797E-8);
      complex6.divide(complex5);
      Complex.valueOf(1.0333241479437797E-8, (-1134.8));
      complex0.subtract((-1792.908576935221));
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tan();
      Complex complex1 = complex0.tanh();
      complex1.ONE.atan();
      complex1.I.divide(1579.6784216);
      complex1.acos();
      Complex.valueOf(1610.7);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.hashCode();
      complex0.getReal();
      Complex complex1 = Complex.NaN;
      double double0 = complex1.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.ONE.multiply(complex2);
      Complex complex8 = complex2.cosh();
      assertEquals(0.5403023058681398, complex8.getReal(), 0.01);
      
      complex6.ZERO.getArgument();
      complex6.readResolve();
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      complex5.I.add(complex0);
      boolean boolean0 = complex2.equals(complex1);
      assertFalse(boolean0);
      
      complex0.getField();
      Complex complex9 = complex2.INF.cosh();
      Complex complex10 = complex1.tanh();
      assertTrue(complex10.equals((Object)complex9));
      
      complex1.multiply(Double.NaN);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex12.ZERO.negate();
      complex13.NaN.getField();
      assertEquals(-0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex5.conjugate();
      complex7.createComplex(Double.POSITIVE_INFINITY, (-4064.740023302));
      assertSame(complex6, complex11);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex14.multiply(complex3);
      assertEquals(0.0, complex14.getReal(), 0.01);
      
      complex5.asin();
      Complex complex15 = complex4.cosh();
      assertEquals(0.308331110596774, complex15.getImaginary(), 0.01);
  }
}
