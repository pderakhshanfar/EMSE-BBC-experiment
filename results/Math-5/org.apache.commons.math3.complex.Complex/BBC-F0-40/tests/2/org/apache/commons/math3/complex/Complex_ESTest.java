/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:45:10 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tan();
      Complex complex1 = Complex.valueOf(1.1800039972549816E259);
      Complex complex2 = Complex.valueOf(1607.121, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tanh();
      Complex complex4 = new Complex(1);
      complex4.nthRoot(1);
      Complex complex5 = Complex.ZERO;
      complex3.log();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.cos();
      Complex complex8 = complex0.conjugate();
      complex8.nthRoot(1);
      complex8.I.multiply((-3.2936025225250634E-8));
      complex1.exp();
      complex8.acos();
      complex7.createComplex((-1.0), 1978.758261547);
      complex6.add(20.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = Complex.valueOf(3.9725294130847365E44, 3.9725294130847365E44);
          Complex complex1 = new Complex(3.9725294130847365E44);
          Complex complex2 = complex1.add(1.9219114780426025);
          Complex complex3 = complex0.add(complex1);
          complex1.INF.getField();
          Complex complex4 = complex3.INF.add(3.9725294130847365E44);
          complex4.I.conjugate();
          complex4.INF.hashCode();
          Complex complex5 = Complex.valueOf(3.9725294130847365E44);
          Complex complex6 = complex0.log();
          Complex complex7 = complex0.asin();
          Complex complex8 = complex5.cos();
          Complex complex9 = complex8.I.log();
          complex3.ONE.tan();
          Complex complex10 = complex5.NaN.reciprocal();
          complex10.ZERO.tan();
          Complex complex11 = complex7.sinh();
          complex0.readResolve();
          Complex complex12 = complex3.subtract((-2710.29677668629));
          complex1.readResolve();
          complex9.readResolve();
          complex11.add(complex2);
          Complex complex13 = complex12.tanh();
          Complex.valueOf(3.9725294130847365E44, 1.9219114780426025);
          complex6.exp();
          // Undeclared exception!
          complex13.nthRoot(1073742436);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.getField();
      Complex complex1 = new Complex(0.27342069149017334, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex1.multiply(complex2);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.getField();
      Complex complex1 = new Complex(0.27342069149017334, Double.POSITIVE_INFINITY);
      complex1.multiply(879);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.getField();
      Complex complex1 = new Complex(0.27342069149017334, Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex complex2 = Complex.valueOf(0.27342069149017334);
      Complex complex3 = complex2.sqrt1z();
      complex3.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.subtract(1028.8198);
      Complex complex6 = new Complex(1028.8198);
      complex4.divide(complex5);
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.log();
      Complex complex10 = complex8.divide(9.37721319457112E-9);
      complex2.sin();
      Complex complex11 = complex10.negate();
      Complex complex12 = Complex.NaN;
      complex12.multiply(2672.0100737955877);
      complex9.sqrt1z();
      Complex complex13 = Complex.ONE;
      complex1.multiply(19.2061591742);
      Complex complex14 = Complex.NaN;
      complex14.atan();
      Complex complex15 = complex0.acos();
      complex11.sqrt();
      complex15.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.7675435543060303, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(21.067107370184694, 21.067107370184694);
      Complex complex1 = new Complex((-3.0), (-20.0));
      Complex complex2 = complex0.INF.sin();
      complex2.ZERO.createComplex(1.0, Double.POSITIVE_INFINITY);
      complex1.tan();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.2092), (-857.2092));
      complex0.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.tan();
      complex4.sqrt1z();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex1.NaN.pow((-857.2092));
      Complex complex7 = complex6.INF.divide(complex2);
      complex6.add(complex0);
      Complex complex8 = complex1.add((-857.2092));
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = (Complex)complex9.INF.readResolve();
      Complex complex11 = complex0.sin();
      Complex.valueOf(2.0);
      Object object0 = new Object();
      complex11.equals(object0);
      Complex complex12 = new Complex(1, Double.POSITIVE_INFINITY);
      Complex complex13 = complex1.tanh();
      complex13.NaN.atan();
      Complex complex14 = Complex.valueOf((-857.2092));
      complex14.ZERO.getArgument();
      Complex complex15 = complex13.INF.reciprocal();
      complex5.add(complex9);
      complex8.getArgument();
      complex15.divide(complex7);
      complex4.readResolve();
      complex12.asin();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-879.56503963), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sin();
      Complex.valueOf(6.861870970598542E106, (-2892.665));
      Complex.valueOf(915.303585892, (-2892.665));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.pow(0.5551414489746094);
      Complex complex4 = complex2.sqrt();
      complex4.ONE.multiply((-783.0254));
      Complex complex5 = Complex.valueOf(6.861870970598542E106);
      complex3.conjugate();
      Complex complex6 = complex0.multiply((-2892.665));
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex7.NaN.exp();
      complex3.cosh();
      Complex complex9 = complex0.multiply(6.861870970598542E106);
      complex0.negate();
      complex8.abs();
      Complex complex10 = complex9.exp();
      complex10.I.getField();
      complex6.INF.getField();
      complex2.add((-2892.665));
      Complex complex11 = complex10.pow(Double.POSITIVE_INFINITY);
      Complex complex12 = complex2.subtract(complex8);
      complex12.NaN.cosh();
      complex11.add(complex5);
      complex9.exp();
      complex12.conjugate();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2124.53704, 2124.53704);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex0.ONE.sqrt();
      complex4.ONE.pow(complex2);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex6.divide(complex7);
      complex2.atan();
      Complex complex9 = complex6.NaN.divide(complex2);
      complex9.ZERO.reciprocal();
      Complex complex10 = complex4.asin();
      complex8.atan();
      complex0.reciprocal();
      Complex complex11 = complex0.divide(complex5);
      complex11.abs();
      complex1.divide(5560.86669092478);
      Complex complex12 = complex1.sqrt1z();
      complex10.atan();
      complex1.divide(2124.53704);
      complex12.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.INF.sinh();
      complex4.INF.pow(18.6062425);
      Complex complex5 = complex2.ZERO.add(5916.17554724119);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex5.INF.sqrt();
      complex7.abs();
      Complex complex8 = complex6.ONE.cos();
      Complex complex9 = new Complex(5916.17554724119, 5916.17554724119);
      complex8.ZERO.subtract(complex9);
      complex1.getArgument();
      Complex complex10 = complex6.cos();
      complex0.NaN.sinh();
      complex10.I.add(0.0);
      complex5.reciprocal();
      complex6.hashCode();
      Complex.valueOf(2080.46, 2080.46);
      complex9.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.8351));
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.acos();
      complex0.getArgument();
      Complex complex3 = Complex.NaN;
      complex3.getField();
      Complex complex4 = complex0.tan();
      Complex complex5 = new Complex((-2622.0212780639163));
      Complex complex6 = complex2.subtract(1.0);
      Complex complex7 = new Complex(6.80447556078434E-7, (-2622.0212780639163));
      complex1.divide(complex6);
      Complex complex8 = complex4.add(complex6);
      Complex.valueOf(Double.POSITIVE_INFINITY, 3.141592653589793);
      complex8.log();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.divide((-1.0012424450664554));
      Complex complex11 = complex10.multiply(1608.71414591);
      complex6.atan();
      complex11.createComplex(1608.71414591, (-1143.417092341686));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex.valueOf(0.0);
      Complex complex0 = Complex.valueOf(0.0, (-734806.61256464));
      Complex complex1 = complex0.acos();
      complex0.getArgument();
      complex1.getField();
      double double0 = 0.27342069149017334;
      Complex complex2 = new Complex((-955.247189), (-3943.606763));
      complex0.tan();
      Complex complex3 = new Complex((-734806.61256464), (-1.5707963267948966));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = new Complex(3461.20919933346, 0.27342069149017334);
      Complex complex6 = complex5.tanh();
      complex0.subtract(0.0);
      Complex complex7 = new Complex(3.356194304142888);
      complex1.divide(complex4);
      try { 
        complex6.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1.323180284752845, 1.323180284752845);
      complex0.acos();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(1168);
      complex0.getArgument();
      complex2.getField();
      Complex complex3 = new Complex(20.0, 0.27342069149017334);
      Complex complex4 = new Complex(1057.849);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex4.sqrt1z();
      complex6.log();
      complex3.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.subtract(0.27342069149017334);
      Complex complex9 = new Complex(1057.849);
      complex2.divide(complex8);
      complex9.add(complex1);
      Complex complex10 = Complex.valueOf(0.27342069149017334, 20.0);
      Complex complex11 = new Complex((-286.723219903353));
      complex11.log();
      Complex complex12 = new Complex(0.7853981633974483);
      complex12.divide(1.323180284752845);
      complex5.negate();
      complex7.multiply(1.0);
      Complex complex13 = new Complex((-3081.627055284735), (-5497.954923838923));
      complex13.sqrt1z();
      complex11.conjugate();
      complex10.multiply(1.8482842445373535);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      complex0.getField();
      Complex complex1 = new Complex(1.5645672698520312E274, 0.0);
      Complex complex2 = new Complex(2.0, 1.0000000130118387);
      Complex complex3 = new Complex(1.5645672698520312E274, 2.0);
      complex3.sqrt1z();
      complex0.tanh();
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(945);
      complex2.getArgument();
      complex2.getField();
      Complex complex3 = new Complex(1168, 708.0);
      Complex complex4 = complex3.tan();
      complex3.sqrt1z();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.subtract(0.12470348179340363);
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex4.divide(complex3);
      Complex complex9 = complex5.add(complex8);
      Complex.valueOf(0.27342069149017334, Double.NaN);
      Complex complex10 = complex2.log();
      complex5.divide((-5.399407578676462E11));
      complex6.negate();
      complex10.multiply(708.0);
      complex0.sqrt1z();
      complex9.conjugate();
      complex7.multiply((-1245.119));
      Complex complex11 = Complex.I;
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.getArgument();
      complex0.getField();
      complex0.tan();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.subtract((-2.9727391847700346E-4));
      Complex complex4 = new Complex(0.27342069149017334);
      Complex complex5 = complex1.divide(complex0);
      complex5.log();
      complex5.divide((-3757.6));
      Complex complex6 = Complex.INF;
      complex0.negate();
      complex0.multiply(3.141592653589793);
      complex2.tan();
      complex3.add(1690.428492);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1681.95), (-1.0));
      Complex complex1 = complex0.multiply(1663.182);
      complex1.I.conjugate();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.INF.createComplex((-1681.95), (-3823.75));
      complex1.NaN.getField();
      complex2.ZERO.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.NaN.tan();
      Complex complex6 = complex1.multiply(905);
      complex4.nthRoot(905);
      complex4.ZERO.multiply(complex3);
      complex1.getField();
      complex4.INF.subtract(complex1);
      Complex complex7 = complex4.cosh();
      complex7.hashCode();
      complex1.createComplex(4207.5846747, 2869.848680812413);
      Complex complex8 = complex7.exp();
      complex7.INF.reciprocal();
      complex6.acos();
      complex6.tan();
      complex8.add((-1.0));
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.multiply(complex1);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.NaN.atan();
      complex4.multiply(1155);
      Complex complex7 = complex0.log();
      complex7.tanh();
      complex4.sqrt();
      complex5.readResolve();
      complex2.atan();
      complex6.add(2368.9125);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-734806.61256464));
      Complex complex2 = complex1.acos();
      complex0.multiply(1168);
      complex1.getArgument();
      complex2.getField();
      Complex complex3 = complex2.exp();
      complex3.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.log();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 1.323180284752845);
      complex5.divide(1.323180284752845);
      Complex complex6 = Complex.INF;
      complex4.negate();
      complex1.multiply(1.323180284752845);
      Complex complex7 = Complex.NaN;
      complex7.tan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.acos();
      Complex complex1 = new Complex(4.23606797749979, Double.NaN);
      complex0.toString();
      Complex complex2 = complex1.add(6.63595840453991E235);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex.valueOf(0.0);
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1323.5807, (-3442.49417));
      complex1.I.negate();
      complex1.exp();
      Complex complex2 = new Complex(1323.5807, 0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1526.99));
      Complex complex1 = Complex.valueOf(0.0, (-2.9726830960751796E-9));
      Complex complex2 = complex0.multiply(complex1);
      complex2.getArgument();
      Complex complex3 = complex2.divide((-877410.510209));
      Complex complex4 = Complex.valueOf((-2618.132623117), 1384.89);
      complex4.nthRoot(2144);
      Complex complex5 = new Complex(1949);
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex6.ZERO.pow(complex2);
      complex3.divide(complex5);
      Complex complex8 = complex3.subtract((-877410.510209));
      complex0.sqrt1z();
      complex3.add((-2.9726830960751796E-9));
      Complex complex9 = new Complex(2.0);
      Object object0 = new Object();
      complex8.equals(object0);
      Complex complex10 = complex1.log();
      complex3.readResolve();
      complex2.atan();
      complex1.getReal();
      complex9.readResolve();
      complex7.sqrt1z();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-734806.61256464));
      Complex complex2 = complex1.acos();
      complex0.multiply(1168);
      complex1.getArgument();
      complex2.getField();
      Complex complex3 = new Complex((-734806.61256464), 0.27342069149017334);
      Complex complex4 = Complex.I;
      complex4.asin();
      complex3.sinh();
      complex4.negate();
      // Undeclared exception!
      complex1.nthRoot(5775);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.2092), (-857.2092));
      complex0.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex0.INF.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.pow((-3711592.9025));
      complex2.divide(complex8);
      Complex complex9 = complex3.add(complex8);
      Complex complex10 = complex5.add((double) 1);
      Complex.valueOf((-1385.0));
      complex10.readResolve();
      Complex complex11 = complex4.sin();
      complex11.nthRoot(184);
      Complex.valueOf(426.44);
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.ONE;
      complex9.getImaginary();
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1323.5807, (-3442.49417));
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex1.divide(complex3);
      complex4.subtract((-3442.49417));
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.add(1926.55);
      Complex complex7 = Complex.ZERO;
      complex7.equals(complex2);
      Complex complex8 = complex5.log();
      Complex complex9 = Complex.ZERO;
      complex9.tanh();
      complex8.getArgument();
      Complex complex10 = Complex.ZERO;
      complex8.divide(complex7);
      Complex complex11 = Complex.ONE;
      complex1.readResolve();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0760536193847656);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(1431655765);
      complex1.getArgument();
      complex0.getField();
      Complex complex3 = new Complex(9.894571625944288E-229, 1431655765);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.sinh();
      complex5.negate();
      complex3.nthRoot(1209);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex6.subtract(complex7);
      complex4.divide(complex2);
      Complex complex9 = complex3.subtract((-775.478698099));
      complex1.sqrt1z();
      complex3.add((-1.0));
      complex6.equals(complex5);
      Complex complex10 = Complex.I;
      complex10.log();
      Complex complex11 = Complex.ZERO;
      complex11.tanh();
      complex9.getArgument();
      Complex complex12 = Complex.ZERO;
      complex8.divide(complex2);
      Complex complex13 = Complex.ONE;
      complex4.readResolve();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.2092), (-857.2092));
      complex0.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.tan();
      complex4.INF.pow(complex0);
      complex4.sqrt1z();
      complex0.INF.tanh();
      Complex complex5 = complex1.NaN.pow((-857.2092));
      complex5.INF.divide(complex2);
      complex5.add(complex0);
      complex1.add((-857.2092));
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.INF.readResolve();
      Complex complex7 = complex0.sin();
      Complex.valueOf(2.0);
      Object object0 = new Object();
      complex7.equals(object0);
      complex7.divide(Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-734806.61256464));
      Complex complex2 = complex1.acos();
      complex0.multiply(1168);
      complex1.getArgument();
      complex2.getField();
      Complex complex3 = new Complex((-734806.61256464), 0.27342069149017334);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex4.negate();
      complex1.nthRoot(3528);
      Complex complex8 = complex1.reciprocal();
      complex0.subtract(complex1);
      Complex complex9 = complex1.divide(complex5);
      Complex complex10 = complex6.subtract((-734806.61256464));
      complex0.sqrt1z();
      complex7.add((double) 3528);
      complex9.equals(complex10);
      complex5.log();
      Complex complex11 = complex0.tanh();
      complex11.getArgument();
      Complex complex12 = Complex.ZERO;
      complex12.divide(complex1);
      Complex complex13 = Complex.ONE;
      complex0.readResolve();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(129.117685242778, 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.I.multiply(2194);
      complex0.NaN.getArgument();
      complex0.INF.getField();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex4.I.negate();
      complex5.nthRoot(2194);
      Complex complex6 = complex4.NaN.reciprocal();
      Complex complex7 = complex3.ZERO.subtract(complex2);
      Complex complex8 = complex2.NaN.divide(complex6);
      Complex complex9 = complex7.subtract(748.843893823);
      complex9.I.sqrt1z();
      complex3.ONE.add(3308.0);
      complex0.equals(complex0);
      complex2.log();
      complex1.tanh();
      complex2.getArgument();
      complex2.divide(complex1);
      Complex complex10 = Complex.ONE;
      complex0.INF.sqrt1z();
      complex8.readResolve();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2055.9279667854));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.pow(complex1);
      complex1.NaN.getArgument();
      Complex complex4 = complex3.add(complex1);
      complex3.ONE.hashCode();
      complex4.exp();
      complex4.INF.hashCode();
      Complex complex5 = Complex.valueOf((-2055.9279667854), 1323.5807);
      complex5.I.divide((-2812.8216217743));
      complex0.I.sinh();
      Complex complex6 = complex3.add(complex1);
      complex6.ZERO.getArgument();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex7.I.add((-2055.9279667854));
      Complex complex9 = complex8.conjugate();
      complex8.tanh();
      complex1.tanh();
      complex3.ONE.getField();
      Complex complex10 = complex6.INF.pow(complex0);
      complex10.INF.divide((-2055.9279667854));
      complex6.pow((-2055.9279667854));
      complex0.negate();
      Complex complex11 = complex6.divide(Double.NaN);
      complex11.ZERO.subtract(complex8);
      complex4.multiply(complex6);
      complex6.I.getField();
      Complex complex12 = complex1.exp();
      complex9.abs();
      complex2.add((-2003.435169952));
      complex12.tan();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.2092), (-857.2092));
      complex0.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.tan();
      complex4.sqrt1z();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex1.NaN.pow((-857.2092));
      Complex complex7 = complex6.INF.divide(complex2);
      complex6.add(complex0);
      Complex complex8 = complex1.add((-857.2092));
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.INF.readResolve();
      Complex complex10 = complex0.sin();
      Complex.valueOf(2.0);
      Object object0 = new Object();
      complex10.equals(object0);
      Complex complex11 = new Complex(1, Double.POSITIVE_INFINITY);
      Complex complex12 = complex1.tanh();
      complex12.NaN.atan();
      Complex complex13 = Complex.valueOf((-857.2092));
      complex13.ZERO.getArgument();
      Complex complex14 = complex12.INF.reciprocal();
      complex5.add(complex9);
      complex8.getArgument();
      complex14.divide(complex7);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(129.117685242778, 0.0);
      Complex complex1 = complex0.INF.acos();
      complex0.NaN.getArgument();
      complex0.INF.getField();
      Complex complex2 = new Complex(129.117685242778, 0.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex4.I.negate();
      complex5.nthRoot(2194);
      Complex.valueOf(Double.NaN);
      Complex complex6 = complex4.NaN.reciprocal();
      Complex complex7 = complex3.ZERO.subtract(complex2);
      complex1.NaN.divide(complex6);
      Complex complex8 = complex7.subtract(748.843893823);
      Complex complex9 = complex8.I.sqrt1z();
      complex3.ONE.add(3308.0);
      complex0.equals(complex2);
      complex1.log();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex4.sqrt();
      complex9.readResolve();
      complex2.atan();
      complex0.getReal();
      complex1.readResolve();
      complex10.sqrt1z();
      complex11.acos();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2702.604851783), (-2702.604851783));
      Complex complex1 = complex0.add((-2702.604851783));
      Complex complex2 = complex1.INF.divide((-2702.604851783));
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.ONE.conjugate();
      complex4.INF.hashCode();
      Complex complex5 = complex0.reciprocal();
      complex2.equals(complex1);
      complex5.abs();
      complex1.isInfinite();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex2.add(2232948.118325579);
      complex6.readResolve();
      Complex complex8 = new Complex(2.0896888605749563E-8, 0.0);
      Complex complex9 = complex1.multiply(complex8);
      complex8.sqrt1z();
      Complex complex10 = Complex.valueOf(0.0, (-3980.4572867688703));
      complex10.atan();
      complex7.getArgument();
      complex9.divide(complex1);
      Complex complex11 = Complex.ONE;
      complex0.readResolve();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(complex0);
      Complex complex2 = complex1.NaN.divide((-2055.9279667854));
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex2.INF.multiply(936);
      Complex complex5 = complex0.reciprocal();
      complex4.ZERO.cos();
      complex5.I.tanh();
      complex1.hashCode();
      complex1.ZERO.sqrt1z();
      complex3.getImaginary();
      Complex complex6 = complex0.add(complex4);
      complex4.getArgument();
      complex1.divide(complex6);
      Complex complex7 = (Complex)complex0.readResolve();
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(320.9812037561047, 3384.9);
      Complex complex1 = complex0.createComplex(3384.9, 320.9812037561047);
      Complex complex2 = complex1.NaN.createComplex(3384.9, 320.9812037561047);
      complex2.I.reciprocal();
      complex1.INF.getField();
      complex1.INF.nthRoot(405);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.divide(320.9812037561047);
      Complex complex6 = complex3.subtract(3384.9);
      complex2.tanh();
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.2092), (-857.2092));
      complex0.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex(0.7071067811865476, 14.83771);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.subtract(complex3);
      complex2.divide(complex3);
      Complex complex5 = complex4.createComplex((-906.5116253), (-857.2092));
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.negate();
      Complex complex8 = complex4.multiply(complex3);
      Complex complex9 = complex5.tan();
      Complex complex10 = Complex.INF;
      complex10.multiply(complex4);
      Complex complex11 = complex7.negate();
      complex4.atan();
      Complex complex12 = complex8.multiply((-372522497));
      complex7.log();
      complex2.tanh();
      complex0.sqrt();
      complex8.readResolve();
      Complex complex13 = complex12.atan();
      Complex complex14 = Complex.NaN;
      complex14.getReal();
      complex11.readResolve();
      complex13.sqrt1z();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1499.22770858));
      Complex complex1 = Complex.valueOf((-1494.3052293041));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.pow(complex1);
      complex3.I.sqrt();
      complex2.ZERO.reciprocal();
      complex1.equals("");
      complex0.abs();
      Complex complex4 = complex1.tanh();
      complex4.isInfinite();
      complex1.ZERO.tanh();
      Complex.valueOf((-1499.22770858), (-1499.22770858));
      complex3.cosh();
      complex4.negate();
      Complex complex5 = complex3.cosh();
      Complex complex6 = new Complex(1519.0, (-0.9977962771183698));
      complex6.hashCode();
      Complex complex7 = complex4.sqrt1z();
      complex6.INF.pow(complex1);
      complex5.acos();
      complex7.multiply(1499.22770858);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(129.117685242778, 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.I.multiply(2194);
      complex0.NaN.getArgument();
      complex0.INF.getField();
      Complex complex3 = new Complex(129.117685242778, 0.0);
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex5.I.negate();
      complex6.nthRoot(2194);
      Complex complex7 = complex5.NaN.reciprocal();
      Complex complex8 = complex4.ZERO.subtract(complex3);
      complex2.NaN.divide(complex7);
      Complex complex9 = complex8.subtract(748.843893823);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.multiply(complex10);
      complex11.NaN.sin();
      complex10.I.cosh();
      Complex complex12 = complex8.negate();
      complex10.atan();
      complex3.multiply(1155);
      Complex complex13 = Complex.ONE;
      complex13.log();
      complex5.tanh();
      complex1.sqrt();
      complex12.readResolve();
      complex2.atan();
      complex6.getReal();
      complex5.readResolve();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(1323.5807, (-3442.49417));
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.conjugate();
      complex0.getReal();
      Complex complex5 = complex2.multiply(293.284189);
      complex3.getField();
      complex0.sinh();
      complex2.readResolve();
      Complex complex6 = complex4.cos();
      Complex complex7 = new Complex(0.9999998043346715);
      complex2.nthRoot(2216);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex3.add(complex5);
      Complex complex10 = complex9.pow(complex1);
      Complex complex11 = complex10.subtract(293.284189);
      Complex complex12 = new Complex(0.026573165219863526);
      Complex complex13 = complex7.multiply(3438.4698892602273);
      complex6.subtract((-959.927344));
      complex11.pow(complex7);
      complex13.acos();
      complex11.getArgument();
      complex6.sinh();
      complex8.log();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-936.703));
      complex1.isNaN();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.subtract(complex0);
      complex0.divide(complex1);
      Complex complex4 = complex1.createComplex(6.283185307179586, (-906.5116253));
      Complex complex5 = complex1.negate();
      complex1.multiply(complex3);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex4.negate();
      Complex complex9 = complex4.atan();
      complex3.multiply(1155);
      Complex complex10 = complex6.log();
      complex10.tanh();
      complex5.sqrt();
      complex5.getArgument();
      complex8.reciprocal();
      complex6.add(complex2);
      Complex complex11 = Complex.INF;
      complex11.getArgument();
      complex6.divide(complex9);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-936.703));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(622.89945475);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex3.pow(622.89945475);
      complex1.divide(complex0);
      complex6.add(complex2);
      complex6.add((-20.0));
      Complex complex9 = Complex.valueOf(2.712977886199951);
      complex0.readResolve();
      Complex complex10 = complex4.sin();
      Complex.valueOf((-20.0));
      complex5.I.multiply(444);
      Object object0 = new Object();
      complex1.equals((Object) null);
      Complex complex11 = complex9.divide((-20.0));
      complex5.tanh();
      complex2.atan();
      Complex complex12 = Complex.valueOf(622.89945475);
      complex9.getArgument();
      Complex complex13 = complex8.reciprocal();
      complex12.add(complex11);
      complex10.getArgument();
      complex13.divide(complex6);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.2092), (-857.2092));
      complex0.nthRoot(1);
      complex0.isNaN();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.subtract(complex2);
      complex0.divide(complex3);
      Complex complex4 = complex3.createComplex((-857.2092), 562.981507828817);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.multiply(complex4);
      complex0.negate();
      Complex complex9 = Complex.valueOf(0.49999999999999994, 453.0);
      complex9.atan();
      Complex complex10 = complex8.multiply(409);
      complex0.log();
      Complex complex11 = complex0.tanh();
      complex11.sqrt();
      complex10.readResolve();
      complex5.atan();
      complex6.getReal();
      complex7.readResolve();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.negate();
      complex2.ONE.sin();
      Complex complex3 = complex1.ZERO.divide(complex0);
      complex3.ONE.hashCode();
      Complex complex4 = complex1.exp();
      complex4.NaN.readResolve();
      int int0 = (-2146429372);
      try { 
        complex1.NaN.nthRoot((-2146429372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,146,429,372
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1499.22770858));
      Complex complex1 = Complex.valueOf((-1494.3052293041));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.divide((-1499.22770858));
      Complex complex4 = new Complex((-1499.22770858));
      Complex complex5 = complex4.add((-1494.3052293041));
      Complex complex6 = complex3.add(797.9734635);
      Complex complex7 = Complex.valueOf((-1494.3052293041), (-1499.22770858));
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex7.cos();
      complex5.tanh();
      complex9.hashCode();
      Complex complex10 = complex6.sqrt1z();
      complex6.getImaginary();
      complex8.add(complex10);
      complex8.divide(complex6);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2055.9279667854));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.pow(complex3);
      complex0.sqrt();
      Complex complex5 = Complex.valueOf((-2055.9279667854));
      complex5.reciprocal();
      Object object0 = complex4.readResolve();
      complex5.equals(object0);
      complex1.abs();
      complex5.tanh();
      Complex complex6 = Complex.INF;
      complex6.isInfinite();
      Complex complex7 = new Complex((-2055.9279667854));
      Complex complex8 = complex7.tanh();
      complex8.add((-1600.602));
      complex5.readResolve();
      complex4.multiply(complex6);
      complex1.sqrt1z();
      complex5.atan();
      complex1.multiply(17);
      complex7.subtract(1905.530609818765);
      complex5.pow(266.79929);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3152.3), (-3152.3));
      Complex complex1 = new Complex((-1390.590658903));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.add(7.091600108064668E-8);
      Complex complex5 = complex3.createComplex(579.128973, 907.5116253);
      Complex complex6 = complex2.subtract(complex4);
      Complex complex7 = complex5.ONE.sin();
      complex7.NaN.readResolve();
      complex1.readResolve();
      complex0.toString();
      Complex complex8 = complex0.multiply(579.128973);
      Complex complex9 = complex0.divide(907.5116253);
      complex4.acos();
      complex9.sqrt1z();
      complex6.getField();
      complex5.tanh();
      Complex complex10 = new Complex(7.091600108064668E-8, 1339.148957);
      complex10.getArgument();
      Complex complex11 = complex5.multiply(complex8);
      complex11.hashCode();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      complex1.INF.nthRoot(771);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.tan();
      complex2.sinh();
      Complex complex4 = complex2.add(1.0);
      Complex complex5 = complex0.reciprocal();
      complex3.sqrt();
      complex5.abs();
      complex3.cos();
      Complex complex6 = new Complex(1.0, 1.0);
      Complex complex7 = complex4.subtract(complex6);
      complex7.getArgument();
      Complex complex8 = complex7.cos();
      complex4.sinh();
      complex1.add(1.0);
      complex8.reciprocal();
      complex1.hashCode();
      Complex.valueOf((-1.0), -0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex0.add((-2260.7));
      Complex complex4 = complex3.reciprocal();
      complex1.readResolve();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex4.log();
      complex6.getArgument();
      complex5.equals((Object) null);
      complex4.log();
      complex5.asin();
      complex4.tan();
      complex3.add(2.0);
      complex6.INF.exp();
      complex6.subtract((-20.0));
      complex4.acos();
      complex3.cosh();
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ONE.tan();
      complex3.INF.sinh();
      Complex complex4 = complex2.ZERO.add(5916.17554724119);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.INF.sqrt();
      complex6.abs();
      Complex complex7 = complex5.ONE.cos();
      Complex complex8 = new Complex(5916.17554724119, 5916.17554724119);
      complex7.ZERO.subtract(complex8);
      complex1.getArgument();
      complex5.cos();
      complex5.tanh();
      complex1.sqrt();
      complex1.readResolve();
      Complex complex9 = complex0.atan();
      complex8.getReal();
      complex9.readResolve();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sinh();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ONE.tan();
      complex2.INF.sinh();
      Complex complex3 = complex1.ZERO.add(5916.17554724119);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.INF.sqrt();
      complex5.abs();
      Complex complex6 = complex4.ONE.cos();
      complex6.ONE.add(complex4);
      Complex complex7 = new Complex(5916.17554724119, 5916.17554724119);
      complex6.cosh();
      Complex.valueOf(Double.NaN, 187.2);
      Complex complex8 = Complex.I;
      complex8.getArgument();
      complex6.getReal();
      Complex complex9 = complex4.sin();
      complex0.createComplex((-936.703), 34.62721396621111);
      Complex complex10 = complex9.multiply((-430));
      Complex complex11 = new Complex((-936.703), 1.0);
      complex11.subtract((-936.703));
      complex11.add(complex10);
      Complex complex12 = new Complex(187.2);
      complex12.conjugate();
      complex5.conjugate();
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(129.117685242778, 0.0);
      complex0.INF.acos();
      Complex complex1 = complex0.I.multiply(2194);
      complex0.NaN.getArgument();
      complex0.INF.getField();
      Complex complex2 = new Complex(129.117685242778, 0.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex4.I.negate();
      complex5.nthRoot(2194);
      Complex complex6 = complex4.NaN.reciprocal();
      Complex complex7 = complex3.ZERO.subtract(complex2);
      complex1.NaN.divide(complex6);
      Complex complex8 = complex7.subtract(748.843893823);
      Complex complex9 = complex8.I.sqrt1z();
      complex3.ONE.add(3308.0);
      complex0.equals(complex2);
      complex2.getArgument();
      complex2.equals(complex0);
      complex3.asin();
      complex1.readResolve();
      Complex complex10 = complex3.pow(complex6);
      Complex.valueOf(0.0);
      Complex.valueOf((double) 2194);
      complex9.nthRoot(2194);
      complex2.toString();
      complex9.getReal();
      complex8.equals(complex4);
      complex7.isInfinite();
      complex8.cos();
      complex10.log();
      complex2.sqrt();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3.38056220084887E-4, 1864.3478819902);
      Complex complex2 = Complex.valueOf(1353.86473453);
      Complex complex3 = Complex.valueOf(1353.86473453);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.add(3.7001340388087556E-5);
      Complex complex7 = complex0.createComplex((-314.274634), 8.773871924560652);
      complex2.subtract(complex5);
      complex6.readResolve();
      complex1.toString();
      Complex complex8 = complex7.multiply(1864.3478819902);
      Complex complex9 = new Complex(1237.4896363, 3.7001340388087556E-5);
      complex9.divide(1712.466076473561);
      complex4.acos();
      complex8.sqrt1z();
      complex6.getField();
      complex3.tanh();
      complex6.getArgument();
      Complex complex10 = complex0.multiply(complex5);
      complex6.hashCode();
      complex6.cosh();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.3641341460419062E-7));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = complex3.add(0.9999999428589943);
      Complex complex5 = complex1.add(2610.501177589973);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.multiply(1431655765);
      Complex complex8 = new Complex(2610.501177589973, (-2055.9279667854));
      complex5.cos();
      Complex complex9 = complex4.tanh();
      complex7.hashCode();
      complex5.sqrt1z();
      complex4.getImaginary();
      complex9.add(complex0);
      complex1.getArgument();
      complex8.divide(complex5);
      Complex complex10 = new Complex(399.0, (-2055.9279667854));
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.2092), (-857.2092));
      complex0.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sqrt1z();
      complex0.INF.tanh();
      Complex complex6 = complex1.NaN.pow((-857.2092));
      complex6.INF.divide(complex2);
      complex6.add(complex0);
      complex1.add((-857.2092));
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.INF.readResolve();
      Complex complex8 = complex0.sin();
      Complex.valueOf(2.0);
      Object object0 = new Object();
      complex8.equals(object0);
      complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex9.NaN.atan();
      Complex.valueOf((-857.2092));
      complex9.INF.reciprocal();
      complex0.createComplex(3.601718675118614E-8, Double.POSITIVE_INFINITY);
      Complex complex11 = complex3.pow(complex10);
      Complex complex12 = Complex.ZERO;
      complex8.pow(complex12);
      complex0.cosh();
      complex11.sqrt();
      complex5.add((-1089.5));
      complex10.getReal();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-936.703));
      complex0.isNaN();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex0.readResolve();
      Complex complex3 = complex2.add((-936.703));
      Complex complex4 = complex3.divide((-936.703));
      Complex complex5 = Complex.ZERO;
      complex5.subtract(complex3);
      complex3.subtract(2992.6014627610166);
      complex4.sin();
      Complex complex6 = complex4.multiply(2264);
      complex6.exp();
      complex0.cosh();
      Complex.valueOf(39.97498435543818, 2992.6014627610166);
      complex5.getArgument();
      Complex complex7 = Complex.ONE;
      complex7.getReal();
      Complex complex8 = Complex.I;
      complex8.sin();
      Complex complex9 = complex7.createComplex(0.0, (-340.1350923040575));
      complex9.multiply(1334);
      complex8.add(complex5);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.conjugate();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(424.64);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.createComplex(6.283185307179586, (-477.651774833));
      complex2.tanh();
      complex2.nthRoot(1);
      Complex complex5 = Complex.valueOf(424.64);
      complex1.readResolve();
      Complex complex6 = complex2.conjugate();
      complex2.getReal();
      complex6.multiply(6.283185307179586);
      complex4.getField();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.tan();
      Complex complex9 = complex4.sinh();
      complex5.readResolve();
      Complex complex10 = complex9.cos();
      complex2.nthRoot(1);
      Complex complex11 = complex0.negate();
      complex5.add(complex8);
      complex9.pow(complex10);
      Complex complex12 = complex11.subtract(2.0);
      complex7.multiply((-477.651774833));
      complex10.subtract((-1.0));
      complex4.pow(complex12);
      complex0.acos();
      complex3.getArgument();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1237.4896363);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.tan();
      complex0.hashCode();
      complex0.abs();
      complex2.exp();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex((-1466.06797732));
      Complex complex6 = complex4.subtract(complex5);
      complex3.subtract(complex2);
      complex4.hashCode();
      Complex complex7 = Complex.NaN;
      complex7.hashCode();
      complex1.conjugate();
      Complex complex8 = Complex.valueOf(129.117685242778, 129.117685242778);
      Complex complex9 = Complex.ZERO;
      complex8.negate();
      Complex complex10 = Complex.ZERO;
      complex10.hashCode();
      complex9.sqrt1z();
      complex6.acos();
      Complex complex11 = Complex.ONE;
      complex11.multiply(1.0386032577072378E209);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex1.reciprocal();
      complex1.sqrt();
      complex3.abs();
      Complex complex5 = complex2.cos();
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      Complex complex7 = complex1.subtract(complex0);
      complex4.getArgument();
      complex5.cos();
      complex7.sinh();
      complex6.add((-1.0));
      complex3.reciprocal();
      complex5.hashCode();
      Complex.valueOf(2080.46, 2080.46);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.INF.sinh();
      complex2.ZERO.add(5916.17554724119);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.sqrt1z();
      complex5.multiply(complex2);
      complex5.reciprocal();
      complex4.readResolve();
      complex6.getField();
      complex2.readResolve();
      Complex complex7 = Complex.valueOf(5916.17554724119);
      complex7.atan();
      Complex complex8 = Complex.I;
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2046.94432), 3362.578283380573);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.createComplex((-2046.94432), 0.0);
      complex0.ONE.readResolve();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.negate();
      complex3.NaN.readResolve();
      Complex complex6 = complex5.NaN.cosh();
      complex2.ZERO.getArgument();
      complex6.NaN.conjugate();
      Complex complex7 = complex4.INF.exp();
      complex1.NaN.add(complex6);
      complex7.NaN.log();
      complex4.multiply(0.0);
      complex2.ONE.conjugate();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex2.divide((-233.3));
      complex7.ONE.atan();
      Complex complex10 = complex4.multiply(2.0169027167169864E-7);
      complex10.tanh();
      complex6.conjugate();
      complex7.isInfinite();
      complex9.nthRoot(1);
      complex8.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(424.64);
      Complex complex1 = complex0.NaN.tan();
      complex1.I.readResolve();
      Complex complex2 = complex1.ONE.add(424.64);
      complex0.I.divide(424.64);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex3.subtract(424.64);
      complex3.INF.sin();
      Complex complex5 = complex2.INF.multiply((-957));
      Complex complex6 = complex5.INF.exp();
      complex0.INF.cosh();
      Complex complex7 = Complex.valueOf(424.64, (-1270.0));
      complex0.getArgument();
      complex7.getReal();
      complex0.sin();
      Complex complex8 = complex6.createComplex(0.0, (-1.0));
      complex8.multiply((-957));
      complex0.add(complex4);
      complex1.conjugate();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(1323.5807, (-3442.49417));
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.multiply(complex1);
      complex3.ONE.tan();
      Complex complex5 = complex4.ONE.multiply(complex2);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.NaN.atan();
      complex6.INF.multiply(1155);
      Complex complex8 = complex0.log();
      complex8.tanh();
      complex3.sqrt();
      complex4.readResolve();
      Complex complex9 = complex0.atan();
      complex9.getReal();
      complex9.readResolve();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = Complex.ZERO;
      complex1.equals(complex3);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.ONE.multiply(3590);
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.NaN.multiply(complex7);
      Complex complex9 = complex2.sqrt();
      complex9.INF.hashCode();
      Complex complex10 = complex3.multiply(complex0);
      complex10.isInfinite();
      complex4.getReal();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex11.ZERO.multiply(3590);
      complex0.multiply(203.479465549);
      complex3.sinh();
      Complex complex13 = Complex.valueOf(4.3594621428644293E-23, 4.3594621428644293E-23);
      Complex complex14 = complex4.tan();
      Complex complex15 = complex0.asin();
      Complex complex16 = complex13.negate();
      complex16.ZERO.pow(complex9);
      complex15.pow(complex14);
      Complex complex17 = complex8.subtract(0.6366197723675814);
      complex17.ZERO.conjugate();
      Complex complex18 = complex15.cosh();
      complex18.pow(Double.POSITIVE_INFINITY);
      complex5.multiply((-1));
      complex3.readResolve();
      try { 
        complex12.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-2702.604851783), (-2702.604851783));
      Complex complex1 = complex0.add((-2702.604851783));
      complex1.INF.divide((-2702.604851783));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ONE.conjugate();
      complex3.INF.hashCode();
      complex3.ONE.abs();
      Complex complex4 = complex2.ZERO.exp();
      complex2.ONE.subtract(complex0);
      complex4.subtract(complex2);
      complex4.INF.hashCode();
      complex3.INF.hashCode();
      complex2.ZERO.conjugate();
      Complex complex5 = Complex.valueOf(1911.41006115, (-2702.604851783));
      complex5.I.cosh();
      complex5.NaN.negate();
      complex5.ONE.cosh();
      complex1.hashCode();
      complex5.sqrt1z();
      complex1.acos();
      complex0.multiply((-2702.604851783));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1237.4896363);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.ONE.add(315.0);
      Complex complex5 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex6 = complex0.INF.subtract(complex1);
      complex6.readResolve();
      complex1.I.toString();
      Complex complex7 = complex6.I.multiply(0.0);
      complex6.I.divide((-875.0));
      complex1.NaN.acos();
      Complex complex8 = complex0.sqrt1z();
      complex0.getField();
      complex6.tanh();
      complex5.getArgument();
      complex6.multiply(complex8);
      complex4.hashCode();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(3360.1903221, 3360.1903221);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-936.703));
      complex0.isNaN();
      complex1.INF.multiply(complex0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.createComplex(6.283185307179586, (-906.5116253));
      complex3.INF.tanh();
      complex3.nthRoot(1);
      Complex complex5 = Complex.valueOf(1886.7943454);
      complex5.INF.readResolve();
      Complex complex6 = complex3.conjugate();
      complex0.getReal();
      Complex complex7 = complex3.multiply(1886.7943454);
      complex7.ONE.getField();
      Complex complex8 = complex7.ZERO.tan();
      complex4.sinh();
      complex1.readResolve();
      Complex complex9 = complex6.INF.cos();
      complex9.ONE.nthRoot(1);
      Complex complex10 = complex5.negate();
      Complex complex11 = complex6.add(complex8);
      Complex complex12 = complex11.pow(complex2);
      complex12.subtract((-3219.369508));
      complex12.ONE.multiply((double) 1);
      complex10.I.subtract((-906.5116253));
      complex1.pow(complex4);
      complex6.acos();
      complex10.getArgument();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2055.9279667854));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.NaN.divide((-2055.9279667854));
      Complex complex4 = complex2.add(0.0);
      complex1.NaN.add((double) 936);
      Complex complex5 = complex3.INF.multiply(936);
      Complex complex6 = complex0.reciprocal();
      complex5.ZERO.cos();
      complex6.I.tanh();
      complex2.hashCode();
      complex2.ZERO.sqrt1z();
      complex4.getImaginary();
      Complex complex7 = complex1.add(complex5);
      complex5.getArgument();
      complex2.divide(complex7);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide((-1789.11207));
      complex0.sqrt1z();
      Complex.valueOf((-1789.11207));
      Complex complex2 = complex1.I.asin();
      complex2.I.cosh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.ZERO.asin();
      complex1.NaN.readResolve();
      Complex complex5 = complex0.multiply((-5436.409));
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex5.I.divide(complex4);
      complex7.sqrt1z();
      Complex complex8 = complex5.ZERO.negate();
      complex8.I.divide(complex4);
      complex1.isInfinite();
      complex3.conjugate();
      complex1.toString();
      complex3.exp();
      complex5.negate();
      complex0.divide(1642.198765199532);
      complex7.getArgument();
      Complex complex9 = complex6.sinh();
      Complex.valueOf((-5436.409), (-1789.11207));
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1499.22770858));
      Complex complex1 = Complex.valueOf((-1494.3052293041));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.pow(complex1);
      complex3.I.sqrt();
      Complex complex4 = complex2.ZERO.reciprocal();
      complex1.equals("");
      complex0.abs();
      Complex complex5 = complex1.tanh();
      complex5.isInfinite();
      complex1.ZERO.tanh();
      Complex complex6 = complex5.add(1920.54);
      complex5.readResolve();
      complex1.multiply(complex4);
      complex6.sqrt1z();
      complex4.atan();
      Complex complex7 = complex4.multiply((-4040));
      complex7.I.subtract((-1499.22770858));
      complex0.pow(266.79929);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.ONE.add(3879.863);
      complex1.NaN.add((-1762.044));
      complex0.I.exp();
      Complex complex2 = complex1.NaN.multiply((-1762.044));
      complex2.ZERO.exp();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.NaN.multiply(0.0);
      complex3.ZERO.add(complex2);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.ONE.negate();
      Complex complex6 = complex2.NaN.createComplex(0.6032907962799072, 0.0);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.pow(0.0);
      complex6.I.sqrt1z();
      complex4.ZERO.readResolve();
      Complex complex9 = complex4.sqrt1z();
      complex9.INF.sqrt1z();
      complex4.toString();
      Complex complex10 = complex1.I.add(complex0);
      Complex complex11 = complex2.atan();
      Complex complex12 = complex8.exp();
      Complex complex13 = complex1.sqrt();
      complex13.INF.sqrt1z();
      Complex complex14 = complex7.tanh();
      complex14.ONE.tanh();
      complex12.ONE.createComplex(0.48430514335632324, 0.0);
      complex2.log();
      complex6.getArgument();
      complex8.getField();
      complex11.multiply(1.8428773880004883);
      complex8.abs();
      complex12.sqrt1z();
      complex10.add(1.8428773880004883);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.3829498291015625);
      complex0.I.hashCode();
      Complex complex2 = complex1.ONE.exp();
      complex1.I.pow(221.1);
      complex0.I.nthRoot(1);
      Complex complex3 = complex0.I.subtract((double) 1);
      complex2.INF.acos();
      complex3.ZERO.readResolve();
      complex3.sqrt();
      complex3.ONE.getArgument();
      complex0.nthRoot(1963);
      Complex complex4 = complex0.atan();
      complex4.I.abs();
      complex4.isNaN();
      complex4.hashCode();
      complex1.divide(4.050833763855709E-193);
      complex2.divide((double) 1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.acos();
      Complex complex1 = Complex.NaN;
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.INF.sqrt1z();
      complex2.sqrt1z();
      complex1.NaN.multiply(complex2);
      Complex complex3 = complex0.reciprocal();
      complex3.ONE.readResolve();
      complex1.ZERO.getField();
      complex3.readResolve();
      complex1.atan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.pow(0.0);
      complex2.acos();
      int int0 = 0;
      Complex.valueOf(0.0, (-123.4391834));
      complex2.NaN.tanh();
      try { 
        complex2.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ONE.tan();
      complex3.INF.sinh();
      Complex complex4 = complex2.ZERO.add(5916.17554724119);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.INF.sqrt();
      complex6.abs();
      Complex complex7 = complex5.ONE.cos();
      Complex complex8 = new Complex(5916.17554724119, 5916.17554724119);
      complex7.ZERO.subtract(complex8);
      complex1.getArgument();
      Complex complex9 = complex5.cos();
      complex0.NaN.sinh();
      complex9.I.add(0.0);
      complex4.reciprocal();
      complex5.hashCode();
      Complex.valueOf(2080.46, 2080.46);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(2.425402115319395E-188, (-1816.3998582649));
      complex0.getArgument();
      Complex complex1 = complex0.add((-1816.3998582649));
      Complex complex2 = complex1.INF.tan();
      complex0.getReal();
      complex0.isNaN();
      complex0.negate();
      complex2.divide((-6.221897889344726E-8));
      try { 
        complex2.nthRoot((-787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -787
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = null;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      complex1.log();
      Complex complex2 = complex0.multiply(48);
      Complex complex3 = complex2.ZERO.asin();
      complex3.INF.conjugate();
      complex3.NaN.divide((double) 48);
      complex0.isNaN();
      complex2.getArgument();
      Complex complex4 = complex1.add((-783.1062));
      complex4.NaN.add(complex3);
      Complex complex5 = complex4.ZERO.pow(0.0);
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex6.cosh();
      complex4.conjugate();
      Complex complex8 = complex3.ONE.add(0.0);
      complex2.equals("");
      complex2.ONE.hashCode();
      complex3.abs();
      Complex complex9 = Complex.valueOf((-1633.293997141819));
      Complex complex10 = complex7.exp();
      Complex complex11 = complex9.multiply(complex6);
      Complex complex12 = complex11.add(complex10);
      Complex complex13 = complex8.conjugate();
      complex3.pow(complex12);
      complex13.subtract(0.0);
      complex5.isInfinite();
      complex2.pow(3431.4);
      Object object0 = new Object();
      complex5.equals(object0);
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-394.5698969), (-394.5698969));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.exp();
      complex0.ONE.getField();
      Complex complex3 = complex0.NaN.createComplex((-394.5698969), (-884.0));
      complex3.ZERO.pow(complex2);
      Complex complex4 = complex2.INF.tan();
      complex4.abs();
      Complex.valueOf((-394.5698969));
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex4.sinh();
      Complex complex8 = Complex.ZERO;
      complex7.pow(complex8);
      complex7.multiply(complex0);
      complex6.createComplex(Double.NaN, 696.7958644863035);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(365.07197827, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.divide(365.07197827);
      Complex complex5 = complex3.ONE.multiply(complex2);
      complex0.abs();
      Complex complex6 = complex3.ONE.divide(complex0);
      Complex complex7 = complex6.NaN.pow(complex2);
      Complex complex8 = complex6.I.log();
      Complex complex9 = complex0.divide(complex3);
      complex9.NaN.add(complex1);
      Complex complex10 = complex9.acos();
      Complex complex11 = Complex.valueOf((-1.0), 0.0);
      Complex.valueOf(687.1126);
      Complex complex12 = complex10.acos();
      complex1.equals(complex12);
      complex1.I.add(687.1126);
      Complex complex13 = complex1.cosh();
      complex11.getArgument();
      complex12.asin();
      complex13.add(complex7);
      Complex complex14 = complex5.subtract(complex8);
      complex12.getArgument();
      complex14.cosh();
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(253.0);
      complex0.I.getField();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.acos();
      complex1.ZERO.getField();
      Complex complex4 = complex3.subtract((-1417.253));
      Complex complex5 = complex2.ONE.negate();
      complex4.NaN.log();
      complex4.NaN.reciprocal();
      complex4.sqrt();
      Complex complex6 = complex1.cos();
      complex6.ZERO.log();
      complex3.ONE.acos();
      Complex complex7 = Complex.valueOf(253.0, 1442.181786742615);
      complex7.ONE.sqrt();
      complex4.conjugate();
      Complex complex8 = complex1.createComplex(1, 1442.181786742615);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex9.multiply(complex5);
      complex10.sqrt1z();
      complex0.exp();
      complex8.pow((-1417.253));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(485.0, 485.0);
      Complex complex1 = complex0.INF.pow(0.0);
      complex1.ZERO.toString();
      complex0.getArgument();
      Complex complex2 = complex0.log();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.cos();
      complex2.INF.abs();
      complex2.INF.log();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.I.sinh();
      complex4.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex3.NaN.tan();
      complex0.abs();
      Complex complex5 = complex0.multiply(20.0);
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex3.cos();
      complex8.I.abs();
      complex1.subtract(20.0);
      Complex complex9 = complex1.asin();
      Complex complex10 = complex1.createComplex(612.90982306, (-105.3901221));
      complex10.I.multiply(complex0);
      Complex complex11 = complex9.tan();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex11.I.sin();
      complex1.sqrt1z();
      Complex complex14 = complex9.ONE.conjugate();
      complex14.ZERO.multiply(1009);
      complex0.getReal();
      complex4.equals(complex3);
      complex13.cos();
      complex5.getField();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex12.multiply((-105.3901221));
      complex7.tanh();
      Complex.valueOf((-1.5967172745329108E-8), 1.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = new Complex((-20.0));
      complex1.subtract(complex0);
      Complex complex2 = complex1.NaN.sqrt();
      complex2.ZERO.subtract(0.0);
      Complex complex3 = Complex.I;
      complex1.ONE.pow(complex3);
      Complex complex4 = complex0.pow(complex1);
      complex0.ONE.toString();
      Complex complex5 = complex4.cos();
      complex4.ONE.subtract(complex0);
      complex5.pow((-5153.7));
      Complex complex6 = complex0.asin();
      complex1.ZERO.conjugate();
      Complex.valueOf((-2.260957518848075E-281));
      Complex complex7 = complex1.pow(complex6);
      complex7.ONE.pow((-5153.7));
      Complex complex8 = complex0.atan();
      complex8.I.exp();
      Complex.valueOf((-20.0), (-567.4856268049));
      complex1.sin();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex9.ONE.subtract(complex1);
      complex10.NaN.divide((-5313.311213839));
      complex5.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1101.0223663015502, (-292.11803578063));
      Complex complex1 = Complex.valueOf(Double.NaN, 1101.0223663015502);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.multiply(1101.0223663015502);
      Complex complex4 = complex3.I.sqrt();
      complex4.NaN.sinh();
      Complex.valueOf(1.4521887058451231E-183, (-1152.0));
      Complex complex5 = complex1.multiply(1686);
      complex2.toString();
      Complex complex6 = complex3.INF.multiply(complex5);
      complex6.NaN.toString();
      complex5.hashCode();
      complex3.conjugate();
      complex1.multiply((-292.11803578063));
      complex1.sqrt1z();
      complex5.asin();
      complex1.sqrt();
      Complex complex7 = complex1.log();
      complex5.nthRoot(1686);
      complex7.createComplex(1499.038226436, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      double double0 = 136.383;
      Complex complex0 = Complex.valueOf(136.383);
      complex0.ONE.getField();
      complex0.ZERO.multiply((-1207.15503916));
      try { 
        complex0.NaN.nthRoot((-3562));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,562
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      complex1.INF.nthRoot(771);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.add((double) 771);
      Complex complex4 = complex1.ONE.reciprocal();
      complex4.NaN.readResolve();
      Complex complex5 = complex0.pow(complex1);
      complex5.ONE.log();
      complex2.getArgument();
      complex0.equals((Object) null);
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex7.I.tan();
      assertEquals(0.7615941559557649, complex8.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      complex5.ONE.add(0.0);
      Complex complex9 = complex6.ONE.subtract(369.9895226);
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex0.cosh();
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex1.divide(complex5);
      complex4.readResolve();
      Complex complex12 = complex6.NaN.cos();
      complex4.abs();
      complex10.getField();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals((-368.9895226), complex9.getReal(), 0.01);
      
      complex1.readResolve();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex13.sin();
      complex14.INF.add(complex2);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex3.divide(complex13);
      assertEquals(1.0, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex4.acos();
      assertNotSame(complex1, complex12);
      assertTrue(complex16.equals((Object)complex6));
      assertTrue(complex16.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.add(complex1);
      assertSame(complex3, complex2);
      
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.sqrt();
      complex4.tanh();
      complex5.getField();
      assertEquals(1.2261911708835171, complex5.getImaginary(), 0.01);
      
      Complex complex7 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex8 = complex7.ZERO.pow(0.0);
      assertNotSame(complex8, complex1);
      
      Complex.valueOf(0.0);
      Complex complex9 = complex0.divide(complex6);
      assertEquals(0.5666094845368946, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex6.atan();
      assertEquals(0.9383571628118327, complex10.getReal(), 0.01);
      assertEquals(0.42407963875593185, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(533.1327459660328);
      assertFalse(complex0.isInfinite());
      assertEquals(533.1327459660328, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      
      complex0.isNaN();
      assertFalse(complex0.equals((Object)complex1));
  }
}
