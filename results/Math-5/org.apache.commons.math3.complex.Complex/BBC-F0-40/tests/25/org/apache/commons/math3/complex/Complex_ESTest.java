/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:20:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.7211316452521414E287, Double.POSITIVE_INFINITY);
      complex1.multiply((-2271));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.7211316452521414E287);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = new Complex(20.0, 20.0);
      complex0.INF.nthRoot(904);
      Complex complex2 = complex0.INF.divide((-2581.7));
      complex2.ONE.divide((double) 904);
      complex2.ZERO.sinh();
      complex2.ZERO.createComplex(904, -0.0);
      Complex complex3 = complex0.I.atan();
      complex2.INF.getField();
      complex3.abs();
      Complex complex4 = complex1.tan();
      complex4.NaN.toString();
      complex1.readResolve();
      complex3.ONE.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.multiply(904);
      Complex complex7 = new Complex(-0.0, 0.0);
      complex6.conjugate();
      Complex.valueOf(158.20219075456467);
      complex1.log();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.sqrt1z();
      complex0.INF.nthRoot(904);
      Complex complex2 = complex0.INF.divide((-2581.7));
      complex2.ONE.divide((double) 904);
      complex2.ZERO.sinh();
      complex2.ZERO.createComplex(904, -0.0);
      Complex complex3 = complex0.I.atan();
      complex2.INF.getField();
      complex3.abs();
      Complex complex4 = complex1.tan();
      complex4.NaN.toString();
      complex1.readResolve();
      complex3.ONE.getArgument();
      complex3.INF.sinh();
      Complex.valueOf((-239.9051));
      Complex complex5 = complex3.sinh();
      complex5.I.atan();
      complex0.tan();
      complex1.multiply(870);
      complex0.tanh();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(3070.4, (-20.0));
      Complex complex3 = complex2.multiply((-5258.93));
      complex1.multiply((-20.0));
      Complex complex4 = new Complex((-5258.93), (-2.7656304266482398E7));
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.subtract(complex2);
      Complex complex7 = complex4.pow((-540.18));
      complex2.hashCode();
      complex1.asin();
      Complex.valueOf(1.5475352461180591E-4);
      Complex complex8 = complex3.subtract(2420.81506674);
      Complex complex9 = complex6.tanh();
      complex1.divide(2.132561280632217E-4);
      complex9.acos();
      Complex complex10 = complex7.tan();
      complex0.add((-5258.93));
      complex8.acos();
      complex9.abs();
      complex9.toString();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow((-540.18));
      complex1.INF.sinh();
      Complex complex3 = Complex.valueOf(2395.2);
      Complex complex4 = complex3.asin();
      Complex.valueOf(1283.5311691);
      complex3.subtract(1283.5311691);
      complex3.tanh();
      Complex complex5 = complex4.divide(2420.81506674);
      complex2.acos();
      complex1.tan();
      Complex complex6 = complex2.add(1283.5311691);
      complex6.toString();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(351);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = Complex.valueOf(2308.512466056, 2308.512466056);
      complex2.add(complex4);
      complex2.I.tan();
      Complex complex5 = complex4.add((-1249.6));
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex5.subtract((-1249.6));
      Complex complex8 = Complex.valueOf((-0.999999549211363), (-0.999999549211363));
      Complex complex9 = complex8.INF.add((-1249.6));
      complex9.ONE.asin();
      complex6.ZERO.multiply((-4548));
      complex2.I.multiply((-1249.6));
      complex3.add((-1442.9465628182438));
      Complex complex10 = complex8.ZERO.sqrt1z();
      complex10.INF.cos();
      complex6.multiply(complex3);
      Complex complex11 = complex7.cos();
      complex11.ONE.add(complex2);
      complex3.sqrt();
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex12.INF.conjugate();
      complex13.I.pow((-12.41544734030846));
      Complex complex14 = complex5.atan();
      complex14.acos();
      complex0.multiply(complex7);
      Complex complex15 = complex12.tanh();
      complex15.abs();
      Complex.valueOf(1273.81751178);
      Complex.valueOf((-3.2729975288116946));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
      complex2.sqrt();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      complex3.I.createComplex(5.380185921962174E-32, Double.POSITIVE_INFINITY);
      complex0.pow(complex2);
      Complex complex4 = Complex.NaN;
      complex4.negate();
      complex1.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      complex0.tan();
      Complex complex1 = Complex.INF;
      complex0.divide(Double.NaN);
      Complex complex2 = Complex.I;
      complex2.tan();
      complex2.multiply((-1200.017807));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.ZERO.acos();
      complex0.ZERO.abs();
      Complex complex5 = complex1.NaN.sqrt();
      Complex complex6 = complex0.reciprocal();
      complex6.I.divide(Double.POSITIVE_INFINITY);
      complex1.conjugate();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex4.tanh();
      complex2.multiply(complex1);
      Complex.valueOf(0.0);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex7.multiply(complex2);
      complex4.NaN.cos();
      Complex complex9 = complex1.multiply(2.0);
      complex9.INF.subtract(complex8);
      complex7.NaN.add(complex0);
      complex9.sin();
      complex7.tan();
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-1643.3833647204));
      Complex complex1 = Complex.valueOf((-0.9999988795405049), 0.0014969695168321785);
      complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.NaN;
      complex2.I.subtract(complex3);
      Complex complex4 = complex1.I.multiply(0.0014969695168321785);
      complex4.INF.add(Double.NaN);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.I.cos();
      complex7.ZERO.createComplex(1357.764602, 0.0014969695168321785);
      Complex complex8 = complex6.sinh();
      complex3.abs();
      complex7.reciprocal();
      complex3.tanh();
      Complex complex9 = complex0.conjugate();
      complex9.sinh();
      complex0.add((-2367.114672));
      complex8.multiply(1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.INF;
      complex2.tanh();
      complex2.INF.divide((-2106.3399692));
      complex1.tan();
      complex2.multiply(2629.586167498206);
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.pow((-520.40216932));
      Complex complex2 = Complex.valueOf((-520.40216932), Double.POSITIVE_INFINITY);
      complex2.multiply((-520.40216932));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1696.9035985794183);
      Complex complex1 = complex0.INF.exp();
      complex1.INF.add(complex0);
      Complex complex2 = complex0.ZERO.multiply(421);
      complex2.NaN.negate();
      Complex complex3 = complex2.createComplex(699.61452, (-499.8346041387437));
      Complex complex4 = complex3.add(699.61452);
      Complex complex5 = complex0.INF.cos();
      complex0.ONE.cosh();
      complex0.ONE.readResolve();
      complex5.NaN.divide(complex4);
      complex0.readResolve();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      complex0.exp();
      complex0.reciprocal();
      complex1.multiply((-3315.380632529));
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.reciprocal();
      Complex complex2 = Complex.ZERO;
      complex2.multiply(1901.7340426557);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4940857547850743E-194);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.reciprocal();
      complex1.multiply(4.4940857547850743E-194);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.pow(complex1);
      complex1.sinh();
      complex3.log();
      Complex.valueOf((-1658.6), (-1658.6));
      Complex complex4 = complex1.multiply(complex1);
      complex3.atan();
      complex4.getImaginary();
      Complex complex5 = Complex.valueOf((-1658.6));
      complex5.multiply((-2106.3399692));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      complex0.isNaN();
      Complex complex1 = new Complex((-2106.3399692), (-2106.3399692));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex((-20.0), 626.5565070083);
      complex3.tanh();
      complex1.sinh();
      Complex complex4 = Complex.valueOf((-1366.237305326709));
      complex2.cosh();
      complex4.divide(0.41421356237309515);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex0.pow(complex1);
      complex2.asin();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.createComplex(6.283185307179586, Double.NaN);
      Complex complex5 = complex4.add(6.283185307179586);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.NaN.multiply(complex6);
      complex7.ONE.sinh();
      Complex complex8 = complex6.INF.add(complex3);
      Complex complex9 = Complex.ZERO;
      complex8.I.multiply(complex9);
      complex5.toString();
      Complex complex10 = complex0.divide(complex1);
      complex10.I.exp();
      complex10.multiply((-2444));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(-0.0, Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.isNaN();
      complex0.getImaginary();
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.subtract(Double.POSITIVE_INFINITY);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      complex1.abs();
      complex1.isNaN();
      Complex complex2 = Complex.NaN;
      complex2.getImaginary();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-20.0));
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex4.subtract(Double.POSITIVE_INFINITY);
      complex3.asin();
      complex3.abs();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ONE;
      complex2.add((-1.7976931348623157E308));
      complex1.equals(complex0);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex0.INF.abs();
      complex0.nthRoot(1);
      complex2.isNaN();
      complex0.sinh();
      Complex.valueOf(2463.9528077, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex1.ZERO.sqrt();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.atan();
      Complex.valueOf((-2620.66543), 2195.944369714);
      complex3.sqrt();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.INF;
      complex0.tanh();
      complex2.divide(complex1);
      complex4.toString();
      complex3.hashCode();
      Complex.valueOf(716.8530424171618, 2195.944369714);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tanh();
      complex3.INF.divide(complex1);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.reciprocal();
      Object object0 = new Object();
      complex0.hashCode();
      Complex complex5 = Complex.valueOf(Double.NaN, 2390.0);
      complex5.subtract((-1.0292817180691822E123));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(5.057644039851163E11, 5.057644039851163E11);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = new Complex(5.057644039851163E11, 0.0);
      complex1.abs();
      complex3.isNaN();
      complex1.getImaginary();
      Complex complex5 = Complex.valueOf(1.0);
      complex5.multiply((-227.04649));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3626.573939693));
      Complex complex1 = complex0.divide(0.0);
      complex0.abs();
      complex0.I.pow(20.0);
      complex1.isNaN();
      complex1.getImaginary();
      complex0.divide(complex1);
      Complex complex2 = complex0.multiply((-196.1));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1488.4705460059906, 1488.4705460059906);
      complex0.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex1.INF.reciprocal();
      complex4.nthRoot(1);
      Complex complex5 = complex4.NaN.subtract((-1476.29808));
      complex0.I.hashCode();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.ONE.multiply(1);
      complex7.log();
      Complex complex8 = complex5.ZERO.multiply(complex4);
      complex3.NaN.cos();
      Complex complex9 = complex0.log();
      Complex complex10 = complex9.ZERO.exp();
      complex10.ONE.asin();
      Complex complex11 = complex1.divide(2106.3399692);
      complex0.multiply(complex5);
      complex11.divide(complex3);
      Complex complex12 = complex3.subtract(1382.0396408412);
      complex12.ONE.getField();
      Complex complex13 = complex9.exp();
      Complex complex14 = complex9.tanh();
      complex14.readResolve();
      complex13.multiply(10.439547391502282);
      complex2.tanh();
      complex8.log();
      complex13.divide((-1736.921083998273));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      complex1.readResolve();
      Complex complex2 = Complex.I;
      complex2.pow(complex1);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.pow(complex2);
      Complex.valueOf(1.0420741620847422E-16, (-2082.271457));
      Complex complex5 = complex0.pow(complex4);
      complex4.multiply(complex3);
      complex5.sqrt();
      complex5.negate();
      Complex complex6 = Complex.ZERO;
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2812.204731448), (-3.30101656090905E173));
      Complex complex2 = complex1.add((-3.30101656090905E173));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.tanh();
      complex0.reciprocal();
      complex3.add(complex2);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-1725));
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.getImaginary();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.INF;
      complex5.INF.readResolve();
      Complex complex6 = Complex.ZERO;
      complex2.atan();
      complex5.abs();
      Complex complex7 = complex4.pow(complex5);
      Object object0 = new Object();
      complex3.tanh();
      complex4.reciprocal();
      complex1.add(complex7);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      Complex complex1 = complex0.INF.add((-2106.3399692));
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = Complex.INF;
      complex1.tanh();
      complex1.divide(complex4);
      complex0.toString();
      complex2.hashCode();
      Complex.valueOf((-2106.3399692), 0.7316888570785522);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3071.44), (-3071.44));
      complex0.getArgument();
      complex0.getField();
      Complex complex1 = new Complex(613.29307, (-2.356194490192345));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(7.6927415825689E-8, 0.9999999999999996);
      Complex complex2 = complex1.INF.multiply(7.6927415825689E-8);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex4.INF.add(complex5);
      Complex complex7 = complex6.ZERO.sin();
      complex7.INF.atan();
      complex7.I.cosh();
      complex4.abs();
      complex3.NaN.getArgument();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex1.isNaN();
      Complex complex9 = complex5.add((-0.9999996833130385));
      complex1.abs();
      complex0.sin();
      complex9.INF.subtract(complex6);
      complex3.getArgument();
      complex9.divide(104.0);
      complex5.pow(1.0000000000000024);
      complex9.reciprocal();
      complex3.divide(3174.5639879);
      complex1.log();
      complex8.exp();
      Complex.valueOf(1.0000000000000024);
      complex2.exp();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-3626.573939693), (-3626.573939693));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.I;
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.tan();
      complex2.divide((-3626.573939693));
      Complex complex3 = Complex.valueOf(362.9046167, (-2231.7666747129));
      Complex complex4 = complex1.sinh();
      complex2.pow((-2231.7666747129));
      Complex complex5 = Complex.valueOf((-3626.573939693));
      Complex complex6 = complex5.sin();
      complex4.multiply(1315133923);
      Complex complex7 = (Complex)complex3.readResolve();
      Complex complex8 = complex6.add(complex7);
      Complex complex9 = new Complex((-2231.7666747129), (-1343.2302701));
      complex8.divide((-719.731));
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1292.1846118748));
      Complex complex1 = new Complex(1.0, (-501.5));
      Complex complex2 = complex1.add(1.0);
      Complex complex3 = complex2.sqrt1z();
      complex3.tanh();
      complex1.subtract(complex3);
      complex0.reciprocal();
      Complex complex4 = Complex.valueOf((-501.5), Double.NaN);
      complex4.pow(1.0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ONE;
      complex5.equals(complex7);
      Complex complex8 = new Complex(8873336.131698912, 438.19574591);
      complex1.equals(complex8);
      Complex complex9 = new Complex((-1.0), 1292.1846118748);
      Complex complex10 = new Complex(1292.1846118748, Double.NaN);
      Complex complex11 = Complex.I;
      complex10.pow(complex11);
      Complex complex12 = complex6.sqrt1z();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-3626.573939693), (-3626.573939693));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide(1.446257098752E12);
      complex0.readResolve();
      Complex complex4 = complex3.divide((-1200.017807));
      Complex complex5 = Complex.valueOf(362.9046167, (-2231.7666747129));
      Complex complex6 = complex1.sinh();
      complex2.pow((-2231.7666747129));
      Complex.valueOf((-3626.573939693));
      complex1.sin();
      Complex complex7 = complex6.multiply(1315133923);
      complex5.readResolve();
      Complex.valueOf((-719.731), Double.NaN);
      complex2.pow((-2231.7666747129));
      Complex complex8 = complex7.tanh();
      complex8.INF.multiply(complex5);
      Complex complex9 = Complex.ZERO;
      complex9.equals(complex0);
      complex4.equals(complex3);
      Complex complex10 = new Complex(Double.NaN, 46.24276818880625);
      complex10.pow(complex4);
      Complex complex11 = complex3.sqrt1z();
      Complex complex12 = new Complex(0.5156965255737305);
      complex12.cosh();
      complex11.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      complex0.INF.add((-2106.3399692));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = Complex.ONE;
      complex0.equals(complex2);
      complex1.getArgument();
      complex2.getArgument();
      Complex complex3 = Complex.valueOf((-1031.8072068), 251499.25);
      Complex complex4 = complex1.tanh();
      complex2.sqrt1z();
      complex2.atan();
      Complex complex5 = Complex.valueOf((-20.0));
      complex4.equals(complex5);
      Complex complex6 = Complex.valueOf((-20.0));
      complex6.conjugate();
      complex3.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.reciprocal();
      complex8.getReal();
      Complex complex9 = Complex.NaN;
      complex9.subtract(1.5707963267948966);
      Complex complex10 = new Complex(1.5707963267948966);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-1725));
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.getImaginary();
      Complex complex3 = complex0.log();
      complex3.tan();
      Complex complex4 = Complex.INF;
      complex4.INF.readResolve();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.tanh();
      complex0.subtract(complex6);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.reciprocal();
      Object object0 = new Object();
      complex6.equals(complex5);
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex.valueOf((-1292.1846118748));
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.add((-1292.1846118748));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.subtract((-6.680679913078676E139));
      complex2.getReal();
      Complex complex4 = Complex.valueOf(0.2409527599811554);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex1.divide(0.06246116757392883);
      complex5.multiply((-1292.1846118748));
      Complex complex7 = complex3.cosh();
      complex7.abs();
      complex6.pow(6174.047399764553);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-3626.573939693), (-3626.573939693));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide(1.446257098752E12);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.divide((-1200.017807));
      Complex complex5 = Complex.valueOf(362.9046167, (-2231.7666747129));
      Complex complex6 = complex1.sinh();
      complex2.pow((-2231.7666747129));
      Complex.valueOf((-3626.573939693));
      complex1.sin();
      Complex complex7 = complex6.multiply(1315133923);
      complex5.readResolve();
      Complex.valueOf((-719.731), Double.NaN);
      complex2.pow((-2231.7666747129));
      complex7.tanh();
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex0);
      complex0.equals(object0);
      Complex complex9 = new Complex(Double.NaN, 46.24276818880625);
      complex9.pow(complex4);
      Complex complex10 = complex3.sqrt1z();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      complex0.ZERO.multiply(complex1);
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      Complex complex3 = complex2.INF.add((-1.0));
      complex0.NaN.sin();
      Complex complex4 = complex1.I.pow(0.0);
      Complex complex5 = complex4.I.add(0.0);
      complex5.I.cosh();
      Complex complex6 = complex0.multiply((-2138.3936097636715));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = Complex.valueOf((-1.0));
      complex9.I.pow(complex1);
      complex0.abs();
      complex4.pow(complex3);
      complex8.equals(";jaSPr!&uv'aNaexT'/");
      complex1.getArgument();
      complex3.getArgument();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex0.sqrt1z();
      complex11.I.atan();
      complex8.I.divide(9.008499734799015E-141);
      complex0.equals(complex10);
      Complex.valueOf((-1.0));
      complex10.conjugate();
      complex8.sqrt();
      complex5.getReal();
      complex4.subtract((-1188.9086475385));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.9260317944365246E-8);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.exp();
      complex2.sqrt();
      complex0.reciprocal();
      Complex complex3 = Complex.valueOf(3.9260317944365246E-8);
      Complex complex4 = Complex.NaN;
      complex4.pow(complex2);
      // Undeclared exception!
      complex3.I.nthRoot(88548828);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(953.217925996, 953.217925996);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(502997.49999900605);
      complex0.readResolve();
      Complex complex3 = complex2.divide(502997.49999900605);
      Complex complex4 = Complex.valueOf(1.908818244934082, 2.3789334438756013E245);
      Complex complex5 = complex1.sinh();
      Complex.valueOf(20.0);
      complex5.pow(4.965082971466472E-4);
      Complex complex6 = Complex.valueOf(6.283185307179586);
      complex6.ZERO.readResolve();
      complex1.sin();
      Complex complex7 = complex1.multiply((-1547));
      complex3.nthRoot(107);
      complex2.readResolve();
      Complex complex8 = Complex.valueOf(2359.24, 2.3789334438756013E245);
      Complex complex9 = complex8.pow(794.290349575194);
      complex7.tanh();
      complex0.equals("not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})");
      complex9.equals(complex3);
      complex4.pow(complex5);
      complex3.sqrt1z();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      complex0.getImaginary();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.multiply(complex0);
      complex3.toString();
      complex0.acos();
      Complex complex4 = complex0.subtract(7.529170882336924E-162);
      complex4.NaN.abs();
      Complex complex5 = Complex.INF;
      complex5.nthRoot(4197);
      Complex complex6 = new Complex(1, 7.529170882336924E-162);
      complex6.multiply(4197);
      complex1.sinh();
      complex5.divide(2006.0);
      complex2.multiply(7.529170882336924E-162);
      complex1.cosh();
      Complex.valueOf(501.50099700780623, 2006.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      Complex complex1 = Complex.valueOf((-2106.3399692));
      Complex complex2 = complex0.add((-20.0));
      Complex complex3 = complex2.pow((-2442.003676997));
      Complex complex4 = new Complex((-106.0539032463437), (-2106.3399692));
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex5.add(complex3);
      complex6.ONE.divide((-2442.003676997));
      complex3.subtract((-2106.3399692));
      complex6.nthRoot(4221);
      complex4.pow(1499.3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1752011936438014));
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Object object0 = new Object();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      complex1.sinh();
      complex2.pow(complex1);
      Complex complex4 = Complex.valueOf((-1205.66059844812), 86.9923822013);
      Complex complex5 = complex1.pow(complex4);
      complex2.multiply(complex5);
      Complex complex6 = Complex.valueOf((-1205.66059844812), 2422.3753);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = Complex.ZERO;
      complex8.negate();
      Complex complex9 = Complex.ONE;
      complex9.tanh();
      Complex complex10 = complex7.divide(complex3);
      complex6.toString();
      complex10.hashCode();
      Complex.valueOf(86.9923822013, (-4398.43));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.multiply((-2138.3936097636715));
      Complex complex7 = complex5.exp();
      complex5.sqrt();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = Complex.valueOf(0.8414709848078965);
      Complex complex10 = complex4.pow(complex3);
      complex6.atan();
      Complex complex11 = Complex.ONE;
      complex11.abs();
      complex9.pow(complex4);
      complex7.equals(complex3);
      complex2.getArgument();
      complex1.getArgument();
      complex8.tanh();
      complex9.sqrt1z();
      complex1.atan();
      complex10.equals(complex8);
      Complex.valueOf(0.479425538604203);
      complex9.conjugate();
      Complex complex12 = Complex.valueOf(0.8414709848078965);
      complex12.createComplex(0.8414709848078965, (-2138.3936097636715));
      complex12.sqrt();
      complex0.getReal();
      complex6.subtract((-345.29259439982));
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.ONE.divide(0.0);
      Complex complex4 = complex1.NaN.add(0.0);
      Complex complex5 = complex2.log();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.conjugate();
      complex7.ZERO.atan();
      Complex complex8 = Complex.INF;
      complex5.I.sqrt();
      complex7.NaN.sin();
      Complex complex9 = complex8.NaN.asin();
      complex1.equals(complex8);
      Complex complex10 = complex8.I.conjugate();
      complex10.NaN.sinh();
      complex6.ZERO.exp();
      complex10.NaN.multiply(1);
      complex1.toString();
      complex8.getArgument();
      complex3.abs();
      Complex complex11 = complex6.exp();
      complex11.ZERO.abs();
      complex7.readResolve();
      complex4.cosh();
      complex9.abs();
      Complex complex12 = complex5.pow(0.0);
      complex12.ONE.atan();
      complex0.multiply(2919.69843);
      Complex.valueOf(0.0, 3.3212950284273017E149);
      complex9.reciprocal();
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(102.665307323, 1634.889564);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide((-3141.68));
      complex2.readResolve();
      Complex complex3 = complex1.divide(1.446257098752E12);
      Complex complex4 = Complex.valueOf(1.446257098752E12, (-4362.3834716));
      complex4.sinh();
      Complex complex5 = complex4.pow((-864.0));
      Complex complex6 = Complex.valueOf(0.043007105588912964);
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.sin();
      Complex complex9 = complex4.multiply(1);
      complex0.readResolve();
      Complex.valueOf((-1.0), 102.665307323);
      complex6.pow(0.0);
      complex0.tanh();
      Object object0 = new Object();
      complex5.equals(object0);
      Object object1 = new Object();
      complex3.equals(object1);
      complex9.pow(complex1);
      Complex complex10 = Complex.INF;
      complex10.sqrt1z();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.043007105588912964);
      Complex complex1 = complex0.sin();
      complex0.abs();
      complex0.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cosh();
      complex2.getArgument();
      Complex complex4 = Complex.valueOf((-1669740.0711660278));
      complex4.tanh();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex1.cosh();
      complex5.add(complex4);
      Complex complex7 = complex5.conjugate();
      complex5.getField();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex6.createComplex(886.80176157867, 0.043007105588912964);
      Complex.valueOf(9.477336194017523E-20);
      Complex complex10 = complex9.tan();
      complex8.sqrt1z();
      complex7.atan();
      complex6.exp();
      Complex.valueOf(9.477336194017523E-20);
      complex9.multiply((-2538));
      complex10.cosh();
      complex10.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(7262);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.ZERO;
      complex3.getImaginary();
      Complex complex4 = complex2.log();
      complex1.tan();
      Complex complex5 = complex4.multiply(complex1);
      complex4.toString();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.acos();
      Complex complex8 = complex5.subtract(2.0);
      complex6.nthRoot(37);
      Complex complex9 = Complex.valueOf((-2710.536606362302));
      complex9.multiply(2053505224);
      complex5.sinh();
      complex8.divide((double) 1);
      complex9.multiply((double) 37);
      complex7.cosh();
      Complex.valueOf(608.681769337963, (-29.51393465543751));
      complex5.multiply(602);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1292.1846118748));
      Complex complex1 = complex0.ZERO.add((-1292.1846118748));
      complex0.isNaN();
      Complex complex2 = complex0.tanh();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex1.sinh();
      complex4.I.pow(complex5);
      Complex.valueOf((-2449.34161458), (-0.9999988022102128));
      complex4.pow(complex0);
      Complex complex6 = complex5.negate();
      complex3.tanh();
      complex0.divide(complex3);
      complex6.toString();
      complex5.hashCode();
      Complex.valueOf((-1.0), (-1910.5744101250389));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      complex1.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.sinh();
      complex0.pow(complex2);
      Complex complex5 = Complex.valueOf((-1634.889564), (-1910.5744101250389));
      Complex complex6 = complex3.pow(complex4);
      complex2.NaN.multiply(complex3);
      Complex complex7 = Complex.valueOf((-1634.889564), (-1634.889564));
      complex7.sqrt();
      complex7.negate();
      complex6.tanh();
      complex1.divide(complex5);
      complex0.toString();
      complex4.hashCode();
      Complex.valueOf(3520.635018, 2012.5591376019);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1206.68960077), 1358.764602);
      Complex complex1 = complex0.add((-329.093));
      complex1.sqrt1z();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf((-329.093), 0.0);
      complex3.subtract(complex0);
      Complex complex4 = complex2.reciprocal();
      complex4.add(complex2);
      complex4.divide((-760.2));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(3044.62705330174);
      Complex complex1 = Complex.valueOf((-20.0), (-3311.64));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1292.1846118748));
      Complex complex1 = complex0.ZERO.add((-1292.1846118748));
      complex0.isNaN();
      Complex complex2 = complex0.tanh();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex1.sinh();
      complex4.I.pow(complex5);
      Complex complex6 = Complex.valueOf((-1910.5744101250389), (-1.0));
      Complex complex7 = complex5.NaN.pow(complex4);
      complex0.tan();
      complex7.sqrt1z();
      Complex complex8 = complex3.atan();
      complex2.exp();
      complex8.atan();
      complex6.multiply(1957);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3141.68));
      Complex complex1 = complex0.ZERO.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.I.cosh();
      complex3.ONE.getArgument();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.ZERO.add(complex4);
      Complex complex8 = complex7.INF.conjugate();
      complex8.getField();
      Complex complex9 = complex5.acos();
      complex9.ZERO.createComplex((-3141.68), (-3141.68));
      Complex.valueOf(0.0);
      Complex complex10 = complex4.negate();
      Complex complex11 = Complex.INF;
      complex11.tanh();
      complex10.divide(complex1);
      complex3.toString();
      complex6.hashCode();
      Complex.valueOf(0.0, 1692.05307);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3141.68));
      Complex complex1 = complex0.ZERO.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.I.cosh();
      complex3.ONE.getArgument();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.ZERO.add(complex4);
      Complex complex8 = complex7.INF.conjugate();
      complex8.getField();
      Complex complex9 = complex5.acos();
      complex9.ZERO.createComplex((-3141.68), (-3141.68));
      Complex.valueOf(0.0);
      complex6.isNaN();
      complex3.subtract((-3141.68));
      Complex.valueOf(0.0);
      complex5.conjugate();
      Complex complex10 = Complex.valueOf(0.0, (-3141.68));
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.divide(0.0);
      complex3.INF.abs();
      complex3.nthRoot(1);
      complex0.log();
      Complex complex4 = complex1.tan();
      complex4.sqrt1z();
      Complex complex5 = Complex.valueOf((-2471.0), 2906.6064022996);
      complex5.atan();
      Complex complex6 = complex3.exp();
      complex5.atan();
      complex6.multiply((-2538));
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.I.createComplex(2349.829011828908, 2349.829011828908);
      Complex complex3 = complex0.subtract((-6.1633417615076335E35));
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add(0.0);
      complex0.INF.sqrt1z();
      complex0.I.add((-3510.24));
      complex0.NaN.reciprocal();
      Complex complex2 = Complex.valueOf(270.39949378469, 270.39949378469);
      complex2.I.tanh();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf((-2929.4477));
      complex3.cos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.add(270.39949378469);
      complex4.subtract(1080.36352377599);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.abs();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.divide(0.0);
      complex3.INF.abs();
      complex3.nthRoot(1);
      complex0.log();
      complex2.isNaN();
      complex2.subtract((double) 1);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.conjugate();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.INF.multiply((-1636.78903402));
      complex3.I.abs();
      Complex complex4 = complex0.ONE.log();
      complex0.getField();
      Complex complex5 = Complex.valueOf(1.0);
      complex3.getImaginary();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.INF.multiply(692);
      complex1.ZERO.abs();
      Complex complex8 = complex2.ZERO.multiply(0);
      complex8.ONE.acos();
      Complex complex9 = complex8.multiply(complex3);
      Complex complex10 = Complex.valueOf((double) 0);
      complex9.INF.divide(complex10);
      Complex complex11 = complex2.atan();
      complex11.getReal();
      Complex complex12 = complex11.acos();
      complex0.divide(complex9);
      Complex complex13 = complex12.pow(complex7);
      complex5.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      complex0.INF.hashCode();
      complex0.toString();
      Complex complex1 = complex0.cos();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(0.0, 324.0);
      complex2.INF.getArgument();
      complex2.readResolve();
      complex2.NaN.createComplex(324.0, 0.0);
      Complex complex3 = complex1.atan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.reciprocal();
      complex0.isInfinite();
      Complex complex2 = Complex.valueOf(2367.397302);
      complex1.INF.hashCode();
      complex2.INF.asin();
      complex2.sqrt1z();
      complex1.ONE.exp();
      complex0.NaN.exp();
      Complex complex3 = complex1.divide(1525.84293372);
      complex0.getImaginary();
      complex1.negate();
      complex3.abs();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(4009.09, 4009.09);
      complex0.INF.cosh();
      Complex complex1 = complex0.sqrt1z();
      complex1.multiply(778);
      complex1.NaN.abs();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.I.multiply((double) 778);
      complex3.NaN.tan();
      Complex complex4 = complex2.I.divide(complex0);
      complex4.INF.sin();
      Complex complex5 = complex0.createComplex((-331.55937), 1741.737835);
      complex0.cosh();
      complex5.isNaN();
      Complex complex6 = complex1.subtract(0.0);
      complex6.INF.getField();
      complex6.isNaN();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(849.0, 849.0);
      complex0.INF.cosh();
      Complex complex1 = Complex.valueOf(849.0);
      Complex complex2 = complex1.ZERO.pow(410.067142373);
      Complex complex3 = complex1.subtract(0.0);
      complex1.tanh();
      complex2.multiply(849.0);
      complex3.getImaginary();
      Complex complex4 = Complex.valueOf((-1292.7575645218), 1.1863701343536377);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2704.813826093), (-329.093));
      Complex complex1 = complex0.ONE.pow((-329.093));
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.NaN.acos();
      complex0.NaN.hashCode();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex5.sqrt1z();
      complex6.NaN.toString();
      Complex complex7 = complex4.I.tanh();
      complex0.getImaginary();
      Complex complex8 = Complex.valueOf(8.69851089918337E-9);
      complex8.ONE.asin();
      complex6.ONE.sin();
      complex5.nthRoot(2047);
      complex8.getReal();
      Complex complex9 = complex0.add((-2704.813826093));
      complex9.INF.exp();
      Complex complex10 = Complex.valueOf(8.69851089918337E-9, (-329.093));
      complex10.INF.tan();
      complex9.I.divide(0.0);
      complex1.toString();
      complex4.nthRoot(2047);
      complex7.subtract(8.69851089918337E-9);
      complex1.sqrt();
      complex9.cos();
      Complex complex11 = complex10.tan();
      complex11.ONE.asin();
      complex2.divide(8.69851089918337E-9);
      complex11.sin();
      complex3.asin();
      complex1.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ONE.pow(complex2);
      complex3.NaN.sqrt1z();
      Complex complex4 = Complex.valueOf((-1457.1703), (-889.90260960887));
      Complex complex5 = complex0.ONE.createComplex(0.0, 1.9722796756250217E-108);
      complex5.add((-3754.1181283));
      complex5.NaN.subtract(complex4);
      Complex complex6 = complex0.ONE.sqrt1z();
      Complex complex7 = complex6.ZERO.divide((-1192.91695505));
      complex0.getImaginary();
      Complex complex8 = complex0.ONE.log();
      Complex complex9 = complex8.ONE.multiply(complex4);
      complex6.hashCode();
      complex1.add(496.28294977);
      complex4.isInfinite();
      complex6.pow((-235.4635));
      complex3.multiply((-235.4635));
      complex7.readResolve();
      complex9.acos();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.043007105588912964, 1.446257098752E12);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.divide(0.043007105588912964);
      Object object0 = complex2.INF.readResolve();
      complex1.NaN.divide(2.337337845617735E-9);
      Complex complex3 = Complex.valueOf(0.043007105588912964, 1.446257098752E12);
      complex0.I.sinh();
      Complex complex4 = complex3.I.pow(1.446257098752E12);
      Complex.valueOf(0.0);
      Complex complex5 = complex3.sin();
      complex5.NaN.multiply(1);
      complex0.I.readResolve();
      Complex complex6 = Complex.valueOf((-1.0), 0.0);
      Complex complex7 = complex6.INF.pow(1.3064749115929298E-8);
      complex7.ZERO.tanh();
      complex1.equals(object0);
      complex0.equals(complex1);
      complex4.NaN.pow(complex6);
      complex3.sqrt1z();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-6.764191876212205E-9), (-6.764191876212205E-9));
      complex0.I.readResolve();
      complex0.sqrt1z();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1432.39002829774);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.multiply((-1.8026348269183678E-9));
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.negate();
      complex4.NaN.add(complex2);
      Complex complex6 = complex5.INF.cosh();
      complex4.I.hashCode();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex5.divide(0.0);
      Complex complex10 = complex9.I.createComplex(0.0, 0.0);
      complex10.ZERO.subtract(complex1);
      complex6.hashCode();
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex8.INF.pow((-1423.0));
      complex12.INF.toString();
      complex12.I.getArgument();
      Complex complex13 = complex6.acos();
      complex8.asin();
      complex6.NaN.conjugate();
      complex11.reciprocal();
      complex8.tan();
      complex13.tanh();
      complex7.pow(complex0);
      complex11.getField();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.6598852872848511);
      Complex complex1 = Complex.NaN;
      complex0.NaN.sin();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ONE.pow((-7.206766550807255E-8));
      complex0.isNaN();
      complex0.sqrt1z();
      Complex complex4 = complex0.sin();
      complex4.INF.subtract((-1687.72105624642));
      Complex complex5 = complex1.atan();
      complex5.ZERO.sqrt1z();
      complex3.cosh();
      Complex complex6 = complex2.add((-2369.5163924157955));
      Complex.valueOf(1344.15834199639, (-956.706211429419));
      complex1.pow(complex2);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2224.8145682, 0.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.exp();
      complex1.NaN.negate();
      complex0.INF.createComplex(493.97975031585, (-1175.2212097));
      complex0.conjugate();
      Complex complex3 = complex0.pow(0.0);
      complex2.sin();
      complex3.add((-2261.006421));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = (-1725);
      Complex complex1 = complex0.NaN.multiply((-1725));
      Complex complex2 = complex1.ONE.pow(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.log();
      complex3.I.tan();
      complex0.I.multiply(complex2);
      complex3.ZERO.toString();
      Complex complex4 = complex3.acos();
      complex4.subtract((double) (-1725));
      try { 
        complex4.I.nthRoot((-1725));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,725
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-39.0), (-39.0));
      Complex complex3 = complex0.ZERO.createComplex((-39.0), 1952.898205766578);
      Complex complex4 = complex0.NaN.sinh();
      complex4.NaN.log();
      complex1.getImaginary();
      complex1.hashCode();
      complex0.I.abs();
      Complex complex5 = complex0.sinh();
      complex5.getField();
      Complex complex6 = complex1.createComplex(1952.898205766578, 0.0);
      Complex complex7 = complex1.add(complex0);
      complex2.abs();
      complex1.getReal();
      complex3.multiply(complex6);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(0.0);
      complex1.I.conjugate();
      complex1.multiply(complex0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1292.1846118748));
      Complex complex1 = complex0.ZERO.add((-1292.1846118748));
      complex0.isNaN();
      Complex complex2 = complex0.tanh();
      complex0.readResolve();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.sinh();
      complex3.I.pow(complex4);
      Complex.valueOf((-1910.5744101250389), (-1.0));
      Complex complex5 = complex4.NaN.pow(complex3);
      complex5.INF.negate();
      complex3.tanh();
      complex1.divide(complex4);
      complex3.toString();
      complex0.hashCode();
      Complex.valueOf((-1910.503063), (-1910.5744101250389));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.add((-1352.47222879));
      Complex complex1 = complex0.I.asin();
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.sqrt1z();
      complex2.I.exp();
      Complex complex3 = complex2.log();
      int int0 = (-1406);
      try { 
        complex3.nthRoot((-1406));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,406
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      complex1.INF.pow((-1875.19850820003));
      Complex complex2 = new Complex(0.0, (-1875.19850820003));
      Complex complex3 = complex2.INF.multiply(complex0);
      complex3.ZERO.pow(complex0);
      Complex complex4 = complex0.add(complex2);
      complex4.subtract(1.2300209999084473);
      complex1.nthRoot(4221);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex1.NaN.toString();
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.getField();
      Complex complex3 = Complex.valueOf((-2115.29495));
      Complex complex4 = complex3.NaN.reciprocal();
      complex0.getReal();
      Complex complex5 = complex0.INF.divide(complex2);
      complex3.toString();
      complex1.readResolve();
      Complex complex6 = complex2.createComplex((-2115.29495), (-2115.29495));
      Complex complex7 = complex6.ONE.acos();
      complex4.tanh();
      complex2.readResolve();
      Complex complex8 = complex1.atan();
      complex8.ZERO.multiply(complex7);
      complex6.tanh();
      Complex complex9 = complex8.sinh();
      complex9.INF.readResolve();
      Complex complex10 = complex4.multiply((-1647));
      complex2.NaN.atan();
      Complex complex11 = complex6.multiply(1556.034091507551);
      complex11.getField();
      complex9.readResolve();
      Complex complex12 = complex1.subtract(complex5);
      complex2.getImaginary();
      complex10.abs();
      Complex complex13 = Complex.valueOf(1.014800418749161E33, 1765.26);
      complex12.subtract(complex13);
      complex7.acos();
      Complex complex14 = complex5.reciprocal();
      complex14.createComplex(0.0, 1556.034091507551);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3626.573939693));
      Complex complex1 = complex0.tan();
      complex1.INF.add(4.6588861918718874E-15);
      complex1.equals(complex0);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-2106.3399692), (-2106.3399692));
      Complex complex1 = complex0.INF.add((-2106.3399692));
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.NaN.tanh();
      complex3.NaN.subtract(complex0);
      complex3.I.reciprocal();
      complex2.INF.add(complex1);
      complex0.divide(883.1142389693615);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.sqrt();
      try { 
        complex0.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex1.subtract(924.5718956715);
      complex3.ZERO.getField();
      complex3.I.negate();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.INF.sin();
      complex4.NaN.sin();
      Complex complex6 = complex1.acos();
      complex1.multiply(0);
      complex6.multiply(complex5);
      Complex.valueOf((double) 0, 0.0);
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex7.NaN.tan();
      complex8.I.acos();
      complex3.multiply((double) 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex1.ONE.add(complex0);
      complex1.I.sqrt1z();
      complex0.getField();
      Complex complex2 = complex0.sinh();
      complex2.readResolve();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex2.getReal();
      complex2.sqrt();
      Complex complex4 = Complex.valueOf(0.0, 6.283185307179586);
      complex2.equals((Object) null);
      complex1.divide(complex3);
      complex1.pow(complex0);
      Complex complex5 = complex1.log();
      complex5.hashCode();
      complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.ONE.divide(0.0);
      Complex complex4 = complex1.NaN.add(0.0);
      Complex complex5 = complex2.log();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = Complex.INF;
      complex5.I.sqrt();
      complex7.NaN.sin();
      Complex complex9 = complex8.NaN.asin();
      complex1.equals(complex8);
      Complex complex10 = complex8.I.conjugate();
      complex10.NaN.sinh();
      complex6.ZERO.exp();
      complex10.NaN.multiply(1);
      complex1.toString();
      complex8.getArgument();
      complex3.abs();
      Complex complex11 = complex6.exp();
      complex11.ZERO.abs();
      complex7.readResolve();
      Complex complex12 = complex4.cosh();
      complex9.abs();
      Complex complex13 = complex5.pow(0.0);
      complex13.ONE.atan();
      complex0.multiply(2919.69843);
      Complex.valueOf(0.0, 3.3212950284273017E149);
      complex9.reciprocal();
      Complex complex14 = complex1.divide((-1628.2118240945));
      complex12.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = Complex.valueOf(0.5800528526306152, 0.5800528526306152);
      Complex complex5 = complex0.sinh();
      complex5.I.cos();
      Complex complex6 = complex4.exp();
      complex6.NaN.add(complex3);
      Complex complex7 = complex6.NaN.pow(complex1);
      Complex complex8 = complex1.exp();
      complex1.ZERO.cos();
      complex8.createComplex(1.4360739330834996E-140, 0.5800528526306152);
      complex6.nthRoot(1185);
      complex7.acos();
      Complex complex9 = complex0.exp();
      complex9.NaN.sqrt();
      complex4.INF.pow(0.0);
      Complex.valueOf(0.0, (-1.0));
      complex4.log();
      complex9.subtract((-3612.9662598459));
      Complex.valueOf(1838.8825078050909);
      Complex complex10 = complex3.tan();
      complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3141.68));
      Complex complex1 = complex0.ZERO.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.I.cosh();
      complex3.ONE.getArgument();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.ZERO.add(complex4);
      Complex complex8 = complex7.INF.conjugate();
      complex8.getField();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex9.ZERO.createComplex((-3141.68), (-3141.68));
      Complex.valueOf(0.0);
      complex1.tan();
      complex0.sqrt1z();
      complex2.atan();
      complex10.exp();
      Complex complex11 = complex8.atan();
      complex1.multiply((-2538));
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = new Complex(5.8377876767612725E-8, 0.0);
      complex1.createComplex(5.8377876767612725E-8, 509.54);
      Complex complex2 = complex0.pow(complex1);
      complex2.readResolve();
      Complex complex3 = complex1.tanh();
      complex3.ONE.pow(complex0);
      Complex complex4 = complex3.ONE.cos();
      complex1.sqrt1z();
      Complex.valueOf(3443.5043045, 305.0);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.conjugate();
      complex6.INF.acos();
      Complex complex7 = complex6.I.conjugate();
      complex2.I.readResolve();
      Complex complex8 = new Complex(305.0, 305.0);
      complex6.ZERO.reciprocal();
      complex6.equals(complex8);
      complex6.sqrt();
      complex5.hashCode();
      Complex complex9 = complex7.conjugate();
      complex4.log();
      complex9.add(complex4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ZERO.pow(0.0);
      Complex complex3 = complex0.exp();
      complex3.subtract(1391.15630530945);
      complex3.getImaginary();
      Complex complex4 = complex0.tanh();
      complex0.toString();
      complex0.subtract(complex4);
      complex2.nthRoot(948);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(22026.46484375);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.sqrt();
      complex1.ONE.acos();
      Complex complex3 = complex1.reciprocal();
      complex0.NaN.hashCode();
      Complex complex4 = complex0.ONE.add(0.0);
      complex4.ONE.getArgument();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.valueOf(22026.46484375);
      Complex.valueOf(22026.46484375);
      Complex complex7 = complex6.sqrt1z();
      complex3.subtract(22026.46484375);
      complex6.I.add(9.684172421525468E-8);
      complex5.divide(complex7);
      complex7.isInfinite();
      Complex complex8 = complex2.multiply(0.0);
      complex8.cos();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1336.031800949972);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.readResolve();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.createComplex((-442.893714640539), 1145.9);
      complex1.getImaginary();
      Complex complex5 = complex2.acos();
      complex5.negate();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex2.multiply(491);
      Complex complex8 = complex7.subtract(complex2);
      Complex complex9 = complex3.pow(complex7);
      Complex complex10 = complex4.log();
      Complex complex11 = Complex.valueOf(1336.031800949972, 5.237807655758373E-100);
      Complex complex12 = complex11.sinh();
      complex9.ZERO.sinh();
      complex8.multiply(complex7);
      Complex complex13 = complex3.createComplex(491, (-325.9202939644903));
      complex6.abs();
      complex0.abs();
      complex13.multiply((-1880.17));
      Complex complex14 = complex9.divide(complex10);
      complex14.I.atan();
      complex10.getArgument();
      Complex complex15 = complex7.divide(0.266193417261188);
      complex15.ONE.cos();
      complex8.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-193.28));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      Complex complex3 = complex2.INF.add((-1.0));
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex1.I.pow(0.0);
      Complex complex6 = complex5.I.add(0.0);
      Complex complex7 = complex6.I.cosh();
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.multiply((-2138.3936097636715));
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.reciprocal();
      assertEquals(0.8775825618903728, complex11.getReal(), 0.01);
      
      Complex complex12 = Complex.valueOf((-1.0));
      complex12.I.pow(complex1);
      Complex complex13 = complex0.atan();
      complex0.abs();
      Complex complex14 = complex5.pow(complex13);
      complex13.equals(";jaSPr!&uv'aNaexT'/");
      complex1.getArgument();
      complex3.getArgument();
      Complex complex15 = complex5.tanh();
      Complex complex16 = complex0.sqrt1z();
      Complex complex17 = complex16.I.atan();
      complex0.equals(complex15);
      assertEquals(0.7615941559557649, complex15.getReal(), 0.01);
      
      complex14.getArgument();
      complex17.getImaginary();
      assertSame(complex17, complex4);
      
      Complex complex18 = complex10.pow(complex2);
      assertEquals((-2138.3936097636715), complex8.getReal(), 0.01);
      assertEquals((-0.7904390832136148), complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex13.divide(complex3);
      Complex complex20 = complex19.ONE.multiply(Double.NaN);
      assertTrue(complex19.equals((Object)complex16));
      assertEquals(0.7853981633974483, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex complex21 = complex1.asin();
      assertSame(complex21, complex20);
      assertFalse(complex21.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ONE.subtract(1863.0214202);
      assertEquals((-1862.0214202), complex2.getReal(), 0.01);
      
      complex1.I.getField();
      complex1.I.getArgument();
      Complex complex3 = complex1.negate();
      complex0.abs();
      complex1.getArgument();
      Complex complex4 = complex3.acos();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.ONE.reciprocal();
      complex2.ONE.toString();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex1.INF.divide((-3502.8786228));
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.INF.subtract(0.0);
      Complex complex7 = complex0.divide(1059.41);
      complex7.ONE.multiply(complex3);
      Complex complex8 = complex2.add(complex1);
      complex8.ZERO.exp();
      complex5.multiply((-1138));
      Complex complex9 = complex3.asin();
      complex4.sqrt();
      complex9.equals(complex6);
      try { 
        complex2.nthRoot((-989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -989
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
