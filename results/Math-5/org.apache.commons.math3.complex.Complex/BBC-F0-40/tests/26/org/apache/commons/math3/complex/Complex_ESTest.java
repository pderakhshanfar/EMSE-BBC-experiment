/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:20:10 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(20.0, 2715.8754545538);
      complex1.tanh();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.tan();
      complex2.I.conjugate();
      complex2.I.pow(complex1);
      Complex.valueOf(1.2915711402893066);
      complex0.getField();
      Complex complex3 = complex0.negate();
      Complex complex4 = new Complex(1.0986841159859078);
      complex4.ONE.nthRoot(423);
      Complex complex5 = complex3.I.add(complex4);
      complex5.ZERO.getArgument();
      complex0.nthRoot(1693);
      complex3.atan();
      complex0.conjugate();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 555, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex1.NaN.sqrt1z();
      complex0.INF.sqrt();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(2.4526190464373087E-231);
      Complex complex1 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1274.86020368), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.ONE.readResolve();
      complex0.ONE.getField();
      complex0.multiply((-2143.717245535571));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1274.86020368), Double.POSITIVE_INFINITY);
      complex0.I.getField();
      Complex complex1 = complex0.tan();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.nthRoot(1000);
      complex1.tanh();
      complex1.reciprocal();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(1.2246467991473532E-16, 1.2246467991473532E-16);
      Complex complex1 = complex0.acos();
      complex1.tan();
      complex1.multiply(37);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.INF.cosh();
      complex0.ONE.sin();
      Complex complex3 = complex1.multiply(3718.3);
      Complex complex4 = complex2.ZERO.add(complex3);
      complex2.INF.createComplex(557.87696999721, (-2340.502744683));
      complex3.add(557.87696999721);
      complex3.tanh();
      complex1.multiply(17);
      complex2.pow(complex1);
      complex3.INF.readResolve();
      complex4.ONE.getArgument();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.atan();
      complex2.toString();
      complex6.negate();
      Complex complex7 = complex5.sinh();
      complex4.multiply(17);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1274.86020368), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(6.914399608426436E-13, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.createComplex((-1656.77534), 20.0);
      complex1.INF.cosh();
      complex0.multiply(1962);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-1274.86020368), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.acos();
      complex3.abs();
      complex0.divide((-1274.86020368));
      complex0.multiply(1403);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1747.345, 1747.345);
      complex1.INF.sin();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
      complex0.multiply(110);
      Complex complex1 = new Complex(110, 110);
      Complex complex2 = Complex.valueOf((-2155.6040256413), 2.9279594746502846E161);
      complex2.asin();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1394);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1117.6022));
      Complex complex1 = complex0.tanh();
      complex0.getField();
      complex1.getImaginary();
      Complex complex2 = complex0.divide(complex1);
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(1.2246467991473532E-16);
      Complex complex1 = Complex.valueOf(1.0, 1.2246467991473532E-16);
      complex1.acos();
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-1117.6022));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
      Complex complex3 = Complex.ONE;
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(388);
      Complex complex2 = complex0.sin();
      complex1.NaN.tan();
      Complex complex3 = complex0.divide((-289.0));
      complex3.ONE.divide(Double.NaN);
      complex3.negate();
      Complex complex4 = Complex.valueOf((double) 388);
      complex3.tanh();
      complex1.I.reciprocal();
      complex0.readResolve();
      Complex complex5 = complex0.pow(2837.08);
      Complex complex6 = complex5.I.acos();
      complex6.subtract(complex2);
      complex1.add((-289.0));
      complex1.readResolve();
      Complex complex7 = complex1.I.pow(complex0);
      complex7.NaN.getArgument();
      Complex complex8 = complex5.log();
      complex8.ZERO.abs();
      complex5.subtract(complex1);
      complex4.tanh();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3379.552679982216), (-3379.552679982216));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.INF;
      complex0.toString();
      Complex complex3 = complex0.acos();
      complex0.multiply(complex1);
      complex0.cos();
      Complex complex4 = Complex.valueOf(4.4738646738551324E-4, (-20.0));
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2581.351849166085));
      Complex complex2 = complex1.add(complex0);
      complex1.cos();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex1.pow(1277.4726364058145);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.subtract(5.858546779607288E-181);
      complex7.abs();
      complex2.sin();
      Complex complex8 = new Complex((-2581.351849166085), 0.0);
      complex4.divide(complex3);
      complex5.createComplex(0.0, 5.858546779607288E-181);
      complex5.createComplex(4290.83139239, (-2581.351849166085));
      complex6.tan();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(1.2246467991473532E-16);
      complex0.acos();
      Complex complex1 = Complex.INF;
      complex0.INF.cos();
      complex0.toString();
      Complex complex2 = complex1.acos();
      complex2.ZERO.negate();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1027.8);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow((-1.3850458263351744E91));
      complex0.tanh();
      complex1.toString();
      Complex complex2 = complex1.ZERO.multiply(7);
      complex2.ONE.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.multiply((-1.3850458263351744E91));
      Complex complex5 = complex3.acos();
      Complex complex6 = new Complex(7, (-3779.30295497));
      complex4.divide(complex0);
      Complex complex7 = complex3.createComplex((-108.90479353), (-108.90479353));
      complex5.tan();
      Complex complex8 = Complex.I;
      complex8.toString();
      complex8.isNaN();
      complex3.pow(1027.8);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex.valueOf((-3379.552679982216), (-3379.552679982216));
      Complex complex2 = complex0.divide((-1.0));
      Complex complex3 = new Complex((-597.893), (-2.2667083759873216E16));
      Complex complex4 = new Complex((-1.0));
      Complex complex5 = complex2.divide(complex4);
      complex5.createComplex((-1394.4539599978336), 1);
      complex2.createComplex(3583.99331, (-2.2667083759873216E16));
      complex3.tan();
      complex3.acos();
      complex1.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf((-3379.552679982216), 789.99682936925);
      Complex complex4 = complex1.divide(0.49626702070236206);
      Complex complex5 = Complex.INF;
      complex4.subtract(Double.NaN);
      complex2.acos();
      Object object0 = new Object();
      complex4.equals(object0);
      complex3.add(789.99682936925);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(1.8518879652136628E-8, 0.12864484453120406);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.I.subtract(1.8518879652136628E-8);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.atan();
      complex0.tanh();
      Complex complex4 = complex3.I.sqrt();
      complex4.NaN.pow(complex2);
      complex2.negate();
      complex1.tanh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.valueOf(2540.0683435, 2540.0683435);
      Complex complex7 = complex5.ONE.add(complex6);
      complex6.NaN.readResolve();
      Complex complex8 = Complex.valueOf(0.12864484453120406, 0.12864484453120406);
      complex8.ZERO.sqrt();
      complex8.ONE.tanh();
      complex0.getField();
      complex1.toString();
      Complex complex9 = Complex.valueOf(20.0);
      Complex complex10 = complex9.multiply(231);
      Complex complex11 = complex7.multiply(231);
      complex10.ZERO.getArgument();
      complex11.INF.sqrt();
      complex9.I.sqrt();
      Complex.valueOf((-8.0), 20.0);
      complex11.subtract(complex10);
      complex5.conjugate();
      Complex complex12 = Complex.valueOf((-8.0));
      Complex complex13 = complex12.tan();
      complex13.sin();
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.getImaginary();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.pow(complex2);
      complex2.ZERO.hashCode();
      complex3.ONE.divide(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex0.tanh();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex6.tanh();
      complex5.getField();
      complex7.getReal();
      complex3.subtract(1689.080075096);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.getImaginary();
      Complex complex2 = Complex.ZERO;
      complex0.NaN.pow(complex2);
      complex1.nthRoot(67);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(7.785491934690374E-291);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      complex2.reciprocal();
      complex2.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.reciprocal();
      complex2.abs();
      complex1.getField();
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.valueOf(7.785491934690374E-291, Double.NaN);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = new Complex(996.0, 1.9359720773959334E279);
      complex8.sqrt1z();
      Complex.valueOf(Double.NaN);
      Complex.valueOf((-3.412780790998664E-4), (-719.0));
      Complex complex9 = complex5.cos();
      complex9.I.exp();
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.getImaginary();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.pow(complex2);
      complex2.getField();
      complex3.sin();
      Complex complex4 = Complex.NaN;
      complex4.abs();
      complex1.getField();
      Complex complex5 = complex1.log();
      Complex complex6 = new Complex(Double.NaN);
      complex6.reciprocal();
      complex5.sqrt1z();
      Complex.valueOf((-3783.29));
      Complex.valueOf(1586.10601822543, 712.1733751746265);
      Complex complex7 = new Complex(Double.NaN);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.pow(1856.255024342533);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.reciprocal();
      complex3.tanh();
      complex1.exp();
      complex0.tanh();
      complex0.getField();
      complex3.getReal();
      complex1.getField();
      complex1.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-2.4075054705261798E-98));
      Complex complex1 = new Complex((-4222530.436655006), (-20.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.createComplex((-2580.51177), 1815.7785857865867);
      complex3.I.exp();
      complex3.tan();
      Complex complex4 = Complex.I;
      complex1.NaN.sqrt();
      complex1.toString();
      complex2.isNaN();
      complex3.pow(0.6883329666650189);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.pow(2042.4679036211191);
      complex2.I.asin();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex3.subtract(complex0);
      complex1.toString();
      Complex complex5 = complex4.ONE.subtract(complex3);
      complex5.INF.readResolve();
      complex4.ZERO.atan();
      Complex complex6 = complex1.sqrt1z();
      complex6.abs();
      Complex complex7 = complex6.INF.log();
      complex7.INF.sqrt1z();
      complex3.getField();
      complex3.getField();
      Complex.valueOf(Double.NaN, 2042.4679036211191);
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.sin();
      complex10.multiply(2042.4679036211191);
      Complex complex12 = complex4.conjugate();
      Complex complex13 = Complex.valueOf((-108.90479353));
      complex12.NaN.pow(complex13);
      Complex complex14 = complex8.sqrt();
      complex14.ZERO.multiply(Double.NaN);
      complex6.getField();
      complex6.log();
      complex11.multiply(2042.4679036211191);
      complex10.multiply((-868.74163598));
      complex9.multiply((-585));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1056371.8399999999, 1056371.8399999999);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.sinh();
      complex2.ZERO.negate();
      complex2.ONE.conjugate();
      Complex complex3 = complex1.ZERO.sqrt();
      complex3.ONE.sin();
      Complex complex4 = complex0.cosh();
      Complex.valueOf(1056371.8399999999);
      Complex complex5 = complex4.negate();
      complex5.NaN.sqrt();
      complex0.INF.sqrt();
      Complex.valueOf(3634.375598842581);
      complex0.sqrt();
      Complex complex6 = complex4.pow(325.874944416446);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.multiply((-3139));
      complex0.hashCode();
      complex1.getReal();
      complex2.subtract(complex1);
      Complex complex3 = complex2.multiply((-3322.303266430219));
      complex1.acos();
      Complex complex4 = new Complex(7, Double.NaN);
      Complex complex5 = complex3.divide(complex0);
      complex5.createComplex((-1867.8263916563171), 0.0);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.I;
      complex8.toString();
      complex6.isNaN();
      complex0.pow(639.06);
      complex5.add((-1867.8263916563171));
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = (-929.1952336);
      Complex complex0 = Complex.valueOf((-929.1952336), (-929.1952336));
      complex0.acos();
      complex0.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.subtract(complex1);
      try { 
        complex2.nthRoot((-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -161
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1027.8);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow((-1.3850458263351744E91));
      Complex complex2 = Complex.NaN;
      complex1.toString();
      Complex complex3 = complex1.ZERO.multiply(7);
      complex3.ONE.hashCode();
      complex1.getReal();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.I.multiply((-1.3850458263351744E91));
      Complex complex6 = complex4.acos();
      Complex complex7 = new Complex(7, (-3779.30295497));
      Complex complex8 = complex5.divide(complex0);
      Complex.valueOf(0.0);
      Complex complex9 = complex8.divide(1027.8);
      complex4.sqrt();
      complex0.acos();
      complex6.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(1856.255024342533);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.multiply(0);
      complex3.hashCode();
      complex1.getReal();
      Complex complex4 = new Complex(0);
      complex1.multiply(1208.6595863187333);
      complex4.acos();
      Complex complex5 = new Complex(0, (-1137.690353));
      complex2.divide(complex4);
      complex1.createComplex(894.85466588062, (-108.90479353));
      Complex complex6 = new Complex(2.3810978455418157, (-108.90479353));
      complex6.tan();
      Complex complex7 = Complex.ONE;
      complex1.toString();
      complex6.isNaN();
      Complex complex8 = new Complex((-3779.30295497), 0.058784693479537964);
      complex8.pow(1453.019345476);
      complex5.readResolve();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex(1.0, 1.0);
      complex1.add(complex0);
      complex0.I.cos();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.pow((-719.915811151198));
      Complex complex5 = Complex.ZERO;
      complex1.subtract(0.0);
      complex4.getField();
      complex2.log();
      complex5.reciprocal();
      Complex complex6 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex6.sqrt1z();
      Complex.valueOf(0.0);
      Complex.valueOf((-3.412780790998664E-4), 1.4399358260219398E-7);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(410.73726669306);
      complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(7.785491934690374E-291, 7.785491934690374E-291);
      Complex complex3 = complex2.pow(complex0);
      complex0.hashCode();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex1.divide(2571.348);
      complex5.tanh();
      Complex complex6 = Complex.valueOf(2.284275263354996E7);
      complex6.exp();
      complex1.tanh();
      complex3.getField();
      complex5.getReal();
      complex6.subtract(7.785491934690374E-291);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex(1.0, 1.0);
      Complex complex2 = complex1.add(complex0);
      complex0.I.cos();
      complex1.negate();
      // Undeclared exception!
      complex2.nthRoot(2045222511);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex3 = complex0.reciprocal();
      complex2.reciprocal();
      Complex complex4 = complex1.atan();
      Complex.valueOf(0.0, (-744.41));
      Complex complex5 = complex0.acos();
      complex3.abs();
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex5.getArgument();
      complex7.subtract(complex5);
      complex6.nthRoot(1001);
      complex5.isInfinite();
      Complex complex8 = Complex.valueOf((-744.41), Double.NaN);
      complex8.ZERO.getField();
      Complex complex9 = complex4.divide((-2203.465658));
      Complex complex10 = Complex.valueOf((double) 1001);
      complex10.sqrt();
      complex6.acos();
      complex9.equals("OVERFLOW");
      complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex3 = complex0.reciprocal();
      complex2.reciprocal();
      Complex complex4 = complex1.atan();
      Complex.valueOf(0.0, (-744.41));
      Complex complex5 = complex0.acos();
      complex3.abs();
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.subtract(complex5);
      complex6.nthRoot(1001);
      complex5.isInfinite();
      Complex.valueOf((double) 1001);
      Complex complex8 = complex4.divide((-2203.465658));
      Complex complex9 = Complex.valueOf((double) 1001);
      complex9.sqrt();
      complex6.acos();
      complex8.readResolve();
      complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1208.66, 1208.66);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.reciprocal();
      complex0.atan();
      Complex complex4 = Complex.valueOf((-20.0), 8.9);
      Complex complex5 = complex3.acos();
      complex2.abs();
      complex5.exp();
      Complex complex6 = complex2.subtract(complex3);
      complex1.nthRoot(1001);
      complex0.isInfinite();
      Complex.valueOf((-3368.2));
      complex5.divide(8.9);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = complex6.acos();
      complex2.equals(complex9);
      complex3.multiply(1001);
      complex4.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.getImaginary();
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      complex2.createComplex(0.0, 8.43835682327257E26);
      Complex.valueOf(0.0, 8.43835682327257E26);
      Complex complex4 = complex1.add(0.0);
      complex3.cos();
      complex3.abs();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.getImaginary();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.createComplex(0.0, (-1911.892));
      Complex complex3 = Complex.valueOf(0.0, (-1911.892));
      complex1.ONE.cosh();
      complex2.divide(complex1);
      complex3.ONE.reciprocal();
      complex2.ZERO.getField();
      Complex complex4 = complex2.I.sin();
      complex4.NaN.log();
      Complex complex5 = complex3.INF.reciprocal();
      complex1.abs();
      complex3.ZERO.getField();
      complex2.log();
      complex3.reciprocal();
      Complex.valueOf(0.0);
      object0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.multiply(566);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex1.atan();
      complex6.I.tanh();
      Complex complex7 = complex5.NaN.pow(2.1383323934483528E-190);
      Complex complex8 = complex4.divide(8.43835682327257E26);
      Complex complex9 = complex2.cos();
      complex5.INF.pow(complex7);
      Complex complex10 = Complex.valueOf((-1134.6121));
      Complex complex11 = complex5.ONE.negate();
      Complex complex12 = complex9.divide(complex5);
      complex10.cosh();
      Complex complex13 = complex12.tan();
      complex13.INF.divide(complex10);
      Complex complex14 = complex12.INF.sqrt();
      Complex complex15 = complex14.INF.sin();
      complex15.ZERO.add((-1330.0));
      Complex complex16 = complex4.tanh();
      complex1.atan();
      Complex complex17 = complex12.divide(complex8);
      complex17.ONE.hashCode();
      complex3.sqrt();
      complex1.getField();
      complex4.INF.sqrt1z();
      complex5.sinh();
      complex11.add(complex16);
      complex8.asin();
      complex9.sinh();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1369.339498545322);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(1369.339498545322);
      complex1.getImaginary();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(1.0, 717.28833791066);
      Complex complex3 = complex2.createComplex(1369.339498545322, 1369.339498545322);
      Complex complex4 = Complex.valueOf(8.43835682327257E26, (-943.0));
      complex2.cosh();
      complex3.divide(complex4);
      complex0.reciprocal();
      complex4.getField();
      complex0.sin();
      complex1.reciprocal();
      complex1.abs();
      complex2.getField();
      complex1.log();
      complex2.reciprocal();
      Complex.valueOf(717.28833791066);
      Complex complex5 = Complex.valueOf((-943.0), 717.28833791066);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex(1.0, 1.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.ONE.createComplex(1277.4726364058145, 2.0);
      complex3.I.cos();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.pow((-719.915811151198));
      complex2.hashCode();
      complex4.getReal();
      complex6.subtract(complex2);
      complex4.multiply(0.0);
      complex1.createComplex((-1763.78), 4.1368131405362284E-4);
      complex4.readResolve();
      complex2.divide(complex1);
      Complex.valueOf(1.0);
      complex5.readResolve();
      complex5.multiply(994.561229405737);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1027.8);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow((-1.3850458263351744E91));
      Complex complex2 = complex0.tanh();
      complex2.I.atan();
      complex1.toString();
      Complex complex3 = complex0.asin();
      complex2.toString();
      complex1.log();
      complex3.pow(1027.8);
      Complex.valueOf(20.0, (-1541.0));
      Complex complex4 = new Complex(1027.8, (-546.3374));
      complex4.sinh();
      Complex.valueOf(1369.339498545322, (-92.9161));
      complex1.equals((Object) null);
      complex1.multiply(complex4);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.multiply(complex0);
      Complex complex2 = complex0.cosh();
      List<Complex> list0 = complex2.ONE.nthRoot(578);
      Complex complex3 = complex0.asin();
      complex3.ONE.getField();
      Complex complex4 = complex0.asin();
      complex4.ONE.toString();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.ZERO.pow((-3777.29922621903));
      Complex complex7 = Complex.valueOf((-3777.29922621903), 1614.67548);
      Complex complex8 = complex6.sinh();
      Complex complex9 = Complex.valueOf((-6.746431126005811E-8), (-254.23330523158));
      complex8.equals(list0);
      complex0.multiply(complex7);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1369.339498545322);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex3.I.sqrt1z();
      complex2.ZERO.multiply(complex0);
      Complex complex5 = complex0.INF.pow(0.0);
      Complex complex6 = complex5.ZERO.conjugate();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex3.asin();
      complex6.toString();
      complex7.log();
      complex4.pow(0.0);
      Complex.valueOf(Double.NaN, 0.0);
      complex0.sinh();
      Complex.valueOf(0.0, 1369.339498545322);
      complex4.equals(complexField0);
      complex7.multiply(complex3);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1027.8);
      complex0.ONE.getArgument();
      complex0.nthRoot(578);
      Complex complex1 = complex0.asin();
      complex0.getField();
      Complex complex2 = complex1.asin();
      complex1.toString();
      complex2.log();
      Complex complex3 = complex1.pow((-1.3850458263351744E91));
      Complex complex4 = Complex.valueOf((-1.3850458263351744E91), 0.0);
      complex0.sinh();
      Complex.valueOf((double) 578, (-7.048932272279454E-8));
      complex1.equals(complex3);
      complex3.multiply(complex0);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.isNaN();
      complex0.getReal();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.I.tan();
      complex4.I.abs();
      complex0.getArgument();
      Complex complex5 = complex1.INF.multiply((-3529));
      Complex complex6 = Complex.ZERO;
      complex0.NaN.hashCode();
      Complex complex7 = complex3.divide(complex2);
      Complex complex8 = complex1.ONE.add(complex7);
      Complex complex9 = Complex.I;
      complex1.divide(complex9);
      complex6.equals(complex5);
      complex8.conjugate();
      complex2.I.readResolve();
      Complex complex10 = complex2.log();
      complex6.reciprocal();
      complex8.acos();
      complex1.pow(complex4);
      complex4.sinh();
      Complex complex11 = complex1.multiply(complex4);
      complex11.I.multiply(20.0);
      complex11.multiply(complex5);
      complex6.exp();
      complex5.isInfinite();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1208.66, 1208.66);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.atan();
      Complex complex5 = new Complex(0.7853981633974483, 6.283185307179586);
      Complex complex6 = complex5.NaN.acos();
      complex4.I.abs();
      Complex complex7 = complex4.ZERO.exp();
      Complex complex8 = complex3.subtract(complex0);
      Complex complex9 = Complex.valueOf(1.0, 0.7853981633974483);
      complex9.readResolve();
      complex1.log();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = Complex.NaN;
      complex11.acos();
      Complex complex12 = complex0.pow(complex1);
      complex6.sinh();
      complex12.multiply(complex11);
      complex0.multiply(1001.0);
      Complex complex13 = complex10.multiply(complex0);
      complex0.exp();
      complex4.equals(complex7);
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1208.66, 1208.66);
      complex0.ONE.readResolve();
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf(1208.66, 6.283185307179586);
      complex4.NaN.acos();
      complex3.I.abs();
      complex3.ZERO.exp();
      Complex complex5 = complex2.subtract(complex0);
      complex5.nthRoot(1001);
      complex5.isInfinite();
      Complex complex6 = Complex.valueOf((double) 1001);
      complex6.divide(103.81563451);
      complex2.sqrt();
      complex3.subtract(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(1856.255024342533);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex1.reciprocal();
      complex3.add(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = Complex.valueOf(2.0510193986749737E-191);
      Object object0 = new Object();
      complex6.equals(object0);
      complex4.conjugate();
      Complex complex7 = new Complex(3792.7, 2.0510193986749737E-191);
      complex7.readResolve();
      Complex complex8 = complex5.log();
      Complex complex9 = complex7.reciprocal();
      complex9.acos();
      complex9.pow(complex8);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex2.multiply(complex8);
      complex2.multiply(20.0);
      Complex complex12 = complex1.multiply(complex4);
      complex10.exp();
      Object object1 = complex11.readResolve();
      complex12.equals(object1);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1208.66, 1208.66);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(1208.66);
      complex1.getImaginary();
      Complex complex2 = Complex.NaN;
      complex2.readResolve();
      Complex complex3 = complex0.createComplex(8.43835682327257E26, 0.0);
      Complex complex4 = Complex.valueOf((-1720.85946218), (-1720.85946218));
      Complex complex5 = complex0.cosh();
      complex2.divide(complex5);
      complex5.reciprocal();
      complex2.getField();
      Complex complex6 = complex4.sin();
      complex6.reciprocal();
      complex1.abs();
      complex1.getField();
      Complex complex7 = complex3.log();
      complex1.reciprocal();
      Complex.valueOf(2511.8);
      Complex.valueOf(384.0, 8.43835682327257E26);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex3 = complex0.reciprocal();
      complex2.reciprocal();
      Complex complex4 = complex1.atan();
      Complex.valueOf(0.0, (-744.41));
      Complex complex5 = complex0.acos();
      complex3.abs();
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.subtract(complex5);
      complex6.nthRoot(1001);
      complex5.isInfinite();
      Complex.valueOf((double) 1001);
      Complex complex8 = complex4.divide((-2203.465658));
      Complex complex9 = Complex.valueOf((double) 1001);
      complex9.sqrt();
      complex6.acos();
      complex8.equals("OVERFLOW");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = (-929.1952336);
      Complex complex0 = Complex.NaN;
      double double1 = (-419.3354135);
      Complex complex1 = new Complex((-419.3354135));
      complex0.divide(complex1);
      complex0.tan();
      complex0.abs();
      complex1.getArgument();
      int int0 = (-3529);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply((-3529));
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-522.402));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.ZERO.hashCode();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.acos();
      complex4.ZERO.getArgument();
      complex2.nthRoot(1);
      complex4.equals(complex0);
      complex2.INF.multiply(0.0);
      complex2.createComplex((-522.402), 0.9676133820996924);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex6.subtract(complex3);
      complex5.cos();
      complex4.exp();
      Complex complex8 = Complex.NaN;
      complex1.equals(complex8);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-2290.104311), 0.7615941559557649);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.createComplex((-2290.104311), (-2290.104311));
      Complex complex5 = complex1.cos();
      Complex complex6 = complex4.negate();
      complex3.multiply(complex0);
      Complex complex7 = complex5.pow(7.785491934690374E-291);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex1.subtract((-1670.86515));
      complex7.abs();
      complex1.isInfinite();
      complex0.sin();
      Complex complex10 = complex2.acos();
      Complex complex11 = new Complex(0.0, 7.785491934690374E-291);
      complex3.divide(complex8);
      complex0.createComplex((-2290.104311), 1277.4726364058145);
      complex2.tan();
      complex10.toString();
      complex9.isNaN();
      Complex complex12 = Complex.NaN;
      complex12.add(1277.4726364058145);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.getImaginary();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.createComplex(0.0, 8.43835682327257E26);
      Complex complex3 = Complex.valueOf(0.0, 8.43835682327257E26);
      complex1.ONE.cosh();
      complex2.divide(complex1);
      complex3.ONE.reciprocal();
      complex2.ZERO.getField();
      complex2.I.sin();
      complex3.INF.reciprocal();
      complex1.abs();
      complex3.ZERO.getField();
      complex2.log();
      complex3.reciprocal();
      Complex.valueOf(0.0);
      Complex.valueOf(8.43835682327257E26, 0.3883931040763855);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex(1.0, 1.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.ONE.createComplex(1277.4726364058145, 2.0);
      complex3.I.cos();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.pow((-719.915811151198));
      complex5.ONE.cosh();
      Complex complex7 = complex1.subtract(0.0);
      complex7.I.abs();
      complex5.isInfinite();
      Complex complex8 = complex0.sin();
      complex6.I.acos();
      Complex complex9 = new Complex((-1453.019345476), 1277.4726364058145);
      Complex complex10 = complex8.ONE.divide(complex9);
      complex6.createComplex(1.0, 2.0);
      complex10.tan();
      complex1.toString();
      complex2.isNaN();
      complex0.add((-3.482412195764625E-92));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1.0812578201293945);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.multiply(0);
      Complex complex3 = complex1.NaN.divide(Double.NaN);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.ONE.subtract(complex5);
      Complex complex7 = complex6.ONE.acos();
      complex7.ZERO.getArgument();
      complex7.I.readResolve();
      Complex complex8 = complex1.asin();
      complex1.I.add(complex2);
      complex8.ZERO.reciprocal();
      Complex complex9 = Complex.valueOf(1.0812578201293945, (-2.1745347282493023E-299));
      complex9.INF.atan();
      Complex complex10 = complex3.NaN.cos();
      complex10.INF.getField();
      Complex complex11 = Complex.valueOf(2422.0);
      Complex complex12 = Complex.NaN;
      complex5.I.readResolve();
      complex11.add(complex12);
      complex5.readResolve();
      Complex complex13 = complex3.tan();
      complex13.I.abs();
      Complex complex14 = complex4.tan();
      complex14.NaN.subtract(complex7);
      Complex.valueOf((double) 0);
      complex14.NaN.asin();
      complex10.isInfinite();
      complex4.getArgument();
      Complex complex15 = complex3.asin();
      complex15.ZERO.tanh();
      complex9.conjugate();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-1782.534015922884));
      complex0.INF.sinh();
      Complex complex1 = Complex.valueOf(2383.475568688996, 0.0);
      complex1.ZERO.multiply(complex0);
      double double0 = 5180.9821;
      Complex.valueOf(5180.9821);
      complex0.I.getField();
      complex0.getImaginary();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.ONE.multiply(complex0);
      Complex.valueOf(2383.475568688996, 2383.475568688996);
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      try { 
        complex4.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-419.3354135));
      Complex complex1 = complex0.ONE.divide((-419.3354135));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.multiply(complex1);
      complex3.NaN.multiply(6.283185307179586);
      Complex complex5 = complex0.multiply(2352.2);
      complex1.NaN.subtract(complex4);
      complex1.I.getArgument();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.INF.sin();
      complex7.INF.multiply(6.283185307179586);
      Complex complex8 = complex0.pow(6.283185307179586);
      complex8.NaN.tan();
      Complex complex9 = complex2.INF.multiply(0);
      Complex complex10 = complex2.reciprocal();
      complex5.pow(complex10);
      Complex.valueOf(1590.588968605247);
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(1758.719, 1758.719);
      Complex complex1 = complex0.negate();
      complex1.ZERO.abs();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.createComplex(1745.1808984206025, (-4.8293856891818295E-8));
      Complex complex4 = complex3.ONE.createComplex(1745.1808984206025, 2.011589233663723E-10);
      complex4.divide((-1507.5));
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex3.add((-889.3435054));
      Complex complex7 = complex3.ZERO.divide(complex6);
      complex7.INF.toString();
      complex6.getArgument();
      complex5.I.abs();
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = complex8.createComplex(0.0, 1758.719);
      complex8.ZERO.getField();
      Complex complex10 = complex6.NaN.tanh();
      complex0.getImaginary();
      complex3.getArgument();
      complex1.sinh();
      complex6.getImaginary();
      complex10.hashCode();
      complex0.subtract(complex5);
      complex5.multiply(996);
      complex2.ONE.tan();
      complex9.cosh();
      Complex complex11 = complex1.sinh();
      complex11.abs();
      complex2.add(complex1);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = Complex.I;
      complex1.ZERO.add(complex0);
      complex1.ONE.getArgument();
      complex1.toString();
      Complex complex2 = complex0.subtract(complex1);
      complex2.getImaginary();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.INF.pow((-664.2556182234));
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.INF.acos();
      complex1.NaN.atan();
      complex3.ZERO.createComplex((-2934.64), 2.0);
      complex2.ZERO.tan();
      Complex complex4 = complex0.divide(2.0);
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = new Complex(2.0);
      complex5.ZERO.pow(complex7);
      complex2.pow(2.0);
      Complex complex8 = Complex.valueOf(1503.956, 1362.0);
      complex3.negate();
      Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex0.asin();
      complex4.ONE.nthRoot(110);
      complex9.I.createComplex((-664.2556182234), 1362.0);
      Complex.valueOf(0.0, (-664.2556182234));
      Complex complex10 = complex8.divide(1503.956);
      complex10.acos();
      complex6.getArgument();
      complex2.sqrt();
      complex2.abs();
      complex8.getField();
      complex9.createComplex(Double.NaN, (-1.347867098583136E42));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-522.402));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.ZERO.hashCode();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.acos();
      complex4.ZERO.getArgument();
      complex2.nthRoot(1);
      complex4.equals(complex0);
      complex2.INF.multiply(2.6612401062437074E-8);
      complex2.createComplex((-522.402), 0.0);
      Complex complex6 = complex2.multiply(complex1);
      complex6.subtract(complex3);
      complex5.cos();
      complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.I.log();
      complex3.ONE.sqrt1z();
      Complex complex4 = complex2.ZERO.sqrt1z();
      complex4.ZERO.subtract(0.0);
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex0.I.multiply(complex1);
      Complex complex7 = complex0.NaN.cosh();
      complex6.NaN.hashCode();
      complex0.ONE.hashCode();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.tanh();
      complex10.getArgument();
      Complex complex11 = complex9.ONE.multiply(1350);
      complex11.NaN.divide(complex7);
      complex11.pow((double) 1350);
      Complex complex12 = complex10.ONE.divide(1193.1);
      complex10.add((-1663.8));
      Complex complex13 = complex12.divide((-1663.8));
      complex12.asin();
      complex8.reciprocal();
      Complex complex14 = complex13.add(-0.0);
      complex5.sqrt();
      Complex.valueOf(-0.0, (double) 1350);
      complex14.divide(1.004894733428955);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      complex1.NaN.divide(1.32472428796441E-9);
      Complex complex2 = complex1.NaN.createComplex(1.0847913100494912E-238, 1.0847913100494912E-238);
      Complex complex3 = complex2.ZERO.cosh();
      complex3.ONE.pow(0.0);
      Complex complex4 = complex0.multiply(876);
      complex4.cos();
      complex0.divide(1.32472428796441E-9);
      complex1.nthRoot(876);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.NaN.pow(complex0);
      complex0.pow(complex1);
      complex2.I.conjugate();
      Complex complex3 = complex0.ZERO.divide(0.0);
      Complex complex4 = complex3.subtract(771.220885759);
      Complex complex5 = complex3.I.subtract(complex0);
      complex4.I.log();
      Complex complex6 = complex2.INF.pow(complex3);
      complex2.toString();
      complex2.ZERO.exp();
      complex0.I.acos();
      Complex complex7 = complex0.sqrt1z();
      complex2.toString();
      Complex complex8 = complex1.pow(0.0);
      complex4.ZERO.sin();
      complex8.I.getField();
      complex6.conjugate();
      complex3.ONE.add(771.220885759);
      complex4.divide(0.0);
      complex1.cosh();
      Complex complex9 = complex2.pow((-2858.55212672));
      complex9.ZERO.asin();
      Complex complex10 = Complex.INF;
      complex7.I.pow(complex10);
      complex6.cos();
      complex4.divide(complex5);
      complex4.multiply(20.0);
      complex7.readResolve();
      Complex.valueOf((-2858.55212672));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-233.73611));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.multiply((-233.73611));
      complex1.ZERO.toString();
      Complex complex3 = complex2.createComplex((-233.73611), (-233.73611));
      complex3.ZERO.multiply(complex2);
      complex0.getArgument();
      complex2.exp();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.tan();
      complex5.multiply(complex1);
      complex2.tanh();
      complex4.ONE.log();
      Complex complex6 = complex1.asin();
      complex6.sinh();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex6.add(Double.POSITIVE_INFINITY);
      complex2.hashCode();
      complex0.log();
      complex9.readResolve();
      complex7.add(171.00525272465);
      Complex complex10 = complex4.exp();
      complex10.getReal();
      complex10.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.readResolve();
      complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex2.I.divide(0.0);
      complex4.ONE.atan();
      Complex complex5 = complex1.INF.pow(0.0);
      Complex complex6 = complex2.ZERO.negate();
      complex6.INF.multiply(3686);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.I.log();
      Complex complex8 = complex7.createComplex(0.22782009840011597, Double.POSITIVE_INFINITY);
      Complex.valueOf(20.0, 0.0);
      complex0.getField();
      complex8.getReal();
      complex4.isInfinite();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex.valueOf(0.22782009840011597, 0.0);
      complex3.log();
      complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.toString();
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.INF.sqrt1z();
      complex2.divide(0.0);
      Complex complex4 = complex0.asin();
      complex4.ONE.tan();
      complex4.INF.conjugate();
      complex0.INF.createComplex(0.0, (-1177.3));
      complex0.getReal();
      complex4.isNaN();
      complex2.getReal();
      complex3.isNaN();
      complex0.log();
      complex2.cos();
      Complex.valueOf((-841.073), 1341.1159736238903);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(1992.930044972042);
      Complex complex2 = complex1.pow((-2176.9968));
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.tanh();
      complex4.I.tan();
      complex4.INF.negate();
      complex3.INF.nthRoot(1841);
      complex3.I.acos();
      Complex complex5 = complex1.ONE.cosh();
      complex3.cosh();
      Complex complex6 = Complex.valueOf(1992.930044972042);
      complex1.INF.getField();
      complex0.toString();
      complex1.getImaginary();
      Complex complex7 = complex2.divide(complex5);
      Complex complex8 = complex5.ZERO.sqrt1z();
      complex1.getField();
      complex7.tanh();
      Complex.valueOf((-2635.9413));
      complex0.pow(Double.POSITIVE_INFINITY);
      complex7.cosh();
      Complex complex9 = Complex.ONE;
      complex8.I.divide(complex9);
      complex2.pow(5034.654591417291);
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex0.isNaN();
      try { 
        complex8.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.divide((-3215.866));
      Complex complex3 = complex2.INF.createComplex(1233.141, (-3215.866));
      Complex.valueOf((-1.0), (-1.0));
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = complex4.NaN.add(complex0);
      Complex complex6 = complex1.pow(1566.0);
      complex6.multiply(1258);
      Complex complex7 = complex2.multiply(0);
      Complex complex8 = complex3.I.reciprocal();
      Complex complex9 = complex7.negate();
      complex3.ONE.getArgument();
      Complex complex10 = complex3.pow(complex6);
      complex10.ZERO.toString();
      Complex complex11 = complex5.cos();
      complex11.ONE.sin();
      complex9.subtract(complex5);
      complex7.NaN.createComplex(0.0, 20.0);
      complex5.ONE.getField();
      complex2.I.subtract(complex6);
      Complex complex12 = complex5.cosh();
      complex12.ONE.multiply((-1150));
      complex1.ZERO.cos();
      complex7.hashCode();
      complex3.getField();
      complex5.ZERO.subtract(complex9);
      complex5.readResolve();
      complex5.add(0.0);
      complex2.multiply(complex5);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1208.66, 1208.66);
      complex0.ONE.readResolve();
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf(1208.66, 6.283185307179586);
      complex4.NaN.acos();
      complex3.I.abs();
      complex3.ZERO.exp();
      Complex complex5 = complex2.subtract(complex0);
      complex5.nthRoot(1001);
      complex5.isInfinite();
      Complex complex6 = Complex.valueOf((double) 1001);
      complex6.divide(103.81563451);
      Complex complex7 = complex2.sqrt();
      complex5.acos();
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.tanh();
      complex2.INF.hashCode();
      Complex complex3 = complex1.NaN.divide(0.0);
      complex0.I.readResolve();
      Complex complex4 = complex1.I.cosh();
      complex0.getImaginary();
      Complex complex5 = complex4.pow(Double.NaN);
      complex5.INF.add(Double.NaN);
      complex0.INF.readResolve();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.multiply(0.0);
      complex7.ZERO.cosh();
      Complex complex8 = complex7.ONE.reciprocal();
      complex8.abs();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex9.asin();
      complex6.NaN.multiply(complex4);
      complex3.hashCode();
      complex10.exp();
      complex9.subtract(complex2);
      Complex complex12 = complex1.add(Double.NaN);
      complex12.ZERO.add(Double.NaN);
      complex4.log();
      complex7.tan();
      complex11.subtract(1.0);
      complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-2.4075054705261798E-98));
      complex0.getField();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(1027.8);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow((-1.3850458263351744E91));
      Complex complex2 = complex0.tanh();
      complex1.toString();
      Complex complex3 = complex1.ZERO.multiply(7);
      complex3.ONE.hashCode();
      complex1.getReal();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.I.multiply((-1.3850458263351744E91));
      Complex complex6 = complex5.I.createComplex((-1.3850458263351744E91), 0.0);
      complex6.readResolve();
      complex2.divide(complex0);
      complex0.sqrt1z();
      complex0.readResolve();
      complex2.multiply(994.561229405737);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow((-2336.3899944933764));
      complex1.getArgument();
      complex1.ONE.abs();
      Complex complex2 = complex1.add(complex0);
      complex2.ZERO.subtract(complex1);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-454.49860483), (-454.49860483));
      Complex complex1 = new Complex((-454.49860483));
      Complex.valueOf((-4328.95), (-2234.6888463244213));
      complex0.INF.sqrt1z();
      complex0.ONE.divide(complex1);
      complex0.INF.cos();
      complex0.add((-454.49860483));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-246.1));
      Complex complex1 = complex0.I.pow((-246.1));
      Complex complex2 = complex1.add(complex0);
      complex2.I.pow((-246.1));
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex0.log();
      complex3.NaN.divide(complex4);
      complex0.getImaginary();
      Complex complex5 = complex1.multiply((-246.1));
      Complex complex6 = complex5.ONE.tanh();
      complex0.pow(complex6);
      complex5.getArgument();
      Complex complex7 = complex3.multiply(0);
      complex7.INF.getField();
      complex6.add(complex7);
      complex7.getReal();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.conjugate();
      complex2.INF.toString();
      complex2.I.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.readResolve();
      complex0.getImaginary();
      Complex complex4 = Complex.NaN;
      complex3.add(complex4);
      complex4.nthRoot(2628);
      complex3.sin();
      complex2.getField();
      Complex.valueOf((double) 2628, (double) 2628);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.I.add((-1613.74443900346));
      Complex complex2 = complex1.INF.sqrt();
      Complex.valueOf((-1613.74443900346));
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex2.INF.multiply(complex1);
      complex3.ZERO.pow(1276.5896297706454);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.ONE.subtract(complex2);
      Complex complex6 = complex5.I.subtract(complex2);
      Complex complex7 = complex1.reciprocal();
      complex7.divide((-1613.74443900346));
      complex4.tan();
      Complex complex8 = complex2.sqrt1z();
      complex8.divide(1276.5896297706454);
      Complex.valueOf((-1613.74443900346), (-1613.74443900346));
      Complex complex9 = complex2.negate();
      complex6.sqrt();
      Complex.valueOf(2838.58461384727);
      complex9.add((-948.0222535));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4645.51535), (-20.0));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.pow(0.0);
      complex1.getField();
      complex1.NaN.getField();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.NaN.add(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex6 = complex0.conjugate();
      complex6.ONE.sqrt();
      complex6.NaN.getField();
      Complex complex7 = complex0.conjugate();
      complex6.NaN.sqrt();
      complex7.isNaN();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex2.log();
      complex5.ZERO.add(4217.6321695399);
      complex9.I.multiply(complex3);
      complex8.NaN.exp();
      complex7.getArgument();
      complex4.sin();
      complex5.subtract(20.0);
      Complex complex10 = Complex.valueOf(345.67901108089313);
      complex10.subtract(0.0);
      complex8.nthRoot(2208);
      complex6.isInfinite();
      complex4.isInfinite();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1369.339498545322);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.I.sqrt1z();
      Complex complex4 = complex2.ZERO.multiply(complex0);
      Complex complex5 = complex0.INF.pow(0.0);
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex6.INF.add(complex0);
      complex0.ZERO.hashCode();
      complex7.I.getArgument();
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex8.I.sinh();
      Complex complex10 = Complex.I;
      Complex complex11 = complex6.ZERO.multiply(complex10);
      Complex complex12 = complex11.NaN.conjugate();
      Complex complex13 = complex5.INF.multiply(complex6);
      complex6.sqrt1z();
      complex5.multiply(1.5707963267948966);
      complex9.multiply((-817.66));
      Complex.valueOf(1.099358320236206);
      complex4.reciprocal();
      complex4.acos();
      complex13.hashCode();
      complex12.exp();
      complex13.reciprocal();
      complex3.sin();
      complex6.pow((-1169.032107874318));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.pow(4035.6573122);
      Complex complex2 = complex1.INF.sqrt1z();
      complex0.getImaginary();
      complex0.multiply(complex1);
      Complex complex3 = complex1.ZERO.pow((-1936.719444164));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.subtract(2389.52);
      complex0.ONE.conjugate();
      Complex complex6 = complex0.multiply(1191.2702242723904);
      complex1.abs();
      complex4.negate();
      complex6.NaN.negate();
      Complex complex7 = complex2.multiply(complex0);
      complex6.isNaN();
      complex7.pow(Double.POSITIVE_INFINITY);
      complex5.pow(4035.6573122);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-300.1149336158846));
      Complex complex1 = new Complex((-300.1149336158846), (-300.1149336158846));
      Complex complex2 = Complex.valueOf((-300.1149336158846));
      complex2.ZERO.acos();
      complex2.ONE.getArgument();
      Complex complex3 = complex0.NaN.divide(complex1);
      complex0.log();
      Complex complex4 = complex3.add(0.0);
      complex4.toString();
      complex0.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-1248.2258435767308), (-106.0));
      Complex complex1 = Complex.ONE;
      complex0.atan();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.INF.subtract((-4053.532));
      complex1.NaN.divide((-106.0));
      Complex.valueOf((-1248.2258435767308), (-1455.2002324659));
      Complex complex4 = complex2.INF.multiply(1);
      Complex complex5 = complex4.NaN.sqrt1z();
      complex3.INF.nthRoot(1);
      Complex complex6 = complex1.ZERO.asin();
      Complex complex7 = complex6.asin();
      complex7.NaN.cosh();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex8.INF.tan();
      complex9.INF.sinh();
      complex1.INF.readResolve();
      complex1.ZERO.sinh();
      Complex complex10 = complex0.add(complex1);
      complex10.NaN.sinh();
      complex3.toString();
      complex1.hashCode();
      complex10.hashCode();
      Complex complex11 = complex0.sqrt();
      complex3.tanh();
      complex11.sinh();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.exp();
      complex4.sinh();
      Complex complex5 = complex1.ZERO.subtract(0.0);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex7.ZERO.log();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex4.pow(complex10);
      Complex.valueOf(1894.68079855225, 1894.68079855225);
      Complex complex12 = complex11.log();
      complex7.NaN.cosh();
      Complex complex13 = complex0.divide(0.0);
      Complex complex14 = complex0.conjugate();
      complex14.NaN.exp();
      Complex complex15 = complex11.acos();
      complex15.NaN.abs();
      complex2.pow(0.0);
      Complex complex16 = complex8.sin();
      complex2.ONE.multiply(complex9);
      complex5.acos();
      complex13.getImaginary();
      Complex complex17 = complex13.sinh();
      complex6.I.exp();
      complex10.toString();
      Complex complex18 = complex16.divide(complex17);
      complex17.cos();
      complex14.abs();
      complex12.sinh();
      complex18.negate();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-929.1952336), (-929.1952336));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(846.9616737312797);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.readResolve();
      complex0.getArgument();
      complex0.isInfinite();
      complex0.cos();
      Complex.valueOf(0.0);
      complex0.log();
      complex0.multiply(complex1);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.isNaN();
      complex0.getReal();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.I.tan();
      complex4.I.abs();
      complex0.getArgument();
      Complex complex5 = complex1.INF.multiply((-3529));
      Complex complex6 = complex1.INF.pow(complex3);
      complex0.NaN.hashCode();
      Complex complex7 = complex3.divide(complex2);
      Complex complex8 = complex1.ONE.add(complex7);
      Complex complex9 = Complex.I;
      complex1.divide(complex9);
      complex6.equals(complex5);
      complex8.conjugate();
      complex2.I.readResolve();
      Complex complex10 = complex2.log();
      complex6.reciprocal();
      complex8.acos();
      complex1.pow(complex4);
      complex4.sinh();
      Complex complex11 = complex1.multiply(complex4);
      complex11.I.multiply(20.0);
      complex11.multiply(complex5);
      complex6.exp();
      complex10.equals(complex2);
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.add(1503.0);
      Complex complex3 = complex2.ONE.multiply(981);
      Complex complex4 = complex3.NaN.sinh();
      complex4.I.cos();
      complex0.isNaN();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.ONE.tan();
      complex6.INF.createComplex((-1774.0), 1127.3395734);
      Complex complex7 = Complex.I;
      complex0.I.acos();
      complex3.divide(complex7);
      complex0.subtract(1005.0);
      Complex.valueOf(1503.0, 0.0);
      complex1.multiply((-2014));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex0.ZERO.multiply(complex2);
      Complex complex5 = complex1.subtract((-2520.51));
      assertEquals(2522.067407724655, complex5.getReal(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      complex0.getField();
      complex4.equals(complex1);
      complex2.NaN.abs();
      Complex complex6 = complex4.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      
      Complex complex7 = complex3.ZERO.multiply(1);
      Complex complex8 = complex4.pow((-427.17));
      complex3.abs();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex2.ZERO.multiply(complex9);
      Complex complex11 = complex9.NaN.createComplex(5.266381689434054E277, (-193.13744590557408));
      Complex complex12 = complex11.I.sqrt();
      assertEquals(0.7071067811865476, complex12.getReal(), 0.01);
      
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = complex13.ONE.sin();
      complex9.tan();
      Complex complex15 = Complex.valueOf(Double.NaN);
      Complex complex16 = complex15.I.tanh();
      assertEquals(1.557407724654902, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex9.atan();
      complex17.abs();
      Complex complex18 = complex0.sqrt1z();
      assertTrue(complex18.equals((Object)complex7));
      
      boolean boolean0 = complex14.isNaN();
      assertFalse(boolean0);
      assertSame(complex3, complex9);
      assertSame(complex13, complex10);
      assertFalse(complex3.equals((Object)complex16));
      
      Complex complex19 = Complex.valueOf((double) 1);
      assertFalse(complex19.isInfinite());
      assertTrue(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2178.217116861));
      Complex complex1 = complex0.ONE.sinh();
      complex0.ZERO.hashCode();
      complex0.INF.nthRoot(37);
      try { 
        complex1.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.multiply(complex0);
      Complex complex2 = complex0.cosh();
      List<Complex> list0 = complex2.ONE.nthRoot(578);
      assertEquals(578, list0.size());
      assertTrue(list0.contains(complex0));
      
      Complex complex3 = complex0.asin();
      complex3.ONE.getField();
      Complex complex4 = complex0.asin();
      String string0 = complex4.ONE.toString();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals("(1.0, 0.0)", string0);
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.ZERO.pow((-3777.29922621903));
      Complex complex7 = Complex.valueOf((-747.2194699), (-7.048932272279454E-8));
      assertEquals((-747.2194699), complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.ZERO.sinh();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex9 = Complex.valueOf((-3777.29922621903), (-3777.29922621903));
      complex0.equals(complex9);
      Complex complex10 = complex1.multiply(complex9);
      assertTrue(complex10.equals((Object)complex6));
      
      Complex complex11 = complex2.cos();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-5365.9618189647), (-5365.9618189647));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-5365.9618189647), complex1.getImaginary(), 0.01);
      assertEquals((-5365.9618189647), complex1.getReal(), 0.01);
  }
}
