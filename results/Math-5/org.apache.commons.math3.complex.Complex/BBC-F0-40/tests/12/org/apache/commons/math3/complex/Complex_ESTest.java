/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:00:38 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-357.9334292509));
      Complex complex1 = complex0.multiply((-357.9334292509));
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.sinh();
      complex4.negate();
      Complex complex5 = complex1.NaN.tan();
      complex5.ONE.add(complex4);
      complex1.sqrt1z();
      complex5.INF.hashCode();
      Complex.valueOf(20.0);
      complex5.ZERO.divide((-357.9334292509));
      complex4.sqrt1z();
      Complex complex6 = complex2.divide(complex3);
      complex6.ZERO.sqrt1z();
      complex0.INF.tanh();
      Complex complex7 = complex1.NaN.createComplex(2.0, (-357.9334292509));
      complex7.ONE.toString();
      Complex complex8 = complex1.log();
      complex8.ONE.divide(20.0);
      complex2.getField();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex9.I.add(complex2);
      complex9.cos();
      complex10.subtract(complex5);
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.912195034920641E-67, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.subtract((-1404.636));
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.ZERO.reciprocal();
      Complex complex6 = Complex.valueOf(9.638429235976022E-6, Double.POSITIVE_INFINITY);
      complex1.ONE.tan();
      Complex complex7 = complex6.INF.divide(complex0);
      complex7.ZERO.getArgument();
      complex0.getField();
      complex2.subtract(complex0);
      Complex complex8 = complex0.add(complex1);
      complex8.readResolve();
      complex0.toString();
      Complex complex9 = complex5.sqrt1z();
      complex9.getArgument();
      complex8.reciprocal();
      complex6.cosh();
      complex8.conjugate();
      complex0.tanh();
      complex2.pow((-926.87));
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2485.775), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex((-2485.775), 20.0);
      Complex complex2 = complex0.multiply(2146159675);
      complex2.NaN.asin();
      complex1.multiply(2146159675);
      complex2.tanh();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1861.67127205616, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex4.NaN.cosh();
      complex4.I.acos();
      complex1.nthRoot(754);
      Complex complex6 = complex2.divide(Double.POSITIVE_INFINITY);
      complex6.NaN.reciprocal();
      Complex complex7 = complex1.createComplex(1861.67127205616, 1861.67127205616);
      complex7.add(complex2);
      Complex complex8 = complex0.pow(complex3);
      complex0.multiply(complex1);
      complex1.ONE.acos();
      Complex complex9 = complex7.createComplex(2.0, 2.0);
      complex2.I.sqrt();
      complex9.I.getArgument();
      Complex complex10 = complex9.multiply(complex8);
      complex10.conjugate();
      complex5.pow(2.26018899202058E-5);
      complex8.cosh();
      complex1.pow((-0.999058663906946));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1357.5765423343055), Double.POSITIVE_INFINITY);
      complex1.multiply((-1357.5765423343055));
      Complex complex2 = new Complex((-1357.5765423343055), Double.POSITIVE_INFINITY);
      Complex.valueOf((-1357.5765423343055));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN, 1041.3);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.multiply(1041.3);
      complex0.acos();
      Complex complex3 = new Complex(1041.3, Double.NaN);
      complex2.nthRoot(2145268850);
      Complex complex4 = complex2.divide(complex0);
      complex4.getField();
      complex4.getField();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
      Complex.valueOf(1.0104849934577942E-7, 1203.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.add((-1983.22739));
      complex3.I.divide((-1983.22739));
      complex1.abs();
      complex1.tanh();
      complex0.add(2.3014992782060497E-93);
      complex0.divide(Double.NaN);
      complex2.createComplex(2.3014992782060497E-93, (-1983.22739));
      complex1.pow(1686.302656683);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.exp();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tan();
      complex1.cosh();
      complex1.atan();
      Complex complex2 = Complex.valueOf(1.5707963267948966);
      Complex complex3 = complex2.atan();
      complex3.nthRoot(4984);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(3012.2542655154493, 3012.2542655154493);
      complex0.nthRoot(1);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-237.0135478487597), 1.2548756986985307E13);
      complex0.I.nthRoot(1130);
      Complex complex1 = complex0.multiply((-1005));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex0.divide((-1668.1963301747635));
      Complex complex6 = complex5.NaN.add((-1668.1963301747635));
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex5.conjugate();
      complex7.ONE.getField();
      complex7.I.getField();
      complex1.cos();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex11.NaN.pow(complex8);
      Complex complex13 = complex9.add(Double.NaN);
      complex8.sinh();
      complex2.divide(complex6);
      Complex complex14 = complex4.subtract(complex13);
      Complex complex15 = complex3.asin();
      complex7.cos();
      complex1.sqrt1z();
      complex1.readResolve();
      complex14.multiply((double) (-1005));
      complex10.divide(complex14);
      complex15.reciprocal();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(15.263004168082945);
      Complex complex1 = complex0.subtract(Double.NaN);
      complex1.cos();
      Complex.valueOf((-1395.032), Double.NaN);
      complex0.hashCode();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ZERO;
      complex4.multiply(complex3);
      Complex complex5 = complex3.cosh();
      complex5.multiply(1.0);
      Complex.valueOf(0.44089668732168175);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(968.60743);
      Complex.valueOf(1.0041012794280992E-195, (-1342.836647069));
      Complex complex1 = complex0.multiply(2196.341492307058);
      complex0.sqrt();
      complex1.acos();
      Complex complex2 = new Complex(2196.341492307058, 968.60743);
      complex1.readResolve();
      Complex complex3 = Complex.ONE;
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(2196.341492307058, (-3.5997360512765566E-9));
      complex2.equals(complex4);
      Complex complex5 = new Complex(1.0041012794280992E-195, (-1402.7461228763661));
      complex5.tan();
      Complex.valueOf(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1524.6514509643464));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      Complex complex4 = new Complex((-1524.6514509643464), 1069.9855138643);
      Object object0 = complex1.readResolve();
      complex0.NaN.cosh();
      complex3.equals(object0);
      complex3.ONE.nthRoot(37);
      complex2.divide((-1524.6514509643464));
      Complex.valueOf((-1524.6514509643464), Double.POSITIVE_INFINITY);
      complex2.hashCode();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      Complex.valueOf(1069.9855138643, 2.0);
      complex6.abs();
      Complex complex7 = complex5.createComplex((-2049.0143138), Double.POSITIVE_INFINITY);
      complex3.tan();
      complex4.getArgument();
      Complex.valueOf(2.5296661933856965, (-2049.0143138));
      Complex complex8 = Complex.ONE;
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 1389.5387038);
      Complex complex1 = Complex.valueOf((-1984.53521583));
      complex0.ZERO.abs();
      complex1.NaN.toString();
      complex0.NaN.add(complex1);
      Complex complex2 = complex0.exp();
      complex0.ONE.abs();
      complex2.NaN.divide(2087.888235334);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.3601844310760498);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.divide(3.091617462831603E221);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex2.NaN.tanh();
      complex4.I.pow(4146.5134683994);
      Complex complex5 = Complex.INF;
      complex1.toString();
      complex3.abs();
      complex5.sin();
      complex5.getReal();
      Complex complex6 = complex5.ONE.multiply(complex0);
      complex1.asin();
      Complex complex7 = complex5.log();
      complex5.getReal();
      complex7.sqrt();
      complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.log();
      complex0.tan();
      complex1.acos();
      Complex.valueOf((-20.0));
      complex2.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.cos();
      complex1.log();
      Complex complex2 = complex0.tan();
      complex2.acos();
      Complex.valueOf((-20.0));
      complex0.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.pow(3206.437041657802);
      complex1.I.negate();
      Complex complex2 = Complex.ZERO;
      complex2.divide((-20.0));
      Complex complex3 = complex0.pow(complex2);
      complex3.abs();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(720.0, (-2660.737329));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.multiply(968.60743);
      Complex complex3 = complex2.sqrt();
      complex2.acos();
      Complex complex4 = new Complex(968.60743, Double.NaN);
      complex3.readResolve();
      complex1.nthRoot(1384);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1524.6514509643464), (-3120.6497));
      Complex complex1 = complex0.multiply(1.0294301092654604E-8);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = new Complex(40.30069255894, 1.47455533128511);
      complex0.readResolve();
      complex2.equals(complex0);
      complex3.tan();
      Complex complex5 = complex3.cosh();
      complex4.atan();
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1524.6514509643464));
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf((-1524.6514509643464), Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.multiply(511);
      complex1.hashCode();
      Complex complex6 = new Complex((-1524.6514509643464), 1510.6712333688768);
      Complex complex7 = new Complex((-1979.26), 1166.181);
      complex3.divide(complex5);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1509.95));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.INF;
      complex2.INF.cos();
      Complex complex4 = complex2.tan();
      complex2.equals(complex4);
      complex1.tan();
      complex2.cosh();
      complex4.atan();
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(40.30069255894);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(40.30069255894, (-1524.6514509643464));
      Complex complex3 = new Complex((-1524.6514509643464));
      complex2.multiply(511);
      complex0.hashCode();
      Complex.valueOf(2541.94644561, 6.283185307179586);
      complex3.cos();
      Complex complex4 = Complex.I;
      complex4.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex.valueOf((-1524.6514509643464));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex((-1509.95));
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      Complex complex4 = new Complex(1.454991340637207, (-1509.95));
      complex3.divide(complex4);
      try { 
        complex1.nthRoot((-2042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,042
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(40.30069255894);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      complex2.acos();
      complex2.multiply(511);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.multiply(511);
      complex4.hashCode();
      Complex complex5 = new Complex(153.948673435, 1.184154459111628E-8);
      Complex complex6 = complex5.I.add(complex2);
      Complex complex7 = Complex.ONE;
      complex0.divide(complex7);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1509.95));
      Complex complex1 = complex0.exp();
      complex1.ZERO.readResolve();
      complex0.ONE.hashCode();
      complex1.I.negate();
      Complex complex2 = complex0.multiply(576.733783);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.NaN.log();
      complex6.INF.sin();
      Complex complex7 = complex2.log();
      complex7.sqrt1z();
      Complex.valueOf(0.012803052432026618);
      Complex.valueOf((-836.088755170664));
      complex4.subtract(0.09406651556491852);
      Complex complex8 = Complex.valueOf(3220.7047627594, (-836.088755170664));
      complex5.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1524.6514509643464));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      Complex complex4 = new Complex((-1524.6514509643464), 1069.9855138643);
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      complex3.ONE.nthRoot(37);
      complex2.divide((-1524.6514509643464));
      Complex.valueOf((-1524.6514509643464), Double.POSITIVE_INFINITY);
      complex2.hashCode();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      complex6.abs();
      Complex complex7 = complex5.createComplex((-2049.0143138), Double.POSITIVE_INFINITY);
      complex3.tan();
      complex4.getArgument();
      Complex.valueOf(2.5296661933856965, (-2049.0143138));
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2.933016992001806E-10));
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex2.getReal();
      complex4.acos();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1509.95));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex((-1509.95));
      Complex complex4 = complex3.INF.multiply((-5339));
      complex4.NaN.subtract(complex1);
      complex3.I.add(complex1);
      complex4.I.hashCode();
      complex2.INF.cos();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.divide((double) 1372);
      complex6.hashCode();
      Complex.valueOf(279.243004865);
      complex3.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(40.30069255894);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(40.30069255894, (-1524.6514509643464));
      Complex complex3 = Complex.I;
      complex2.multiply(511);
      complex0.hashCode();
      Complex complex4 = new Complex(2653.35164, 1.454991340637207);
      Complex complex5 = new Complex(20.0, 20.0);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.add(complex1);
      complex2.ONE.sin();
      Complex complex4 = complex3.INF.add((-61575.30845221637));
      complex4.NaN.add(Double.NaN);
      Complex complex5 = complex1.subtract(complex0);
      complex5.ZERO.cos();
      complex5.readResolve();
      Complex complex6 = complex2.add((-211.587713774));
      complex6.I.exp();
      Complex complex7 = complex3.createComplex(Double.NaN, (-61575.30845221637));
      complex2.tan();
      complex7.multiply(2.038591065462516E31);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(720.0, (-2660.737329));
      Complex complex1 = complex0.multiply(517);
      Complex complex2 = complex1.divide(2.933016992001806E-10);
      complex2.getReal();
      Complex complex3 = complex2.acos();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1524.6514509643464));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.INF;
      complex3.I.nthRoot(1372);
      complex2.INF.cos();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.sqrt();
      complex5.log();
      Complex complex6 = Complex.ONE;
      complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(40.30069255894, 40.30069255894);
      Complex complex1 = complex0.add((-879.24));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.acos();
      complex3.divide((-879.24));
      complex1.tan();
      complex2.divide((-733.824948));
      complex3.getReal();
      complex3.acos();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1.0155552195374609E-134), 0.3601844310760498);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(824.2);
      Complex complex3 = Complex.valueOf((-2166.8603));
      complex2.hashCode();
      complex1.getReal();
      complex2.readResolve();
      complex3.pow(Double.NaN);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.sqrt1z();
      complex2.reciprocal();
      complex0.conjugate();
      Complex.valueOf((-4731.651669419), (-2166.8603));
      complex3.cosh();
      complex4.getField();
      complex5.exp();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(40.30069255894, 40.30069255894);
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.multiply(complex0);
      complex1.readResolve();
      complex1.nthRoot(7);
      complex0.multiply(0.0);
      complex1.reciprocal();
      complex1.multiply(1464);
      Complex.valueOf((double) 1464);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-6.889072914229094E-9));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.tanh();
      complex2.subtract(complex0);
      complex2.multiply(complex0);
      Complex complex3 = Complex.ZERO;
      complex3.multiply((-1.0));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2.933016992001806E-10));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.I.reciprocal();
      complex1.subtract(complex4);
      complex3.multiply(1.8631451577542948E-8);
      Complex.valueOf((-2.933016992001806E-10));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.46452492584643E-8);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.tanh();
      complex0.I.getField();
      Complex complex3 = complex1.ONE.add(complex2);
      complex3.ONE.getField();
      Complex complex4 = complex1.multiply(1520);
      Complex complex5 = complex4.log();
      complex1.ONE.sinh();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex4.pow(complex2);
      complex7.ONE.exp();
      complex1.createComplex(831.93416, 3317602.5769825955);
      Complex complex8 = complex0.divide(complex7);
      complex8.NaN.add(2029.428731918);
      Complex complex9 = new Complex(1.0, (-1.154629885168314E-7));
      complex9.I.getField();
      Complex complex10 = complex5.add(complex9);
      complex10.reciprocal();
      complex4.ZERO.divide((-4642.72170894));
      complex0.NaN.sin();
      Complex complex11 = Complex.valueOf((-1805.4840334), (-1805.4840334));
      complex6.equals(complex11);
      complex5.subtract(complex9);
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.conjugate();
      Complex complex1 = complex0.subtract((-7.368602086210704E159));
      complex1.ZERO.cos();
      complex1.hashCode();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.ZERO;
      complex2.ZERO.multiply(complex3);
      Complex complex4 = complex0.cosh();
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1509.95));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.INF.multiply((-5339));
      complex4.I.hashCode();
      complex3.I.nthRoot(1372);
      Complex complex5 = complex2.INF.cos();
      complex5.getField();
      complex4.abs();
      complex4.getField();
      Complex complex6 = new Complex((-274.25), 1298.8);
      complex6.log();
      complex0.equals(complex5);
      Complex complex7 = complex6.sqrt();
      complex2.atan();
      complex7.multiply((-274.25));
      Complex complex8 = new Complex(8.938334752179552E-9, Double.POSITIVE_INFINITY);
      complex8.sqrt();
      Complex complex9 = complex7.divide((double) (-5339));
      complex9.getReal();
      complex0.sqrt();
      Complex complex10 = Complex.I;
      complex10.isNaN();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-279.243004865), (-279.243004865));
      complex0.nthRoot(7);
      Complex complex1 = complex0.ONE.createComplex((-824.2), (-824.2));
      Complex complex2 = complex1.I.multiply((-824.2));
      Complex complex3 = new Complex((-279.243004865));
      complex2.I.pow(complex1);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex0.divide((-824.2));
      complex2.hashCode();
      complex1.sqrt();
      complex4.abs();
      complex1.multiply((-308.9));
      complex7.createComplex(2.0860312877435047E-8, (-605.033162256));
      Complex complex8 = complex1.tan();
      complex5.getImaginary();
      complex1.isNaN();
      complex8.getArgument();
      complex6.multiply(7);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.createComplex((-824.2), (-824.2));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(1100.937184435);
      Complex complex3 = new Complex(1100.937184435);
      Complex complex4 = complex0.pow(complex1);
      complex0.divide(complex4);
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.INF;
      complex6.getField();
      Complex complex7 = new Complex((-824.2));
      complex7.abs();
      complex2.getField();
      Complex complex8 = complex5.log();
      Object object0 = new Object();
      complex8.equals(object0);
      complex2.sqrt();
      complex4.atan();
      complex1.multiply(824.2);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = new Complex(0.0);
      complex10.divide((-824.2));
      complex9.getReal();
      complex5.sqrt();
      complex4.isNaN();
      complex8.cos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(4695282.55971609, (-1319.0));
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.subtract(complex1);
      complex4.divide(0.0);
      complex1.getReal();
      Complex complex5 = complex2.sqrt();
      complex5.isNaN();
      complex2.cos();
      complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.acos();
      complex4.I.subtract(0.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.NaN.multiply((-5229));
      complex6.NaN.getField();
      complex0.equals(complex1);
      complex0.NaN.pow(complex3);
      complex0.divide(1.0);
      Complex complex7 = complex0.ONE.createComplex((-5229), (-5229));
      Complex complex8 = complex0.multiply(1457);
      complex7.ZERO.sinh();
      complex8.ONE.pow(1.0);
      complex8.INF.getField();
      complex1.I.getArgument();
      Complex complex9 = complex7.I.atan();
      complex2.atan();
      complex2.hashCode();
      Complex complex10 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex11 = complex7.log();
      complex11.asin();
      complex7.sin();
      complex10.multiply(1457);
      complex8.multiply((double) 1457);
      complex10.reciprocal();
      complex9.multiply((-3257));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(40.30069255894, 40.30069255894);
      Complex complex1 = complex0.add((-879.24));
      Complex complex2 = complex1.NaN.tanh();
      complex0.subtract(complex1);
      complex2.sqrt();
      complex2.abs();
      Complex complex3 = Complex.ZERO;
      complex1.cosh();
      Complex complex4 = Complex.valueOf(40.30069255894, 1.0);
      complex4.atan();
      complex3.divide(40.30069255894);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2.933016992001806E-10));
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.ZERO.atan();
      complex3.getArgument();
      complex1.atan();
      Complex complex5 = complex4.atan();
      complex0.hashCode();
      Complex complex6 = Complex.valueOf(2.218596935272217);
      complex3.getField();
      Complex complex7 = complex5.log();
      complex6.asin();
      complex5.sin();
      complex1.multiply(1299);
      Complex complex8 = Complex.INF;
      complex8.multiply((double) 1299);
      complex7.reciprocal();
      complex6.multiply(1278);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1746.185121768);
      Complex complex2 = complex0.ONE.add(complex1);
      complex1.I.acos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.conjugate();
      complex2.ONE.nthRoot(393);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex3.pow(complex1);
      complex5.ZERO.readResolve();
      complex5.ONE.getArgument();
      complex0.NaN.sinh();
      complex4.I.reciprocal();
      complex0.createComplex((-1927.830543), 3248.2916414604038);
      complex7.ONE.pow(complex6);
      complex2.toString();
      complex6.ZERO.nthRoot(481);
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex5.sin();
      complex8.acos();
      complex1.subtract(1746.185121768);
      complex7.conjugate();
      complex9.multiply(complex8);
      complex0.sqrt1z();
      complex1.divide(complex4);
      Complex complex10 = Complex.NaN;
      complex5.divide(complex10);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1509.95));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.INF.multiply((-5339));
      complex4.I.hashCode();
      complex3.I.nthRoot(1372);
      complex2.INF.cos();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.divide((double) 1372);
      complex6.hashCode();
      complex5.getReal();
      complex0.sqrt();
      complex5.abs();
      Complex complex7 = Complex.ZERO;
      complex0.cosh();
      Complex.valueOf((-1509.95), 368.3711);
      complex5.atan();
      complex2.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(215.54296409, 215.54296409);
      Complex complex1 = Complex.ONE;
      complex1.I.subtract(215.54296409);
      Complex complex2 = Complex.valueOf(0.0, 368.3711);
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex0.divide(complex1);
      Complex.valueOf(215.54296409, 215.54296409);
      complex4.sqrt1z();
      complex2.pow(215.54296409);
      complex3.sqrt1z();
      complex1.nthRoot(574);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2.933016992001806E-10));
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(complex1);
      complex3.ZERO.atan();
      Complex complex4 = complex0.I.acos();
      complex1.I.tan();
      complex4.tanh();
      Complex complex5 = Complex.ONE;
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.sinh();
      complex4.ZERO.acos();
      complex3.abs();
      Complex complex5 = Complex.valueOf((-1756.182657));
      complex3.getImaginary();
      Complex complex6 = Complex.ONE;
      complex6.cosh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.subtract(Double.NaN);
      complex1.getArgument();
      complex5.sqrt();
      complex8.sin();
      complex6.pow(-0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.41997434161402614);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract(1363.7058816618778);
      Complex complex3 = Complex.valueOf(0.41997434161402614, 0.41997434161402614);
      complex1.reciprocal();
      complex2.divide(complex3);
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
      complex3.createComplex((-1775.4560152801), (-1415.1336));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2619.876131);
      complex1.negate();
      Complex complex2 = complex0.divide(2402.370694766763);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.sin();
      complex1.toString();
      complex4.abs();
      complex4.getReal();
      Complex complex6 = complex4.multiply(complex1);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex5.log();
      complex8.ONE.multiply(complex0);
      complex5.getReal();
      complex7.sqrt();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1.0155552195374609E-134), 0.3601844310760498);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(824.2);
      Complex complex3 = Complex.valueOf((-2166.8603));
      complex2.hashCode();
      complex1.getReal();
      complex2.readResolve();
      complex3.pow(Double.NaN);
      complex2.tanh();
      complex3.sqrt1z();
      complex2.reciprocal();
      complex0.conjugate();
      Complex.valueOf((-4731.651669419), 4.005882964287806E-150);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(Double.NaN, (-0.5833698921921484));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(215.54296409, 215.54296409);
      Complex complex1 = Complex.ONE;
      complex1.I.subtract(215.54296409);
      Complex.valueOf(0.0, 368.3711038892);
      complex1.I.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      Complex.valueOf(215.54296409, 215.54296409);
      complex2.sqrt1z();
      complex0.pow((-1823.355109198107));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.I.subtract(0.0);
      Complex complex6 = complex4.ONE.sin();
      Complex complex7 = complex4.multiply(2548.0);
      Complex complex8 = new Complex(243.76);
      Complex complex9 = complex0.pow(complex8);
      complex5.divide(complex0);
      Complex complex10 = complex5.acos();
      ComplexField complexField0 = complex1.getField();
      complex9.abs();
      complex7.getField();
      complex7.log();
      complex5.equals(complexField0);
      complex2.sqrt();
      Complex complex11 = complex10.multiply(Double.NaN);
      complex2.sqrt();
      Complex.valueOf((-477.700723123706), (-4797.797164396894));
      complex4.divide((-0.8704931726009606));
      complex0.getReal();
      complex1.sqrt();
      complex11.isNaN();
      complex6.cos();
      Complex complex12 = complex9.negate();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1509.95));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.INF.multiply((-5339));
      complex4.I.hashCode();
      complex3.I.nthRoot(1372);
      Complex complex5 = complex2.INF.cos();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.divide((double) 1372);
      complex7.hashCode();
      complex6.getReal();
      Complex complex8 = complex0.sqrt();
      complex6.abs();
      Complex complex9 = complex0.multiply(1.0);
      complex9.ZERO.createComplex(0.0, 1.0);
      Complex.valueOf((double) 1372, (-1.0));
      complex7.cos();
      Complex complex10 = complex8.tan();
      complex4.getImaginary();
      complex5.isNaN();
      complex10.getArgument();
      Complex complex11 = Complex.valueOf((double) (-5339), 0.0);
      complex11.multiply(466);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1195.70709361931), (-896.95));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.multiply(898);
      complex2.cosh();
      Complex complex3 = complex0.sinh();
      complex3.I.getField();
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex1.subtract((-1811.403221209976));
      complex6.ZERO.nthRoot(898);
      Complex complex7 = complex4.INF.sqrt();
      Complex complex8 = complex4.pow((-852.1638));
      Complex complex9 = complex1.pow((-1.0));
      complex1.ONE.tan();
      Complex complex10 = complex4.NaN.createComplex((-20.0), (-1193.054049813));
      complex10.ZERO.sin();
      Complex.valueOf((-1193.054049813), (-1568.9334981));
      complex9.abs();
      complex8.subtract((-1.0));
      Complex complex11 = complex4.pow((-125.958));
      complex11.ZERO.subtract(complex4);
      complex8.atan();
      complex10.divide(complex7);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(2480.217);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.asin();
      complex1.exp();
      try { 
        complex2.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      complex0.I.abs();
      complex0.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.divide(complex2);
      complex0.cosh();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1509.95));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.INF.multiply((-5339));
      complex4.I.hashCode();
      complex3.I.nthRoot(1372);
      Complex complex5 = complex2.INF.cos();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.divide((double) 1372);
      complex7.hashCode();
      complex6.getReal();
      complex0.sqrt();
      complex6.abs();
      Complex complex8 = complex0.multiply(1.0);
      complex8.ZERO.createComplex(0.0, 1.0);
      complex5.cos();
      complex5.tan();
      complex2.getImaginary();
      complex8.isNaN();
      complex3.getArgument();
      complex2.multiply(840);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sin();
      complex2.ZERO.hashCode();
      Complex complex3 = Complex.valueOf((-595.32), 3079.3);
      Complex complex4 = complex3.exp();
      complex3.NaN.sqrt1z();
      Complex complex5 = complex3.INF.cos();
      complex5.I.divide(complex2);
      complex3.equals(complex1);
      Complex complex6 = complex3.multiply((-595.32));
      complex6.ONE.log();
      complex1.equals((Object) null);
      complex1.abs();
      Complex.valueOf((-595.32));
      complex3.getImaginary();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex2.pow((-1724.98));
      complex7.ZERO.readResolve();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex10.subtract(complex7);
      complex7.I.readResolve();
      complex6.negate();
      complex6.hashCode();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double double0 = 40.30069255894;
      Complex complex0 = Complex.valueOf(40.30069255894, 40.30069255894);
      Complex complex1 = complex0.add((-879.24));
      complex1.NaN.tanh();
      complex0.subtract(complex1);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.ZERO.readResolve();
      complex0.getImaginary();
      complex0.NaN.nthRoot(1);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.multiply(complex1);
      complex4.cos();
      complex3.INF.subtract((-20.0));
      Complex.valueOf(0.0);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.INF.reciprocal();
      complex0.ONE.tan();
      complex5.ZERO.getArgument();
      Complex complex7 = complex5.tanh();
      complex7.I.add(0.0);
      complex4.I.abs();
      Complex complex8 = complex0.sqrt();
      complex4.subtract(complex3);
      complex2.sqrt();
      complex7.getField();
      Complex complex9 = complex8.pow(complex5);
      complex6.acos();
      complex4.tan();
      Complex complex10 = Complex.valueOf((-3586.053371), 0.0);
      complex9.divide(complex10);
      Complex complex11 = new Complex((-3644.556447453), (-5.148989321866988E-116));
      complex9.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-279.243004865), (-279.243004865));
      complex0.nthRoot(7);
      Complex complex1 = complex0.ONE.createComplex((-824.2), 1100.937184435);
      Complex complex2 = complex1.I.multiply((-824.2));
      Complex complex3 = new Complex((-279.243004865));
      Complex complex4 = complex2.I.pow(complex1);
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex5.INF.acos();
      complex6.NaN.getField();
      complex2.INF.abs();
      complex0.getField();
      complex0.I.log();
      complex0.equals((Object) null);
      Complex complex7 = complex1.sqrt();
      complex7.I.atan();
      Complex complex8 = complex0.multiply((-279.243004865));
      complex8.ZERO.sqrt();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex4.getReal();
      complex1.sqrt();
      complex5.isNaN();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(105.7219835, 105.7219835);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.INF.cosh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.I.multiply(0.0);
      Complex complex4 = complex3.negate();
      complex1.isInfinite();
      Complex complex5 = complex2.ONE.multiply(0.0);
      Complex complex6 = complex0.negate();
      complex6.I.readResolve();
      complex0.nthRoot(873);
      Complex complex7 = complex2.sqrt1z();
      complex7.ONE.pow(complex2);
      complex7.divide((-482.74638311));
      complex3.cos();
      complex6.getField();
      complex4.subtract((double) 873);
      Complex complex8 = complex5.multiply(complex1);
      complex6.getField();
      complex8.conjugate();
      complex6.asin();
      complex8.log();
      Complex.valueOf(0.16690382361412048, 0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.divide((-2238.64));
      complex0.atan();
      Complex complex3 = complex2.ONE.asin();
      complex3.I.hashCode();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.I.subtract(complex1);
      complex1.tan();
      Complex complex7 = complex6.INF.subtract(925.47401292);
      complex7.ZERO.multiply(complex3);
      Complex complex8 = complex0.divide(3036.44474);
      complex4.I.atan();
      complex1.nthRoot(1400);
      Complex complex9 = complex2.sin();
      complex9.ZERO.pow(complex3);
      complex1.reciprocal();
      Object object0 = complex0.readResolve();
      complex8.equals(object0);
      Complex complex10 = complex0.pow(complex6);
      Complex complex11 = complex10.log();
      complex3.sqrt1z();
      complex11.sqrt();
      complex9.multiply(1400);
      complex3.abs();
      complex4.subtract(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double double0 = (-1.0188117475357564E-260);
      Complex complex0 = Complex.valueOf((-1.0188117475357564E-260), (-1.0188117475357564E-260));
      complex0.readResolve();
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.abs();
      Complex complex1 = complex0.createComplex(2428.977, 4126.20715696);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex0.cos();
      Complex.valueOf(989.96409162952);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex2.NaN.pow(0.0);
      complex4.ONE.exp();
      complex4.INF.getArgument();
      Complex complex5 = complex0.multiply(899);
      Complex.valueOf(2428.977, (-2223.422));
      Complex complex6 = complex1.multiply(complex2);
      Complex complex7 = complex6.ONE.divide(1.4470673509275515E-259);
      Complex complex8 = complex1.divide(complex2);
      complex8.INF.add(complex5);
      Complex.valueOf(2124.6483725);
      complex7.pow(complex8);
      complex0.tanh();
      complex3.multiply(complex2);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ONE.subtract(complex0);
      complex2.I.tanh();
      Complex complex4 = complex0.I.multiply((-1207));
      complex1.INF.readResolve();
      Complex complex5 = complex0.ONE.atan();
      complex5.NaN.divide(0.0);
      complex3.INF.getField();
      Complex complex6 = complex0.conjugate();
      complex6.getArgument();
      complex6.ONE.getArgument();
      complex6.isInfinite();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex3.conjugate();
      complex6.ZERO.cos();
      Complex complex9 = complex4.cosh();
      Complex complex10 = Complex.valueOf((double) (-1207), -0.0);
      complex8.ONE.reciprocal();
      Complex complex11 = complex1.asin();
      complex11.NaN.sin();
      complex2.hashCode();
      complex10.NaN.sin();
      complex3.asin();
      complex10.multiply(complex7);
      Complex complex12 = complex3.sinh();
      complex4.multiply(complex12);
      complex3.toString();
      Complex complex13 = complex9.divide((double) (-1207));
      complex13.abs();
      complex0.pow((double) (-1207));
      Complex.valueOf((double) (-1207), -0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex0.ZERO.toString();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex1.I.add(complex0);
      Complex complex4 = complex2.NaN.pow(complex1);
      Complex complex5 = complex2.NaN.pow(complex1);
      complex4.NaN.nthRoot(1);
      complex2.equals(complex0);
      complex4.pow(complex1);
      complex3.getImaginary();
      complex0.multiply(complex1);
      Complex complex6 = Complex.valueOf(0.34922540187835693, (-2643.292));
      complex6.divide(complex1);
      complex5.toString();
      complex1.exp();
      Complex complex7 = Complex.valueOf(1080.406768);
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.3601844310760498);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.divide(3.091617462831603E221);
      Complex complex3 = complex2.subtract(complex1);
      complex2.NaN.tanh();
      Complex complex4 = complex0.sin();
      complex1.toString();
      complex3.abs();
      complex4.getReal();
      Complex complex5 = complex4.ONE.multiply(complex0);
      complex1.asin();
      Complex complex6 = complex4.log();
      complex4.getReal();
      complex6.sqrt();
      complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex1.INF.negate();
      Complex complex3 = complex2.ONE.sin();
      complex3.INF.toString();
      complex0.I.hashCode();
      Complex complex4 = complex2.negate();
      complex4.NaN.cos();
      Complex complex5 = complex3.NaN.add(complex2);
      Complex complex6 = complex5.NaN.acos();
      complex6.INF.pow(complex0);
      complex3.NaN.hashCode();
      complex5.NaN.pow(0.0);
      Complex complex7 = complex0.divide(0.0);
      Complex.valueOf(1.0, 1.0);
      Complex complex8 = complex5.subtract(0.0);
      complex5.getImaginary();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.cos();
      complex10.ZERO.readResolve();
      complex5.equals("");
      complex8.multiply(0);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      complex0.ONE.multiply((-1548.0257));
      Complex.valueOf((-4731.651669419));
      complex1.I.hashCode();
      complex0.getReal();
      complex0.readResolve();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      complex2.I.tanh();
      Complex complex3 = complex2.I.pow(complex0);
      complex2.sqrt1z();
      Complex complex4 = complex3.reciprocal();
      complex4.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1548.0257));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.NaN.createComplex((-214.7626063422), (-1377.31912512));
      complex3.I.reciprocal();
      Complex.valueOf((-1377.31912512), 0.0);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex2.subtract((-3034.77));
      complex5.tanh();
      complex5.NaN.reciprocal();
      complex5.I.subtract((-214.7626063422));
      complex5.isInfinite();
      complex4.getField();
      complex2.acos();
      complex1.pow(complex0);
      try { 
        complex4.nthRoot((-1434));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,434
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3453.2318, 3453.2318);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.NaN.divide((-568.3125877027727));
      complex3.ONE.hashCode();
      complex0.readResolve();
      Complex complex4 = complex0.add(complex1);
      complex1.hashCode();
      Complex complex5 = complex4.sinh();
      complex5.ONE.sinh();
      complex0.asin();
      Complex.valueOf((-568.3125877027727));
      complex1.exp();
      Complex.valueOf((-2.44242319E-315), 0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.NaN.exp();
      complex2.NaN.tanh();
      Complex complex3 = complex0.log();
      complex2.INF.subtract(complex0);
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = complex0.cos();
      complex5.nthRoot(1239);
      complex1.equals(complex4);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.acos();
      complex7.NaN.sqrt();
      complex6.ONE.abs();
      complex4.hashCode();
      complex2.createComplex(1239, 1239);
      complex3.asin();
      complex5.getField();
      complex0.nthRoot(7);
      Complex complex8 = complex6.pow(complex4);
      Complex complex9 = Complex.I;
      complex6.divide(complex9);
      Complex complex10 = complex6.conjugate();
      complex10.ZERO.abs();
      complex10.isInfinite();
      Complex complex11 = complex1.multiply(complex5);
      complex11.ZERO.nthRoot(7);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.exp();
      Complex.valueOf(0.0, 1.0);
      complex8.add(0.0);
      complex2.pow(538.33017327);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.ONE.reciprocal();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex3.I.multiply(0);
      complex0.I.createComplex(2111.5726796, 2111.5726796);
      complex4.ZERO.multiply(2111.5726796);
      Complex complex5 = complex0.createComplex(20.0, (-2359.8886081));
      complex0.INF.multiply(2111.5726796);
      Complex complex6 = complex5.INF.multiply(complex2);
      complex3.getField();
      complex3.isNaN();
      complex6.toString();
      complex6.nthRoot(3765);
      complex2.INF.sqrt1z();
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.cos();
      complex0.subtract(complex1);
      Complex complex2 = complex1.I.subtract(0.0);
      complex0.readResolve();
      Complex complex3 = complex0.acos();
      complex1.INF.toString();
      Complex complex4 = complex3.divide(complex0);
      complex4.ONE.cos();
      complex4.ZERO.sqrt();
      int int0 = 5197;
      // Undeclared exception!
      complex2.nthRoot(5197);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.ZERO.toString();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.INF.subtract(complex2);
      complex4.NaN.tanh();
      Complex complex5 = complex0.I.multiply(1574.52);
      Complex complex6 = complex5.INF.subtract(0.0);
      Complex complex7 = complex0.INF.cos();
      complex5.abs();
      complex0.toString();
      Complex complex8 = complex0.pow(complex5);
      complex5.divide(complex7);
      complex6.isInfinite();
      complex6.log();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.acos();
      complex4.I.subtract(0.0);
      complex4.ONE.sin();
      Complex complex5 = complex3.NaN.multiply((-5229));
      complex5.NaN.getField();
      complex0.equals(complex1);
      complex0.NaN.pow(complex3);
      complex0.divide(1.0);
      Complex complex6 = complex0.ONE.createComplex((-1013.4902105131094), (-1013.4902105131094));
      Complex complex7 = complex0.multiply(1457);
      complex7.ONE.pow((-1013.4902105131094));
      complex7.INF.getField();
      complex1.I.getArgument();
      Complex complex8 = complex6.I.atan();
      complex2.atan();
      complex2.hashCode();
      Complex complex9 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex10 = complex6.log();
      complex10.asin();
      complex6.sin();
      complex9.multiply(1457);
      complex7.multiply((double) 1457);
      complex9.reciprocal();
      complex8.multiply((-3257));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.multiply(5.1876107490791666E-250);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex2.NaN.add(complex0);
      complex4.ZERO.add(complex0);
      Complex complex5 = complex1.INF.subtract(0.0);
      complex1.NaN.hashCode();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.acos();
      complex0.INF.multiply(1884);
      complex7.I.createComplex(0.0, 1217.714542403869);
      complex7.ONE.subtract((-2403.8));
      Complex complex8 = complex7.ONE.log();
      complex8.INF.negate();
      Complex complex9 = complex0.exp();
      complex9.ONE.readResolve();
      complex8.readResolve();
      Complex.valueOf(5.1876107490791666E-250);
      Complex complex10 = complex2.tanh();
      complex10.ZERO.atan();
      complex3.isInfinite();
      complex3.isNaN();
      complex3.getReal();
      complex5.createComplex(1884, (-1104.555532326104));
      complex5.subtract(complex7);
      complex5.divide((-2910.1));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tan();
      Complex complex1 = complex0.INF.negate();
      complex1.INF.toString();
      complex0.negate();
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.conjugate();
      Complex complex1 = complex0.subtract((-7.368602086210704E159));
      complex1.hashCode();
      complex0.tan();
      complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.INF.atan();
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-4.814386594291911E-9), (-4.814386594291911E-9));
      Complex complex1 = complex0.subtract((-4.814386594291911E-9));
      Complex complex2 = Complex.valueOf((-1608.0), 0.0);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = Complex.ZERO;
      complex1.ZERO.hashCode();
      complex2.INF.multiply(complex4);
      complex0.getImaginary();
      complex3.getArgument();
      Complex complex5 = complex1.sinh();
      complex5.NaN.conjugate();
      complex3.tan();
      complex1.add(5150.04326);
      Complex.valueOf(0.0);
      complex0.INF.conjugate();
      complex2.getField();
      Complex complex6 = complex3.sin();
      complex6.NaN.toString();
      Complex complex7 = complex4.cosh();
      complex0.multiply((-2047));
      complex7.abs();
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2.933016992001806E-10));
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex0.I.acos();
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex6.exp();
      complex7.INF.subtract(complex5);
      Complex complex8 = complex7.sin();
      complex8.INF.sinh();
      complex6.INF.abs();
      Complex.valueOf(2270.0089963051087);
      complex2.getImaginary();
      Complex complex9 = complex2.cosh();
      complex9.INF.subtract(0.0);
      complex9.I.getArgument();
      complex2.sqrt();
      complex2.sin();
      complex4.pow((-564.60484165254));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(484);
      Complex complex3 = Complex.valueOf((double) 484, 0.0);
      Complex complex4 = complex2.I.cosh();
      complex4.ZERO.cos();
      Complex complex5 = complex4.ONE.atan();
      complex5.ONE.getField();
      complex5.NaN.subtract(complex3);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.ZERO.multiply((-1486));
      assertEquals(-0.0, complex4.getReal(), 0.01);
      
      Complex.valueOf(0.0, (-294.73379));
      Complex.valueOf(5863.09509511528);
      complex3.INF.pow((-294.73379));
      Complex complex5 = complex3.ONE.pow(958.06869720743);
      Complex complex6 = complex5.I.divide(complex1);
      assertTrue(complex6.equals((Object)complex5));
      
      complex0.INF.hashCode();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex0.ZERO.sqrt1z();
      complex8.I.multiply((-294.73379));
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.INF.asin();
      complex10.ONE.add((-294.73379));
      complex1.ZERO.sin();
      complex1.I.multiply((-1821.94069029826));
      List<Complex> list0 = complex7.nthRoot(4489);
      assertTrue(complex7.equals((Object)complex8));
      assertFalse(list0.contains(complex4));
      
      complex2.equals(complex1);
      Complex complex11 = complex2.negate();
      assertFalse(complex11.equals((Object)complex4));
      
      Complex complex12 = complex1.add((double) 4489);
      assertFalse(complex12.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(215.54296409, 215.54296409);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.subtract(215.54296409);
      assertEquals((-215.54296409), complex2.getReal(), 0.01);
      
      Complex complex3 = Complex.valueOf(0.0, 368.3711038892);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.I.reciprocal();
      assertEquals((-1.0), complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = Complex.valueOf(215.54296409, 215.54296409);
      Complex complex7 = complex5.sqrt1z();
      complex7.createComplex(0.0, 0.0);
      assertEquals((-215.54180423155407), complex7.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.NaN.multiply(2.1742808735341656E284);
      complex1.ZERO.getField();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.ONE.multiply(3045);
      complex3.INF.getArgument();
      assertEquals(3045.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.NaN.reciprocal();
      String string0 = complex0.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex2.isNaN();
      List<Complex> list0 = complex0.nthRoot(283);
      boolean boolean0 = complex1.equals(list0);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
      assertFalse(boolean0);
      
      complex1.getImaginary();
      assertSame(complex1, complex4);
      
      Complex complex5 = complex2.multiply(283);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf(0.0);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
  }
}
