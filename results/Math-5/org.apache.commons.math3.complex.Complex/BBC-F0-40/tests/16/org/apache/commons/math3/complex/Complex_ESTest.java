/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:06:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(4.0430160253378594E-275, 7.510409474919736E-44);
      complex0.nthRoot(1251);
      Complex complex1 = Complex.valueOf(0.25201692062432024, 4.0430160253378594E-275);
      Complex complex2 = complex0.pow((-0.5707963267948966));
      Complex complex3 = complex2.multiply(complex1);
      complex3.acos();
      complex3.add((-1104.0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.33115679025650024, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(0.33115679025650024);
      complex1.ZERO.toString();
      complex1.divide(complex0);
      complex0.negate();
      Complex complex2 = Complex.valueOf((-2131.583));
      Complex complex3 = Complex.valueOf(20.444893365757196);
      Complex complex4 = complex2.ZERO.multiply((-1663));
      complex4.I.sin();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.subtract(0.5751199722290039);
      complex6.NaN.readResolve();
      Complex complex7 = complex6.I.pow(1283.64390971919);
      complex6.NaN.subtract((double) (-1663));
      Complex complex8 = complex2.multiply(3.058997113995161E-8);
      complex8.I.asin();
      complex8.NaN.readResolve();
      complex6.multiply((-1912));
      Complex complex9 = complex5.cos();
      complex9.divide(complex2);
      Complex complex10 = complex7.tanh();
      complex0.conjugate();
      complex2.subtract(complex3);
      Complex complex11 = complex1.multiply((-34.931));
      complex7.conjugate();
      complex0.sqrt1z();
      complex10.createComplex(20.444893365757196, 20.444893365757196);
      complex9.sqrt();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(4.0430160253378594E-275);
      Complex complex1 = new Complex((-245.0), 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf(8.086032050675326E-275, 8.086032050675326E-275);
      complex3.NaN.subtract(complex0);
      complex2.divide(complex2);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.4974554181098938, 0.4974554181098938);
      Complex complex2 = complex0.subtract(complex1);
      complex2.asin();
      complex1.nthRoot(1053);
      complex1.toString();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.log();
      complex3.atan();
      complex7.negate();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex3.add(7531482.010372654);
      Complex complex10 = complex0.divide((double) 1053);
      Complex complex11 = complex2.add((-3.130508064738312E-14));
      complex8.readResolve();
      complex0.pow(860.41857719332);
      complex11.tan();
      complex2.multiply((-1537));
      complex2.cosh();
      complex9.abs();
      complex5.subtract(3.9205810725333715E-8);
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(2727.2210077);
      complex0.nthRoot(1238);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.multiply(1.792783182582235E246);
      complex2.I.cos();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.conjugate();
      complex4.NaN.pow(complex0);
      complex1.ONE.abs();
      Complex complex5 = complex0.negate();
      complex5.NaN.subtract(complex3);
      Complex complex6 = complex1.multiply((double) 1238);
      complex6.ZERO.sqrt1z();
      complex1.ZERO.readResolve();
      complex1.divide(20.0);
      Complex complex7 = Complex.valueOf(2727.2210077, (-20.0));
      Complex complex8 = complex1.divide(complex7);
      complex8.reciprocal();
      complex8.readResolve();
      complex7.tan();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(4.0430160253378594E-275, (-5184024.0948078595));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sin();
      complex2.sin();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(60.63930868429775, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex2.NaN.atan();
      Complex complex3 = complex1.sqrt1z();
      complex3.I.sin();
      complex3.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1966958823050562);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.349933171871406));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.multiply((-1.0));
      complex3.sin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.0672499803427623E292);
      complex1.sqrt1z();
      complex0.tan();
      complex1.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4674011002723395));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.349933171871406));
      Complex complex1 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.createComplex((-29.349933171871406), Double.POSITIVE_INFINITY);
      complex0.nthRoot(785);
      Complex complex2 = new Complex(785, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      complex3.log();
      complex1.divide((-29.349933171871406));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-1807.1508309135218));
      Complex.valueOf((-1807.1508309135218));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-35.245331891627785));
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex.valueOf(4.49284496880864E-4, (-5731.0));
      complex1.cosh();
      Complex complex3 = complex0.divide((-20.0));
      complex2.getField();
      complex3.reciprocal();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.349933171871406));
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-5731.0), (-20.0));
      complex1.cosh();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.getField();
      complex3.reciprocal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1807.1508309135218), Double.POSITIVE_INFINITY);
      complex0.nthRoot(733);
      Complex complex1 = Complex.valueOf(243.00684243319105, (double) 733);
      complex1.tanh();
      Complex complex2 = Complex.valueOf((-2344.352497950004));
      complex2.getField();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1.1466910691560932E-169);
      Complex complex2 = Complex.valueOf((-29.349933171871406), 1.1466910691560932E-169);
      complex2.conjugate();
      Complex.valueOf((-160.7567));
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf((-20.0));
      complex4.conjugate();
      Complex complex5 = Complex.valueOf((-20.0), 2.169306470354036E242);
      complex5.asin();
      complex3.getField();
      Complex complex6 = Complex.valueOf(1809.26, 1.1466910691560932E-169);
      complex6.INF.reciprocal();
      complex4.tanh();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.349933171871406), (-29.349933171871406));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.tan();
      complex3.asin();
      complex2.getField();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
      complex0.getField();
      Complex complex1 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1807.1508309135218));
      Complex complex1 = Complex.valueOf((-1807.1508309135218));
      Complex complex2 = Complex.INF;
      complex0.divide(complex2);
      Complex complex3 = complex2.divide(20.0);
      complex1.divide(Double.NaN);
      complex2.getField();
      complex3.getField();
      Complex complex4 = new Complex(Double.NaN);
      Complex complex5 = complex4.reciprocal();
      complex5.exp();
      complex4.isNaN();
      complex1.divide((-5.989337506920005E-290));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.asin();
      complex3.INF.pow(complex2);
      complex2.toString();
      complex3.isNaN();
      complex1.sqrt1z();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.349933171871406));
      Complex complex1 = complex0.pow(1502.5734730534325);
      complex1.toString();
      Complex complex2 = complex0.divide(complex1);
      complex2.getField();
      Complex complex3 = complex2.divide((-29.349933171871406));
      Complex complex4 = Complex.valueOf(1807.1508309135218, 1502.5734730534325);
      complex3.subtract(complex4);
      complex3.sqrt();
      complex0.multiply((-29.349933171871406));
      Complex complex5 = new Complex((-3265793.125671432));
      complex5.divide((-3372.80100128047));
      Complex complex6 = complex1.tan();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.0152776305352E8);
      complex0.nthRoot(554);
      complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      complex1.toString();
      complex1.isNaN();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.tanh();
      complex1.add(complex3);
      Complex complex4 = complex2.sqrt1z();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2449.7914826, 2449.7914826);
      complex0.INF.createComplex(2449.7914826, Double.POSITIVE_INFINITY);
      complex0.log();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-1103.8));
      complex1.tan();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.NaN;
      complex3.readResolve();
      complex2.sinh();
      complex2.multiply((-456));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.954268131979656));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(0.0);
      complex1.INF.toString();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.NaN.atan();
      complex3.I.subtract(complex0);
      complex4.multiply(2);
      Complex complex5 = Complex.valueOf(18.159912);
      Complex complex6 = complex5.multiply((-29.954268131979656));
      Complex complex7 = complex6.add(0.0);
      complex2.sqrt();
      Complex complex8 = Complex.ZERO;
      complex8.conjugate();
      complex4.cosh();
      complex7.exp();
      complex4.tan();
      complex0.reciprocal();
      complex5.divide(complex6);
      Complex complex9 = Complex.valueOf((-29.954268131979656));
      // Undeclared exception!
      complex9.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1249.2), (-4100.0082));
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = complex1.add((double) 7);
      Complex complex3 = complex1.NaN.multiply((double) 7);
      Complex complex4 = complex0.add(complex1);
      complex4.ZERO.abs();
      complex4.NaN.abs();
      complex4.nthRoot(7);
      Complex complex5 = complex4.multiply(7);
      Complex complex6 = complex4.I.multiply((-1249.2));
      Complex complex7 = complex6.NaN.add(Double.NaN);
      Complex complex8 = complex7.ZERO.sqrt();
      complex7.conjugate();
      Complex complex9 = complex7.NaN.cosh();
      complex9.I.exp();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex0.reciprocal();
      complex4.divide(complex3);
      complex1.nthRoot(7);
      complex11.nthRoot(7);
      complex10.readResolve();
      complex4.cos();
      complex1.subtract(complex10);
      complex5.abs();
      complex2.pow((-1249.2));
      complex11.createComplex(2.131521224975586, (-4100.0082));
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.020907406701404E-119), (-9.020907406701404E-119));
      Complex complex1 = Complex.valueOf(4207.575405);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(1414.3395791063554);
      complex2.NaN.hashCode();
      complex1.add(4207.575405);
      Complex complex4 = complex1.sqrt1z();
      complex1.negate();
      complex4.readResolve();
      Complex.valueOf(Double.NaN, 2.934570385464815E247);
      Complex complex5 = complex4.createComplex(Double.NaN, 4207.575405);
      complex3.cosh();
      complex5.sinh();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      complex0.toString();
      Complex complex2 = complex1.divide(complex0);
      complex1.getField();
      complex2.divide(50.140325);
      Complex complex3 = Complex.valueOf(1597.744779248137, (-1.0));
      complex1.subtract(complex3);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex2.multiply(1597.744779248137);
      Complex complex6 = complex5.I.exp();
      complex5.ONE.toString();
      complex4.readResolve();
      Complex complex7 = new Complex(3429.39);
      complex7.tanh();
      complex7.sinh();
      Complex complex8 = complex7.atan();
      complex8.cosh();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.39965489828754597, Double.NaN);
      complex0.tan();
      Complex complex1 = complex0.subtract(1667.060578988);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      complex1.readResolve();
      complex3.tanh();
      Complex complex4 = complex0.sinh();
      complex4.NaN.getArgument();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.954268131979656));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.asin();
      complex3.subtract(0.0);
      Complex complex4 = complex1.multiply((-4018));
      complex2.pow(complex4);
      Complex complex5 = Complex.ZERO;
      try { 
        complex5.nthRoot((-4018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,018
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(0.016696765508861233);
      Complex complex2 = new Complex(0.016696765508861233, 0.016696765508861233);
      Complex complex3 = complex2.INF.sqrt();
      complex3.I.getArgument();
      complex1.INF.subtract(complex2);
      Complex complex4 = complex1.sqrt();
      complex0.getArgument();
      Complex complex5 = complex0.createComplex((-1590.19513), (-1590.19513));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.sqrt();
      complex7.ZERO.multiply(0.016696765508861233);
      Complex complex8 = complex4.INF.createComplex(0.016696765508861233, 650.676413722);
      Complex complex9 = complex7.divide(complex6);
      complex9.I.multiply(0.0);
      complex4.abs();
      complex2.NaN.log();
      complex6.multiply((-1048));
      Complex complex10 = complex4.tanh();
      complex4.nthRoot(40);
      complex8.acos();
      complex3.multiply(complex1);
      complex10.cosh();
      complex2.pow(0.016696765508861233);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.28318530718);
      Complex complex1 = Complex.valueOf((-540.1417376));
      Complex complex2 = new Complex((-301.4127554422113));
      Complex complex3 = complex1.pow(complex2);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex0.reciprocal();
      complex1.cosh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.subtract(2.0545267307170434E-4);
      Complex complex5 = complex3.multiply((-1776));
      complex4.pow(complex2);
      try { 
        complex5.nthRoot((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,741,824
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.954268131979656));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.divide(0.0);
      complex1.subtract(complex2);
      complex2.sqrt();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = Complex.INF;
      complex5.divide((-29.954268131979656));
      complex4.tan();
      complex3.reciprocal();
      Complex complex6 = Complex.ZERO;
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 2449.7914826;
      Complex complex0 = Complex.valueOf(2449.7914826, 2449.7914826);
      Complex complex1 = complex0.INF.createComplex(2449.7914826, Double.POSITIVE_INFINITY);
      double double1 = 2698.0113;
      Complex complex2 = complex1.subtract(2698.0113);
      complex2.multiply((-1776));
      complex1.pow(complex0);
      try { 
        complex2.nthRoot((-1776));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,776
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2449.7914826, 2449.7914826);
      Complex complex1 = complex0.INF.createComplex(2449.7914826, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      complex1.ZERO.nthRoot(733);
      Complex complex3 = complex0.tanh();
      complex1.getField();
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      Complex complex2 = Complex.valueOf(1.4419920764774415E-8, 1.4419920764774415E-8);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.reciprocal();
      complex4.toString();
      complex1.sqrt1z();
      complex3.tan();
      complex1.subtract(399.0);
      complex3.readResolve();
      complex2.tanh();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.954268131979656));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(0.0);
      complex1.INF.toString();
      Complex complex3 = Complex.ONE;
      complex0.NaN.atan();
      complex3.I.subtract(complex0);
      complex1.ONE.sqrt1z();
      complex0.add(complex1);
      complex0.isInfinite();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex2.toString();
      complex2.sqrt1z();
      Complex complex5 = new Complex((-2307.322169536585), (-2307.322169536585));
      complex5.tan();
      complex4.subtract(2848.5374381275);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.NaN;
      complex7.readResolve();
      Complex complex8 = complex0.tanh();
      complex8.sinh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      Complex complex2 = new Complex(1.4419920764774415E-8, 553.283710021);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.conjugate();
      Object object0 = new Object();
      complex5.equals(complex4);
      Complex complex6 = Complex.ZERO;
      complex2.equals(complex1);
      complex5.getField();
      complex0.cos();
      complex1.getField();
      Complex complex7 = Complex.ZERO;
      complex7.ZERO.sin();
      Complex complex8 = complex7.add((-2447.547478));
      complex8.abs();
      complex3.isNaN();
      complex0.multiply(1.0);
      complex2.nthRoot(742);
      Complex complex9 = Complex.valueOf(553.283710021);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      complex0.toString();
      Complex complex2 = complex1.divide(complex0);
      complex1.getField();
      Complex complex3 = complex2.divide(50.140325);
      Complex complex4 = Complex.valueOf(1597.744779248137, (-1.0));
      complex3.sqrt1z();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.tan();
      complex4.subtract((-1.0));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex(Double.NaN, 1597.744779248137);
      complex8.readResolve();
      complex6.tanh();
      complex4.sinh();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(388.678744841, 388.678744841);
      complex0.ZERO.cosh();
      Complex complex1 = complex0.add(388.678744841);
      Complex complex2 = complex0.ONE.divide((-1175.1971003723995));
      Complex complex3 = complex0.divide(388.678744841);
      complex1.getField();
      complex2.getField();
      complex3.ZERO.reciprocal();
      Complex complex4 = complex1.exp();
      complex4.toString();
      complex4.isNaN();
      Complex complex5 = complex1.acos();
      complex1.INF.atan();
      complex1.tanh();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.createComplex(0.7589553962684666, 0.7589553962684666);
      Complex complex3 = complex1.INF.conjugate();
      complex3.subtract(complex0);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.add(complex3);
      complex2.isInfinite();
      complex5.tan();
      complex4.subtract(complex2);
      Complex complex6 = complex1.asin();
      complex1.getField();
      complex2.multiply(complex3);
      complex6.toString();
      complex3.getField();
      complex0.asin();
      complex3.tanh();
      complex6.log();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.log();
      Complex complex1 = complex0.ONE.multiply(602);
      Complex complex2 = Complex.ZERO;
      complex1.readResolve();
      Complex complex3 = complex0.tanh();
      complex1.sinh();
      complex3.atan();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.multiply(1.170714288147407E-7);
      Complex complex2 = complex1.add(2.0);
      complex0.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(8.043167380144754E7);
      Complex complex5 = Complex.NaN;
      complex4.INF.multiply(complex5);
      complex0.getField();
      complex2.multiply((-1.0));
      Complex complex6 = Complex.valueOf(8.043167380144754E7, 3301.1188);
      complex1.equals(complex6);
      complex1.cos();
      Complex complex7 = Complex.INF;
      complex7.conjugate();
      complex3.hashCode();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.INF;
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      complex0.subtract((double) 2146598817);
      complex0.ONE.hashCode();
      complex1.I.getArgument();
      complex0.nthRoot(2146598817);
      Complex complex2 = complex0.atan();
      Complex.valueOf(1.5707963267948966);
      complex2.getField();
      complex0.I.divide(complex1);
      Complex complex3 = complex1.add(83.473);
      Complex.valueOf((double) 2146598817, (double) 2146598817);
      Complex complex4 = complex3.INF.sin();
      complex4.NaN.log();
      complex4.ONE.cos();
      complex1.INF.readResolve();
      Complex complex5 = Complex.valueOf((double) 2146598817, 5.551115123125783E-17);
      complex5.ZERO.exp();
      Complex complex6 = complex3.multiply(complex1);
      complex6.ONE.sin();
      Complex complex7 = complex5.asin();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply(3.3888561478632076E-8);
      complex0.add(883.196);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf(3.3888561478632076E-8);
      complex5.getField();
      Complex complex6 = complex2.multiply(0.0);
      complex2.equals(complex1);
      complex3.cos();
      Complex complex7 = complex6.conjugate();
      complex7.hashCode();
      Complex complex8 = Complex.I;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2934.0));
      Complex complex1 = complex0.pow(1.1353638172149658);
      Complex complex2 = Complex.valueOf(680.7, 20.0);
      complex2.conjugate();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.tan();
      complex2.toString();
      Complex complex5 = complex3.sqrt1z();
      complex5.tan();
      Complex complex6 = complex0.subtract(0.6905817003766437);
      Complex complex7 = Complex.ZERO;
      complex6.readResolve();
      complex5.tanh();
      complex4.sinh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1807.1508309135218));
      complex0.sqrt1z();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.subtract((-1807.1508309135218));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex0.divide(complex3);
      complex2.conjugate();
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex6);
      complex2.getField();
      Complex complex7 = complex4.cos();
      complex4.pow(1.2433054447174072);
      Complex complex8 = complex0.sqrt1z();
      complex4.reciprocal();
      complex7.acos();
      Complex complex9 = complex0.log();
      complex8.pow(1.2433054447174072);
      Complex complex10 = Complex.valueOf((-1807.1508309135218), (-1807.1508309135218));
      complex10.hashCode();
      complex3.getReal();
      Complex complex11 = complex4.reciprocal();
      Complex complex12 = Complex.I;
      complex12.isNaN();
      complex9.divide(complex8);
      complex10.exp();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      Complex complex2 = Complex.valueOf(1.4419920764774415E-8, (-9.101459302245766));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.reciprocal();
      complex4.toString();
      complex1.sqrt1z();
      Complex complex5 = complex3.tan();
      complex1.subtract(399.0);
      complex3.readResolve();
      complex2.tanh();
      complex0.sinh();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4155784425820124);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.pow(1.4155784425820124);
      complex4.NaN.pow(1.4155784425820124);
      Complex complex5 = complex2.ZERO.tan();
      Complex complex6 = complex0.NaN.divide(1.4155784425820124);
      complex3.ZERO.cosh();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex6.ONE.multiply(complex1);
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.ONE.multiply(1213);
      complex10.asin();
      Complex complex11 = complex0.pow(1.4155784425820124);
      complex11.NaN.abs();
      complex5.createComplex(1420.9850690541, Double.NaN);
      Complex complex12 = complex11.atan();
      complex12.NaN.toString();
      complex7.NaN.atan();
      complex1.getReal();
      Complex complex13 = complex2.INF.negate();
      complex12.cos();
      complex11.cos();
      complex2.pow(complex11);
      Complex complex14 = complex5.exp();
      complex13.createComplex(0.0, 0.0);
      complex3.getImaginary();
      complex14.isNaN();
      complex12.multiply((double) 1213);
      complex12.sqrt();
      complex8.createComplex(1420.9850690541, Double.NaN);
      complex5.equals(complex7);
      complex12.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1807.1508309135218));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.NaN.subtract((-1807.1508309135218));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.divide(complex4);
      complex3.conjugate();
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex6);
      complex3.getField();
      complex0.cos();
      Complex complex7 = complex1.pow(1.2433054447174072);
      Complex complex8 = complex7.ZERO.conjugate();
      complex5.getField();
      Complex complex9 = complex4.add(1.2433054447174072);
      complex9.abs();
      complex7.isNaN();
      complex8.multiply((-1807.1508309135218));
      complex4.nthRoot(2210);
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.cosh();
      complex4.asin();
      complex3.ONE.subtract(2698.0113);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.NaN.pow(complex2);
      complex1.nthRoot(608);
      complex3.getArgument();
      complex1.sqrt1z();
      complex1.toString();
      complex6.isNaN();
      Complex complex7 = complex0.acos();
      complex7.tanh();
      complex6.add(complex3);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      Complex complex2 = Complex.valueOf(1.4419920764774415E-8, (-30.15051863182607));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.add(complex4);
      complex1.tan();
      Complex complex6 = complex2.subtract(complex4);
      complex1.abs();
      Complex complex7 = complex1.asin();
      complex4.getField();
      Complex complex8 = complex6.multiply(complex2);
      complex2.add(1903.62);
      Complex complex9 = complex8.reciprocal();
      complex4.pow(complex0);
      complex4.sqrt1z();
      Complex complex10 = complex8.reciprocal();
      complex3.acos();
      Complex complex11 = complex5.log();
      complex4.pow((-30.15051863182607));
      complex8.hashCode();
      complex8.getReal();
      Complex complex12 = complex11.reciprocal();
      complex12.isNaN();
      complex9.divide(complex7);
      complex7.exp();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex4.NaN.pow(0.0);
      complex2.ZERO.tan();
      Complex complex6 = complex0.NaN.divide(0.0);
      complex3.ZERO.cosh();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex6.ONE.multiply(complex1);
      Complex complex9 = complex2.acos();
      complex9.ONE.multiply(1213);
      complex5.negate();
      Complex complex10 = new Complex(1049.7934);
      complex10.reciprocal();
      complex2.getField();
      complex7.multiply(1049.7934);
      complex8.equals((Object) null);
      complex8.cos();
      complex0.conjugate();
      complex7.hashCode();
      Complex complex11 = Complex.I;
      Object object0 = new Object();
      complex7.equals(object0);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2307.322169536585));
      complex1.pow((-1.3267499551305892E7));
      Complex complex2 = Complex.valueOf(2335.052, 0.7615941559557649);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.tan();
      complex4.toString();
      complex2.sqrt1z();
      complex3.tan();
      Complex complex6 = complex2.subtract(2.0);
      Complex complex7 = Complex.ZERO;
      complex6.readResolve();
      complex5.tanh();
      Complex complex8 = complex7.sinh();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex1.conjugate();
      Object object0 = new Object();
      Object object1 = new Object();
      complex5.equals(object1);
      Complex complex7 = Complex.ZERO;
      complex3.equals(object0);
      complex6.getField();
      Complex complex8 = complex4.cos();
      complex8.pow(1818.2802145);
      Complex complex9 = complex5.conjugate();
      complex5.getField();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.add(1.2433054447174072);
      complex9.abs();
      complex6.isNaN();
      complex1.multiply(555.39);
      Object object2 = new Object();
      complex9.equals(object2);
      complex1.nthRoot(249);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1807.1508309135218));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.sin();
      complex2.NaN.subtract((-1807.1508309135218));
      Complex complex3 = Complex.valueOf((-1807.1508309135218), (-1807.1508309135218));
      complex2.conjugate();
      Complex complex4 = Complex.ONE;
      complex4.reciprocal();
      complex3.tan();
      complex0.toString();
      complex0.sqrt1z();
      Complex complex5 = complex1.tan();
      complex0.subtract((-885.2697851));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ONE;
      complex7.readResolve();
      complex4.tanh();
      complex5.sinh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.pow(0.0);
      complex4.NaN.pow(0.0);
      complex2.ZERO.tan();
      Complex complex5 = complex0.NaN.divide(0.0);
      complex3.ZERO.cosh();
      Complex complex6 = complex0.multiply(Double.NaN);
      complex5.add(1151.0509454827456);
      Complex complex7 = complex1.negate();
      complex3.reciprocal();
      complex7.getField();
      Complex complex8 = complex7.multiply(1151.0509454827456);
      complex8.equals(complex5);
      complex8.cos();
      complex6.conjugate();
      complex7.hashCode();
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.ONE;
      complex10.equals((Object) null);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(388.678744841, 388.678744841);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.add((-3160.2861549));
      Complex complex3 = complex0.ONE.divide((-1175.22));
      Complex complex4 = new Complex((-3642.458037));
      complex4.subtract(complex2);
      complex4.abs();
      complex3.asin();
      complex1.getField();
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = Complex.I;
      Complex complex7 = complex1.reciprocal();
      complex4.pow(complex3);
      complex4.sqrt1z();
      Complex complex8 = complex1.reciprocal();
      complex3.acos();
      Complex complex9 = complex7.log();
      complex9.pow(3257.09);
      complex4.hashCode();
      complex5.getReal();
      complex8.reciprocal();
      complex6.isNaN();
      Complex complex10 = Complex.I;
      complex2.divide(complex10);
      complex10.exp();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.log();
      complex1.NaN.pow(0.0);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex0.NaN.divide(0.0);
      complex3.ZERO.cosh();
      Complex complex6 = complex5.I.negate();
      complex5.ONE.multiply(complex1);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.ONE.multiply(1213);
      complex8.asin();
      Complex complex9 = complex0.pow(0.0);
      Complex complex10 = complex9.atan();
      complex3.toString();
      complex6.NaN.atan();
      complex1.getReal();
      Complex complex11 = complex2.INF.negate();
      complex10.cos();
      Complex complex12 = complex9.cos();
      complex2.pow(complex9);
      Complex complex13 = complex4.exp();
      Complex complex14 = complex11.createComplex(0.0, 0.0);
      complex3.getImaginary();
      complex13.isNaN();
      complex12.createComplex(0.0, 0.0);
      Complex.valueOf(Double.NaN);
      complex14.isInfinite();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(310.506454107);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.reciprocal();
      complex1.tanh();
      complex2.conjugate();
      Complex complex3 = complex1.reciprocal();
      complex1.add(1.4419920764774415E-8);
      complex3.hashCode();
      complex3.nthRoot(176);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1.7227904796600342);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-2163.3813661), 3697.122901811);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.tan();
      complex3.toString();
      Complex complex6 = complex1.createComplex(1232.79584429, 1048.8050363115433);
      complex3.isNaN();
      complex6.sqrt1z();
      complex1.tan();
      complex4.subtract(6.283185307179586);
      Complex complex7 = Complex.ZERO;
      complex1.readResolve();
      complex2.divide(complex4);
      Complex complex8 = complex5.tanh();
      complex6.sinh();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(388.678744841, 388.678744841);
      complex0.ZERO.cosh();
      Complex complex1 = complex0.add(388.678744841);
      complex0.ONE.divide((-1175.22));
      Complex complex2 = complex0.divide(388.678744841);
      complex1.getField();
      complex0.ONE.getField();
      complex2.ZERO.reciprocal();
      complex1.exp();
      complex0.isNaN();
      complex1.divide((-518.706139474));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      Complex complex2 = Complex.valueOf(1.4419920764774415E-8, 0.7615941559557649);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.reciprocal();
      complex0.tan();
      complex4.toString();
      Complex complex5 = complex3.createComplex(1.4419920764774415E-8, (-885.2697851));
      complex2.isNaN();
      complex1.sqrt1z();
      complex3.tan();
      complex1.subtract(399.0);
      Complex complex6 = Complex.ZERO;
      complex3.readResolve();
      complex2.tanh();
      complex5.sinh();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.cosh();
      complex4.asin();
      complex3.ONE.subtract(2698.0113);
      complex2.multiply((-1776));
      Complex complex5 = complex3.NaN.pow(complex2);
      complex1.nthRoot(608);
      complex3.getArgument();
      complex1.sqrt1z();
      complex1.toString();
      complex5.isNaN();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.tanh();
      complex5.add(complex3);
      complex6.sqrt1z();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-1348.1274);
      Complex complex1 = complex0.pow((-1348.1274));
      Complex complex2 = complex0.createComplex(9.423976538577447E138, (-501.008082));
      complex2.reciprocal();
      Complex complex3 = complex1.conjugate();
      int int0 = (-601);
      Complex complex4 = complex3.I.multiply(complex0);
      try { 
        complex4.ONE.nthRoot((-601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -601
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.toString();
      Complex complex3 = complex2.ZERO.add(0.0);
      complex1.I.toString();
      Complex complex4 = Complex.valueOf((-1.0), (-1.0));
      Complex complex5 = complex0.I.createComplex((-1.0), 0.0);
      complex3.divide(complex4);
      complex4.NaN.acos();
      complex4.cos();
      Complex complex6 = complex1.INF.tanh();
      complex6.INF.pow(0.0);
      Complex complex7 = complex4.ONE.multiply(complex5);
      complex7.ZERO.sqrt1z();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex8 = complex4.exp();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex3.ONE.pow(complex9);
      complex10.NaN.getArgument();
      complex8.ONE.asin();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex2.divide(complex11);
      complex11.asin();
      complex12.createComplex(759.5, 0.0);
      Complex.valueOf(0.0);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-3069.2), (-3069.2));
      Complex complex1 = complex0.divide((-3069.2));
      complex1.ONE.multiply(complex0);
      Complex.valueOf((-3069.2), (-3069.2));
      complex1.INF.divide(38.57199529774);
      complex1.exp();
      complex0.getImaginary();
      complex0.cosh();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      complex0.NaN.pow(0.0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex2.INF.pow(2223.20464);
      complex2.NaN.subtract(0.0);
      Complex complex5 = complex1.ZERO.reciprocal();
      Complex complex6 = complex0.divide(1377.298);
      Complex complex7 = complex6.NaN.conjugate();
      complex6.tanh();
      Complex complex8 = complex1.pow(1377.298);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex2.I.acos();
      complex10.INF.tan();
      complex9.ONE.conjugate();
      complex0.ONE.sqrt1z();
      Complex complex11 = complex5.pow((-2221.859259946));
      Complex complex12 = complex0.I.cos();
      Complex complex13 = complex11.ZERO.add(complex0);
      Complex complex14 = complex13.acos();
      Complex complex15 = complex14.INF.negate();
      complex15.nthRoot(548);
      Complex complex16 = complex4.reciprocal();
      complex16.NaN.createComplex(1313.5764, 2223.20464);
      complex12.getReal();
      complex16.subtract(0.6207654476165771);
      complex8.subtract(complex7);
      complex3.multiply((-2221.859259946));
      complex2.multiply(743.6);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      complex0.ZERO.hashCode();
      complex0.conjugate();
      Complex complex1 = Complex.valueOf(101.21369324444, 101.21369324444);
      complex0.pow(complex1);
      Complex complex2 = Complex.valueOf(101.21369324444, 101.21369324444);
      complex0.tan();
      complex1.sin();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex0.ONE.createComplex(717, 717);
      complex0.I.nthRoot(717);
      Complex complex2 = complex0.NaN.add((double) 717);
      Complex complex3 = Complex.valueOf(400.0);
      complex3.I.abs();
      Complex complex4 = complex1.NaN.multiply((-451.26938));
      Complex complex5 = complex0.divide((-2578.85435466641));
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.I.negate();
      complex8.INF.subtract(complex4);
      Complex complex9 = complex7.ZERO.divide(complex6);
      complex5.readResolve();
      complex9.log();
      Complex.valueOf((-496.5757), (-1273.667448792));
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.add(complex0);
      complex2.I.divide((-1865.65468401916));
      complex0.nthRoot(1809);
      Complex complex3 = complex0.ZERO.sinh();
      complex3.ZERO.log();
      Complex complex4 = complex0.ONE.negate();
      complex4.I.hashCode();
      Complex complex5 = complex0.NaN.pow(904.230077);
      complex5.INF.getArgument();
      complex0.ZERO.divide(932.0154);
      Complex complex6 = complex0.pow(932.0154);
      complex6.ZERO.readResolve();
      Complex complex7 = complex5.NaN.add(complex0);
      Complex complex8 = complex6.I.tan();
      complex8.NaN.createComplex(932.0154, 0.7853981633974483);
      complex6.ONE.getArgument();
      Complex complex9 = complex0.multiply(1815.26089);
      complex1.abs();
      Complex.valueOf(1815.26089, 1.0);
      complex0.getImaginary();
      complex6.add(complex9);
      complex0.pow((-4239.48859135164));
      complex6.divide(complex0);
      complex0.getReal();
      complex3.conjugate();
      complex1.isNaN();
      complex7.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(2887.242960807092);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      complex1.I.readResolve();
      Complex complex4 = complex3.I.subtract(complex2);
      complex4.ONE.reciprocal();
      complex4.NaN.createComplex(2887.242960807092, 2887.242960807092);
      complex4.ZERO.cosh();
      complex2.subtract(complex3);
      Complex complex5 = complex2.ZERO.subtract(2887.242960807092);
      Complex complex6 = complex5.ZERO.exp();
      complex6.NaN.createComplex(2887.242960807092, Double.NaN);
      complex6.NaN.exp();
      Complex complex7 = complex3.reciprocal();
      complex7.INF.getArgument();
      Complex.valueOf(0.7853981633974483, Double.NaN);
      Complex complex8 = complex7.NaN.divide(2887.242960807092);
      complex8.ONE.negate();
      complex0.INF.tan();
      Complex complex9 = complex3.exp();
      complex9.NaN.multiply(2268);
      Complex complex10 = complex9.I.add(2887.242960807092);
      complex10.ONE.add((-3079.7512428));
      complex0.multiply(0.0);
      complex1.conjugate();
      Complex.valueOf(0.0, (-88.206));
      complex1.nthRoot(1047);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(8.319947089683576E-278);
      complex0.hashCode();
      Complex complex1 = complex0.INF.add((-3042.1));
      Complex complex2 = Complex.valueOf(8.319947089683576E-278, 8.319947089683576E-278);
      complex2.I.readResolve();
      Complex complex3 = complex0.pow(complex2);
      complex2.sinh();
      complex3.abs();
      complex0.ONE.subtract(0.0);
      complex3.abs();
      complex2.divide(complex0);
      complex2.getImaginary();
      complex1.createComplex(4606.5416106, (-3881.0886809));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.INF.toString();
      complex1.divide(complex0);
      complex0.getField();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.INF.subtract(complex1);
      complex2.I.sqrt();
      complex0.multiply(0.0);
      Complex complex4 = complex0.divide(0.0);
      complex3.tan();
      complex1.reciprocal();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4419920764774415E-8);
      Complex complex1 = complex0.INF.pow(1.4419920764774415E-8);
      Complex complex2 = complex1.ONE.multiply(553.283710021);
      complex2.add(553.283710021);
      complex0.ZERO.negate();
      Complex complex3 = complex0.reciprocal();
      ComplexField complexField0 = complex3.getField();
      complex3.multiply(1.4419920764774415E-8);
      complex0.equals(complexField0);
      Complex complex4 = complex0.cos();
      complex4.conjugate();
      complex3.hashCode();
      Complex complex5 = Complex.I;
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 1.9144186973571777;
      Complex complex0 = new Complex(1.9144186973571777, 1.9144186973571777);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.sin();
      Complex complex3 = complex2.reciprocal();
      Complex.valueOf(1.9144186973571777);
      complex3.I.tanh();
      complex2.INF.abs();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1807.1508309135218));
      complex0.sqrt1z();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.subtract((-1807.1508309135218));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex0.divide(complex3);
      complex2.conjugate();
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex6);
      ComplexField complexField0 = complex2.getField();
      complex4.cos();
      Complex complex7 = complex4.pow(1.2433054447174072);
      Complex complex8 = complex7.ZERO.conjugate();
      complex5.getField();
      Complex complex9 = complex3.add(1.2433054447174072);
      complex9.abs();
      complex7.isNaN();
      complex8.multiply((-1807.1508309135218));
      complex1.equals(complexField0);
      complex3.nthRoot(2210);
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ONE.divide(0.0);
      complex0.isNaN();
      Complex complex3 = complex0.pow(0.4879087805747986);
      complex3.sqrt();
      complex2.hashCode();
      Complex complex4 = complex1.pow(4.315655444002347E-296);
      complex0.abs();
      Complex complex5 = complex4.add(1354.347);
      complex3.negate();
      complex3.multiply(0.4879087805747986);
      complex1.multiply(1354.347);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(388.678744841, 388.678744841);
      complex0.ZERO.cosh();
      Complex complex1 = complex0.add((-3160.2861549));
      complex0.ONE.divide((-1175.22));
      Complex complex2 = complex0.divide((-3160.2861549));
      complex1.getField();
      complex0.ONE.getField();
      complex2.ZERO.reciprocal();
      complex1.exp();
      complex0.isNaN();
      complex1.divide((-518.706139474));
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1255.844513));
      Complex complex1 = complex0.ONE.cosh();
      complex0.hashCode();
      Complex complex2 = complex1.acos();
      complex1.divide(3669.3287744128106);
      complex2.INF.exp();
      Complex complex3 = complex1.pow((-997.6759283));
      complex2.tanh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex2.atan();
      complex6.NaN.divide(complex0);
      complex2.sqrt1z();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex7.I.tanh();
      complex8.INF.cos();
      complex2.cosh();
      complex5.createComplex(0.0, (-2513.070292178));
      Complex complex9 = complex6.sin();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.ONE.atan();
      complex3.ZERO.abs();
      complex1.NaN.asin();
      complex3.ZERO.subtract(complex0);
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex5.ONE.cos();
      complex6.ONE.subtract(0.0);
      Complex complex7 = complex4.INF.conjugate();
      complex0.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.I.log();
      complex8.I.multiply(0.0);
      Complex complex9 = complex4.I.pow(0.0);
      complex0.toString();
      complex9.NaN.atan();
      complex1.isNaN();
      complex0.ONE.getArgument();
      complex2.isInfinite();
      complex0.readResolve();
      complex2.multiply(complex7);
      complex1.createComplex(0.0, 0.0);
      complex9.negate();
      Complex.valueOf(0.0, 1418.109900629);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.exp();
      complex0.I.getArgument();
      Complex complex2 = complex0.negate();
      complex0.ZERO.sqrt();
      complex2.getArgument();
      complex1.cos();
      Complex complex3 = complex2.NaN.multiply(1871);
      complex2.nthRoot(1);
      complex3.cosh();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.676081191364984E71);
      Complex complex1 = complex0.ZERO.multiply(1.676081191364984E71);
      complex1.divide(1.676081191364984E71);
      Complex complex2 = complex1.ZERO.createComplex(1151.1216, 1.676081191364984E71);
      complex2.INF.toString();
      Complex complex3 = complex0.multiply((-1679));
      Complex complex4 = complex3.INF.tanh();
      complex4.NaN.divide(1627.0026);
      complex4.ZERO.sin();
      complex0.NaN.getArgument();
      Complex complex5 = complex0.NaN.reciprocal();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex5.NaN.cosh();
      complex0.sqrt1z();
      Complex complex8 = complex5.log();
      complex6.getImaginary();
      complex8.hashCode();
      complex7.multiply(4.0320284712983994E273);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sqrt();
      Complex complex1 = complex0.tan();
      complex0.ZERO.createComplex(3.064168, 3.064168);
      complex1.reciprocal();
      complex1.toString();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-2131.2));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.INF.tanh();
      complex3.NaN.conjugate();
      complex1.I.reciprocal();
      complex1.ZERO.add(Double.NaN);
      complex1.hashCode();
      complex0.nthRoot(399);
      Complex complex4 = complex2.negate();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.ONE.createComplex(0.0, 0.0);
      complex5.I.negate();
      Complex complex7 = complex2.tanh();
      complex7.divide(complex2);
      complex4.NaN.abs();
      complex0.nthRoot(1);
      Complex.valueOf(1585.00528881, 1585.00528881);
      Complex complex8 = complex3.pow(1585.00528881);
      complex8.ONE.hashCode();
      complex3.getField();
      complex3.getArgument();
      complex2.getReal();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-6.447877375049486E-9));
      complex1.ONE.getArgument();
      complex0.toString();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.tan();
      complex1.pow((-6.447877375049486E-9));
      complex2.sqrt();
      complex4.createComplex(0.0, 0.0);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.tanh();
      Complex complex1 = complex0.ZERO.add((-2012.98939885704));
      Complex complex2 = complex0.tan();
      complex0.hashCode();
      Complex complex3 = complex0.divide(complex2);
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.pow(Double.NaN);
      complex2.NaN.hashCode();
      Complex complex4 = complex1.INF.multiply(complex3);
      Complex complex5 = complex1.I.sqrt1z();
      complex2.getField();
      complex5.I.subtract(Double.NaN);
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      Complex.valueOf(857.56015967769, 0.0);
      complex5.I.asin();
      complex1.abs();
      complex1.reciprocal();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex2.ZERO.sinh();
      complex6.log();
      complex1.getImaginary();
      complex5.getField();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex3.reciprocal();
      complex9.exp();
      Complex complex10 = complex8.cosh();
      complex10.getField();
      complex0.add(complex5);
      complex1.getArgument();
      complex6.isNaN();
      complex4.cos();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-144.52049481177));
      complex0.ZERO.abs();
      Complex complex1 = complex0.reciprocal();
      complex1.createComplex((-144.52049481177), (-2373.11990367495));
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      complex0.subtract(0.0);
      complex1.INF.toString();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.NaN.atan();
      complex2.I.subtract(complex0);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      complex0.isInfinite();
      Complex complex6 = complex4.add(complex0);
      complex1.INF.tan();
      Complex complex7 = complex5.subtract(complex2);
      complex7.INF.abs();
      Complex complex8 = complex5.asin();
      complex3.getField();
      Complex complex9 = complex1.multiply(complex5);
      Complex complex10 = complex9.add(3257.09);
      Complex complex11 = complex9.INF.reciprocal();
      Complex complex12 = complex3.pow(complex9);
      complex1.sqrt1z();
      complex11.ONE.reciprocal();
      complex0.acos();
      complex8.log();
      complex0.pow(0.0);
      complex6.hashCode();
      complex11.getReal();
      complex5.reciprocal();
      complex10.isNaN();
      complex12.divide(complex9);
      complex9.exp();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.conjugate();
      complex2.ZERO.divide(complex1);
      Complex complex3 = complex0.ONE.add(0.0);
      complex3.ONE.readResolve();
      complex1.ONE.toString();
      complex1.ONE.getField();
      complex0.asin();
      complex3.tanh();
      complex1.log();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1824.9104), (-1824.9104));
      complex0.INF.sqrt();
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.pow(0.0);
      complex4.NaN.pow(0.0);
      Complex complex5 = complex2.ZERO.tan();
      Complex complex6 = complex0.NaN.divide(0.0);
      complex3.ZERO.cosh();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex6.ONE.multiply(complex1);
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.ONE.multiply(1213);
      complex10.asin();
      Complex complex11 = complex0.pow(0.0);
      complex11.NaN.abs();
      complex5.createComplex(1420.9850690541, Double.NaN);
      Complex complex12 = complex11.atan();
      complex12.NaN.toString();
      complex7.NaN.atan();
      complex1.getReal();
      Complex complex13 = complex2.INF.negate();
      complex12.cos();
      complex11.cos();
      complex2.pow(complex11);
      Complex complex14 = complex5.exp();
      complex13.createComplex(0.0, 0.0);
      complex3.getImaginary();
      complex14.isNaN();
      complex12.multiply((double) 1213);
      complex12.sqrt();
      complex8.createComplex(1420.9850690541, Double.NaN);
      complex5.equals(complex7);
      complex12.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(12.90583999192);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ZERO.add(12.90583999192);
      complex5.INF.readResolve();
      complex4.I.tan();
      complex3.NaN.readResolve();
      Complex complex6 = complex2.pow(3180.1);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex7.INF.reciprocal();
      Complex.valueOf(0.0);
      Complex complex10 = complex9.ZERO.pow(3180.1);
      complex10.I.exp();
      complex2.isNaN();
      complex0.nthRoot(1);
      Complex complex11 = complex1.sin();
      Complex complex12 = complex11.tan();
      complex0.toString();
      complex6.divide(complex8);
      Complex complex13 = complex1.sqrt1z();
      complex12.tan();
      Complex complex14 = complex0.log();
      complex14.ONE.hashCode();
      complex13.abs();
      Complex complex15 = complex13.cos();
      complex15.getReal();
      Complex complex16 = complex8.subtract(complex14);
      complex16.negate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.exp();
      complex1.ONE.cos();
      complex1.NaN.nthRoot(2156);
      complex0.multiply(1);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-1060.8));
      Complex complex1 = Complex.I;
      complex0.NaN.pow(complex1);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      complex0.multiply(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      complex2.getField();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-2959.437), (-2959.437));
      Complex complex3 = complex0.add(complex1);
      complex2.NaN.conjugate();
      complex0.readResolve();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.I.acos();
      complex4.NaN.negate();
      complex4.toString();
      complex2.abs();
      complex1.NaN.acos();
      double double0 = (-5557.359);
      Complex complex6 = complex1.divide((-5557.359));
      Complex complex7 = complex6.NaN.exp();
      int int0 = 0;
      complex3.INF.divide((-1623.3));
      complex7.I.multiply(0);
      complex4.ONE.multiply(complex5);
      Complex complex8 = Complex.valueOf(4185.2759423887455);
      int int1 = (-3975);
      try { 
        complex8.I.nthRoot((-3975));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,975
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.toString();
      complex0.I.tan();
      Complex.valueOf(1721.7915067);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(1);
      complex2.INF.subtract((double) 1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.createComplex((-2.2015877944429946E-104), (-380.61671513));
      Complex complex5 = complex4.NaN.divide((-380.61671513));
      complex5.ONE.getArgument();
      Complex complex6 = complex0.I.reciprocal();
      complex6.NaN.reciprocal();
      complex4.readResolve();
      complex1.toString();
      complex4.NaN.tanh();
      complex6.ZERO.sinh();
      Complex complex7 = complex1.negate();
      complex7.ZERO.negate();
      complex7.INF.getField();
      Complex complex8 = complex2.tanh();
      complex8.ZERO.atan();
      complex2.isNaN();
      complex1.NaN.getArgument();
      Complex complex9 = complex5.sqrt1z();
      complex9.isInfinite();
      Complex complex10 = complex3.add(0.0);
      complex10.getField();
      complex10.add(complex7);
      complex5.multiply(complex6);
      complex5.toString();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 744.53933537);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.NaN.log();
      complex2.ONE.atan();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex3.atan();
      complex1.ZERO.hashCode();
      complex3.NaN.divide(209.93156667803237);
      complex2.createComplex(744.53933537, 2.0);
      complex0.hashCode();
      complex0.exp();
      Complex complex5 = Complex.valueOf((-3775.9), (-3775.9));
      complex2.abs();
      complex5.I.multiply(483);
      complex2.conjugate();
      complex5.divide((-1382.06989341));
      complex4.isNaN();
      complex0.pow(Double.NaN);
      complex1.pow((-2409.247417446));
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      complex0.INF.sinh();
      Complex complex3 = complex0.ZERO.add(0.0);
      Complex complex4 = complex2.NaN.createComplex(0.0, 0.0);
      Complex complex5 = complex4.I.cosh();
      complex4.NaN.cosh();
      Complex complex6 = complex0.atan();
      complex6.readResolve();
      complex2.multiply(0.0);
      Complex complex7 = complex3.sqrt();
      complex7.ZERO.createComplex(0.0, (-2269.5741598));
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(7);
      complex1.ZERO.atan();
      Complex complex2 = complex0.exp();
      complex2.getImaginary();
      Complex complex3 = complex0.ONE.createComplex((-2300.0073364466), Double.NaN);
      complex3.ONE.multiply(complex1);
      Complex complex4 = complex0.tan();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.ONE.tanh();
      Complex complex7 = complex4.ZERO.tanh();
      complex7.ONE.divide((-2300.0073364466));
      Complex complex8 = complex5.ZERO.exp();
      Complex complex9 = complex8.pow(complex1);
      complex2.equals(object0);
      complex4.reciprocal();
      Complex complex10 = complex4.log();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex11.ZERO.divide(complex0);
      complex4.add((-3263.356));
      Complex complex13 = complex9.negate();
      complex13.INF.acos();
      Complex complex14 = complex13.ONE.cosh();
      complex14.I.negate();
      complex13.getImaginary();
      complex1.isInfinite();
      complex6.isNaN();
      complex12.negate();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-295.489288806553));
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      assertFalse(list0.contains(complex0));
      assertFalse(list0.isEmpty());
      
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf((-1027.8246));
      Complex complex5 = Complex.valueOf((-1027.8246), 1058.07904);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex1.ONE.add(complex4);
      complex7.NaN.cos();
      assertEquals((-1026.8246), complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.multiply((-2211));
      complex8.hashCode();
      complex1.log();
      complex2.NaN.conjugate();
      Complex complex9 = complex2.multiply(1859);
      Complex complex10 = complex6.log();
      complex9.getField();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(2868.586900121538, complex9.getReal(), 0.01);
      
      Complex complex11 = complex8.atan();
      complex5.getImaginary();
      Complex complex12 = complex11.createComplex((-1018.6), 505.6074258081);
      complex12.NaN.getField();
      Complex complex13 = complex12.sin();
      Complex complex14 = complex13.ONE.reciprocal();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex15 = complex3.subtract(complex10);
      complex15.subtract(1058.07904);
      complex3.isNaN();
      Complex complex16 = complex8.sqrt();
      assertTrue(complex16.equals((Object)complex1));
      
      Complex complex17 = complex15.sqrt1z();
      Complex complex18 = complex17.cosh();
      assertEquals((-3.141592653589793), complex10.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex14));
      assertNotSame(complex18, complex13);
      assertEquals(Double.NEGATIVE_INFINITY, complex17.getImaginary(), 0.01);
      assertFalse(complex18.equals((Object)complex14));
      assertNotSame(complex18, complex0);
  }
}
