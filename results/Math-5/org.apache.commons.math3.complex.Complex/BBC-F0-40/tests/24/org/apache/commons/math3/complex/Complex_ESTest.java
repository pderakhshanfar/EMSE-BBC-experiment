/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:18:37 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-80.0));
      Complex complex2 = complex0.pow(complex1);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-6.892221115467135E-10));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.INF.cosh();
      complex3.INF.sqrt();
      Complex complex4 = complex1.reciprocal();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(200, 0.6922291965121701);
      complex2.sqrt();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(4.85437090269903E-263);
      Complex complex2 = complex1.sqrt();
      complex2.add(4.85437090269903E-263);
      Complex complex3 = Complex.valueOf(2.492207971735154E-10, 311.811548807419);
      complex3.getArgument();
      Complex complex4 = new Complex(1.5707963267940974, 4.85437090269903E-263);
      Complex complex5 = complex3.asin();
      complex0.sqrt();
      complex4.exp();
      Complex.valueOf(4.85437090269903E-263, 4.85437090269903E-263);
      complex2.subtract(complex5);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-5580.4840197));
      complex1.sqrt();
      complex1.multiply(1.5707963267948966);
      Complex complex2 = Complex.valueOf((-2.2258513086839407E-9));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-6.892221115467135E-10));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.INF.sqrt();
      complex3.nthRoot(37);
      Complex complex4 = Complex.valueOf((double) 37, Double.POSITIVE_INFINITY);
      complex4.multiply((-6.892221115467135E-10));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-6.892221115467135E-10));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.INF.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1539.1, 20.0);
      Complex complex2 = new Complex((-4161.8), 1827.07378460606);
      complex0.isNaN();
      complex1.log();
      complex1.tan();
      complex2.toString();
      complex2.abs();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-6.892221115467135E-10));
      complex0.abs();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(4968);
      Complex complex1 = Complex.valueOf((-6.892221115467135E-10));
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-599.05471), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1312.3252432293, 1312.3252432293);
      complex0.multiply(1453);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-537.340325), 1.4371946235769428E-4);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.log();
      Complex complex3 = complex0.negate();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      complex1.reciprocal();
      complex2.sin();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.001222344456667889));
      complex0.nthRoot(502);
      complex0.ZERO.hashCode();
      complex0.abs();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      complex2.reciprocal();
      complex1.sin();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.pow((-4.5943826321309986E-4));
      complex1.INF.getArgument();
      complex0.tan();
      Complex complex2 = new Complex((-20.0));
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-20.0), (-20.0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-783.64));
      Complex complex1 = Complex.valueOf(2906.538182391, (-235705.37438414458));
      Complex complex2 = complex0.add((-783.64));
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.NaN.sinh();
      complex3.ZERO.abs();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.valueOf((-783.64));
      Complex complex8 = complex3.pow(0.0);
      complex7.INF.hashCode();
      complex1.INF.toString();
      complex3.toString();
      complex5.getImaginary();
      Complex complex9 = complex1.subtract(complex0);
      Complex complex10 = complex9.ZERO.createComplex((-20.0), 0.0);
      Complex complex11 = complex1.sqrt1z();
      complex11.NaN.exp();
      complex1.sqrt();
      Complex complex12 = complex2.tanh();
      complex4.multiply(3156);
      complex12.ONE.divide(3250.27);
      complex8.getField();
      complex12.conjugate();
      complex0.conjugate();
      complex6.pow(444.28896968);
      complex10.tanh();
      complex1.readResolve();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      complex1.divide(0.0);
      complex1.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.pow(0.0);
      complex1.abs();
      complex3.getField();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex5.cos();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(8.227620163729258E-235);
      complex0.isNaN();
      complex0.tanh();
      Complex complex1 = new Complex(8.227620163729258E-235, 8.227620163729258E-235);
      complex1.toString();
      complex1.abs();
      complex0.nthRoot(1407);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.601065201853145E-7), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex1.asin();
      Complex complex3 = complex1.createComplex(2025.6308107303273, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.ZERO;
      complex5.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.multiply(complex3);
      complex5.multiply(complex3);
      complex1.subtract(complex7);
      Complex complex8 = Complex.ONE;
      complex8.tanh();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-485.4960086181395));
      complex0.toString();
      Complex complex1 = complex0.NaN.createComplex((-485.4960086181395), 0.0);
      complex0.equals("(2.0, -485.4960086181395)");
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.createComplex(2.0, (-485.4960086181395));
      complex3.reciprocal();
      complex0.INF.sqrt1z();
      complex1.cosh();
      Complex complex4 = complex0.multiply(complex1);
      complex4.ONE.multiply(complex3);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex1.divide(0.0);
      complex1.toString();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      complex1.equals("(0.0, 0.0)");
      Complex complex4 = Complex.ZERO;
      complex3.asin();
      complex3.equals(complex0);
      Complex complex5 = complex2.createComplex(0.0, 0.0);
      complex0.reciprocal();
      Complex complex6 = complex1.negate();
      Complex complex7 = Complex.ZERO;
      complex7.ZERO.abs();
      complex7.sqrt1z();
      Complex complex8 = complex6.cosh();
      complex8.multiply(complex5);
      complex8.multiply(complex7);
      complex4.subtract(complex2);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-2173.429203673205));
      Complex complex2 = complex0.divide(complex1);
      complex0.getArgument();
      Complex complex3 = Complex.INF;
      complex1.pow(complex3);
      complex2.tanh();
      complex2.readResolve();
      try { 
        complex0.nthRoot((-2155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,155
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = new Complex(1.001455050575191E-117, Double.NaN);
      Complex complex2 = complex0.I.multiply(complex1);
      complex0.readResolve();
      Complex complex3 = complex0.multiply((-299));
      Complex complex4 = complex3.I.tan();
      complex4.ONE.subtract((-2577.0));
      complex3.sinh();
      Complex complex5 = complex3.I.createComplex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.tanh();
      Complex.valueOf(6.329175751021792E-8);
      complex5.getImaginary();
      Complex complex7 = complex0.atan();
      complex6.atan();
      complex2.exp();
      complex7.subtract(355.32247957);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.multiply((-769));
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.ONE.multiply((double) (-769));
      complex0.isNaN();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.I.sqrt1z();
      complex4.ZERO.toString();
      Complex complex5 = Complex.valueOf(1157.9711068096883, 1157.9711068096883);
      complex5.NaN.multiply((-769));
      complex2.add(0.0);
      Complex complex6 = complex3.divide(82.22722741);
      complex5.reciprocal();
      complex0.subtract(complex1);
      complex6.abs();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-2173.429203673205));
      complex0.isNaN();
      Complex complex2 = complex1.negate();
      complex1.isInfinite();
      Complex complex3 = new Complex((-2279012.85466569), 3712.0193906941);
      complex3.pow(2216.0);
      complex0.abs();
      complex2.getField();
      Complex.valueOf((-450.4145), (-2279012.85466569));
      complex0.toString();
      Complex complex4 = complex0.tan();
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1993.52));
      Complex complex1 = Complex.valueOf((-1993.52), (-1993.52));
      Complex complex2 = complex1.INF.add((-1993.52));
      complex2.NaN.getArgument();
      complex2.ONE.pow(complex0);
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex3.cos();
      complex4.I.pow(complex1);
      complex0.NaN.readResolve();
      Complex complex5 = Complex.I;
      complex5.ONE.log();
      Complex complex6 = complex1.ZERO.multiply(complex5);
      complex6.NaN.log();
      complex6.NaN.divide((-1993.52));
      complex0.negate();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = Complex.NaN;
      complex8.sin();
      Complex complex10 = complex7.I.multiply(complex9);
      complex8.ZERO.nthRoot(1);
      Complex complex11 = complex10.ZERO.divide((-1993.52));
      Complex complex12 = complex0.subtract(complex7);
      complex1.abs();
      complex0.tan();
      complex10.sqrt();
      Complex complex13 = Complex.valueOf(2819.2630208620126, 2819.2630208620126);
      complex0.ZERO.divide(complex13);
      Complex complex14 = complex3.createComplex(Double.NaN, 1);
      Complex complex15 = complex14.add(complex12);
      complex15.INF.getArgument();
      complex11.reciprocal();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(1482.720491, 1066.09165);
      Complex complex1 = complex0.multiply((-1073741824));
      complex1.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.sin();
      complex2.subtract(complex0);
      complex3.add((-2.51822155772458));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-2871.999002));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.conjugate();
      complex2.ONE.abs();
      Complex complex3 = complex2.reciprocal();
      complex0.INF.add(complex2);
      complex2.multiply(complex1);
      try { 
        complex3.nthRoot((-100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -100
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-485.4960086181395));
      complex0.toString();
      Complex complex1 = complex0.NaN.createComplex((-485.4960086181395), 0.0);
      complex0.equals("");
      Complex complex2 = Complex.ZERO;
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract(547.8253733);
      Complex complex2 = complex0.subtract((-1623.947610818));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.sqrt();
      complex1.multiply(0);
      Complex complex5 = Complex.ONE;
      complex5.abs();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex2.multiply(0);
      Complex complex9 = complex6.log();
      complex7.isInfinite();
      complex0.sqrt1z();
      complex8.equals(complex4);
      complex6.subtract(complex9);
      complex8.log();
      Complex complex10 = complex9.sqrt1z();
      complex3.subtract((-194.0894));
      complex6.multiply(complex1);
      complex2.tan();
      complex10.tanh();
      Complex complex11 = Complex.NaN;
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply((-769));
      complex0.subtract(complex2);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.multiply(1.0);
      Complex complex5 = Complex.INF;
      complex5.isNaN();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.sqrt1z();
      complex4.toString();
      Complex.valueOf(Double.NaN, 0.0);
      Complex complex8 = complex7.multiply((-769));
      complex8.divide(Double.NaN);
      complex0.negate();
      complex4.isInfinite();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.pow(Double.NaN);
      complex6.abs();
      complex1.getField();
      Complex complex11 = Complex.valueOf(1.5705533699394834, (-5.763495903609913E-231));
      complex11.toString();
      complex11.tan();
      Complex complex12 = complex11.multiply(complex10);
      complex11.isNaN();
      Complex complex13 = Complex.valueOf(Double.NaN);
      complex13.log();
      complex12.asin();
      complex9.tan();
      complex1.tanh();
      Complex.valueOf(1.670735065191342E-8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2755.979524689);
      complex0.I.toString();
      complex0.NaN.createComplex(2755.979524689, 0.0);
      complex0.equals("");
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.ONE.asin();
      complex0.equals(complex1);
      Complex complex3 = complex0.createComplex(2.0, 2755.979524689);
      complex1.readResolve();
      complex1.nthRoot(681);
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.add((double) 681);
      complex4.getArgument();
      complex5.multiply(complex6);
      Complex.valueOf(2.0);
      complex4.sqrt();
      complex2.acos();
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply((-3322));
      complex0.NaN.getArgument();
      complex0.getArgument();
      complex0.abs();
      Complex complex2 = complex1.divide((-2132.5628407213203));
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.subtract(complex3);
      complex4.abs();
      Complex complex5 = new Complex((-2132.5628407213203));
      complex5.exp();
      complex0.readResolve();
      complex3.nthRoot(681);
      complex1.divide(complex0);
      Complex complex6 = Complex.INF;
      complex6.add(1.5292444435954893E-203);
      complex5.getArgument();
      Complex complex7 = new Complex(Double.NaN, (-3322));
      Complex complex8 = complex1.multiply(complex7);
      Complex.valueOf(Double.NaN);
      complex8.sqrt();
      complex1.acos();
      complex0.add(123.310632606);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.multiply((-769));
      Complex complex2 = complex1.ONE.createComplex((-769), 0.0);
      complex0.isNaN();
      complex1.cos();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2755.979524689);
      complex0.I.toString();
      Complex complex1 = complex0.NaN.createComplex(2755.979524689, 0.0);
      Complex complex2 = new Complex(0.0, 2755.979524689);
      Complex complex3 = Complex.valueOf(0.0, 2.0);
      complex3.NaN.readResolve();
      complex1.cos();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(2007);
      Complex complex3 = complex1.multiply(1000);
      complex2.getArgument();
      complex0.abs();
      Complex complex4 = complex2.divide(0.0);
      Complex complex5 = Complex.I;
      complex0.subtract(complex5);
      complex4.abs();
      Complex complex6 = new Complex(1.5707963267948966, Double.NaN);
      Complex complex7 = complex6.exp();
      complex7.readResolve();
      complex6.nthRoot(492);
      complex6.divide(complex0);
      Complex complex8 = complex7.add(633.89176);
      complex3.getArgument();
      complex4.multiply(complex2);
      Complex.valueOf(1.438748150617286E-7);
      complex8.sqrt();
      Complex complex9 = complex5.acos();
      complex8.add(Double.NaN);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-1864.2));
      Complex complex1 = complex0.I.negate();
      complex1.ONE.tanh();
      complex0.I.log();
      Complex complex2 = complex0.I.acos();
      complex2.NaN.hashCode();
      Complex complex3 = complex0.log();
      complex3.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.ZERO.atan();
      complex6.ZERO.tanh();
      Complex complex7 = complex5.ONE.multiply((-1115));
      complex7.INF.sin();
      complex1.readResolve();
      complex4.NaN.getField();
      Complex complex8 = complex0.add((-1138.9111519));
      Complex complex9 = complex8.ONE.sqrt();
      complex4.getField();
      complex5.getReal();
      Complex complex10 = complex0.acos();
      complex4.INF.abs();
      complex10.INF.tan();
      complex9.reciprocal();
      complex0.multiply((-1864.2));
      complex8.subtract(complex1);
      complex4.toString();
      complex3.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-6.950808333865794E-9), 0.0);
      Complex complex1 = complex0.ONE.sinh();
      complex0.ONE.toString();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = Complex.valueOf((-6.950808333865794E-9), (-6.950808333865794E-9));
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.I.cos();
      complex2.INF.pow((-6.950808333865794E-9));
      Complex complex6 = complex4.INF.sqrt1z();
      complex6.multiply(2007);
      complex2.getArgument();
      Complex complex7 = complex5.subtract((double) 2007);
      Complex complex8 = complex7.add(0.0);
      complex4.pow(complex0);
      complex5.isNaN();
      Complex complex9 = complex3.tanh();
      complex9.readResolve();
      complex3.cos();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1482.720491, 1066.09165);
      Complex complex1 = complex0.pow(1419.744944345);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex(1066.09165, 318.69394542);
      complex4.abs();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex4.divide((-1398.0));
      Complex complex7 = complex3.subtract(complex4);
      complex1.abs();
      Complex complex8 = Complex.valueOf(1246.1, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.exp();
      complex2.nthRoot(1);
      complex9.divide(complex4);
      complex7.add(1246.1);
      complex7.getArgument();
      Complex complex10 = Complex.ONE;
      complex6.multiply(complex10);
      Complex.valueOf((-1238.418007));
      complex10.acos();
      complex5.add(Double.POSITIVE_INFINITY);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-6.950808333865794E-9), 0.0);
      Complex complex1 = complex0.ONE.sinh();
      complex0.ONE.toString();
      Complex complex2 = complex1.NaN.asin();
      complex2.NaN.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex2.INF.pow((-6.950808333865794E-9));
      Complex complex6 = complex3.INF.sqrt1z();
      Complex complex7 = complex6.multiply(2007);
      complex2.getArgument();
      complex0.abs();
      complex7.NaN.exp();
      Complex complex8 = complex0.divide((-6.950808333865794E-9));
      complex1.ZERO.subtract(complex0);
      complex0.abs();
      complex1.exp();
      complex8.I.nthRoot(1);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.reciprocal();
      complex4.subtract(complex2);
      complex5.abs();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.multiply((-3322));
      complex0.NaN.getArgument();
      complex0.log();
      complex0.tan();
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.getField();
      Complex.valueOf(1326.148177281722, 1004.21664);
      complex0.getField();
      Complex complex2 = Complex.INF;
      complex2.isNaN();
      Complex complex3 = Complex.ZERO;
      complex3.tanh();
      complex2.cos();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-1950.60213236699));
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex0.NaN.asin();
      complex2.NaN.abs();
      complex2.getArgument();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = Complex.valueOf(215.26899987839);
      complex5.acos();
      Complex complex6 = complex1.add(Double.NaN);
      complex6.acos();
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2755.979524689);
      complex0.I.toString();
      Complex complex1 = complex0.NaN.createComplex(2755.979524689, 0.0);
      Complex complex2 = new Complex(0.0, 2755.979524689);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.multiply(2007);
      complex2.abs();
      complex0.getArgument();
      complex2.readResolve();
      Complex complex5 = complex1.asin();
      complex5.equals(complex4);
      complex4.createComplex(2755.979524689, (-225.03));
      Complex complex6 = Complex.ZERO;
      complex6.add(complex0);
      Complex complex7 = Complex.NaN;
      complex6.negate();
      complex6.sqrt1z();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.ONE;
      complex2.multiply(complex10);
      complex9.subtract(complex2);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 2755.979524689;
      Complex complex0 = new Complex(2.0, 2755.979524689);
      complex0.I.toString();
      Complex complex1 = complex0.NaN.createComplex(2755.979524689, 0.0);
      complex0.equals("");
      complex1.abs();
      complex1.exp();
      complex0.divide((-1.4669965113042639E-8));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ZERO;
      complex0.abs();
      Complex complex4 = Complex.valueOf((-1.4669965113042639E-8));
      complex4.exp();
      Complex complex5 = Complex.ONE;
      try { 
        complex5.nthRoot((-2057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,057
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.INF.pow((-1185.4347676075079));
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.I.log();
      complex2.INF.multiply(610);
      Complex complex6 = complex5.ZERO.createComplex((-1185.4347676075079), (-1185.4347676075079));
      complex4.INF.add((-1185.4347676075079));
      Complex complex7 = complex1.INF.cosh();
      Complex complex8 = complex7.INF.divide(complex6);
      complex0.readResolve();
      complex1.sinh();
      complex3.nthRoot(1663040638);
      complex6.INF.toString();
      Complex complex9 = complex2.reciprocal();
      Object object0 = complex8.readResolve();
      complex5.equals(object0);
      Complex complex10 = complex2.cos();
      complex4.cos();
      complex7.cos();
      complex5.sqrt();
      complex9.log();
      complex10.multiply(2866.254);
      Complex complex11 = Complex.valueOf(2.8946401383311E-63);
      complex1.add(complex11);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.227620163729258E-235);
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(8.227620163729258E-235);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(8.227620163729258E-235);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.atan();
      complex0.sin();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = new Complex(8.227620163729258E-235);
      complex6.hashCode();
      Complex complex7 = complex5.subtract(8.227620163729258E-235);
      complex4.tan();
      complex1.sqrt();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.cos();
      complex5.divide(complex6);
      Complex complex10 = Complex.valueOf(6.950808333865794E-9, (-4455.0));
      complex10.sinh();
      complex3.getImaginary();
      Complex complex11 = complex9.multiply((-4305));
      complex7.sinh();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1482.720491, 1066.09165);
      Complex complex1 = complex0.pow(1419.744944345);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = complex0.pow(complex3);
      complex3.NaN.asin();
      complex5.add(0.0);
      Complex complex6 = complex3.divide(0.0);
      Complex complex7 = complex4.reciprocal();
      complex6.abs();
      complex7.atan();
      complex1.subtract((-20.0));
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1385.239079331949);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.add(1385.239079331949);
      complex0.ONE.cosh();
      Complex complex5 = complex0.pow(complex3);
      complex3.NaN.asin();
      complex5.add(0.0);
      Complex complex6 = complex3.divide(0.0);
      Complex complex7 = complex4.reciprocal();
      complex7.NaN.subtract(complex0);
      complex6.abs();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.divide(1.253325949455206E-167);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(1482.720491, 1066.09165);
      Complex complex1 = complex0.pow(1419.744944345);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.getArgument();
      Complex complex3 = complex1.atan();
      complex3.INF.cos();
      Complex complex4 = complex0.sin();
      complex4.reciprocal();
      complex4.hashCode();
      Complex complex5 = complex0.subtract(1066.09165);
      Complex complex6 = new Complex(0.0, 2.0);
      complex6.tan();
      complex4.sqrt();
      complex6.cos();
      complex4.divide(complex2);
      complex0.sinh();
      Complex complex7 = Complex.valueOf(1482.720491, 20.0);
      complex7.getImaginary();
      Complex complex8 = Complex.ONE;
      complex8.multiply((-3084));
      complex5.sinh();
      complex0.sqrt();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2755.979524689);
      Complex complex1 = complex0.NaN.createComplex(2755.979524689, 0.0);
      complex0.equals("");
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.ONE.asin();
      complex0.equals(complex2);
      Complex complex4 = complex0.createComplex(2.0, 2755.979524689);
      Complex complex5 = Complex.valueOf((-2995.754157344));
      complex2.add(complex5);
      complex3.sqrt();
      Complex complex6 = complex4.subtract((-1979.10775));
      complex1.abs();
      complex6.acos();
      Complex complex7 = Complex.ZERO;
      complex7.hashCode();
      Complex complex8 = complex1.pow(complex2);
      complex2.getArgument();
      complex5.sqrt();
      Complex complex9 = Complex.ZERO;
      complex9.isInfinite();
      Complex complex10 = Complex.ZERO;
      complex10.getField();
      complex9.acos();
      Complex complex11 = Complex.ONE;
      complex11.add((-524.9188226));
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(2501.854, 2501.854);
      Complex complex1 = complex0.createComplex(2501.854, 0.0);
      complex0.ZERO.toString();
      complex1.NaN.hashCode();
      Complex complex2 = complex1.multiply(6927);
      Complex complex3 = complex2.ONE.cos();
      complex3.I.sqrt();
      Complex complex4 = complex3.I.createComplex(2501.854, 3036.79);
      Complex complex5 = complex2.I.atan();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex7.INF.divide(0.0);
      Complex complex9 = complex7.I.exp();
      complex9.add(complex5);
      complex2.reciprocal();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.negate();
      Complex complex12 = complex2.sqrt1z();
      complex4.cosh();
      complex8.multiply(complex11);
      complex3.abs();
      complex12.atan();
      Complex complex13 = complex9.subtract(2829.688);
      complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2755.979524689);
      complex0.I.toString();
      double double0 = 0.0;
      Complex complex1 = complex0.NaN.createComplex(2755.979524689, 0.0);
      Complex complex2 = new Complex(0.0, 2755.979524689);
      Complex complex3 = complex2.sqrt1z();
      complex3.multiply(2007);
      complex2.abs();
      complex0.getArgument();
      complex0.abs();
      Complex complex4 = complex0.exp();
      complex1.divide(0.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ZERO;
      complex4.abs();
      complex2.exp();
      // Undeclared exception!
      complex0.nthRoot(2147465458);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(2320.811818238);
      Complex complex1 = complex0.negate();
      complex1.add(complex0);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf((-312.1931856), (-2342.9360512));
      Complex complex6 = complex5.multiply(2007);
      complex6.abs();
      complex2.getArgument();
      complex6.abs();
      Complex complex7 = Complex.ONE;
      complex2.divide(5516.57750833);
      Complex complex8 = Complex.INF;
      complex0.subtract(complex8);
      complex5.abs();
      Complex complex9 = new Complex((-1.0), 4743833.918296187);
      Complex complex10 = complex9.exp();
      complex0.nthRoot(1);
      Complex complex11 = Complex.ZERO;
      complex2.divide(complex11);
      Complex complex12 = complex10.add((double) 1);
      complex9.getArgument();
      complex7.multiply(complex12);
      Complex.valueOf(4656.368568233314);
      complex10.asin();
      Complex complex13 = new Complex((-481.5417036562));
      complex13.exp();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.227620163729258E-235, Double.NaN);
      Complex complex1 = Complex.valueOf(365.55);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(2320.811818238);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add(complex0);
      complex1.ZERO.cos();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex3.ZERO.tan();
      complex5.getField();
      Complex.valueOf(20.0, 20.0);
      complex2.getField();
      complex4.isNaN();
      Complex complex6 = complex5.tanh();
      complex6.cos();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(2320.811818238);
      Complex complex1 = complex0.negate();
      complex1.add(complex0);
      complex1.ZERO.cos();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex2.sin();
      complex1.hashCode();
      Complex complex5 = complex3.cos();
      Complex complex6 = new Complex((-2403.672), (-918.3922726635739));
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.multiply((-1775));
      Complex complex10 = complex8.log();
      complex4.isInfinite();
      complex5.sqrt1z();
      complex10.equals(complex3);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.subtract(complex7);
      Complex complex13 = complex12.log();
      Complex complex14 = complex13.sqrt1z();
      complex7.subtract((-2179.855840834263));
      complex1.multiply(complex14);
      complex12.tan();
      complex9.tanh();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(547.8253733);
      Complex complex2 = complex0.INF.subtract(0.0);
      Complex complex3 = complex2.I.sqrt1z();
      complex3.NaN.sqrt();
      Complex complex4 = complex0.INF.multiply(0);
      complex4.ZERO.abs();
      Complex complex5 = complex4.tan();
      complex5.getField();
      Complex.valueOf(547.8253733, (double) 0);
      complex4.getField();
      Complex complex6 = Complex.valueOf(1502.9535168213108, (double) 0);
      complex6.NaN.sin();
      complex5.atan();
      complex5.acos();
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = new Complex(547.8253733);
      complex8.divide((-244.0));
      complex6.acos();
      Complex.valueOf(547.8253733);
      Complex complex9 = Complex.valueOf((-244.0));
      complex9.sqrt();
      complex2.add(complex7);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(2320.811818238);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex1.asin();
      complex1.ZERO.log();
      Complex complex5 = complex4.ZERO.tan();
      complex5.getField();
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      complex2.getField();
      Complex.valueOf(2320.811818238, 20.0);
      complex6.INF.atan();
      complex2.acos();
      complex5.subtract(complex4);
      complex3.divide(2320.811818238);
      complex1.cos();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(8.227620163729258E-235);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.NaN.sinh();
      complex2.isNaN();
      complex1.tanh();
      Complex complex4 = complex3.acos();
      Complex.valueOf(8.227620163729258E-235);
      complex0.sqrt();
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 343.594057556);
      Complex complex1 = complex0.sqrt1z();
      complex0.equals("NOT_POSITIVE_DEGREES_OF_FREEDOM");
      Complex complex2 = complex1.subtract(complex0);
      complex0.sqrt1z();
      complex2.subtract((-5.2744376732859406E250));
      Complex complex3 = Complex.INF;
      complex0.multiply(complex3);
      complex0.tan();
      complex1.tanh();
      complex3.readResolve();
      complex2.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2420.1046203, 2420.1046203);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow((-3178.5955));
      Complex complex3 = complex2.subtract(complex0);
      complex3.ZERO.abs();
      complex1.acos();
      complex3.hashCode();
      Complex complex4 = complex3.multiply(2420.1046203);
      complex4.ONE.atan();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.multiply((-77));
      complex6.INF.toString();
      complex0.subtract(complex1);
      complex6.toString();
      complex4.isInfinite();
      Complex complex7 = complex3.sqrt1z();
      complex7.NaN.divide(complex2);
      complex0.abs();
      complex0.divide(complex5);
      Complex complex8 = complex1.multiply(7);
      complex8.ONE.readResolve();
      complex3.sinh();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1401.159, 143.02910267117);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.pow(0.0);
      complex2.isInfinite();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      complex4.INF.pow(0.0);
      complex3.INF.exp();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex6.I.tanh();
      complex1.hashCode();
      Complex complex8 = Complex.valueOf(0.0, (-579.088683));
      complex5.tanh();
      Complex.valueOf(1401.159);
      complex6.INF.cosh();
      complex8.abs();
      complex6.asin();
      complex4.negate();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.NaN.cosh();
      complex3.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex1.abs();
      Complex complex4 = complex0.ZERO.subtract(0.0);
      complex1.pow(4.604606371472047E299);
      Complex complex5 = new Complex(0.0, (-965.126279874));
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex1.pow((-2076.5049659472193));
      complex7.NaN.abs();
      complex6.ONE.reciprocal();
      complex6.ZERO.getField();
      complex1.ONE.negate();
      complex3.equals(complex5);
      complex3.isNaN();
      Complex complex8 = complex4.pow(complex0);
      complex8.ZERO.tan();
      complex5.divide(complex2);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.multiply((-769));
      complex1.I.subtract(complex0);
      complex1.ONE.multiply((double) (-769));
      complex1.ONE.toString();
      complex0.isNaN();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.sqrt1z();
      complex3.ZERO.toString();
      Complex complex4 = Complex.valueOf(1157.9711068096883, 1157.9711068096883);
      Complex complex5 = complex4.NaN.multiply((-769));
      Complex complex6 = complex2.divide((-6.878666975101243E-97));
      Complex complex7 = complex6.NaN.negate();
      complex6.isInfinite();
      complex2.pow(1157.9711068096883);
      complex2.abs();
      complex5.NaN.getField();
      Complex complex8 = Complex.valueOf(0.0, 1.670735065191342E-8);
      complex3.toString();
      Complex complex9 = complex5.tan();
      complex9.NaN.multiply(complex0);
      complex8.isNaN();
      Complex complex10 = complex6.log();
      complex7.asin();
      complex10.tan();
      complex7.tanh();
      Complex.valueOf(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.add(6.283185307179586);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2208));
      Complex complex2 = complex1.I.sin();
      complex1.INF.subtract(complex0);
      complex2.add(0.0);
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.ONE.sin();
      complex5.NaN.toString();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.sinh();
      complex7.INF.sin();
      complex3.NaN.toString();
      complex1.ONE.acos();
      complex3.ZERO.multiply(complex1);
      Complex complex8 = complex0.sqrt();
      complex8.ZERO.toString();
      Complex complex9 = complex1.multiply(complex3);
      complex9.INF.readResolve();
      complex8.getReal();
      Complex complex10 = complex8.tanh();
      complex8.multiply(complex10);
      complex3.reciprocal();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.pow((-368.1156));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.NaN.negate();
      complex2.I.sinh();
      complex2.ZERO.sqrt1z();
      complex2.ZERO.multiply(1);
      complex2.ZERO.divide(complex1);
      Complex.valueOf(0.10026945173740387, 0.38041436672210693);
      Complex complex3 = complex1.I.multiply(complex0);
      complex1.hashCode();
      Complex.valueOf(0.0);
      Complex complex4 = complex0.sqrt1z();
      complex0.INF.readResolve();
      complex0.isNaN();
      complex1.ONE.abs();
      complex0.equals(complex4);
      complex3.NaN.reciprocal();
      complex0.ONE.add(150.53);
      complex0.sin();
      complex3.tanh();
      complex4.multiply(1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(547.8253733);
      Complex complex2 = complex0.INF.subtract(0.0);
      Complex complex3 = complex2.I.sqrt1z();
      complex3.NaN.sqrt();
      Complex complex4 = complex0.INF.multiply(0);
      complex4.ZERO.abs();
      Complex complex5 = complex4.I.sin();
      complex4.I.hashCode();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.I.pow(complex2);
      Complex complex8 = complex7.asin();
      complex8.INF.multiply(0);
      Complex complex9 = complex7.ONE.log();
      complex2.isInfinite();
      complex9.sqrt1z();
      complex6.equals("NOT_POSITIVE_DEGREES_OF_FREEDOM");
      complex5.subtract(complex1);
      complex6.log();
      complex8.sqrt1z();
      Complex complex10 = complex1.subtract(0.0);
      complex4.multiply(complex10);
      complex7.tan();
      complex3.tanh();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(2320.811818238);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex1.asin();
      complex1.ZERO.log();
      Complex complex5 = complex4.ZERO.tan();
      complex5.getField();
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      complex2.getField();
      Complex.valueOf(2320.811818238, 20.0);
      complex6.INF.atan();
      Complex complex7 = complex2.acos();
      complex5.subtract(complex4);
      complex3.divide(2320.811818238);
      complex7.ONE.acos();
      Complex.valueOf(2320.811818238);
      complex6.sqrt();
      complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.sqrt1z();
      complex1.INF.getField();
      Complex complex5 = complex4.NaN.exp();
      complex4.divide(complex5);
      complex4.ONE.atan();
      Complex complex6 = complex3.ONE.subtract(complex2);
      complex6.I.pow(complex4);
      Complex complex7 = complex2.sqrt();
      complex7.ZERO.sinh();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex2.sqrt();
      complex7.abs();
      complex8.ONE.multiply(1);
      complex9.acos();
      complex1.ZERO.reciprocal();
      complex8.subtract(0.8916040425905877);
      complex1.ONE.negate();
      complex0.ZERO.divide(complex6);
      Complex complex10 = complex2.add((-1005.1793));
      complex10.ONE.tan();
      complex10.atan();
      complex10.nthRoot(651);
      Complex complex11 = complex2.cos();
      Complex.valueOf((double) 651, 185.86600269);
      complex11.isInfinite();
      complex0.readResolve();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(979.9776);
      Complex complex1 = Complex.I;
      Complex.valueOf(1.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.NaN.negate();
      complex0.getReal();
      Complex complex5 = complex0.multiply((-2720));
      complex5.negate();
      Complex.valueOf((-663.312), (-2702.433952828));
      complex4.equals(complex1);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.log();
      complex1.NaN.createComplex(0.0, 0.0);
      complex3.ZERO.divide(0.0);
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex3.ONE.subtract(complex4);
      complex7.INF.add(0.0);
      Complex complex8 = complex7.NaN.multiply(complex5);
      complex1.NaN.sqrt();
      Complex complex9 = complex4.sqrt1z();
      complex9.sqrt();
      Complex complex10 = complex3.multiply(0.0);
      complex10.INF.pow(complex8);
      Complex complex11 = complex6.multiply(0.0);
      Complex complex12 = complex11.NaN.tan();
      complex12.NaN.tan();
      try { 
        complex0.nthRoot((-358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -358
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2.010216236114502);
      complex0.toString();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      complex2.NaN.abs();
      Complex complex4 = complex3.sin();
      complex4.multiply(7822);
      Complex complex5 = complex0.ZERO.multiply(complex3);
      Complex complex6 = complex5.INF.subtract(1.0);
      Complex complex7 = complex2.add(2.010216236114502);
      complex7.pow(Double.NaN);
      Complex complex8 = complex5.INF.sqrt();
      Complex complex9 = complex7.subtract(complex0);
      complex9.INF.acos();
      complex1.getField();
      Complex complex10 = complex7.pow(complex2);
      Complex complex11 = complex6.add(1.0);
      Complex complex12 = complex3.pow(complex2);
      complex9.getArgument();
      complex1.multiply(complex12);
      complex1.conjugate();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex13.cos();
      complex14.ZERO.atan();
      Complex complex15 = new Complex(0.0);
      complex8.pow(complex15);
      complex11.readResolve();
      complex10.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-351.884));
      complex0.ONE.toString();
      Complex complex1 = complex0.ONE.acos();
      complex1.ONE.atan();
      Complex complex2 = complex1.ONE.multiply(0.0);
      complex2.ZERO.sinh();
      Complex complex3 = Complex.valueOf((-351.884));
      complex0.ZERO.sinh();
      complex0.readResolve();
      complex0.createComplex(0.0, 3939.387615657);
      complex3.I.createComplex((-3325.0019651857), 3939.387615657);
      complex3.equals(";>T)JPo");
      complex3.tan();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.INF.sinh();
      complex0.ONE.getArgument();
      complex0.ZERO.getField();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex4.negate();
      complex5.abs();
      complex5.I.pow(1.3594057956219485E-8);
      complex5.NaN.subtract(complex2);
      Complex complex6 = complex1.I.subtract(complex2);
      complex1.abs();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex1.conjugate();
      complex3.readResolve();
      complex6.subtract(complex3);
      Complex complex9 = complex8.INF.log();
      complex4.hashCode();
      complex8.tan();
      Complex complex10 = complex2.pow(20.0);
      complex3.log();
      complex10.multiply(complex0);
      complex3.add(Double.NaN);
      Complex complex11 = complex6.tanh();
      complex0.sqrt();
      complex9.isInfinite();
      Complex complex12 = complex0.tanh();
      complex6.acos();
      complex12.multiply((-79.5169411979119));
      complex7.negate();
      complex2.divide(complex11);
      complex9.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2755.979524689);
      complex0.I.toString();
      Complex complex1 = complex0.NaN.createComplex(2755.979524689, 0.0);
      complex0.equals("");
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.asin();
      complex0.equals(object0);
      Complex complex3 = complex0.createComplex(2.0, 2755.979524689);
      Complex complex4 = complex3.add(complex2);
      complex3.reciprocal();
      complex0.negate();
      complex4.INF.sqrt1z();
      complex1.cosh();
      Complex complex5 = complex4.multiply(complex1);
      complex5.NaN.abs();
      Complex complex6 = complex4.atan();
      complex6.subtract(Double.NaN);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      complex0.getField();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex1.divide(Double.NaN);
      complex3.sin();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ONE.sin();
      complex5.reciprocal();
      complex3.ONE.hashCode();
      Complex complex6 = complex0.subtract(239.585882);
      complex1.tan();
      complex6.sqrt();
      Complex complex7 = complex6.cos();
      complex7.I.divide(complex0);
      complex6.sinh();
      complex2.getImaginary();
      complex6.multiply((-4305));
      complex0.sinh();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4533658027648926);
      Complex complex1 = complex0.I.sinh();
      complex0.sqrt1z();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex.valueOf((-1188.41896932253), (-1546.885298436));
      Complex complex2 = complex0.ONE.pow(complex1);
      complex1.INF.toString();
      complex1.NaN.createComplex(2.0, 2.0);
      Complex complex3 = Complex.valueOf(0.0, 3170.6359706);
      complex3.I.divide(967.0);
      Object object0 = complex0.readResolve();
      complex0.I.abs();
      Complex complex4 = complex0.ZERO.negate();
      complex0.equals(object0);
      Complex complex5 = complex0.tanh();
      complex5.hashCode();
      complex5.createComplex(1.0, 1.0);
      Complex complex6 = complex5.multiply(complex2);
      complex0.negate();
      complex6.multiply(3170.6359706);
      complex4.add(2.0);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-6.950808333865794E-9), 0.0);
      Complex complex1 = complex0.ONE.sinh();
      complex0.ONE.toString();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.conjugate();
      complex4.I.cos();
      complex2.INF.pow((-6.950808333865794E-9));
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.multiply(2007);
      complex2.INF.abs();
      complex2.getArgument();
      complex0.abs();
      complex6.NaN.exp();
      Complex complex7 = complex0.divide((-6.950808333865794E-9));
      complex1.ZERO.subtract(complex0);
      complex0.abs();
      complex1.exp();
      complex7.I.nthRoot(1);
      complex1.ZERO.divide(complex5);
      complex7.add(0.0);
      complex2.getArgument();
      Complex complex8 = complex6.multiply(complex2);
      Complex.valueOf((-6.950808333865794E-9));
      complex8.asin();
      complex2.exp();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(1482.720491, 1066.09165);
      Complex complex1 = complex0.pow(1419.744944345);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = complex0.pow(complex3);
      complex3.NaN.asin();
      complex5.add(0.0);
      Complex complex6 = complex3.divide(0.0);
      Complex complex7 = complex4.reciprocal();
      complex7.NaN.subtract(complex0);
      complex6.abs();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1020.6, 1020.6);
      Complex complex2 = complex1.NaN.atan();
      complex0.I.multiply(complex1);
      complex0.I.atan();
      complex0.I.subtract(complex2);
      Complex complex3 = complex0.sinh();
      complex0.INF.multiply(complex3);
      Complex complex4 = complex0.reciprocal();
      Object object0 = complex1.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2592.78634079, 2592.78634079);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply((-567.52));
      Complex.valueOf(2733.20759152, (-945.372113));
      complex1.ONE.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.sqrt1z();
      complex3.ZERO.sin();
      complex4.INF.multiply(1793.1984380262204);
      complex3.ZERO.atan();
      complex0.exp();
      Complex complex5 = complex2.tan();
      complex5.NaN.log();
      try { 
        complex3.nthRoot((-2269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,269
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3015.18000711719);
      Complex complex1 = complex0.subtract(0.0);
      complex1.ONE.divide(complex0);
      Complex complex2 = complex1.NaN.pow(0.0);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = Complex.valueOf(2.0, (-1463.498319));
      Complex complex5 = complex2.ZERO.divide(complex4);
      complex5.INF.atan();
      Complex complex6 = Complex.valueOf(3015.18000711719, 3015.18000711719);
      Complex.valueOf(0.0);
      complex3.sinh();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex0.getField();
      complex0.multiply((-1391.8010635416));
      complex1.createComplex(0.48008447885513306, (-1391.8010635416));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex.valueOf(1667.54559688);
      complex0.NaN.readResolve();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      complex2.nthRoot(1535);
      Complex complex3 = complex0.INF.multiply((-104.0476823));
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.I.sin();
      complex5.NaN.divide(complex4);
      Complex complex6 = complex0.multiply(0);
      complex0.pow(complex1);
      complex6.ONE.negate();
      complex0.nthRoot(17);
      Complex complex7 = complex0.subtract(1207.702937);
      complex7.reciprocal();
      Complex.valueOf((double) 1535, 4398.1875);
      Complex complex8 = complex7.sin();
      complex8.NaN.log();
      Complex complex9 = Complex.ZERO;
      complex3.multiply(complex9);
      complex0.acos();
      complex6.subtract(complex1);
      complex1.divide((-299.792));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.multiply((-512));
      Complex complex1 = new Complex((-2.35387025694381E-8), (-109.34));
      complex0.INF.divide(complex1);
      complex0.getReal();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-154.139047386), (-154.139047386));
      Complex complex1 = complex0.exp();
      complex0.getArgument();
      complex0.subtract(418.5926802646317);
      complex1.asin();
      complex0.tan();
      try { 
        complex0.nthRoot((-542));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -542
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex2.reciprocal();
      complex1.I.pow(complex2);
      complex4.INF.subtract((-1616.426));
      complex0.hashCode();
      Complex complex5 = complex1.multiply(complex0);
      complex5.ONE.add((-1616.426));
      complex0.equals("ApC#F(SzF/+'4:pxU:");
      complex3.negate();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.conjugate();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1509.6413));
      Complex complex1 = complex0.I.subtract((-1509.6413));
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.NaN.pow(complex1);
      complex3.subtract(2151.415334143221);
      Complex complex4 = complex0.cosh();
      complex0.NaN.toString();
      complex4.NaN.subtract(2151.415334143221);
      complex4.readResolve();
      Complex complex5 = complex4.INF.sinh();
      complex0.getImaginary();
      complex0.multiply((-1509.6413));
      complex1.asin();
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1103.1759531165, 1103.1759531165);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.NaN.pow(1103.1759531165);
      Complex complex7 = complex6.I.tan();
      complex5.ONE.toString();
      complex0.add(1103.1759531165);
      complex0.equals(complex6);
      Complex complex8 = complex7.add(complex6);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex8.ONE.sin();
      Complex complex11 = complex9.NaN.negate();
      complex8.subtract(complex4);
      complex0.createComplex(1.5538093219698803E-8, 1.5538093219698803E-8);
      complex2.sinh();
      Complex complex12 = complex7.divide(complex6);
      complex6.NaN.toString();
      complex11.add(1.5538093219698803E-8);
      Complex complex13 = complex12.sqrt1z();
      Complex complex14 = Complex.valueOf(1.5538093219698803E-8);
      complex0.INF.cos();
      complex10.multiply(complex14);
      Complex complex15 = complex3.acos();
      complex11.sin();
      complex5.divide(0.0);
      complex13.getReal();
      complex15.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.subtract(2.0);
      Complex complex2 = complex1.add(complex0);
      complex2.reciprocal();
      complex2.abs();
      complex1.multiply(1086.18808638);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ZERO.multiply(751);
      Complex complex3 = complex1.INF.pow(567.342286189119);
      Complex complex4 = complex0.tanh();
      complex2.ONE.reciprocal();
      complex3.log();
      complex4.getImaginary();
      Complex.valueOf((-1398.88), (-2156.43));
      complex0.ONE.cos();
      complex4.acos();
      complex3.readResolve();
      complex2.createComplex(2097.19154161973, 0.0);
      complex0.sqrt();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1881.0162);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.NaN.subtract(complex1);
      complex0.toString();
      complex0.conjugate();
      Complex complex2 = complex0.subtract((-2890.54005189));
      complex2.NaN.cosh();
      complex2.getField();
      Complex complex3 = complex0.sin();
      int int0 = (-1395);
      try { 
        complex3.nthRoot((-1395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,395
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.toString();
      Complex complex1 = complex0.exp();
      complex0.I.hashCode();
      complex1.NaN.sqrt1z();
      complex0.abs();
      Complex complex2 = complex0.subtract(1.0);
      complex2.cosh();
      complex1.add(complex2);
      complex2.sqrt1z();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(2501.854, 2501.854);
      Complex complex1 = complex0.createComplex(2501.854, 0.0);
      complex0.ZERO.toString();
      complex1.NaN.hashCode();
      Complex complex2 = complex1.multiply(6927);
      Complex complex3 = complex2.ONE.cos();
      complex3.I.sqrt();
      complex3.I.createComplex(2501.854, 3036.79);
      Complex complex4 = complex2.I.atan();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.I.log();
      complex6.INF.divide(0.0);
      Complex complex7 = complex6.I.exp();
      Complex complex8 = complex7.add(complex0);
      complex2.I.sqrt();
      Complex complex9 = complex0.subtract((-795.220763));
      complex1.abs();
      Complex complex10 = complex1.acos();
      complex10.INF.hashCode();
      Complex complex11 = complex10.pow(complex9);
      complex1.getArgument();
      complex3.sqrt();
      complex6.isInfinite();
      complex11.getField();
      complex6.acos();
      complex0.add(0.0);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-1971.855801755), (-1971.855801755));
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.I.cosh();
      Complex complex2 = complex0.cos();
      complex0.getReal();
      Complex complex3 = complex0.negate();
      complex0.I.conjugate();
      Complex complex4 = new Complex((-118.873088703604));
      complex3.equals(complex4);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ONE.exp();
      complex5.I.readResolve();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.I.cosh();
      complex3.negate();
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = complex3.INF.multiply(1);
      complex9.createComplex(0.0, (-118.873088703604));
      assertFalse(complex9.equals((Object)complex6));
      
      Complex complex11 = complex0.multiply(0.0);
      Complex complex12 = complex7.I.divide(complex0);
      assertEquals((-2.5356823737059667E-4), complex12.getReal(), 0.01);
      
      Complex complex13 = complex8.sinh();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex11.atan();
      String string0 = complex11.toString();
      assertEquals("(-0.0, -0.0)", string0);
      
      Complex complex15 = complex8.tanh();
      assertEquals(0.4932167668855039, complex15.getReal(), 0.01);
      assertTrue(complex7.equals((Object)complex5));
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      
      complex2.getReal();
      Complex complex16 = complex0.cos();
      assertTrue(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex12));
      assertTrue(complex16.isInfinite());
      
      complex1.createComplex(0.0, 0.0);
      double double0 = complex14.getArgument();
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
