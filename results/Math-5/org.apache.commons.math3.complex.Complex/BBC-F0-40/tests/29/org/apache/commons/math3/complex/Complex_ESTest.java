/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:26:42 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1349, Double.POSITIVE_INFINITY);
      complex0.multiply(163);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1908.0475), 6.283185307179586);
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(4.824178782284534E-4);
      complex0.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ZERO.log();
      complex1.conjugate();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.ZERO.subtract(4.824178782284534E-4);
      complex6.ZERO.sqrt1z();
      complex3.I.divide(complex6);
      Complex complex9 = complex3.acos();
      complex9.INF.getArgument();
      complex9.multiply(0.7853981633974483);
      Complex complex10 = complex5.subtract(0.24859806895256042);
      complex5.toString();
      complex5.ONE.exp();
      Complex.valueOf((-665.3067361), (-1908.0475));
      Complex complex11 = complex7.cosh();
      complex11.I.tan();
      complex10.divide(complex9);
      Complex complex12 = complex4.conjugate();
      complex12.cos();
      Complex complex13 = complex12.NaN.add(complex1);
      complex13.I.exp();
      complex12.ONE.tanh();
      complex2.getField();
      complex8.cos();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.acos();
      complex2.subtract(2.3900289095512176E-221);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(20.0);
      complex1.acos();
      Complex complex2 = new Complex(2.0, 20.0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1.1413677466646359E297, 941.4274341814391);
      complex1.ZERO.pow(complex0);
      complex1.acos();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add(Double.NaN);
      complex1.readResolve();
      complex0.I.getField();
      complex2.ZERO.subtract(complex0);
      Complex complex3 = complex1.acos();
      complex2.INF.sqrt1z();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(1.023714303970337, (-3945.735991));
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.I.asin();
      complex8.ONE.subtract(complex4);
      Complex complex9 = complex3.asin();
      Complex complex10 = complex0.atan();
      complex10.NaN.toString();
      complex10.INF.pow(complex9);
      complex1.toString();
      // Undeclared exception!
      complex6.nthRoot(1521918453);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(2760.8681925571204);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.ZERO.sinh();
      complex3.NaN.divide(complex1);
      complex2.ZERO.getField();
      Complex complex4 = complex0.sqrt();
      complex0.INF.nthRoot(2052337775);
      Complex complex5 = Complex.valueOf(2760.8681925571204);
      complex0.isInfinite();
      complex1.INF.getField();
      Complex complex6 = Complex.valueOf((-95.959845137026), Double.POSITIVE_INFINITY);
      complex6.I.getArgument();
      Complex complex7 = complex6.multiply(complex0);
      complex7.ZERO.getField();
      Complex complex8 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex4.cosh();
      complex8.multiply(1471);
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.sinh();
      complex10.I.hashCode();
      Complex.valueOf(6.51925802230835E-8);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex9.tanh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(3.847174961282827E30);
      Complex complex2 = complex1.I.divide((-289.65509869));
      complex0.reciprocal();
      complex1.asin();
      complex2.sqrt1z();
      complex2.sqrt();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.toString();
      Complex complex1 = complex0.multiply((-3017));
      complex1.sqrt();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2760.8681925571204);
      Complex complex1 = complex0.subtract(2760.8681925571204);
      Complex complex2 = complex0.multiply(2760.8681925571204);
      Complex complex3 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.add((-2696.9096140388));
      complex5.ONE.createComplex(7622392.176673621, Double.POSITIVE_INFINITY);
      complex5.ONE.divide(6.283185307179586);
      complex1.exp();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex1.sqrt1z();
      complex7.negate();
      complex6.pow((-2015.8367764803));
      complex0.divide(2760.8681925571204);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2760.8681925571204);
      complex0.subtract(2760.8681925571204);
      complex0.multiply(2760.8681925571204);
      Complex complex1 = new Complex(1.1939472158143478E10, 5.4557485189210095E73);
      Complex complex2 = Complex.valueOf(5.4557485189210095E73);
      complex2.acos();
      complex0.subtract(complex2);
      Complex complex3 = Complex.valueOf(4591.625213373, 1037.2);
      complex3.pow((-1.1280279720721984E7));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(7, Double.POSITIVE_INFINITY);
      complex0.subtract(complex1);
      complex0.hashCode();
      complex1.acos();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.atan();
      complex4.getArgument();
      Complex complex5 = new Complex((-20.0), (-20.0));
      Complex complex6 = complex5.subtract(complex0);
      complex6.tan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex(20.0);
      complex1.acos();
      complex8.subtract(896.960923521);
      complex5.multiply(1.3144752979278564);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(2760.8681925571204);
      Complex complex1 = complex0.acos();
      Complex.valueOf(2760.8681925571204);
      Complex complex2 = complex0.pow(2760.8681925571204);
      Complex complex3 = complex1.acos();
      complex3.subtract(Double.NaN);
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2760.8681925571204);
      Complex complex1 = complex0.subtract(2760.8681925571204);
      Complex complex2 = complex0.multiply(2760.8681925571204);
      Complex complex3 = Complex.I;
      complex0.atan();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf((-20.0), (-20.0));
      complex2.subtract(complex1);
      complex2.hashCode();
      complex2.acos();
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2737.577442462102);
      Complex complex1 = complex0.multiply(2737.577442462102);
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = new Complex((-20.0), Double.NaN);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.ONE;
      complex6.NaN.divide(Double.NaN);
      complex0.I.pow(complex2);
      Complex complex7 = new Complex(Double.NaN);
      Complex.valueOf(2477.3937975, (-20.0));
      complex3.subtract(complex4);
      complex3.hashCode();
      Complex complex8 = complex0.acos();
      complex8.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.tanh();
      Complex complex2 = complex1.createComplex(1.1939472148814518E10, (-3358.6129161786394));
      complex2.asin();
      Complex.valueOf((-216.885971), 1.482270895394322E-4);
      complex2.acos();
      complex0.ZERO.divide(770.03);
      complex2.nthRoot(1433);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-1709.1175));
      complex1.createComplex(2.864122672853628E-291, (-2272.71718959296));
      complex1.getArgument();
      Complex complex2 = complex0.INF.divide(438.9186794);
      complex0.I.pow(Double.NaN);
      complex0.isInfinite();
      complex0.getArgument();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.tanh();
      complex4.ONE.cos();
      complex3.ONE.conjugate();
      complex3.I.sin();
      Complex.valueOf(2.864122672853628E-291, Double.NaN);
      complex0.abs();
      complex2.subtract(complex3);
      Complex.valueOf(2.575620466387945E-150, 0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.49427220981466), (-0.49427220981466));
      Complex complex1 = complex0.add((-0.49427220981466));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.add((-2696.9096140388));
      complex3.exp();
      complex2.tanh();
      complex2.sqrt1z();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      complex1.ONE.add(1084.40821199);
      Complex complex2 = complex0.multiply(1106.0);
      Complex complex3 = complex2.pow((-255.103658125));
      complex3.createComplex((-255.103658125), Double.NaN);
      Complex complex4 = complex1.conjugate();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.3322466643868711, 0.3322466643868711);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex3.tanh();
      complex3.getField();
      complex2.pow(complex4);
      Complex complex5 = complex0.multiply(1686.5445967419519);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.add(1168.3);
      complex5.atan();
      complex5.add(797.5);
      complex7.exp();
      Complex complex8 = new Complex(0.3322466643868711, 1.8380461271305958E74);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-3.6870882345139385E-8));
      complex1.multiply(Double.NaN);
      complex1.add(797.5);
      Complex complex2 = Complex.NaN;
      complex2.atan();
      complex0.add(1602.6092);
      complex0.exp();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-3740.016), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ONE;
      complex2.add(complex0);
      Complex complex3 = Complex.ONE;
      complex3.ONE.toString();
      complex3.sqrt();
      Complex complex4 = complex1.createComplex(106.44227709, 0.7615941559557649);
      complex4.multiply((-1881));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-600.4809), (-600.4809));
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(622.164495878, (-600.4809));
      Complex complex3 = complex1.add(complex2);
      complex0.readResolve();
      Complex complex4 = complex3.divide(0.3322466643868711);
      Complex complex5 = complex3.tanh();
      complex5.subtract(complex4);
      complex0.tan();
      complex0.subtract(complex3);
      complex2.multiply((-600.4809));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-983.349179563737));
      complex0.getImaginary();
      Complex complex1 = complex0.cosh();
      complex1.I.exp();
      try { 
        complex0.nthRoot((-1554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,554
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.3322466643868711, 0.3322466643868711);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = (Complex)complex1.readResolve();
      complex2.divide(0.3322466643868711);
      complex3.tanh();
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex4.tan();
      complex2.subtract(complex0);
      complex5.multiply((double) 2192);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.readResolve();
      complex2.divide(0.0);
      complex2.nthRoot(2192);
      Complex complex3 = complex1.multiply(2198);
      complex3.divide(0.0);
      complex2.negate();
      complex2.negate();
      complex1.conjugate();
      int int0 = 3921;
      // Undeclared exception!
      complex3.nthRoot(3921);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex.valueOf(2760.8681925571204);
      Complex complex0 = Complex.valueOf(2760.8681925571204);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-1228.29581), (-4.983751545631554E270));
      Complex complex1 = complex0.tanh();
      complex1.NaN.divide(complex0);
      complex1.createComplex(1.0355627827142423E7, 1.0355627827142423E7);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.log();
      complex0.INF.atan();
      Complex complex1 = new Complex(1, (-3098.4014378));
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex1.acos();
      complex3.log();
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.ZERO;
      complex5.divide(20.0);
      Complex complex6 = complex1.multiply(complex5);
      complex6.NaN.toString();
      complex2.createComplex(20.0, 1);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 7.2831502374676964E-9);
      Complex complex1 = Complex.ONE;
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.equals(complex2);
      Complex complex3 = complex2.conjugate();
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
      complex0.isInfinite();
      complex0.ONE.cosh();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = (-1678.5190307447);
      Complex complex0 = new Complex((-1678.5190307447));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-518.6), (-518.6));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-976.87), (-2.356194490192345));
      Complex complex2 = complex1.asin();
      complex2.abs();
      complex1.pow(complex2);
      complex2.equals("NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS");
      Complex complex3 = new Complex((-976.87), (-2.909443297645926E-8));
      complex3.readResolve();
      Complex complex4 = new Complex(1276.35759966);
      Object object0 = complex4.readResolve();
      complex2.equals(object0);
      Complex complex5 = new Complex(2079.8477460910085);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(1.9502718448638916, 641.135404804639);
      Complex complex3 = complex1.asin();
      complex1.abs();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = Complex.ONE;
      complex3.equals(complex5);
      complex0.ONE.cos();
      complex4.readResolve();
      complex5.equals(complex0);
      complex2.cos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-518.6), (-518.6));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract((-518.6));
      complex1.abs();
      complex1.sqrt1z();
      Complex complex3 = Complex.INF;
      complex3.pow((-919.63));
      complex0.getReal();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf(0.0, 8.731788851360042);
      complex4.divide(complex5);
      complex1.hashCode();
      Complex complex6 = new Complex((-518.6));
      complex6.sqrt();
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract((-518.6));
      complex1.abs();
      Complex complex3 = complex1.sqrt1z();
      complex0.getReal();
      Complex complex4 = Complex.INF;
      complex1.divide(complex4);
      complex1.sqrt();
      complex3.divide(0.0);
      complex4.sqrt();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-507.8090994654466), (-507.8090994654466));
      Complex complex1 = Complex.ZERO;
      complex1.subtract((-507.8090994654466));
      complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.tan();
      complex6.sinh();
      complex5.getField();
      complex4.sqrt1z();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-1450.1261426511246), 1052.50695);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex0.tan();
      complex1.subtract(complex0);
      complex2.pow(1052.50695);
      Complex complex3 = complex0.sin();
      complex3.negate();
      Complex complex4 = complex0.pow((-3529.938762));
      Complex complex5 = Complex.I;
      complex5.divide(complex0);
      complex2.asin();
      complex3.cos();
      complex1.divide(0.0);
      complex4.sinh();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.INF;
      complex1.equals(complex3);
      complex3.asin();
      Complex complex4 = complex3.add(complex2);
      complex3.divide(complex4);
      Complex complex5 = complex4.atan();
      complex3.hashCode();
      Complex complex6 = Complex.valueOf(1000.34292443372, 0.0);
      complex3.reciprocal();
      complex6.tanh();
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.log();
      complex0.multiply(1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.sinh();
      complex2.cos();
      complex1.divide(Double.NaN);
      Complex complex6 = Complex.I;
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.asin();
      complex0.equals(complex1);
      Complex complex2 = complex0.pow((-1.5244786353347242E7));
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2760.8681925571204, 2760.8681925571204);
      complex0.toString();
      Complex complex1 = complex0.cos();
      complex1.abs();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = new Complex((-0.6375086197430982), 0.7853981633974483);
      Complex complex7 = complex6.acos();
      complex7.cos();
      complex0.hashCode();
      Complex complex8 = complex7.cosh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.subtract((-518.6));
      complex2.abs();
      complex0.sqrt1z();
      complex10.pow(3.7179924024793253E227);
      complex9.getReal();
      Complex complex11 = Complex.INF;
      complex1.divide(complex9);
      complex3.hashCode();
      Complex complex12 = complex5.sqrt();
      complex12.divide(2.7863408476569926);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cos();
      complex0.hashCode();
      complex0.cosh();
      Complex complex3 = Complex.ZERO;
      complex0.subtract(1683.02092842);
      complex2.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.pow(0.8581697864142075);
      complex0.getReal();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.I;
      complex5.divide(complex7);
      complex7.hashCode();
      complex4.sqrt();
      complex6.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-377756.7444));
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex1.I.toString();
      Complex complex2 = complex0.ZERO.cos();
      complex0.I.abs();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.add((-377756.7444));
      complex2.getArgument();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex2.subtract(complex1);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.sin();
      Complex complex12 = Complex.ONE;
      complex0.sinh();
      Complex complex13 = new Complex(Double.NaN, 0.0);
      complex3.multiply(complex13);
      Complex complex14 = complex7.atan();
      Complex complex15 = complex13.sqrt();
      complex15.atan();
      complex8.nthRoot(906);
      complex14.log();
      complex9.sin();
      complex0.abs();
      Complex complex16 = complex11.sinh();
      complex12.subtract(377756.7444);
      complex16.atan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.acos();
      complex1.subtract(complex2);
      Complex.valueOf(6.283185307179586);
      complex0.multiply((-75.8));
      complex2.sin();
      Complex complex3 = Complex.valueOf((-20.0), 0.0);
      complex3.negate();
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = new Complex(6.283185307179586);
      complex6.asin();
      complex1.cos();
      Complex complex7 = complex5.divide((-232.1550261));
      Complex complex8 = new Complex(2842.212, (-123.4819530789652));
      complex8.sinh();
      Complex complex9 = Complex.I;
      complex7.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-20.0));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.asin();
      complex6.readResolve();
      Complex complex7 = complex1.createComplex(7.244097139468458E-4, 2.0);
      complex4.readResolve();
      complex7.nthRoot(1291);
      complex2.readResolve();
      Complex complex8 = complex5.cos();
      complex3.abs();
      Complex complex9 = complex8.tanh();
      complex5.reciprocal();
      complex9.sin();
      Complex.valueOf(3.141592653589793);
      Complex complex10 = complex0.tanh();
      complex10.sqrt1z();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.getArgument();
      Complex complex1 = complex0.I.add((-20.0));
      Complex complex2 = complex1.INF.divide(0.0);
      complex0.toString();
      complex0.getReal();
      complex0.getReal();
      Complex complex3 = Complex.valueOf((-1276.8907311892451), (-20.0));
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.ZERO.multiply((-1329));
      complex6.ONE.subtract(complex4);
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sinh();
      complex7.multiply(complex8);
      complex9.ZERO.atan();
      complex1.sqrt();
      Complex complex10 = complex9.atan();
      complex7.I.nthRoot(1306);
      Complex complex11 = complex4.log();
      complex11.I.sin();
      complex5.abs();
      complex3.sinh();
      complex10.multiply((-518.6));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2760.8681925571204);
      complex0.subtract(2760.8681925571204);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-518.6), (-518.6));
      Complex complex1 = complex0.ONE.tanh();
      Complex.valueOf(1.291561142865928E207, (-518.6));
      Complex complex2 = Complex.ONE;
      complex2.sqrt1z();
      complex0.pow((double) 2699);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.ZERO.getField();
      Complex complex3 = complex1.ZERO.divide((-1006.7983650059758));
      complex0.getField();
      complex1.sin();
      Complex complex4 = complex2.add(complex0);
      complex4.readResolve();
      complex3.I.acos();
      complex1.getArgument();
      complex0.abs();
      complex1.ONE.multiply((-2357));
      Complex complex5 = complex0.createComplex((-20.0), 20.0);
      complex3.cos();
      complex4.getField();
      complex5.conjugate();
      complex1.acos();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1245.3463315654128));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-1245.3463315654128));
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.asin();
      complex0.ZERO.readResolve();
      Complex complex7 = complex4.createComplex((-1245.3463315654128), (-1245.3463315654128));
      complex0.NaN.readResolve();
      complex6.nthRoot(1);
      complex4.NaN.readResolve();
      Complex complex8 = complex0.ONE.cos();
      complex4.abs();
      complex4.tanh();
      Complex complex9 = complex3.reciprocal();
      complex8.sin();
      Complex.valueOf(0.0);
      complex8.tanh();
      complex9.sqrt1z();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-456.6), 1.07);
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.tanh();
      complex0.multiply((-1590));
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.multiply((-1590));
      Complex complex6 = complex0.cos();
      complex4.hashCode();
      Complex complex7 = complex4.add(1.07);
      Complex complex8 = complex3.cosh();
      Complex complex9 = new Complex((-910));
      complex5.NaN.readResolve();
      complex9.subtract(1.07);
      complex7.abs();
      complex5.sqrt1z();
      complex1.pow(20.0);
      complex6.getReal();
      Complex complex10 = Complex.INF;
      complex7.divide(complex4);
      complex8.hashCode();
      Complex complex11 = Complex.valueOf(6.533522495226226E-9, 6.283185307179586);
      complex11.negate();
      complex6.sqrt();
      complex11.divide(369.325632);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0));
      complex0.getArgument();
      Complex complex1 = complex0.I.add((-20.0));
      complex1.INF.divide(0.0);
      complex0.toString();
      complex0.getReal();
      complex0.getReal();
      Complex.valueOf((-1276.8907311892451), (-20.0));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ZERO.multiply((-1329));
      complex3.ONE.subtract(complex2);
      complex1.sin();
      Complex complex4 = Complex.ONE;
      complex4.sinh();
      complex1.multiply(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.atan();
      complex2.sqrt();
      complex6.atan();
      try { 
        complex1.nthRoot((-2147473347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,147,473,347
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(2760.8681925571204);
      complex0.reciprocal();
      complex0.sin();
      Complex.valueOf(2129.1363);
      complex1.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.I;
      complex2.INF.multiply(complex3);
      complex0.reciprocal();
      complex3.NaN.getArgument();
      complex3.getImaginary();
      complex2.add(1.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1114.266101951319));
      Complex complex1 = complex0.multiply((-1560));
      Complex complex2 = complex1.subtract(20.0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.tan();
      complex4.subtract(complex2);
      Complex complex7 = Complex.ZERO;
      complex7.pow((-2436.3));
      complex4.add(1734.0);
      complex6.atan();
      complex7.add((double) (-1560));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.exp();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex2.acos();
      complex11.add(20.0);
      complex2.sqrt1z();
      complex0.sinh();
      complex8.toString();
      Complex complex13 = Complex.valueOf((double) (-1560));
      Complex complex14 = complex12.negate();
      complex2.readResolve();
      complex12.getArgument();
      complex10.cos();
      complex9.exp();
      complex13.atan();
      complex2.pow(complex10);
      complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1114.266101951319));
      Complex complex1 = complex0.createComplex(1734.0, 326.9438);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.pow((-1114.266101951319));
      Complex complex5 = complex3.multiply(4880);
      Complex complex6 = complex4.multiply(80);
      complex0.subtract(complex6);
      complex1.sin();
      Complex complex7 = Complex.ONE;
      complex1.sinh();
      Complex complex8 = complex6.multiply(complex2);
      complex8.atan();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = Complex.valueOf((double) 80);
      complex10.atan();
      complex5.nthRoot(1409);
      complex1.log();
      complex9.sin();
      complex1.abs();
      Complex complex11 = Complex.INF;
      complex11.sinh();
      complex5.subtract(456.6);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex1.I.toString();
      Complex complex2 = complex0.ZERO.cos();
      complex0.I.abs();
      complex0.INF.negate();
      Complex complex3 = complex0.add(0.0);
      complex2.getArgument();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.acos();
      complex5.cos();
      complex2.hashCode();
      Complex complex7 = complex3.cosh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.subtract(2768.65264863802);
      complex0.abs();
      Complex complex10 = complex7.sqrt1z();
      complex10.pow((-919.63));
      complex10.getReal();
      Complex complex11 = Complex.INF;
      complex9.divide(complex0);
      complex8.hashCode();
      complex4.sqrt();
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1245.3463315654128));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-1245.3463315654128));
      complex2.I.conjugate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ONE.asin();
      complex0.ZERO.readResolve();
      Complex complex6 = complex3.createComplex((-1245.3463315654128), (-1245.3463315654128));
      complex0.NaN.readResolve();
      complex5.nthRoot(1);
      Complex complex7 = (Complex)complex3.NaN.readResolve();
      complex0.ONE.cos();
      complex3.abs();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.INF.multiply(1563);
      Complex complex10 = Complex.I;
      complex10.tanh();
      Complex complex11 = (Complex)complex6.readResolve();
      complex4.equals(complex11);
      Complex complex12 = complex7.asin();
      complex10.add(complex8);
      complex8.divide(complex3);
      Complex complex13 = complex4.atan();
      complex13.hashCode();
      Complex.valueOf(795.046, 3.2890822778013065);
      complex12.reciprocal();
      Complex complex14 = complex9.tanh();
      Complex complex15 = Complex.valueOf(795.046, (double) 1);
      complex15.pow(complex14);
      Complex complex16 = complex15.acos();
      Complex complex17 = complex16.multiply(complex1);
      complex17.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-456.6), 1.07);
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.multiply(180);
      Complex.valueOf((double) 1, 3.1392492500826754);
      complex4.sqrt1z();
      Complex complex5 = complex1.pow(8.468072777056227E-9);
      complex3.negate();
      complex5.toString();
      Complex.valueOf(1.4074742794036865, 1904.8);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1114.266101951319));
      Complex complex1 = complex0.createComplex(1734.0, 326.9438);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.cosh();
      complex3.pow((-1114.266101951319));
      complex3.multiply(4880);
      Complex complex4 = complex0.sqrt();
      complex4.ONE.negate();
      complex4.INF.exp();
      complex4.equals((Object) null);
      complex4.readResolve();
      Complex complex5 = complex2.divide(Double.POSITIVE_INFINITY);
      complex5.INF.nthRoot(1774);
      Complex complex6 = Complex.ONE;
      complex6.log();
      complex3.sinh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract((-5806475.03450042));
      Complex complex1 = complex0.reciprocal();
      complex1.sin();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.tanh();
      complex1.sqrt1z();
      complex3.reciprocal();
      Complex.valueOf(0.0, (-5806475.03450042));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.ZERO.acos();
      complex3.ONE.asin();
      Complex complex4 = complex2.ZERO.cosh();
      complex4.INF.add((-6056.91464));
      complex0.isInfinite();
      complex0.tanh();
      complex0.getImaginary();
      complex0.asin();
      complex1.reciprocal();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2409.66305414272);
      Complex complex1 = complex0.atan();
      complex1.INF.asin();
      Complex complex2 = complex0.pow(0.0);
      complex2.cos();
      complex2.ZERO.abs();
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex3.I.pow(0.0);
      complex1.NaN.sqrt();
      Complex complex5 = complex0.I.add(0.0);
      complex5.ONE.conjugate();
      Complex complex6 = complex5.NaN.tanh();
      complex3.tanh();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.sqrt();
      complex8.NaN.sqrt();
      complex2.ZERO.acos();
      Complex complex9 = complex0.reciprocal();
      Complex.valueOf(19.923551, 0.0);
      complex1.multiply(complex6);
      complex3.log();
      complex9.add(19.923551);
      complex4.divide(1658.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.readResolve();
      Complex complex1 = complex0.multiply(1.0);
      complex1.ONE.multiply(2.0);
      Complex complex2 = complex1.INF.sinh();
      complex2.ZERO.acos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.pow(complex0);
      complex4.ZERO.sqrt1z();
      Complex complex5 = complex3.ONE.negate();
      complex5.ZERO.multiply(2.0);
      Complex complex6 = complex1.I.reciprocal();
      Complex complex7 = complex6.ONE.log();
      complex6.ONE.add(2.0);
      Complex complex8 = complex7.ONE.divide(1.0);
      complex8.cos();
      complex3.ZERO.asin();
      Complex complex9 = complex0.add(complex1);
      complex9.ONE.readResolve();
      complex3.exp();
      complex3.getReal();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1288.2549863534248));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.sinh();
      complex2.getField();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex0.pow((-1288.2549863534248));
      complex7.ZERO.add((-1288.2549863534248));
      complex7.getField();
      Complex complex8 = complex1.divide(complex2);
      complex4.INF.subtract((-1288.2549863534248));
      complex0.subtract(complex8);
      Complex complex9 = complex5.conjugate();
      Complex complex10 = Complex.valueOf((-1288.2549863534248), (-1288.2549863534248));
      Complex complex11 = complex8.pow(complex1);
      Complex complex12 = Complex.valueOf((-1288.2549863534248), 0.0);
      Complex complex13 = complex12.I.add(complex3);
      complex13.ZERO.cos();
      complex6.conjugate();
      complex5.add(complex1);
      Complex complex14 = complex8.pow(complex11);
      complex14.cos();
      complex10.multiply(complex1);
      complex14.subtract(0.0);
      Complex complex15 = complex12.pow(complex9);
      complex15.sinh();
      complex0.toString();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1078.5979740344));
      Complex complex1 = complex0.sinh();
      complex1.NaN.divide(1409.0);
      complex0.NaN.pow((-1078.5979740344));
      Complex complex2 = Complex.valueOf((-1078.5979740344), 2.0);
      complex2.cosh();
      Complex complex3 = complex0.sin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf((-775.046), (-775.046));
      complex1.nthRoot(1);
      complex0.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      complex1.sin();
      Complex complex3 = complex2.NaN.subtract(553.91041);
      complex2.abs();
      complex0.hashCode();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = (-2393.770026163894);
      Complex complex0 = Complex.valueOf((-2393.770026163894), (-2393.770026163894));
      complex0.NaN.exp();
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.multiply(188);
      complex1.isInfinite();
      Complex complex3 = Complex.NaN;
      complex0.abs();
      complex1.NaN.readResolve();
      complex0.INF.multiply(0.0);
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      complex0.multiply(2579.0);
      complex2.sinh();
      complex0.multiply((-2203));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex1.I.toString();
      Complex complex2 = complex0.ZERO.cos();
      complex0.I.abs();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.add(0.0);
      complex2.getArgument();
      Complex complex5 = complex4.sqrt();
      complex5.ONE.sqrt();
      Complex complex6 = complex4.tanh();
      complex5.equals(complex6);
      Complex complex7 = complex3.asin();
      complex7.add(complex0);
      complex7.NaN.divide(complex2);
      complex4.atan();
      complex4.hashCode();
      Complex.valueOf(1.0, (-1478.25096319565));
      Complex complex8 = complex0.reciprocal();
      complex8.INF.tanh();
      complex3.pow(complex4);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      complex0.INF.atan();
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.subtract((-3031.2512680366503));
      Complex complex3 = complex1.reciprocal();
      complex3.sin();
      Complex.valueOf(0.0);
      Complex complex4 = complex0.tanh();
      complex4.sqrt1z();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      complex1.asin();
      complex1.INF.toString();
      Complex complex2 = complex0.NaN.multiply(1.994411660450821E-151);
      complex2.I.add(complex0);
      Complex complex3 = complex0.pow(867.89660672);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-212.3085366));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.conjugate();
      complex1.ZERO.sinh();
      Complex complex3 = complex0.acos();
      complex3.NaN.multiply(complex2);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.divide(complex4);
      complex5.reciprocal();
      complex5.I.readResolve();
      Complex complex6 = new Complex((-201.8397586044));
      Complex complex7 = complex0.add(complex6);
      complex7.ONE.add(complex2);
      complex7.ONE.cos();
      Complex complex8 = complex7.pow(20.0);
      complex8.I.sqrt();
      complex6.readResolve();
      complex6.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.add((-212.3085366));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.I.sqrt1z();
      complex4.ONE.cos();
      Complex complex5 = Complex.valueOf(0.0, 768.4284);
      Complex complex6 = complex0.sqrt1z();
      complex6.log();
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex7.NaN.reciprocal();
      complex8.ZERO.pow(complex5);
      Complex complex9 = complex0.subtract(complex5);
      complex5.getReal();
      complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex10 = complex9.cos();
      Complex.valueOf(0.0);
      Complex complex11 = complex0.tanh();
      complex11.ONE.tan();
      complex3.getImaginary();
      complex11.isInfinite();
      Complex.valueOf((-300.0));
      complex2.isNaN();
      complex0.abs();
      complex6.sin();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      complex10.acos();
      complex12.subtract(complex0);
      Complex complex13 = complex8.cos();
      Complex complex14 = Complex.ONE;
      complex14.ZERO.readResolve();
      complex13.pow(complex14);
      complex14.log();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-456.6), 1.07);
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.log();
      complex0.multiply(1);
      complex2.acos();
      Complex complex3 = complex0.log();
      complex3.sinh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.add(complex1);
      complex3.abs();
      complex0.isInfinite();
      complex2.isNaN();
      complex0.getField();
      complex1.reciprocal();
      Complex.valueOf(Double.NaN, (-1.0));
      complex2.pow((-717.88));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.NaN.sqrt();
      complex0.I.toString();
      complex0.NaN.multiply((-0.3058015757857271));
      complex0.ONE.tanh();
      Complex complex4 = complex0.asin();
      complex3.I.getField();
      complex4.nthRoot(1282);
      Complex complex5 = complex4.NaN.divide(complex3);
      complex5.NaN.nthRoot(1282);
      Complex complex6 = complex0.conjugate();
      complex6.INF.nthRoot(5430);
      complex6.I.nthRoot(1);
      Complex complex7 = complex4.tan();
      complex7.getField();
      Complex.valueOf(0.7496520663);
      Complex complex8 = complex3.pow((double) 5430);
      complex8.ONE.add(2.0);
      complex8.getArgument();
      Complex.valueOf(0.7496520663);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.createComplex((-8.0E298), (-8.0E298));
      Complex complex2 = complex1.ONE.pow(2514.449826);
      complex0.getArgument();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.tan();
      complex3.getReal();
      complex3.equals(complex4);
      complex3.add(350.2172111075);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.acos();
      complex0.ZERO.subtract(complex1);
      Complex.valueOf(6.283185307179586);
      Complex complex3 = complex0.multiply((-75.8));
      complex3.ONE.sin();
      Complex complex4 = complex0.negate();
      complex0.pow(0.0);
      Complex complex5 = complex0.divide(complex3);
      complex4.asin();
      Complex complex6 = complex0.cos();
      complex5.divide(0.0);
      Complex complex7 = complex5.sinh();
      complex7.subtract(complex2);
      complex6.multiply(1212);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1245.3463315654128));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-1245.3463315654128));
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.asin();
      complex0.ZERO.readResolve();
      Complex complex7 = complex4.createComplex((-1245.3463315654128), (-1245.3463315654128));
      complex0.NaN.readResolve();
      complex6.nthRoot(1);
      complex4.NaN.readResolve();
      Complex complex8 = complex0.ONE.cos();
      complex4.abs();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.INF.multiply(1563);
      complex10.NaN.acos();
      Complex complex11 = complex6.multiply((-910));
      complex1.cos();
      complex3.hashCode();
      Complex complex12 = complex3.add((-305.2259372929925));
      complex12.cosh();
      complex2.subtract((double) (-910));
      complex11.abs();
      complex9.sqrt1z();
      complex7.pow((-1245.3463315654128));
      complex8.getReal();
      Complex complex13 = Complex.INF;
      complex10.divide(complex13);
      complex11.hashCode();
      complex11.negate();
      complex10.sqrt();
      complex11.divide(3.2890822778013065);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.asin();
      Complex complex1 = complex0.I.cos();
      complex0.reciprocal();
      double double0 = (-4276.844);
      Complex complex2 = complex1.ONE.subtract((-4276.844));
      Complex complex3 = complex2.ZERO.sin();
      complex3.ZERO.getArgument();
      Complex complex4 = complex2.I.sin();
      complex1.ONE.multiply((-4276.844));
      complex4.ZERO.readResolve();
      try { 
        complex4.I.nthRoot((-2308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,308
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.readResolve();
      complex0.abs();
      complex0.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.NaN.sinh();
      complex0.INF.cos();
      complex0.getImaginary();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.subtract(0.0);
      complex0.isNaN();
      Complex complex2 = complex0.add(0.0);
      complex2.ONE.tan();
      Complex complex3 = complex2.I.sqrt();
      complex3.negate();
      complex2.sqrt1z();
      complex1.getArgument();
      complex1.log();
      Complex complex4 = complex1.cosh();
      complex2.asin();
      Complex complex5 = complex4.conjugate();
      complex5.ONE.add(complex3);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1114.266101951319));
      Complex complex1 = complex0.createComplex(1734.0, 326.9438);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.cosh();
      complex3.pow((-1114.266101951319));
      Complex complex4 = complex3.multiply(4880);
      Complex complex5 = complex0.sqrt();
      complex5.ONE.negate();
      complex5.INF.exp();
      complex5.equals((Object) null);
      complex5.readResolve();
      Complex complex6 = complex2.divide(Double.POSITIVE_INFINITY);
      complex6.INF.nthRoot(1774);
      complex4.multiply(2699);
      Complex.valueOf((-42.5431734462), (-1114.266101951319));
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.I.asin();
      complex0.abs();
      Complex complex2 = complex0.pow(complex1);
      complex2.equals(complex1);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1507.40962269));
      Complex complex2 = complex0.log();
      complex2.NaN.toString();
      complex1.toString();
      complex0.ONE.acos();
      complex0.ONE.subtract(763.66643784248);
      Complex.valueOf((-1507.40962269), 527.102247203385);
      complex2.NaN.getArgument();
      complex2.toString();
      complex0.getField();
      complex1.abs();
      Complex complex3 = complex1.tan();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1260.409, 85.5186266449624);
      Complex complex1 = new Complex(85.5186266449624, 85.5186266449624);
      complex1.INF.createComplex(85.5186266449624, 85.5186266449624);
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.I.divide((-5955.7098376));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6616523265838623);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.NaN.multiply(1);
      Complex complex5 = complex4.subtract(1.6616523265838623);
      complex5.I.tanh();
      complex5.subtract(complex0);
      complex5.I.tan();
      Complex complex6 = complex0.NaN.subtract(complex2);
      Complex complex7 = complex0.pow(0.0);
      Complex complex8 = complex4.add((double) 1);
      Complex complex9 = complex3.NaN.atan();
      Complex complex10 = complex8.ZERO.add((-364.29819));
      complex2.I.exp();
      complex2.NaN.tanh();
      complex10.NaN.acos();
      complex7.add((-364.29819));
      complex3.sqrt1z();
      complex1.I.sinh();
      complex4.toString();
      Complex complex11 = Complex.valueOf(0.0);
      complex6.INF.negate();
      complex7.readResolve();
      complex2.getArgument();
      complex10.cos();
      complex4.exp();
      complex11.atan();
      complex9.pow(complex0);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-1709.1175));
      complex1.createComplex(2.864122672853628E-291, (-2272.71718959296));
      complex1.getArgument();
      Complex complex2 = complex0.INF.divide(438.9186794);
      complex0.I.pow(Double.NaN);
      complex0.isInfinite();
      complex0.getArgument();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.tanh();
      complex4.ONE.cos();
      complex3.ONE.conjugate();
      complex3.I.sin();
      complex0.abs();
      complex2.subtract(complex3);
      Complex.valueOf(2.575620466387945E-150, 0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-524.0));
      Complex complex1 = Complex.INF;
      complex1.ONE.cos();
      complex0.I.pow(complex1);
      Complex complex2 = complex0.NaN.divide((-1204.724));
      complex2.I.nthRoot(4101);
      complex0.getField();
      Complex complex3 = complex0.pow((-524.0));
      Complex complex4 = Complex.valueOf((-524.0), (-524.0));
      complex4.sinh();
      complex0.getArgument();
      complex3.subtract(1419.212);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.asin();
      complex1.sin();
      complex2.INF.sqrt();
      complex2.I.sqrt1z();
      complex0.toString();
      complex2.multiply(37);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-435.0), 2473.46);
      Complex complex1 = complex0.NaN.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.ZERO.sin();
      complex0.subtract(5.858546779607288E-181);
      complex0.exp();
      complex1.hashCode();
      complex2.I.toString();
      complex2.pow(complex0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.INF.sinh();
      complex6.add(0.6176109313964844);
      complex4.I.getArgument();
      complex4.I.exp();
      Complex complex7 = complex4.sinh();
      complex7.NaN.toString();
      complex7.ZERO.createComplex(0.6176109313964844, (-2149.8145));
      complex7.I.negate();
      complex2.log();
      complex4.readResolve();
      Complex complex8 = complex7.log();
      Complex complex9 = complex0.sinh();
      complex3.tan();
      complex8.reciprocal();
      try { 
        complex9.nthRoot((-1742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,742
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-45.36392250718), (-4171.081134598161));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.valueOf(0.0, 4820.08689);
      Complex complex3 = complex1.NaN.pow(complex0);
      complex3.ONE.subtract(complex2);
      complex1.reciprocal();
      Complex complex4 = Complex.valueOf((-4171.081134598161));
      Complex complex5 = complex0.reciprocal();
      Object object0 = complex0.readResolve();
      complex5.equals(object0);
      complex0.reciprocal();
      complex4.add((-2260.65435));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-602.50540620307), (-602.50540620307));
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.getArgument();
      Complex complex1 = complex0.I.add((-20.0));
      Complex complex2 = complex1.INF.divide(0.0);
      complex0.toString();
      complex0.getReal();
      complex0.getReal();
      Complex complex3 = Complex.valueOf((-1276.8907311892451), (-20.0));
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.ZERO.multiply((-1329));
      complex6.ONE.subtract(complex4);
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex7.multiply(complex8);
      complex9.ZERO.atan();
      complex1.sqrt();
      complex9.atan();
      complex7.I.nthRoot(1306);
      Complex complex11 = complex4.log();
      complex11.I.sin();
      complex5.abs();
      complex3.sinh();
      complex10.subtract((-152.14744317));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.I.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.getField();
      List<Complex> list0 = complex2.ONE.nthRoot(807);
      assertEquals(807, list0.size());
      assertFalse(list0.contains(complex2));
      
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = (Complex)complex3.I.readResolve();
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      
      complex0.isNaN();
      Complex complex6 = complex1.ONE.conjugate();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex0.NaN.exp();
      Complex complex9 = complex7.tanh();
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      complex7.equals((Object) null);
      Complex complex10 = complex1.cos();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex0.subtract(complex1);
      complex12.NaN.toString();
      Complex complex13 = complex1.add((-6.75421764491544E-8));
      Complex complex14 = complex13.ONE.multiply(0.0);
      Complex complex15 = complex14.ZERO.sqrt();
      complex8.atan();
      Complex complex16 = complex8.cos();
      Complex complex17 = complex16.INF.divide(complex1);
      Complex complex18 = complex7.sin();
      Complex complex19 = complex14.atan();
      assertTrue(complex19.equals((Object)complex9));
      
      double double0 = complex3.getReal();
      assertEquals(0.5403023058681398, double0, 0.01);
      
      complex8.getImaginary();
      Complex complex20 = complex2.pow(complex13);
      assertSame(complex20, complex17);
      assertTrue(complex2.equals((Object)complex15));
      
      Complex complex21 = complex4.multiply(Double.POSITIVE_INFINITY);
      assertSame(complex21, complex11);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertSame(complex21, complex12);
      assertTrue(complex0.equals((Object)complex18));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1.4403494631058154E207);
      complex0.INF.getArgument();
      Complex complex1 = complex0.conjugate();
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.NaN.log();
      assertTrue(complex3.isNaN());
      
      Complex complex4 = complex2.tan();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals((-1.2519385645450887), complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.ONE.sinh();
      assertEquals(1.1752011936438014, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex2.getField();
      Complex complex6 = complex2.sqrt1z();
      assertEquals(0.4424134972764317, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      double double0 = complex0.getReal();
      assertEquals(1.4403494631058154E207, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = complex0.I.sinh();
      try { 
        complex1.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
