/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:38:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2.9873862594340452), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(451.46662619779056, Double.NaN);
      complex1.pow(2.7593452284747873E-8);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply((-1384.40996208904));
      complex0.pow((-3038516.753682338));
      Complex complex3 = Complex.I;
      Complex.valueOf((-1384.40996208904), (-3038516.753682338));
      Complex complex4 = complex2.multiply(complex3);
      complex2.log();
      complex4.reciprocal();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex.valueOf(2.9407595186322917, 2.9407595186322917);
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.I.tanh();
      Complex complex1 = Complex.valueOf((-1203.34696630673), Double.POSITIVE_INFINITY);
      complex1.tan();
      complex1.multiply((-1203.34696630673));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf((-1203.34696630673), Double.POSITIVE_INFINITY);
      complex1.tan();
      complex1.multiply(2577);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.multiply(850.058);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.tan();
      complex6.ONE.subtract(850.058);
      complex5.INF.readResolve();
      complex6.ONE.cosh();
      complex4.ONE.reciprocal();
      complex0.INF.atan();
      complex6.ONE.getArgument();
      Complex complex7 = complex4.tan();
      complex4.subtract(complex7);
      Complex complex8 = complex2.sqrt();
      complex4.sinh();
      Complex complex9 = complex7.tan();
      complex9.ZERO.createComplex((-458.7928), (-458.7928));
      Complex complex10 = complex8.multiply(complex3);
      complex2.abs();
      complex3.reciprocal();
      complex10.toString();
      Complex.valueOf((-694.99154381));
      complex7.createComplex(850.058, (-694.99154381));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(4382.901897, 4382.901897);
      complex0.I.sinh();
      complex0.tanh();
      complex0.isNaN();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.reciprocal();
      complex1.cosh();
      Complex complex2 = new Complex((-3.4552363953199905E138), 1583.5);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.reciprocal();
      Complex.valueOf(Double.NaN, (-0.999817524091567));
      Complex complex2 = Complex.I;
      complex2.tan();
      complex0.abs();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.094989262630675, 8.094989262630675);
      Complex complex1 = Complex.valueOf(2740.748035560445);
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf(2740.748035560445, 8.094989262630675);
      complex1.equals(complex2);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9407595186322917, 2.9407595186322917);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tanh();
      complex2.abs();
      complex2.log();
      complex2.add(Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-6065.34025238627), 1.0);
      Complex complex1 = Complex.valueOf(4409.304144, Double.POSITIVE_INFINITY);
      complex1.ONE.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex1.sinh();
      complex2.NaN.sqrt1z();
      complex4.cosh();
      Complex.valueOf((-6065.34025238627));
      Complex complex5 = Complex.valueOf(4409.304144);
      Complex complex6 = complex0.ONE.cosh();
      complex6.ZERO.divide(4409.304144);
      complex6.ONE.divide((-6065.34025238627));
      complex6.ZERO.tan();
      complex3.negate();
      complex5.multiply(17);
      complex3.add((-956.28346526915));
      complex0.readResolve();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-6.017681359527226E272), 2.0);
      Complex complex2 = complex1.sqrt1z();
      complex2.multiply(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.I;
      complex3.multiply(complex4);
      try { 
        complex0.nthRoot((-1520));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,520
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(11.299190068589994, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      complex1.NaN.pow(complex0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.INF;
      complex3.multiply(401);
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.acos();
      complex1.ONE.sqrt1z();
      complex2.isNaN();
      Complex complex6 = complex1.I.log();
      Complex complex7 = complex5.I.sinh();
      complex7.ONE.sqrt1z();
      Complex complex8 = (Complex)complex1.readResolve();
      complex2.equals(complex8);
      Complex complex9 = complex5.cosh();
      complex9.INF.conjugate();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.NaN.add(complex3);
      Complex.valueOf(1.3083870531380308E144, 0.0);
      complex2.getReal();
      Complex complex11 = complex1.subtract(complex4);
      Complex complex12 = (Complex)complex11.readResolve();
      Complex complex13 = complex3.divide(1.3083870531380308E144);
      complex6.divide(complex1);
      complex0.I.sinh();
      complex0.add(complex13);
      complex1.getField();
      complex8.isNaN();
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-839.5132824724565), (-839.5132824724565));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex((-839.5132824724565));
      Complex complex3 = complex0.ONE.sqrt1z();
      complex1.INF.subtract(complex3);
      Complex complex4 = complex1.multiply(complex0);
      try { 
        complex4.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), (-838.7));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.nthRoot(1);
      Complex complex3 = Complex.I;
      complex3.getField();
      complex0.isInfinite();
      complex1.isNaN();
      Complex complex4 = new Complex(1, (-2141.17505287));
      complex0.pow(complex4);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.ONE.sqrt1z();
      complex2.isNaN();
      Complex complex8 = Complex.valueOf(1.334449995534113E-7);
      Complex complex9 = complex8.I.log();
      Complex complex10 = complex5.I.sinh();
      complex10.ONE.sqrt1z();
      Object object0 = complex1.readResolve();
      complex6.equals(object0);
      Complex complex11 = complex5.cosh();
      complex11.INF.conjugate();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.NaN.add(complex3);
      Complex.valueOf(1.3083870531380308E144, 0.0);
      complex2.getReal();
      Complex complex13 = complex6.subtract(complex4);
      complex13.readResolve();
      Complex complex14 = complex3.divide(1.3083870531380308E144);
      complex9.divide(complex1);
      complex0.I.sinh();
      Complex complex15 = complex8.add(complex14);
      complex5.add(1253.34159);
      complex5.tanh();
      complex15.acos();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.conjugate();
      complex5.atan();
      complex3.subtract(complex2);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex2.log();
      complex7.cos();
      Complex complex8 = new Complex(3285.605313629861);
      complex8.readResolve();
      complex6.tan();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.divide((-1830.0305215731719));
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ZERO.subtract((-1830.0305215731719));
      complex7.ONE.sqrt1z();
      complex2.isNaN();
      complex6.atan();
      Complex complex8 = Complex.valueOf(1.334449995534113E-7);
      Complex complex9 = complex8.I.log();
      complex6.I.sinh();
      Object object0 = complex1.readResolve();
      complex7.equals(object0);
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.NaN.add(complex4);
      Complex complex14 = Complex.valueOf(1.3083870531380308E144, 0.0);
      Complex complex15 = new Complex(Double.POSITIVE_INFINITY);
      complex3.getReal();
      complex7.subtract(complex5);
      Complex complex16 = Complex.I;
      complex4.divide(1.3083870531380308E144);
      complex11.divide(complex15);
      complex12.sinh();
      complex13.add(complex1);
      complex9.add(1841.14);
      complex8.tanh();
      complex14.acos();
      complex0.isInfinite();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex0.I.pow(Double.NaN);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex1.multiply((-1.0));
      Complex complex4 = complex3.pow((-796.562));
      complex3.add((-1.0));
      complex1.ONE.nthRoot(1834);
      complex3.INF.add(complex4);
      Complex complex5 = complex1.createComplex((-1.0), (-1.0));
      complex3.INF.subtract(complex2);
      complex5.multiply((double) 1834);
      Complex complex6 = complex4.cos();
      complex0.INF.readResolve();
      complex6.nthRoot(1068);
      Complex complex7 = complex3.sqrt();
      complex7.pow(complex0);
      complex7.ZERO.reciprocal();
      Complex complex8 = complex1.I.subtract(complex2);
      complex4.multiply(595);
      complex1.NaN.sqrt();
      Object object0 = new Object();
      complex0.equals(object0);
      complex3.acos();
      complex2.getField();
      complex4.acos();
      complex8.sqrt();
      complex7.sqrt();
      complex8.subtract((-796.562));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), (-838.7));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = new Complex((-838.7));
      Complex complex4 = complex3.multiply(complex2);
      complex4.log();
      complex4.conjugate();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.NaN;
      complex4.subtract(complex6);
      Complex complex7 = complex6.negate();
      Complex complex8 = new Complex(-0.0);
      complex8.log();
      complex5.cos();
      complex7.readResolve();
      complex4.tan();
      complex5.isNaN();
      Complex.valueOf((-838.7));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply((-1.0));
      Complex complex3 = complex2.pow((-796.562));
      complex2.add((-1.0));
      complex1.ONE.nthRoot(1834);
      complex2.INF.add(complex3);
      Complex complex4 = complex1.createComplex((-1.0), (-1.0));
      complex4.NaN.createComplex((-796.562), (-796.562));
      complex2.INF.subtract(complex0);
      Complex complex5 = complex3.cos();
      complex0.INF.readResolve();
      complex5.nthRoot(1068);
      Complex complex6 = complex2.sqrt();
      complex6.pow(complex0);
      complex6.ZERO.reciprocal();
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      complex2.subtract(complex1);
      complex2.multiply(342.4);
      Complex complex3 = complex2.cos();
      complex3.readResolve();
      complex3.nthRoot(1068);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.valueOf((double) 1068, (-20.0));
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex3.reciprocal();
      complex5.subtract(complex6);
      complex4.multiply(1068);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex8 = complex7.acos();
      complex5.getField();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.acos();
      complex7.sqrt();
      complex8.sqrt();
      complex3.multiply(595);
      complex6.sin();
      Complex complex11 = complex0.createComplex(595, 1068);
      complex11.acos();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), (-838.7));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.add((-838.7));
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = Complex.NaN;
      complex4.sinh();
      complex4.readResolve();
      complex5.readResolve();
      Complex complex6 = Complex.ONE;
      complex2.equals(complex6);
      Complex complex7 = Complex.NaN;
      complex7.cosh();
      complex0.conjugate();
      Complex.valueOf(0.39696556329727173);
      Complex complex8 = complex5.add(complex4);
      Complex complex9 = Complex.valueOf(2236.3831174129136, (-838.7));
      Complex complex10 = new Complex((-2360.7));
      complex8.getReal();
      complex8.subtract(complex3);
      complex7.readResolve();
      complex6.divide((-1109.993397));
      Complex complex11 = Complex.valueOf(1174.50511);
      complex2.divide(complex11);
      complex5.sinh();
      complex2.add(complex9);
      complex3.add((-634509.019844));
      complex9.tanh();
      complex0.acos();
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide((-1830.0305215731719));
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ZERO.subtract((-1830.0305215731719));
      Complex complex8 = complex7.ONE.sqrt1z();
      complex2.isNaN();
      complex3.atan();
      Complex complex9 = Complex.valueOf(1.334449995534113E-7);
      Complex complex10 = complex9.I.log();
      complex6.I.sinh();
      Object object0 = complex1.readResolve();
      complex7.equals(object0);
      Complex complex11 = complex6.cosh();
      complex11.INF.conjugate();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.NaN.add(complex4);
      Complex.valueOf(1.3083870531380308E144, 0.0);
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY);
      complex3.getReal();
      Complex complex14 = complex7.subtract(complex5);
      complex14.readResolve();
      Complex complex15 = complex4.divide(1.3083870531380308E144);
      complex10.divide(complex3);
      complex0.I.sinh();
      Complex complex16 = complex13.add(complex15);
      complex6.add(1253.34159);
      complex6.tanh();
      complex16.acos();
      complex8.isInfinite();
      complex14.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.NaN.abs();
      Complex complex6 = Complex.ONE;
      complex3.asin();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(6.283185307179586);
      complex0.add(6.283185307179586);
      complex1.add(3041.66014815921);
      complex3.pow(3041.66014815921);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex1.multiply((-1.0));
      Complex complex4 = complex3.pow((-796.562));
      complex3.add((-1.0));
      complex1.ONE.nthRoot(1834);
      complex3.INF.add(complex4);
      Complex complex5 = complex1.createComplex((-1.0), (-1.0));
      complex3.INF.subtract(complex2);
      complex5.multiply((double) 1834);
      Complex complex6 = complex4.cos();
      complex0.INF.readResolve();
      complex6.nthRoot(1068);
      Complex complex7 = complex3.sqrt();
      complex7.pow(complex0);
      complex7.ZERO.reciprocal();
      Complex complex8 = complex1.I.subtract(complex2);
      complex4.multiply(595);
      Object object0 = new Object();
      complex0.equals(object0);
      complex3.acos();
      complex2.getField();
      Complex complex9 = complex4.acos();
      complex8.sqrt();
      Complex complex10 = complex7.sqrt();
      complex9.multiply(1834);
      Complex complex11 = complex9.sin();
      complex11.INF.createComplex((-1.0), 1270.005095);
      complex10.acos();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sin();
      complex0.getArgument();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = (Complex)complex1.readResolve();
      Complex complex5 = complex0.sqrt();
      complex0.log();
      complex1.conjugate();
      Complex complex6 = complex1.atan();
      complex6.subtract(complex5);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex7.log();
      Complex complex9 = Complex.ONE;
      complex9.cos();
      complex3.readResolve();
      complex6.tan();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), (-838.7));
      Complex complex1 = complex0.sqrt1z();
      complex1.ONE.add((-838.7));
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.sqrt();
      complex1.log();
      complex0.conjugate();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.subtract(complex1);
      complex5.negate();
      Complex complex6 = complex5.cos();
      Complex complex7 = new Complex(0.0);
      complex4.readResolve();
      complex0.tan();
      complex4.isNaN();
      complex7.exp();
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex1.multiply(complex0);
      complex0.multiply(complex3);
      Complex complex4 = complex0.reciprocal();
      complex4.nthRoot(1);
      Complex complex5 = Complex.I;
      complex4.conjugate();
      Complex.valueOf(1.0, (-838.7));
      Complex.valueOf((double) 1, 0.0);
      Complex complex6 = Complex.INF;
      Complex.valueOf((double) 1, (double) 1);
      Complex.valueOf((double) 1, (-838.7));
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), (-838.7));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.add((-838.7));
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = Complex.NaN;
      complex5.sinh();
      complex2.readResolve();
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
      complex5.cosh();
      complex3.conjugate();
      Complex complex6 = Complex.valueOf((-838.7));
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = Complex.valueOf(1.3083870531380308E144, (-2360.7));
      Complex complex9 = new Complex(1.3083870531380308E144);
      complex5.getReal();
      Complex complex10 = complex8.subtract(complex7);
      complex4.readResolve();
      Complex complex11 = complex10.divide(0.0);
      complex3.divide(complex6);
      Complex complex12 = complex11.sinh();
      complex2.add(complex12);
      complex0.add(4869.7903139);
      complex12.tanh();
      complex0.acos();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), (-838.7));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.add((-838.7));
      Complex complex3 = complex1.sqrt1z();
      complex1.isNaN();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf((-838.7));
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.sinh();
      complex3.readResolve();
      complex0.equals(complex1);
      Complex complex8 = complex2.cosh();
      Complex.valueOf((-838.7));
      complex8.add(complex1);
      Complex.valueOf(1.334449995534113E-7, 1247.4435191869647);
      complex1.acos();
      Complex complex9 = Complex.valueOf(2353.956069042);
      complex9.getReal();
      Complex complex10 = Complex.valueOf(2353.956069042, (-86.970515));
      complex10.subtract(complex7);
      complex5.readResolve();
      complex4.divide((-703416.6900000001));
      Complex complex11 = complex4.divide(complex2);
      complex4.sinh();
      Complex complex12 = complex6.add(complex1);
      complex12.add((-838.7));
      complex0.tanh();
      complex11.acos();
      Complex complex13 = new Complex(1592.460685);
      complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), (-838.7));
      Complex complex1 = complex0.sqrt1z();
      complex1.add((-838.7));
      complex0.sqrt1z();
      complex0.multiply(complex1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex(1, (-1.0));
      complex3.nthRoot(1);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ZERO;
      complex5.conjugate();
      complex4.multiply(1);
      complex2.divide(complex5);
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide((-1830.0305215731719));
      complex4.I.sin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.subtract((-1830.0305215731719));
      complex6.ONE.sqrt1z();
      complex2.isNaN();
      complex3.atan();
      Complex complex7 = Complex.valueOf(1.334449995534113E-7);
      Complex complex8 = complex7.I.log();
      complex5.I.sinh();
      Complex complex9 = (Complex)complex0.readResolve();
      complex6.equals(complex9);
      Complex complex10 = complex5.cosh();
      complex10.INF.conjugate();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.NaN.add(complex4);
      Complex complex13 = Complex.valueOf(1.3083870531380308E144, 0.0);
      complex9.acos();
      Complex complex14 = Complex.NaN;
      complex14.subtract(1.334449995534113E-7);
      complex8.multiply(complex7);
      complex13.subtract((-2260.62047));
      Complex complex15 = Complex.ONE;
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.divide((-1830.0305215731719));
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ZERO.subtract((-1830.0305215731719));
      Complex complex9 = complex8.ONE.sqrt1z();
      complex3.isNaN();
      complex4.atan();
      Complex complex10 = Complex.valueOf(1.334449995534113E-7);
      Complex complex11 = complex10.I.log();
      complex7.I.sinh();
      Object object0 = complex1.readResolve();
      complex8.equals(object0);
      Complex complex12 = complex7.cosh();
      complex12.INF.conjugate();
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex13.NaN.add(complex5);
      Complex.valueOf(1.3083870531380308E144, 0.0);
      Complex complex14 = new Complex(Double.POSITIVE_INFINITY);
      complex4.getReal();
      Complex complex15 = complex8.subtract(complex6);
      complex15.readResolve();
      Complex complex16 = complex5.divide(1.3083870531380308E144);
      complex11.divide(complex4);
      complex0.I.sinh();
      Complex complex17 = complex14.add(complex16);
      complex7.add(1253.34159);
      complex7.tanh();
      complex17.acos();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3009.04396484));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.valueOf((-1479.634));
      Complex complex6 = complex5.sinh();
      complex5.readResolve();
      complex5.equals((Object) null);
      Complex complex7 = complex5.cosh();
      Complex complex8 = Complex.valueOf((-3097.066343784));
      Complex complex9 = complex1.add(complex5);
      Complex.valueOf(1.3083870531380308E144, 2.980803094487783E-4);
      Complex complex10 = complex7.acos();
      complex6.getReal();
      Complex complex11 = complex8.subtract(complex2);
      complex5.readResolve();
      Complex complex12 = complex9.divide((-3097.066343784));
      complex10.divide(complex3);
      complex1.sinh();
      complex4.add(complex12);
      complex4.add((-3097.066343784));
      complex3.tanh();
      complex9.acos();
      complex8.isInfinite();
      Complex complex13 = Complex.ZERO;
      complex11.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex2.divide((-1830.0305215731719));
      complex5.I.sin();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.ZERO.subtract((-1830.0305215731719));
      complex7.ONE.sqrt1z();
      complex3.isNaN();
      complex4.atan();
      Complex.valueOf(1.334449995534113E-7);
      Complex complex8 = complex4.createComplex(1.644449394585716E-196, (-910.0));
      complex2.sqrt();
      complex7.reciprocal();
      Complex complex9 = complex4.divide(complex8);
      complex9.reciprocal();
      complex5.isNaN();
      Complex complex10 = complex6.asin();
      Complex complex11 = new Complex((-1830.0305215731719), (-864.8546369385804));
      complex11.getImaginary();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3009.04396484));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.cosh();
      complex3.ZERO.createComplex((-1479.634), (-3009.04396484));
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.I;
      complex5.abs();
      complex4.readResolve();
      Complex complex6 = complex2.createComplex((-2277.599069395108), (-3009.04396484));
      complex0.isInfinite();
      Complex complex7 = new Complex((-1.0), (-2251.541901325758));
      complex7.exp();
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex(1.0);
      Object object0 = complex9.readResolve();
      complex5.equals(object0);
      Complex complex10 = complex2.multiply(1.0);
      complex2.readResolve();
      Complex complex11 = complex10.multiply(251.1103133131);
      Complex complex12 = Complex.ZERO;
      complex12.isNaN();
      Complex complex13 = complex11.reciprocal();
      complex10.equals(complex13);
      Complex complex14 = complex0.cos();
      complex14.isNaN();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sin();
      complex0.getArgument();
      Complex complex2 = complex0.log();
      complex2.ONE.subtract(complex1);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.conjugate();
      complex2.atan();
      complex5.subtract(complex3);
      Complex complex7 = complex5.negate();
      complex2.log();
      complex7.cos();
      Complex complex8 = new Complex(20.0);
      complex8.readResolve();
      complex6.tan();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tanh();
      complex2.I.sqrt1z();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = Complex.valueOf((-51.86265964850513), (-51.86265964850513));
      complex4.NaN.abs();
      complex1.getField();
      complex4.createComplex(4.6979190968929805, Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex((-3340.7282), 2796.66809535831);
      complex5.add(complex3);
      Complex complex6 = Complex.INF;
      complex6.sqrt();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3009.04396484));
      complex0.tan();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.createComplex((-1479.634), (-3009.04396484));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.divide(complex0);
      complex4.asin();
      complex4.ZERO.reciprocal();
      complex0.isNaN();
      Complex complex5 = complex3.asin();
      complex5.NaN.negate();
      complex0.getImaginary();
      Complex.valueOf((-3009.04396484));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1264.734034575964), (-1450.0));
      complex1.multiply(66);
      complex1.exp();
      complex1.log();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.multiply(66);
      complex3.isNaN();
      Complex.valueOf(62.0941);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex2.divide((-1830.0305215731719));
      Complex complex6 = new Complex((-1830.0305215731719), Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ZERO.subtract((-1830.0305215731719));
      complex8.ONE.sqrt1z();
      complex3.isNaN();
      complex4.atan();
      Complex complex9 = Complex.valueOf(1.334449995534113E-7);
      Complex complex10 = complex9.I.log();
      complex7.I.sinh();
      Object object0 = complex1.readResolve();
      complex8.equals(object0);
      complex7.cosh();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.NaN.add(complex5);
      Complex complex12 = Complex.valueOf(1.3083870531380308E144, 0.0);
      Complex complex13 = complex12.acos();
      complex4.getReal();
      Complex complex14 = complex8.subtract(complex6);
      complex14.readResolve();
      Complex complex15 = complex5.divide(1.3083870531380308E144);
      complex10.divide(complex4);
      complex0.I.sinh();
      complex13.add(complex15);
      complex11.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex3.INF.sqrt();
      complex1.multiply((-1408.48));
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = Complex.valueOf(1.4403494631058154E207, 1.549533655901835E-8);
      complex3.divide((-1408.48));
      complex5.add(0.0);
      complex4.INF.sin();
      complex5.tanh();
      complex4.acos();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2015877944429946E-104), (-2.2015877944429946E-104));
      Complex complex1 = complex0.INF.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex0.conjugate();
      complex6.ONE.cosh();
      Complex complex7 = complex6.atan();
      Complex complex8 = Complex.valueOf(1917.120330146028);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.log();
      complex0.sinh();
      complex7.readResolve();
      complex6.equals(complex5);
      complex1.cosh();
      Complex.valueOf(0.0);
      Complex complex11 = complex7.add(complex8);
      Complex.valueOf(1917.120330146028, 0.0);
      complex5.acos();
      complex9.getReal();
      complex4.subtract(complex5);
      complex3.readResolve();
      Complex complex12 = complex6.divide((-1181.3973404449437));
      Complex complex13 = complex11.divide(complex7);
      complex2.sinh();
      complex0.add(complex13);
      complex10.add(144.947165826663);
      complex12.tanh();
      complex12.acos();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply((-2077));
      complex3.getArgument();
      complex4.pow(complex2);
      Complex complex5 = new Complex((-2077), (-459696.5601));
      Complex complex6 = complex5.acos();
      complex1.subtract(Double.POSITIVE_INFINITY);
      complex6.multiply(complex5);
      complex4.subtract((double) (-2077));
      Complex complex7 = Complex.ONE;
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3009.04396484));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.cosh();
      complex2.I.getField();
      Complex complex4 = complex0.createComplex(678.01, (-883.2543878));
      Complex complex5 = Complex.ZERO;
      complex5.sqrt();
      Complex complex6 = complex2.reciprocal();
      complex4.divide(complex1);
      complex3.reciprocal();
      Complex complex7 = Complex.NaN;
      complex7.isNaN();
      complex1.asin();
      complex7.getImaginary();
      complex0.sqrt();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.ONE.getField();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex1.acos();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.subtract((-1408.48));
      complex5.multiply(complex4);
      complex7.subtract((-1408.48));
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.NaN.multiply((-2077));
      complex1.INF.getArgument();
      complex2.INF.pow(complex3);
      complex3.multiply(0.7853981633974483);
      Complex complex4 = Complex.INF;
      complex4.ZERO.abs();
      Complex complex5 = complex4.pow(complex3);
      complex5.NaN.log();
      Complex.valueOf(3.11611905696257E-10, 0.0);
      Complex complex6 = Complex.ZERO;
      complex6.divide(1.4403494631058154E207);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(93.0);
      Complex complex1 = complex0.tan();
      complex1.I.asin();
      Complex complex2 = complex0.NaN.multiply(1452);
      Complex complex3 = Complex.valueOf(1000.52);
      complex2.ONE.tanh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.NaN.sinh();
      complex4.ONE.reciprocal();
      complex0.nthRoot(686);
      complex1.log();
      complex1.getArgument();
      complex2.sqrt();
      Complex complex6 = complex3.ONE.subtract(complex5);
      complex6.ONE.hashCode();
      Complex complex7 = Complex.valueOf((double) 686);
      Complex complex8 = complex7.ZERO.createComplex((-1630.59258595005), (-1630.59258595005));
      complex8.I.cos();
      Complex.valueOf(3.141592653589793, (-1148.1714943755767));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex0.add(complex1);
      complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.ONE.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.subtract(complex6);
      Complex complex8 = complex3.negate();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex10.NaN.pow(1.296626091003418);
      complex4.multiply(525);
      Complex complex12 = complex9.NaN.pow(1.0);
      Complex complex13 = complex11.INF.createComplex(0.0, 0.0);
      Complex complex14 = complex9.negate();
      Complex complex15 = complex14.ZERO.negate();
      complex7.getArgument();
      Complex complex16 = complex6.log();
      complex7.isInfinite();
      complex1.isNaN();
      complex5.getReal();
      complex16.sinh();
      complex8.sqrt();
      complex13.tanh();
      complex12.exp();
      complex15.add(0.0);
      Complex complex17 = Complex.NaN;
      complex3.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sin();
      complex0.getArgument();
      Complex complex2 = complex0.log();
      complex2.ONE.subtract(complex1);
      complex1.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.reciprocal();
      complex1.I.tanh();
      complex4.I.createComplex(0.7853981633974483, (-422.9663789477728));
      complex3.nthRoot(1);
      complex4.conjugate();
      complex1.multiply(3354);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-678.01));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.INF.divide(0.0);
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex4.NaN.cosh();
      complex0.toString();
      complex5.ZERO.sqrt();
      Complex.valueOf((-1829.2950922256055), (-1829.2950922256055));
      complex0.isInfinite();
      Complex complex6 = complex5.tanh();
      complex6.NaN.acos();
      Complex complex7 = complex3.acos();
      complex4.NaN.sin();
      Complex complex8 = Complex.valueOf((-678.01));
      Complex complex9 = complex8.sinh();
      complex7.ZERO.tan();
      Complex complex10 = complex0.tanh();
      complex7.sinh();
      Complex complex11 = complex7.divide((-678.01));
      complex6.hashCode();
      complex0.INF.readResolve();
      complex5.hashCode();
      complex11.negate();
      complex0.log();
      complex10.log();
      complex9.hashCode();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sinh();
      complex2.ZERO.hashCode();
      complex1.I.getField();
      complex1.ZERO.atan();
      complex2.NaN.negate();
      int int0 = (-387);
      try { 
        complex0.NaN.nthRoot((-387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -387
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3009.04396484));
      complex0.tan();
      complex0.asin();
      Complex complex1 = complex0.cosh();
      complex1.ZERO.createComplex((-1479.634), (-3009.04396484));
      Complex complex2 = complex0.sqrt();
      complex2.ONE.reciprocal();
      Complex complex3 = complex2.ONE.divide(complex0);
      complex3.ZERO.reciprocal();
      complex0.isNaN();
      Complex complex4 = complex2.asin();
      complex0.getImaginary();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-4691.3874834187), (-4691.3874834187));
      Complex complex1 = complex0.sin();
      complex0.getReal();
      complex0.toString();
      complex1.multiply(complex0);
      complex0.tanh();
      complex1.getField();
      complex0.conjugate();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.5618454217910767, 0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.tanh();
      complex4.cos();
      complex6.I.abs();
      complex6.getField();
      Complex complex7 = complex3.multiply((-3701));
      Complex complex8 = complex7.INF.multiply(complex4);
      complex6.readResolve();
      complex2.atan();
      Complex complex9 = complex1.multiply((-3701));
      Complex complex10 = complex9.INF.multiply(complex3);
      complex5.hashCode();
      Complex complex11 = complex2.tanh();
      Complex complex12 = Complex.valueOf(1.2678272724151611);
      complex0.conjugate();
      Complex complex13 = complex10.multiply((-3701));
      complex13.I.readResolve();
      complex10.INF.subtract(0.5618454217910767);
      Complex complex14 = complex8.asin();
      complex3.multiply((-3701));
      Complex complex15 = complex14.INF.createComplex(0.0, (-3701));
      complex14.INF.cos();
      complex13.abs();
      complex12.multiply(1.0);
      complex11.isInfinite();
      complex15.getArgument();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.conjugate();
      complex3.ONE.pow(0.0);
      complex3.NaN.toString();
      complex0.ONE.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex4.pow(1.0178783359926372E-4);
      Complex complex5 = complex4.NaN.multiply((-1.0));
      complex4.INF.negate();
      Complex complex6 = complex1.multiply((-1.0));
      Complex complex7 = complex6.I.pow(3.846720258072078E-173);
      complex7.INF.multiply((-461));
      complex7.ZERO.exp();
      Complex complex8 = Complex.valueOf((-1.0), (-1.0));
      Complex complex9 = complex8.NaN.log();
      complex4.I.add(complex9);
      complex9.NaN.sqrt();
      Complex complex10 = complex2.multiply(7);
      complex10.NaN.sin();
      complex3.isNaN();
      Complex complex11 = complex7.cosh();
      complex10.getArgument();
      complex9.equals(complex11);
      complex0.conjugate();
      Complex.valueOf((-745.460983162964));
      complex5.atan();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.multiply(Double.NaN);
      Complex complex2 = complex0.createComplex(Double.NaN, 0.0);
      complex2.atan();
      complex1.pow((-54.03219678272796));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.187871486648885E-8);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.tan();
      complex1.NaN.tanh();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex1.multiply(complex2);
      complex5.NaN.add(8.187871486648885E-8);
      complex2.asin();
      Complex.valueOf(0.0);
      complex0.subtract(0.0);
      complex4.abs();
      complex1.createComplex(8.187871486648885E-8, 0.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-108.344);
      Complex complex0 = new Complex((-108.344));
      Complex complex1 = complex0.sqrt();
      complex1.tanh();
      Complex complex2 = complex1.atan();
      complex0.exp();
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex3.NaN.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.I.exp();
      try { 
        complex3.nthRoot((-452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -452
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(1.0041012794280992E-195, 207.411768742);
      Complex complex1 = complex0.add(207.411768742);
      Complex complex2 = complex0.subtract(1.0041012794280992E-195);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.INF.log();
      complex4.INF.divide(Double.NaN);
      complex4.ZERO.sin();
      complex4.ZERO.multiply(207.411768742);
      complex4.INF.multiply(complex1);
      Complex complex5 = complex1.ONE.reciprocal();
      try { 
        complex5.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.NaN.createComplex((-2540.74448372255), (-2540.74448372255));
      complex2.I.getArgument();
      Complex complex3 = complex2.INF.createComplex(0.0, 2930.757916273234);
      complex3.INF.cos();
      try { 
        complex0.NaN.nthRoot((-1684));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,684
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1168.7098));
      complex0.I.conjugate();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.pow((-1379.674169681));
      Complex complex3 = complex2.I.pow(0.0);
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.reciprocal();
      complex5.INF.toString();
      Complex complex6 = complex1.subtract(1959.693726901714);
      Complex complex7 = complex0.INF.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0, Double.NaN);
      Complex complex9 = complex0.divide(complex8);
      complex7.I.subtract(0.18248429894447327);
      complex9.NaN.toString();
      complex1.atan();
      complex4.divide(complex6);
      complex8.getImaginary();
      complex5.getArgument();
      Complex complex10 = complex6.multiply(complex1);
      Complex complex11 = complex10.I.add(complex7);
      Complex complex12 = complex5.pow(complex6);
      Complex complex13 = complex12.NaN.sqrt1z();
      complex13.cos();
      complex7.isNaN();
      complex11.add(515.2147757);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.readResolve();
      complex0.hashCode();
      complex0.pow(3363.32398345787);
      Complex complex1 = complex0.acos();
      complex1.NaN.multiply(3363.32398345787);
      Complex complex2 = complex0.sqrt();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.INF.negate();
      complex4.negate();
      Complex complex5 = complex0.NaN.add(complex1);
      Complex complex6 = complex0.INF.conjugate();
      complex6.pow((-1433.188582));
      complex0.ONE.subtract((-1433.188582));
      complex0.asin();
      complex5.add((-1433.188582));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.divide((-1.0));
      Complex complex2 = complex0.createComplex(3446.8444058568, 3446.8444058568);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex3.NaN.sinh();
      complex6.reciprocal();
      Complex complex7 = complex4.multiply(complex5);
      complex7.ONE.hashCode();
      Complex complex8 = complex7.subtract(complex5);
      complex5.sinh();
      complex2.hashCode();
      Complex complex9 = new Complex(3446.8444058568, (-1.0));
      complex8.NaN.add(1135.0217);
      Complex complex10 = complex7.subtract(complex9);
      complex10.I.exp();
      complex10.I.cosh();
      Complex complex11 = complex1.ZERO.cosh();
      complex3.tan();
      complex11.conjugate();
      complex3.isInfinite();
      complex8.getField();
      complex4.isNaN();
      Complex.valueOf(3446.8444058568);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.ZERO.sinh();
      Complex complex1 = complex0.multiply(0);
      complex1.ZERO.tan();
      complex1.hashCode();
      complex1.atan();
      Complex complex2 = Complex.NaN;
      complex0.add(complex2);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(1184);
      Complex complex2 = complex0.ZERO.atan();
      complex0.NaN.add(complex1);
      complex0.ONE.conjugate();
      Complex complex3 = complex2.add((double) 1184);
      complex3.ONE.atan();
      Complex complex4 = complex3.createComplex(1184, 0.0);
      complex0.INF.hashCode();
      complex4.INF.sinh();
      complex3.subtract((double) 1184);
      Complex complex5 = complex0.divide(457.954407724);
      Complex complex6 = complex2.conjugate();
      complex6.ONE.getField();
      complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-666.615455598283), (-666.615455598283));
      Complex complex1 = Complex.valueOf((-666.615455598283));
      complex1.INF.nthRoot(1548);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex1.INF.add(complex3);
      complex0.ONE.reciprocal();
      Complex complex5 = Complex.valueOf(1.0, (-666.615455598283));
      Complex complex6 = complex0.sin();
      complex0.multiply(1);
      Complex complex7 = complex1.subtract(0.0);
      complex7.add(complex3);
      Complex.valueOf((double) 1548, (double) 1548);
      Complex complex8 = complex7.multiply(complex6);
      Complex complex9 = complex7.subtract(complex4);
      complex9.INF.abs();
      complex9.INF.conjugate();
      complex8.multiply(1);
      Complex.valueOf(586.4338785460855);
      complex5.isInfinite();
      Complex complex10 = complex0.sqrt();
      complex10.NaN.cosh();
      Complex.valueOf(1467.966501892168, 1.0);
      Complex complex11 = complex1.sinh();
      complex11.I.getField();
      complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(6.283185307179586);
      complex0.nthRoot(1337);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.divide(complex2);
      complex4.NaN.cosh();
      Complex complex5 = complex3.exp();
      complex5.NaN.sqrt();
      Complex complex6 = complex2.I.multiply(complex3);
      complex4.ZERO.exp();
      Complex complex7 = complex3.subtract((double) 1337);
      complex7.ZERO.abs();
      Complex complex8 = complex2.pow(complex4);
      Complex complex9 = Complex.valueOf((double) 1337, 0.0);
      complex9.ZERO.asin();
      complex9.NaN.abs();
      complex6.INF.readResolve();
      Complex complex10 = complex1.createComplex(1339.15288414, (-1.3620325027706252E-7));
      complex6.isInfinite();
      complex2.exp();
      Complex complex11 = Complex.NaN;
      complex1.equals(complex11);
      complex7.multiply(3.7884955399150257E65);
      complex11.readResolve();
      Complex complex12 = complex4.multiply(85.0);
      complex0.isNaN();
      complex6.reciprocal();
      complex11.equals(complex8);
      complex12.cos();
      complex10.isNaN();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.ONE.getField();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex3.INF.sqrt();
      complex1.multiply((-1408.48));
      complex3.I.pow(complex2);
      Complex.valueOf(1.4403494631058154E207, 1.549533655901835E-8);
      complex3.divide((-1408.48));
      complex3.subtract(99.9);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(2.0);
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.tanh();
      complex0.ZERO.readResolve();
      Complex complex3 = complex2.ONE.pow((-4138.22342396917));
      Complex complex4 = complex2.createComplex(1346.11678304942, 0.0);
      Complex complex5 = Complex.valueOf(2013.0);
      Complex complex6 = complex4.INF.add(complex5);
      complex6.add(complex3);
      complex6.ONE.multiply(0);
      complex0.getArgument();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tanh();
      complex2.I.sqrt1z();
      complex2.NaN.sinh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.NaN.abs();
      complex1.getField();
      complex3.isInfinite();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.NaN.multiply((-2077));
      complex1.INF.getArgument();
      complex2.INF.pow(complex3);
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex4.ONE.subtract(0.7853981633974483);
      complex0.multiply(complex1);
      complex0.subtract(0.0);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(4318.840269064896);
      Complex complex3 = complex1.NaN.exp();
      complex3.NaN.pow(709.8686253078286);
      complex3.ONE.atan();
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.I.divide(0.0);
      Complex complex7 = complex5.ZERO.multiply((-1292));
      complex7.ONE.acos();
      complex0.ZERO.hashCode();
      complex0.isInfinite();
      complex0.getField();
      Complex complex8 = complex1.atan();
      complex8.multiply(0);
      complex8.nthRoot(17);
      complex4.getImaginary();
      complex1.isNaN();
      complex0.reciprocal();
      complex1.ONE.hashCode();
      complex0.readResolve();
      complex1.toString();
      complex8.divide(complex0);
      complex0.getArgument();
      complex5.acos();
      complex6.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      complex0.isNaN();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = Complex.valueOf(1231.759858);
      Complex complex5 = complex4.I.subtract(complex0);
      complex1.ZERO.hashCode();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = Complex.valueOf(1231.759858);
      complex6.I.getField();
      Complex complex8 = complex4.add(complex0);
      complex8.ZERO.atan();
      complex5.readResolve();
      complex5.toString();
      Complex.valueOf(3574.237);
      Complex complex9 = complex3.tanh();
      complex8.log();
      Complex complex10 = complex5.tan();
      complex10.ONE.hashCode();
      complex7.INF.pow((-447.013155));
      complex1.getArgument();
      complex7.subtract(1231.759858);
      complex5.acos();
      complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.negate();
      complex0.INF.tan();
      Complex complex2 = complex0.multiply(2.0);
      Complex.valueOf(0.0);
      complex2.toString();
      complex0.abs();
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.conjugate();
      complex1.NaN.conjugate();
      int int0 = (-2436);
      try { 
        complex0.nthRoot((-2436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,436
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2015877944429946E-104), (-2.2015877944429946E-104));
      Complex complex1 = complex0.INF.atan();
      complex1.ZERO.abs();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = complex2.I.tanh();
      complex4.INF.divide(complex3);
      Complex complex5 = complex0.conjugate();
      complex5.ONE.cosh();
      complex4.pow(1917.120330146028);
      Complex complex6 = complex5.NaN.log();
      complex1.I.multiply((-2.2015877944429946E-104));
      complex6.I.getArgument();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex7.subtract(0.0);
      complex1.atan();
      complex8.ZERO.reciprocal();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex0.conjugate();
      complex4.subtract(complex3);
      Complex complex5 = complex4.INF.subtract(9.45732984079136E214);
      complex5.cos();
      Complex.valueOf(0.0, (-20.0));
      complex2.hashCode();
      Complex complex6 = complex2.cosh();
      complex6.ONE.getArgument();
      complex4.I.tanh();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.tan();
      complex8.ONE.acos();
      complex8.ZERO.multiply(complex6);
      try { 
        complex7.I.nthRoot((-1420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,420
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = (-2184.0095);
      Complex complex0 = Complex.valueOf((-2184.0095));
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.ONE.exp();
      int int0 = (-24);
      try { 
        complex0.I.nthRoot((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -24
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = new Complex((-3.2936025225250634E-8), 1.4322981952798675E-8);
      complex2.ZERO.divide(complex3);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-3990.144735545);
      double double1 = 458.3;
      Complex complex1 = Complex.valueOf((-3990.144735545), 458.3);
      int int0 = 6372;
      // Undeclared exception!
      complex1.ONE.nthRoot(6372);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex2.divide((-1830.0305215731719));
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ZERO.subtract((-1830.0305215731719));
      Complex complex9 = complex8.ONE.sqrt1z();
      complex3.isNaN();
      complex4.atan();
      Complex complex10 = Complex.valueOf(1.334449995534113E-7);
      Complex complex11 = complex10.I.log();
      complex7.I.sinh();
      Object object0 = complex1.readResolve();
      complex8.equals(object0);
      complex7.cosh();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.NaN.add(complex5);
      Complex complex13 = Complex.valueOf(1.3083870531380308E144, 0.0);
      Complex complex14 = complex13.acos();
      complex4.getReal();
      Complex complex15 = complex8.subtract(complex6);
      complex15.readResolve();
      Complex complex16 = complex5.divide(1.3083870531380308E144);
      complex11.divide(complex4);
      complex0.I.sinh();
      Complex complex17 = complex14.add(complex16);
      complex7.add(1253.34159);
      complex7.tanh();
      complex17.acos();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.conjugate();
      Complex complex1 = Complex.valueOf(541.64229897, 0.0);
      complex1.INF.pow(0.0);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = new Complex(0.0, 0.0);
      complex3.multiply(complex4);
      complex0.cos();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.INF.tan();
      Complex complex2 = complex0.createComplex(487.2625431547104, 487.2625431547104);
      Complex complex3 = complex2.cosh();
      complex3.I.sin();
      complex2.INF.divide(complex0);
      Complex complex4 = complex0.ZERO.negate();
      complex4.NaN.abs();
      Complex.valueOf(487.2625431547104, 487.2625431547104);
      Complex complex5 = complex2.INF.log();
      Complex complex6 = complex5.createComplex(487.2625431547104, 476.8);
      complex6.I.getArgument();
      complex5.NaN.hashCode();
      Complex complex7 = complex0.conjugate();
      complex7.NaN.sqrt();
      complex7.ZERO.multiply(complex6);
      Complex complex8 = complex2.add((-808.1086305947609));
      complex0.isNaN();
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = complex9.ZERO.log();
      complex8.readResolve();
      Complex complex11 = complex8.ONE.asin();
      Complex complex12 = complex11.NaN.reciprocal();
      complex6.INF.add((-922.599));
      Complex complex13 = complex9.log();
      Complex complex14 = complex6.negate();
      complex14.subtract(complex10);
      complex8.add(complex13);
      complex12.atan();
      complex6.acos();
      complex4.tanh();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-838.7), 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.add((-838.7));
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.ONE.divide(complex0);
      complex1.multiply(complex0);
      Complex complex4 = complex0.log();
      complex2.I.conjugate();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex1.subtract(complex5);
      complex6.I.negate();
      complex2.log();
      complex1.cos();
      complex1.readResolve();
      complex4.tan();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1503.1024), (-2434.0492294));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.conjugate();
      complex2.hashCode();
      Complex complex4 = complex3.createComplex((-1503.1024), 4257.05828629);
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex4.I.sin();
      complex4.ONE.hashCode();
      String string0 = complex3.toString();
      assertEquals("(-1503.1024, 2434.0492294)", string0);
      
      Complex complex8 = complex4.multiply(900);
      assertEquals((-1352792.16), complex8.getReal(), 0.01);
      assertEquals(3831352.457661, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex4.INF.subtract((-2434.0492294));
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      complex5.getField();
      complex2.toString();
      complex2.getImaginary();
      List<Complex> list0 = complex3.nthRoot(37);
      assertEquals(37, list0.size());
      
      complex2.readResolve();
      complex7.getReal();
      Complex complex10 = complex6.divide((-1268.615871123));
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertEquals((-7.882606727241898E-4), complex10.getImaginary(), 0.01);
      
      complex3.getArgument();
      Complex complex11 = complex4.tanh();
      complex11.I.sqrt1z();
      complex7.getField();
      complex11.isInfinite();
      Complex complex12 = complex6.acos();
      assertEquals((-0.8813735870195429), complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex7.pow((-1503.1024));
      assertEquals(6.587088441398388E-107, complex13.getReal(), 0.01);
      assertEquals(4.0598075334270077E-106, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex11.multiply(complex7);
      assertEquals((-1.1752011936438014), complex14.getImaginary(), 0.01);
      assertEquals(-0.0, complex14.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.ONE.abs();
      complex0.getImaginary();
      Complex complex4 = complex1.ZERO.subtract(complex3);
      Complex complex5 = complex1.sin();
      complex5.I.readResolve();
      Complex complex6 = Complex.valueOf(486.1465, 0.0);
      Complex complex7 = complex6.NaN.subtract(complex2);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex7.isNaN());
      
      Complex complex8 = complex3.multiply(complex2);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex2.add(3241.0);
      assertEquals(3241.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.log();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertSame(complex5, complex3);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-2.1092372471088425E-8));
      complex0.I.toString();
      complex0.I.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.NaN.add((-2.1092372471088425E-8));
      complex1.ZERO.asin();
      complex1.ZERO.tan();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.INF.divide(complex2);
      complex5.ZERO.pow((-2.1092372471088425E-8));
      complex3.INF.nthRoot(654);
      complex0.NaN.multiply(6.283185307179586);
      int int0 = (-4488);
      try { 
        complex0.nthRoot((-4488));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,488
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
