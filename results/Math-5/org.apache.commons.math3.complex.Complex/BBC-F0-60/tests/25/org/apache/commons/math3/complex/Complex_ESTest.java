/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:05:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = new Complex(2.0, 2.0);
      complex1.INF.asin();
      complex0.ONE.divide((-152.67992));
      Complex complex2 = complex1.INF.log();
      complex0.NaN.toString();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.divide(complex3);
      complex3.ONE.abs();
      complex2.pow(2.0);
      Complex.valueOf(1.0);
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf((-518.0), 1.0);
      complex6.I.getArgument();
      complex6.acos();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex0.multiply(6.237715351293023E-9);
      complex7.exp();
      complex5.exp();
      complex8.getField();
      complex7.getField();
      Complex complex9 = new Complex(8.042275310036546E-198, 8.042275310036546E-198);
      complex2.add(complex9);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(0.23697291631766684, Double.POSITIVE_INFINITY);
      complex2.asin();
      complex2.multiply(894);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.atan();
      complex3.subtract(complex4);
      Complex.valueOf(1843.155, (double) 894);
      try { 
        complex1.nthRoot((-229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -229
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2.7098766894577737E11, 302.6448514668566);
      complex0.asin();
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3243.5305791327014, 3243.5305791327014);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.valueOf(3243.5305791327014, (-2528.66));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.add(complex5);
      complex3.asin();
      Complex complex7 = complex6.cosh();
      complex4.sinh();
      complex5.multiply(Double.NaN);
      complex1.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2019.486467176637), (-2019.486467176637));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      complex3.nthRoot(1421);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex4.multiply((double) 1421);
      Complex complex8 = complex7.pow(3231.999884249227);
      complex2.asin();
      complex5.atan();
      Complex complex9 = complex6.createComplex(5.162248481759758E164, Double.NaN);
      Complex complex10 = Complex.valueOf(1.8544977697201776E-7, (double) 37);
      complex10.NaN.multiply(complex8);
      complex10.pow(complex0);
      complex9.multiply((-336.92235219));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.0445823E7), 3243.5305791327014);
      Complex complex2 = complex1.cos();
      complex0.add((-20.0));
      Complex complex3 = new Complex(3243.5305791327014, (-20.0));
      complex3.tan();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), 1264.7466676467);
      complex1.log();
      complex1.tanh();
      complex1.multiply((-2220.56626874019));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.NaN.nthRoot(2331);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex.valueOf((double) 2331, (double) 755);
      complex1.multiply((double) 755);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2197.993), (-2197.993));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.subtract(7.636326960498012E142);
      complex0.NaN.getField();
      Complex complex3 = complex2.divide(2961.2494411346);
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.NaN.nthRoot(2331);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.I.multiply(complex3);
      Complex complex8 = complex1.multiply((-2556));
      Complex complex9 = complex4.atan();
      complex9.ONE.subtract(7.636326960498012E142);
      complex0.ONE.conjugate();
      complex7.toString();
      complex7.I.log();
      complex9.sin();
      complex3.INF.nthRoot(755);
      Complex complex10 = Complex.valueOf(2961.2494411346, (double) (-2556));
      Complex complex11 = complex1.divide(complex10);
      Complex complex12 = complex7.createComplex(Double.POSITIVE_INFINITY, 2961.2494411346);
      Complex complex13 = complex10.divide(Double.POSITIVE_INFINITY);
      complex13.toString();
      Complex complex14 = complex8.sqrt1z();
      Complex.valueOf((double) 2331, (double) 755);
      complex6.reciprocal();
      complex9.sqrt();
      complex12.pow(complex14);
      complex11.subtract(3.775134371775124E-11);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-763.1544003622257), (-763.1544003622257));
      complex0.INF.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-1618.9));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(1907.54, 1247.4);
      complex3.atan();
      Complex complex4 = Complex.valueOf(1.0812448255518705E-301, (-12.493455759880993));
      Complex complex5 = Complex.valueOf((-3.27712056604), 1907.54);
      complex5.add(complex2);
      complex4.asin();
      complex5.pow(1907.54);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(791.2921399885774, 791.2921399885774);
      Complex complex1 = complex0.NaN.asin();
      complex0.toString();
      Complex complex2 = complex1.ZERO.pow(791.2921399885774);
      Complex complex3 = complex1.sqrt1z();
      complex3.ONE.cos();
      complex0.getArgument();
      Complex complex4 = complex1.INF.add((-2882.4587141971024));
      Complex complex5 = complex4.tanh();
      complex4.NaN.readResolve();
      Complex complex6 = Complex.valueOf(0.6379399299621582, (-296.694575332));
      complex0.divide(complex1);
      Complex complex7 = Complex.ZERO;
      complex1.divide(complex7);
      Complex complex8 = Complex.valueOf(0.6379399299621582, 0.6379399299621582);
      complex2.pow(559.4901469263136);
      Complex complex9 = complex0.sqrt1z();
      complex9.NaN.multiply(559.4901469263136);
      Complex complex10 = complex8.sin();
      Complex.valueOf((-296.694575332), 0.6379399299621582);
      Complex complex11 = complex6.multiply(0.009874963462472408);
      Complex complex12 = complex0.multiply(complex10);
      Complex complex13 = complex11.createComplex((-296.694575332), Double.NaN);
      Complex complex14 = complex13.ZERO.multiply(791.2921399885774);
      complex12.multiply(498);
      complex8.sqrt();
      complex5.abs();
      complex14.sqrt();
      Complex.valueOf(628.10391);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-763.1544003622257));
      complex0.INF.abs();
      complex0.INF.reciprocal();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.NaN;
      complex3.sin();
      Complex complex4 = Complex.valueOf((-763.1544003622257), Double.POSITIVE_INFINITY);
      complex2.divide(complex4);
      complex2.createComplex((-624.3457472964142), (-624.3457472964142));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.nthRoot(1399);
      complex0.atan();
      Complex complex1 = Complex.valueOf((double) 1399, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.valueOf((-1099.7), 1749.864);
      Complex complex3 = complex2.add(complex0);
      complex3.asin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.add((-1099.7));
      complex0.tan();
      complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-763.1544003622257));
      complex0.INF.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.cos();
      complex2.atan();
      Complex.valueOf((-407.22193759), (-407.22193759));
      Complex complex3 = Complex.valueOf(192.6251941341);
      Complex complex4 = complex3.tan();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.cosh();
      complex3.tan();
      complex1.sinh();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.INF;
      complex5.conjugate();
      Complex complex6 = Complex.I;
      complex0.multiply(complex6);
      Complex complex7 = Complex.ONE;
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1811.95376331909);
      complex1.equals(complex0);
      Complex complex2 = Complex.I;
      complex2.exp();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.NaN;
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 1811.95376331909;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-764.0));
      complex0.INF.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.multiply((-5213.551525527718));
      Complex complex3 = complex2.negate();
      complex3.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.log();
      Complex.valueOf((-764.0));
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex6.cosh();
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.INF;
      complex4.conjugate();
      Complex complex9 = Complex.valueOf((-764.0), Double.POSITIVE_INFINITY);
      complex9.multiply(complex5);
      Complex complex10 = Complex.ONE;
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3243.5305791327014, 3243.5305791327014);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.sqrt();
      complex0.atan();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex4.cos();
      Complex complex8 = Complex.valueOf(3243.5305791327014, 3243.5305791327014);
      Complex complex9 = complex4.add(complex5);
      Complex complex10 = complex6.asin();
      complex6.add((-780.280929736));
      complex9.pow(complex8);
      complex7.sqrt();
      complex3.hashCode();
      complex10.sinh();
      Complex.valueOf((-1007.61897), 1331.02648442081);
      Complex complex11 = new Complex((-4437.9904734));
      Complex complex12 = complex11.reciprocal();
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.toString();
      complex0.NaN.nthRoot(1461);
      complex0.abs();
      complex0.ZERO.multiply(1461);
      double double0 = (-4379.288827350975);
      Complex complex1 = complex0.createComplex((-2397.0), (-4379.288827350975));
      complex1.NaN.readResolve();
      Complex complex2 = complex1.ZERO.cosh();
      complex2.I.getField();
      complex0.I.hashCode();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.381627681288878, 2.381627681288878);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(2.381627681288878);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.add(1.0);
      Complex complex5 = complex0.pow(complex2);
      complex3.sqrt();
      complex0.subtract(complex5);
      complex2.cos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.negate();
      complex1.readResolve();
      Complex complex8 = complex7.sin();
      complex1.log();
      complex0.NaN.log();
      complex6.tanh();
      Complex complex9 = new Complex(403.56);
      complex4.cosh();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = Double.NaN;
      Complex complex1 = new Complex((-819.0), Double.NaN);
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.ZERO;
      complex3.hashCode();
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex4.divide(complex2);
      complex1.negate();
      try { 
        complex1.nthRoot((-1059));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,059
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.ZERO.multiply(944679875);
      complex4.NaN.sqrt();
      complex4.ONE.pow(complex0);
      Complex complex5 = complex1.ZERO.add(complex2);
      Complex complex6 = complex0.I.pow(Double.NaN);
      complex6.ONE.readResolve();
      complex0.toString();
      complex1.add((-1.0));
      complex1.multiply(1407);
      Complex complex7 = complex3.multiply(944679875);
      Complex complex8 = complex3.pow(complex6);
      complex1.getField();
      complex5.divide((-362.5572646));
      Complex complex9 = complex3.divide(complex7);
      Complex complex10 = complex9.INF.sin();
      complex7.acos();
      complex10.divide((-3383.72));
      complex1.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      complex2.log();
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex((-3430.0576762));
      Complex complex5 = complex3.cosh();
      complex5.INF.multiply((-1714164130));
      complex3.tan();
      Complex complex6 = complex1.multiply(complex0);
      complex6.sinh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.conjugate();
      complex6.getReal();
      complex8.divide(763.9999999845409);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-173.87943), 2497.6390227254);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex5.cos();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.cos();
      Complex complex11 = new Complex((-1922.5421745), 2497.6390227254);
      Complex complex12 = complex11.add(complex6);
      Complex complex13 = complex2.asin();
      complex12.add(Double.POSITIVE_INFINITY);
      Complex complex14 = Complex.ONE;
      complex14.pow(complex3);
      complex9.sqrt();
      complex0.abs();
      complex3.cos();
      complex7.negate();
      complex0.readResolve();
      complex6.sin();
      Complex complex15 = complex10.log();
      complex1.tanh();
      Complex complex16 = new Complex((-1.0));
      complex13.cosh();
      Complex complex17 = Complex.ONE;
      complex17.tan();
      complex15.multiply(complex8);
      Complex complex18 = Complex.ONE;
      complex16.asin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-764.0));
      complex0.INF.abs();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      complex1.cos();
      Complex complex4 = new Complex(1901.68738);
      Complex complex5 = Complex.INF;
      Complex.valueOf((-0.22011191399005092), (-5213.551525527718));
      Complex complex6 = new Complex(1901.68738);
      complex2.hashCode();
      complex2.sinh();
      Complex.valueOf(2.381627681288878, (-474.745258062091));
      Complex complex7 = Complex.valueOf(1.545909820981726E-8, 1.545909820981726E-8);
      complex7.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-764.0));
      complex0.INF.abs();
      Complex complex1 = complex0.INF.reciprocal();
      complex0.sqrt();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.cos();
      complex0.cos();
      Complex complex6 = Complex.valueOf(444.3756984568, (-764.0));
      Complex complex7 = complex2.add(complex6);
      complex1.asin();
      Complex complex8 = complex1.add((-764.0));
      Complex complex9 = complex0.pow(complex7);
      Complex complex10 = complex9.sqrt();
      complex7.abs();
      Complex complex11 = new Complex((-764.0), Double.POSITIVE_INFINITY);
      complex1.cos();
      Complex complex12 = complex3.negate();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = Complex.ZERO;
      complex13.I.add(complex14);
      Complex complex15 = Complex.INF;
      complex15.pow(complex9);
      complex10.sin();
      complex12.multiply(complex8);
      complex5.conjugate();
      complex11.createComplex(Double.POSITIVE_INFINITY, 2474.47612);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.0445823E7), 3243.821745037095);
      complex0.reciprocal();
      Complex complex2 = complex1.exp();
      complex2.I.log();
      Complex complex3 = Complex.valueOf((-1.0445823E7));
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.cosh();
      complex4.cos();
      Complex complex6 = complex4.cos();
      Complex complex7 = Complex.valueOf((-750.98), 3243.821745037095);
      Complex complex8 = new Complex(6.283185307179586, (-1.0445823E7));
      complex8.add(complex7);
      complex5.asin();
      complex3.add(1615.202615532563);
      Complex complex9 = complex3.pow(complex1);
      Complex complex10 = complex1.sqrt();
      complex3.abs();
      Complex complex11 = new Complex(3243.821745037095, 0.0);
      Complex complex12 = complex9.cos();
      complex12.subtract(complex0);
      complex9.negate();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = Complex.INF;
      complex6.pow(complex3);
      complex14.sin();
      complex0.multiply(complex14);
      Complex complex15 = Complex.ONE;
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.multiply(990);
      complex2.NaN.exp();
      Complex complex4 = complex0.I.pow(complex1);
      complex4.getArgument();
      Complex complex5 = complex0.ONE.atan();
      complex5.pow(complex4);
      complex1.I.hashCode();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex0.INF.sqrt();
      Complex complex8 = complex3.subtract((double) 990);
      complex0.equals(complex6);
      complex0.tanh();
      Complex complex9 = new Complex((-1.0));
      complex4.cosh();
      complex7.tan();
      complex2.multiply(complex5);
      complex8.sinh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      complex0.sqrt();
      Complex complex2 = complex0.atan();
      complex2.cosh();
      Complex complex3 = complex2.cos();
      complex0.cos();
      Complex complex4 = new Complex(3231.999845297026, 3231.999845297026);
      Complex complex5 = complex4.add(complex0);
      complex5.asin();
      complex1.atan();
      complex0.toString();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.hashCode();
      complex3.sinh();
      complex0.pow(Double.POSITIVE_INFINITY);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.reciprocal();
      complex2.I.multiply(990);
      complex2.NaN.exp();
      Complex complex3 = complex0.I.pow(complex1);
      complex3.getArgument();
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex5.I.asin();
      complex1.I.hashCode();
      Complex complex7 = complex0.divide(complex1);
      complex0.INF.sqrt();
      complex6.readResolve();
      complex6.sin();
      complex5.log();
      Complex complex8 = complex0.tanh();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.cosh();
      complex8.tan();
      complex9.multiply(complex7);
      Complex complex11 = complex10.sinh();
      complex6.conjugate();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.738246981762776E132));
      Complex complex1 = Complex.valueOf((-2.738246981762776E132));
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.INF;
      complex4.cosh();
      complex3.tan();
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.negate();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.log();
      complex2.ZERO.toString();
      Complex complex3 = complex1.pow(Double.NaN);
      complex3.ONE.asin();
      Complex complex4 = complex3.add(complex2);
      complex3.negate();
      complex4.cosh();
      Complex complex5 = complex1.tan();
      complex5.ONE.pow(Double.NaN);
      complex4.I.getArgument();
      complex1.sinh();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.divide(Double.NaN);
      complex7.ZERO.multiply((-2411));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.readResolve();
      complex0.sqrt();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf(2681.768863212596, 2569.0927809);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex5.reciprocal();
      complex4.nthRoot(1199);
      complex7.sinh();
      complex4.sqrt();
      complex6.reciprocal();
      complex0.readResolve();
      complex4.pow(complex2);
      Complex complex8 = complex2.sin();
      complex7.multiply(37);
      Complex complex9 = complex8.add(2569.0927809);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1387.2), (-1387.2));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.cosh();
      Complex complex4 = new Complex(263.0, 1.166837215423584);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex5.multiply((-1387.2));
      complex7.cos();
      Complex complex8 = complex4.negate();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex(439.36219);
      complex10.sqrt1z();
      complex9.sin();
      complex6.log();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex10.cosh();
      complex10.tan();
      complex10.multiply(complex12);
      complex8.sinh();
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-3842.91166742), (-3842.91166742));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.negate();
      complex1.ZERO.exp();
      Complex complex6 = Complex.valueOf((-3842.91166742), 0.0);
      Complex complex7 = complex5.NaN.tanh();
      Complex complex8 = complex7.INF.reciprocal();
      complex8.INF.nthRoot(269);
      complex6.ONE.sinh();
      complex5.INF.sqrt();
      complex1.reciprocal();
      complex0.readResolve();
      Complex complex9 = complex2.pow(complex1);
      Complex complex10 = complex5.sin();
      complex10.ONE.multiply(76);
      complex9.add((-3842.91166742));
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1114.0), (-1114.0));
      complex0.NaN.getArgument();
      complex0.ZERO.hashCode();
      complex0.INF.toString();
      complex0.NaN.pow((-8.880302882034106E-8));
      complex0.getReal();
      complex0.I.cosh();
      Complex.valueOf((-1114.0), 2.0);
      complex0.NaN.getArgument();
      complex0.pow((-4585.83341784));
      Complex complex1 = Complex.INF;
      complex1.sinh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      complex3.ONE.cosh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.I.add(complex1);
      Complex complex7 = complex6.INF.asin();
      complex2.ZERO.add((-1.0));
      complex4.I.pow(complex2);
      complex1.NaN.sqrt();
      complex0.abs();
      Complex complex8 = complex0.subtract(complex1);
      complex4.cos();
      complex1.I.negate();
      complex1.readResolve();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex8.log();
      complex1.tanh();
      complex10.cosh();
      complex0.tan();
      complex1.multiply(complex0);
      complex9.sinh();
      complex6.conjugate();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.acos();
      complex2.getField();
      complex0.tanh();
      complex3.toString();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.negate();
      double double0 = (-5.5299180508885456E281);
      complex2.add((-5.5299180508885456E281));
      Complex complex6 = complex5.exp();
      double double1 = (-1191.3671792667);
      Complex complex7 = new Complex((-5.5299180508885456E281), 2.220764636993408);
      complex4.toString();
      // Undeclared exception!
      complex6.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-764.0));
      complex0.INF.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.multiply((-5213.551525527718));
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex3.INF.atan();
      complex2.ZERO.toString();
      Complex.valueOf(1.545909820981726E-8, 1.545909820981726E-8);
      complex4.toString();
      complex1.nthRoot(236);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex0.sinh();
      complex3.abs();
      complex3.add(complex6);
      complex5.negate();
      complex1.readResolve();
      Complex complex7 = new Complex(259.8433);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex(259.8433, 990.975623);
      complex8.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-3842.91166742), (-3842.91166742));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.negate();
      complex1.ZERO.exp();
      Complex complex5 = Complex.valueOf((-135.4839483), 0.0);
      Complex complex6 = complex4.NaN.tanh();
      Complex complex7 = complex6.INF.reciprocal();
      complex7.INF.nthRoot(269);
      complex5.ONE.sinh();
      Complex complex8 = complex4.INF.sqrt();
      complex1.reciprocal();
      complex0.readResolve();
      Complex complex9 = complex2.pow(complex1);
      complex5.sin();
      complex9.multiply(3483);
      complex0.add((-4794.087));
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      complex3.ONE.cosh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.cos();
      complex5.I.add(complex1);
      complex2.tanh();
      complex2.reciprocal();
      int int0 = 269;
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      complex3.ONE.cosh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.I.add(complex1);
      complex6.INF.asin();
      Complex complex7 = complex2.ZERO.add((-1.0));
      Complex complex8 = complex4.I.pow(complex2);
      Complex complex9 = complex1.NaN.sqrt();
      complex0.abs();
      Complex complex10 = complex0.subtract(complex1);
      complex4.cos();
      complex1.I.negate();
      Complex complex11 = (Complex)complex1.readResolve();
      complex8.nthRoot(236);
      Complex complex12 = complex9.sinh();
      complex12.sinh();
      Complex complex13 = new Complex(6.283185307179586);
      complex13.abs();
      complex12.add(complex9);
      complex2.multiply(complex11);
      complex6.sinh();
      complex10.conjugate();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide((-1.956321788657987));
      Complex complex1 = Complex.valueOf((-1.956321788657987));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.atan();
      complex4.ONE.cosh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.cos();
      complex6.I.add(complex2);
      complex1.asin();
      Complex complex7 = complex1.add(0.06337818503379822);
      complex4.pow(complex1);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.sqrt();
      complex9.abs();
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = Complex.ZERO;
      complex10.subtract(complex11);
      complex7.cos();
      complex11.negate();
      complex7.readResolve();
      complex8.nthRoot(1058);
      complex9.sinh();
      complex11.sinh();
      Complex complex12 = new Complex(2.0);
      complex5.abs();
      Complex complex13 = Complex.valueOf((-1.0), 0.0);
      complex13.add(complex1);
      complex9.negate();
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = (-2.738246981762776E132);
      Complex complex0 = new Complex((-1905.8859069258), (-2.738246981762776E132));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.readResolve();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.negate();
      complex4.exp();
      Complex.valueOf((-2.738246981762776E132), 2.414213562373095);
      complex4.tanh();
      complex2.reciprocal();
      try { 
        complex2.nthRoot((-233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -233
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.multiply(990);
      complex2.NaN.exp();
      Complex complex4 = complex0.I.pow(complex1);
      complex4.getArgument();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex5.pow(complex4);
      complex6.I.asin();
      complex1.I.hashCode();
      Complex complex7 = complex0.divide(complex1);
      complex0.INF.sqrt();
      Complex complex8 = complex3.subtract((double) 990);
      complex0.equals(complex7);
      Complex complex9 = Complex.I;
      complex9.exp();
      complex8.isNaN();
      complex4.pow(complex0);
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.I.conjugate();
      Complex complex2 = Complex.valueOf((-4383.904957793321), 4511.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.I.multiply(4511.0);
      Complex complex5 = complex0.log();
      complex3.equals(complex2);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex5.add((-1703.947612));
      complex3.getArgument();
      Complex complex9 = complex8.subtract(4511.0);
      complex4.I.add(3.141592653589793);
      complex9.ZERO.reciprocal();
      Complex complex10 = complex1.sqrt();
      complex8.pow(0.0);
      Complex complex11 = complex2.pow((-1908.97475546));
      complex9.exp();
      complex6.ZERO.sqrt1z();
      complex6.I.getArgument();
      Complex complex12 = complex8.acos();
      complex12.NaN.sqrt1z();
      complex8.subtract(complex10);
      complex4.equals(complex11);
      complex8.hashCode();
      complex7.tanh();
      complex4.add(complex8);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-3842.91166742), (-3842.91166742));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.readResolve();
      complex0.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.ZERO.exp();
      complex5.tan();
      Complex complex6 = Complex.valueOf((-135.4839483), 0.0);
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex7.INF.reciprocal();
      complex8.INF.nthRoot(269);
      Complex complex9 = complex6.ONE.sinh();
      complex5.isNaN();
      Complex complex10 = Complex.valueOf((-3842.91166742));
      Complex complex11 = complex10.exp();
      complex8.cos();
      complex2.readResolve();
      complex6.negate();
      Complex complex12 = Complex.valueOf((-3503.333284));
      complex12.getField();
      Complex complex13 = new Complex((-3842.91166742));
      complex10.pow(complex13);
      complex9.getImaginary();
      complex2.nthRoot(269);
      complex9.sin();
      complex3.tan();
      complex11.add(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2852.24616832), 4511.0);
      Complex complex1 = complex0.tanh();
      complex1.equals(complex0);
      Complex complex2 = complex0.tan();
      complex2.reciprocal();
      complex1.getArgument();
      Complex complex3 = complex0.subtract(4511.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex1.pow(0.0);
      complex0.pow((-1908.97475546));
      Complex complex6 = complex3.exp();
      complex2.ZERO.sqrt1z();
      complex2.I.getArgument();
      Complex complex7 = Complex.valueOf((-1908.97475546), 4511.0);
      complex6.negate();
      complex4.getImaginary();
      Complex complex8 = complex1.pow(Double.NaN);
      complex2.toString();
      complex7.isInfinite();
      complex8.nthRoot(455);
      complex5.readResolve();
      complex0.subtract((double) 455);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1115.8184712955567));
      complex0.sin();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex1.acos();
      complex1.divide(complex2);
      complex4.toString();
      Complex complex6 = Complex.INF;
      complex6.sin();
      complex6.log();
      complex3.getArgument();
      Complex.valueOf((-1115.8184712955567), Double.NaN);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1115.8184712955567));
      Complex complex1 = complex0.sin();
      complex1.ONE.nthRoot(1087);
      Complex complex2 = complex0.conjugate();
      complex0.exp();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = new Complex(306.6085124877914, 1087);
      complex7.conjugate();
      Complex complex8 = complex5.cos();
      complex3.sin();
      Complex complex9 = new Complex(306.6085124877914);
      complex9.negate();
      complex0.getImaginary();
      complex9.pow((-1094.28233));
      complex7.tanh();
      Complex complex10 = Complex.valueOf((-1115.8184712955567), 676.0);
      complex10.toString();
      complex4.isInfinite();
      Complex complex11 = new Complex(676.0, (-1094.28233));
      complex11.nthRoot(1087);
      complex6.readResolve();
      complex8.isInfinite();
      complex7.subtract((double) 0);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-764.0));
      complex0.INF.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.multiply((-5213.551525527718));
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex3.INF.atan();
      complex2.ZERO.toString();
      Complex complex5 = Complex.valueOf(1.545909820981726E-8, 1.545909820981726E-8);
      complex5.ZERO.negate();
      complex5.INF.hashCode();
      complex3.I.acos();
      complex2.ZERO.getField();
      Complex complex6 = complex2.NaN.tanh();
      complex6.ZERO.toString();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex8.ONE.add(Double.POSITIVE_INFINITY);
      complex2.exp();
      complex2.toString();
      complex8.nthRoot(236);
      complex6.sinh();
      Complex complex10 = complex9.sinh();
      complex5.abs();
      complex5.add(complex1);
      complex10.negate();
      complex2.readResolve();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(5.4557485189210095E73, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.cos();
      complex0.acos();
      Complex complex3 = complex0.divide(complex1);
      complex3.NaN.toString();
      Complex complex4 = complex3.sin();
      complex2.log();
      complex0.getArgument();
      Complex.valueOf(5.4557485189210095E73, 0.0);
      complex3.reciprocal();
      complex0.equals(complex4);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1115.8184712955567));
      Complex complex1 = complex0.sin();
      complex1.ONE.nthRoot(1087);
      Complex complex2 = complex0.conjugate();
      complex0.exp();
      Complex complex3 = complex2.log();
      complex3.ZERO.log();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.NaN.cos();
      complex5.ONE.readResolve();
      complex3.nthRoot(236);
      Complex complex6 = complex4.sinh();
      complex6.I.sinh();
      complex2.abs();
      Complex complex7 = complex0.add(complex5);
      complex0.I.negate();
      complex1.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1115.8184712955567));
      Complex complex1 = complex0.sin();
      complex1.ONE.nthRoot(1087);
      Complex complex2 = complex0.conjugate();
      complex0.exp();
      Complex complex3 = complex2.log();
      complex3.ZERO.log();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex3.multiply(1);
      complex5.isNaN();
      Complex.valueOf((-1016.0452222097));
      complex6.exp();
      Complex complex7 = complex0.cos();
      complex7.readResolve();
      Complex complex8 = complex1.negate();
      complex8.getField();
      Complex complex9 = complex4.pow(complex2);
      complex9.getImaginary();
      Complex complex10 = Complex.valueOf((-1090.03914));
      try { 
        complex10.nthRoot((-4196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,196
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-3842.91166742), (-3842.91166742));
      Complex complex1 = complex0.I.cosh();
      complex0.ZERO.readResolve();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      complex1.ZERO.exp();
      Complex complex3 = Complex.valueOf((-135.4839483), 0.0);
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex4.INF.reciprocal();
      complex5.INF.nthRoot(269);
      complex3.ONE.sinh();
      complex0.INF.sqrt();
      Complex complex6 = complex1.reciprocal();
      complex0.readResolve();
      complex1.pow(complex1);
      complex1.getImaginary();
      Complex complex7 = complex2.sin();
      complex7.ONE.multiply(76);
      complex0.getImaginary();
      complex6.add(complex3);
      Complex complex8 = complex0.cos();
      complex8.getArgument();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1115.8184712955567));
      Complex complex1 = complex0.sin();
      complex1.ONE.nthRoot(1087);
      Complex complex2 = complex0.conjugate();
      complex0.exp();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.NaN.cos();
      complex4.createComplex(1087, (-1115.8184712955567));
      complex3.getArgument();
      complex5.subtract((double) 1087);
      Complex complex7 = Complex.valueOf((-2600.378967325819));
      Complex complex8 = complex6.sqrt1z();
      complex7.sinh();
      complex0.hashCode();
      complex0.sqrt1z();
      Complex complex9 = Complex.NaN;
      complex9.multiply(2.628788218289742E129);
      complex4.multiply(complex3);
      complex8.pow(9.754659138599756E-213);
      Complex complex10 = Complex.ONE;
      complex10.pow(complex3);
      complex8.toString();
      Complex complex11 = new Complex((-2600.378967325819));
      complex11.negate();
      complex4.multiply(1087);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1428571343421936);
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = Complex.valueOf((-2262.196937356));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.sin();
      complex0.getField();
      complex3.NaN.divide(complex1);
      complex0.isNaN();
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.valueOf((-7.897146442236022E215));
      Complex complex7 = complex0.tanh();
      complex3.I.readResolve();
      Complex complex8 = complex7.NaN.atan();
      complex7.NaN.sqrt();
      complex8.I.toString();
      Complex complex9 = complex8.NaN.createComplex(0.1428571343421936, 7);
      complex7.ONE.getArgument();
      Complex complex10 = complex9.NaN.subtract(0.0);
      Complex complex11 = Complex.valueOf((double) 7);
      complex11.pow(complex6);
      Complex complex12 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      complex5.hashCode();
      Complex complex13 = complex6.sqrt1z();
      complex13.multiply((-7.897146442236022E215));
      complex2.multiply(complex12);
      complex4.pow((-1623.4));
      complex1.pow(complex2);
      complex0.toString();
      complex1.negate();
      complex10.multiply(7);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.I.add(complex1);
      Complex complex7 = complex6.INF.asin();
      complex2.ZERO.add((-1.0));
      Complex complex8 = complex4.I.pow(complex2);
      complex1.NaN.sqrt();
      complex0.abs();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex4.cos();
      complex1.I.negate();
      Complex complex11 = complex10.INF.multiply(1);
      complex0.isNaN();
      Complex complex12 = Complex.valueOf(797.2409376696);
      complex12.exp();
      Complex complex13 = complex5.cos();
      complex13.ZERO.readResolve();
      complex9.negate();
      complex11.toString();
      complex5.INF.getField();
      complex9.pow(complex3);
      complex8.getImaginary();
      complex7.equals(complex5);
      try { 
        complex11.nthRoot((-4196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,196
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex2.I.add(0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex0.acos();
      complex1.cos();
      complex2.getField();
      Complex complex7 = complex1.sqrt1z();
      complex7.readResolve();
      Complex complex8 = complex6.INF.pow(0.0);
      complex8.ONE.readResolve();
      Complex complex9 = complex7.conjugate();
      complex7.createComplex((-1384.359), (-1384.359));
      Complex complex10 = complex6.subtract(complex0);
      complex5.getField();
      complex7.INF.add((-1384.359));
      Complex complex11 = complex2.createComplex(0.0, 3.6938826366068014E-196);
      complex11.sinh();
      complex3.multiply(complex10);
      Complex complex12 = Complex.NaN;
      complex9.add(complex12);
      complex3.cos();
      Complex.valueOf(3.6938826366068014E-196);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-286.6085124877914));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.INF.add(complex1);
      Complex complex5 = complex3.ZERO.add((-20.0));
      Complex complex6 = complex1.NaN.exp();
      Complex complex7 = complex6.ZERO.sqrt();
      complex1.ONE.subtract(complex4);
      Complex complex8 = new Complex((-20.0), 0.0);
      Complex complex9 = complex8.ZERO.createComplex(2.175685405731201, (-286.6085124877914));
      Complex complex10 = complex9.ZERO.sinh();
      complex7.atan();
      complex8.I.nthRoot(1039);
      complex1.I.pow(complex4);
      Complex complex11 = complex0.add(complex8);
      complex11.NaN.getArgument();
      complex3.sin();
      complex5.multiply((-286.6085124877914));
      complex10.I.acos();
      complex11.abs();
      Complex complex12 = complex4.exp();
      complex12.INF.multiply(3688);
      Complex complex13 = complex6.negate();
      Complex complex14 = complex10.pow(0.0);
      complex14.conjugate();
      complex14.INF.getField();
      complex7.isNaN();
      complex13.subtract((-20.0));
      complex4.sinh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.ZERO.subtract((-1.2778508303324259E-8));
      Complex complex2 = complex1.I.exp();
      complex0.I.sin();
      int int0 = (-1897);
      Complex complex3 = complex1.multiply((-1897));
      complex3.divide(complex0);
      Complex complex4 = complex2.asin();
      complex4.ZERO.sin();
      try { 
        complex4.INF.nthRoot((-1897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,897
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.I.conjugate();
      Complex complex2 = Complex.valueOf((-4383.904957793321), 4511.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.I.multiply(4511.0);
      Complex complex5 = complex0.log();
      complex3.equals(complex2);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex5.add((-1703.947612));
      complex3.getArgument();
      Complex complex9 = complex8.subtract(4511.0);
      complex9.ZERO.reciprocal();
      Complex complex10 = complex1.sqrt();
      complex8.pow(0.0);
      Complex complex11 = complex2.pow((-1908.97475546));
      Complex complex12 = complex9.exp();
      complex6.ZERO.sqrt1z();
      complex6.I.getArgument();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex13.NaN.sqrt1z();
      complex8.subtract(complex10);
      complex4.equals(complex11);
      complex8.hashCode();
      complex7.tanh();
      complex4.add(complex8);
      complex10.subtract((-2826.95));
      complex0.equals(complex6);
      complex12.exp();
      complex10.isNaN();
      complex0.pow(complex2);
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.valueOf(6.283185307179586, 2.0);
      Complex complex3 = complex2.NaN.pow(237.0948725768979);
      Complex complex4 = complex3.NaN.sqrt();
      complex1.ZERO.toString();
      complex0.isInfinite();
      Complex complex5 = complex1.divide(complex0);
      complex5.ONE.sqrt();
      complex2.I.getField();
      complex2.NaN.readResolve();
      Complex complex6 = complex5.INF.divide(54.4);
      complex6.ONE.divide(54.4);
      Complex complex7 = complex0.subtract(6.283185307179586);
      Complex complex8 = complex7.exp();
      complex8.INF.conjugate();
      Complex complex9 = complex2.conjugate();
      complex9.INF.pow(2.0);
      complex9.cosh();
      complex1.divide(20.0);
      complex4.exp();
      complex7.INF.tan();
      Complex complex10 = complex7.subtract(54.4);
      complex10.reciprocal();
      complex0.cosh();
      Complex.valueOf(1348.48834898, 2.5312442779541016);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.1177616119384766, 1.1177616119384766);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ZERO.reciprocal();
      complex1.readResolve();
      Complex complex5 = complex1.ONE.pow(1.1177616119384766);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.INF.multiply(1.1177616119384766);
      Complex complex8 = complex2.pow(complex4);
      complex4.multiply(1634);
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex8.ONE.cos();
      complex4.readResolve();
      complex10.getArgument();
      complex2.ONE.reciprocal();
      complex7.isInfinite();
      Complex complex11 = complex2.exp();
      complex1.isInfinite();
      complex1.I.sqrt1z();
      complex11.cos();
      complex1.multiply(complex4);
      complex7.hashCode();
      Complex complex12 = complex3.pow(complex9);
      complex12.nthRoot(1874);
      complex12.INF.subtract(complex6);
      complex9.createComplex((-389.0), 1.1177616119384766);
      complex5.reciprocal();
      complex9.abs();
      Complex complex13 = Complex.valueOf((-389.0));
      complex0.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1428571343421936);
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = Complex.valueOf((-2262.196937356));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.sin();
      complex0.getField();
      complex3.NaN.divide(complex1);
      complex0.isNaN();
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.valueOf((-7.897146442236022E215));
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.NaN.atan();
      complex7.NaN.sqrt();
      complex8.I.toString();
      Complex complex9 = complex8.NaN.createComplex(0.1428571343421936, 7);
      complex7.ONE.getArgument();
      Complex complex10 = complex9.NaN.subtract(0.0);
      Complex.valueOf((double) 7);
      Complex complex11 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      complex5.hashCode();
      Complex complex12 = complex6.sqrt1z();
      complex12.multiply((-7.897146442236022E215));
      complex2.multiply(complex11);
      complex4.pow((-1623.4));
      complex1.pow(complex2);
      complex0.toString();
      complex1.negate();
      complex10.multiply(7);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.reciprocal();
      complex2.I.multiply(990);
      complex2.NaN.exp();
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex0.ONE.atan();
      complex4.pow(complex3);
      complex1.I.hashCode();
      Complex complex5 = complex0.divide(complex1);
      complex0.INF.sqrt();
      complex5.divide(3680.5224248643);
      complex3.pow((double) 990);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1115.8184712955567));
      Complex complex1 = complex0.sin();
      complex1.ONE.nthRoot(1087);
      Complex complex2 = complex0.conjugate();
      complex0.exp();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.NaN.cos();
      complex6.ONE.readResolve();
      complex3.nthRoot(236);
      Complex complex7 = complex5.sinh();
      complex7.I.sinh();
      complex2.abs();
      complex0.add(complex6);
      complex0.I.negate();
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.NaN.readResolve();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.I.multiply(0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.ZERO.add(7.241626420445137E-206);
      Complex complex6 = complex5.INF.cosh();
      complex2.INF.multiply(5.05239404378821E31);
      Complex complex7 = complex1.multiply(complex4);
      complex4.NaN.acos();
      Complex complex8 = complex1.ZERO.sin();
      complex7.INF.toString();
      complex3.I.sinh();
      complex7.toString();
      complex1.isInfinite();
      complex3.equals(complex4);
      Complex complex9 = complex4.cos();
      Complex complex10 = complex9.NaN.createComplex(7.241626420445137E-206, 0.0);
      complex10.I.readResolve();
      Complex complex11 = complex9.I.tanh();
      Complex complex12 = complex0.cosh();
      complex4.toString();
      complex2.sqrt1z();
      Complex complex13 = complex0.conjugate();
      complex12.sqrt1z();
      Complex complex14 = complex13.sin();
      complex8.sqrt1z();
      Complex.valueOf(7.241626420445137E-206, 20.0);
      complex6.isInfinite();
      complex1.sqrt();
      complex14.multiply(complex11);
      complex12.createComplex(0.0, 648.7402419);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.add(complex0);
      complex3.NaN.sqrt1z();
      complex2.getImaginary();
      Complex complex4 = complex0.ONE.multiply(3232);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex1.pow(Double.NaN);
      complex7.tan();
      Complex complex9 = complex6.divide(Double.NaN);
      complex9.ONE.nthRoot(3232);
      complex9.ONE.sqrt();
      complex4.exp();
      complex6.readResolve();
      complex7.getImaginary();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex7.sin();
      Complex complex12 = complex11.subtract((double) 3232);
      complex12.ZERO.divide(0.0);
      Complex complex13 = complex1.conjugate();
      complex13.readResolve();
      complex5.acos();
      complex10.multiply(1);
      Complex complex14 = complex13.pow(complex8);
      Complex complex15 = complex10.log();
      complex15.NaN.cos();
      complex14.cos();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = new Complex(1.3748703002929688);
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex1.subtract(complex0);
      complex4.INF.sqrt1z();
      Complex complex5 = complex0.I.add(complex1);
      complex5.getArgument();
      Complex complex6 = complex4.NaN.negate();
      complex0.getReal();
      Complex complex7 = complex0.INF.log();
      complex7.I.createComplex(20.0, 20.0);
      complex3.getField();
      complex4.toString();
      complex0.INF.add(0.6288411582716097);
      complex1.INF.hashCode();
      complex1.multiply(2338.088029717);
      complex6.log();
      complex0.NaN.createComplex(0.6288411582716097, 0.6288411582716097);
      complex6.INF.sinh();
      complex2.toString();
      complex6.isInfinite();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-3842.91166742), (-3842.91166742));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.readResolve();
      complex0.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.negate();
      complex1.ZERO.exp();
      Complex complex5 = Complex.valueOf((-135.4839483), 0.0);
      Complex complex6 = complex4.NaN.tanh();
      Complex complex7 = complex6.INF.reciprocal();
      complex7.INF.nthRoot(269);
      complex5.ONE.sinh();
      complex4.INF.sqrt();
      Complex complex8 = complex1.reciprocal();
      complex0.readResolve();
      complex2.pow(complex1);
      complex1.getImaginary();
      Complex complex9 = complex4.sin();
      complex9.ONE.multiply(76);
      complex0.getImaginary();
      complex8.add(complex5);
      Complex complex10 = complex4.cos();
      complex10.getArgument();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(5.4557485189210095E73, 0.0);
      Complex complex1 = complex0.log();
      complex1.INF.cos();
      complex0.NaN.nthRoot(1175);
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.divide(complex1);
      complex3.NaN.toString();
      complex3.sin();
      complex2.log();
      complex0.getArgument();
      Complex.valueOf(5.4557485189210095E73, 0.0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.sqrt1z();
      complex2.log();
      complex2.ZERO.multiply(0.0);
      complex0.INF.sqrt();
      Complex complex3 = Complex.valueOf((-878.0));
      Complex complex4 = complex0.ZERO.multiply(161.09472821);
      Complex complex5 = complex1.multiply(1);
      complex5.ZERO.reciprocal();
      Complex complex6 = complex4.NaN.sinh();
      complex3.getArgument();
      complex6.readResolve();
      Complex complex7 = complex5.multiply(complex4);
      complex5.NaN.log();
      Complex complex8 = complex7.I.negate();
      complex7.I.sinh();
      complex8.ZERO.subtract(complex4);
      complex7.ZERO.acos();
      complex0.ONE.divide(complex6);
      complex7.subtract(0.0);
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.tanh();
      complex10.NaN.getField();
      Complex complex11 = complex1.add(complex0);
      Complex complex12 = complex0.pow(complex3);
      Complex complex13 = complex12.reciprocal();
      complex11.createComplex(1, 0.0);
      complex0.subtract(complex4);
      complex9.add(complex13);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.add(complex0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.divide(complex1);
      complex3.abs();
      complex2.sqrt();
      complex2.ONE.readResolve();
      complex1.I.getField();
      Complex complex4 = complex0.reciprocal();
      complex0.getField();
      Complex complex5 = complex1.exp();
      complex5.NaN.tanh();
      complex4.sinh();
      Complex complex6 = complex4.sinh();
      complex0.ZERO.add(complex2);
      Complex.valueOf(0.0);
      complex6.I.add(2518.72122);
      Complex complex7 = complex6.NaN.atan();
      complex1.sin();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = new Complex(1.2038281262953917E-213);
      Complex complex2 = complex1.NaN.sin();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.add(complex1);
      complex4.I.pow(complex2);
      complex4.INF.cosh();
      Complex complex5 = complex1.conjugate();
      complex5.I.multiply(complex2);
      complex3.ZERO.sqrt();
      complex5.INF.sqrt1z();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.add((-677.98918098653));
      complex7.NaN.createComplex((-677.98918098653), 3.601718675118614E-8);
      Complex complex8 = complex0.tan();
      complex8.ONE.sinh();
      complex6.toString();
      Complex complex9 = complex0.exp();
      complex9.ZERO.multiply(complex8);
      complex9.subtract(1.2038281262953917E-213);
      Complex complex10 = Complex.valueOf(1.2038281262953917E-213, 0.0);
      Complex complex11 = complex0.multiply((-677.98918098653));
      complex3.I.negate();
      complex11.NaN.sqrt();
      complex3.conjugate();
      complex10.subtract(3470.05724);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.INF.cos();
      complex0.negate();
      Complex complex2 = complex1.pow(complex0);
      complex1.sqrt1z();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.valueOf((-352.12));
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-840.913456616));
      complex1.divide(complex2);
      int int0 = (-9);
      try { 
        complex1.ONE.nthRoot((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -9
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.ZERO.pow((-46.8678284));
      complex2.NaN.multiply((-46.8678284));
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex3.add((-2.401816502004675E-309));
      complex4.NaN.getField();
      complex4.ONE.nthRoot(1);
      Complex complex5 = complex0.ONE.pow(complex3);
      Complex complex6 = complex1.I.reciprocal();
      Complex complex7 = complex0.acos();
      complex7.INF.readResolve();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex7.asin();
      complex3.I.tan();
      Complex complex10 = complex9.ONE.subtract(complex8);
      Complex complex11 = complex9.NaN.multiply(Double.POSITIVE_INFINITY);
      complex11.ONE.abs();
      Complex complex12 = complex9.ZERO.add((-46.8678284));
      Complex complex13 = complex0.log();
      complex0.ZERO.tan();
      Complex complex14 = complex13.log();
      complex14.ONE.negate();
      complex7.readResolve();
      complex5.abs();
      complex12.isNaN();
      complex6.exp();
      complex1.ONE.divide(Double.NaN);
      Complex.valueOf((-46.8678284));
      complex14.cos();
      complex3.sqrt();
      complex14.getReal();
      Complex complex15 = complex10.add(complex4);
      complex15.ZERO.subtract(complex13);
      complex15.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.multiply(3506);
      try { 
        complex1.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      complex0.abs();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.pow(0.0);
      Complex.valueOf(0.0, 0.0);
      complex1.NaN.multiply(0.0);
      Complex complex5 = complex4.ZERO.divide(2.0);
      Complex complex6 = complex2.tan();
      complex6.abs();
      complex3.getField();
      Complex complex7 = complex2.pow(complex6);
      complex7.I.multiply(844.9829266);
      Complex complex8 = complex7.add(2.0);
      complex8.ONE.multiply(1);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getField();
      Complex complex1 = Complex.NaN;
      complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.multiply((-2813));
      Complex complex3 = complex2.ZERO.createComplex((-2813), 0.0);
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex4.ONE.multiply((-476.6006259447));
      Complex complex6 = complex4.INF.multiply(0);
      Complex complex7 = complex6.ONE.divide(complex1);
      complex6.NaN.tanh();
      complex5.ZERO.multiply(0);
      Complex complex8 = complex2.INF.sqrt();
      Complex complex9 = complex0.multiply(complex1);
      complex9.atan();
      Complex complex10 = complex4.exp();
      complex1.getField();
      Complex complex11 = complex9.pow(complex0);
      Complex complex12 = complex11.ONE.sinh();
      Complex complex13 = complex12.ONE.reciprocal();
      complex2.I.cosh();
      Complex complex14 = complex5.tan();
      complex14.NaN.divide((-476.6006259447));
      complex14.ZERO.getArgument();
      complex10.atan();
      complex3.tanh();
      Complex complex15 = complex8.divide(0.0);
      Complex complex16 = complex14.cosh();
      complex16.I.pow((-476.6006259447));
      complex15.conjugate();
      complex10.equals("");
      complex0.subtract((-476.6006259447));
      complex13.toString();
      complex7.multiply(0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.subtract(996.11280714);
      complex0.INF.toString();
      Complex.valueOf(2.9046141593926277E-8, 0.0);
      Complex complex1 = complex0.subtract(1.145412771487496E-7);
      complex1.INF.abs();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ONE.createComplex(0.0, 0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1.0);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.tanh();
      complex3.atan();
      Complex complex4 = complex0.ONE.divide(0.0);
      complex4.ONE.acos();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.tan();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex2.I.cos();
      Complex complex10 = complex9.INF.conjugate();
      complex10.INF.subtract(complex6);
      complex6.ZERO.asin();
      Complex complex11 = complex0.pow(0.0);
      complex11.NaN.add(complex8);
      complex7.ONE.readResolve();
      complex7.subtract(complex6);
      Complex complex12 = complex11.pow(complex2);
      int int0 = (-570);
      complex12.I.hashCode();
      try { 
        complex7.nthRoot((-570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -570
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.multiply(complex2);
      complex3.ZERO.tan();
      Complex complex4 = complex2.NaN.add(263.6441);
      Complex complex5 = complex0.I.sqrt();
      complex2.conjugate();
      complex1.ONE.divide(263.6441);
      complex0.getReal();
      Complex complex6 = Complex.valueOf(1.0, 1.0);
      complex0.getReal();
      complex2.abs();
      complex0.NaN.subtract(263.6441);
      Complex complex7 = complex0.multiply(complex1);
      complex5.I.pow(complex1);
      Complex complex8 = complex0.subtract(1.0);
      complex6.ZERO.pow(complex5);
      complex8.readResolve();
      complex6.log();
      Complex complex9 = Complex.valueOf(263.6441, 1.0);
      Complex complex10 = complex9.createComplex(1.0, 3247.0);
      Complex complex11 = Complex.valueOf(1.0, 263.6441);
      Complex complex12 = complex8.subtract(1.0);
      complex8.hashCode();
      complex4.getArgument();
      Complex complex13 = complex10.multiply(1113);
      complex13.I.getField();
      complex11.exp();
      complex12.sqrt1z();
      complex7.cosh();
      complex3.negate();
      Complex complex14 = complex1.divide(complex8);
      complex14.NaN.sqrt();
      complex7.nthRoot(1113);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.subtract(complex0);
      complex2.subtract(complex0);
      complex0.ZERO.hashCode();
      complex2.NaN.readResolve();
      Complex complex3 = complex0.ZERO.subtract(1.0);
      Complex complex4 = complex0.tanh();
      complex4.getArgument();
      complex3.add(Double.NaN);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1776.9919, 1776.9919);
      complex0.getReal();
      Complex complex1 = complex0.pow(1776.9919);
      complex1.NaN.hashCode();
      complex0.multiply(1776.9919);
      Complex complex2 = complex0.divide(2.468626868232408E192);
      Complex complex3 = complex1.INF.tan();
      complex3.ONE.abs();
      complex2.NaN.divide(0.0);
      complex1.nthRoot(1);
      Complex complex4 = complex2.atan();
      complex3.INF.getField();
      Complex complex5 = complex1.divide(2.468626868232408E192);
      Complex complex6 = complex5.sin();
      complex6.ZERO.getField();
      complex5.isInfinite();
      complex5.hashCode();
      Complex complex7 = complex5.conjugate();
      complex6.isInfinite();
      complex7.NaN.readResolve();
      complex6.getImaginary();
      complex7.reciprocal();
      Complex complex8 = complex3.subtract(1776.9919);
      complex4.abs();
      complex7.nthRoot(668);
      Complex complex9 = complex8.add(complex0);
      complex9.I.multiply((-2315.0));
      complex5.pow((double) 668);
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.I.add(complex1);
      complex6.INF.asin();
      complex2.ZERO.add((-1.0));
      Complex complex7 = complex4.I.pow(complex2);
      complex1.NaN.sqrt();
      complex0.abs();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex4.cos();
      complex1.I.negate();
      Complex complex10 = complex9.INF.multiply(1);
      complex0.isNaN();
      Complex complex11 = Complex.valueOf(797.2409376696);
      complex11.exp();
      Complex complex12 = complex5.cos();
      complex12.ZERO.readResolve();
      complex8.negate();
      complex5.INF.getField();
      complex8.pow(complex3);
      complex7.getImaginary();
      try { 
        complex10.nthRoot((-4196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,196
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.738246981762776E132));
      Complex complex1 = Complex.valueOf((-2.738246981762776E132));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-764.0));
      complex0.INF.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.multiply((-5213.551525527718));
      Complex complex3 = complex1.INF.cos();
      complex3.INF.atan();
      complex2.ZERO.toString();
      Complex complex4 = Complex.valueOf(1.545909820981726E-8, 1.545909820981726E-8);
      complex4.ZERO.negate();
      complex4.INF.hashCode();
      complex3.I.acos();
      complex2.ZERO.getField();
      Complex complex5 = complex2.NaN.tanh();
      complex5.ZERO.toString();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.INF.negate();
      complex7.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.exp();
      complex2.toString();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.I.cos();
      complex10.sin();
      Complex complex11 = complex8.negate();
      complex9.getImaginary();
      Complex complex12 = complex2.pow(1.545909820981726E-8);
      complex12.ZERO.tanh();
      complex12.NaN.toString();
      complex11.isInfinite();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-196.888392449827));
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf((-196.888392449827));
      complex2.ZERO.abs();
      Complex complex3 = complex2.INF.tan();
      complex2.ZERO.readResolve();
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex1.I.sqrt();
      Complex complex6 = complex5.ONE.multiply(37);
      complex0.ONE.divide((double) 37);
      complex2.NaN.tan();
      complex0.equals((Object) null);
      Complex complex7 = complex1.divide(complex0);
      String string0 = complex4.toString();
      assertEquals("(1.5430806348152437, 0.0)", string0);
      
      Complex complex8 = complex1.INF.cosh();
      Complex complex9 = complex8.divide(0.0);
      Complex complex10 = complex7.divide((-196.888392449827));
      double double0 = complex10.abs();
      assertEquals(1.58550255004741E-4, double0, 0.01);
      
      Complex complex11 = complex2.ZERO.cosh();
      complex0.getImaginary();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex1.conjugate();
      complex13.INF.sin();
      Complex complex14 = complex7.cosh();
      assertEquals(1.0002326191456172, complex14.getReal(), 0.01);
      
      Complex complex15 = complex4.pow(1.58550255004741E-4);
      assertEquals(1.0000687784264168, complex15.getReal(), 0.01);
      
      Complex complex16 = complex3.cosh();
      assertSame(complex16, complex9);
      
      Complex complex17 = complex6.negate();
      assertEquals((-37.0), complex17.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex5.getImaginary(), 0.01);
      
      Complex complex18 = complex8.add(0.0);
      assertNotSame(complex18, complex13);
      
      Complex complex19 = complex2.divide(726.733141801837);
      assertEquals((-0.27092254518855263), complex19.getReal(), 0.01);
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      
      Complex complex20 = complex11.pow(0.0);
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex12.subtract(complex4);
      Complex complex22 = complex21.asin();
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(-0.0, complex22.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1855.8926));
      Complex complex1 = complex0.cosh();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.NaN.multiply(2536);
      complex3.INF.cos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ZERO.conjugate();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.add(complex1);
      complex4.cos();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.multiply((-1819));
      assertFalse(complex0.isInfinite());
      assertEquals((-1855.8926), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertSame(complex9, complex7);
      assertSame(complex8, complex5);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.tan();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex1.NaN.getField();
      Complex complex3 = complex0.ONE.add(Double.NaN);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex4.ONE.add(155.2);
      assertEquals(156.2, complex5.getReal(), 0.01);
      assertSame(complex3, complex1);
      
      Complex complex6 = Complex.valueOf(1439.4437999586962, 0.0);
      Complex complex7 = complex0.pow(1341.75030599);
      complex7.ZERO.exp();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      complex0.createComplex((-2.302351152358085E-9), 389.964835768);
      assertTrue(complex0.equals((Object)complex7));
      
      double double0 = complex6.getReal();
      assertEquals(1439.4437999586962, double0, 0.01);
      
      complex6.hashCode();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex((-464.866203389));
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex1.I.log();
      complex0.ONE.getArgument();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex3.ZERO.add(7.120586694432509E53);
      assertEquals(7.120586694432509E53, complex4.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex5 = complex1.NaN.sin();
      complex5.INF.createComplex(0.0, 990.3956923267663);
      complex0.getArgument();
      complex0.negate();
      Complex complex6 = complex2.cos();
      assertSame(complex1, complex5);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
  }
}
