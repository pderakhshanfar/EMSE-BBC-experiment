/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:50:46 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0, (-1.3331969720555312E-35));
      Complex complex2 = Complex.valueOf(1.0, 5544610.089999999);
      Complex complex3 = complex1.divide(complex2);
      complex0.pow(5544610.089999999);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.valueOf((-2110.37));
      complex6.multiply(complex2);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.valueOf((-1.3331969720555312E-35), Double.POSITIVE_INFINITY);
      complex8.multiply(complex1);
      Complex complex9 = new Complex(Double.NaN);
      complex9.sqrt1z();
      complex3.nthRoot(921);
      complex5.multiply(7);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4199.902744264), Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      complex3.sqrt1z();
      try { 
        complex1.nthRoot((-876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -876
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-1.3331969720555312E-35), Double.POSITIVE_INFINITY);
      complex0.multiply(900);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(5544630.959784674, (-1650.5992861769));
      Complex complex2 = new Complex((-1.76097684E-316));
      complex1.add(complex0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.add(complex4);
      complex5.ONE.reciprocal();
      Complex complex6 = complex3.add(6.283185307179586);
      complex0.tanh();
      complex0.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.negate();
      complex6.negate();
      Complex complex9 = new Complex(6.283185307179586, 0.4909018874168396);
      complex9.sqrt1z();
      Complex complex10 = new Complex(0.4556184411048889, 0.4556184411048889);
      complex10.negate();
      complex6.toString();
      complex8.sqrt1z();
      complex0.multiply(0.4909018874168396);
      complex8.nthRoot(716);
      complex1.multiply((-1650.5992861769));
      complex2.multiply(complex3);
      complex0.sin();
      complex4.add(820918.5534461321);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(863);
      Complex complex2 = complex0.reciprocal();
      complex0.multiply(complex2);
      complex2.subtract(783.71267);
      complex2.reciprocal();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.ONE;
      complex0.I.getField();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex0.NaN.sin();
      complex5.ONE.cosh();
      Complex complex6 = complex3.NaN.negate();
      Complex complex7 = Complex.valueOf((-3436.98352685), (-3436.98352685));
      Complex complex8 = complex0.multiply(complex2);
      Complex complex9 = complex8.acos();
      complex9.sqrt1z();
      complex3.asin();
      Complex complex10 = complex4.tan();
      Complex complex11 = complex10.I.reciprocal();
      complex10.I.multiply((-1));
      complex9.sqrt1z();
      Complex.valueOf((double) (-1), (-3436.98352685));
      Complex complex12 = complex5.sin();
      complex12.divide(12.41544734030846);
      complex10.NaN.atan();
      Complex complex13 = Complex.valueOf(1672.4541360055);
      complex11.atan();
      complex9.pow(complex1);
      complex12.asin();
      complex7.add((double) (-1));
      complex13.multiply(complex6);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.atan();
      complex1.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.createComplex(1529.313469038187, (-2463.976868770798));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-4030.9053098043155));
      complex1.acos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.nthRoot(125);
      complex1.getField();
      Complex.valueOf(618.79754024, 2.510812179067931E-272);
      complex1.I.createComplex(1232.9881960341038, 1942.3883144915);
      Complex complex2 = complex1.tanh();
      complex2.nthRoot(125);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-361641.02333130565), (-0.17297635938034406));
      complex0.log();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.519432805804635E9);
      Complex complex1 = new Complex(6.519432805804635E9, 6.519432805804635E9);
      Complex.valueOf(6.519432805804635E9, 6.519432805804635E9);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(6.519432805804635E9);
      complex2.asin();
      complex3.tan();
      complex1.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      double double0 = (-1449.0829);
      Complex complex2 = complex1.subtract((-1449.0829));
      complex2.ONE.getField();
      complex1.ONE.getField();
      Complex complex3 = complex0.ONE.tanh();
      int int0 = 17;
      complex3.INF.multiply(17);
      complex0.INF.readResolve();
      Complex complex4 = complex0.ONE.atan();
      complex4.I.divide(complex0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(5423967.479680222, (-361655.24654952466));
      Complex complex1 = new Complex(5423967.479680222);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-2328.9414934));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.cosh();
      complex6.ZERO.acos();
      complex4.multiply((-569));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-2328.9414934));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.asin();
      complex3.INF.add(complex2);
      Complex complex4 = new Complex(3.683043641790553E-251);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.acos();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-2328.9414934));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.asin();
      complex3.INF.add(complex2);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex1.pow((-2328.9414934));
      Complex complex7 = complex3.tan();
      complex7.ONE.multiply(complex3);
      Complex complex8 = complex1.add(complex2);
      complex5.conjugate();
      complex8.subtract(complex4);
      complex7.multiply(109);
      try { 
        complex6.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.subtract((-20.0));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.I.pow(complex2);
      complex3.INF.asin();
      Complex complex4 = complex1.INF.add(1.3523731468012556E-8);
      complex4.ONE.sin();
      complex0.tanh();
      Complex complex5 = complex2.createComplex((-20.0), (-374.62378876213));
      Complex complex6 = complex5.reciprocal();
      complex1.divide(complex6);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1200.42991));
      Complex complex1 = complex0.conjugate();
      double double0 = 2780.793974501474;
      Complex complex2 = complex0.ZERO.pow(2780.793974501474);
      complex2.NaN.sqrt();
      Complex complex3 = complex1.cos();
      complex1.I.abs();
      complex1.I.multiply(complex0);
      Complex.valueOf((-1248.0));
      complex0.ZERO.cos();
      Complex complex4 = new Complex((-1200.42991), Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex3.equals(complex4);
      int int0 = (-1);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.519432805804635E9);
      Complex complex1 = complex0.acos();
      complex1.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(6.519432805804635E9);
      complex2.asin();
      complex3.tan();
      complex1.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.subtract((-6.519432805804635E9));
      complex0.ZERO.subtract((-1240.6));
      complex0.multiply((-1.0));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-20.0));
      Complex complex1 = Complex.NaN;
      complex0.toString();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf((-1.0));
      complex2.ONE.add(complex3);
      Complex complex4 = complex0.multiply(949.02299352);
      complex0.pow(complex4);
      complex0.getArgument();
      complex2.pow(complex0);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.reciprocal();
      complex2.subtract(complex4);
      Complex complex7 = complex2.subtract(4.123026721295484E187);
      complex5.tan();
      complex6.abs();
      complex7.INF.abs();
      complex7.sinh();
      Complex complex8 = new Complex((-3899.602653), 2589.0783600472037);
      complex8.add(complex4);
      complex7.cos();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
      complex0.nthRoot(1768);
      Complex complex1 = Complex.valueOf(1444.79171);
      Complex complex2 = complex1.divide((-65.15));
      complex2.tanh();
      complex2.createComplex(1.862220597145169E20, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.I.cosh();
      complex1.ZERO.abs();
      complex0.ZERO.sqrt1z();
      complex0.asin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex2.INF.add(complex0);
      Complex complex3 = Complex.ZERO;
      complex0.cos();
      complex1.subtract(complex0);
      complex2.isNaN();
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2317.16, 1.0);
      Complex complex1 = complex0.tan();
      complex1.INF.conjugate();
      complex0.INF.sin();
      Complex complex2 = complex0.subtract(2317.16);
      Complex complex3 = complex2.log();
      complex3.add(Double.NaN);
      complex2.multiply(626);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
      complex0.nthRoot(1768);
      Complex complex1 = complex0.log();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.divide(Double.NaN);
      complex2.asin();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.multiply(1753);
      complex0.tanh();
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract((-339.3339));
      complex0.acos();
      // Undeclared exception!
      complex2.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.sin();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.multiply((-1.0));
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex2.reciprocal();
      complex2.readResolve();
      complex4.equals(complex3);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(2957.475143, 2957.475143);
      complex0.NaN.abs();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.pow(complex1);
      complex2.readResolve();
      complex1.hashCode();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex3.INF.tan();
      complex4.I.conjugate();
      complex4.INF.createComplex(Double.NaN, 1.0);
      complex3.I.getField();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.valueOf(2957.475143);
      Complex complex7 = Complex.valueOf(2957.475143, 2957.475143);
      Complex complex8 = complex7.I.reciprocal();
      complex1.ONE.hashCode();
      Complex.valueOf(2957.475143);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.cosh();
      complex1.getField();
      complex5.exp();
      complex7.abs();
      Complex complex11 = complex2.createComplex(4182.501457611909, (-1227.8488188));
      complex6.createComplex((-1227.8488188), 0.19622188806533813);
      complex8.log();
      complex10.divide(4182.501457611909);
      complex7.tan();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1864.5952934665));
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.abs();
      Complex complex5 = complex2.log();
      Complex complex6 = complex2.sin();
      complex6.ZERO.toString();
      Complex complex7 = complex6.NaN.log();
      complex7.ONE.abs();
      complex1.divide((-1864.5952934665));
      complex2.I.abs();
      complex0.abs();
      complex1.abs();
      Complex complex8 = complex5.sqrt1z();
      complex8.NaN.nthRoot(1);
      Complex complex9 = complex2.NaN.createComplex(0.0, (-20.0));
      complex2.toString();
      Complex complex10 = complex2.divide(3.141592653589793);
      complex10.pow(complex9);
      complex1.exp();
      Complex complex11 = Complex.valueOf((-1182.820878095), 0.12814581394195557);
      complex1.conjugate();
      complex11.add(0.6759096384048462);
      Complex.valueOf((-20.0), (double) 1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0), (-20.0));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(2188.329, (-361641.02333130565));
      Complex complex1 = complex0.divide((-2834.493013942709));
      complex1.divide((-1202.7327605601051));
      complex0.I.sinh();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 3.2850043261803593E68);
      complex0.equals(complex2);
      Complex complex3 = complex2.atan();
      complex3.acos();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.valueOf(147.2);
      complex2.asin();
      complex2.tan();
      complex3.multiply(944679875);
      Complex complex5 = new Complex(147.2, Double.NaN);
      complex5.reciprocal();
      Complex complex6 = Complex.NaN;
      complex5.add(complex1);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1071983674869414E-8, 2317.16);
      complex0.toString();
      Complex complex1 = complex0.subtract((-1483.369376616));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex7.tanh();
      complex6.hashCode();
      complex8.getField();
      complex1.getField();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex1.cos();
      complex11.ZERO.tan();
      Complex complex12 = Complex.valueOf(1.0431875573076199E-7, (-1.0));
      complex12.NaN.createComplex(2.1071983674869414E-8, 1.0431875573076199E-7);
      Complex complex13 = complex9.pow(1.0431875573076199E-7);
      complex10.sqrt1z();
      Complex complex14 = new Complex((-1483.369376616), 2317.16);
      complex14.reciprocal();
      complex3.add(complex10);
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.divide((-49.7));
      complex1.createComplex(0.0, (-1295.46));
      complex2.add(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.sin();
      Complex complex5 = new Complex((-49.7), (-177.837));
      complex5.sqrt1z();
      complex2.reciprocal();
      complex2.add(complex4);
      Complex complex6 = Complex.valueOf((-1.0));
      complex6.tanh();
      complex3.exp();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.log();
      complex0.I.reciprocal();
      complex1.cosh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = Complex.valueOf(519.4245646867564, (-732.74727558));
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex4.log();
      Complex.valueOf(519.4245646867564, 0.002133181944457723);
      Complex complex6 = complex0.multiply(complex3);
      complex6.multiply(complex3);
      complex3.reciprocal();
      complex2.add(351.0);
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex1.ZERO.multiply(827.9142);
      Complex complex2 = complex0.multiply(4685.4868);
      Complex complex3 = complex1.pow(complex2);
      complex3.INF.multiply((-2254));
      Complex.valueOf(Double.NaN, 4685.4868);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.divide(0.0);
      Complex complex1 = complex0.INF.divide((-311.839846));
      complex1.INF.conjugate();
      complex0.abs();
      complex0.sin();
      Complex complex2 = new Complex((-1.8196842273916379E241), 318.67603315876);
      complex2.sqrt1z();
      Complex complex3 = Complex.ZERO;
      complex3.reciprocal();
      Complex complex4 = Complex.valueOf(1558.008109);
      complex1.add(complex4);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(2188.329, (-361641.02333130565));
      complex0.toString();
      Complex complex1 = complex0.subtract((-1349.4012825644));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.exp();
      complex3.ONE.atan();
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = Complex.INF;
      complex4.ONE.tanh();
      complex2.hashCode();
      complex0.ONE.getField();
      complex2.I.getField();
      Complex complex6 = complex2.ONE.tanh();
      Complex complex7 = complex2.cos();
      Complex.valueOf(1202.7327605601051, 1202.7327605601051);
      complex7.INF.pow((-361641.02333130565));
      Complex complex8 = complex0.negate();
      Object object0 = complex8.ZERO.readResolve();
      ((Complex) object0).ZERO.pow(complex1);
      Complex complex9 = complex8.pow(2051.110846903);
      complex9.tanh();
      Complex complex10 = Complex.INF;
      complex6.multiply(complex10);
      complex0.getImaginary();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(4280.117951635712, (-1.0));
      complex1.toString();
      Complex complex2 = complex1.subtract(0.8414709848078965);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.atan();
      complex2.add(complex1);
      Complex complex6 = Complex.valueOf(1706.32);
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex0.tanh();
      complex7.hashCode();
      Complex complex9 = new Complex(1156.0215601824991, 1.3845596850783601E7);
      complex9.getField();
      complex1.getField();
      complex5.tanh();
      complex2.cos();
      Complex complex10 = Complex.valueOf((-1351.0), 1202.7327605601051);
      complex1.pow(1.7931687831878662);
      complex5.negate();
      complex0.readResolve();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.pow((-1351.0));
      complex10.tanh();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = new Complex(1706.32);
      complex4.multiply(complex14);
      complex8.getImaginary();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract((-2946.609963765359));
      complex0.acos();
      complex0.nthRoot(1768);
      Complex complex1 = Complex.valueOf(1444.79171);
      complex1.divide((-65.15));
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2188.329, (-361641.02333130565));
      complex0.toString();
      Complex complex1 = complex0.subtract((-1349.4012825644));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.exp();
      complex3.ONE.atan();
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex4.NaN.add(complex3);
      complex5.INF.sqrt();
      complex4.ONE.tanh();
      complex2.hashCode();
      complex0.ONE.getField();
      complex1.getField();
      Complex complex6 = complex2.ONE.tanh();
      Complex complex7 = complex2.cos();
      Complex.valueOf(1202.7327605601051, 1202.7327605601051);
      complex7.INF.pow((-361641.02333130565));
      Complex complex8 = complex0.negate();
      complex8.ZERO.readResolve();
      Complex complex9 = complex8.pow(2051.110846903);
      complex9.tanh();
      Complex complex10 = Complex.ZERO;
      complex6.multiply(complex10);
      complex0.getImaginary();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      Complex.valueOf(65.430252572);
      Complex complex3 = complex2.multiply(3126.8115920875);
      Complex complex4 = new Complex(1202.7327605066196);
      complex3.pow(complex4);
      Complex.valueOf(869.8114268, 6.283185307179586);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(2188.329, (-361641.02333130565));
      complex0.toString();
      Complex complex1 = complex0.subtract((-1349.4012825644));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.exp();
      complex3.ONE.atan();
      Complex complex4 = complex3.ZERO.add(complex2);
      complex4.NaN.add(complex3);
      complex4.ONE.tanh();
      complex2.hashCode();
      complex0.ONE.getField();
      complex2.I.getField();
      Complex complex5 = complex2.ONE.tanh();
      Complex complex6 = complex2.cos();
      Complex.valueOf(1202.7327605601051, 1202.7327605601051);
      complex6.INF.pow((-361641.02333130565));
      Complex complex7 = complex0.negate();
      complex7.ZERO.readResolve();
      Complex complex8 = complex7.pow(2051.110846903);
      complex8.tanh();
      Complex complex9 = Complex.ZERO;
      complex5.multiply(complex9);
      complex0.getImaginary();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.divide(0.0);
      Complex complex1 = complex0.INF.divide((-311.839846));
      complex1.INF.conjugate();
      complex0.abs();
      complex1.hashCode();
      complex0.subtract((-311.839846));
      complex0.log();
      complex1.add((-311.839846));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(1592.1439788918);
      complex0.getField();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.subtract((-20.0));
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.multiply(complex5);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.negate();
      complex4.readResolve();
      complex3.toString();
      Complex complex10 = complex6.divide(Double.NaN);
      complex0.INF.multiply(complex10);
      complex9.log();
      complex5.sin();
      Complex complex11 = complex5.reciprocal();
      complex8.sqrt1z();
      complex10.reciprocal();
      complex4.add(complex11);
      complex5.tanh();
      complex1.acos();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.NaN.getField();
      Complex complex1 = Complex.valueOf(8.857662679720661E-11, 8.857662679720661E-11);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.pow(8.857662679720661E-11);
      Complex complex4 = complex0.tanh();
      complex2.ONE.conjugate();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.ONE.reciprocal();
      complex6.ZERO.hashCode();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex7.ONE.exp();
      complex7.ONE.multiply(8.857662679720661E-11);
      Complex complex9 = Complex.valueOf(8.857662679720661E-11, 8.857662679720661E-11);
      Complex complex10 = complex9.subtract(8.857662679720661E-11);
      Complex complex11 = complex7.subtract((-2633.09297015687));
      complex2.atan();
      Complex complex12 = complex10.divide(complex2);
      Complex complex13 = new Complex(2.0);
      Complex complex14 = Complex.valueOf(1563.27164);
      complex14.subtract(1563.27164);
      Complex complex15 = complex14.divide(2.0);
      complex12.pow(complex8);
      complex0.reciprocal();
      Complex complex16 = Complex.valueOf(2.0, (-1507.89588379));
      complex16.reciprocal();
      Complex complex17 = new Complex(1427.805223812, 8.857662679720661E-11);
      complex15.tan();
      complex7.subtract(complex11);
      complex13.multiply(complex16);
      complex5.readResolve();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-2946.609963765359));
      complex0.acos();
      complex1.nthRoot(1770);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.multiply(2387);
      complex3.multiply(1.573964437869041E134);
      complex1.tanh();
      complex2.sin();
      Complex complex4 = Complex.I;
      complex4.getImaginary();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(1.0, 65.430252572);
      complex2.subtract(complex6);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.NaN.getField();
      Complex complex1 = Complex.valueOf(8.857662679720661E-11, 8.857662679720661E-11);
      complex0.pow(complex1);
      Complex complex2 = complex0.pow(8.857662679720661E-11);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ZERO.hashCode();
      Complex complex6 = complex5.I.tan();
      complex6.ONE.exp();
      complex6.ONE.multiply(8.857662679720661E-11);
      Complex complex7 = complex2.subtract(2.0);
      complex3.ONE.subtract(8.857662679720661E-11);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.ONE.divide(complex3);
      Complex complex10 = complex3.ONE.asin();
      complex10.NaN.subtract(2.0);
      Complex complex11 = complex0.divide(8.857662679720661E-11);
      complex7.pow(complex1);
      Complex complex12 = complex3.reciprocal();
      complex8.reciprocal();
      complex2.createComplex((-361641.02333130565), (-361641.02333130565));
      complex3.tan();
      complex9.subtract(complex12);
      complex3.multiply(complex1);
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1563.27164);
      complex1.multiply(4197);
      Complex complex2 = complex0.I.divide(complex1);
      complex0.getReal();
      Complex complex3 = complex0.subtract(0.0);
      complex3.acos();
      complex2.createComplex(4197, 1729.7996335345);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = Complex.I;
      complex0.sqrt();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex2.pow(0.1111111111111111);
      complex6.I.createComplex(0.1111111111111111, 0.1111111111111111);
      complex5.subtract(329.1871);
      Complex complex7 = complex0.acos();
      complex1.nthRoot(1209);
      complex5.acos();
      Complex complex8 = complex7.multiply(1247);
      Complex complex9 = complex0.multiply((double) 1247);
      Complex complex10 = complex8.tanh();
      complex10.sin();
      complex9.getImaginary();
      complex10.subtract(complex7);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(65.430252572);
      complex4.asin();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.multiply(944679875);
      complex4.isInfinite();
      Complex complex7 = complex1.createComplex(65.430252572, 1465.2);
      Complex complex8 = complex5.divide(complex4);
      complex8.add(0.0);
      complex7.isNaN();
      complex3.conjugate();
      Complex complex9 = Complex.ONE;
      complex6.add(complex0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.cosh();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = new Complex(2.145699627E9, 2.145699627E9);
      Complex complex4 = complex3.divide(2.527306200761359E-6);
      complex4.NaN.multiply(113);
      Object object0 = complex4.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-601.366796));
      Complex complex1 = complex0.acos();
      complex1.readResolve();
      Complex complex2 = complex0.createComplex((-601.366796), 0.0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex1.sin();
      complex2.sqrt1z();
      complex4.reciprocal();
      complex0.add(complex5);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-601.366796));
      Complex complex1 = complex0.acos();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.subtract(761.4903563);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex1.cos();
      complex5.negate();
      Complex complex8 = Complex.I;
      complex8.readResolve();
      complex6.toString();
      complex3.divide((-601.366796));
      complex5.log();
      complex4.sin();
      complex7.reciprocal();
      Complex complex9 = complex7.sqrt1z();
      complex2.reciprocal();
      Complex complex10 = Complex.NaN;
      complex9.add(complex10);
      Complex complex11 = Complex.valueOf((-601.366796));
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.divide((-49.7));
      complex2.tanh();
      Complex complex3 = complex1.sin();
      complex3.ZERO.multiply(1852);
      complex2.getImaginary();
      Complex complex4 = complex1.subtract(complex2);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.negate();
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.multiply(0.0);
      complex2.hashCode();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.add(0.0);
      Complex complex9 = complex8.tan();
      complex3.pow(complex9);
      Complex complex10 = complex5.multiply(0.0);
      complex6.sin();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex6.divide(0.0);
      complex0.exp();
      complex11.conjugate();
      Complex.valueOf(0.0, 1874.2955729);
      Complex complex13 = complex12.asin();
      complex1.sqrt();
      complex10.multiply(1874.2955729);
      Complex complex14 = new Complex(1202.7327605601051);
      complex14.equals(complex1);
      complex13.tanh();
      Complex complex15 = Complex.ONE;
      complex15.createComplex(1.0, 601.366796);
      complex12.pow(complex8);
      complex12.acos();
      complex11.log();
      complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.ONE.subtract(complex1);
      complex1.NaN.multiply((-4.734187609526424E-8));
      complex2.toString();
      complex3.ZERO.tanh();
      Complex complex5 = Complex.valueOf(2415.8447, 2415.8447);
      complex2.isInfinite();
      Complex complex6 = complex1.log();
      complex5.abs();
      Complex complex7 = complex6.subtract(3416.5203393271613);
      complex0.subtract(complex4);
      Complex complex8 = complex7.I.exp();
      complex7.subtract(2661.8874555086963);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2145699627));
      complex1.isInfinite();
      Complex complex2 = complex0.createComplex((-2119.245793539405), 523.41);
      complex2.ONE.add(complex0);
      Complex complex3 = complex0.divide(complex1);
      complex3.NaN.divide((-2119.245793539405));
      Complex complex4 = complex1.add(1416.691);
      Complex complex5 = Complex.NaN;
      complex4.conjugate();
      Complex complex6 = Complex.ONE;
      complex1.add(complex4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-2903.1));
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.multiply((-2903.1));
      complex3.hashCode();
      complex0.add(3.5371542244169364E-8);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex3.multiply(2056.4951989);
      complex4.sin();
      Complex complex7 = Complex.ZERO;
      complex7.sqrt();
      Complex complex8 = complex3.divide(2495.933245591729);
      Complex complex9 = complex5.exp();
      complex6.conjugate();
      Complex.valueOf(608.832174, 2495.933245591729);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex4.sqrt();
      complex11.multiply((-2903.1));
      complex4.equals(complex1);
      complex10.tanh();
      complex9.createComplex(2495.933245591729, (-2903.1));
      complex4.pow(complex8);
      complex9.acos();
      complex8.log();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      complex0.I.readResolve();
      complex1.ONE.acos();
      complex0.I.tanh();
      complex0.sin();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(20.52065);
      Complex complex1 = new Complex((-984.177514188071), 0.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.pow((-984.177514188071));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1069.55, (-984.177514188071));
      complex1.toString();
      Complex complex2 = complex0.tanh();
      Complex.valueOf(88.6206723742467, (-984.177514188071));
      complex1.isInfinite();
      Complex complex3 = complex0.log();
      complex2.abs();
      complex3.subtract(Double.NaN);
      Complex complex4 = Complex.ONE;
      complex2.subtract(complex4);
      Complex complex5 = Complex.I;
      complex5.subtract((-5344.0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.sin();
      complex2.multiply(4468);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 3.2081817253680657E168);
      complex3.isNaN();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.reciprocal();
      complex0.sqrt();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex2.pow(0.1111111111111111);
      complex7.I.createComplex(0.1111111111111111, 0.1111111111111111);
      complex6.subtract(329.1871);
      Complex complex8 = complex4.acos();
      complex1.nthRoot(1209);
      complex6.acos();
      Complex complex9 = complex8.multiply(1247);
      Complex complex10 = complex0.multiply((double) 1247);
      Complex complex11 = complex9.tanh();
      complex11.sin();
      complex10.getImaginary();
      complex11.subtract(complex8);
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(0.1111111111111111);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.INF.sqrt();
      complex4.INF.divide(complex2);
      Complex complex5 = complex2.NaN.pow(0.1111111111111111);
      complex5.NaN.subtract(0.1111111111111111);
      Complex complex6 = complex3.INF.acos();
      complex6.I.nthRoot(1247);
      Complex complex7 = Complex.valueOf(329.1871);
      complex7.ONE.acos();
      Complex complex8 = complex7.NaN.multiply(1247);
      complex0.multiply(873.1962396);
      complex7.tanh();
      complex8.sin();
      complex8.getImaginary();
      complex3.subtract(complex8);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ZERO.hashCode();
      complex0.ONE.cos();
      complex0.ONE.nthRoot(1531);
      complex0.NaN.hashCode();
      complex0.sinh();
      Complex complex1 = complex0.ONE.multiply((-975));
      Complex complex2 = complex1.cosh();
      complex1.ZERO.asin();
      Complex complex3 = complex2.divide(1522.5562792733558);
      Complex complex4 = complex3.ONE.atan();
      complex4.conjugate();
      complex0.hashCode();
      complex0.hashCode();
      complex1.conjugate();
      Complex.valueOf(5112.307, (-271.898590485768));
      Complex complex5 = Complex.valueOf(0.0);
      complex5.NaN.pow(1.9369852542877197);
      complex5.I.atan();
      complex3.getImaginary();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      complex0.sin();
      Complex complex1 = complex0.ONE.tan();
      complex1.ONE.hashCode();
      complex0.I.abs();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.ZERO.tanh();
      complex0.getField();
      complex0.getImaginary();
      Complex complex5 = Complex.I;
      complex5.NaN.getField();
      complex0.equals(complex5);
      Complex complex6 = complex2.multiply(1.0);
      complex6.ZERO.hashCode();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.INF.add(0.0);
      complex8.I.pow(0.0);
      complex3.add(complex2);
      Complex.valueOf(0.0, 1.0);
      complex0.readResolve();
      complex6.subtract((-2091.2185871441));
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2132.3575911994494));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.valueOf((-2132.3575911994494), 2521.3755940209);
      complex0.ONE.createComplex(930.539605, (-2132.3575911994494));
      Complex complex3 = complex1.log();
      complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.I.add(complex0);
      complex4.NaN.multiply((-2178));
      complex4.NaN.getArgument();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex0.exp();
      complex2.getField();
      complex6.add(930.539605);
      complex0.asin();
      complex6.exp();
      Complex complex7 = complex5.subtract((-2132.3575911994494));
      Complex.valueOf(2.0, 2835.3);
      complex7.add((double) (-2178));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      complex1.INF.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      complex3.INF.exp();
      Complex complex4 = complex3.ZERO.divide(complex2);
      complex3.NaN.abs();
      Complex complex5 = complex2.NaN.multiply(0.0);
      Complex complex6 = complex3.I.acos();
      complex6.NaN.log();
      complex2.INF.toString();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.I.log();
      complex8.tanh();
      Complex complex9 = complex2.tanh();
      complex9.abs();
      complex0.sqrt();
      complex9.NaN.tanh();
      Complex complex10 = complex9.ZERO.acos();
      complex4.isInfinite();
      Complex complex11 = complex9.pow(0.0);
      complex11.NaN.conjugate();
      Complex complex12 = complex5.multiply(Double.NaN);
      complex0.tan();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex13.ONE.sqrt1z();
      complex2.asin();
      complex7.abs();
      complex10.sinh();
      Complex complex15 = complex13.sqrt1z();
      complex15.ZERO.sqrt();
      complex14.reciprocal();
      Complex complex16 = complex13.divide(0.0);
      Complex complex17 = complex16.sinh();
      complex17.INF.divide(0.0);
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(1551.84127439, (-317.05596449528));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-601.366796));
      Complex complex1 = complex0.acos();
      complex1.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.createComplex((-601.366796), 0.0);
      Complex complex4 = complex3.add(complex2);
      complex4.INF.asin();
      Complex complex5 = complex2.sin();
      complex5.NaN.createComplex(0.087, 0.0);
      complex0.isNaN();
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      double double0 = 0.0;
      Complex complex2 = Complex.valueOf(4353.9, 0.0);
      complex2.NaN.toString();
      complex1.I.divide(complex2);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex0.ONE.atan();
      complex3.INF.getField();
      complex3.nthRoot(1239);
      Complex complex7 = complex6.ONE.multiply(1.0);
      Complex complex8 = complex7.INF.sin();
      complex6.NaN.log();
      Complex complex9 = complex4.divide((-2903.1));
      complex9.NaN.add((-2.5436254170647032E-67));
      complex6.isInfinite();
      Complex complex10 = complex5.sin();
      complex10.INF.add(complex2);
      complex8.add(0.0);
      Complex.valueOf((double) 1239);
      complex5.nthRoot(61);
      complex8.cosh();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      Complex.valueOf(1.0);
      Complex complex2 = complex1.I.multiply(642.4);
      complex0.I.subtract((-1315.572));
      Complex complex3 = Complex.valueOf(476.546308848);
      Complex complex4 = complex0.ONE.add(476.546308848);
      complex4.createComplex(476.546308848, 476.546308848);
      complex0.ZERO.toString();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.add(complex5);
      Complex.valueOf((-1315.572));
      complex0.NaN.exp();
      complex6.INF.getArgument();
      Complex complex7 = complex0.createComplex(476.546308848, 476.546308848);
      complex7.conjugate();
      Complex complex8 = Complex.valueOf(476.546308848);
      complex8.ZERO.conjugate();
      complex0.subtract(complex3);
      complex4.getReal();
      complex6.sqrt();
      Complex complex9 = complex0.sinh();
      complex0.isNaN();
      Complex complex10 = complex4.tanh();
      complex10.cosh();
      Complex complex11 = complex2.sqrt1z();
      complex11.ONE.tanh();
      complex3.ZERO.createComplex(2.0, 12.036504590155);
      complex5.toString();
      complex2.sqrt();
      complex9.cos();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.acos();
      complex2.ONE.readResolve();
      complex0.divide(complex1);
      Complex complex3 = complex2.cosh();
      complex3.toString();
      Complex complex4 = new Complex((-261.0));
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex2.atan();
      complex5.ONE.tanh();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.INF.subtract(complex7);
      complex8.sin();
      complex6.ONE.sqrt1z();
      complex0.isNaN();
      complex5.tan();
      complex8.cosh();
      complex4.createComplex((-261.0), (-261.0));
      complex8.multiply(complex3);
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.negate();
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.acos();
      complex3.NaN.exp();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.asin();
      complex4.tan();
      Complex complex6 = complex1.multiply((-438));
      complex4.isInfinite();
      Complex complex7 = complex2.createComplex(0.0, 0.0);
      complex7.divide(complex6);
      complex5.add(1416.691);
      complex2.isNaN();
      complex4.conjugate();
      complex0.reciprocal();
      Complex complex8 = Complex.ONE;
      complex3.add(complex8);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.I.cos();
      Complex complex1 = Complex.valueOf(1793.92, 1793.92);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ONE.add(0.0);
      Complex complex4 = complex1.asin();
      complex0.I.toString();
      Complex complex5 = complex1.ZERO.sin();
      complex1.I.pow(complex0);
      complex0.isInfinite();
      complex1.hashCode();
      complex0.ZERO.sqrt();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex7.I.multiply(0.0);
      complex8.ONE.atan();
      complex3.add(0.0);
      complex6.isNaN();
      Complex complex9 = Complex.valueOf(0.0, 861.0);
      complex9.getField();
      complex9.tan();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-984.177514188071), 0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-1335.2316897));
      complex1.add(1077.0);
      Complex complex2 = complex0.ZERO.multiply(530);
      complex2.ONE.tan();
      complex0.NaN.readResolve();
      Complex complex3 = complex0.divide(0.0);
      complex3.asin();
      complex3.INF.getField();
      Complex complex4 = complex0.multiply(530);
      complex4.ZERO.acos();
      Complex complex5 = complex2.add(20.60365972058);
      complex5.ZERO.conjugate();
      complex0.INF.pow(Double.NaN);
      complex5.ZERO.pow(Double.NaN);
      complex2.isInfinite();
      Complex.valueOf(Double.NaN);
      Complex.valueOf((-1335.2316897));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1069.55));
      Complex complex1 = complex0.INF.createComplex((-1069.55), (-1069.55));
      Complex complex2 = complex1.sin();
      complex0.conjugate();
      complex2.INF.atan();
      complex2.INF.atan();
      complex1.ZERO.add(0.0);
      Complex.valueOf((-1069.55));
      Complex complex3 = complex0.atan();
      complex0.ZERO.asin();
      try { 
        complex3.nthRoot((-4451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,451
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex.valueOf((-3208.4), (-45.0));
      Complex complex2 = complex0.multiply((-679));
      Complex complex3 = complex2.subtract((-45.0));
      Complex complex4 = complex3.ONE.conjugate();
      complex4.ONE.cosh();
      Complex complex5 = complex1.multiply((-3208.4));
      complex2.ZERO.reciprocal();
      complex2.ZERO.conjugate();
      complex5.sinh();
      Complex complex6 = complex5.I.multiply((-679));
      complex6.ZERO.exp();
      Complex complex7 = complex2.tanh();
      complex1.NaN.multiply((-679));
      complex7.sinh();
      complex3.getArgument();
      Complex.valueOf((-779.8537010249296));
      Complex complex8 = complex1.sqrt();
      int int0 = (-1627);
      try { 
        complex8.ZERO.nthRoot((-1627));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,627
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.tan();
      complex0.getArgument();
      Complex complex2 = complex0.multiply((-5344));
      complex2.INF.toString();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.atan();
      complex4.INF.divide(0.5990082025527954);
      complex4.toString();
      Complex complex5 = complex0.divide(20.0);
      complex5.INF.divide((double) (-5344));
      Complex complex6 = complex5.ONE.subtract(complex3);
      complex6.NaN.sinh();
      Complex complex7 = complex0.INF.sqrt();
      Complex complex8 = complex6.ONE.tanh();
      complex8.ONE.readResolve();
      Complex complex9 = complex2.add(1.0);
      complex9.ZERO.negate();
      complex4.getField();
      complex9.equals((Object) null);
      complex2.sqrt();
      complex7.toString();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.INF.acos();
      complex2.ONE.subtract(0.0);
      complex0.getArgument();
      complex0.INF.getField();
      complex0.sqrt1z();
      complex1.INF.readResolve();
      Complex complex4 = complex0.ONE.reciprocal();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      complex0.equals("n-$dZ");
      complex0.readResolve();
      complex1.hashCode();
      Complex complex6 = complex4.log();
      Complex complex7 = complex5.sin();
      complex7.divide(complex1);
      complex3.sin();
      complex6.asin();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.subtract(complex1);
      Complex.valueOf((-310.258541547), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.nthRoot(986);
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = Complex.valueOf(0.0, 2.8401159516008676E283);
      Complex complex4 = complex2.INF.createComplex(0.0, 2.8401159516008676E283);
      Complex complex5 = complex0.tan();
      complex0.equals(complex1);
      Complex complex6 = complex1.NaN.reciprocal();
      Complex complex7 = complex3.divide(0.0);
      complex7.INF.pow((-1203.05087));
      complex7.sqrt();
      Complex complex8 = complex6.ONE.multiply(complex4);
      complex8.ONE.pow(complex1);
      Complex complex9 = complex2.divide(complex1);
      complex5.add(complex3);
      complex9.subtract(0.0);
      complex2.isNaN();
      complex9.pow(complex2);
      Complex complex10 = complex3.multiply(739);
      complex10.ONE.acos();
      complex6.pow((-3.395494928605007E-110));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.NaN.exp();
      complex1.INF.pow(4.2657777816050375E-213);
      complex0.NaN.multiply(complex1);
      Complex complex2 = null;
      int int0 = (-106);
      complex0.NaN.multiply((-106));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-4096.657), (-4096.657));
      Complex complex1 = complex0.sinh();
      complex0.sinh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.add(complex1);
      complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.multiply(0.0);
      Complex complex1 = complex0.divide(1132.957720660519);
      complex1.ZERO.getField();
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.multiply(complex1);
      Complex complex3 = complex2.ZERO.sqrt();
      complex2.NaN.log();
      Complex complex4 = complex2.subtract(1132.957720660519);
      complex4.INF.sin();
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex5.NaN.acos();
      complex6.I.acos();
      Complex complex7 = complex3.sqrt1z();
      complex7.sqrt();
      Complex complex8 = Complex.valueOf(1132.957720660519);
      complex3.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(20.0);
      Complex complex3 = complex0.add(complex1);
      complex2.NaN.multiply(complex3);
      Complex complex4 = complex2.exp();
      complex2.NaN.sqrt1z();
      Complex complex5 = Complex.valueOf((double) 0, 0.0);
      complex5.INF.subtract(0.0);
      Complex complex6 = complex2.multiply(0);
      complex6.ZERO.toString();
      complex6.ZERO.divide((-816.181488701655));
      complex5.readResolve();
      complex6.I.getField();
      Complex complex7 = complex3.tan();
      complex7.I.hashCode();
      complex2.tan();
      complex5.isNaN();
      complex5.isNaN();
      complex2.cosh();
      Complex complex8 = complex1.cosh();
      complex0.ONE.cosh();
      complex8.isNaN();
      complex4.readResolve();
      complex0.isInfinite();
      complex3.multiply((-3413.0));
      complex6.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-1089.6454795486));
      complex0.NaN.getArgument();
      complex0.ONE.conjugate();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.divide(0.0);
      Complex complex1 = complex0.INF.divide((-311.839846));
      complex0.abs();
      complex1.hashCode();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.createComplex(0.0, (-116.5215574378166));
      Complex complex4 = Complex.valueOf((-345.6311), (-810.4858481080199));
      complex4.getArgument();
      Complex complex5 = complex1.sqrt();
      complex5.ONE.pow(complex3);
      complex5.INF.subtract((-810.4858481080199));
      Complex complex6 = complex3.sinh();
      complex6.toString();
      complex6.toString();
      complex2.acos();
      complex1.multiply(471.85);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.tan();
      complex3.ONE.readResolve();
      Complex complex4 = complex0.pow(0.0);
      complex4.INF.reciprocal();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex5.ZERO.cosh();
      complex6.nthRoot(1908);
      complex0.isInfinite();
      Complex complex7 = complex0.reciprocal();
      complex4.ZERO.sqrt();
      complex7.subtract(2811.5);
      Complex.valueOf((double) 1908, 6.23514943204966E27);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex4.ONE.sqrt();
      complex8.ONE.getField();
      complex8.ZERO.readResolve();
      complex5.getImaginary();
      complex0.getReal();
      complex5.pow(0.0);
      complex7.add(complex3);
      complex9.multiply(0);
      try { 
        complex5.nthRoot((-2018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,018
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
      Complex complex1 = complex0.INF.log();
      complex1.I.nthRoot(1409);
      Complex complex2 = Complex.valueOf((-1100.09208452772), 0.0);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex2.NaN.acos();
      Complex complex6 = complex5.ONE.multiply(0.0);
      complex2.divide(129.8532040179601);
      complex6.ONE.hashCode();
      complex0.sqrt();
      complex0.isInfinite();
      complex0.getField();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex7.INF.multiply(complex3);
      Complex complex9 = complex0.sqrt();
      complex9.INF.pow((-1100.09208452772));
      complex9.I.add((-1100.09208452772));
      complex7.ONE.createComplex(0.0, (-1100.09208452772));
      complex2.subtract(0.0);
      Complex complex10 = complex7.sin();
      Complex complex11 = complex1.subtract(129.8532040179601);
      complex11.I.cos();
      complex11.ZERO.divide(complex10);
      Complex complex12 = complex8.negate();
      complex12.subtract(129.8532040179601);
      complex7.cosh();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.multiply((-1.0));
      complex2.INF.add(complex0);
      complex2.NaN.pow(complex1);
      complex0.cos();
      complex1.subtract(complex0);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.atan();
      complex1.ZERO.add((-20.0));
      complex0.ONE.getField();
      complex0.asin();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.subtract((-20.0));
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex0.NaN.multiply(complex4);
      complex4.cos();
      Complex complex7 = complex5.INF.negate();
      complex7.NaN.readResolve();
      complex4.NaN.toString();
      complex3.divide((-20.0));
      Complex complex8 = complex0.log();
      complex5.sin();
      Complex complex9 = complex2.reciprocal();
      complex8.ZERO.sqrt1z();
      complex9.reciprocal();
      complex5.add(complex6);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ZERO.subtract(complex0);
      complex1.ZERO.pow(2.8829871423339434E201);
      complex0.getArgument();
      complex0.NaN.asin();
      complex0.getField();
      complex0.getArgument();
      Complex complex2 = complex0.multiply(1076.0);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex3.ZERO.sin();
      complex4.createComplex(0.0, 0.0);
      Complex.valueOf(0.7853981633974483);
      Complex complex5 = complex0.tan();
      Complex.valueOf((-4.800180493433863E-9));
      Complex complex6 = complex1.multiply(0.0);
      complex6.ONE.cos();
      complex1.ZERO.conjugate();
      complex5.divide((-2370.23));
      complex6.negate();
      complex1.sinh();
      complex1.conjugate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      complex0.subtract(2.850385787215544E-8);
      complex1.ONE.reciprocal();
      Object object0 = new Object();
      complex1.equals(object0);
      complex1.I.sinh();
      Complex complex2 = complex1.multiply(1);
      complex2.subtract(2.850385787215544E-8);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.acos();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.I.log();
      complex2.ZERO.log();
      Complex complex3 = complex0.subtract((-2338.8));
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.multiply((-2338.8));
      complex5.ZERO.hashCode();
      Complex complex6 = complex5.I.add(0.0);
      Complex complex7 = complex4.I.tan();
      assertEquals(0.7615941559557649, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      complex5.ONE.pow(complex4);
      Complex complex8 = complex1.multiply((-2338.8));
      Complex complex9 = complex5.sin();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex10.divide(0.0);
      Complex complex12 = complex11.NaN.exp();
      Complex complex13 = complex12.ZERO.conjugate();
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = Complex.valueOf((-2338.8), 1874.2955729);
      assertEquals((-2338.8), complex14.getReal(), 0.01);
      
      Complex complex15 = complex10.INF.asin();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = complex2.multiply(0.0);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex8.equals("");
      complex0.tanh();
      Complex complex18 = complex4.createComplex((-2338.8), 0.0);
      Complex complex19 = complex18.pow(complex16);
      Complex complex20 = complex16.acos();
      assertTrue(complex20.equals((Object)complex9));
      
      complex15.log();
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      assertSame(complex15, complex19);
      
      double double0 = complex8.getArgument();
      assertNotSame(complex8, complex6);
      assertFalse(complex0.equals((Object)complex10));
      assertSame(complex8, complex11);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.asin();
      complex3.exp();
      complex0.add(complex1);
      try { 
        complex1.nthRoot((-1330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,330
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(1);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply((-835.72880594));
      assertSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
  }
}
