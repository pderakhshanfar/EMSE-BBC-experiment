/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:52:40 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-1.3208450062862734E76));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
      Complex complex2 = Complex.valueOf((-20.0), (-151.9319));
      Complex complex3 = complex1.add(1224.8382012155964);
      complex2.nthRoot(142);
      complex3.atan();
      complex0.exp();
      Complex.valueOf(7.818417325759343E-18, (-1252.02738707346));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex.valueOf(0.013540725024924427);
      Complex complex3 = complex0.pow(1.0);
      complex3.I.asin();
      complex0.ONE.subtract((-1068.4201802));
      Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.log();
      complex1.abs();
      Complex complex5 = complex1.acos();
      complex5.ONE.sinh();
      complex2.nthRoot(966);
      complex5.ONE.tan();
      complex5.ZERO.multiply(1);
      Complex complex6 = complex4.divide(complex5);
      complex6.I.sinh();
      Complex.valueOf((-0.9999999999999998));
      complex6.I.sqrt1z();
      try { 
        complex2.nthRoot((-2115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,115
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.tanh();
      complex0.tan();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.6096806526184082, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(381635.593840427, 381635.593840427);
      Complex complex1 = complex0.acos();
      complex0.abs();
      Complex.valueOf((-0.9997149574284964), 381635.593840427);
      complex1.tan();
      Complex complex2 = Complex.valueOf((-1326.394638559), 20.0);
      complex0.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-3601.2042007588), Double.POSITIVE_INFINITY);
      complex0.I.exp();
      Complex complex1 = Complex.valueOf((-3601.2042007588));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-340.9770821));
      Complex complex1 = complex0.sinh();
      complex1.asin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3825325965881348, Double.POSITIVE_INFINITY);
      complex0.multiply(7.201473908935441E-5);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3825325965881348, Double.POSITIVE_INFINITY);
      complex0.NaN.add(1459.70931);
      complex0.multiply(1729);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3825325965881348, Double.POSITIVE_INFINITY);
      complex0.tan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2586.9645461808373, Double.POSITIVE_INFINITY);
      complex1.NaN.getField();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.add(complex0);
      complex1.negate();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(2586.9645461808373);
      Complex complex5 = complex4.pow(complex1);
      complex3.ZERO.tanh();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.subtract(complex1);
      complex7.NaN.subtract(complex3);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1992.1073937, (-44.38635863028));
      Complex complex1 = Complex.valueOf(3939.01297376008);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.conjugate();
      complex3.NaN.nthRoot(1134);
      Complex complex4 = complex3.negate();
      complex4.NaN.sqrt();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex2.add(2207.498573184759);
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex1.multiply(complex6);
      complex8.NaN.readResolve();
      Complex complex9 = complex3.pow(complex8);
      Complex complex10 = complex9.I.exp();
      complex9.INF.cos();
      Complex complex11 = complex9.log();
      complex8.NaN.negate();
      complex5.tanh();
      complex9.INF.atan();
      complex7.acos();
      complex9.multiply(3262.8);
      complex10.nthRoot(1134);
      complex5.getField();
      complex8.divide(2.5263051986694336);
      complex9.atan();
      complex11.pow(1.5395018670011342E-9);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(1103.749173342, 1103.749173342);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      complex2.equals(complex1);
      complex2.getArgument();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1103.749173342, 1103.749173342);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex0.getArgument();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.7853981633974483);
      Complex complex5 = complex3.tanh();
      complex5.tan();
      complex3.getField();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-580.0628122586));
      complex0.getArgument();
      Complex complex1 = new Complex(3.141592653589793, 1.2434582011857251);
      complex1.getArgument();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.createComplex((-1.1918070206953359E-228), Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.tan();
      complex4.getField();
      Complex.valueOf(3951.563128);
      complex3.getField();
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(1103.749173342, 1103.749173342);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex(Double.NaN, Double.NaN);
      Complex complex5 = complex0.acos();
      complex1.getArgument();
      complex3.getArgument();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.valueOf((-1051.9));
      complex6.add(complex8);
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.cos();
      complex9.add(complex7);
      Complex complex12 = Complex.ONE;
      complex11.reciprocal();
      Complex complex13 = Complex.ZERO;
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1.0));
      complex1.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 851.696);
      Complex complex1 = complex0.NaN.sinh();
      complex0.NaN.add(complex1);
      Complex complex2 = complex1.ZERO.asin();
      Complex.valueOf(851.696);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.exp();
      complex4.I.add(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(2486.933);
      Complex complex6 = Complex.valueOf(851.696);
      Complex complex7 = complex3.INF.add(complex6);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.ZERO.conjugate();
      Complex.valueOf((-1.1474026049124666E-17), 3747.338531387);
      complex0.getField();
      complex8.add((-2111.09924031));
      Complex complex10 = complex9.multiply((-743));
      Complex complex11 = complex10.NaN.createComplex(851.696, (-2111.09924031));
      complex3.add(complex1);
      complex7.isInfinite();
      complex2.tan();
      complex5.readResolve();
      complex3.tan();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      complex1.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.divide(545.95);
      Complex complex2 = Complex.valueOf((-409.983173), (-1551.405));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex((-1888.09464), (-1369.09230917));
      Complex complex5 = complex4.acos();
      complex3.getArgument();
      complex5.getArgument();
      complex4.exp();
      Complex.valueOf((-1369.09230917));
      Complex complex6 = complex4.add(complex1);
      complex5.conjugate();
      Complex complex7 = complex4.tan();
      complex7.add(complex3);
      Complex complex8 = Complex.ONE;
      complex7.reciprocal();
      Complex complex9 = Complex.valueOf(1.2815251365779585);
      complex9.hashCode();
      complex6.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(complex0);
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.acos();
      complex2.getArgument();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf((-0.5113252103366475));
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex2.conjugate();
      complex3.I.tan();
      complex3.tan();
      Complex complex6 = complex4.add(complex5);
      complex5.reciprocal();
      Complex complex7 = new Complex(50744.04207438878);
      complex7.hashCode();
      complex0.subtract(complex0);
      complex6.add(50744.04207438878);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      complex0.INF.abs();
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      complex1.toString();
      complex0.multiply(827);
      Complex complex2 = complex1.multiply((-390.893798726));
      Complex.valueOf(0.0);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = 2879.674627;
      Complex complex0 = new Complex(2879.674627, Double.NaN);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = new Complex((-2631.2119316192043), (-2631.2119316192043));
      Complex complex3 = complex0.ONE.sqrt();
      complex3.ONE.getField();
      Complex complex4 = complex0.INF.subtract(complex2);
      complex4.NaN.sinh();
      Complex.valueOf((-1202.86800038), Double.NaN);
      complex2.abs();
      Complex complex5 = complex0.exp();
      complex5.ZERO.readResolve();
      Complex complex6 = complex5.INF.reciprocal();
      int int0 = (-1519);
      complex1.atan();
      try { 
        complex6.INF.nthRoot((-1519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,519
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      Complex complex1 = Complex.valueOf((-1356.9584659305435), 0.7853981633974483);
      Complex complex2 = new Complex((-1663.0), (-1663.0));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.ONE;
      complex2.I.createComplex((-1356.9584659305435), (-4363.089446));
      Complex.valueOf((-1663.0));
      complex4.NaN.pow(complex0);
      complex2.I.getArgument();
      complex4.getArgument();
      complex3.tan();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex((-1.0), (-580.062812259));
      Complex complex4 = complex3.acos();
      complex1.getArgument();
      complex3.getArgument();
      Complex complex5 = complex2.exp();
      Complex.valueOf((-1.5707963267948966));
      complex1.add(complex0);
      complex4.conjugate();
      Complex complex6 = complex4.tan();
      complex1.add(complex0);
      Complex complex7 = Complex.ONE;
      complex1.reciprocal();
      complex2.hashCode();
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tan();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.multiply(complex0);
      complex0.toString();
      // Undeclared exception!
      complex1.nthRoot(640483118);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.multiply(complex0);
      complex0.toString();
      Complex complex2 = complex0.cosh();
      complex2.equals(complex2);
      complex2.divide(complex1);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1.0);
      Complex complex1 = complex0.multiply((-1.0));
      complex0.tan();
      Complex complex2 = new Complex((-1.0), (-580.0628122586));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex1.atan();
      complex5.toString();
      complex4.negate();
      Complex complex6 = new Complex(1633.0915128);
      Complex complex7 = Complex.ONE;
      complex6.add(3045.16);
      complex3.readResolve();
      Complex complex8 = complex2.divide(complex0);
      complex5.getField();
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.I;
      complex10.reciprocal();
      complex5.cos();
      try { 
        complex9.nthRoot((-2717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,717
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex((-1.0), (-580.0628122586));
      Complex complex4 = complex3.acos();
      complex1.getArgument();
      complex3.getArgument();
      complex2.exp();
      Complex.valueOf((-1.5707963267948966));
      complex1.add(complex0);
      Complex complex5 = complex4.conjugate();
      complex4.tan();
      complex1.add(complex0);
      Complex complex6 = Complex.ONE;
      complex4.getArgument();
      complex1.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.5725202763193262));
      complex5.tanh();
      Complex.valueOf(0.0, 2765567.2231806);
      Complex complex7 = new Complex((-2765567.2231806), Double.POSITIVE_INFINITY);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
      Complex complex1 = Complex.valueOf((-1369.09230917), (-21.29051109515525));
      Complex complex2 = new Complex((-1663.0), (-1663.0));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.acos();
      complex2.I.getArgument();
      Complex complex5 = complex3.INF.pow(complex3);
      complex3.NaN.hashCode();
      complex1.getImaginary();
      complex4.abs();
      complex3.divide(complex2);
      complex5.readResolve();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.subtract(complex4);
      complex5.tan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2715470790863037, 1.2715470790863037);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ONE.asin();
      complex0.readResolve();
      complex1.asin();
      Complex complex3 = complex0.sin();
      complex3.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(1.2715470790863037);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex3.divide(complex4);
      complex7.multiply((-572.3));
      Complex complex8 = complex0.negate();
      complex0.getField();
      Complex complex9 = complex0.cosh();
      complex9.ONE.nthRoot(4320);
      complex8.INF.nthRoot(100);
      complex6.I.subtract(complex8);
      complex8.add(773.7);
      Complex complex10 = complex7.add(1705.44546833395);
      complex0.ZERO.readResolve();
      complex0.I.pow(complex10);
      Complex complex11 = complex6.sin();
      complex3.INF.multiply(complex4);
      complex3.INF.reciprocal();
      complex2.sqrt1z();
      complex11.pow(1705.44546833395);
      complex0.abs();
      try { 
        complex7.nthRoot((-3438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,438
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 20.51514578682886);
      complex1.divide(complex2);
      complex1.getField();
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      complex0.ONE.getArgument();
      complex1.ZERO.tan();
      complex0.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf((-20.0));
      complex2.NaN.add(complex0);
      complex0.cosh();
      complex1.abs();
      Complex complex4 = complex2.tanh();
      complex4.abs();
      Complex complex5 = Complex.valueOf(1.0, 1.0);
      complex3.tanh();
      complex2.getReal();
      complex5.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = 1103.749173342;
      Complex complex0 = Complex.valueOf(1103.749173342);
      Complex complex1 = complex0.divide(1103.749173342);
      complex1.INF.divide((-668.29447));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.sqrt();
      double double1 = 2760.1399;
      Complex complex5 = complex3.add((-2130.8631358067482));
      complex5.atan();
      double double2 = (-2170.74656464916);
      Complex complex6 = new Complex((-2170.74656464916));
      complex6.pow(complex5);
      complex4.multiply((-668.29447));
      try { 
        complex1.nthRoot((-2885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,885
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      Complex complex2 = complex0.subtract(complex1);
      complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.toString();
      complex3.negate();
      Complex complex5 = complex0.I.multiply(2.8426856726994483E-8);
      Complex complex6 = Complex.ONE;
      complex6.add(0.0);
      complex5.readResolve();
      complex3.divide(complex2);
      complex0.getField();
      Complex complex7 = Complex.valueOf(1793.747608909688, 1793.747608909688);
      complex4.INF.reciprocal();
      Complex complex8 = complex7.cos();
      complex8.ZERO.nthRoot(474);
      Complex complex9 = Complex.ONE;
      complex9.multiply(1.1752011936438014);
      complex0.log();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex4 = complex1.add(complex0);
      complex3.ZERO.createComplex(2.0, 915.92575665365);
      Complex complex5 = complex4.ONE.atan();
      complex5.INF.toString();
      complex4.negate();
      Complex complex6 = Complex.ZERO;
      complex2.multiply(complex6);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = new Complex(2760.1399, 2.0);
      Complex complex10 = complex9.add(2.0);
      complex10.atan();
      Complex complex11 = complex0.pow(complex7);
      complex2.multiply(1793.747608909688);
      complex11.nthRoot(1188);
      complex3.sqrt1z();
      complex8.acos();
      complex0.multiply(2.8426856726994483E-8);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex9.pow(complex12);
      Complex complex14 = Complex.I;
      complex14.reciprocal();
      Complex complex15 = new Complex(2760.1399);
      complex15.sin();
      Complex complex16 = Complex.INF;
      Complex complex17 = Complex.valueOf((double) 1188);
      complex17.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1103.749173342);
      Complex complex1 = complex0.divide(1103.749173342);
      complex0.getImaginary();
      complex1.ONE.abs();
      Complex complex2 = complex1.I.divide(complex0);
      complex1.readResolve();
      Complex complex3 = complex0.ONE.asin();
      complex0.I.reciprocal();
      complex2.I.multiply(complex1);
      complex0.hashCode();
      complex2.reciprocal();
      complex1.hashCode();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.subtract(1103.749173342);
      complex5.subtract(complex3);
      complex5.multiply(1103.749173342);
      Complex complex6 = Complex.I;
      Object object0 = complex6.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-580.0628122586));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.acos();
      complex2.divide(complex1);
      Complex complex4 = Complex.ONE;
      complex4.asin();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.reciprocal();
      complex6.hashCode();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      complex0.abs();
      Complex complex1 = new Complex((-668.29447), (-1220.906));
      Complex complex2 = complex0.divide(complex1);
      complex0.readResolve();
      complex2.asin();
      Complex complex3 = complex0.reciprocal();
      complex1.hashCode();
      Complex complex4 = Complex.valueOf(3.518198614137319E171);
      Complex complex5 = complex4.subtract((-668.29447));
      Complex complex6 = Complex.NaN;
      complex3.subtract(complex5);
      complex6.add((-2136.1247181290046));
      complex5.multiply(0.4330751895904541);
      complex6.multiply(1.414889689612056E-9);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sqrt();
      complex0.readResolve();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-580.0628122586));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.acos();
      complex1.getArgument();
      complex2.getArgument();
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.valueOf((-580.0628122586));
      Complex complex6 = complex0.add(complex4);
      complex2.conjugate();
      Complex complex7 = complex6.tan();
      complex3.add(complex5);
      complex6.getArgument();
      complex0.abs();
      Complex.valueOf(1.0, (-1.5707963267948966));
      complex7.tanh();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2447.0, 2447.0);
      Complex complex1 = Complex.valueOf((-90.514));
      Complex complex2 = Complex.INF;
      complex2.pow(complex0);
      Complex complex3 = complex1.sin();
      complex1.NaN.tan();
      complex3.ZERO.tanh();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex0.acos();
      complex0.hashCode();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.I;
      complex4.atan();
      complex4.toString();
      Complex complex5 = complex0.negate();
      complex0.multiply(0.0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex1.add(334.62376);
      complex4.readResolve();
      Complex complex8 = complex0.divide(complex6);
      complex5.getField();
      Complex complex9 = Complex.ZERO;
      complex9.tan();
      complex2.reciprocal();
      complex3.cos();
      complex8.nthRoot(474);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex8.multiply((-92.0716577947993));
      complex7.log();
      try { 
        complex11.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      complex0.abs();
      Complex complex2 = Complex.I;
      complex2.multiply(complex0);
      complex2.toString();
      Complex complex3 = Complex.I;
      complex3.multiply(827);
      Complex complex4 = complex0.multiply(1542.1985);
      Complex complex5 = complex4.subtract((-2590.16780478));
      Complex complex6 = Complex.valueOf((-1361.77104826798));
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.ONE.atan();
      complex5.INF.toString();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex0.I.multiply(2.8426856726994483E-8);
      Complex complex8 = Complex.ONE;
      complex8.add(0.0);
      complex7.readResolve();
      Complex complex9 = complex4.divide(complex2);
      complex0.getField();
      Complex complex10 = complex9.tan();
      complex5.INF.reciprocal();
      Complex complex11 = complex10.cos();
      complex11.ZERO.nthRoot(474);
      Complex complex12 = Complex.ONE;
      complex4.multiply((double) 474);
      complex10.log();
      complex3.nthRoot(474);
      complex6.toString();
      complex5.pow(complex2);
      complex1.divide(complex5);
      Complex complex13 = Complex.valueOf(2.8426856726994483E-8, 20.0);
      complex6.multiply(complex13);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(208.075970206);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.acos();
      complex2.getArgument();
      complex1.getArgument();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.add(complex3);
      complex0.conjugate();
      Complex complex7 = Complex.NaN;
      complex7.tan();
      complex6.add(complex2);
      complex1.getArgument();
      complex5.abs();
      Complex.valueOf(Double.NaN, (-1940.114641));
      complex7.tanh();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1764.38681641918);
      Complex complex2 = complex1.tan();
      complex1.acos();
      complex2.getArgument();
      complex1.getArgument();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = new Complex(1.0);
      complex5.add(complex3);
      Complex complex6 = Complex.valueOf((-2057.8701366055793));
      Complex complex7 = complex6.conjugate();
      complex3.tan();
      complex3.add(complex2);
      complex4.getArgument();
      complex1.abs();
      Complex.valueOf((-4338.881), (-4338.881));
      complex5.tanh();
      complex7.getReal();
      complex6.add((-1404.87));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.I.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex2.reciprocal();
      complex0.conjugate();
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.I;
      complex6.cosh();
      complex2.abs();
      Complex complex7 = complex6.tanh();
      complex0.divide((-92.0716577947993));
      complex5.pow(0.7964041597697168);
      complex7.isNaN();
      complex3.atan();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.I.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.cosh();
      complex6.negate();
      Complex complex7 = complex3.cosh();
      complex4.abs();
      complex1.tanh();
      complex7.divide(Double.NaN);
      Complex complex8 = complex5.pow(3717.304172979006);
      Complex complex9 = Complex.I;
      complex9.isNaN();
      complex8.atan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      complex0.subtract(complex1);
      complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ONE.atan();
      complex3.INF.toString();
      Complex complex4 = complex2.negate();
      complex0.I.multiply(2.8426856726994483E-8);
      Complex complex5 = complex4.NaN.cosh();
      complex5.ZERO.sinh();
      complex1.hashCode();
      Complex complex6 = complex0.ONE.sinh();
      complex2.reciprocal();
      complex6.divide(1794.747608909688);
      complex6.pow(1794.747608909688);
      complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      complex2.hashCode();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.atan();
      complex1.pow(0.32058215141296387);
      complex4.reciprocal();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex1.cosh();
      complex0.cosh();
      Complex complex7 = complex1.add(complex2);
      complex7.tan();
      complex4.exp();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = new Complex(0.32058215141296387, (-319147.84234997776));
      complex9.log();
      Complex complex10 = Complex.INF;
      complex10.hashCode();
      complex0.subtract(0.32058215141296387);
      complex5.acos();
      complex8.sinh();
      Complex complex11 = new Complex(1, 0.0);
      Complex complex12 = new Complex((-319147.84234997776), (-319147.84234997776));
      complex6.multiply(0.0);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.ONE.atan();
      complex5.INF.toString();
      Complex complex6 = complex4.negate();
      complex0.I.multiply(2.8426856726994483E-8);
      Complex.valueOf(2.8426856726994483E-8);
      Complex complex7 = complex0.add(complex2);
      complex4.conjugate();
      Complex complex8 = complex6.tan();
      complex5.add(complex6);
      complex8.getArgument();
      complex7.abs();
      Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex3.tanh();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex1.negate();
      complex4.ZERO.getField();
      Complex complex6 = complex5.NaN.divide(2956.9233837);
      complex1.ZERO.atan();
      complex6.getArgument();
      Complex complex7 = Complex.valueOf(20.0, 1587.276796);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.ONE.cosh();
      complex9.ONE.divide(2956.9233837);
      Complex complex10 = complex5.subtract(20.0);
      Complex complex11 = complex2.pow(2956.9233837);
      Complex complex12 = complex11.ONE.atan();
      complex4.cos();
      complex10.nthRoot(3404);
      Complex complex13 = complex6.multiply(complex1);
      complex13.pow(3010.434);
      complex12.acos();
      complex4.reciprocal();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.sqrt();
      Complex complex1 = complex0.conjugate();
      complex1.ONE.acos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.add(complex2);
      complex2.tan();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.sqrt1z();
      complex4.log();
      complex4.hashCode();
      complex6.subtract(2267.935887336731);
      complex3.acos();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.I.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.pow(0.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.I.cosh();
      Complex complex7 = complex0.cosh();
      complex5.abs();
      complex7.tanh();
      complex3.divide(0.0);
      Complex complex8 = complex6.pow(Double.NaN);
      complex2.isNaN();
      complex4.atan();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7914185523986816, 9.994400500679653E270);
      Complex complex1 = complex0.multiply(1266);
      complex1.cosh();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex0.divide(1.7914185523986816);
      Complex complex5 = Complex.valueOf((-3310.022167), (double) 1266);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex6.negate();
      complex5.toString();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex3.sin();
      complex8.createComplex(833.282866007102, 9.994400500679653E270);
      complex10.conjugate();
      complex3.atan();
      complex6.toString();
      complex10.toString();
      Complex complex11 = complex4.add(complex7);
      Complex complex12 = complex5.subtract((-20.0));
      complex9.sqrt();
      complex10.reciprocal();
      complex4.subtract(complex10);
      Complex complex13 = Complex.ONE;
      complex13.subtract(0.0011156056590298125);
      complex12.getArgument();
      complex11.toString();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2827.237896822899, 2827.237896822899);
      Complex complex1 = complex0.cos();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(1736.1694539453595);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.cosh();
      Complex complex8 = Complex.valueOf(1.265291103386044E274, (-375.665));
      Complex complex9 = complex8.cosh();
      complex7.add(complex9);
      complex4.tan();
      Complex complex10 = complex8.exp();
      complex5.sqrt1z();
      Complex complex11 = complex3.log();
      complex10.hashCode();
      complex10.subtract(20.0);
      complex11.acos();
      Complex complex12 = Complex.NaN;
      complex12.sinh();
      complex4.multiply((-1472));
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1.1941366764543551E-146);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.INF.multiply(1);
      complex4.nthRoot(1);
      complex3.getField();
      Complex complex5 = complex0.INF.sinh();
      complex5.INF.add(complex0);
      complex1.divide(complex3);
      Complex complex6 = Complex.valueOf(1.1941366764543551E-146);
      Complex complex7 = Complex.valueOf((-1505.7), Double.POSITIVE_INFINITY);
      complex7.divide(complex3);
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex(0.5205078726367633, (-1505.7));
      complex6.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1792.747608909688);
      Complex complex2 = complex0.multiply(complex1);
      complex1.tan();
      complex0.getField();
      Complex complex3 = complex1.atan();
      complex1.multiply(1.0428862571716309);
      complex1.nthRoot(322);
      complex1.pow(0.0);
      Complex complex4 = complex3.pow(complex1);
      complex2.subtract(738.492);
      Complex.valueOf((-423.8));
      Complex complex5 = complex3.log();
      complex1.divide(complex3);
      complex5.tanh();
      try { 
        complex4.nthRoot((-2132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,132
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(0.5403023058681398);
      complex1.abs();
      complex0.tan();
      complex1.getField();
      complex0.conjugate();
      Complex complex2 = complex1.add((-2280.6868263784963));
      complex0.readResolve();
      Complex complex3 = Complex.I;
      complex2.divide(complex3);
      complex3.getField();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex4.multiply(0.0);
      complex6.log();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7914185523986816, 9.994400500679653E270);
      Complex complex1 = complex0.atan();
      complex0.pow(5.579042646006599E270);
      Complex complex2 = complex1.reciprocal();
      complex0.conjugate();
      complex2.cosh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.add(complex2);
      complex4.tan();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.log();
      complex5.hashCode();
      complex6.subtract((-20.0));
      complex4.acos();
      complex8.sinh();
      Complex complex9 = new Complex(287.7773627208477);
      complex9.multiply((-146));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.conjugate();
      complex4.cosh();
      complex1.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.tan();
      Complex complex8 = complex3.exp();
      complex8.sqrt1z();
      complex1.log();
      complex7.hashCode();
      complex4.subtract(Double.POSITIVE_INFINITY);
      complex2.acos();
      complex8.sinh();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.I.hashCode();
      complex0.atan();
      Complex complex2 = Complex.valueOf(1348.68896);
      Complex complex3 = Complex.NaN;
      complex3.divide(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.NaN;
      try { 
        complex5.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.I.acos();
      complex0.ONE.getArgument();
      complex3.getArgument();
      Complex complex4 = complex0.exp();
      Complex.valueOf((-20.0));
      Complex complex5 = complex4.NaN.add(complex0);
      complex4.conjugate();
      Complex complex6 = complex5.NaN.tan();
      complex6.ZERO.subtract(0.0);
      Complex complex7 = complex5.add(complex1);
      complex7.INF.getArgument();
      complex4.abs();
      Complex.valueOf((-318.0), (-2.574172005933276E-10));
      complex5.tanh();
      complex2.getReal();
      complex2.createComplex((-2.574172005933276E-10), 0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.atan();
      complex2.ZERO.asin();
      complex2.I.hashCode();
      complex0.I.cosh();
      complex0.equals("t ^QlMJ,1WJ-");
      complex0.divide(complex1);
      complex0.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7914185523986816, 9.994400500679653E270);
      int int0 = 1266;
      Complex complex1 = complex0.multiply(1266);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.divide(1.7914185523986816);
      Complex complex6 = complex5.tan();
      complex4.getField();
      Complex complex7 = complex2.atan();
      Complex complex8 = Complex.valueOf(361.22669);
      complex8.multiply((-906.6918501348));
      complex0.nthRoot(512);
      Complex complex9 = complex1.pow((-2524.5786));
      Complex complex10 = complex6.pow(complex3);
      complex9.subtract((-4039.71));
      Complex.valueOf(0.14939609169960022);
      complex8.log();
      complex3.divide(complex10);
      complex7.tanh();
      try { 
        complex7.nthRoot((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -8
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7914185523986816, 9.994400500679653E270);
      Complex complex1 = complex0.multiply(1266);
      complex1.cosh();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.divide(9.994400500679653E270);
      Complex complex5 = Complex.NaN;
      complex4.add(complex5);
      Complex complex6 = complex0.add(0.9689123630523682);
      Complex complex7 = Complex.valueOf((-1.915204563140137E-9), 1.734665280502264E-8);
      complex7.subtract(2.0);
      complex5.add(complex1);
      Complex complex8 = complex6.createComplex((-1.915204563140137E-9), 0.9689123630523682);
      complex8.nthRoot(699);
      complex3.sqrt();
      Complex complex9 = Complex.I;
      complex9.sqrt1z();
      complex6.subtract(390.4214294);
      complex1.log();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7914185523986816, 9.994400500679653E270);
      Complex complex1 = complex0.multiply(1266);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.divide(9.994400500679653E270);
      Complex complex6 = Complex.INF;
      complex1.add(complex5);
      Complex complex7 = complex2.add(9.994400500679653E270);
      Complex complex8 = complex7.subtract(4.3594621428644293E-23);
      complex4.add(complex0);
      Complex complex9 = complex8.createComplex(2440.0, 2836.168857);
      complex5.nthRoot(1266);
      complex8.sqrt();
      complex8.ONE.multiply(2179.46216062);
      complex7.sqrt1z();
      Complex complex10 = Complex.INF;
      complex10.subtract((double) 1266);
      complex10.log();
      complex9.getImaginary();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1103.749173342);
      Complex complex1 = complex0.divide(1103.749173342);
      Complex complex2 = complex1.INF.divide((-668.29447));
      complex0.getImaginary();
      complex1.ONE.abs();
      complex1.I.divide(complex2);
      complex1.readResolve();
      Complex complex3 = complex2.ONE.asin();
      complex0.I.reciprocal();
      complex2.hashCode();
      Complex complex4 = Complex.valueOf(1.3810978455418157);
      complex4.subtract((-20.0));
      Complex complex5 = Complex.valueOf((-1.0));
      complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.I.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.pow(0.0);
      complex3.ZERO.reciprocal();
      complex3.conjugate();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex0.cosh();
      complex5.ONE.add(complex4);
      complex5.ZERO.tan();
      complex5.ZERO.exp();
      Complex complex6 = complex5.INF.sqrt1z();
      complex6.INF.exp();
      Complex complex7 = complex4.log();
      complex0.hashCode();
      Complex complex8 = complex6.subtract(0.0);
      complex7.acos();
      complex7.sinh();
      complex7.multiply((-3555));
      complex8.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      Complex complex2 = complex0.subtract(complex1);
      complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.toString();
      complex3.negate();
      Complex complex5 = complex0.I.multiply(2.8426856726994483E-8);
      Complex complex6 = Complex.ONE;
      complex6.add(0.0);
      complex5.readResolve();
      Complex complex7 = complex3.divide(complex2);
      complex0.getField();
      Complex complex8 = complex7.tan();
      complex4.INF.reciprocal();
      Complex complex9 = complex8.cos();
      complex9.ZERO.nthRoot(474);
      Complex complex10 = Complex.ONE;
      complex10.multiply(1.1752011936438014);
      complex0.log();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add((-1299.143976));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex3.I.createComplex((-1299.143976), (-1299.143976));
      Complex complex6 = complex4.ONE.divide(complex3);
      Complex complex7 = complex2.NaN.add(complex3);
      complex7.ZERO.atan();
      complex7.NaN.negate();
      Complex complex8 = complex6.pow(complex0);
      complex4.negate();
      Complex complex9 = complex4.ZERO.subtract(complex0);
      complex0.getReal();
      complex4.isNaN();
      Complex complex10 = complex2.asin();
      complex2.INF.negate();
      complex8.multiply(complex9);
      complex4.divide(complex2);
      complex3.getArgument();
      complex10.acos();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1793.747608909688, 1793.747608909688);
      complex0.ZERO.toString();
      Complex complex1 = Complex.ONE;
      complex1.INF.toString();
      complex0.subtract(complex1);
      complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ONE.atan();
      complex3.INF.toString();
      Complex complex4 = complex2.negate();
      complex0.I.multiply(2.8426856726994483E-8);
      Complex complex5 = complex4.NaN.cosh();
      complex5.ZERO.sinh();
      complex1.hashCode();
      complex0.ONE.sinh();
      Complex complex6 = complex2.reciprocal();
      complex6.INF.sinh();
      Complex complex7 = complex2.subtract(1793.747608909688);
      complex7.divide(complex3);
      complex7.multiply(complex3);
      complex0.exp();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2655.4);
      Complex complex1 = Complex.valueOf(1148.8251976114689);
      complex0.INF.add(complex1);
      Complex complex2 = complex0.NaN.multiply(1148.8251976114689);
      complex0.isNaN();
      complex0.abs();
      complex0.getArgument();
      complex0.readResolve();
      complex2.readResolve();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-3882.237329286596), (-3882.237329286596));
      complex0.NaN.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.multiply(complex1);
      complex3.ZERO.sin();
      Complex complex4 = complex3.NaN.tanh();
      complex1.ONE.hashCode();
      complex1.I.sin();
      Complex complex5 = complex0.multiply((-24));
      complex5.INF.getField();
      complex3.getReal();
      complex4.asin();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex1.NaN.getArgument();
      complex1.ZERO.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.I.conjugate();
      complex1.getImaginary();
      complex4.hashCode();
      complex6.nthRoot(1);
      Complex complex7 = Complex.valueOf((double) 1, (-2941.1831));
      complex7.NaN.acos();
      complex3.abs();
      Complex complex8 = complex5.sin();
      complex8.ONE.sqrt1z();
      Complex complex9 = complex3.multiply(Double.NaN);
      Complex complex10 = new Complex(1.0, (-1646.0170478837392));
      complex9.add(complex10);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2827.237896822899, 2827.237896822899);
      Complex complex1 = complex0.I.createComplex(2827.237896822899, Double.NaN);
      Complex complex2 = complex1.pow(complex0);
      complex2.ZERO.divide(complex0);
      complex1.ONE.toString();
      complex0.I.atan();
      Complex complex3 = Complex.valueOf(2827.237896822899);
      Complex complex4 = complex3.ZERO.subtract(Double.NaN);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-4103.70037));
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.abs();
      Complex complex2 = complex0.I.pow((-3019.694713839895));
      complex2.I.log();
      complex0.INF.getArgument();
      complex2.INF.sinh();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.pow(complex0);
      complex4.I.sinh();
      complex3.ONE.cosh();
      complex3.ZERO.createComplex((-3019.694713839895), (-3019.694713839895));
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.I.multiply(1);
      Complex complex7 = complex5.ONE.asin();
      Complex complex8 = Complex.valueOf(0.0, 0.7853981633974483);
      Complex complex9 = complex7.ZERO.subtract(5411.0);
      complex7.NaN.toString();
      complex0.subtract(70.6014974639056);
      complex4.getField();
      complex0.INF.getField();
      complex9.pow(2349.61344);
      complex6.subtract((double) 1);
      Complex complex10 = complex8.multiply(662);
      complex10.isInfinite();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.asin();
      complex0.ZERO.reciprocal();
      complex0.readResolve();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex1.readResolve();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.I.conjugate();
      complex5.ZERO.getArgument();
      complex2.NaN.readResolve();
      Complex complex6 = complex2.createComplex(2002.24974414, 2002.24974414);
      Complex complex7 = complex0.atan();
      complex3.getImaginary();
      complex6.createComplex(2891.76310275, 1.3655037879943848);
      complex7.toString();
      complex6.subtract(0.0);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.INF.sqrt();
      complex2.subtract(complex0);
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex0.ONE.multiply(complex3);
      complex0.I.negate();
      complex3.ZERO.multiply((-3675));
      Complex complex5 = Complex.valueOf((double) (-3675));
      complex0.hashCode();
      complex0.asin();
      complex3.getArgument();
      complex5.getArgument();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.pow(0.0);
      complex1.ZERO.divide(complex2);
      complex0.divide((-2781.3113));
      complex1.sqrt1z();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.hashCode();
      complex0.getReal();
      complex0.readResolve();
      Complex complex1 = complex0.multiply(0.0);
      complex1.NaN.abs();
      complex1.nthRoot(475);
      Complex complex2 = Complex.valueOf(2.0, 2.0);
      complex2.readResolve();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.INF.sinh();
      complex4.INF.cos();
      Complex complex5 = Complex.valueOf(0.0, 1177.58);
      Complex complex6 = complex5.I.sinh();
      complex0.getImaginary();
      complex4.ONE.cos();
      complex2.I.sin();
      complex6.ONE.toString();
      int int0 = (-1);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.I.divide(complex1);
      Complex complex2 = Complex.NaN;
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.conjugate();
      Complex complex1 = new Complex((-2317.21746759));
      Complex complex2 = complex0.subtract(complex1);
      Complex.valueOf((-2996.4), Double.NaN);
      complex1.divide((-2317.21746759));
      complex2.createComplex((-2317.21746759), (-2317.21746759));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.atan();
      complex2.I.hashCode();
      complex0.I.cosh();
      complex0.equals("t ^QlMJ,1WJ-");
      complex0.divide(complex1);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.tan();
      complex1.hashCode();
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex3.createComplex(0.40481382608413696, 0.40481382608413696);
      Complex complex6 = complex3.multiply(complex2);
      complex4.ZERO.subtract(0.0);
      complex4.NaN.toString();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex7 = Complex.valueOf(0.0, (-1094.0661));
      Complex complex8 = complex6.atan();
      complex7.abs();
      complex2.sinh();
      complex8.readResolve();
      Complex complex9 = complex0.pow((-2193.0612707621694));
      complex5.getReal();
      complex2.toString();
      complex9.createComplex(0.0, 0.40481382608413696);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      double double0 = (-4361.121119811128);
      Complex complex1 = Complex.valueOf((-4361.121119811128), 0.0);
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(875.8, 0.0);
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.INF.toString();
      complex1.sin();
      complex1.sqrt1z();
      complex0.abs();
      Complex complex2 = Complex.valueOf((-4840.704599511));
      complex2.ZERO.readResolve();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.I.getArgument();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1103.749173342);
      Complex complex1 = complex0.divide(1103.749173342);
      Complex complex2 = complex1.INF.divide((-668.29447));
      complex0.getImaginary();
      complex1.ONE.abs();
      complex1.I.divide(complex2);
      complex1.readResolve();
      complex2.ONE.asin();
      complex0.I.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.subtract(1.0);
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(1.1941366764543551E-146);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.INF.multiply(1);
      complex4.nthRoot(1);
      complex3.getField();
      Complex complex5 = complex0.INF.sinh();
      complex5.INF.add(complex0);
      Complex complex6 = complex1.divide(complex3);
      Complex complex7 = complex2.cosh();
      complex1.exp();
      Complex complex8 = complex0.negate();
      complex8.toString();
      complex7.I.tan();
      Complex complex9 = complex3.I.sin();
      Complex complex10 = complex6.createComplex(1.1941366764543551E-146, 0.0);
      complex5.conjugate();
      Complex complex11 = complex8.atan();
      complex11.NaN.toString();
      complex2.NaN.toString();
      complex10.add(complex5);
      complex7.NaN.subtract(1.0);
      complex9.sqrt();
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex12.ONE.subtract(complex1);
      complex13.ONE.subtract(1.1941366764543551E-146);
      complex0.getArgument();
      complex0.toString();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.nthRoot(2517);
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.INF.reciprocal();
      complex3.ONE.getArgument();
      complex5.NaN.hashCode();
      Complex complex6 = complex1.tanh();
      complex0.getArgument();
      complex5.abs();
      complex4.isNaN();
      Complex.valueOf(0.0);
      Complex complex7 = complex1.tanh();
      complex7.ONE.tan();
      complex2.NaN.pow(0.0);
      Complex complex8 = complex6.createComplex(0.0, 0.0);
      complex8.ZERO.pow(0.0);
      complex7.getImaginary();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.conjugate();
      complex2.ONE.acos();
      Complex complex3 = complex0.multiply(complex2);
      complex2.conjugate();
      complex3.abs();
      complex0.tanh();
      Complex complex4 = complex3.divide(0.0);
      complex4.I.pow(0.0);
      complex1.isNaN();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(298.0426816);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.createComplex(0.0, (-3511.6418656699257));
      Complex complex3 = complex0.ZERO.log();
      complex0.ONE.getArgument();
      Complex complex4 = complex3.INF.log();
      complex4.ONE.getArgument();
      Complex complex5 = complex0.subtract(298.0426816);
      Complex complex6 = complex5.INF.multiply((-107));
      Complex complex7 = complex6.ZERO.asin();
      complex3.getImaginary();
      complex0.isNaN();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex8.INF.subtract(0.0);
      Complex complex10 = complex9.INF.tanh();
      complex10.NaN.cos();
      Complex complex11 = complex9.NaN.pow((-3511.6418656699257));
      complex11.ONE.sinh();
      Complex complex12 = complex3.reciprocal();
      complex12.cos();
      complex4.cos();
      complex12.getReal();
      Complex complex13 = complex0.asin();
      complex13.toString();
      complex5.atan();
      complex8.tanh();
      complex13.atan();
      complex2.atan();
      complex0.sinh();
      complex2.sqrt();
      complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.ZERO.multiply(269);
      Complex complex3 = complex1.I.multiply(complex0);
      complex3.ONE.add(complex0);
      Complex complex4 = complex2.I.divide(complex3);
      complex0.NaN.pow((double) 269);
      complex1.INF.negate();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.ZERO.cos();
      complex5.I.pow((double) 269);
      complex0.ONE.asin();
      complex0.getReal();
      complex0.pow(complex1);
      Complex complex7 = Complex.valueOf(477.9456990568979);
      complex7.sqrt();
      complex1.sinh();
      complex3.getField();
      complex4.sin();
      complex6.cos();
      Complex.valueOf((double) 269);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7914185523986816, 9.994400500679653E270);
      Complex complex1 = complex0.multiply(1266);
      complex1.cosh();
      Complex complex2 = complex1.ONE.asin();
      complex2.ZERO.log();
      Complex complex3 = complex0.divide(1.7914185523986816);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex5.I.add(1.734665280502264E-8);
      Complex complex7 = complex6.I.subtract(1.7914185523986816);
      Complex complex8 = complex5.INF.add(complex3);
      Complex complex9 = complex0.createComplex(Double.NaN, (-2.2677272333821516E-7));
      complex9.ZERO.nthRoot(1266);
      Complex complex10 = complex4.sqrt();
      complex3.sqrt1z();
      complex10.subtract(9.994400500679653E270);
      complex7.log();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      double double0 = 0.0;
      Complex complex1 = new Complex(0.0);
      complex0.INF.subtract(complex1);
      complex0.equals(complex1);
      Complex complex2 = complex1.I.acos();
      complex2.divide(0.0);
      int int0 = 0;
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.ONE.exp();
      Complex complex2 = Complex.valueOf((-874.3152299504413));
      Complex complex3 = complex0.I.createComplex(4029.0, (-559.69));
      complex3.subtract(complex1);
      complex3.NaN.sinh();
      complex3.NaN.tan();
      Complex complex4 = new Complex((-874.3152299504413));
      Complex complex5 = Complex.valueOf(4029.0, (-559.69));
      complex4.I.sqrt1z();
      complex4.add(complex5);
      complex2.INF.multiply(complex4);
      complex0.multiply(0);
      Complex.valueOf(4029.0, 0.0);
      complex0.sinh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex2.atan();
      complex0.sin();
      complex1.abs();
      complex7.getField();
      complex3.multiply(1272);
      complex0.divide(complex6);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply((-493));
      Complex complex2 = complex1.I.atan();
      complex2.I.tan();
      complex2.multiply(complex0);
      Complex complex3 = complex1.exp();
      complex3.I.acos();
      Complex complex4 = complex0.INF.divide(309.7);
      complex4.I.pow(complex3);
      complex1.cos();
      Complex complex5 = complex0.tan();
      complex5.ZERO.abs();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.pow(complex6);
      complex5.NaN.multiply((-1380.425));
      complex5.nthRoot(612);
      Complex complex8 = complex6.atan();
      complex8.log();
      complex5.asin();
      Complex complex9 = complex7.ONE.multiply((-2909.551674));
      complex7.createComplex((-8.588407110184028E-8), (-8.588407110184028E-8));
      complex9.toString();
      complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.NaN.getField();
      complex0.I.getArgument();
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.multiply(Double.NaN);
      complex1.I.subtract(complex0);
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = Complex.valueOf(1.5707963267948966);
      complex0.ONE.sin();
      complex4.ZERO.nthRoot(1);
      complex0.atan();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.ZERO.sqrt();
      complex6.I.cosh();
      complex6.conjugate();
      Complex complex7 = complex2.conjugate();
      complex7.hashCode();
      complex3.pow(Double.NaN);
      complex2.negate();
      complex6.getArgument();
      complex3.log();
      complex2.subtract(1.5707963267948966);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ONE.negate();
      complex0.toString();
      complex2.INF.reciprocal();
      List<Complex> list0 = complex0.nthRoot(1396);
      assertTrue(list0.contains(complex0));
      
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex4.INF.pow((double) 1396);
      Complex complex6 = complex2.add(5818.139993036193);
      Complex complex7 = complex4.I.sinh();
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.INF.cosh();
      Complex complex9 = complex0.cos();
      Complex complex10 = Complex.valueOf(5818.139993036193);
      Complex complex11 = complex10.ONE.subtract(complex4);
      complex11.INF.hashCode();
      Complex complex12 = complex9.sin();
      Complex complex13 = complex6.cosh();
      Complex complex14 = complex13.INF.atan();
      complex14.ZERO.asin();
      Complex complex15 = complex14.ZERO.sqrt();
      complex15.ONE.add((double) 1396);
      complex8.toString();
      complex1.NaN.tanh();
      complex10.isNaN();
      Complex complex16 = complex8.cos();
      assertSame(complex16, complex3);
      
      complex2.acos();
      List<Complex> list1 = complex12.nthRoot(69);
      assertEquals(69, list1.size());
      
      Complex complex17 = complex15.cosh();
      assertNotSame(complex14, complex5);
      assertEquals(5817.139993036193, complex6.getReal(), 0.01);
      
      Complex complex18 = complex12.acos();
      assertTrue(complex9.equals((Object)complex17));
      assertEquals(0.5707963267948967, complex18.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      
      complex0.isNaN();
      Complex complex3 = complex0.INF.multiply((-2662.093));
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.add(complex1);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      complex0.isNaN();
      complex1.isNaN();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.divide(2247.381);
      assertEquals(5.229203208729635E-4, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.ONE.cos();
      Complex complex9 = complex3.subtract(complex1);
      assertTrue(complex9.equals((Object)complex2));
      assertSame(complex9, complex5);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      complex8.isInfinite();
      assertEquals(0.5403023058681398, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      complex3.getField();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3356.581083, 6.938871462941557E63);
      Complex.valueOf(3356.581083, (-1.0732735585199074E280));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      assertEquals(6.971391257128099E-125, complex1.getReal(), 0.01);
      assertEquals((-1.4411565415798545E-64), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      
      complex0.createComplex(1774.003158, 3356.581083);
      assertEquals(3356.581083, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.add(0.272677481174469);
      assertSame(complex4, complex2);
      
      Complex complex5 = new Complex(0.06246116757392883);
      Complex complex6 = complex0.add(complex5);
      assertSame(complex6, complex1);
      assertSame(complex0, complex3);
      
      Complex complex7 = Complex.valueOf(0.272677481174469, (-4.916314210412424E-9));
      assertEquals((-4.916314210412424E-9), complex7.getImaginary(), 0.01);
      assertEquals(0.272677481174469, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.createComplex((-2.883847036065813E-246), (-2.883847036065813E-246));
      Complex complex3 = complex0.tan();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.divide((-4410.30844));
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals((-2.2674151107671735E-4), complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.I.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.pow(0.0);
      Complex complex4 = complex3.ZERO.reciprocal();
      complex3.conjugate();
      Complex complex5 = complex2.I.cosh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ONE.add(complex5);
      Complex complex8 = complex6.ZERO.tan();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex6.ZERO.exp();
      Complex complex10 = complex6.INF.sqrt1z();
      Complex complex11 = complex5.log();
      complex0.hashCode();
      Complex complex12 = complex10.subtract(0.0);
      assertTrue(complex6.equals((Object)complex9));
      assertSame(complex12, complex4);
      assertFalse(complex6.equals((Object)complex7));
      
      Complex complex13 = complex11.acos();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(2.233977021417532, complex13.getReal(), 0.01);
      
      Complex complex14 = complex11.sinh();
      assertEquals((-0.6552567059063928), complex14.getReal(), 0.01);
      
      Complex complex15 = complex11.multiply(1);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex8));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2447.0, (-2280.6868263784963));
      Complex complex1 = complex0.sqrt();
      assertEquals(53.81471589694343, complex1.getReal(), 0.01);
      assertEquals((-2280.6868263784963), complex0.getImaginary(), 0.01);
      assertEquals((-21.190178080156276), complex1.getImaginary(), 0.01);
  }
}
