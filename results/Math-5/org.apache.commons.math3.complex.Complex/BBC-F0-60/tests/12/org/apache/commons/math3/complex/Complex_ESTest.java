/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:45:09 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-2692.9210650875));
      complex0.tanh();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(877.777389264, 2.860915548426704E251);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      complex2.add(2242.7939863528);
      Complex complex3 = complex2.ONE.tan();
      complex3.NaN.sqrt();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = Complex.valueOf(2.860915548426704E251);
      complex5.I.add(complex2);
      complex4.multiply((-20.0));
      Complex complex6 = complex0.pow(2242.7939863528);
      complex6.ONE.conjugate();
      Complex complex7 = complex0.divide((-75.21965378714438));
      Complex complex8 = complex2.subtract(complex7);
      complex7.log();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.6525617499662284E-233, (-4.996854125490041E297));
      Complex complex1 = complex0.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tan();
      complex0.INF.createComplex(0.0, (-182.295415668058));
      complex1.ONE.hashCode();
      complex0.multiply(1816);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(760.331896083, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = complex1.sqrt();
      complex2.divide(760.331896083);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3726.3754628, Double.POSITIVE_INFINITY);
      complex0.NaN.acos();
      complex0.ZERO.cos();
      complex0.multiply(4271);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.766924303914492E-76), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(0.004744578326608426, 1426.70592);
      complex2.pow(complex1);
      Complex complex3 = Complex.ONE;
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      complex2.I.cosh();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex1.multiply((-179));
      Complex complex5 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.NaN.reciprocal();
      complex5.cos();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.INF.tanh();
      complex10.I.getField();
      complex9.INF.add((double) (-179));
      complex4.getField();
      complex0.abs();
      Complex complex11 = Complex.valueOf((-1903.0), Double.POSITIVE_INFINITY);
      complex11.multiply(complex0);
      complex7.tan();
      complex1.sin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.sin();
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(3.647655367408045E-80, Double.NaN);
      Complex complex1 = new Complex(3.647655367408045E-80, 3.647655367408045E-80);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(455.154063076, 1);
      Complex.valueOf(497.47072, (-206323.22113459138));
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(3306.0339676500653, (-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.635999584053557E109);
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ONE.exp();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2465.9, 2465.9);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.createComplex(2465.9, 2465.9);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex1.tan();
      complex2.ZERO.exp();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex2.asin();
      complex6.ZERO.divide(complex2);
      Complex complex7 = complex1.createComplex(2465.9, (-2093.129948600686));
      complex4.ZERO.tanh();
      complex5.multiply(2465.9);
      complex4.sinh();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex2.INF.createComplex((-2093.129948600686), (-2093.129948600686));
      Complex complex10 = complex8.multiply(2465.9);
      complex7.NaN.pow(2465.9);
      complex10.ZERO.toString();
      Complex.valueOf((-1425.8016392), (-3704.0));
      complex1.createComplex((-3704.0), (-1425.8016392));
      Complex complex11 = complex3.asin();
      complex9.add(complex11);
      complex11.cosh();
      complex10.nthRoot(543);
      Complex complex12 = complex9.sin();
      complex12.NaN.subtract(complex10);
      complex9.getField();
      complex7.pow(1341.97520067);
      complex8.pow(3.647655367408045E-80);
      Complex complex13 = complex1.sinh();
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex2.INF.divide(Double.POSITIVE_INFINITY);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2.657907009124756, (-1.0641715373474825));
      Complex complex2 = complex1.divide(330.9409258447065);
      Complex complex3 = new Complex(2.657907009124756, (-1.0641715373474825));
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1207.819947));
      Complex complex1 = new Complex(427.1724399851, 427.1724399851);
      Complex complex2 = complex0.divide(complex1);
      complex2.sqrt1z();
      Complex complex3 = complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.divide(complex5);
      complex6.sqrt();
      Complex complex8 = new Complex((-1207.819947), 427.1724399851);
      Complex complex9 = complex4.multiply(complex8);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 1128.034);
      complex7.divide((-1207.819947));
      complex3.subtract(complex2);
      complex9.readResolve();
      complex3.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.tan();
      Complex complex12 = complex9.divide(complex8);
      complex12.negate();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-2422.0), (-2422.0));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.divide(complex0);
      complex2.sqrt();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = new Complex(2.0, (-2422.0));
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.divide((-2452.877894));
      Complex complex8 = complex4.subtract(complex6);
      complex7.readResolve();
      complex1.add((-2452.877894));
      complex3.tan();
      complex8.divide(complex4);
      complex5.negate();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(20.0, (-1481.131030773046));
      complex4.pow(complex3);
      complex4.tan();
      Complex complex5 = Complex.ZERO;
      complex1.getImaginary();
      complex2.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-788.252517), (-788.252517));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-2422.02249725153));
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.createComplex((-4.711988033385175E-8), (-425.859407380582));
      Complex complex3 = new Complex((-2726.309029678), (-7.752519943329177E-294));
      complex3.pow(complex1);
      complex0.tan();
      Complex complex4 = Complex.NaN;
      complex4.hashCode();
      complex2.reciprocal();
      Complex complex5 = new Complex(1086.2780390239961);
      complex5.getImaginary();
      complex1.tanh();
      Complex complex6 = Complex.valueOf(736.6620589672, (-7.752519943329177E-294));
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, (-1.766924303914492E-76));
      Complex complex2 = complex1.pow(complex1);
      complex0.tan();
      Complex complex3 = Complex.NaN;
      complex1.getImaginary();
      complex3.tanh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sqrt1z();
      complex0.atan();
      complex2.cos();
      Complex complex3 = complex0.divide(complex1);
      complex0.getImaginary();
      complex3.multiply(404.4056097);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1929.2540653017827), 661.1770927481276);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.divide((-1929.2540653017827));
      Complex complex5 = complex0.NaN.multiply(661.1770927481276);
      complex5.ZERO.atan();
      complex4.ZERO.abs();
      complex3.getReal();
      complex5.ZERO.exp();
      complex0.readResolve();
      Complex complex6 = complex4.cosh();
      complex3.sqrt1z();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex6.add((-171.351));
      complex8.ONE.add(complex3);
      Complex.valueOf((-100.8345), (-1394.46));
      complex4.abs();
      Complex complex9 = complex5.acos();
      complex9.INF.pow(0.0);
      complex9.NaN.sqrt1z();
      Complex complex10 = complex2.conjugate();
      complex7.multiply(Double.POSITIVE_INFINITY);
      complex4.sqrt1z();
      complex10.cos();
      complex3.sin();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(Double.NaN, 1407.76);
      complex0.pow(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.NaN;
      complex2.NaN.hashCode();
      complex3.I.reciprocal();
      complex1.getImaginary();
      complex2.tanh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.tan();
      complex3.ZERO.asin();
      Complex complex4 = Complex.NaN;
      complex0.getImaginary();
      complex1.NaN.subtract(complex3);
      complex1.I.pow(282.4414373428746);
      complex4.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.I.add(1.4102261066436768);
      Complex complex1 = complex0.I.exp();
      complex1.INF.abs();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(509.9666844740064, (-1302.421728618151));
      Complex complex1 = new Complex((-249.73978242744), (-249.73978242744));
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.NaN.multiply(1);
      complex3.I.getArgument();
      Complex complex4 = complex1.NaN.tan();
      complex4.NaN.negate();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.divide(complex4);
      complex2.INF.hashCode();
      complex4.I.nthRoot(1);
      complex1.asin();
      complex2.ONE.add(complex5);
      complex2.ONE.exp();
      Complex complex7 = complex6.pow(509.9666844740064);
      complex1.ZERO.toString();
      complex2.cos();
      Complex complex8 = complex4.cos();
      complex0.NaN.toString();
      Complex complex9 = complex6.asin();
      complex9.getField();
      complex0.readResolve();
      complex7.asin();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-1.766924303914492E-76));
      Complex complex2 = complex1.pow(180.3102094);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.sqrt1z();
      complex0.atan();
      Complex complex5 = complex4.cos();
      Complex complex6 = Complex.ZERO;
      complex6.divide(complex3);
      complex5.createComplex(1333.8275672076281, 1333.8275672076281);
      complex5.sinh();
      Complex complex7 = Complex.ZERO;
      complex2.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1.3575263023376465);
      Complex complex1 = new Complex(1.0524719896550007E251, 1.493865728378296);
      complex1.ZERO.atan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.atan();
      complex4.getImaginary();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.nthRoot(1);
      complex1.exp();
      complex2.negate();
      complex2.subtract(318.7073);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-1.766924303914492E-76));
      Complex complex2 = complex1.sinh();
      Complex complex3 = new Complex(0.0);
      complex3.cosh();
      complex2.add((double) 1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.log();
      Complex complex1 = new Complex(1.0524719896550007E251);
      Complex complex2 = Complex.ZERO;
      complex0.divide(complex2);
      Complex complex3 = Complex.valueOf((-3115.5), 1333.8275672076281);
      complex3.createComplex(1333.8275672076281, 1570.265933);
      complex0.sinh();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(3.3922703599272275E-47, (-955.4126787127));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.sqrt1z();
      complex1.atan();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.divide(complex0);
      complex4.createComplex(1923.00321913, (-955.4126787127));
      complex3.sinh();
      complex6.nthRoot(1081);
      Complex complex7 = Complex.valueOf((double) 1081, (-377.97476050237316));
      Complex complex8 = complex7.exp();
      complex8.negate();
      complex0.log();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
      double double0 = 1299.5308237;
      Complex complex1 = Complex.valueOf(1299.5308237, 1299.5308237);
      complex1.log();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.NaN;
      complex2.tan();
      complex2.NaN.hashCode();
      complex3.atan();
      complex0.getImaginary();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex0.ONE.getField();
      complex1.ONE.toString();
      complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.atan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.log();
      Complex complex2 = new Complex(1.0524719896550007E251);
      complex2.asin();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex3.tan();
      complex0.atan();
      complex4.getImaginary();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex0.NaN.negate();
      Complex complex2 = complex1.INF.multiply(1187.21188138);
      complex1.NaN.reciprocal();
      complex0.ZERO.pow(1187.21188138);
      Complex complex3 = complex0.createComplex(1333.8275672076281, 1187.21188138);
      complex0.nthRoot(1081);
      complex1.exp();
      complex2.negate();
      Complex complex4 = complex3.subtract(2.0);
      complex4.pow((-7.44321345601866E-11));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-8.305334708631055E-8));
      Complex complex1 = complex0.NaN.asin();
      complex1.ONE.nthRoot(37);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.I.reciprocal();
      complex3.NaN.toString();
      Complex.valueOf((-8.305334708631055E-8));
      complex0.INF.createComplex((-8.305334708631055E-8), (-8.305334708631055E-8));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.ONE;
      complex7.getImaginary();
      complex6.getArgument();
      complex2.hashCode();
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(0.0, (-1.766924303914492E-76));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.cos();
      Complex complex5 = Complex.ZERO;
      complex5.divide(complex1);
      Complex complex6 = complex4.createComplex(1333.8275672076281, 1333.8275672076281);
      complex6.INF.sinh();
      complex5.nthRoot(1081);
      Complex complex7 = complex4.exp();
      complex7.negate();
      Complex complex8 = complex3.log();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-1483.0));
      Complex complex1 = Complex.valueOf((-1483.0));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex5.I.pow(complex3);
      Complex complex8 = complex7.ZERO.add((-1483.0));
      complex1.INF.sinh();
      complex0.I.asin();
      complex6.toString();
      complex0.isInfinite();
      Complex complex9 = Complex.I;
      complex9.getField();
      // Undeclared exception!
      complex8.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-1.766924303914492E-76));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.multiply(588.3747578763254);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.pow((-1.766924303914492E-76));
      Complex complex6 = complex1.subtract(complex5);
      Complex complex7 = complex4.subtract(complex1);
      Complex complex8 = complex1.multiply(588.3747578763254);
      complex7.pow(complex6);
      complex1.getArgument();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1483.0));
      Complex complex1 = Complex.valueOf((-1483.0));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex4.INF.sinh();
      complex5.I.pow(complex3);
      Complex complex7 = Complex.valueOf((-1483.0), (-1.3946383592553814E-8));
      complex5.tan();
      complex7.getImaginary();
      complex6.getArgument();
      complex0.hashCode();
      complex4.equals("C:.(UFYe7");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-8.305334708631055E-8));
      Complex complex1 = complex0.NaN.asin();
      complex1.ONE.nthRoot(37);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.cos();
      complex1.divide(complex3);
      complex1.createComplex(0.0, 6.283185307179586);
      complex3.nthRoot(1);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.negate();
      complex5.subtract(6.283185307179586);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1328.549602338649, 4730478.4799999995);
      complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(1328.549602338649);
      Complex complex2 = complex0.createComplex(4730478.4799999995, (-2998.148));
      Complex complex3 = complex2.multiply(complex1);
      complex2.ONE.nthRoot(2307);
      Complex complex4 = complex3.ONE.createComplex(1328.549602338649, 0.0);
      complex4.I.subtract(complex0);
      Complex complex5 = complex3.pow(0.0);
      complex5.NaN.negate();
      Complex complex6 = complex5.INF.sqrt();
      complex6.ZERO.multiply(4730478.4799999995);
      Complex complex7 = complex1.reciprocal();
      complex2.createComplex((-2998.148), 658.59427611);
      complex3.multiply(2307);
      complex7.divide(4760.972634289704);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.divide(3656.74);
      Complex complex3 = complex1.I.divide(Double.NaN);
      complex3.INF.toString();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex3.ZERO.sqrt1z();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex3.ONE.sqrt();
      complex7.ZERO.conjugate();
      Complex complex8 = complex2.tan();
      complex8.INF.readResolve();
      complex8.multiply((-3268));
      Complex complex9 = complex3.cos();
      Complex complex10 = complex9.multiply(complex4);
      Complex complex11 = complex10.INF.sin();
      complex4.ZERO.toString();
      Complex complex12 = complex9.createComplex(4733.77, (-1466.0251194430355));
      Complex complex13 = complex7.subtract(complex1);
      complex0.readResolve();
      Complex.valueOf(1026.9989);
      complex12.readResolve();
      Complex complex14 = complex0.cosh();
      Complex.valueOf(1026.9989, (-1466.0251194430355));
      complex14.INF.cosh();
      complex13.reciprocal();
      complex11.sinh();
      complex6.negate();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-2422.16));
      Complex complex1 = complex0.INF.createComplex((-1282.61262), (-2422.16));
      Complex complex2 = complex1.multiply((-791));
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.INF;
      complex4.add((-1282.61262));
      Complex complex5 = new Complex(1623.4862185840693);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex3.divide(6.283185307179586);
      Complex complex8 = complex0.divide(complex5);
      Complex complex9 = complex7.subtract(139.5089558004);
      Complex complex10 = Complex.ONE;
      complex10.negate();
      Complex complex11 = complex9.add(1.0);
      Complex complex12 = complex8.sqrt1z();
      complex0.getArgument();
      complex0.acos();
      Complex complex13 = complex5.negate();
      complex13.divide(complex8);
      complex12.acos();
      Complex complex14 = complex6.divide(0.0);
      Complex complex15 = new Complex(Double.NaN, (-2422.16));
      complex2.add(complex15);
      complex14.add(complex2);
      complex11.add(971.08);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.atan();
      Complex.valueOf((-2697.139), (-2697.139));
      Complex complex5 = complex4.tan();
      complex4.getImaginary();
      complex1.getArgument();
      complex4.hashCode();
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-0.38109784554181547));
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.subtract(2223.001805381);
      Complex complex6 = complex4.sin();
      complex6.readResolve();
      Complex complex7 = complex5.subtract((-0.38109784554181547));
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex0.pow(complex6);
      Complex complex10 = complex8.divide((-4070.76836908));
      Complex complex11 = complex10.exp();
      Complex.valueOf((-4070.76836908), 2223.001805381);
      complex10.cos();
      Complex complex12 = complex4.divide(complex11);
      complex1.tanh();
      complex7.multiply(complex8);
      complex8.log();
      complex9.toString();
      complex4.multiply(2223.001805381);
      complex0.isNaN();
      complex3.readResolve();
      complex11.log();
      complex12.multiply(695);
      Complex complex13 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1483.0));
      Complex complex1 = Complex.valueOf((-1483.0));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = Complex.NaN;
      complex5.toString();
      complex2.readResolve();
      complex4.subtract((-3.275360514112964E-9));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.pow(complex5);
      Complex complex8 = complex7.divide(3367.8802123);
      Complex complex9 = complex7.exp();
      Complex complex10 = Complex.valueOf(1372.738730731802, (-8.955768055535647E-8));
      Complex complex11 = complex2.cos();
      Complex complex12 = complex8.divide(complex2);
      complex9.tanh();
      Complex complex13 = complex10.multiply(complex3);
      complex2.log();
      complex12.toString();
      complex1.multiply(3.0779152939430787E-4);
      complex13.isNaN();
      complex8.multiply(3097.9668);
      complex11.readResolve();
      complex13.log();
      complex13.multiply(1391);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-8.305334708631055E-8));
      Complex complex1 = complex0.NaN.asin();
      complex1.ONE.nthRoot(37);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.I.reciprocal();
      complex3.NaN.toString();
      Complex.valueOf((-8.305334708631055E-8));
      Complex complex4 = complex0.INF.createComplex((-8.305334708631055E-8), (-8.305334708631055E-8));
      Complex complex5 = complex0.negate();
      complex5.asin();
      complex4.asin();
      complex5.NaN.toString();
      complex0.isInfinite();
      complex4.getField();
      complex5.nthRoot(37);
      complex1.readResolve();
      complex4.toString();
      complex1.sqrt1z();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sin();
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      complex0.add(0.0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex0.divide(complex4);
      Complex.valueOf(5.328392630534142E-8, (-1932.0));
      Complex complex7 = complex5.cos();
      Complex complex8 = complex4.divide(complex7);
      complex6.tanh();
      Complex complex9 = complex1.multiply(complex8);
      Complex complex10 = complex6.log();
      complex10.ZERO.pow(2.414213562373095);
      complex2.toString();
      Complex complex11 = complex3.multiply((-1932.0));
      complex11.isNaN();
      complex9.multiply((-1.0));
      complex0.readResolve();
      complex5.log();
      complex0.multiply((-1108));
      Complex complex12 = Complex.valueOf(422.7);
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.493865728378296, 1.493865728378296);
      complex0.getReal();
      Complex complex1 = Complex.valueOf(1.493865728378296);
      complex1.readResolve();
      complex0.equals(complex1);
      complex0.toString();
      Complex complex2 = Complex.ONE;
      complex2.multiply(complex0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex0.pow(complex1);
      complex2.readResolve();
      Complex complex3 = complex2.negate();
      complex2.tanh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.log();
      complex5.INF.sqrt();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-1.766924303914492E-76));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.sqrt1z();
      complex0.atan();
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.ZERO;
      complex5.divide(complex2);
      complex4.createComplex(1333.8275672076281, 1333.8275672076281);
      complex5.nthRoot(1081);
      Complex complex6 = complex4.exp();
      complex6.negate();
      Complex complex7 = complex4.subtract(2.0);
      complex7.pow(2614.8458721);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ONE.pow(6.283185307179586);
      Complex complex4 = Complex.valueOf((-2244.0));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.ZERO.sqrt();
      complex3.NaN.toString();
      Complex complex7 = complex4.INF.subtract(6.283185307179586);
      Complex complex8 = complex3.multiply(complex0);
      Complex.valueOf((-2244.0), 0.0);
      complex6.NaN.getArgument();
      Complex complex9 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex10 = complex7.ONE.reciprocal();
      complex10.ZERO.multiply(0.0);
      Complex complex11 = complex6.ONE.pow(complex9);
      Complex.valueOf(Double.NaN, (-2244.0));
      Complex complex12 = complex2.reciprocal();
      Complex complex13 = complex11.ONE.sinh();
      complex12.ZERO.getField();
      complex13.multiply(6.283185307179586);
      complex11.sqrt1z();
      complex2.sinh();
      Complex complex14 = complex3.multiply(complex7);
      complex14.multiply(complex12);
      complex4.asin();
      complex6.toString();
      complex13.acos();
      Complex complex15 = complex8.divide(6.283185307179586);
      complex15.INF.tanh();
      complex1.add(complex12);
      complex7.add(complex3);
      Complex complex16 = Complex.INF;
      complex16.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-2422.16));
      Complex complex1 = complex0.INF.createComplex((-1282.61262), (-2422.16));
      Complex complex2 = complex0.INF.multiply(1);
      Complex complex3 = complex2.I.tan();
      complex2.NaN.add((double) 1);
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex0.INF.divide((-2422.16));
      Complex complex6 = complex4.ONE.divide(complex0);
      complex6.ZERO.subtract(0.0);
      Complex complex7 = complex0.negate();
      complex7.add((-1282.61262));
      Complex complex8 = complex7.ONE.sqrt1z();
      complex2.ZERO.getArgument();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.negate();
      complex5.divide(complex6);
      complex3.getField();
      complex1.cos();
      Complex complex11 = new Complex(5.985029026745163, (-1.0));
      Complex complex12 = complex11.multiply(Double.POSITIVE_INFINITY);
      complex12.I.multiply((-176054.7681));
      complex10.abs();
      Complex complex13 = Complex.valueOf(864.5025, (-864.5025));
      complex6.getReal();
      complex13.reciprocal();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-1483.0));
      Complex complex1 = Complex.valueOf((-1483.0));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = Complex.valueOf((-1483.0));
      Complex complex6 = complex1.createComplex((-1483.0), (-1483.0));
      complex5.negate();
      complex2.asin();
      Complex complex7 = complex5.asin();
      complex4.toString();
      complex6.isInfinite();
      complex4.getField();
      complex7.nthRoot(1296);
      complex3.createComplex(20.0, (-1624.476));
      complex2.asin();
      complex6.pow(complex1);
      complex1.tan();
      Complex complex8 = Complex.ONE;
      complex8.atan();
      complex8.getImaginary();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.INF;
      complex2.cos();
      complex0.toString();
      complex1.multiply(2147471450);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.multiply(2147471450);
      complex4.ZERO.getArgument();
      complex3.pow(complex4);
      complex3.readResolve();
      Complex complex5 = complex2.negate();
      Complex complex6 = new Complex(0, 997.855802246);
      complex6.tanh();
      complex3.tanh();
      complex3.getArgument();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = complex0.multiply((-2147483281));
      complex0.multiply(35);
      complex0.readResolve();
      complex1.negate();
      Complex complex2 = Complex.valueOf((-1100.2));
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ZERO.atan();
      complex4.NaN.add((-2322.118937132042));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-2422.16));
      complex0.INF.createComplex((-1282.61262), (-2422.16));
      Complex complex1 = complex0.INF.multiply(1);
      complex1.I.tan();
      Complex complex2 = complex1.NaN.add((double) 1);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex0.INF.divide((-2422.16));
      Complex complex5 = complex3.ONE.divide(complex0);
      complex5.ZERO.subtract(0.0);
      Complex complex6 = complex0.negate();
      complex6.add((-1282.61262));
      complex6.ONE.sqrt1z();
      complex1.ZERO.getArgument();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex7.negate();
      complex4.divide(complex5);
      complex6.acos();
      complex3.divide((-2422.16));
      complex8.add(complex0);
      complex7.add(complex2);
      complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1027.3837886603653), 0.0);
      complex1.INF.sin();
      complex1.INF.sin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sin();
      complex3.ONE.tanh();
      Complex complex4 = complex3.multiply(1);
      complex4.conjugate();
      complex3.INF.reciprocal();
      complex1.sin();
      Complex complex5 = complex3.acos();
      complex2.sin();
      complex0.cosh();
      complex5.multiply((-1.0128633727463388E-7));
      complex5.exp();
      complex0.atan();
      complex5.createComplex(0.0, 0.0);
      Complex complex6 = complex0.tan();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN, (-1.0));
      complex1.NaN.toString();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.subtract(Double.NaN);
      complex5.ONE.cos();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.I.log();
      Complex complex8 = complex6.NaN.sqrt();
      complex8.NaN.exp();
      complex1.NaN.conjugate();
      Complex complex9 = complex6.acos();
      complex9.INF.atan();
      Complex complex10 = complex0.multiply((-1213));
      Complex complex11 = complex0.log();
      Complex complex12 = complex11.ONE.subtract(Double.NaN);
      Complex complex13 = complex5.cosh();
      complex10.NaN.abs();
      Complex complex14 = complex13.I.reciprocal();
      complex2.I.cos();
      Complex complex15 = complex5.sqrt();
      Complex complex16 = complex13.cosh();
      complex16.cos();
      complex7.asin();
      complex12.getField();
      complex10.sinh();
      complex14.sinh();
      complex3.add(complex8);
      complex13.getField();
      complex15.nthRoot(694);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-864.5025));
      complex0.ONE.atan();
      Complex complex1 = complex0.add((-864.5025));
      complex1.NaN.sin();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = Complex.valueOf((-864.5025), (-864.5025));
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.sin();
      complex5.I.getArgument();
      complex1.sinh();
      Complex complex6 = complex4.INF.pow(complex2);
      complex1.INF.divide(0.0);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.sqrt();
      complex8.NaN.cosh();
      Complex complex9 = complex4.createComplex(1.5707963267948966, 1.9050939083099365);
      complex9.exp();
      complex6.sqrt1z();
      Complex complex10 = complex9.acos();
      complex10.I.getArgument();
      Complex.valueOf((-1806.04174), 2.0);
      Complex.valueOf(1.5707963267948966, (-393.168568403649));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-8.305334708631055E-8));
      Complex complex1 = complex0.NaN.asin();
      complex1.ONE.nthRoot(37);
      complex0.ONE.negate();
      complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf((-8.305334708631055E-8));
      Complex complex3 = complex0.INF.createComplex((-8.305334708631055E-8), (-8.305334708631055E-8));
      Complex complex4 = complex0.negate();
      complex4.asin();
      complex3.asin();
      complex4.NaN.toString();
      complex0.isInfinite();
      complex3.getField();
      complex4.nthRoot(37);
      complex4.createComplex(37, (-1995.9616));
      complex0.asin();
      complex0.pow(complex2);
      Complex complex5 = complex3.tan();
      complex5.atan();
      complex1.getImaginary();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.INF.negate();
      complex1.ZERO.negate();
      complex1.NaN.nthRoot(1911);
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-1345.336858379123));
      complex0.I.tanh();
      complex0.ZERO.add((-1345.336858379123));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex2.subtract((-839.327705));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-1483.0));
      Complex complex1 = Complex.valueOf((-1483.0));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex5.I.pow(complex3);
      complex7.ZERO.add((-1483.0));
      complex1.INF.sinh();
      complex0.I.asin();
      complex7.INF.negate();
      complex1.INF.getField();
      complex0.I.getArgument();
      complex0.readResolve();
      complex1.equals(complex0);
      complex1.toString();
      complex5.multiply(complex3);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = Complex.valueOf(1299.5308237);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex0.subtract(1299.5308237);
      Complex complex7 = complex6.sin();
      complex3.I.toString();
      complex7.readResolve();
      Complex complex8 = complex5.subtract(1299.5308237);
      Complex complex9 = Complex.NaN;
      complex7.pow(complex9);
      Complex complex10 = complex4.ONE.divide((-8.955768055535647E-8));
      complex10.NaN.exp();
      Complex.valueOf(1299.5308237, 422.7);
      Complex complex11 = complex8.cos();
      complex4.ZERO.divide(complex1);
      complex11.tanh();
      Complex complex12 = complex3.multiply(complex0);
      complex12.log();
      complex12.NaN.toString();
      complex7.multiply(1299.5308237);
      complex4.isNaN();
      complex4.multiply(1299.5308237);
      complex1.ONE.readResolve();
      complex4.log();
      Complex complex13 = complex12.multiply(1391);
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.NaN.sin();
      complex2.I.getArgument();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex1.sin();
      complex3.ONE.negate();
      Complex complex7 = complex0.pow(complex1);
      complex7.NaN.pow(complex1);
      complex1.getArgument();
      complex0.toString();
      Complex complex8 = complex7.I.pow(complex6);
      Complex complex9 = complex8.I.pow(0.0);
      Complex complex10 = complex7.ONE.multiply(complex9);
      complex7.NaN.divide(complex8);
      Complex complex11 = complex7.I.conjugate();
      complex1.abs();
      Complex complex12 = complex1.log();
      Complex complex13 = complex5.divide(complex7);
      complex13.nthRoot(818);
      complex3.hashCode();
      complex10.toString();
      complex12.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.INF.atan();
      Complex.valueOf((-2697.139), 2488.44302);
      Complex complex2 = complex0.tan();
      complex0.getImaginary();
      complex1.ONE.getArgument();
      complex1.hashCode();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = complex0.multiply(2142.72364971);
      complex1.getField();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.multiply(2142.72364971);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex5.ZERO.tanh();
      complex4.conjugate();
      complex7.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      complex6.multiply(complex8);
      complex2.reciprocal();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.sqrt();
      int int0 = (-618);
      complex1.ZERO.nthRoot(1062);
      try { 
        complex2.nthRoot((-618));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -618
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(431.7400127, (-1643.97));
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.NaN.pow(4316.1559157);
      complex1.INF.nthRoot(135);
      complex0.INF.acos();
      complex0.divide(0.0);
      complex2.getArgument();
      Complex complex3 = complex2.exp();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(0.0);
      complex1.I.abs();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.multiply(complex2);
      complex4.ONE.multiply(0.0);
      complex2.ZERO.nthRoot(2956);
      Complex complex5 = Complex.valueOf((-1099.56495625226));
      Complex complex6 = complex5.ZERO.pow(complex0);
      Complex complex7 = complex3.multiply(complex2);
      complex0.log();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex2.add(0.0);
      complex10.INF.readResolve();
      Complex.valueOf((-1942.81632712013));
      complex5.atan();
      Complex complex11 = complex0.negate();
      complex11.NaN.pow(complex0);
      Complex.valueOf((-1099.56495625226));
      complex7.getField();
      complex5.ONE.sin();
      complex4.divide(146.0);
      Complex complex12 = complex7.pow(0.0);
      complex12.NaN.sin();
      complex5.getReal();
      complex12.tanh();
      complex9.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ONE.pow(893.6);
      Complex complex4 = complex3.ONE.createComplex(893.6, 6.283185307179586);
      Complex.valueOf(893.6, 4496.6977211783);
      Complex complex5 = complex1.I.divide(2267.05592284732);
      Complex complex6 = Complex.valueOf(4496.6977211783);
      Complex complex7 = Complex.NaN;
      complex1.equals(complex7);
      complex7.NaN.getArgument();
      Complex complex8 = complex0.cos();
      complex0.sqrt1z();
      complex7.abs();
      Complex.valueOf((-83.042), 0.0);
      complex3.readResolve();
      complex8.divide(901.8345675);
      complex1.log();
      complex8.getArgument();
      complex4.sinh();
      Complex.valueOf(901.8345675, Double.NaN);
      complex1.equals(complex4);
      Complex complex9 = complex5.tan();
      Complex complex10 = complex9.ZERO.tan();
      complex9.INF.abs();
      complex2.getField();
      Complex complex11 = complex6.divide(2267.05592284732);
      complex11.sinh();
      List<Complex> list0 = complex10.nthRoot(543);
      complex9.equals(list0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.log();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(2183.205974186387, 2183.205974186387);
      Complex complex1 = Complex.valueOf(2183.205974186387);
      Complex.valueOf(2183.205974186387, 0.0);
      Complex.valueOf(2183.205974186387);
      complex1.I.negate();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.add(2183.205974186387);
      Complex complex4 = Complex.valueOf(2.2950686306677644E-244);
      complex4.I.getField();
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex6.ONE.sin();
      complex7.ZERO.acos();
      Complex complex8 = Complex.valueOf(2.0);
      Complex complex9 = Complex.valueOf(2183.205974186387, 2.0);
      complex0.ZERO.add(complex9);
      complex8.toString();
      Complex complex10 = complex0.tan();
      complex10.ZERO.pow(0.0);
      complex3.tanh();
      complex5.NaN.sqrt();
      Complex complex11 = complex2.divide(complex1);
      complex11.INF.acos();
      complex6.atan();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.I.subtract((-2498.5363));
      complex0.cosh();
      Complex complex3 = complex0.acos();
      complex0.createComplex((-1432.65135328), (-1432.65135328));
      complex0.readResolve();
      complex0.createComplex(4068.5, (-1432.65135328));
      complex2.cosh();
      complex0.pow(complex1);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ONE.pow(6.283185307179586);
      Complex complex4 = Complex.valueOf((-2244.0));
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.ZERO.sqrt();
      complex3.NaN.toString();
      Complex complex7 = complex4.INF.subtract(6.283185307179586);
      complex3.multiply(complex0);
      Complex.valueOf((-2244.0), 0.0);
      complex6.NaN.getArgument();
      Complex complex8 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex9 = complex7.ONE.reciprocal();
      complex9.ZERO.multiply(0.0);
      Complex complex10 = complex6.ONE.pow(complex8);
      complex5.NaN.createComplex((-2244.0), (-2244.0));
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex10.ONE.sinh();
      complex11.ZERO.getField();
      complex10.sqrt1z();
      complex2.sinh();
      Complex complex13 = complex3.multiply(complex7);
      complex13.multiply(complex11);
      complex4.asin();
      complex6.toString();
      complex4.getField();
      complex12.cos();
      complex10.multiply(Double.NaN);
      complex0.abs();
      Complex.valueOf(6.283185307179586, 141.380047083);
      complex10.getReal();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2359.0);
      Complex complex1 = new Complex((-2730.1174276153574));
      Complex complex2 = complex0.NaN.divide(complex1);
      complex0.sinh();
      Complex complex3 = complex2.add((-665.20187));
      Complex complex4 = complex3.sin();
      complex4.add(2359.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.negate();
      Complex complex1 = complex0.I.cos();
      complex1.I.getArgument();
      complex0.isNaN();
      complex0.log();
      Complex.valueOf(4.558612479525779E-200, 4.558612479525779E-200);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.abs();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.createComplex(1.5869022483809747E-256, 707.89507);
      complex2.NaN.hashCode();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.divide(0.0);
      complex2.ZERO.nthRoot(830);
      Complex complex3 = complex2.NaN.reciprocal();
      complex3.ONE.sqrt1z();
      complex1.INF.sin();
      complex1.readResolve();
      complex1.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-1476);
      try { 
        complex0.nthRoot((-1476));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,476
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1982.7360593368194);
      Complex complex1 = complex0.createComplex(1982.7360593368194, 1982.7360593368194);
      Complex complex2 = complex0.ZERO.divide(2335.236758842133);
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex3.INF.pow(complex2);
      complex3.INF.multiply(complex1);
      Complex complex5 = complex0.ZERO.cos();
      Complex complex6 = complex5.ONE.tanh();
      complex2.I.add(1982.7360593368194);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex1.subtract(complex2);
      Complex complex9 = Complex.valueOf(1982.7360593368194, 2335.236758842133);
      Complex complex10 = complex9.multiply(2335.236758842133);
      complex0.getReal();
      Complex complex11 = complex0.subtract(complex6);
      Complex complex12 = complex4.conjugate();
      complex12.ZERO.exp();
      complex11.acos();
      complex5.sin();
      complex3.multiply(complex8);
      complex10.isInfinite();
      complex7.divide((-3009.274508665916));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex1.sinh();
      complex0.INF.sqrt1z();
      Complex complex2 = complex0.atan();
      complex2.NaN.cos();
      Complex complex3 = complex0.divide(complex2);
      complex2.I.createComplex(0.0, 0.0);
      complex1.nthRoot(1);
      Complex complex4 = complex0.exp();
      complex4.negate();
      complex3.subtract(2134.15312);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(977.7109324158);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.ONE.pow(977.7109324158);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.divide(9.390740355567705E62);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex4.add(0.0);
      complex0.isInfinite();
      Complex.valueOf(9.390740355567705E62, 977.7109324158);
      complex0.getArgument();
      complex4.sinh();
      Complex complex7 = complex6.I.createComplex(6.380177790989479E207, 1600.9717);
      Complex complex8 = complex6.pow(complex5);
      complex8.ZERO.cos();
      Complex.valueOf(0.0);
      Complex complex9 = complex8.divide(complex3);
      Complex complex10 = complex0.acos();
      complex9.atan();
      complex1.readResolve();
      Complex.valueOf((-238.58003), 977.7109324158);
      complex7.divide(0.0);
      Complex.valueOf(1247.8, (-42.6546563));
      complex10.log();
      complex10.add(977.7109324158);
      complex2.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.asin();
      complex0.I.createComplex(2.5139999389648438, 0.0);
      complex1.negate();
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex1.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex1.divide(complex5);
      complex0.hashCode();
      complex3.NaN.pow(complex0);
      complex4.isNaN();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex3.ZERO.acos();
      Complex.valueOf(3691.912598727, (-2027.0621360625));
      complex9.ZERO.acos();
      complex2.NaN.divide((-2.7237099632871992E-8));
      Complex complex10 = complex9.INF.sqrt();
      complex3.isInfinite();
      Complex complex11 = complex3.conjugate();
      complex11.sqrt();
      complex3.acos();
      Complex complex12 = complex2.reciprocal();
      complex12.ONE.log();
      Complex complex13 = complex7.negate();
      complex8.reciprocal();
      complex13.equals(complex12);
      complex7.cos();
      complex6.cos();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(1914.12, 2664.626);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.subtract(complex0);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2113.449267), Double.NaN);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-618.0), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.pow(complex1);
      complex0.sin();
      Complex complex4 = complex1.createComplex((-618.0), 0.0);
      complex4.NaN.hashCode();
      complex1.INF.toString();
      Complex complex5 = complex1.INF.multiply(1);
      complex5.log();
      complex5.NaN.pow(complex0);
      complex3.ZERO.readResolve();
      Complex complex6 = complex3.add(4525.766648788);
      Complex complex7 = complex6.ZERO.cos();
      complex7.ONE.subtract(4525.766648788);
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex8.I.add(2393.0);
      Complex complex10 = complex6.ZERO.cosh();
      Complex complex11 = complex10.negate();
      complex3.getField();
      complex6.multiply(322);
      complex3.abs();
      Complex complex12 = complex1.cos();
      complex3.hashCode();
      complex2.divide(complex12);
      Complex complex13 = complex3.sin();
      complex9.isNaN();
      complex11.add(complex4);
      complex0.sqrt1z();
      complex13.conjugate();
      complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex1.I.add(0.0);
      Complex complex3 = complex0.createComplex((-14.87), (-14.87));
      Complex complex4 = complex1.subtract(3091.816541229214);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex1.sinh();
      complex6.ZERO.multiply((-2303.30589));
      Complex complex7 = complex6.ONE.divide(complex1);
      Complex complex8 = complex3.subtract(3091.816541229214);
      complex8.NaN.hashCode();
      complex3.toString();
      complex5.NaN.multiply(0.0);
      complex8.toString();
      Complex complex9 = complex4.sin();
      complex2.log();
      complex5.multiply(complex7);
      Complex.valueOf(1627.22434469705);
      Complex.valueOf((-2303.30589), (-14.87));
      complex9.isNaN();
      complex6.nthRoot(1867);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586, 3875.317);
      Complex complex2 = complex0.multiply(complex1);
      complex0.readResolve();
      complex2.abs();
      Complex complex3 = complex1.cos();
      complex2.hashCode();
      Complex complex4 = complex3.createComplex(3875.3220935693334, (-4807.0));
      complex4.ZERO.tanh();
      Complex complex5 = Complex.valueOf(3875.3220935693334);
      Complex complex6 = complex3.I.divide(0.0);
      Complex complex7 = complex4.NaN.asin();
      complex4.toString();
      Complex complex8 = complex4.cos();
      complex8.tanh();
      complex7.INF.abs();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.add(complex9);
      Complex.valueOf(2.0);
      Complex complex11 = Complex.valueOf((-3894.0));
      complex7.NaN.reciprocal();
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = complex12.ZERO.asin();
      Complex complex14 = complex2.add(complex5);
      complex7.getArgument();
      complex10.toString();
      complex13.isInfinite();
      complex2.getImaginary();
      complex13.asin();
      Complex complex15 = complex4.sinh();
      complex15.multiply(complex14);
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1872.168206519891, 1872.168206519891);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex0.getArgument();
      Complex complex3 = complex0.multiply((-1));
      Complex complex4 = Complex.ZERO;
      complex4.I.asin();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.INF.cos();
      Complex complex10 = complex7.exp();
      complex6.NaN.abs();
      Complex complex11 = complex1.multiply((double) (-1));
      complex3.ZERO.divide(complex4);
      complex11.INF.pow(1872.168206519891);
      Complex complex12 = complex6.sqrt1z();
      complex8.multiply(complex10);
      complex6.multiply(complex0);
      complex5.getField();
      complex4.isNaN();
      complex9.getField();
      Complex.valueOf(1014.732);
      complex12.divide(2.1211390495300293);
      complex0.divide(0.2607102394104004);
      complex2.isInfinite();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = new Complex(3815.25426047728, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.sqrt();
      complex4.ZERO.getField();
      complex4.NaN.hashCode();
      complex1.ZERO.conjugate();
      complex2.isNaN();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = Complex.valueOf(3815.25426047728);
      Complex complex8 = complex6.INF.sinh();
      Complex complex9 = complex2.NaN.exp();
      Complex complex10 = complex3.I.atan();
      Complex complex11 = complex3.divide(complex6);
      Complex complex12 = Complex.valueOf(3491.8, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex12.isInfinite();
      assertTrue(boolean0);
      
      complex6.getField();
      Complex complex13 = complex7.multiply(1219);
      Complex complex14 = complex13.I.add(complex0);
      assertEquals(4650794.943521804, complex13.getReal(), 0.01);
      
      Complex complex15 = complex4.INF.atan();
      complex11.multiply(complex4);
      complex3.hashCode();
      Complex complex16 = complex4.cos();
      Complex complex17 = complex1.cos();
      assertEquals(0.5403023058681398, complex17.getReal(), 0.01);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      
      Complex complex18 = Complex.valueOf(Double.POSITIVE_INFINITY, 3491.8);
      Complex complex19 = complex18.INF.multiply(1);
      assertNotSame(complex19, complex15);
      
      Complex complex20 = complex18.INF.divide(0.0);
      Complex complex21 = complex5.divide(complex2);
      Complex complex22 = complex1.exp();
      assertEquals(-0.0, complex22.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex22.getReal(), 0.01);
      
      Complex complex23 = complex21.sqrt1z();
      assertSame(complex23, complex20);
      
      double double0 = complex10.abs();
      assertSame(complex10, complex14);
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex24 = complex9.atan();
      assertSame(complex24, complex16);
      assertNotSame(complex9, complex8);
      assertSame(complex9, complex6);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.divide(20.0);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex1.I.multiply(20.0);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex5.NaN.multiply(348.641655);
      Complex complex7 = complex3.I.negate();
      Complex complex8 = Complex.valueOf(348.641655, 0.0);
      assertEquals(348.641655, complex8.getReal(), 0.01);
      
      Complex complex9 = complex7.INF.sin();
      complex0.hashCode();
      Complex complex10 = complex3.NaN.reciprocal();
      complex10.cosh();
      complex1.abs();
      complex0.getImaginary();
      complex0.isInfinite();
      complex6.reciprocal();
      double double0 = complex5.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex11.I.sinh();
      assertEquals(0.8414709848078965, complex12.getImaginary(), 0.01);
      
      List<Complex> list0 = complex11.ONE.nthRoot(1);
      assertFalse(list0.contains(complex4));
      
      complex5.negate();
      complex0.log();
      complex9.isNaN();
      Complex complex13 = complex5.asin();
      assertEquals(20.0, complex3.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex2));
      assertEquals(1.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.INF.multiply(1187.21188138);
      Complex complex4 = complex1.NaN.reciprocal();
      Complex complex5 = complex0.ZERO.pow(1187.21188138);
      Complex complex6 = complex0.INF.subtract(complex4);
      assertNotSame(complex6, complex5);
      assertSame(complex6, complex4);
      
      Complex complex7 = complex0.subtract(complex1);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.1585290151921035, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.multiply(1065.4139011672694);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1065.4139011672694, complex8.getReal(), 0.01);
      
      Complex complex9 = complex3.pow(complex0);
      assertNotSame(complex9, complex6);
      assertTrue(complex9.equals((Object)complex5));
      
      complex0.getArgument();
      Complex complex10 = complex1.negate();
      assertFalse(complex10.isInfinite());
      assertEquals((-0.8414709848078965), complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
  }
}
