/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:36:45 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(complex0);
      complex0.tanh();
      Complex complex3 = Complex.valueOf((-3.566127764150994), Double.POSITIVE_INFINITY);
      complex0.multiply(complex3);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(221.52072176404985, 221.52072176404985);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.log();
      complex1.sqrt1z();
      Complex complex3 = complex0.subtract(complex2);
      complex1.getArgument();
      complex3.add(221.52072176404985);
      complex1.readResolve();
      complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      complex4.multiply(691.0587);
      Complex complex5 = new Complex(2.113946677051906E252, (-20.0));
      complex0.getField();
      complex5.tan();
      Complex complex6 = new Complex(772.728716601);
      Complex complex7 = Complex.INF;
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(4.214491261791409E-4, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.subtract(20.0);
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.createComplex(4.214491261791409E-4, 0.6754127740859985);
      Complex complex4 = complex3.cosh();
      complex3.log();
      complex0.ONE.tan();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.log();
      Complex complex7 = complex3.INF.subtract(0.6754127740859985);
      complex1.ONE.log();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex1.subtract(complex0);
      complex9.NaN.getArgument();
      complex0.getField();
      complex8.add((-1.7699312189510164E-14));
      complex8.readResolve();
      Complex complex10 = Complex.INF;
      complex10.negate();
      Complex complex11 = complex4.subtract((-2427.9495051));
      complex2.multiply(Double.NaN);
      Complex complex12 = new Complex((-20.0), (-20.0));
      complex6.pow(complex0);
      complex7.getField();
      complex11.tan();
      complex9.nthRoot(2088982051);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(4.214491261791409E-4, Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex1 = complex0.I.subtract(20.0);
      complex1.INF.divide(complex0);
      Complex complex2 = (Complex)complex1.I.readResolve();
      complex2.nthRoot(117);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(202.80665526105213, Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex1 = Complex.NaN;
      complex1.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2386.3950654, 2386.3950654);
      Complex complex1 = complex0.sqrt();
      complex1.toString();
      Complex complex2 = Complex.valueOf(2386.3950654, 20.0);
      Complex complex3 = complex2.sqrt();
      complex2.tan();
      complex3.conjugate();
      Complex complex4 = Complex.NaN;
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.INF;
      complex3.add(complex2);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(complex0);
      complex1.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(202.80665526105213, 225.85681);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.toString();
      Complex complex3 = new Complex(202.80665526105213, 202.80665526105213);
      Complex complex4 = complex3.reciprocal();
      complex4.toString();
      complex2.sqrt();
      complex3.tan();
      Complex complex5 = new Complex(225.85681);
      complex5.atan();
      Complex complex6 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3030.4467228254384), (-3030.4467228254384));
      complex0.sqrt();
      complex1.tan();
      complex0.atan();
      Complex complex2 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ONE;
      complex0.sqrt();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.add(complex1);
      complex0.toString();
      Complex complex3 = complex0.subtract((-20.0));
      complex3.abs();
      Complex complex4 = complex1.tanh();
      complex0.cos();
      Complex.valueOf(20.0);
      complex3.acos();
      complex0.acos();
      Complex complex5 = new Complex((-20.0), (-415.44506));
      complex4.acos();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.05597910889115E159);
      complex0.getArgument();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf(1766.7383767786948);
      complex2.toString();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.divide(complex3);
      Complex.valueOf(2.05597910889115E159);
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.ONE;
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      complex6.divide(6.283185307179586);
      complex2.nthRoot(2043);
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.negate();
      complex0.toString();
      Complex complex1 = complex0.cosh();
      complex1.hashCode();
      Complex complex2 = complex1.I.conjugate();
      complex2.atan();
      Complex complex3 = Complex.NaN;
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      complex1.I.asin();
      complex1.equals(complex0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(2038.2288615842);
      complex4.tanh();
      complex1.subtract(64.862832884087);
      Complex complex5 = Complex.valueOf(3.8072183820435085E293);
      complex4.multiply(2248);
      complex2.cos();
      complex1.acos();
      complex3.acos();
      Complex complex6 = new Complex(4076.4576005128943, 2248);
      complex5.acos();
      Complex complex7 = new Complex((-5.7792549966531335E-8));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(202.80665526105213, 225.85681004179173);
      Complex complex1 = Complex.ZERO;
      complex0.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ONE;
      complex3.sqrt();
      Complex.valueOf(225.85681004179173, 202.80665526105213);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.toString();
      complex1.abs();
      Complex complex2 = complex1.tanh();
      Complex complex3 = new Complex((-411.85), Double.POSITIVE_INFINITY);
      complex3.cos();
      complex0.subtract(64.862832884087);
      Complex.valueOf(0.7608925863590402);
      complex3.multiply(2037);
      complex3.cos();
      complex1.acos();
      Complex complex4 = Complex.INF;
      complex4.acos();
      Complex complex5 = new Complex(0.7608925863590402, (-2998.867979417469));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(2038.2288615842);
      complex4.INF.exp();
      Complex complex5 = complex2.INF.pow(complex0);
      complex0.divide(2038.2288615842);
      complex2.sqrt();
      complex5.divide(2038.2288615842);
      Complex.valueOf((-2471.4));
      complex5.reciprocal();
      Complex complex6 = new Complex((-2471.4));
      complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-9.082923009890997E-9), (-647.073915542462));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex0.INF.toString();
      Complex complex3 = complex0.log();
      complex3.INF.hashCode();
      complex2.ONE.abs();
      Complex complex4 = complex3.createComplex((-9.082923009890997E-9), (-0.8751414588763274));
      Complex complex5 = complex2.cos();
      Complex complex6 = new Complex((-647.073915542462), Double.NaN);
      complex1.subtract((-0.8751414588763274));
      Complex complex7 = complex5.sqrt1z();
      complex7.add(complex0);
      complex7.I.add(complex2);
      Complex.valueOf(684.876);
      complex0.multiply(3259);
      Complex complex8 = complex2.exp();
      Complex.valueOf((-9.082923009890997E-9));
      complex4.divide((-409.0));
      complex3.createComplex((-409.0), (-9.082923009890997E-9));
      Complex complex9 = complex4.multiply(complex2);
      Complex complex10 = complex5.pow((-0.8751414588763274));
      complex10.readResolve();
      complex9.getField();
      Complex complex11 = complex8.tanh();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      complex0.pow(2038.2288615842);
      complex2.INF.pow(complex0);
      Complex complex4 = complex0.divide(2038.2288615842);
      complex2.sqrt();
      complex1.NaN.hashCode();
      Complex complex5 = new Complex(2038.2288615842, 2038.2288615842);
      Complex complex6 = complex3.reciprocal();
      complex6.ZERO.add(complex2);
      complex4.cos();
      Complex complex7 = new Complex(6.741722283079056E-274);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      complex0.toString();
      complex0.cosh();
      Complex complex2 = complex0.subtract(0.9999998210920973);
      Complex complex3 = complex2.add(complex1);
      complex3.cosh();
      complex1.getArgument();
      Complex complex4 = complex3.negate();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      complex1.ZERO.getField();
      complex0.toString();
      complex1.toString();
      Complex complex2 = complex0.subtract(2574.351);
      complex2.abs();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.cos();
      complex3.subtract((-114.9251479468));
      Complex complex5 = Complex.valueOf((-339.906));
      Complex complex6 = complex5.multiply((-1073741824));
      complex6.cos();
      Complex complex7 = complex6.acos();
      complex4.acos();
      Complex complex8 = new Complex(1479.1896024735568, (-4050.722873534));
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      complex0.pow(2038.2288615842);
      complex2.INF.pow(complex0);
      complex3.conjugate();
      complex3.sqrt();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1849.627949));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(202.80665526105213, 225.85681004179173);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.toString();
      Complex complex3 = complex2.subtract(201.0);
      complex0.abs();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ZERO.cos();
      complex4.add(complex0);
      Complex complex6 = Complex.valueOf(201.0, 303.5487408315661);
      complex6.cosh();
      complex3.getArgument();
      complex0.negate();
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.0, (-2516.646926));
      Complex complex2 = complex1.subtract(20.0);
      Complex complex3 = Complex.valueOf((-3980.45), 2538.2871499681);
      complex3.toString();
      Complex complex4 = Complex.I;
      complex4.I.multiply((-2516.646926));
      Complex complex5 = complex4.divide(complex0);
      complex4.I.add(complex2);
      Complex complex6 = Complex.valueOf(20.0);
      complex6.asin();
      Complex complex7 = Complex.ONE;
      Object object0 = new Object();
      complex5.equals(object0);
      complex6.divide(15.91155863032623);
      Complex complex8 = Complex.NaN;
      complex8.nthRoot(7);
      Complex.valueOf((-6.640551220774385E-9));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      complex1.ZERO.getField();
      complex0.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.I.multiply(422);
      Complex complex5 = Complex.valueOf(8.56825295972308E226);
      complex0.I.abs();
      Complex complex6 = complex4.divide(8.56825295972308E226);
      Complex complex7 = complex6.sqrt();
      complex7.hashCode();
      complex4.atan();
      complex1.pow(complex5);
      complex1.tanh();
      complex0.atan();
      Complex complex8 = Complex.ZERO;
      complex8.abs();
      Complex complex9 = complex2.pow(complex3);
      complex0.isInfinite();
      complex9.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.asin();
      Complex complex1 = complex0.INF.asin();
      complex0.ONE.toString();
      Complex complex2 = complex0.divide(7.39809943048038E-8);
      Complex complex3 = complex2.acos();
      complex1.NaN.readResolve();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex0.reciprocal();
      complex1.I.pow(7.39809943048038E-8);
      Complex complex6 = complex4.divide(130.206000017);
      complex5.getReal();
      complex6.getReal();
      complex5.I.log();
      complex4.subtract(7.39809943048038E-8);
      Complex.valueOf(Double.NaN);
      complex6.multiply((-490));
      Complex complex7 = complex3.cos();
      complex5.acos();
      Complex complex8 = new Complex(3.4101074944009813E-4);
      complex8.acos();
      Complex complex9 = new Complex(2.4881726079254866E23, 2248);
      complex7.acos();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 278.42545361423;
      Complex complex0 = new Complex(278.42545361423, (-647.073915542462));
      Complex complex1 = Complex.valueOf(115.3510169262456, Double.NaN);
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex0.INF.toString();
      Complex complex3 = complex0.log();
      complex3.INF.hashCode();
      double double1 = (-0.8751414588763274);
      complex2.ONE.abs();
      complex3.createComplex(278.42545361423, (-0.8751414588763274));
      Complex complex4 = complex2.cos();
      complex4.ZERO.cosh();
      Complex complex5 = complex4.sqrt1z();
      complex5.add(complex0);
      complex5.I.add(complex2);
      Complex.valueOf(684.876);
      Complex complex6 = complex0.multiply(3259);
      complex2.exp();
      try { 
        complex6.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      complex1.INF.sin();
      complex0.I.hashCode();
      Complex complex2 = complex0.cos();
      complex0.hashCode();
      complex0.subtract(0.8041098282287917);
      int int0 = 5239;
      // Undeclared exception!
      complex2.nthRoot(5239);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(2038.2288615842);
      complex2.INF.pow(complex0);
      complex0.divide(2038.2288615842);
      complex2.sqrt();
      complex1.NaN.hashCode();
      Complex complex5 = complex4.atan();
      complex5.NaN.pow(complex4);
      Complex.valueOf(2038.2288615842, (-8.204903560604627E-9));
      Complex complex6 = complex3.INF.tanh();
      try { 
        complex6.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1843.5694532), 0.0);
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.pow((-23.37498772223));
      Complex complex4 = complex2.divide((-1843.5694532));
      Complex complex5 = Complex.NaN;
      complex5.getReal();
      complex0.getReal();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.multiply(417);
      complex7.cos();
      Complex complex8 = Complex.valueOf(492.21436, 492.21436);
      complex5.getArgument();
      Complex complex9 = complex1.atan();
      Complex complex10 = Complex.ONE;
      complex6.divide(465.9102660826868);
      complex5.divide(complex8);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.acos();
      complex3.multiply(complex0);
      complex12.multiply(417);
      complex9.sin();
      complex5.add(complex4);
      complex11.divide((double) 37);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      complex2.NaN.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt();
      complex2.subtract(1345.9);
      complex2.toString();
      Complex complex5 = Complex.I;
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      complex1.ZERO.getField();
      complex0.toString();
      Complex complex2 = complex0.cosh();
      complex2.I.conjugate();
      complex2.I.multiply(422);
      Complex complex3 = Complex.valueOf(8.56825295972308E226);
      complex0.I.abs();
      Complex complex4 = complex3.I.add((double) 422);
      complex4.INF.abs();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex2.pow(complex3);
      complex6.toString();
      complex2.subtract(1.0);
      complex6.nthRoot(1);
      Complex complex7 = Complex.I;
      complex7.divide(Double.POSITIVE_INFINITY);
      complex4.subtract(2032.35);
      complex7.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1758.6733040625);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.subtract(1758.6733040625);
      complex0.toString();
      Complex complex5 = Complex.I;
      complex0.ZERO.divide(complex3);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex4.asin();
      Complex complex8 = Complex.valueOf(0.0);
      complex4.multiply(2248);
      Complex complex9 = complex1.cos();
      complex7.acos();
      complex6.acos();
      Complex complex10 = new Complex(1758.6733040625, Double.POSITIVE_INFINITY);
      complex8.createComplex((-1.0), 574.389823);
      Complex complex11 = new Complex(2.862518609581133E-20);
      complex11.subtract(complex7);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1720.366);
      Complex complex1 = new Complex(2.0, 2.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.ONE.hashCode();
      Complex complex3 = complex0.tan();
      complex3.cos();
      complex0.abs();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.log();
      complex6.cos();
      complex0.isInfinite();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-51.611325), 165.0);
      Complex complex1 = complex0.ONE.divide(Double.NaN);
      Complex complex2 = complex0.divide(68.9431206727233);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.subtract((-0.9999946951061749));
      Complex complex5 = complex4.NaN.conjugate();
      complex5.ONE.getField();
      complex0.INF.pow(complex4);
      Complex complex6 = complex1.createComplex(1.0487601931965087E175, 1.0487601931965087E175);
      Complex.valueOf((-0.9999946951061749));
      Complex complex7 = complex4.subtract(complex6);
      complex7.NaN.conjugate();
      Complex complex8 = complex0.add(Double.NaN);
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.NaN);
      complex3.equals(complex8);
      try { 
        complex2.nthRoot((-1563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,563
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 5342.13813747326);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.pow(Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex0.ONE.tanh();
      complex2.I.sinh();
      Complex complex5 = complex0.subtract((-1194.2841878218));
      complex5.I.conjugate();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.log();
      complex4.getField();
      Complex complex7 = complex0.multiply(1.9570911086504302E-14);
      complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(201.0, 201.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.toString();
      Complex complex3 = complex2.subtract(201.0);
      complex0.abs();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex4.divide(71.42903843571253);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.sqrt();
      complex5.hashCode();
      complex7.atan();
      Complex complex9 = complex4.pow(complex6);
      complex9.tanh();
      complex8.atan();
      complex3.abs();
      complex2.pow(complex0);
      Complex complex10 = Complex.ZERO;
      complex10.isInfinite();
      Complex complex11 = Complex.I;
      complex8.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1758.6733040625);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.subtract(1758.6733040625);
      complex0.toString();
      Complex complex5 = Complex.I;
      complex0.ZERO.divide(complex3);
      Complex complex6 = Complex.valueOf(0.0);
      complex4.asin();
      Complex complex7 = Complex.ONE;
      complex0.equals((Object) null);
      complex7.divide(Double.POSITIVE_INFINITY);
      complex6.nthRoot(7);
      complex7.multiply((-1157.881));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-352.41));
      complex0.I.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide((-352.41));
      Complex complex3 = complex2.log();
      complex0.hashCode();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.NaN.tanh();
      complex6.add(complex3);
      complex2.multiply((-1));
      Complex complex7 = complex6.add((-627.066));
      Complex complex8 = Complex.ZERO;
      complex8.hashCode();
      Complex complex9 = Complex.valueOf(0.0, (-20.0));
      Complex complex10 = complex9.atan();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex0.multiply((double) (-1));
      complex12.equals(complex0);
      complex2.getReal();
      complex10.add(4253.741168881);
      complex4.divide((-20.0));
      Complex complex13 = Complex.NaN;
      Complex complex14 = Complex.INF;
      complex14.tan();
      complex1.subtract(0.0);
      complex7.sqrt();
      complex11.equals(complex7);
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1843.5694532), 0.0);
      Complex complex1 = complex0.I.divide((-1843.5694532));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.subtract(0.0);
      Complex complex4 = Complex.INF;
      complex4.reciprocal();
      complex3.nthRoot(1);
      complex0.INF.abs();
      Complex complex5 = Complex.valueOf((-1340.0), 1.5877852522924432);
      Complex complex6 = complex5.tanh();
      complex2.getField();
      complex3.isNaN();
      complex1.getImaginary();
      complex6.abs();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.multiply(complex2);
      complex0.toString();
      Complex complex4 = new Complex(1028.89982921965, (-0.5877852522924432));
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex0.multiply((-2037031110));
      complex4.add((-0.5877852522924432));
      complex1.hashCode();
      complex5.atan();
      Complex complex7 = complex1.tanh();
      complex3.multiply(0.0);
      Complex complex8 = Complex.INF;
      complex7.equals(complex8);
      Complex complex9 = Complex.ZERO;
      complex9.getReal();
      complex0.add(0.0);
      Complex complex10 = Complex.valueOf((-830.345314), 1028.89982921965);
      complex10.divide(0.0);
      complex5.negate();
      Complex complex11 = complex7.tan();
      complex4.subtract(1.5337786674499512);
      complex6.sqrt();
      complex11.equals((Object) null);
      complex11.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2478.859029251);
      Complex complex1 = complex0.ONE.log();
      complex0.NaN.cos();
      complex0.I.add(2478.859029251);
      Complex complex2 = Complex.valueOf(2478.859029251, (-2160.28021148302));
      complex2.cos();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex4.subtract(complex1);
      complex5.INF.acos();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex5.ZERO.multiply(2478.859029251);
      complex6.ONE.hashCode();
      complex6.getReal();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.INF.conjugate();
      Complex complex9 = Complex.valueOf(0.5463024377822876, Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.pow(Double.POSITIVE_INFINITY);
      complex5.abs();
      complex7.pow(complex9);
      complex6.isInfinite();
      Complex complex11 = Complex.valueOf((-0.16666666666666666), Double.POSITIVE_INFINITY);
      complex8.createComplex(0.5463024377822876, 0.0);
      complex6.add(complex0);
      complex10.sinh();
      complex10.getField();
      complex11.multiply((-701.82846028601));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      complex2.pow((-2758.5128085977));
      Complex complex4 = Complex.NaN;
      complex4.pow(complex0);
      Complex complex5 = Complex.valueOf((-2758.5128085977), (-2758.5128085977));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.divide(Double.NaN);
      Complex complex8 = complex0.sqrt();
      complex7.hashCode();
      Complex complex9 = Complex.valueOf(2.0, (-2758.5128085977));
      complex9.atan();
      Complex complex10 = complex6.pow(complex9);
      complex8.tanh();
      Complex complex11 = complex2.atan();
      complex10.abs();
      Complex complex12 = complex1.pow(complex11);
      Complex complex13 = Complex.valueOf((-146.898774642), 0.0);
      complex13.isInfinite();
      Complex.valueOf(1122.805677, 0.0);
      complex3.createComplex(2.0, 2038.2288615842);
      Complex complex14 = Complex.INF;
      complex3.sinh();
      Complex complex15 = Complex.NaN;
      complex15.getField();
      complex12.multiply((-1572.57355509));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.ZERO.subtract((-8.56825295972308E226));
      complex1.hashCode();
      Complex complex4 = complex2.divide(complex0);
      complex2.getField();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.I;
      complex6.subtract(0.9360746254032596);
      complex3.sqrt1z();
      complex5.getField();
      complex3.getReal();
      complex4.acos();
      complex1.tanh();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7670931816101074, 0.0);
      complex0.NaN.subtract((-183.0));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1843.5694532), 0.0);
      Complex complex1 = complex0.I.divide((-1843.5694532));
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = Complex.valueOf((-1843.5694532));
      complex3.I.reciprocal();
      Complex.valueOf((-1843.5694532));
      complex1.ZERO.subtract((-1843.5694532));
      complex0.NaN.toString();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex((-1843.5694532), 0.0);
      Complex complex6 = complex4.ONE.cosh();
      complex6.NaN.multiply(complex2);
      complex6.toString();
      Complex complex7 = complex2.ZERO.add(complex4);
      Complex complex8 = complex0.multiply((-1));
      complex2.NaN.add(0.0);
      complex8.NaN.hashCode();
      Complex complex9 = complex1.atan();
      complex8.tanh();
      Complex complex10 = complex7.multiply(1028.89982921965);
      complex9.equals("(1.5430806348152437, 0.0)");
      complex10.getReal();
      complex5.add(0.0);
      complex2.divide((-1843.5694532));
      Complex complex11 = complex7.negate();
      complex11.I.tan();
      complex10.getImaginary();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.ZERO.subtract((-8.56825295972308E226));
      complex3.I.negate();
      complex2.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex4 = complex1.tanh();
      ComplexField complexField0 = complex4.I.getField();
      complex1.isNaN();
      Complex complex5 = complex2.subtract(21578.249991321103);
      Complex complex6 = complex2.sqrt();
      complex4.equals(complexField0);
      complex5.subtract(complex0);
      complex5.tanh();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-614.01089));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tanh();
      complex0.atan();
      complex0.abs();
      Complex complex4 = complex3.pow(complex2);
      complex1.isInfinite();
      Complex complex5 = Complex.valueOf(Double.NaN, 6.283185307179586);
      Complex complex6 = new Complex(6.283185307179586);
      complex6.createComplex(Double.NaN, (-4379.0));
      Complex complex7 = Complex.INF;
      complex7.add(complex6);
      complex4.sinh();
      complex2.getField();
      complex5.multiply((-701.82846028601));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = new Complex((-1848.9214402684745), (-1848.9214402684745));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex1.multiply((-1848.9214402684745));
      complex4.hashCode();
      complex4.getReal();
      Complex complex6 = Complex.valueOf((-1848.9214402684745), (-1322.455749202016));
      Complex complex7 = complex3.conjugate();
      Complex.valueOf(190.0, 1.3480763914637323E214);
      complex3.pow(0.5463024377822876);
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.log();
      Complex complex10 = complex3.acos();
      complex8.tanh();
      complex10.negate();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex8.subtract(complex10);
      complex2.divide(complex5);
      Complex.valueOf(0.0, 0.0);
      complex9.tanh();
      Complex complex13 = complex6.sin();
      complex2.sinh();
      Complex.valueOf((-182.976));
      complex12.cos();
      complex4.getArgument();
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      int int0 = (-2098);
      try { 
        complex0.INF.nthRoot((-2098));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,098
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1843.5694532), 0.0);
      Complex complex1 = complex0.I.divide((-1843.5694532));
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = Complex.valueOf((-1843.5694532));
      complex3.I.reciprocal();
      Complex.valueOf((-1843.5694532));
      complex1.ZERO.subtract((-1843.5694532));
      complex0.NaN.toString();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf(0.0, 1028.89982921965);
      Complex complex6 = complex4.ONE.cosh();
      Complex complex7 = complex6.NaN.multiply(complex2);
      complex6.toString();
      Complex complex8 = complex2.ZERO.add(complex4);
      Complex complex9 = complex0.multiply((-1));
      complex2.NaN.add(0.0);
      complex9.NaN.hashCode();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex8.multiply(1028.89982921965);
      complex10.equals("(1.5430806348152437, 0.0)");
      complex12.getReal();
      complex5.add(0.0);
      complex2.divide((-1843.5694532));
      Complex complex13 = complex8.negate();
      complex13.I.tan();
      complex9.subtract((double) (-1));
      Complex complex14 = complex11.sqrt();
      complex14.equals(complex7);
      complex10.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      complex1.INF.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.NaN.conjugate();
      complex3.NaN.getArgument();
      complex3.I.nthRoot(1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.createComplex(0.0, 0.0);
      complex4.NaN.divide(complex1);
      complex0.getField();
      Complex complex6 = complex2.negate();
      complex0.NaN.getField();
      complex2.ZERO.createComplex(1, Double.NaN);
      complex1.tanh();
      complex5.tan();
      Complex complex7 = Complex.valueOf(0.0);
      complex4.readResolve();
      complex5.reciprocal();
      Complex complex8 = complex7.multiply((-287.9865931035));
      complex8.ZERO.sin();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1926.14195242871));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.5021277484362));
      complex0.log();
      Complex complex1 = Complex.I;
      complex1.INF.multiply((-1250));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.readResolve();
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.createComplex(1057.6495448, 166.720814479457);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.I.pow(Double.NaN);
      Complex complex6 = complex3.ONE.subtract(complex4);
      complex6.ONE.multiply(0);
      Complex complex7 = complex4.cosh();
      complex7.ZERO.toString();
      complex3.reciprocal();
      complex3.sin();
      Complex.valueOf(1057.6495448, 0.0);
      complex5.pow((double) 0);
      complex5.ZERO.hashCode();
      complex4.asin();
      complex3.readResolve();
      complex7.sinh();
      complex5.reciprocal();
      complex0.reciprocal();
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double double0 = 1.3067958354949951;
      Complex complex0 = Complex.valueOf(1.3067958354949951);
      Complex complex1 = complex0.sinh();
      complex1.NaN.tan();
      complex1.INF.multiply(complex0);
      double double1 = (-20.0);
      Complex.valueOf((-20.0), (-20.0));
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.pow(complex0);
      complex2.INF.sin();
      complex0.I.hashCode();
      Complex complex3 = complex0.cos();
      complex0.getArgument();
      complex0.hashCode();
      complex0.I.divide(complex3);
      complex3.sqrt1z();
      Complex complex4 = complex0.subtract(0.0);
      complex4.INF.sqrt1z();
      complex4.getField();
      complex2.getReal();
      complex0.acos();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex.valueOf((-614.01089));
      Complex complex1 = complex0.asin();
      complex1.equals(complex0);
      int int0 = (-918);
      try { 
        complex1.nthRoot((-918));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -918
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.cos();
      complex3.ZERO.toString();
      Complex complex4 = complex3.NaN.sinh();
      complex3.NaN.nthRoot(533);
      Complex complex5 = complex0.pow(6.283185307179586);
      Complex complex6 = complex5.ONE.tan();
      complex3.I.asin();
      Complex complex7 = complex5.pow((-1548.9));
      Complex complex8 = complex7.ZERO.atan();
      complex8.ZERO.tanh();
      Complex complex9 = complex5.INF.exp();
      Complex complex10 = complex6.I.divide((-1322.455749202016));
      complex5.nthRoot(595);
      complex1.getImaginary();
      complex6.getImaginary();
      complex9.isNaN();
      Complex complex11 = complex0.add(complex10);
      complex3.tanh();
      complex7.abs();
      Complex complex12 = complex11.sqrt1z();
      complex12.ONE.cos();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.log();
      complex3.I.pow((-1647.766249708031));
      complex2.add((-2402.90705));
      complex0.INF.toString();
      complex0.ONE.asin();
      Complex complex4 = complex2.createComplex((-2402.90705), (-2402.90705));
      complex1.I.sqrt();
      Complex.valueOf((-1647.766249708031));
      complex4.readResolve();
      Complex complex5 = complex0.acos();
      complex0.equals(complex4);
      complex5.ZERO.multiply((-1647.766249708031));
      Complex complex6 = complex1.cos();
      complex6.I.add(complex4);
      complex5.divide((-2402.90705));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.INF.asin();
      complex0.ONE.toString();
      complex0.ONE.readResolve();
      Complex complex3 = complex0.divide(7.39809943048038E-8);
      complex3.acos();
      complex2.NaN.readResolve();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex2.I.pow(7.39809943048038E-8);
      Complex complex7 = complex4.divide(130.206000017);
      complex5.getReal();
      complex7.getReal();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex5.I.log();
      complex8.ONE.multiply((-490));
      Complex complex10 = complex5.INF.cos();
      complex10.INF.asin();
      complex6.isNaN();
      complex6.getArgument();
      Complex complex11 = complex2.atan();
      complex11.INF.negate();
      complex4.divide(Double.NaN);
      Complex complex12 = complex3.divide(complex5);
      complex6.acos();
      complex5.multiply(complex1);
      Complex complex13 = complex2.multiply(37);
      Complex complex14 = complex13.sin();
      complex14.ZERO.readResolve();
      complex7.isInfinite();
      Complex complex15 = complex12.negate();
      complex15.hashCode();
      complex7.pow(1.1620907410661996E-7);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(231.8146374981);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.createComplex(1.1934680816813702E125, 2055.7655393307205);
      complex1.ONE.tan();
      Complex complex3 = complex0.sinh();
      complex3.getArgument();
      complex1.I.divide(1.1934680816813702E125);
      Complex complex4 = complex3.NaN.exp();
      complex4.INF.pow(231.8146374981);
      complex0.abs();
      Complex complex5 = complex3.tan();
      complex2.INF.readResolve();
      complex5.getImaginary();
      complex0.cosh();
      complex2.isNaN();
      Complex.valueOf(1.1934680816813702E125, 0.0);
      complex4.tan();
      complex2.cosh();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.INF.cosh();
      int int0 = 306;
      Complex complex3 = complex0.INF.pow((double) 306);
      Complex complex4 = complex3.I.negate();
      try { 
        complex4.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(2038.2288615842);
      Complex complex5 = complex2.INF.pow(complex0);
      complex5.INF.sinh();
      Complex complex6 = complex0.divide((-1698.8289));
      complex2.sqrt();
      complex1.NaN.hashCode();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.NaN.pow(complex4);
      Complex complex9 = complex3.INF.tanh();
      Complex complex10 = complex0.atan();
      complex10.I.abs();
      complex3.pow(complex1);
      complex6.isInfinite();
      Complex.valueOf((-701.82846028601), (-1698.8289));
      complex0.createComplex(1.0, (-2184.96548689617));
      complex1.add(complex5);
      complex9.sinh();
      complex10.getField();
      complex8.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 2.5243410574836706E106);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex2.subtract(complex3);
      complex0.getField();
      complex2.ZERO.getArgument();
      Complex complex5 = complex2.INF.conjugate();
      complex4.NaN.readResolve();
      complex1.INF.exp();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex2.sqrt1z();
      complex7.NaN.atan();
      complex3.ONE.readResolve();
      complex3.multiply(17);
      complex4.isNaN();
      complex1.multiply(complex7);
      complex0.asin();
      complex0.I.getArgument();
      Complex.valueOf((-3264.001));
      Complex complex8 = complex7.sqrt();
      complex8.NaN.readResolve();
      Complex complex9 = complex3.negate();
      complex9.ONE.asin();
      complex6.readResolve();
      complex7.toString();
      Complex complex10 = complex6.conjugate();
      complex10.INF.createComplex((-3264.001), 17);
      Complex complex11 = complex4.asin();
      complex11.I.add((-3264.001));
      complex11.INF.sin();
      Complex.valueOf(0.0, (-3264.001));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1700.6, 1970.7049763292);
      Complex complex1 = complex0.INF.pow(0.0);
      complex1.createComplex((-2667.5771525687464), 0.0);
      Complex.valueOf(6.283185307179586);
      complex0.ONE.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.INF.add(1970.7049763292);
      complex2.NaN.cos();
      complex2.getImaginary();
      complex4.getReal();
      complex2.nthRoot(790);
      complex1.sin();
      complex3.multiply(1700.6);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.ONE.tan();
      complex4.INF.conjugate();
      Complex complex5 = Complex.valueOf(2659.970210688004);
      complex0.equals(complex1);
      complex0.tanh();
      Complex complex6 = complex1.exp();
      complex6.cos();
      complex3.acos();
      complex1.acos();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.NaN.multiply(complex7);
      complex9.INF.readResolve();
      Complex complex10 = complex3.subtract(complex2);
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex6.tanh();
      complex13.I.nthRoot(2728);
      Complex complex14 = complex10.cosh();
      complex12.divide(420.736474323);
      Complex.valueOf(2659.970210688004);
      complex9.cos();
      complex6.atan();
      complex10.getArgument();
      complex5.acos();
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.reciprocal();
      complex0.ONE.readResolve();
      Complex complex4 = complex0.ONE.subtract(6.283185307179586);
      complex4.NaN.acos();
      Complex complex5 = complex4.NaN.exp();
      complex0.NaN.hashCode();
      Complex complex6 = complex1.sqrt();
      complex6.INF.multiply(0.0);
      complex4.multiply(2009.0);
      complex1.getField();
      complex4.ZERO.createComplex((-2800.0), 2009.0);
      complex3.readResolve();
      Complex complex7 = complex4.INF.divide(complex6);
      complex7.createComplex(0.0, 0.0);
      Complex complex8 = complex1.multiply(0.0);
      complex8.reciprocal();
      Complex complex9 = complex8.NaN.add(complex5);
      complex9.ZERO.getField();
      complex1.cosh();
      complex4.multiply(complex2);
      Complex complex10 = complex0.divide(0.0);
      complex1.log();
      Complex complex11 = complex2.sin();
      complex11.INF.multiply(2396);
      complex10.atan();
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(1745.71);
      complex0.I.toString();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(1745.71);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = complex0.ONE.divide(complex3);
      Complex complex6 = Complex.valueOf((-305.577), (-305.577));
      complex6.ONE.multiply(complex2);
      Complex.valueOf(0.0);
      Complex complex7 = complex3.ONE.subtract(complex1);
      complex0.INF.tanh();
      complex7.ZERO.acos();
      Complex complex8 = complex2.ONE.sin();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.sqrt();
      complex7.getReal();
      Complex complex12 = complex0.divide(complex11);
      Complex complex13 = complex12.ONE.sin();
      complex13.ONE.hashCode();
      complex1.ZERO.atan();
      complex8.readResolve();
      Complex.valueOf((-902.475846625934), (-653.3437373413752));
      complex2.ONE.tan();
      complex5.isNaN();
      complex7.subtract(complex4);
      complex8.getReal();
      complex0.cosh();
      Complex.valueOf(1745.71);
      complex9.divide(complex7);
      complex1.add((-1289.2455214));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2613.824202675388), (-2613.824202675388));
      Complex complex1 = Complex.valueOf((-2613.824202675388), (-2613.824202675388));
      complex0.isInfinite();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf((double) 1, (-2613.824202675388));
      complex0.cosh();
      Complex complex5 = complex0.ONE.multiply(0.0);
      complex2.ONE.tan();
      complex1.I.sinh();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.pow(complex0);
      complex7.NaN.multiply(1);
      complex6.getArgument();
      complex0.subtract((double) 1);
      Complex complex8 = complex7.INF.subtract(complex1);
      Complex complex9 = complex0.subtract(complex7);
      complex2.multiply(complex3);
      Complex.valueOf(0.0, (-335.9355214304));
      complex9.toString();
      complex3.getImaginary();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex0.divide((-2613.8241070300896));
      complex11.ZERO.hashCode();
      complex2.createComplex((-0.02509631049876994), 1);
      complex10.getReal();
      complex8.pow(complex10);
      complex5.isNaN();
      complex9.asin();
      complex5.subtract(complex8);
      complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(2.0);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.I.getField();
      Complex complex3 = complex1.pow(2.0);
      complex0.getField();
      Complex complex4 = complex0.multiply(1040);
      complex1.multiply(complex3);
      Complex complex5 = complex4.ONE.createComplex(41.67524231, 2.0);
      complex4.abs();
      Complex complex6 = complex3.ZERO.sin();
      Complex.valueOf(0.0);
      Complex complex7 = complex1.I.sqrt();
      complex5.I.multiply(complex6);
      complex7.INF.log();
      Complex complex8 = complex3.subtract(complex0);
      complex8.ZERO.log();
      Complex complex9 = complex0.tan();
      complex1.I.exp();
      Complex complex10 = complex8.exp();
      complex2.subtract(complex9);
      complex9.getReal();
      complex5.getArgument();
      complex10.cosh();
      complex0.isNaN();
      complex5.pow((double) 1040);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-146.898774642));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(766);
      complex0.nthRoot(1093);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.I.add(complex0);
      complex4.I.subtract((-3223.346045352));
      Complex complex5 = complex3.add((-3223.346045352));
      complex5.NaN.multiply((-1797.933731));
      complex2.hashCode();
      complex1.subtract(complex0);
      complex2.getReal();
      complex4.multiply(1093);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-352.41));
      complex0.I.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide((-352.41));
      Complex complex3 = complex2.log();
      complex0.hashCode();
      complex2.INF.sinh();
      Complex complex4 = complex2.sqrt1z();
      complex4.NaN.tanh();
      Complex complex5 = complex4.add(complex3);
      complex3.ZERO.sqrt();
      complex5.INF.pow(complex1);
      complex0.ONE.hashCode();
      Complex complex6 = complex5.exp();
      complex6.sinh();
      complex4.tanh();
      complex3.readResolve();
      complex4.multiply(0);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3913.7998), (-3913.7998));
      Complex complex1 = complex0.INF.pow(344.156918900313);
      Complex complex2 = complex0.ONE.pow((-3201.4));
      Complex complex3 = complex0.log();
      complex3.nthRoot(1028);
      complex2.abs();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.atan();
      Complex complex7 = Complex.valueOf((-3517.8));
      Complex complex8 = complex0.INF.sqrt();
      complex0.readResolve();
      complex2.I.createComplex((-3517.8), 1845.30475);
      complex4.getField();
      complex6.cos();
      complex4.getImaginary();
      complex7.getArgument();
      complex5.abs();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2057.698);
      complex0.exp();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ONE.negate();
      complex3.ONE.createComplex((-2150.05), (-2150.05));
      complex2.NaN.toString();
      Complex complex5 = complex4.I.multiply(257.5005);
      complex5.INF.add((-1796.743263));
      double double0 = 2.3472546699189522E-8;
      try { 
        complex0.NaN.nthRoot((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -32
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.sqrt();
      complex0.toString();
      complex0.ZERO.tan();
      Complex complex3 = complex0.cosh();
      complex3.tanh();
      Complex complex4 = complex0.INF.cosh();
      complex3.isNaN();
      complex1.hashCode();
      Complex complex5 = complex4.sqrt();
      complex5.nthRoot(1);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.add(complex0);
      complex1.ONE.sinh();
      complex2.NaN.nthRoot(17);
      complex1.toString();
      complex0.add(complex1);
      Complex complex3 = complex0.atan();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-1916.0), (-1916.0));
      Complex complex1 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.sin();
      complex3.NaN.add((-1916.0));
      Complex complex4 = complex1.ZERO.divide(complex2);
      complex4.ZERO.createComplex(0.0, 1129.7);
      Complex complex5 = Complex.valueOf(0.0);
      complex0.ZERO.pow(complex5);
      complex0.NaN.subtract(complex1);
      Complex complex6 = complex2.ZERO.pow(1.3708481788635254);
      Complex complex7 = complex6.ONE.tanh();
      complex2.INF.readResolve();
      complex5.INF.getField();
      complex0.isNaN();
      complex2.subtract((-1916.0));
      complex5.cosh();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.sqrt1z();
      complex9.INF.sinh();
      complex7.toString();
      complex0.sqrt();
      complex6.atan();
      Complex.valueOf(0.0, 1.3708481788635254);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-215.0062414473));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.valueOf((-215.0062414473), (-215.0062414473));
      complex1.hashCode();
      complex1.ONE.nthRoot(892);
      complex1.ONE.abs();
      Complex complex5 = complex0.ZERO.divide((-215.0062414473));
      Complex complex6 = complex0.conjugate();
      complex1.ZERO.subtract((-702.837348098));
      Complex complex7 = complex6.add(1848.86);
      complex0.ONE.acos();
      complex7.I.getArgument();
      Complex complex8 = complex1.add(complex4);
      complex4.INF.divide((double) 892);
      complex6.NaN.hashCode();
      complex6.ONE.nthRoot(892);
      Complex complex9 = complex6.I.pow(complex5);
      complex5.log();
      Complex complex10 = complex9.sqrt1z();
      complex4.getReal();
      complex0.ONE.hashCode();
      complex7.subtract(complex2);
      complex10.isInfinite();
      complex0.toString();
      complex3.subtract(complex9);
      complex0.isNaN();
      Complex.valueOf(341.94370309118);
      complex9.acos();
      complex8.multiply(2.5217716516462005E-184);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.ZERO.divide((-3104.6298121508));
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex2.ZERO.sinh();
      complex3.I.tan();
      Complex complex4 = complex3.ONE.reciprocal();
      complex4.INF.multiply(Double.NaN);
      Complex complex5 = complex3.ZERO.asin();
      complex5.ONE.subtract(complex4);
      complex0.NaN.toString();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.cosh();
      complex7.INF.pow((-1.0));
      Complex.valueOf(3021.44, 2.0);
      Complex complex8 = new Complex(Double.NaN);
      complex2.I.cos();
      Complex complex9 = complex7.NaN.multiply(complex8);
      complex7.ZERO.multiply(Double.NaN);
      complex2.NaN.hashCode();
      Complex complex10 = complex6.acos();
      complex10.isNaN();
      Complex complex11 = complex2.subtract(complex0);
      complex10.I.acos();
      complex11.I.getArgument();
      complex10.multiply(complex2);
      Complex complex12 = complex7.sqrt();
      complex12.ZERO.cosh();
      complex9.divide((-1.0));
      complex1.toString();
      complex8.hashCode();
      complex11.getReal();
      complex11.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2478.859029251);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.I.add(2478.859029251);
      Complex complex4 = Complex.valueOf(2478.859029251, (-2160.28021148302));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex7.subtract(complex1);
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex6.negate();
      complex8.ZERO.multiply(2478.859029251);
      complex10.ONE.hashCode();
      complex10.getReal();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.INF.conjugate();
      Complex.valueOf(0.5463024377822876, Double.POSITIVE_INFINITY);
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex13 = complex0.sin();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals((-0.14194453867652815), complex13.getReal(), 0.01);
      
      complex0.log();
      Complex complex14 = complex10.acos();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex2.tanh();
      Complex complex16 = complex15.NaN.negate();
      Complex complex17 = Complex.INF;
      complex17.ZERO.subtract(complex12);
      Complex complex18 = complex1.divide(complex17);
      Complex complex19 = complex6.divide(complex8);
      Complex complex20 = complex4.tanh();
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      
      complex9.sin();
      Complex complex21 = complex5.sinh();
      Complex.valueOf(0.0);
      Complex complex22 = complex9.cos();
      assertSame(complex22, complex16);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertSame(complex8, complex19);
      assertFalse(complex6.equals((Object)complex14));
      
      complex21.getArgument();
      assertFalse(complex21.equals((Object)complex3));
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertFalse(complex21.equals((Object)complex18));
      
      complex12.isNaN();
      assertFalse(complex11.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.I.toString();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.I.reciprocal();
      Complex complex5 = complex3.ONE.exp();
      Complex complex6 = complex5.ONE.negate();
      complex6.NaN.hashCode();
      Complex complex7 = complex4.tanh();
      complex0.INF.atan();
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
