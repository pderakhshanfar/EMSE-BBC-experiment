/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:49:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3.817173955083142E-32);
      complex0.NaN.toString();
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.I.reciprocal();
      complex1.I.subtract(complex2);
      Complex complex3 = complex2.NaN.cosh();
      complex3.NaN.cos();
      complex0.pow(1.0003133943992637);
      Complex complex4 = Complex.valueOf(20.0, 1.0003133943992637);
      complex4.log();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(6.645352711199266E-8);
      Complex complex2 = complex0.NaN.sqrt1z();
      complex1.log();
      complex1.ONE.abs();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.NaN.subtract(complex0);
      Complex complex8 = complex1.ONE.divide(1.0);
      complex0.sqrt1z();
      complex4.INF.sin();
      complex2.ONE.subtract(1848.7482064091278);
      Complex complex9 = complex1.exp();
      complex5.reciprocal();
      complex9.INF.sqrt1z();
      complex9.add(1.0);
      complex9.INF.sqrt();
      Complex complex10 = complex3.atan();
      complex10.add(complex7);
      complex1.sqrt();
      complex4.divide(complex10);
      Complex complex11 = complex2.divide(1.0);
      Complex complex12 = complex11.NaN.subtract(complex1);
      complex6.acos();
      complex1.divide(complex10);
      complex8.cosh();
      complex12.cosh();
      complex4.multiply(6.645352711199266E-8);
      complex1.tan();
      int int0 = (-2437);
      try { 
        complex8.nthRoot((-2437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,437
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(651.313927123234);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.tan();
      complex2.multiply(complex0);
      complex2.I.getArgument();
      complex1.I.toString();
      Complex.valueOf(651.313927123234, 651.313927123234);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sinh();
      complex0.NaN.log();
      Complex complex5 = Complex.valueOf(651.313927123234);
      complex5.I.readResolve();
      complex0.nthRoot(1662);
      complex3.ONE.toString();
      complex4.NaN.nthRoot(912);
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex4.acos();
      complex6.getField();
      complex3.atan();
      Complex.valueOf((-20.0));
      complex7.readResolve();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.03107539324365989, (-20.0));
      Complex complex1 = complex0.NaN.pow((-20.0));
      Complex complex2 = complex0.exp();
      complex1.ONE.divide((-20.0));
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex2.ONE.multiply(0.03107539324365989);
      complex0.negate();
      complex3.ZERO.reciprocal();
      complex2.abs();
      Complex complex5 = complex1.multiply(complex4);
      complex1.abs();
      complex0.multiply(complex3);
      complex5.createComplex(Double.NaN, (-20.0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.tanh();
      Complex complex2 = new Complex(334.74, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-3635);
      complex0.tanh();
      Complex complex1 = new Complex(1514.5, Double.POSITIVE_INFINITY);
      complex1.ONE.sqrt();
      complex0.I.multiply(complex1);
      try { 
        complex0.nthRoot((-3635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.toString();
      Complex complex1 = complex0.tan();
      complex1.toString();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
      Complex complex1 = complex0.add((-2.0285339640303885E15));
      Complex complex2 = new Complex(20.0);
      Complex complex3 = Complex.NaN;
      complex0.divide(complex3);
      complex0.add(complex3);
      complex1.asin();
      Complex complex4 = Complex.INF;
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.NaN.createComplex((-380.654122927), (-1598.37617));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-34), (-34));
      complex0.sqrt();
      Complex complex1 = new Complex((-34));
      complex0.equals(complex1);
      Complex complex2 = complex0.reciprocal();
      complex2.ONE.divide((double) (-34));
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-1.5013070979299752E7));
      Complex complex1 = Complex.valueOf((-1.5013089085542254E7));
      Complex complex2 = complex1.add(complex0);
      complex2.ONE.tan();
      complex2.getField();
      complex2.tan();
      complex2.add((-1.5013089085542254E7));
      Complex complex3 = new Complex((-1.5013089085542254E7));
      Complex complex4 = Complex.NaN;
      complex3.I.divide(complex4);
      Complex complex5 = complex2.add(complex3);
      complex5.asin();
      Complex complex6 = Complex.valueOf(5.744446753652847E185, (-1099.2021111611214));
      complex0.toString();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals("|~'LlQ/XDN)<");
      Complex complex1 = new Complex(2.5313735821872488E87, Double.POSITIVE_INFINITY);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-1.5013089085542254E7));
      Complex complex1 = new Complex((-1.5013089085542254E7), (-1.5013089085542254E7));
      Complex complex2 = complex0.acos();
      complex0.sqrt();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.nthRoot(1);
      complex0.tanh();
      complex0.tan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf((-33.66817825337889));
      Complex complex4 = complex3.reciprocal();
      complex3.getArgument();
      Complex complex5 = complex4.sqrt();
      complex1.exp();
      complex2.negate();
      Complex complex6 = complex2.tanh();
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf((-464.00475), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.toString();
      complex2.INF.divide(2150.0504908916);
      complex0.pow(complex2);
      complex2.readResolve();
      Complex complex3 = complex1.INF.add((-464.00475));
      complex3.sin();
      complex3.NaN.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(2880.97758);
      complex1.INF.acos();
      Complex complex4 = complex0.ONE.reciprocal();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex1.multiply((-2108201496));
      Complex complex5 = complex1.tan();
      complex5.INF.abs();
      complex5.sin();
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex6);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.log();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-33.66817825337889));
      Complex complex3 = complex0.reciprocal();
      complex3.getArgument();
      Complex complex4 = complex2.sqrt();
      complex4.sin();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.divide(Double.NaN);
      complex6.tanh();
      complex2.negate();
      complex6.getField();
      complex1.add((-826.0428060705501));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1523.136));
      complex0.ZERO.reciprocal();
      complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.ONE.add(7749.345671872497);
      complex2.sin();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.cosh();
      Complex.valueOf(190.4989686092);
      complex3.reciprocal();
      complex4.multiply((-244));
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(465.00475);
      complex0.log();
      Complex complex1 = new Complex(2.4751837654582522E-8);
      Complex.valueOf(2.4751837654582522E-8);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.reciprocal();
      complex3.getArgument();
      complex2.negate();
      complex1.tanh();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.cos();
      complex2.ONE.abs();
      complex2.ONE.sin();
      Complex complex3 = complex0.INF.divide((-1.5013089085542254E7));
      Complex.valueOf(5446313.952770839);
      complex3.add(complex1);
      complex1.getField();
      complex1.NaN.tan();
      Complex complex4 = complex1.ONE.add((-1.5013089085542254E7));
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.I.asin();
      complex5.toString();
      Complex complex7 = complex6.divide((-1.5013089085542254E7));
      Complex complex8 = complex0.sqrt1z();
      complex0.pow((-1.5013089085542254E7));
      Complex complex9 = complex7.pow((-1.5013089085542254E7));
      Complex complex10 = complex9.ONE.pow(complex8);
      complex5.divide((-243.87));
      complex1.readResolve();
      complex8.log();
      complex1.pow(complex4);
      complex0.negate();
      complex0.divide(1432.8333237810477);
      complex10.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ONE;
      complex2.getArgument();
      Complex complex3 = complex1.sqrt1z();
      Complex.valueOf((-1.0), 992.9021127);
      Complex complex4 = complex3.multiply(complex0);
      complex4.asin();
      complex4.negate();
      Complex complex5 = complex2.subtract(Double.NaN);
      complex5.asin();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(0.0, 0.0);
      complex1.tan();
      Complex complex3 = Complex.I;
      complex1.add(complex3);
      Complex complex4 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-1));
      Complex complex3 = complex1.reciprocal();
      complex1.reciprocal();
      Complex complex4 = Complex.NaN;
      complex4.hashCode();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = Complex.valueOf((double) (-1));
      complex5.divide(complex6);
      complex1.tanh();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(358);
      Complex complex3 = complex2.reciprocal();
      complex1.sinh();
      Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.tanh();
      complex4.ZERO.acos();
      Complex complex5 = complex0.reciprocal();
      complex5.sqrt();
      Complex complex6 = complex5.negate();
      complex6.getField();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.I;
      complex3.toString();
      complex3.subtract(complex2);
      complex0.reciprocal();
      complex1.sinh();
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      complex4.tan();
      Complex complex5 = Complex.NaN;
      Complex.valueOf(1.9987994582857286E-8, 20.0);
      complex1.reciprocal();
      complex4.sqrt();
      Complex complex6 = complex5.sin();
      complex6.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex0.reciprocal();
      complex1.sinh();
      complex0.getField();
      Complex complex3 = Complex.valueOf((-714.384973817));
      Complex complex4 = complex3.tanh();
      complex4.reciprocal();
      complex3.INF.abs();
      complex1.sqrt();
      complex2.negate();
      complex4.tanh();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.069849599753188E69);
      Complex complex1 = complex0.I.tan();
      complex1.I.sqrt();
      Complex complex2 = complex0.divide(0.6905817003766437);
      Complex complex3 = complex0.divide(0.8414709848078964);
      Complex complex4 = complex1.conjugate();
      complex4.I.toString();
      complex4.ZERO.nthRoot(17);
      Complex complex5 = complex3.reciprocal();
      complex5.multiply(0.6905817003766437);
      Complex complex6 = complex1.pow(5.05239404378821E31);
      complex6.add(5.05239404378821E31);
      complex3.conjugate();
      Complex complex7 = Complex.valueOf(6.283185307179586, 3.069849599753188E69);
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex1.subtract(1591.7);
      complex3.multiply(17);
      complex3.nthRoot(798);
      complex2.abs();
      complex8.log();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex8.multiply(complex2);
      complex9.sqrt1z();
      complex1.add(complex9);
      complex7.createComplex(0.8414709848078964, 0.6905817003766437);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.log();
      complex5.toString();
      Complex complex6 = complex0.subtract(complex5);
      complex4.reciprocal();
      complex0.sinh();
      complex3.tan();
      Complex complex7 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.0305018010328949E-8));
      complex4.reciprocal();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(4941);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.valueOf((double) 4941, (-1741.57549336));
      complex7.tan();
      complex6.sqrt1z();
      Complex complex8 = complex5.add((-1455.88838296));
      complex8.readResolve();
      Complex.valueOf((-1455.88838296));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.sinh();
      complex5.ZERO.hashCode();
      Complex complex6 = complex1.divide(complex0);
      complex2.divide(complex6);
      Complex complex7 = complex1.tanh();
      complex7.divide(Double.POSITIVE_INFINITY);
      complex3.nthRoot(4952);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(465.00475);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.I.log();
      complex2.toString();
      Complex complex5 = complex3.subtract(complex4);
      complex5.reciprocal();
      complex3.sinh();
      complex5.tan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf(465.00475, 465.00475);
      complex7.reciprocal();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.acos();
      complex2.multiply(1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.log();
      complex2.toString();
      Complex complex5 = complex2.subtract(complex4);
      complex3.reciprocal();
      complex4.sinh();
      Complex complex6 = complex2.tanh();
      complex5.tan();
      complex2.sqrt1z();
      Complex complex7 = complex6.add(0.9567860817362277);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-7.981320644583728E-8));
      Complex complex1 = complex0.atan();
      complex1.ONE.abs();
      complex0.INF.abs();
      Complex complex2 = complex1.conjugate();
      complex1.I.readResolve();
      Complex complex3 = complex1.ZERO.pow((-7.981320644583728E-8));
      Complex complex4 = complex0.tanh();
      complex1.toString();
      Complex complex5 = complex4.pow(complex1);
      complex5.INF.cosh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.ZERO.toString();
      Complex complex7 = complex6.INF.add(complex3);
      Complex complex8 = complex1.pow(complex2);
      complex2.conjugate();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ONE.createComplex((-870.0048558584808), (-7.981320644583728E-8));
      complex9.add(Double.POSITIVE_INFINITY);
      complex6.pow(2.0);
      complex2.toString();
      complex4.sqrt();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex11.ONE.cosh();
      complex3.cosh();
      complex7.tan();
      complex10.getReal();
      complex11.add(complex12);
      Complex.valueOf(351.79494452331);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1698.972);
      complex5.toString();
      Complex.valueOf(8.454972737414241E-8, 1698.972);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1);
      Complex complex1 = complex0.multiply(1168);
      complex0.getField();
      Complex complex2 = complex0.cos();
      complex1.pow(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.divide(complex3);
      complex3.pow(0.5292609190495399);
      complex1.divide((double) 1168);
      complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(959);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.cosh();
      complex4.getArgument();
      complex4.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 2061.403004555677);
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex0.negate();
      complex7.INF.divide(complex4);
      complex2.subtract(0.0);
      complex6.pow(complex3);
      Complex complex8 = complex2.subtract(complex1);
      complex8.I.cos();
      complex8.cos();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.add((-988.3583940385));
      Complex complex2 = complex0.subtract(complex1);
      complex2.NaN.reciprocal();
      Complex complex3 = Complex.valueOf((-697.03));
      Complex complex4 = complex3.multiply(52);
      Complex complex5 = complex3.sqrt1z();
      complex1.abs();
      complex4.toString();
      Complex complex6 = complex1.divide(complex3);
      complex6.divide(complex4);
      Complex.valueOf(Double.POSITIVE_INFINITY, (double) 52);
      complex5.divide(1.4484532916399986);
      complex3.nthRoot(52);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      complex0.multiply((-1));
      complex0.tanh();
      complex1.tan();
      Complex.valueOf(Double.NaN, 3060.982);
      Complex.valueOf((double) (-1), 3060.982);
      complex0.sqrt1z();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add(923.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(923.0);
      Complex complex4 = complex3.INF.multiply(1679);
      Complex complex5 = complex3.ZERO.sqrt1z();
      complex5.I.abs();
      complex3.INF.toString();
      complex2.ZERO.divide(complex3);
      complex0.divide(complex4);
      Complex complex6 = new Complex(Double.NaN, 4.1358029739592175E30);
      Complex complex7 = complex6.divide(1.5707963267948966);
      complex7.nthRoot(1679);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.log();
      complex2.acos();
      Complex complex4 = complex1.subtract((-1.2837558171267258E7));
      Complex complex5 = complex4.divide(complex0);
      complex4.readResolve();
      Complex complex6 = complex1.divide(complex5);
      complex0.isNaN();
      complex6.tan();
      complex3.exp();
      complex3.subtract((-1.2837558171267258E7));
      complex3.cos();
      complex4.getArgument();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.sqrt();
      complex2.equals(complex3);
      complex0.multiply(1308.90695);
      Complex.valueOf(1308.90695, 1.4733029698334834E-8);
      Complex complex4 = Complex.ZERO;
      complex4.abs();
      complex4.add(1308.90695);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.subtract(1720.197564);
      Complex complex6 = complex3.divide(complex2);
      complex1.readResolve();
      complex4.divide(complex3);
      complex3.isNaN();
      complex6.tan();
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      complex7.ONE.sqrt1z();
      complex7.exp();
      complex5.subtract(7.391148437818629E-5);
      complex7.cos();
      complex5.getArgument();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.log();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-1.3391699617035657));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.createComplex((-115.7492), (-1.3391699617035657));
      complex2.asin();
      Complex complex5 = Complex.valueOf((-2061.649), 9.863720960170636E228);
      complex5.hashCode();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.INF;
      complex8.isInfinite();
      complex7.ONE.createComplex((-1.3391699617035657), 9.863720960170636E228);
      complex4.createComplex(0.20787957635076193, 641.1368817817);
      complex1.sin();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      complex1.abs();
      complex0.conjugate();
      Complex complex2 = complex0.tanh();
      Complex.valueOf(0.7853981633974483);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.createComplex((-2061.649), (-115.7492));
      Complex complex5 = complex1.asin();
      Complex complex6 = Complex.valueOf(4.458001565878111E-114, 0.7853981633974483);
      Complex complex7 = complex6.sqrt();
      complex4.isInfinite();
      complex5.createComplex((-1.0), Double.POSITIVE_INFINITY);
      complex7.sin();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      complex0.multiply((-1));
      Complex complex2 = new Complex(3114.344753906281);
      Complex.valueOf((double) (-1));
      complex0.tanh();
      Complex.valueOf((-2925364.952177851), 423.3945923331);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(465.00475);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.I.log();
      complex2.toString();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex5.reciprocal();
      complex3.sinh();
      complex6.tanh();
      complex6.tan();
      complex5.sqrt1z();
      complex1.add(1.9069552421569824);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.multiply(complex1);
      complex1.toString();
      complex0.hashCode();
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      Complex complex5 = complex1.add((-286.834779671));
      complex0.getArgument();
      Complex complex6 = complex3.pow((-286.834779671));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex3.cosh();
      complex5.readResolve();
      complex3.sin();
      complex2.getImaginary();
      Complex complex9 = Complex.INF;
      complex9.subtract((-703.9));
      Complex complex10 = Complex.I;
      complex10.sqrt();
      complex6.nthRoot(1452);
      Complex complex11 = complex4.conjugate();
      complex1.equals(complex10);
      complex8.sqrt();
      complex7.cosh();
      Complex complex12 = complex10.sin();
      complex11.getArgument();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(959);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.cosh();
      complex4.getArgument();
      complex4.sqrt1z();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.acos();
      complex0.subtract(3113.791467);
      Complex complex7 = complex6.divide(complex2);
      complex3.readResolve();
      Complex complex8 = complex7.divide(complex6);
      complex2.isNaN();
      complex2.ONE.reciprocal();
      complex5.tan();
      complex7.exp();
      complex6.subtract(2925364.952177851);
      Complex complex9 = complex2.cos();
      complex8.getArgument();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      complex2.ONE.abs();
      complex2.sqrt();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = Complex.valueOf(1.0, 20.0);
      complex0.multiply(complex3);
      complex3.asin();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.subtract(0.255429208278656);
      complex6.asin();
      complex3.nthRoot(3244);
      Complex complex7 = Complex.I;
      complex7.getImaginary();
      Complex.valueOf(1.0, 20.0);
      Complex.valueOf(4506.39181613147);
      Complex complex8 = complex7.negate();
      complex8.acos();
      Complex complex9 = Complex.NaN;
      complex9.multiply((-99));
      Complex.valueOf(4506.39181613147, 2.770970558184228E-8);
      Complex complex10 = Complex.ZERO;
      complex10.sinh();
      Complex complex11 = new Complex(1.0);
      complex10.tan();
      complex10.readResolve();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.subtract(0.0);
      complex0.add(2088.7106897651);
      Complex complex1 = complex0.createComplex(0.7812118921104881, 850.5841664);
      complex1.sin();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      complex2.ONE.abs();
      Complex complex3 = complex2.sqrt();
      complex0.I.exp();
      Complex complex4 = complex1.log();
      complex1.NaN.acos();
      Complex complex5 = complex4.NaN.subtract(1720.197564);
      complex5.I.divide(complex3);
      Complex complex6 = Complex.ZERO;
      complex6.tanh();
      complex6.tan();
      Complex.valueOf((-3.408223442335828), (-3.408223442335828));
      Complex complex7 = Complex.valueOf(1720.197564, 4540.01000981649);
      complex7.tan();
      complex0.sqrt1z();
      Complex complex8 = new Complex((-3737.711368), (-3.408223442335828));
      complex8.add(1.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      int int0 = (-1);
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex1.reciprocal();
      complex2.sinh();
      complex3.readResolve();
      try { 
        complex3.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1710.3701214));
      Complex complex1 = Complex.I;
      complex0.ONE.multiply((-1710.3701214));
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.I.log();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf((-1710.3701214), 1278.1697);
      complex3.I.multiply(complex4);
      Complex complex5 = complex0.sqrt1z();
      complex5.ZERO.conjugate();
      Complex complex6 = Complex.I;
      Complex.valueOf(1278.1697, (-2.8476975783775358E-8));
      complex4.divide(complex6);
      complex5.divide((-311.509));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add(923.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(923.0);
      complex3.INF.multiply(1679);
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex4.I.abs();
      complex3.INF.toString();
      complex2.ZERO.divide(complex3);
      complex0.INF.divide(complex3);
      complex0.divide(351.79494452331);
      complex0.nthRoot(2397);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-3782.416538312883), 20.0);
      complex0.sqrt();
      complex0.equals("");
      complex0.multiply((-3782.416538312883));
      Complex.valueOf((-1.6062753275036812E-4), 1836.99148);
      Complex complex1 = new Complex((-4218.83834));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-3782.416538312883), 20.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.multiply(923);
      Complex complex3 = complex2.I.reciprocal();
      complex0.toString();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.pow(complex1);
      complex0.conjugate();
      Complex complex6 = complex3.divide((double) 923);
      complex5.atan();
      complex0.add(0.45160030615905034);
      complex4.cosh();
      complex6.getArgument();
      Complex complex7 = Complex.I;
      complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-3782.416538312883), 20.0);
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex1.multiply(1410);
      Complex.valueOf((double) (-1));
      Complex.valueOf(0.0);
      Complex complex3 = complex2.tanh();
      complex1.reciprocal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(1691);
      Complex complex3 = complex1.reciprocal();
      complex1.toString();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.divide((double) 1691);
      complex3.log();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.atan();
      complex5.subtract(complex2);
      Complex complex8 = complex5.log();
      complex7.multiply((double) 1691);
      complex2.isInfinite();
      Complex.valueOf((-2342.679123), (double) 1691);
      complex4.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(959);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.cosh();
      complex4.getArgument();
      complex4.sqrt1z();
      Complex complex5 = Complex.valueOf(3113.791467, 2061.403004555677);
      complex4.multiply(complex5);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.negate();
      complex2.subtract(0.0);
      Complex complex8 = complex7.asin();
      complex1.nthRoot(3246);
      complex6.getImaginary();
      Complex.valueOf((double) 3246, 3113.791467);
      Complex.valueOf(4506.39181613147);
      complex0.negate();
      complex8.acos();
      Complex complex9 = complex7.multiply(1);
      Complex.valueOf((double) 3246, 4506.39181613147);
      complex9.sinh();
      Complex complex10 = new Complex(959);
      complex10.tan();
      complex5.readResolve();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-3782.416538312883), 20.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.multiply(923);
      complex1.getField();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.sqrt();
      complex4.pow(complex3);
      complex2.subtract(complex4);
      complex2.getField();
      complex0.pow(3491170.464862791);
      complex1.subtract(20.0);
      complex4.tan();
      complex4.pow((-20.0));
      complex2.multiply(1424.193570191);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.acos();
      complex2.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      complex1.sinh();
      complex0.tanh();
      complex0.tan();
      Complex complex4 = complex3.sqrt1z();
      complex4.add(1.5013089085542254E7);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-496.74592474650973), (-496.74592474650973));
      Complex complex1 = Complex.ONE;
      complex1.INF.pow(complex0);
      Complex complex2 = Complex.I;
      complex0.NaN.subtract(complex1);
      Complex.valueOf((-2805.7));
      Complex complex3 = Complex.valueOf((-496.74592474650973));
      complex3.tanh();
      Complex complex4 = complex1.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.sinh();
      complex4.tanh();
      complex2.tan();
      Complex complex5 = Complex.valueOf((double) (-1), (double) (-1));
      Complex complex6 = complex5.tan();
      complex6.sqrt1z();
      complex3.add((double) (-1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.ZERO.conjugate();
      Complex complex3 = complex0.I.negate();
      complex3.NaN.nthRoot(1485);
      Complex complex4 = Complex.valueOf(1717.32824571, 1717.32824571);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = new Complex(1717.32824571);
      complex6.subtract(complex5);
      complex6.getField();
      Complex complex7 = complex5.pow((double) 1485);
      complex7.subtract((-7.796557225750673E-258));
      complex3.tan();
      complex7.pow(3.55284719912458E-8);
      complex6.multiply((double) 1485);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(838.292455962);
      Complex complex1 = complex0.pow(838.292455962);
      complex0.ZERO.nthRoot(1);
      complex0.NaN.multiply((-877));
      complex0.I.getField();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.sqrt();
      complex2.ONE.pow(complex3);
      complex3.ONE.subtract(complex0);
      complex3.NaN.getField();
      complex2.pow(838.292455962);
      Complex complex4 = complex1.subtract((double) 1);
      complex3.tan();
      complex4.pow(1424.193570191);
      complex2.multiply(2.6222628001695826E-8);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.createComplex(2.1859129781586158E123, 2030.1162);
      complex2.INF.nthRoot(70);
      int int0 = (-2721);
      complex2.ZERO.readResolve();
      complex0.NaN.sqrt();
      complex1.ONE.cos();
      try { 
        complex0.nthRoot((-2721));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,721
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3837.147532203);
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.ZERO.add(complex0);
      Complex complex2 = Complex.valueOf(3837.147532203, 3837.147532203);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex0.ONE.add(complex1);
      complex5.INF.pow(complex4);
      Complex complex6 = complex5.NaN.log();
      complex6.ONE.subtract(complex3);
      Complex complex7 = Complex.valueOf(0.0, (-1964.33820719912));
      complex7.I.cos();
      Complex.valueOf(0.0, 3837.147532203);
      complex1.I.getField();
      complex0.sinh();
      complex5.hashCode();
      complex0.getArgument();
      complex7.INF.multiply((-1.0));
      complex7.createComplex(1537.11767732, (-2123.3354));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-185.1871));
      Complex complex1 = complex0.I.log();
      complex0.toString();
      complex1.hashCode();
      complex1.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex0.multiply((-740));
      complex5.NaN.abs();
      complex1.getField();
      complex2.multiply(0.0);
      complex0.getArgument();
      complex4.getArgument();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      complex2.ONE.abs();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex1.log();
      complex1.NaN.acos();
      Complex complex6 = complex5.NaN.subtract(1720.197564);
      complex6.I.divide(complex3);
      complex5.I.readResolve();
      Complex complex7 = complex1.divide(complex5);
      complex1.isNaN();
      complex1.tan();
      complex6.exp();
      Complex complex8 = complex7.subtract(1720.197564);
      complex8.cos();
      complex4.getArgument();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      complex0.NaN.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.divide(complex2);
      complex3.I.sqrt();
      complex3.readResolve();
      complex1.getReal();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex4.acos();
      complex6.INF.reciprocal();
      complex4.ONE.toString();
      Complex complex7 = complex4.NaN.pow(1.0);
      complex7.I.cos();
      Complex complex8 = complex2.I.multiply(1.0);
      complex4.NaN.getArgument();
      complex2.sqrt();
      complex2.INF.subtract(0.0);
      complex0.sin();
      complex4.cos();
      complex2.tanh();
      Complex complex9 = complex0.multiply(2386);
      complex0.NaN.cosh();
      complex0.getArgument();
      complex9.multiply(0.0);
      Complex complex10 = complex5.multiply((-184.05078488));
      complex10.NaN.sqrt1z();
      complex10.abs();
      complex8.abs();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 511.423441;
      Complex complex0 = new Complex(511.423441, 511.423441);
      double double1 = (-671.0274);
      Complex.valueOf(511.423441, (-671.0274));
      Complex complex1 = complex0.ZERO.createComplex(511.423441, 511.423441);
      Complex complex2 = complex1.NaN.multiply((-671.0274));
      int int0 = 0;
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.ZERO.add(complex1);
      Complex complex2 = complex0.ONE.cosh();
      complex2.INF.sqrt1z();
      Complex complex3 = complex0.INF.multiply(complex2);
      complex3.NaN.getField();
      try { 
        complex0.ZERO.nthRoot((-1050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,050
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.multiply((-20.0));
      complex2.I.toString();
      complex2.getArgument();
      complex2.isNaN();
      complex0.getArgument();
      Complex complex4 = complex3.sin();
      complex4.sqrt1z();
      complex4.ZERO.hashCode();
      complex2.negate();
      complex0.readResolve();
      Complex complex5 = Complex.valueOf(0.0, 755.1256618608822);
      complex5.NaN.readResolve();
      complex0.isNaN();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(1115.2206);
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.divide(complex0);
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex5.NaN.sqrt();
      complex6.ZERO.asin();
      Complex complex7 = complex4.ZERO.divide(complex0);
      complex7.ZERO.divide(0.0);
      Complex complex8 = complex0.INF.subtract(complex4);
      complex6.ONE.nthRoot(123);
      Complex complex9 = complex8.NaN.subtract(0.0);
      Complex complex10 = complex9.ZERO.sin();
      complex10.ZERO.pow(complex4);
      complex4.I.abs();
      complex3.readResolve();
      complex3.abs();
      Complex complex11 = complex2.acos();
      complex6.atan();
      complex0.multiply((-2323));
      complex8.subtract(1788.226604220765);
      Object object0 = complex11.readResolve();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1572.15);
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(complex1);
      complex1.cosh();
      complex3.toString();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.601065201853145E-7), 1272.9);
      Complex complex1 = complex0.atan();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3874.672900457825);
      Complex complex1 = complex0.asin();
      complex0.readResolve();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.nthRoot(1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex1.conjugate();
      complex1.NaN.sin();
      complex4.ONE.sqrt();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.sqrt1z();
      complex3.INF.multiply(Double.NaN);
      complex1.NaN.divide(complex8);
      complex0.INF.conjugate();
      complex7.getReal();
      complex6.equals(complex8);
      Complex complex9 = complex3.negate();
      complex9.I.readResolve();
      complex7.multiply(complex8);
      complex8.hashCode();
      Complex complex10 = complex5.pow(complex1);
      Complex complex11 = complex10.ZERO.cosh();
      complex3.ONE.conjugate();
      complex6.readResolve();
      complex10.toString();
      complex8.tanh();
      complex4.subtract(complex0);
      complex8.sqrt();
      complex6.log();
      Complex complex12 = complex1.atan();
      complex11.exp();
      complex5.cosh();
      complex5.getReal();
      complex12.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-3152.050487680326), (-3152.050487680326));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.INF.tanh();
      Complex complex3 = complex0.NaN.multiply(0.0);
      complex3.NaN.divide((-20.0));
      complex0.getArgument();
      complex0.hashCode();
      Complex.valueOf((-1.0));
      Complex complex4 = complex3.cos();
      complex0.ONE.readResolve();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.NaN.add(0.0);
      Complex complex7 = complex5.sinh();
      complex3.getField();
      complex3.readResolve();
      complex2.asin();
      Complex complex8 = complex1.sqrt();
      complex5.NaN.toString();
      complex8.subtract((-624.074));
      complex0.atan();
      complex7.isInfinite();
      complex6.cos();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.NaN.reciprocal();
      complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex2.I.multiply(0.0);
      complex3.INF.add(0.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      complex4.NaN.atan();
      complex6.I.readResolve();
      complex3.INF.negate();
      Complex complex7 = complex0.subtract(0.0);
      complex7.ONE.abs();
      complex4.multiply(1162);
      Complex complex8 = complex3.sinh();
      complex8.I.subtract(complex5);
      Complex complex9 = complex6.exp();
      complex9.asin();
      complex5.divide((-585.0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-2235.0), (-2235.0));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = new Complex((-2235.0));
      Complex.valueOf(1678.48620649, 3995.916443061);
      Complex complex3 = complex1.NaN.subtract(complex2);
      complex3.I.pow(complex1);
      Complex.valueOf(0.0);
      complex0.INF.multiply((-1404));
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.multiply(0);
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.cos();
      complex2.conjugate();
      Complex complex4 = complex3.divide((-413.98));
      complex4.NaN.cos();
      Complex complex5 = complex1.ZERO.log();
      Complex complex6 = complex2.negate();
      complex6.NaN.abs();
      complex1.hashCode();
      Complex complex7 = complex1.multiply(complex3);
      Complex complex8 = complex2.tan();
      complex7.NaN.cosh();
      complex5.INF.multiply(0.0);
      complex0.multiply((-1));
      Complex complex9 = complex8.multiply((-1));
      try { 
        complex9.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-3782.416538312883), 20.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.multiply(923);
      complex2.I.reciprocal();
      complex0.toString();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.I.divide((-3782.416538312883));
      Complex complex5 = complex4.NaN.log();
      complex2.ZERO.atan();
      Complex complex6 = complex5.ONE.subtract(complex1);
      complex6.INF.log();
      complex0.multiply((-3782.416538312883));
      complex3.isInfinite();
      Complex.valueOf(20.0, (-1643.509));
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.subtract(0.6254787445068359);
      complex2.NaN.log();
      complex2.isNaN();
      try { 
        complex1.nthRoot((-398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -398
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.0, 0.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-492.1827528076004), (-492.1827528076004));
      Complex complex1 = Complex.ONE;
      complex1.INF.pow(complex0);
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex3.tanh();
      complex4.INF.tan();
      complex6.tan();
      complex5.sqrt1z();
      complex2.add((-492.1827528076004));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.hashCode();
      complex1.NaN.sqrt();
      Complex complex3 = complex2.I.subtract(0.0);
      complex0.readResolve();
      complex3.getArgument();
      complex0.nthRoot(693);
      complex2.ZERO.hashCode();
      complex2.getReal();
      complex2.getReal();
      Complex complex4 = complex2.pow(complex1);
      complex4.ONE.multiply(0.0);
      complex4.nthRoot(693);
      complex4.divide(complex3);
      Complex complex5 = complex0.sqrt1z();
      complex0.toString();
      complex5.acos();
      complex3.getField();
      Complex.valueOf(0.0, 2.54224113415832E258);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(465.00475);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.negate();
      complex0.I.log();
      complex2.toString();
      Complex complex4 = complex2.multiply(complex0);
      complex4.NaN.toString();
      complex0.NaN.hashCode();
      complex4.readResolve();
      complex0.INF.add(143.608149);
      complex2.ONE.getArgument();
      Complex complex5 = complex0.pow(3016.2801980783);
      complex5.sqrt();
      Complex complex6 = complex5.cosh();
      complex2.readResolve();
      Complex complex7 = complex0.sin();
      complex4.getImaginary();
      complex2.subtract(0.0);
      complex2.sqrt();
      complex0.nthRoot(1452);
      Complex complex8 = complex7.conjugate();
      complex3.equals(complex1);
      complex8.sqrt();
      complex1.cosh();
      complex6.sin();
      complex7.getArgument();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(81.7, 81.7);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf(4037.4887977, 2009.7417134);
      Complex complex6 = complex0.sqrt();
      complex3.createComplex(0.0, (-5.071761314397018E-8));
      Complex complex7 = complex5.tan();
      complex5.atan();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.INF.negate();
      complex3.equals(complex7);
      complex8.hashCode();
      complex6.cos();
      complex0.atan();
      complex1.reciprocal();
      complex8.negate();
      Complex complex10 = complex4.multiply(81.7);
      complex10.cosh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.tan();
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      complex0.equals(complex1);
      complex0.multiply(0.0);
      Complex.valueOf(0.0, 0.0);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = 508.02074;
      Complex complex0 = Complex.valueOf(508.02074);
      Complex complex1 = complex0.INF.cos();
      complex1.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = null;
      try { 
        complex2.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = Complex.valueOf((-1173.89561817157));
          Complex complex1 = Complex.I;
          Complex complex2 = complex0.ZERO.divide(complex1);
          complex2.ONE.toString();
          complex0.I.nthRoot(3504);
          // Undeclared exception!
          complex0.ONE.nthRoot(3504);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-600.3516368679088));
      complex0.abs();
      Complex complex1 = complex0.ONE.createComplex(1939.33738425, 6.283185307179586);
      Complex complex2 = complex0.subtract(600.3516368679088);
      complex2.ONE.tan();
      complex2.I.sinh();
      Complex complex3 = Complex.valueOf(1939.33738425);
      Complex complex4 = complex2.multiply(2475.4197811);
      complex1.ZERO.nthRoot(37);
      complex4.NaN.pow(complex3);
      Complex complex5 = complex4.tanh();
      complex5.multiply(3511);
      Complex complex6 = complex1.subtract(Double.POSITIVE_INFINITY);
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.subtract(0.0);
      complex0.ZERO.cos();
      complex0.add(2088.7106897651);
      complex0.subtract(2088.7106897651);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.multiply((-1));
      Complex.valueOf(3114.344753906281);
      Complex.valueOf((double) (-1));
      complex0.tanh();
      complex2.reciprocal();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.log();
      Complex complex1 = complex0.NaN.pow(0.0);
      complex0.toString();
      complex0.tanh();
      Complex complex2 = complex1.acos();
      complex2.asin();
      Complex complex3 = Complex.INF;
      complex2.equals(complex3);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      complex0.ZERO.sqrt();
      Complex complex2 = complex0.INF.cosh();
      complex1.ZERO.getField();
      complex1.I.pow(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.divide(0.0);
      complex0.atan();
      Complex complex5 = complex3.add(0.0);
      complex5.I.cosh();
      complex1.getArgument();
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 7120;
      Complex complex1 = complex0.multiply(7120);
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex1.ONE.tan();
      complex3.I.cosh();
      complex0.INF.getArgument();
      double double0 = 3113.791467;
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.ONE.multiply(complex4);
      Complex complex6 = complex5.ZERO.asin();
      complex6.negate();
      Complex complex7 = complex0.subtract(3113.791467);
      Complex complex8 = complex7.asin();
      int int1 = (-2618);
      try { 
        complex8.NaN.nthRoot((-2618));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,618
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.2702997139152675E-8));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.conjugate();
      complex1.readResolve();
      complex2.ONE.cos();
      Complex.valueOf((-7.667998948729528E-9));
      Complex complex3 = Complex.valueOf((-7.667998948729528E-9));
      complex3.negate();
      complex2.subtract(complex3);
      complex0.sinh();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.multiply(complex0);
      String string0 = complex2.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.ZERO.sqrt1z();
      assertEquals(1.0, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.INF;
      complex3.INF.multiply(complex5);
      complex2.ONE.subtract(complex1);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.atan();
      complex7.cosh();
      Complex complex9 = Complex.valueOf(0.0, (-892.91643200429));
      assertEquals((-892.91643200429), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex8.pow(0.0);
      complex0.ONE.sqrt();
      Complex complex11 = complex8.ONE.createComplex(956.5757493648657, (-2863.699879125));
      Complex complex12 = complex11.ZERO.tan();
      Complex complex13 = complex0.tan();
      complex13.I.hashCode();
      Complex complex14 = complex2.tan();
      Complex complex15 = complex13.subtract(complex14);
      complex15.toString();
      assertTrue(complex1.isInfinite());
      
      complex13.abs();
      Complex complex16 = complex12.atan();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      double double0 = complex10.getImaginary();
      assertSame(complex10, complex15);
      assertTrue(complex7.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex6));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.I.negate();
      List<Complex> list0 = complex4.NaN.nthRoot(1485);
      assertTrue(list0.contains(complex1));
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(1, list0.size());
      
      Complex complex5 = Complex.valueOf(1717.32824571, 1717.32824571);
      Complex complex6 = complex0.multiply((-665.3511));
      Complex complex7 = complex6.I.subtract(complex0);
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex0.add(complex1);
      complex10.getReal();
      complex5.sinh();
      complex10.abs();
      assertSame(complex10, complex2);
      
      Complex complex11 = complex8.cosh();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.6663667453928805, complex11.getReal(), 0.01);
      
      Complex complex12 = complex8.tan();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals((-665.3511), complex6.getImaginary(), 0.01);
      assertEquals(0.6865874069985796, complex12.getImaginary(), 0.01);
      assertTrue(complex7.equals((Object)complex9));
      
      Complex complex13 = complex5.conjugate();
      assertEquals(1717.32824571, complex13.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-5051));
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.ONE.abs();
      complex0.getImaginary();
      complex0.getArgument();
      Complex complex3 = complex0.pow((double) (-5051));
      Complex complex4 = complex2.exp();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.pow((-7.724899660259369E221));
      assertTrue(complex5.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex5, complex3);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.I.divide((-697.03));
      Complex complex1 = complex0.I.createComplex(188.375585079, 188.375585079);
      complex1.I.subtract(complex0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.I.subtract(0.0);
      complex1.ONE.hashCode();
      int int0 = (-1);
      complex3.I.exp();
      complex3.ZERO.toString();
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.atan();
      complex1.abs();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.tanh();
      Complex.valueOf(1.0);
      complex2.createComplex((-2061.649), (-115.7492));
      Complex complex4 = complex2.asin();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = Complex.valueOf((-2061.649), (-115.7492));
      Complex complex6 = complex5.sqrt();
      assertEquals((-45.42325810854456), complex6.getImaginary(), 0.01);
      assertEquals(1.2741182030954583, complex6.getReal(), 0.01);
      
      complex2.isInfinite();
      complex0.createComplex((-115.7492), (-2061.649));
      Complex complex7 = complex3.sin();
      assertEquals(0.6097888918995671, complex7.getReal(), 0.01);
      
      complex2.readResolve();
      assertTrue(complex0.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1159.202023));
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals((-8.626624006504171E-4), complex2.getImaginary(), 0.01);
  }
}
