/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:31:50 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1898.46868032, 4.604606371472047E299);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 17.9034459);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.add((-1573.3147364294289));
      Complex complex5 = complex1.atan();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.acos();
      complex3.tan();
      complex4.ONE.cos();
      Complex complex9 = new Complex(699.4388775, 0.0);
      complex4.tan();
      Complex complex10 = Complex.I;
      Complex.valueOf(0.7071067811865476);
      Complex complex11 = Complex.valueOf(0.0);
      complex5.sqrt1z();
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.valueOf(1.1353638172149658, 20.0);
      complex13.tan();
      complex1.nthRoot(37);
      Complex complex14 = complex11.tan();
      complex11.NaN.atan();
      complex14.nthRoot(1);
      complex14.tanh();
      complex8.add(17.9034459);
      complex12.add(complex13);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-927.4));
      complex0.I.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      complex2.getArgument();
      Complex complex3 = complex2.ONE.acos();
      complex3.ZERO.asin();
      Complex complex4 = complex0.pow(0.22318060010430418);
      complex4.I.cosh();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.reciprocal();
      complex6.I.cos();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.4770587682723999, Double.POSITIVE_INFINITY);
      complex1.multiply((-980.87769439));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.0454950851007314E110);
      Complex complex2 = complex1.acos();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-321.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tan();
      complex1.tan();
      complex2.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.NaN;
      complex4.tan();
      complex3.subtract(554.34917);
      complex3.multiply((-2741.5669556172124));
      complex0.multiply(1126);
      complex1.multiply(1129);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1546.97), (-466.44));
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf((-1546.97), 1.27030611038208);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.pow(6.283185307179586);
      Complex complex4 = complex3.asin();
      complex3.NaN.exp();
      Complex complex5 = complex3.reciprocal();
      complex0.NaN.sqrt();
      complex1.acos();
      complex5.NaN.exp();
      Complex.valueOf(6.283185307179586, (-466.44));
      Complex complex6 = complex2.tan();
      complex6.NaN.cos();
      Complex complex7 = Complex.valueOf(2.0000000000108793);
      complex4.sqrt();
      complex0.conjugate();
      Complex complex8 = complex7.add(1.27030611038208);
      complex8.INF.hashCode();
      complex7.multiply(49.218);
      Complex complex9 = complex6.multiply((-3764));
      complex9.INF.sinh();
      complex6.sinh();
      complex2.multiply((-3764));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex.valueOf(0.4770587682723999);
      Complex complex0 = new Complex(0.4770587682723999, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 1607.6016500273372);
      Complex complex2 = Complex.valueOf((-1290.9661410047777), (-3327.98612));
      complex2.ONE.toString();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.9162893295288086, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getArgument();
      Complex.valueOf(Double.NaN, (-1.9099519311579902E-5));
      Complex complex1 = Complex.valueOf((-2469.41742654786));
      complex1.divide(Double.NaN);
      complex1.multiply(2.42109990366786E-8);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow(1596.341886);
      complex0.ZERO.sinh();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(0.0);
      complex2.ZERO.nthRoot(700);
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.5403023058681398), (-0.5403023058681398));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-0.5403023058681398), (-20.0));
      complex2.tan();
      complex1.tan();
      Complex complex3 = Complex.NaN;
      Complex.valueOf((-1294.1826450578096), (-1927.52658));
      Complex complex4 = Complex.valueOf((-2605.20731617792), 1325.08489572);
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.divide(1.9999999999999996);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex((-11.7348988), 2560.0);
      Complex complex6 = complex2.tan();
      complex2.tan();
      Complex.valueOf(82.69985);
      complex1.atan();
      complex6.acos();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-400.02), (-1294.1826450578096));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf((-400.02));
      Complex complex8 = new Complex((-1294.1826450578096));
      complex8.asin();
      Complex complex9 = Complex.ZERO;
      complex9.abs();
      complex7.subtract(3.4637009373878283E-174);
      complex4.getField();
      complex5.divide(0.0);
      Complex complex10 = Complex.valueOf(573.621);
      complex10.createComplex(1.0, (-1294.1826450578096));
      Complex complex11 = complex5.subtract((-400.02));
      complex2.divide(complex11);
      Complex complex12 = Complex.valueOf(1049414.8085232668, 573.621);
      Complex complex13 = complex12.sin();
      complex13.equals(complex3);
      complex0.pow(6.283185307179586);
      complex12.cos();
      Complex complex14 = Complex.INF;
      complex14.sqrt();
      complex12.readResolve();
      complex6.nthRoot(1440);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.9099519311579902E-5));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.add((-313.0));
      complex2.subtract(complex3);
      complex2.tan();
      complex0.add((-1.9099519311579902E-5));
      Complex complex4 = complex1.multiply((-216));
      complex4.negate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.add((-20.0));
      Complex complex1 = null;
      double double0 = (-1415.72570237228);
      Complex.valueOf((-1415.72570237228));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.I.cosh();
      Complex.valueOf(Double.NaN, (-100.8318012934));
      complex1.add((-100.8318012934));
      Complex complex2 = complex0.atan();
      complex2.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.createComplex(Double.NaN, (-100.8318012934));
      Complex complex5 = Complex.ZERO;
      complex5.acos();
      complex5.ONE.multiply(Double.NaN);
      Complex complex6 = new Complex(2.31374454498291, (-11.7348988));
      complex5.multiply(1258.7931655354441);
      Complex complex7 = Complex.ZERO;
      complex4.exp();
      complex1.tan();
      complex3.pow(complex1);
      Complex complex8 = new Complex(2.31374454498291, (-100.8318012934));
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-918.123192058851), (-918.123192058851));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex3.subtract((-918.123192058851));
      Complex complex4 = complex2.cos();
      complex2.asin();
      Complex complex5 = Complex.valueOf((-20.0));
      complex5.tanh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = Complex.ONE;
      complex0.hashCode();
      complex3.getArgument();
      complex4.acos();
      Complex complex5 = Complex.ONE;
      complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      complex2.exp();
      Complex complex7 = complex0.tan();
      complex5.pow(complex3);
      Complex complex8 = new Complex((-480.3897426), (-866.29931));
      complex0.toString();
      complex7.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      complex1.ONE.cos();
      complex1.ZERO.sqrt();
      Complex complex2 = complex0.INF.subtract(0.0);
      complex2.ONE.sinh();
      Complex complex3 = complex2.ONE.cosh();
      complex3.INF.tan();
      Complex complex4 = Complex.valueOf(0.0);
      complex3.NaN.asin();
      complex0.ZERO.abs();
      Complex complex5 = complex0.subtract(0.0);
      complex0.getField();
      complex0.ONE.divide(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ONE.subtract(0.0);
      Complex complex7 = complex5.divide(complex0);
      Complex complex8 = complex7.I.sin();
      complex0.equals(complex6);
      complex2.pow((-1.889488909834863E-8));
      Complex complex9 = complex5.multiply(1330);
      complex9.cos();
      complex7.sqrt();
      complex4.readResolve();
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1256.7833229);
      Complex complex1 = complex0.multiply(1256.7833229);
      Complex complex2 = Complex.valueOf(1256.7833229);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.reciprocal();
      complex3.getArgument();
      complex4.readResolve();
      complex3.sqrt();
      Complex complex5 = complex2.sqrt();
      complex4.sinh();
      Complex complex6 = new Complex(0.8813735870195429);
      Complex complex7 = complex3.acos();
      complex4.add(complex3);
      Complex complex8 = complex1.tan();
      complex2.tan();
      Complex.valueOf(-0.0);
      Complex complex9 = Complex.I;
      complex9.toString();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.sqrt();
      complex7.subtract(complex9);
      complex11.tan();
      complex10.add(1556.443823417681);
      complex8.conjugate();
      complex1.conjugate();
      complex5.log();
      Object object0 = new Object();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.valueOf((-15.191687091));
      complex13.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex0.getArgument();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.pow(complex1);
      complex0.readResolve();
      Complex complex4 = new Complex(6.283185307179586);
      complex4.divide(complex2);
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.negate();
      complex2.hashCode();
      Complex.valueOf((-952.0));
      complex3.log();
      complex3.cosh();
      Complex complex7 = complex6.divide((-1275.8664556436543));
      complex5.sqrt1z();
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.INF;
      complex9.getImaginary();
      complex0.subtract((-1710.4619832446012));
      complex5.add((-1710.4619832446012));
      complex8.tanh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      complex0.ONE.multiply(1143);
      Complex complex2 = Complex.valueOf(2.0, (-2232.24441242979));
      Complex complex3 = complex1.divide((-1583.13279938598));
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.sqrt();
      complex5.pow(2.0);
      complex1.hashCode();
      complex8.getArgument();
      Complex complex9 = complex2.acos();
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex7.cosh();
      complex0.add(complex1);
      Complex complex10 = complex6.pow(complex9);
      complex8.sqrt();
      complex10.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      complex1.NaN.readResolve();
      Complex complex2 = complex0.cos();
      complex0.sqrt();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.tan();
      Complex.valueOf(0.0);
      complex5.asin();
      complex1.abs();
      complex5.subtract((-1518.865767314506));
      complex0.getField();
      complex1.divide(0.0);
      Complex complex6 = Complex.valueOf(20.0);
      complex4.subtract(684.0);
      complex1.divide(complex6);
      Complex complex7 = Complex.ZERO;
      complex7.sin();
      Complex complex8 = Complex.ONE;
      Object object0 = complex4.readResolve();
      complex8.equals(object0);
      Complex complex9 = Complex.I;
      complex9.pow((-435.4795857432));
      Complex complex10 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = new Complex((-1948.54854592898), 0.0);
      complex11.sqrt();
      complex10.sqrt1z();
      Complex complex12 = new Complex(684.0);
      complex3.reciprocal();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-918.123192058851), (-918.123192058851));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.tanh();
      complex1.hashCode();
      complex4.getArgument();
      complex2.acos();
      Complex complex5 = complex3.multiply((-1306448.0));
      complex2.cosh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.add(complex2);
      complex7.pow(complex5);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.cosh();
      complex0.ONE.pow(complex1);
      complex1.cosh();
      complex2.tan();
      Complex.valueOf((-1275.8664556436543));
      Complex complex3 = new Complex((-1.602000800745108E-9));
      complex3.asin();
      complex0.abs();
      complex3.subtract(0.632247805595398);
      complex0.getField();
      Complex complex4 = Complex.INF;
      complex4.divide(0.0);
      Complex.valueOf(0.632247805595398);
      Complex complex5 = Complex.valueOf(9.61538746669783E-5, Double.NaN);
      complex5.subtract((-1254.0));
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex0.sin();
      complex4.equals((Object) null);
      Complex complex8 = Complex.ONE;
      complex8.pow(2574.2739244);
      complex6.cos();
      complex0.sqrt();
      complex7.sqrt1z();
      Complex complex9 = new Complex(0.632247805595398);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      complex1.I.cosh();
      complex0.ONE.pow(complex1);
      Complex complex2 = (Complex)complex0.NaN.readResolve();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.I;
      complex4.multiply(complex0);
      complex0.add(6.707201545505014E-8);
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = complex5.subtract(complex2);
      Complex complex7 = complex4.tan();
      complex2.pow(complex7);
      complex4.reciprocal();
      Complex complex8 = complex6.pow((-1275.8664556436543));
      complex2.isNaN();
      complex2.atan();
      complex2.sqrt();
      complex3.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.cos();
      complex3.sqrt();
      Complex complex4 = complex1.subtract((-1275.8664556436543));
      Complex complex5 = complex1.sinh();
      complex5.cosh();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf(1250.006);
      Complex complex8 = complex2.asin();
      complex4.abs();
      complex7.subtract(0.0);
      Complex complex9 = Complex.ONE;
      complex9.getField();
      complex2.divide((-1275.8664556436543));
      Complex complex10 = Complex.valueOf((-2267491.1078428933));
      complex8.subtract((-1275.8664556436543));
      complex4.divide(complex6);
      complex8.sin();
      Complex complex11 = new Complex(2098.07217, (-2267491.1078428933));
      complex9.equals(complex11);
      complex7.pow(396.9618);
      Complex complex12 = Complex.valueOf(2098.07217);
      complex12.multiply(3313);
      complex8.cos();
      Complex complex13 = complex10.sqrt();
      complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      complex1.NaN.readResolve();
      Complex complex2 = complex0.exp();
      complex2.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.INF.add(0.0);
      Complex complex5 = complex0.ZERO.asin();
      complex5.INF.cosh();
      complex4.I.getArgument();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.log();
      complex8.ZERO.getArgument();
      complex6.NaN.acos();
      Complex complex9 = complex0.pow(complex6);
      Complex complex10 = complex9.cos();
      complex2.pow(complex4);
      complex10.reciprocal();
      complex7.pow((-2291.91749));
      complex7.isNaN();
      complex1.atan();
      complex3.sqrt();
      complex8.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-918.123192058851), (-918.123192058851));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.subtract(complex1);
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.reciprocal();
      complex1.getArgument();
      complex1.readResolve();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sinh();
      Complex complex10 = new Complex(2577.4038317210684);
      complex9.acos();
      Complex complex11 = new Complex(Double.NaN, Double.NaN);
      Complex complex12 = complex6.add(complex11);
      complex12.tan();
      complex9.tan();
      complex0.toString();
      complex4.sqrt();
      Complex complex13 = new Complex((-1305.881582));
      Complex complex14 = complex12.subtract(complex0);
      complex0.subtract(complex5);
      Complex complex15 = complex13.createComplex(5462.874872025167, 8904700.986880625);
      complex11.getReal();
      complex15.sqrt1z();
      complex14.pow(complex7);
      Complex complex16 = Complex.valueOf(143.039);
      complex0.reciprocal();
      complex16.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.05139094591140747, 0.05139094591140747);
      Complex complex1 = complex0.ONE.pow(1276.0);
      Complex complex2 = complex0.divide(2098.07217);
      Complex complex3 = complex0.divide((-2690.6931568822));
      complex0.sinh();
      Complex.valueOf((-10685.320474813663));
      Complex complex4 = complex0.asin();
      complex3.abs();
      Complex complex5 = complex0.subtract(340.253798817365);
      complex1.getField();
      Complex complex6 = complex0.divide((-2690.6931568822));
      Complex complex7 = Complex.valueOf(1793.8969144);
      Complex complex8 = Complex.NaN;
      complex8.subtract(670.7180970215);
      Complex complex9 = complex5.divide(complex6);
      Complex complex10 = complex6.sin();
      complex10.equals(complex9);
      complex2.pow((-1275.8664556436543));
      complex1.cos();
      complex3.sqrt();
      complex4.readResolve();
      complex7.nthRoot(816);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      complex1.I.cosh();
      complex0.ONE.pow(complex1);
      Complex complex2 = (Complex)complex0.NaN.readResolve();
      complex0.ONE.divide(complex1);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.negate();
      complex3.hashCode();
      Complex.valueOf(Double.NaN);
      complex4.log();
      complex2.sqrt();
      Complex complex5 = new Complex((-1275.8664556436543));
      Complex complex6 = Complex.ZERO;
      complex5.subtract(complex6);
      Complex complex7 = Complex.valueOf(670.7180970215);
      Complex complex8 = complex2.subtract(complex7);
      complex8.createComplex(1562.30509319, (-469.166));
      complex3.getReal();
      Complex complex9 = complex4.sqrt1z();
      complex7.pow(complex9);
      Complex.valueOf(1562.30509319);
      complex2.reciprocal();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.cosh();
      complex0.ONE.pow(complex1);
      Complex complex3 = (Complex)complex0.NaN.readResolve();
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex0.negate();
      complex5.hashCode();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex6.log();
      complex8.nthRoot(788);
      Complex complex9 = complex0.ZERO.cosh();
      Complex complex10 = complex4.divide((-1275.8664556436543));
      complex10.NaN.sqrt1z();
      complex4.sqrt();
      complex7.cosh();
      Complex complex11 = new Complex(3354.44857462, Double.NaN);
      complex11.sin();
      complex2.negate();
      complex3.tanh();
      complex2.sqrt1z();
      complex9.isInfinite();
      complex11.add(complex0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = (Complex)complex0.NaN.readResolve();
      complex4.conjugate();
      Complex complex5 = Complex.I;
      complex5.multiply(complex0);
      complex0.add(6.707201545505014E-8);
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = complex6.subtract(complex4);
      Complex complex8 = complex5.tan();
      complex2.add(751.2338);
      complex7.conjugate();
      complex8.conjugate();
      complex8.log();
      Object object0 = new Object();
      Complex complex9 = Complex.ZERO;
      complex3.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      Complex complex2 = Complex.valueOf(5.13308436893567E-5);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.reciprocal();
      complex3.getArgument();
      complex4.readResolve();
      Complex complex5 = complex0.sqrt();
      complex5.sqrt();
      Complex complex6 = complex4.sinh();
      Complex complex7 = new Complex(0.8813735870195429);
      Complex complex8 = complex4.acos();
      Complex complex9 = complex4.add(complex2);
      Complex complex10 = complex6.tan();
      Complex complex11 = complex8.tan();
      Complex complex12 = Complex.valueOf(5.13308436893567E-5);
      complex12.toString();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = new Complex(2.0);
      Complex complex15 = complex12.subtract(complex11);
      complex5.INF.multiply(4466449.708924379);
      Complex complex16 = Complex.ONE;
      complex16.subtract(complex13);
      complex12.createComplex(2.356194490192345, 1562.30509319);
      complex10.getReal();
      complex7.sqrt1z();
      complex5.pow(complex9);
      Complex complex17 = Complex.valueOf(2.0);
      complex17.reciprocal();
      complex15.atan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex1.cosh();
      complex1.pow(complex3);
      complex2.readResolve();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex3.cos();
      complex1.negate();
      complex4.hashCode();
      Complex.valueOf((-20.0));
      complex1.log();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.divide((double) 0);
      complex3.sqrt1z();
      Complex complex8 = complex7.sinh();
      complex0.getImaginary();
      complex5.subtract((-1.0));
      Complex complex9 = complex8.add(2.4500739038517657E-9);
      complex0.tanh();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.ONE.reciprocal();
      complex1.getArgument();
      complex0.readResolve();
      Complex complex6 = complex0.sqrt();
      complex3.I.sqrt();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex8.INF.acos();
      complex7.ZERO.add(complex8);
      Complex complex9 = complex6.tan();
      Complex complex10 = complex3.tan();
      complex5.toString();
      Complex complex11 = complex4.sqrt();
      Complex complex12 = new Complex((-1305.881582));
      complex11.NaN.subtract(complex12);
      complex7.subtract(complex5);
      Complex complex13 = complex9.createComplex(Double.NaN, 1562.30509319);
      complex5.getReal();
      complex2.sqrt1z();
      complex13.pow(complex3);
      Complex complex14 = Complex.valueOf(2.3838847142608888);
      complex14.reciprocal();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1.7020465042442242E-8, 3085.8635);
      complex0.ONE.nthRoot(1470);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.createComplex(0.0, (-162.78));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex2.pow(Double.POSITIVE_INFINITY);
      complex5.hashCode();
      complex5.getArgument();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.multiply((double) 1470);
      complex7.cosh();
      complex5.add(complex6);
      complex1.pow(complex7);
      complex3.toString();
      Complex.valueOf(0.2913127145097827, 0.0514361756264553);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      complex0.ONE.multiply(1143);
      Complex complex2 = Complex.valueOf(2.0, (-2232.24441242979));
      Complex complex3 = complex1.divide((-1583.13279938598));
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.atan();
      complex4.I.getField();
      complex0.ZERO.abs();
      Complex complex7 = complex4.ZERO.sin();
      complex7.ONE.subtract((-1583.13279938598));
      Complex complex8 = complex1.tanh();
      complex6.hashCode();
      complex0.getArgument();
      complex8.acos();
      complex3.multiply(0.0);
      complex2.cosh();
      Complex complex9 = Complex.ZERO;
      complex9.add(complex4);
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1.7020465042442242E-8, 3085.8635);
      complex0.ONE.nthRoot(1470);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.createComplex(0.0, 3593.91885546316);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.sqrt();
      complex0.pow((-1593.8));
      Complex complex5 = complex2.createComplex(1.7020465042442242E-8, 1470);
      complex0.reciprocal();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex0.subtract(1007.72360312528);
      complex0.getArgument();
      Complex complex8 = complex6.negate();
      complex7.getReal();
      complex1.sqrt1z();
      complex8.pow(complex2);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow((-2690.6931568822));
      Complex complex2 = Complex.ONE;
      complex2.multiply(17);
      Complex complex3 = Complex.valueOf((-2690.6931568822));
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.reciprocal();
      complex1.getArgument();
      complex1.readResolve();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = new Complex(0.0, 0);
      Complex complex9 = complex8.sinh();
      Complex complex10 = new Complex(0);
      Complex complex11 = complex3.add(complex5);
      Complex complex12 = complex5.tan();
      Complex complex13 = complex11.tan();
      complex9.toString();
      complex12.sqrt();
      Complex complex14 = new Complex(361.19993045233895);
      complex1.subtract(complex4);
      complex5.subtract(complex1);
      complex14.sinh();
      complex11.createComplex(Double.NaN, 1707.266870819306);
      complex14.reciprocal();
      complex6.cos();
      Complex.valueOf(1707.266870819306);
      complex13.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.05139094591140747, 0.05139094591140747);
      complex0.ONE.pow(1276.0);
      Complex complex1 = complex0.divide(2098.07217);
      Complex complex2 = complex0.divide((-2690.6931568822));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = complex3.I.divide(complex1);
      complex5.NaN.subtract(complex4);
      Complex complex6 = complex5.pow(complex3);
      complex3.NaN.log();
      complex2.readResolve();
      Complex complex7 = complex4.ONE.divide((-1267.88926216874));
      Complex complex8 = complex7.NaN.asin();
      complex8.NaN.add(complex0);
      Complex complex9 = complex2.multiply((-1759));
      Complex.valueOf(1276.0);
      Complex complex10 = complex1.subtract(1276.0);
      complex6.sin();
      complex8.equals("`q;eg^=.(H");
      complex5.pow(1482.63395734);
      complex1.multiply((-2699));
      complex9.cos();
      complex10.sqrt();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.sinh();
      complex3.cosh();
      complex3.tan();
      Complex.valueOf((-376.95255315));
      complex0.asin();
      complex4.abs();
      Complex complex7 = complex5.subtract(Double.NaN);
      complex0.getField();
      Complex complex8 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0);
      Complex complex9 = complex6.subtract(0.5470341936921521);
      Complex complex10 = complex9.divide(complex8);
      complex4.sin();
      complex3.equals(complex9);
      complex10.pow((-376.95255315));
      complex10.multiply(1330);
      complex8.cos();
      complex4.sqrt();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.valueOf((double) 0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.reciprocal();
      complex2.getArgument();
      complex4.readResolve();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.sqrt();
      complex5.sinh();
      Complex complex7 = new Complex(361.19993045233895);
      complex3.add(complex0);
      complex7.tan();
      complex4.tan();
      complex3.toString();
      complex0.sqrt();
      Complex complex8 = new Complex((-1305.881582));
      complex0.subtract(complex4);
      complex5.subtract(complex4);
      complex8.sinh();
      Complex complex9 = complex5.createComplex(0, 4.604606371472047E299);
      Complex complex10 = Complex.I;
      complex10.reciprocal();
      Complex complex11 = complex6.cos();
      complex11.NaN.hashCode();
      complex11.exp();
      Complex.valueOf(91.13584);
      Complex complex12 = complex1.multiply(complex9);
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      complex1.I.multiply(0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.ONE.reciprocal();
      complex1.getArgument();
      complex0.readResolve();
      Complex complex5 = complex0.sqrt();
      complex2.I.sqrt();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = new Complex(361.19993045233895);
      complex6.ZERO.add(complex7);
      Complex complex8 = complex5.tan();
      complex1.ONE.add(Double.NaN);
      complex2.tan();
      complex4.toString();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = new Complex((-1305.881582));
      complex9.NaN.subtract(complex10);
      complex6.subtract(complex4);
      complex3.sinh();
      Complex complex11 = complex8.createComplex(1707.266870819306, 1562.30509319);
      complex11.reciprocal();
      Complex complex12 = complex1.cos();
      Complex complex13 = Complex.valueOf((-3036.841));
      complex12.multiply(complex11);
      complex13.subtract(808.4);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.05139094591140747, 0.05139094591140747);
      complex0.ONE.pow(1276.0);
      Complex complex1 = complex0.divide(2098.07217);
      Complex complex2 = complex0.divide((-2690.6931568822));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = complex3.I.divide(complex1);
      Complex complex6 = complex5.NaN.subtract(complex4);
      complex5.pow(complex3);
      Complex complex7 = complex3.NaN.log();
      complex2.readResolve();
      Complex complex8 = complex4.ONE.divide((-1267.88926216874));
      Complex complex9 = complex8.NaN.asin();
      Complex complex10 = complex9.NaN.add(complex0);
      complex6.hashCode();
      complex7.sqrt();
      Complex complex11 = complex3.cosh();
      complex1.sin();
      complex1.negate();
      Complex complex12 = complex11.tanh();
      complex12.sqrt1z();
      complex0.isInfinite();
      complex10.add(complex2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.valueOf(Double.NaN, (-1.9099519311579902E-5));
      Complex complex3 = complex1.add((-1.9099519311579902E-5));
      complex1.cosh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.ZERO;
      complex7.getArgument();
      complex7.acos();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex4.pow(complex8);
      complex2.cos();
      complex0.pow(complex3);
      complex8.reciprocal();
      complex6.atan();
      complex9.sqrt();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.05139094591140747, 0.05139094591140747);
      complex0.ONE.pow(1276.0);
      Complex complex1 = complex0.divide(2098.07217);
      Complex complex2 = complex0.divide((-2690.6931568822));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = complex3.I.divide(complex1);
      Complex complex6 = complex5.NaN.subtract(complex4);
      complex5.pow(complex3);
      complex3.NaN.log();
      complex2.readResolve();
      Complex complex7 = complex4.ONE.divide((-1267.88926216874));
      Complex complex8 = complex7.NaN.asin();
      complex8.NaN.add(complex0);
      Complex complex9 = complex2.multiply((-1759));
      complex0.add(3047.144602999008);
      complex5.getArgument();
      Complex complex10 = Complex.valueOf((-850.45));
      complex1.atan();
      complex2.sqrt();
      complex10.tan();
      Complex.valueOf(0.41421356237309515, Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex10.pow(complex11);
      complex6.getArgument();
      complex9.pow(1399.094981);
      Complex complex13 = Complex.ONE;
      complex13.isNaN();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-268.8213627));
      Complex complex1 = Complex.ZERO;
      complex1.toString();
      complex1.abs();
      Complex complex2 = complex1.multiply(93.8);
      Complex complex3 = complex0.conjugate();
      complex2.multiply(complex0);
      Complex complex4 = new Complex((-1.5536658521931418E118));
      Complex complex5 = complex4.add(1.334362017065677E-305);
      Complex complex6 = new Complex(93.8);
      Complex complex7 = complex6.subtract(complex3);
      Complex complex8 = complex3.add((-518.145918));
      complex8.conjugate();
      complex0.conjugate();
      complex5.log();
      Object object0 = new Object();
      complex4.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.ONE.negate();
      complex4.I.acos();
      Complex complex5 = complex2.ZERO.negate();
      complex5.sqrt1z();
      complex5.INF.hashCode();
      Complex complex6 = complex0.multiply(2844.843155632008);
      complex0.equals(complex6);
      Complex complex7 = complex1.reciprocal();
      complex7.ZERO.hashCode();
      Complex complex8 = complex6.add(complex0);
      complex8.I.sinh();
      complex8.ZERO.hashCode();
      Complex complex9 = complex6.INF.sqrt1z();
      complex1.sinh();
      complex2.ZERO.subtract(complex6);
      complex1.getImaginary();
      Complex complex10 = complex6.acos();
      complex0.isNaN();
      complex10.I.multiply(743.9413768610791);
      Complex complex11 = complex1.log();
      complex10.getField();
      Complex complex12 = complex2.sinh();
      complex12.conjugate();
      Complex complex13 = complex11.conjugate();
      complex13.I.conjugate();
      complex9.getField();
      complex13.readResolve();
      complex7.multiply(1);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.exp();
      complex2.INF.hashCode();
      complex1.INF.getField();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.sqrt();
      complex4.INF.sqrt1z();
      complex4.ZERO.toString();
      Complex complex5 = complex0.negate();
      complex3.getImaginary();
      double double0 = (-440.5);
      complex0.I.createComplex((-440.5), (-440.5));
      int int0 = 3475;
      complex0.nthRoot(3475);
      complex5.readResolve();
      // Undeclared exception!
      complex5.nthRoot(3475);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.ZERO.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.reciprocal();
      complex3.I.getArgument();
      Complex complex4 = Complex.valueOf(1303.36848648022, 6.283185307179586);
      complex4.ONE.asin();
      Complex complex5 = complex2.I.atan();
      Complex complex6 = complex5.I.sqrt1z();
      complex6.INF.subtract(complex3);
      Complex complex7 = complex6.acos();
      complex7.ONE.createComplex(6.283185307179586, 1303.36848648022);
      Complex complex8 = complex1.divide(4027.7517088843);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.INF.divide(complex9);
      complex8.abs();
      complex8.abs();
      complex10.INF.multiply(complex3);
      Complex complex11 = complex2.multiply(0.0);
      Complex complex12 = complex0.pow(1303.36848648022);
      complex12.pow(2.0);
      complex10.divide(complex1);
      complex11.equals(complex8);
      complex0.hashCode();
      complex8.cosh();
      complex12.add(complex10);
      Complex.valueOf((-1.530926726615185E-8));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.acos();
      complex3.reciprocal();
      int int0 = 0;
      Complex complex4 = complex0.INF.exp();
      complex4.ZERO.sqrt1z();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex1.exp();
      complex1.multiply((-1863.1952964));
      Complex complex7 = complex0.acos();
      complex7.INF.negate();
      Complex complex8 = Complex.valueOf((-1270.8329824939485));
      Complex complex9 = complex2.subtract(0.0);
      complex9.NaN.acos();
      Complex complex10 = complex9.INF.divide(complex5);
      complex9.I.exp();
      complex6.abs();
      complex3.getArgument();
      Complex.valueOf(0.0);
      complex3.atan();
      complex0.NaN.sqrt();
      complex3.INF.tan();
      Complex complex11 = Complex.valueOf(0.0, 2.718281828459045);
      Complex complex12 = complex11.pow(complex8);
      complex12.getArgument();
      complex4.pow(1399.094981);
      complex5.isNaN();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6346492767333984, (-1600.150248));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex1.INF.multiply((-1959.0));
      Complex complex4 = complex1.divide((-1600.150248));
      complex4.INF.asin();
      complex4.add((-1959.0));
      Complex complex5 = complex4.sqrt1z();
      complex5.ONE.sin();
      complex5.add(complex2);
      complex0.NaN.log();
      Complex complex6 = complex1.exp();
      complex6.NaN.atan();
      complex6.multiply(2.6346492767333984);
      complex0.add(complex3);
      Complex complex7 = complex0.acos();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double double0 = (-73.0);
      Complex complex0 = new Complex((-73.0), (-2749.629));
      complex0.ZERO.abs();
      complex0.I.sin();
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf(4569.218775889787, (-1532.899));
      Complex complex2 = Complex.valueOf((-2749.629));
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.add(4569.218775889787);
      Complex complex4 = complex1.pow(0.0);
      complex1.ONE.add(complex4);
      complex2.INF.asin();
      try { 
        complex2.INF.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.05139094591140747, 0.05139094591140747);
      complex0.ONE.pow(1276.0);
      Complex complex1 = complex0.divide(2098.07217);
      Complex complex2 = complex0.divide((-2690.6931568822));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = complex3.I.divide(complex1);
      Complex complex6 = complex5.NaN.subtract(complex4);
      complex5.pow(complex3);
      complex3.NaN.log();
      complex2.readResolve();
      Complex complex7 = complex4.ONE.divide((-1267.88926216874));
      Complex complex8 = complex7.NaN.asin();
      complex8.NaN.add(complex0);
      Complex complex9 = complex2.multiply((-1759));
      Complex complex10 = complex0.add(3047.144602999008);
      complex10.INF.createComplex((-315.98881), 0.05139094591140747);
      Complex complex11 = Complex.valueOf(2098.07217, 0.05139094591140747);
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex9.multiply(1613);
      Complex complex14 = complex6.acos();
      complex14.ONE.pow(3047.144602999008);
      complex5.getReal();
      complex7.atan();
      complex14.getArgument();
      complex5.readResolve();
      Complex complex15 = complex12.reciprocal();
      Complex complex16 = complex13.subtract(complex15);
      complex3.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(4.397691311390564E-8);
      Complex complex1 = complex0.ONE.multiply((-2873));
      complex1.ONE.hashCode();
      complex0.isInfinite();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(0.0, 4.397691311390564E-8);
      complex0.readResolve();
      Complex.valueOf((double) (-2873), 1537.87328890837);
      complex2.INF.add(complex1);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1348.379002175);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.INF.acos();
      complex0.INF.getArgument();
      Complex complex3 = complex0.divide(841.1);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex3.NaN.tanh();
      complex3.ZERO.abs();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex6.NaN.atan();
      Complex complex9 = complex6.I.subtract(0.0);
      complex6.ZERO.abs();
      Complex complex10 = complex5.I.divide(0.7853981633974483);
      complex10.NaN.negate();
      complex8.INF.add(0.0);
      Complex complex11 = Complex.valueOf(841.1, 0.0);
      complex11.INF.getField();
      complex5.readResolve();
      complex8.getImaginary();
      Complex complex12 = complex0.add(1348.379002175);
      complex11.multiply(1979);
      complex12.isNaN();
      Complex complex13 = complex7.cosh();
      complex7.NaN.abs();
      complex4.readResolve();
      complex6.getField();
      complex13.nthRoot(1979);
      complex5.toString();
      complex9.acos();
      complex13.subtract((-129.18379436));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      complex0.ONE.multiply(1143);
      Complex complex2 = Complex.valueOf(2.0, (-2232.24441242979));
      Complex complex3 = complex1.divide((-1583.13279938598));
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.NaN.sinh();
      complex5.atan();
      complex4.I.getField();
      complex0.ZERO.abs();
      Complex complex6 = complex4.ZERO.sin();
      complex6.ONE.subtract((-1583.13279938598));
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.NaN.reciprocal();
      Complex complex9 = complex7.ZERO.atan();
      Complex complex10 = complex3.subtract((-1583.13279938598));
      complex10.ONE.getArgument();
      Complex complex11 = complex0.negate();
      complex1.getReal();
      complex3.sqrt1z();
      complex9.pow(complex11);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(Double.POSITIVE_INFINITY);
      complex1.I.multiply(0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.ONE.reciprocal();
      complex1.getArgument();
      complex0.readResolve();
      Complex complex5 = complex0.sqrt();
      complex2.I.sqrt();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = new Complex(361.19993045233895);
      complex6.ZERO.add(complex7);
      Complex complex8 = complex5.tan();
      complex2.tan();
      complex4.toString();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = new Complex((-1305.881582));
      complex9.NaN.subtract(complex10);
      complex6.subtract(complex4);
      complex3.sinh();
      Complex complex11 = complex8.createComplex(1707.266870819306, 1562.30509319);
      complex11.reciprocal();
      Complex complex12 = complex1.cos();
      Complex.valueOf((-3036.841));
      complex12.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.INF.createComplex(0.0, (-854.8168307));
      Complex complex3 = complex2.ZERO.multiply((-854.8168307));
      complex3.ONE.subtract(0.0);
      complex0.cos();
      complex0.getArgument();
      complex1.nthRoot(364);
      Complex.valueOf((-464.29602429), (-1132.2293404382));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-2859.95));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.INF.divide(complex2);
      complex3.NaN.toString();
      Complex complex4 = complex0.ONE.conjugate();
      complex1.hashCode();
      complex0.multiply(complex4);
      complex0.ONE.toString();
      Complex complex5 = complex1.createComplex((-0.1275278893606981), 1.0);
      complex0.I.subtract((-0.1275278893606981));
      complex1.getField();
      complex2.NaN.getField();
      Complex complex6 = complex5.log();
      complex1.pow(1.0);
      complex2.conjugate();
      complex0.getField();
      Complex complex7 = complex5.acos();
      complex7.exp();
      Complex.valueOf((-1928.066511));
      complex1.pow((-0.1275278893606981));
      complex6.abs();
      complex1.isNaN();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(697.6, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(0.0, 384.5773029);
      complex3.INF.hashCode();
      Complex complex4 = complex0.subtract(complex3);
      complex4.readResolve();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.INF.add(complex4);
      Complex complex8 = complex1.divide(0.0);
      complex8.ONE.multiply(7);
      complex1.negate();
      Complex complex9 = complex4.multiply((-757));
      Complex complex10 = complex3.sinh();
      complex10.ZERO.divide(complex9);
      complex2.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2028.401447655799);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.INF.multiply(1009);
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.ZERO.multiply(complex0);
      Complex complex6 = complex3.ONE.exp();
      complex3.NaN.readResolve();
      Complex complex7 = complex0.tan();
      complex0.INF.pow((-1.0));
      Complex complex8 = complex7.createComplex(0.0, (-2000.8608781));
      complex8.ONE.asin();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex2.log();
      complex0.isNaN();
      Complex complex11 = complex1.multiply(1009);
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex12 = complex4.sqrt();
      complex10.add(0.0);
      complex12.subtract(complex9);
      complex5.sinh();
      complex12.getImaginary();
      complex3.isInfinite();
      complex9.toString();
      complex11.nthRoot(1009);
      complex10.negate();
      complex11.nthRoot(1009);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      complex0.ZERO.abs();
      Complex complex2 = complex1.I.divide((-5.63383579957466E77));
      complex2.ZERO.sqrt();
      complex2.NaN.exp();
      Complex complex3 = complex2.ONE.pow((-5.63383579957466E77));
      complex1.NaN.cos();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.I.divide(0.0);
      complex3.ONE.sin();
      complex0.pow(complex1);
      complex1.add(complex0);
      Complex complex6 = complex4.ONE.add(complex2);
      complex6.ONE.add(complex0);
      complex1.multiply(1);
      Complex complex7 = complex1.NaN.sqrt1z();
      complex2.equals("points {3} and {2} are not increasing ({1} > {0})");
      Complex complex8 = complex0.subtract(complex4);
      complex8.negate();
      complex5.divide((double) 1);
      Complex complex9 = Complex.valueOf((double) 1);
      complex9.I.negate();
      Complex complex10 = complex8.subtract(complex0);
      complex7.exp();
      complex10.nthRoot(1311);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1275.8664556436543), (-1275.8664556436543));
      Complex complex1 = Complex.ONE;
      complex1.NaN.getArgument();
      complex1.I.cosh();
      complex0.ONE.pow(complex1);
      complex0.NaN.readResolve();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.negate();
      complex3.hashCode();
      Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.log();
      complex0.ZERO.cosh();
      Complex complex6 = complex2.divide((-1275.8664556436543));
      Complex complex7 = complex6.NaN.sqrt1z();
      complex6.sinh();
      complex5.getImaginary();
      Complex complex8 = complex6.subtract(6.714184569587689E-79);
      complex7.add(6.714184569587689E-79);
      complex7.tanh();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double double0 = 2279.816520569;
      Complex complex0 = Complex.valueOf(2279.816520569, 2279.816520569);
      Complex complex1 = null;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1237.79), 0.2881702184677124);
      Complex complex1 = complex0.sinh();
      complex1.ONE.abs();
      Complex complex2 = complex1.reciprocal();
      complex1.toString();
      Complex complex3 = complex0.pow((-1237.79));
      Complex complex4 = complex3.NaN.asin();
      complex0.readResolve();
      Complex complex5 = complex3.cos();
      complex5.tanh();
      Complex complex6 = complex4.log();
      complex6.nthRoot(810);
      Complex complex7 = complex0.log();
      complex2.multiply(1);
      Complex.valueOf(0.0);
      Complex complex8 = complex4.acos();
      complex7.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1427.18423453659, 1517.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.INF.multiply(2.2077903747558594);
      complex3.I.readResolve();
      complex0.getReal();
      Complex complex4 = complex0.sinh();
      complex4.ZERO.hashCode();
      complex4.sqrt();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.ONE.sin();
      complex5.INF.negate();
      complex5.tanh();
      complex2.sqrt1z();
      complex6.isInfinite();
      complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3868.69074);
      Complex complex1 = complex0.ONE.sin();
      complex1.INF.readResolve();
      complex1.NaN.getField();
      complex0.getImaginary();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex1.multiply(3723.1954);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = complex0.add(complex5);
      complex6.I.pow(complex5);
      complex6.divide(3868.69074);
      complex4.add(3868.69074);
      complex4.multiply(3868.69074);
      complex0.divide(453.085);
      complex6.add(complex2);
      Complex complex7 = Complex.ZERO;
      complex4.subtract(complex7);
      Complex complex8 = complex3.add(complex1);
      complex1.NaN.abs();
      try { 
        complex8.INF.nthRoot((-754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -754
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex0.hashCode();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.ZERO.readResolve();
      Complex complex3 = complex2.I.sqrt();
      complex3.ZERO.add((-1098.0480983589534));
      complex3.ONE.cos();
      Complex complex4 = Complex.valueOf(0.0, (-175.41228));
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex4.NaN.sinh();
      complex6.I.sinh();
      complex4.negate();
      Complex complex7 = complex4.NaN.divide(complex2);
      complex7.ZERO.createComplex((-175.41228), (-1098.0480983589534));
      complex1.getReal();
      Complex complex8 = complex4.exp();
      complex8.INF.tanh();
      Complex complex9 = complex5.pow(104.4);
      Complex complex10 = complex9.ZERO.subtract(2.0);
      complex9.getImaginary();
      complex4.getImaginary();
      complex5.divide(0.0);
      try { 
        complex10.nthRoot((-1427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,427
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.acos();
      complex0.divide(complex1);
      Complex complex2 = complex0.tanh();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.tan();
      complex1.equals("(0.0, 0.0)");
      Complex complex2 = complex1.cosh();
      complex0.INF.tanh();
      Complex complex3 = complex2.NaN.pow(complex1);
      complex0.hashCode();
      complex1.getReal();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex2.reciprocal();
      complex5.ONE.divide((-887.85087882632));
      complex2.isInfinite();
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex8.sin();
      complex9.ZERO.divide(complex2);
      Complex complex10 = complex9.NaN.createComplex(3.059023470086686E-7, 0.0);
      complex3.isInfinite();
      complex3.subtract(0.0);
      complex1.multiply(complex10);
      complex7.add(complex2);
      complex6.atan();
      complex6.add((-260.2201221959689));
      Complex.valueOf(0.0, (-1114.84594));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-513.0));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.ONE.exp();
      Complex.valueOf((-552.6991), (-552.6991));
      complex2.toString();
      complex0.isNaN();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.negate();
      complex3.INF.atan();
      Complex complex5 = complex3.INF.conjugate();
      complex5.NaN.negate();
      complex2.atan();
      complex2.readResolve();
      complex1.getReal();
      complex2.getField();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.cos();
      complex7.multiply(1);
      Complex complex8 = complex1.createComplex(Double.POSITIVE_INFINITY, 1);
      complex8.INF.add(complex4);
      complex6.multiply(1325);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1294.1826450578096), (-1294.1826450578096));
      complex0.acos();
      complex0.pow((-1294.1826450578096));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1.7020465042442242E-8, 3085.8635);
      complex0.ONE.nthRoot(1470);
      Complex complex1 = complex0.INF.log();
      complex1.ONE.createComplex(0.0, 3593.91885546316);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.pow((-1593.8));
      complex4.hashCode();
      complex2.getArgument();
      complex4.acos();
      Complex complex5 = complex0.multiply((-1593.8));
      complex5.NaN.cosh();
      complex3.add(complex2);
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.asin();
      complex0.readResolve();
      Complex complex3 = complex0.ONE.pow(0.0);
      complex2.I.readResolve();
      complex0.getReal();
      complex1.sin();
      complex2.cos();
      complex1.tan();
      complex1.I.multiply(0.0);
      complex0.tanh();
      complex1.hashCode();
      complex3.conjugate();
      complex3.subtract(823.9200731561093);
      Complex complex4 = Complex.valueOf((-2710.4872514), 823.9200731561093);
      complex4.cos();
      complex4.asin();
      complex0.add(372.2043032464629);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1590.589150443));
      complex0.NaN.log();
      Complex.valueOf((-1590.589150443));
      Complex complex1 = complex0.I.createComplex((-1590.589150443), 8.800655674349468E-8);
      complex0.NaN.sinh();
      complex0.abs();
      Object object0 = new Object();
      complex1.INF.readResolve();
      complex1.equals(object0);
      complex1.subtract(complex0);
      Complex complex2 = complex1.exp();
      complex2.ONE.multiply(0.0);
      int int0 = (-1441);
      try { 
        complex2.nthRoot((-1441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,441
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(6.283185307179586);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.pow(6.283185307179586);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.multiply(313);
      Complex complex6 = complex5.pow(6.283185307179586);
      Complex complex7 = complex6.I.subtract((-732.68));
      complex3.conjugate();
      complex4.ZERO.getArgument();
      complex3.multiply(1218);
      complex3.hashCode();
      Complex complex8 = complex5.sqrt1z();
      complex8.acos();
      complex8.pow(0.0);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1596.0620087);
      Complex complex1 = complex0.NaN.divide((-1596.0620087));
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.NaN.divide(complex2);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      complex0.abs();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex0.add((-313.0));
      Complex complex5 = complex4.INF.subtract(complex2);
      complex5.ONE.tan();
      complex4.NaN.add((-313.0));
      Complex complex6 = complex1.conjugate();
      complex6.conjugate();
      complex1.log();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1.986264756071962E44);
      Complex complex1 = complex0.NaN.exp();
      complex1.NaN.cos();
      Complex complex2 = Complex.NaN;
      complex2.ZERO.subtract(complex0);
      Complex complex3 = complex2.add(complex0);
      complex3.ONE.createComplex(1.986264756071962E44, 586.4884802048);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.log();
      complex0.NaN.multiply(354.222283541639);
      complex0.I.toString();
      complex0.ONE.readResolve();
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.INF.conjugate();
      complex2.NaN.pow(Double.NaN);
      complex0.subtract((-1515.0));
      complex0.asin();
      complex1.createComplex(0.0, 1217.4175201857);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex2.I.sqrt();
      assertEquals(0.7071067811865475, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.ZERO.cos();
      complex0.INF.abs();
      Complex complex6 = complex0.acos();
      List<Complex> list0 = complex0.nthRoot(1352);
      assertTrue(list0.contains(complex0));
      assertEquals(1352, list0.size());
      
      Complex complex7 = complex6.ONE.add(complex3);
      assertEquals(1.8414709848078965, complex7.getReal(), 0.01);
      
      Complex complex8 = complex1.multiply(0);
      Complex complex9 = complex0.asin();
      assertEquals(1.5707963267948966, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex6.divide((-3670.9396318));
      Complex complex11 = complex10.divide(1921.88174272);
      complex5.negate();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex12.I.exp();
      assertEquals(0.5403023058681398, complex13.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex10.ONE.add((double) 0);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex11.cos();
      Complex complex16 = complex15.subtract(complex6);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertTrue(complex16.equals((Object)complex14));
      
      complex3.sin();
      complex3.readResolve();
      assertTrue(complex1.equals((Object)complex8));
      
      complex0.conjugate();
      assertTrue(complex0.equals((Object)complex15));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1256.7833229);
      Complex complex1 = complex0.multiply(1256.7833229);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex2.INF.exp();
      complex4.NaN.conjugate();
      complex4.ONE.multiply(complex3);
      complex0.getImaginary();
      Complex complex5 = complex0.exp();
      complex1.equals(complex2);
      Complex complex6 = complex1.asin();
      complex6.NaN.add(0.0);
      Complex complex7 = complex2.tanh();
      complex7.pow(complex5);
      complex0.divide(1256.7833229);
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(67.417232802311);
      Complex complex2 = complex1.INF.pow(complex0);
      assertNotSame(complex2, complex1);
      assertTrue(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.sqrt();
      assertTrue(complex3.equals((Object)complex0));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }
}
