/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:01:48 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.818537910881676E-71, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(2.818537910881676E-71);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(6.88615578404537E182);
      Complex complex2 = complex1.multiply(6.88615578404537E182);
      Complex complex3 = Complex.I;
      Complex.valueOf(4100.135058647633, 4100.135058647633);
      complex0.nthRoot(190);
      Complex complex4 = complex2.multiply(190);
      complex2.multiply(complex3);
      complex3.subtract(complex4);
      complex0.acos();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.8792128057761137E-7, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.1370690793508674E296), 1526.7402126255438);
      complex0.INF.sqrt1z();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex.valueOf(1364.2097065161724, (-2758.4643156206007));
      Complex.valueOf((-2758.4643156206007), (-31.07630515164172));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3133233757338552);
      complex0.INF.subtract(1152.1765306520206);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.NaN.toString();
      Complex complex2 = complex0.add(0.3133233757338552);
      Complex.valueOf(1152.1765306520206, Double.POSITIVE_INFINITY);
      complex1.ZERO.sqrt1z();
      complex0.getField();
      Complex complex3 = complex2.sqrt1z();
      complex1.toString();
      complex2.I.reciprocal();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.conjugate();
      complex4.multiply(complex1);
      complex3.sinh();
      complex4.negate();
      Complex complex6 = complex2.exp();
      complex3.pow(complex1);
      complex6.pow(0.3133233757338552);
      Complex complex7 = complex5.divide(0.3133233757338552);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-0.7615941559557649), (-0.7615941559557649));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.divide((-0.7615941559557649));
      Complex complex3 = Complex.valueOf((-0.7615941559557649), (-2962.1978998007));
      Complex complex4 = complex0.pow(complex3);
      complex3.INF.multiply((-0.7615941559557649));
      Complex complex5 = complex4.I.add(Double.NaN);
      complex1.abs();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex3.exp();
      complex7.I.conjugate();
      complex5.exp();
      complex7.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1022), (-1022));
      complex0.I.hashCode();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-659.949493));
      Complex complex2 = complex1.multiply((-1.0));
      complex2.NaN.divide(complex0);
      Complex complex3 = complex0.multiply((-3276.988));
      complex3.getArgument();
      Complex complex4 = new Complex(3917.0);
      complex0.pow((-700567.0));
      Complex complex5 = complex2.exp();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(72);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2.718281828459045);
      Complex complex1 = Complex.valueOf(1732.4463857140513, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.multiply(0.041666666666621166);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.createComplex(1020.96774, 1496.31093246524);
      Complex complex4 = complex3.cosh();
      complex4.I.sqrt1z();
      Complex complex5 = complex1.multiply(complex4);
      complex0.NaN.toString();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex4.NaN.subtract(complex2);
      complex8.sinh();
      complex6.ZERO.negate();
      complex4.multiply(125);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex3.exp();
      complex10.I.getArgument();
      complex9.abs();
      complex1.atan();
      complex6.toString();
      Complex complex11 = complex9.tan();
      complex1.subtract(484.663836933);
      complex7.sinh();
      complex11.toString();
      Complex complex12 = complex2.cos();
      complex6.atan();
      complex12.pow((-1726.592092));
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.I;
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2.818537910881676E-71);
      Complex complex2 = new Complex((-0.9962476464275768));
      Complex complex3 = complex0.multiply(1336);
      complex1.hashCode();
      complex0.add(101.0);
      complex3.pow(1255.04224226436);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.add((-4016.3626408));
      Complex complex3 = complex2.INF.sqrt();
      complex3.ZERO.multiply((-4016.3626408));
      complex3.multiply((-4016.3626408));
      Complex complex4 = complex0.add((-4016.3626408));
      complex4.abs();
      complex0.ONE.abs();
      complex0.getField();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex1.add(complex4);
      Complex complex7 = complex6.add(complex2);
      complex4.cosh();
      complex7.INF.getArgument();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex4.divide((-4016.3626408));
      complex7.divide(complex8);
      complex5.createComplex(219.0795704573075, 2009.4);
      complex8.createComplex(1404.28561, 1953.286691);
      complex9.pow((-573.33455));
      complex1.tan();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 12.259473117009671);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(0.0, (-2037.824529995318));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply((-0.9999936192451736));
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.multiply(0.0);
      complex2.getArgument();
      complex5.equals(complex0);
      Complex complex7 = complex3.tanh();
      complex6.acos();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.divide(Double.POSITIVE_INFINITY);
      complex2.multiply(262);
      complex6.add((-1007.01751251964));
      complex1.getField();
      complex1.createComplex(1.1933437776279623E-7, 262);
      Complex complex11 = new Complex(1.0, 515.3772);
      complex7.equals(complex11);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2.818537910881676E-71);
      Complex complex2 = complex1.multiply(0.0);
      complex2.INF.getArgument();
      complex0.ZERO.tan();
      Complex.valueOf((-36.5103236847655), 0.0);
      // Undeclared exception!
      complex1.nthRoot(1312145731);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      complex2.ZERO.abs();
      Complex complex4 = complex2.subtract((-647.249850684428));
      complex4.INF.abs();
      complex4.NaN.getArgument();
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.tanh();
      Complex complex6 = complex3.reciprocal();
      complex4.ZERO.toString();
      complex6.tan();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.sin();
      complex0.abs();
      Complex complex2 = complex0.multiply(946);
      Complex complex3 = Complex.valueOf(0.9999994829463974);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.sin();
      Complex.valueOf(836.129181, (double) 946);
      complex2.log();
      complex0.acos();
      complex1.pow((double) 946);
      complex3.sin();
      complex4.tanh();
      complex6.reciprocal();
      complex2.add(complex0);
      complex2.exp();
      Complex.valueOf(5.718014056902925, 304.3);
      complex7.subtract(complex2);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2.818537910881676E-71);
      Complex complex2 = complex1.multiply(0.0);
      complex2.INF.getArgument();
      Complex complex3 = complex0.ZERO.tan();
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex1.ZERO.multiply(1.1933437776279623E-7);
      complex0.ZERO.atan();
      complex0.divide(0.0);
      Complex complex6 = complex1.multiply(2.818537910881676E-71);
      complex1.getArgument();
      object0.equals(complex5);
      complex1.tanh();
      complex3.acos();
      Complex complex7 = complex1.log();
      Complex complex8 = complex1.divide(1.1933437776279623E-7);
      Complex complex9 = complex7.multiply((-2143));
      complex9.add(1.1933437776279623E-7);
      complex9.getField();
      complex1.createComplex(1.5707963267948966, 0.14686977863311768);
      complex8.equals(complex4);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.NaN.abs();
      complex0.abs();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ONE.subtract(complex0);
      complex0.ZERO.getArgument();
      complex0.abs();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.I.hashCode();
      complex3.isInfinite();
      Complex complex5 = complex2.log();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 1783.617157);
      Complex complex7 = complex6.divide(2215.4417743186);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.pow((-2151.873308163682));
      complex4.multiply(174);
      complex9.getField();
      complex7.createComplex(2193.6124, 1783.617157);
      Object object0 = new Object();
      complex5.equals(object0);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.NaN.abs();
      complex0.abs();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex3.subtract(Double.NaN);
      Complex complex6 = complex4.tanh();
      complex1.atan();
      complex0.pow(complex2);
      Complex complex7 = complex0.sin();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.reciprocal();
      complex5.getReal();
      Complex complex10 = complex6.pow(complex0);
      complex7.isInfinite();
      complex7.log();
      complex0.divide((-696.5344977812038));
      Complex complex11 = complex9.pow((-209.3));
      complex11.multiply(4284);
      complex3.getField();
      complex2.createComplex((-3150), 2104.5);
      Object object0 = new Object();
      complex10.equals(object0);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1.2902019831221148E-269, 1783.617157);
      complex0.ZERO.sin();
      Complex complex1 = Complex.valueOf(1.2902019831221148E-269, 7.750724406578068E268);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = new Complex(1.2902019831221148E-269);
      complex0.pow(complex4);
      Complex complex5 = complex0.I.atan();
      complex5.abs();
      complex3.ZERO.toString();
      Complex complex6 = complex3.conjugate();
      complex6.NaN.divide(Double.NaN);
      Complex complex7 = complex2.ONE.tanh();
      complex7.negate();
      complex6.nthRoot(1781);
      Complex complex8 = complex1.conjugate();
      complex8.INF.multiply(complex1);
      complex2.pow(1.2902019831221148E-269);
      complex4.atan();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(304.3);
      Complex complex1 = Complex.valueOf(770.678711478, 770.678711478);
      Complex complex2 = complex1.add((-99.42464990768164));
      complex0.getArgument();
      complex2.I.subtract(complex1);
      complex0.nthRoot(2585);
      Complex complex3 = complex2.negate();
      complex3.cosh();
      Complex.valueOf((double) 2585, 469.6269);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(4609.628224711865, 4609.628224711865);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(complex0);
      complex3.subtract(complex0);
      Complex complex4 = Complex.I;
      complex4.getArgument();
      complex0.abs();
      Complex complex5 = Complex.valueOf(1.5707963267948966, 0.0);
      Complex complex6 = complex5.divide(4609.628224711865);
      complex4.hashCode();
      complex0.abs();
      complex5.toString();
      complex5.conjugate();
      complex6.multiply(4609.628224711865);
      Complex complex7 = Complex.I;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.sin();
      complex0.abs();
      Complex complex2 = complex0.multiply(946);
      Complex complex3 = Complex.valueOf(0.9999994829463974);
      complex0.equals(complex3);
      complex1.NaN.tanh();
      complex2.log();
      complex1.divide((double) 946);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.I;
      complex3.abs();
      complex1.multiply(2363);
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = Complex.ZERO;
      complex5.equals(complex3);
      complex0.tanh();
      complex4.log();
      Complex complex6 = complex2.divide(1.4198992252349854);
      Complex complex7 = complex5.multiply(37);
      complex7.getField();
      complex6.createComplex(2363, 37);
      complex6.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(304.3000000349975);
      Complex complex2 = complex0.negate();
      complex1.getField();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex1.subtract(304.3000000349975);
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex8.pow(complex4);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex7.reciprocal();
      complex6.getReal();
      Complex complex13 = complex3.pow(complex5);
      Complex complex14 = Complex.I;
      complex14.isInfinite();
      complex3.log();
      complex9.divide(0.0);
      complex9.pow(2483.887394564238);
      complex11.multiply(37);
      complex12.getField();
      complex13.createComplex(7.887051614592191E-8, (-0.5574077246549021));
      complex10.equals(complex3);
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-636.6763), (-636.6763));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex1.abs();
      Complex complex3 = complex0.divide(1.0);
      complex3.ONE.tanh();
      complex3.hashCode();
      complex1.abs();
      complex0.toString();
      Complex complex4 = complex2.conjugate();
      complex1.multiply((-4767.5221));
      complex0.subtract(complex2);
      complex4.hashCode();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-49.7173538878171));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex2.I.conjugate();
      complex4.ZERO.divide(complex0);
      Complex complex5 = Complex.valueOf((-49.7173538878171));
      complex5.acos();
      complex2.getArgument();
      complex3.exp();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1749.27457, (-1407.120733539412));
      complex0.I.abs();
      complex0.cos();
      Complex complex1 = Complex.valueOf(1749.27457, 1.0);
      Complex complex2 = complex1.reciprocal();
      complex0.sinh();
      complex0.nthRoot(3624);
      complex2.sin();
      complex2.toString();
      complex2.getReal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-49.7173538878171));
      Complex complex1 = Complex.NaN;
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.ZERO.createComplex(708.0810685528837, 708.0810685528837);
      complex0.INF.log();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex0.reciprocal();
      complex5.ZERO.readResolve();
      Complex complex6 = complex3.sqrt();
      complex1.multiply(complex4);
      complex6.multiply(1213.51515161466);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.NaN.abs();
      complex0.abs();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ONE.subtract(complex0);
      complex0.ZERO.getArgument();
      complex0.abs();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.I.hashCode();
      complex1.abs();
      complex1.toString();
      complex0.conjugate();
      complex3.ONE.multiply((-614.097));
      Complex complex5 = Complex.I;
      complex5.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.NaN.abs();
      complex0.abs();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ONE.subtract(complex0);
      complex0.ZERO.getArgument();
      complex0.abs();
      Complex complex4 = complex0.divide(Double.NaN);
      complex4.I.hashCode();
      complex1.abs();
      complex1.toString();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = new Complex((-1.0019946085859934), Double.NaN);
      Complex complex7 = complex1.subtract(complex5);
      complex7.hashCode();
      Complex complex8 = new Complex(Double.NaN);
      complex5.cos();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(547.8);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.ZERO.add((-5.148989321866988E-116));
      complex3.toString();
      Complex complex5 = complex2.multiply(619);
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex0.I.acos();
      Complex complex8 = complex2.multiply(complex1);
      complex8.NaN.multiply(547.8);
      Complex complex9 = complex2.NaN.tan();
      complex2.abs();
      complex1.pow((-3149.139032));
      Complex complex10 = complex0.I.tanh();
      complex10.atan();
      Complex.valueOf(547.8, 9.907230065250944E-8);
      complex10.INF.add((-5.148989321866988E-116));
      complex6.readResolve();
      Complex complex11 = complex0.reciprocal();
      complex0.sqrt();
      complex2.tan();
      complex7.cosh();
      complex11.multiply(619);
      complex9.subtract(complex2);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.NaN.abs();
      complex0.abs();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ONE.subtract(complex0);
      complex0.ZERO.getArgument();
      complex0.abs();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.I.hashCode();
      complex1.abs();
      complex1.toString();
      Complex complex5 = complex0.conjugate();
      complex3.ONE.multiply((-1.0019946085859934));
      Complex complex6 = complex1.subtract(complex5);
      complex6.hashCode();
      complex4.add(complex3);
      complex5.cos();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(304.3);
      Complex complex1 = complex0.ONE.tan();
      complex0.getImaginary();
      Complex.valueOf((-5993.69), 0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf((-674.65490321));
      Complex complex4 = complex3.sinh();
      complex4.I.conjugate();
      complex4.nthRoot(567);
      complex1.sin();
      Complex complex5 = Complex.valueOf((-5993.69), 1392.62463);
      complex5.toString();
      complex1.getReal();
      complex1.cosh();
      complex2.atan();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.subtract(0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.sin();
      complex0.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(946);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.valueOf(0.9999994829463974);
      complex2.equals(complex5);
      complex4.NaN.tanh();
      Complex complex6 = complex1.divide(complex3);
      complex2.log();
      complex4.divide(complex6);
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.atan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.sqrt1z();
      complex0.ZERO.hashCode();
      complex1.I.tanh();
      Complex.valueOf((-6.887556547891059E-9), (-6.887556547891059E-9));
      Complex complex2 = complex1.multiply(2105.0);
      complex2.INF.readResolve();
      complex2.I.getField();
      Complex complex3 = complex1.exp();
      complex0.toString();
      complex0.conjugate();
      complex1.toString();
      complex3.sinh();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-703.09844));
      Complex complex1 = complex0.negate();
      complex0.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex4.subtract((-166.20222));
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.pow(complex6);
      complex1.sin();
      complex1.getImaginary();
      complex3.conjugate();
      complex1.divide(20.0);
      Complex complex10 = complex8.cos();
      Complex complex11 = new Complex(1.2902019831221148E-269);
      complex0.add(complex11);
      complex6.divide(0.9999994829463974);
      Complex.valueOf(20.0, 20.0);
      complex10.tan();
      complex7.multiply(complex2);
      Complex complex12 = complex9.multiply(1);
      complex0.subtract(0.4824984669685364);
      complex1.isNaN();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = Complex.valueOf((-20.0), 1720.9289025006);
      Complex complex3 = complex2.subtract((-3800.396170323517));
      complex2.getField();
      Complex complex4 = complex2.multiply(2105459833);
      Complex.valueOf((double) 2105459833);
      complex4.getArgument();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = Complex.valueOf((-3800.396170323517), 1720.9289025006);
      complex0.getField();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.multiply(complex7);
      complex5.sqrt1z();
      Complex complex9 = complex6.atan();
      complex4.reciprocal();
      complex0.exp();
      Complex complex10 = complex9.multiply(1720.9289025006);
      complex8.pow(complex6);
      Complex complex11 = new Complex(0.0, (-20.0));
      complex10.equals(complex11);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-703.09844), (-3.1139472791083883E-8));
      Complex complex1 = complex0.subtract((-20.0));
      complex0.NaN.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.tan();
      complex0.getReal();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.acos();
      complex4.hashCode();
      complex0.toString();
      complex3.getArgument();
      complex1.exp();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-636.6763), 20.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply((-1524991327));
      Complex complex3 = Complex.valueOf(2035.80957268);
      complex0.getArgument();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf((-3118.34), 2751.9194);
      complex4.getField();
      Complex complex6 = complex0.multiply(complex5);
      complex3.sqrt1z();
      complex6.atan();
      Complex complex7 = complex2.reciprocal();
      complex1.exp();
      complex2.multiply((-636.6763));
      Complex complex8 = new Complex((-636.6763));
      Complex complex9 = Complex.NaN;
      complex1.equals(complex5);
      complex0.multiply(2085);
      complex7.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = Complex.valueOf(Double.NaN, 1.0);
      Complex complex5 = complex0.ONE.pow(complex3);
      Complex complex6 = complex5.createComplex(20.0, 8.281321669236493E188);
      complex6.tan();
      complex4.sqrt1z();
      Complex complex7 = complex0.acos();
      complex1.conjugate();
      Complex complex8 = complex7.sqrt();
      complex6.divide(794.7564777757);
      Complex complex9 = complex4.tanh();
      Complex complex10 = new Complex(Double.NaN);
      Complex complex11 = complex10.log();
      Complex complex12 = complex9.pow(Double.NaN);
      complex12.sin();
      complex8.abs();
      complex11.multiply(7);
      Complex complex13 = Complex.ONE;
      complex9.equals(complex2);
      complex2.divide(20.0);
      complex10.multiply((-1502));
      complex12.getField();
      complex6.createComplex((-4.813899778443457E-9), 49.101587912694654);
      complex7.equals("s=.>(tOVh&`~n");
      complex13.reciprocal();
      complex8.createComplex(1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.divide(1.0);
      Complex complex3 = complex0.subtract(complex1);
      complex2.log();
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex1.sqrt();
      complex0.ZERO.toString();
      Complex complex10 = complex4.reciprocal();
      complex7.getReal();
      Complex complex11 = complex3.pow(complex9);
      complex6.isInfinite();
      complex10.getImaginary();
      complex10.hashCode();
      complex11.readResolve();
      complex8.add(complex3);
      complex8.negate();
      complex1.add(complex10);
      complex1.createComplex(2263.6095903452638, (-1990.108763003234));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(559.8585);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.log();
      complex2.acos();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(20.0, 1404.27169150582);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.pow((-2407.648059982));
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex8.sin();
      complex4.tanh();
      complex7.reciprocal();
      complex4.add(complex3);
      Complex complex10 = complex8.exp();
      Complex.valueOf((-2407.648059982), 559.8585);
      complex10.subtract(complex8);
      complex10.sinh();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-703.09844), (-3.1139472791083883E-8));
      Complex complex1 = Complex.valueOf(1404.27169150582);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.subtract((-1.0));
      complex2.isNaN();
      complex3.tan();
      Complex complex4 = complex2.log();
      Complex.valueOf(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.divide(complex0);
      complex3.log();
      Complex complex6 = complex3.divide(complex4);
      complex6.atan();
      Complex complex7 = Complex.I;
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-502.4622), 0.0);
      Complex complex3 = Complex.valueOf((-1618.9174793434763));
      complex3.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(44.41);
      Complex complex6 = complex0.conjugate();
      complex6.negate();
      complex1.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.pow(1.0074354568442952E-9);
      complex5.add(complex2);
      complex2.conjugate();
      complex4.divide((-92597.49));
      complex4.log();
      complex4.abs();
      Complex complex9 = new Complex((-820.9800185546));
      complex9.add(1.0);
      complex4.divide(1.0);
      complex2.cos();
      complex8.createComplex(1175.6863, 1.0074354568442952E-9);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf((double) (-1), (double) (-1));
      Complex complex2 = complex1.multiply((-1));
      complex1.getImaginary();
      complex1.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(20.0, (-2872.7926238322234));
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.sinh();
      complex3.subtract(complex6);
      complex4.acos();
      complex2.exp();
      complex6.readResolve();
      complex0.equals(complex5);
      Complex complex7 = Complex.valueOf((-1.0), 20.0);
      Complex complex8 = complex0.add(complex7);
      Complex.valueOf(2660.0, 5910.075605624467);
      complex1.cosh();
      complex0.atan();
      complex1.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.divide(1.0);
      complex0.subtract(complex1);
      Complex complex3 = complex2.log();
      complex2.ZERO.tanh();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex3.ONE.createComplex((-1990.108763003234), (-1990.108763003234));
      Complex complex6 = complex1.INF.tan();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex0.acos();
      complex8.INF.conjugate();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex9.divide(0.0);
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex11.ONE.log();
      Complex complex13 = complex10.pow(0.0);
      Complex.valueOf(1.0);
      complex0.abs();
      complex8.getArgument();
      complex5.getImaginary();
      Object object0 = new Object();
      complex7.equals(complex12);
      complex9.tan();
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-636.6763), (-636.6763));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.tan();
      complex3.getReal();
      complex2.add(complex0);
      complex2.ONE.acos();
      complex1.I.getArgument();
      complex3.exp();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex.valueOf((-3092.25816370266), 3378.8156);
      complex2.pow(complex0);
      Complex complex4 = new Complex(2663.17724701);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex6.sqrt();
      complex8.reciprocal();
      complex7.getReal();
      Complex complex9 = complex6.pow(complex1);
      complex2.isInfinite();
      Complex complex10 = Complex.ONE;
      complex10.getImaginary();
      complex9.hashCode();
      Complex complex11 = new Complex((-1.809622142990733E-8));
      complex11.readResolve();
      complex5.add(complex9);
      complex8.negate();
      complex3.add(complex11);
      Complex complex12 = Complex.NaN;
      complex12.createComplex(1128.1363935, (-1.809622142990733E-8));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      complex0.abs();
      Complex complex1 = complex0.NaN.negate();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex1.I.reciprocal();
      complex1.divide(0.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ONE.negate();
      complex4.NaN.tanh();
      complex3.pow((-6.4772021));
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex2.conjugate();
      complex6.INF.divide((-1793.01557));
      Complex complex7 = complex6.log();
      complex6.INF.abs();
      complex5.reciprocal();
      Complex complex8 = complex4.add(complex0);
      complex3.exp();
      Complex.valueOf(0.0011832566011140168, (-1172.36356892));
      complex7.subtract(complex5);
      complex8.sinh();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.ONE.divide(complex1);
      Complex complex2 = Complex.valueOf(1.0);
      Complex.valueOf(Double.NaN, 1.0);
      Complex complex3 = complex0.ONE.pow(complex2);
      complex3.NaN.tanh();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.sqrt();
      complex6.ONE.reciprocal();
      complex5.getReal();
      complex5.I.pow(complex2);
      complex0.isInfinite();
      complex0.getImaginary();
      complex5.hashCode();
      complex4.readResolve();
      complex3.add(complex0);
      complex2.negate();
      Complex complex7 = complex0.add(complex3);
      complex7.createComplex(0.0, 3705.9826277946);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-636.6763), 20.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.tan();
      complex3.getReal();
      complex2.add(complex0);
      Complex complex4 = complex2.ONE.acos();
      complex4.ZERO.hashCode();
      complex4.I.toString();
      complex1.I.getArgument();
      complex3.exp();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex2.divide(complex1);
      complex2.INF.sin();
      Complex complex4 = complex2.I.cosh();
      complex4.ZERO.sin();
      Complex complex5 = complex1.I.createComplex(0.3333333333333333, 0.3333333333333333);
      Complex complex6 = complex5.NaN.multiply(0);
      complex0.getReal();
      complex1.I.tanh();
      Complex complex7 = complex1.divide(3166.1);
      complex0.abs();
      complex7.INF.tanh();
      complex7.NaN.pow(complex6);
      complex6.add(3166.1);
      complex7.log();
      complex1.cosh();
      complex3.subtract(complex2);
      complex3.createComplex(3166.1, (-2169.2615563695117));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2593.2382709699);
      complex0.INF.log();
      Complex complex1 = complex0.INF.sqrt();
      complex1.ONE.hashCode();
      Complex complex2 = Complex.valueOf(2593.2382709699);
      Complex complex3 = complex2.tanh();
      complex2.toString();
      Complex complex4 = Complex.valueOf(2.0);
      complex3.acos();
      complex4.getArgument();
      Complex complex5 = complex0.log();
      complex5.ONE.pow(2.0);
      complex5.NaN.abs();
      complex0.tan();
      complex0.equals(complex5);
      Complex.valueOf(1.0207195281982422);
      double double0 = 275.44192938;
      int int0 = (-737);
      try { 
        complex0.NaN.nthRoot((-737));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -737
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex2.divide(2.0);
      complex2.ONE.sinh();
      complex4.ZERO.readResolve();
      complex4.readResolve();
      Complex complex5 = complex3.negate();
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = Complex.valueOf(1.2902019831221148E-269);
      Complex complex3 = complex2.negate();
      complex3.NaN.getField();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex5.INF.cosh();
      complex5.NaN.add(complex0);
      Complex complex7 = complex1.subtract((-166.20222));
      Complex complex8 = complex1.INF.tanh();
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex9.NaN.pow(complex4);
      Complex complex11 = complex10.ZERO.sin();
      complex7.getImaginary();
      complex8.ZERO.conjugate();
      complex9.INF.divide(Double.NaN);
      complex0.ONE.cos();
      Complex complex12 = complex2.add(complex7);
      complex4.NaN.divide((-166.20222));
      Complex.valueOf((-1.0), Double.NaN);
      complex9.tan();
      complex6.multiply(complex0);
      complex1.multiply(1);
      complex6.subtract((-1679.8));
      complex12.isNaN();
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sin();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.add(2642.47309635);
      Complex complex3 = complex1.log();
      complex3.hashCode();
      complex0.tan();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1690.24985626));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.add(1.0);
      complex2.INF.getArgument();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.sqrt();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex2.I.multiply(272.3163947992731);
      complex1.isNaN();
      complex2.isInfinite();
      Complex complex6 = complex0.createComplex(0.0, 1202.702);
      complex6.NaN.tanh();
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.valueOf(1.9144186973571777, (-1044.47));
      complex7.tan();
      complex3.getReal();
      complex8.getReal();
      complex5.isNaN();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1885.829), (-1292.368));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.NaN.pow(20.0);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex5.INF.add((-20.0));
      complex0.ZERO.atan();
      complex0.ZERO.sinh();
      complex3.tanh();
      Complex complex7 = Complex.valueOf(4441.402631, 1750.0);
      complex2.getField();
      complex7.readResolve();
      complex6.exp();
      complex0.divide(4245.26018);
      complex4.pow((-2.3085653185818848E-7));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex3.ONE.negate();
      complex4.NaN.negate();
      Complex complex5 = complex1.ZERO.subtract(0.0);
      complex5.ZERO.toString();
      Complex complex6 = complex0.NaN.subtract(complex1);
      Complex complex7 = complex5.ZERO.sin();
      Object object0 = new Object();
      complex0.equals(object0);
      complex2.getReal();
      Complex complex8 = complex0.divide(complex2);
      complex6.readResolve();
      Complex complex9 = Complex.valueOf((-335.443483386), 0.0);
      Complex complex10 = complex5.pow((-335.443483386));
      complex10.ONE.tan();
      complex10.INF.conjugate();
      complex2.getArgument();
      complex8.multiply(461);
      complex7.createComplex((-302.07041), 0.0);
      Complex complex11 = complex9.multiply(922);
      Complex complex12 = complex6.createComplex(Double.NaN, 0.0);
      complex12.INF.toString();
      complex1.log();
      complex7.reciprocal();
      complex9.cosh();
      complex11.sinh();
      complex1.tanh();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3257.408551117671, 3257.408551117671);
      Complex complex1 = complex0.asin();
      complex1.toString();
      Complex complex2 = complex0.multiply((-2038));
      Complex complex3 = Complex.valueOf(3257.408551117671);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.divide((-20.0));
      complex5.I.abs();
      complex2.acos();
      complex4.hashCode();
      Complex complex6 = complex5.divide(complex2);
      complex6.NaN.acos();
      Complex complex7 = complex5.tanh();
      complex1.exp();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.sin();
      complex4.asin();
      complex2.ZERO.sqrt();
      Complex complex10 = complex7.cosh();
      complex10.subtract(complex3);
      complex2.asin();
      Complex complex11 = complex7.multiply(complex9);
      complex11.ONE.toString();
      complex7.multiply(513.5130300269);
      complex8.tan();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.multiply((-1));
      complex0.getImaginary();
      complex0.abs();
      complex0.INF.acos();
      double double0 = 2660.0;
      Complex.valueOf(71.78308160467, 2660.0);
      complex0.reciprocal();
      complex0.ONE.sinh();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      complex0.abs();
      Complex complex1 = complex0.NaN.negate();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex1.I.reciprocal();
      complex1.divide(0.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ONE.negate();
      complex4.NaN.tanh();
      complex3.pow((-6.4772021));
      complex2.add(complex4);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.INF.divide((-1793.01557));
      Complex complex7 = complex5.log();
      complex5.INF.abs();
      complex7.I.add((-1172.36356892));
      complex6.divide((-1793.01557));
      Complex complex8 = complex7.cos();
      complex8.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = new Complex(7.436036590244714E-8, 20.0);
      Complex complex2 = complex0.ZERO.tanh();
      complex2.INF.getArgument();
      Complex complex3 = complex0.divide(complex1);
      Complex.valueOf(20.0);
      Complex complex4 = complex1.NaN.multiply(7.436036590244714E-8);
      complex3.INF.readResolve();
      Complex complex5 = complex1.cosh();
      complex5.ONE.pow(complex4);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.add(7.436036590244714E-8);
      Complex complex8 = complex7.subtract(7.436036590244714E-8);
      Complex complex9 = complex6.ONE.sqrt();
      complex9.I.nthRoot(155);
      Complex complex10 = complex1.add(complex8);
      complex4.NaN.createComplex(20.0, (-438.6049));
      complex10.INF.pow(20.0);
      complex3.abs();
      complex4.getField();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1207.826));
      complex0.hashCode();
      complex0.getReal();
      Complex complex1 = Complex.valueOf(Double.NaN, 0.0);
      Complex.valueOf(1574.019);
      complex0.multiply(2002);
      complex1.sqrt1z();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ONE.tanh();
      complex0.NaN.multiply(1);
      complex3.ZERO.sin();
      Complex complex4 = complex2.multiply(0);
      complex4.NaN.tanh();
      complex1.getField();
      complex0.multiply((-968));
      try { 
        complex0.nthRoot((-968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -968
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(2984);
      Complex complex2 = complex1.I.createComplex(1.0707499980926514, 2984);
      Complex complex3 = complex0.I.createComplex(0.0, 0.0);
      complex3.subtract(complex0);
      Complex complex4 = complex3.NaN.divide(complex1);
      complex4.INF.pow(1.0707499980926514);
      complex2.ONE.hashCode();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.divide(complex2);
      complex6.ZERO.getArgument();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.I.sqrt1z();
      complex8.NaN.reciprocal();
      complex8.NaN.sin();
      complex6.ONE.cos();
      Complex complex9 = complex1.add(693.2196);
      Complex complex10 = complex9.INF.multiply(2984);
      complex10.I.cos();
      complex1.negate();
      complex5.add(0.0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      complex0.isNaN();
      complex0.ONE.getArgument();
      complex0.hashCode();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = Complex.valueOf(1.122932337832262E-7);
      Complex complex4 = complex3.INF.cos();
      complex4.INF.cos();
      Complex complex5 = Complex.valueOf(1.122932337832262E-7, (-2832.0326026800976));
      complex1.ZERO.sin();
      complex2.INF.multiply(497);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex6.createComplex(0.0, (-4.6343));
      Complex complex9 = Complex.ZERO;
      complex8.ZERO.pow(complex9);
      complex8.ONE.reciprocal();
      complex7.acos();
      complex7.ONE.toString();
      complex7.cos();
      complex6.sqrt();
      complex7.log();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.acos();
      complex1.I.add(complex0);
      Complex complex2 = new Complex(0.0, 0.0);
      complex2.ZERO.getField();
      Complex complex3 = complex0.subtract(complex2);
      complex3.NaN.toString();
      Complex complex4 = complex0.ONE.sqrt();
      complex2.ONE.multiply((-2349));
      complex4.NaN.multiply((-7.204247881190918E-283));
      Complex complex5 = complex3.I.pow(0.0);
      Complex complex6 = complex5.INF.exp();
      complex0.toString();
      Complex complex7 = complex0.subtract(complex4);
      complex4.cosh();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.atan();
      complex8.asin();
      complex8.I.sin();
      Complex complex9 = complex2.subtract(complex8);
      complex7.toString();
      complex2.subtract((-1793.08983));
      Complex complex10 = complex6.cosh();
      complex10.pow((-1.6990896855901115E-55));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.I.multiply(1091);
      Complex complex2 = complex1.I.pow(complex0);
      complex2.ZERO.nthRoot(1091);
      complex2.ZERO.multiply(complex1);
      complex2.I.getField();
      Complex complex3 = Complex.valueOf(1.0, 1.0);
      Complex complex4 = complex3.I.cosh();
      complex4.INF.divide(1.0);
      Complex complex5 = complex4.ZERO.cosh();
      complex3.I.abs();
      Complex complex6 = complex3.NaN.divide(1.0294301092654604E-8);
      Complex complex7 = complex0.atan();
      complex7.asin();
      complex7.readResolve();
      Complex complex8 = complex7.subtract(3739.9581808);
      Complex complex9 = complex8.ZERO.acos();
      complex3.ONE.sinh();
      Complex complex10 = complex8.subtract(complex5);
      complex3.acos();
      complex6.tan();
      Complex complex11 = complex8.tan();
      complex10.acos();
      complex11.sinh();
      Complex.valueOf(1.0);
      complex9.exp();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.INF.subtract(0.0);
      complex0.isNaN();
      complex0.tan();
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.NaN.divide(complex2);
      complex5.log();
      complex4.divide(complex2);
      complex3.atan();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ONE.atan();
      complex0.getField();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex4.multiply(0.0);
      complex2.I.atan();
      Complex complex6 = complex2.INF.pow(1.1509928703308105);
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex1.INF.multiply(complex2);
      Complex complex9 = complex8.I.tanh();
      complex3.isInfinite();
      complex0.I.atan();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex1.ZERO.multiply(complex7);
      Complex complex12 = complex0.add(complex2);
      complex11.sin();
      complex12.equals("");
      complex11.getField();
      Complex complex13 = complex10.pow(0.0);
      Complex complex14 = complex10.log();
      complex2.equals(complex13);
      complex14.nthRoot(2003);
      complex9.readResolve();
      complex5.atan();
      Complex.valueOf(0.0, (-1830.6183));
      Complex.valueOf(3250.998701705105);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-703.09844), (-3.1139472791083883E-8));
      Complex complex1 = complex0.subtract((-20.0));
      complex0.NaN.getField();
      complex1.multiply(525);
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.ZERO.getArgument();
      Complex complex3 = complex1.INF.sqrt1z();
      Complex.valueOf((-3441.8402582), (-3.1139472791083883E-8));
      complex3.getField();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.atan();
      complex5.reciprocal();
      Complex complex7 = complex6.exp();
      complex7.INF.multiply(0.0);
      complex0.pow(complex3);
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.subtract(0.0);
      Complex complex3 = complex1.NaN.atan();
      complex3.INF.sin();
      Complex complex4 = complex0.multiply(complex1);
      complex4.ZERO.multiply(complex2);
      Complex.valueOf(0.0, 0.0);
      complex3.nthRoot(2703);
      Complex complex5 = Complex.I;
      complex5.INF.pow(0.0);
      Complex complex6 = Complex.valueOf(1.701840523821621E-167);
      complex1.equals(complex5);
      Complex complex7 = Complex.valueOf((-1854.6038289204516));
      complex1.getField();
      Complex complex8 = complex0.sqrt();
      complex8.negate();
      Complex.valueOf(0.0);
      complex3.ONE.pow((-525.8767));
      complex8.multiply(1);
      Complex complex9 = complex3.add((-863.62437));
      complex9.ZERO.tan();
      complex6.toString();
      complex5.tanh();
      complex7.hashCode();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(917.667626151541);
      Complex complex1 = complex0.divide((-780.99389682724));
      complex0.getArgument();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.sinh();
      complex2.INF.multiply(complex3);
      Complex complex4 = Complex.valueOf(2079.9, 917.667626151541);
      complex3.I.subtract(complex1);
      Complex complex5 = complex2.multiply(complex1);
      complex5.ZERO.sqrt();
      complex1.nthRoot(643);
      Complex complex6 = complex4.tanh();
      complex3.getField();
      complex6.isInfinite();
      complex6.getArgument();
      complex4.NaN.getField();
      complex1.pow((-392.14378949));
      Complex complex7 = complex4.pow(0.0);
      complex7.I.log();
      complex7.sqrt1z();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(304.3);
      Complex complex1 = complex0.ONE.tan();
      complex0.getImaginary();
      complex0.createComplex(0.1710275411605835, Double.POSITIVE_INFINITY);
      complex0.asin();
      complex1.add((-313.30533105));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.divide(1.0);
      complex0.subtract(complex1);
      Complex complex3 = complex2.log();
      complex2.ZERO.tanh();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex3.ONE.createComplex((-1990.108763003234), (-1990.108763003234));
      Complex complex6 = complex1.INF.tan();
      complex6.sqrt1z();
      Complex complex7 = complex0.acos();
      complex7.INF.conjugate();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex8.divide(0.0);
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex10.ONE.log();
      complex9.pow(0.0);
      Complex complex12 = complex10.sin();
      complex0.abs();
      complex9.multiply((-1502));
      Complex complex13 = Complex.ONE;
      complex4.equals(complex13);
      complex12.divide(0.0);
      complex5.multiply((-1751));
      complex11.getField();
      complex6.createComplex(0.0, 0.0);
      complex12.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.ZERO.subtract((-2558.299937525077));
      complex1.I.getArgument();
      Complex complex3 = complex0.subtract(2105.07718);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.ZERO.cosh();
      complex4.I.getArgument();
      Complex complex6 = complex0.reciprocal();
      complex6.INF.log();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex8.INF.divide(1.5707963267948966);
      complex6.ONE.abs();
      complex4.abs();
      complex5.cosh();
      Complex complex10 = complex5.negate();
      complex4.hashCode();
      Complex complex11 = complex5.reciprocal();
      complex11.I.cosh();
      complex10.NaN.toString();
      complex5.readResolve();
      complex10.isNaN();
      complex11.sin();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(1.0);
      complex9.acos();
      complex1.sqrt();
      complex3.divide(960.2820332);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 3.973222981713661E240;
      Complex complex1 = new Complex(3.973222981713661E240, (-2611.279480281412));
      complex0.INF.pow(complex1);
      try { 
        complex0.nthRoot((-2578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,578
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.I.acos();
      complex5.ONE.sinh();
      Complex.valueOf(2837.544873859);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.ONE.tanh();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex3.createComplex(0.0, 0.38574057817459106);
      complex9.NaN.subtract(0.0);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex2.multiply(complex3);
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex12.NaN.sinh();
      Complex complex14 = complex8.INF.subtract(complex0);
      assertTrue(complex14.isInfinite());
      
      complex1.hashCode();
      Complex complex15 = complex3.asin();
      Complex complex16 = complex15.NaN.add(complex11);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex10));
      
      Complex complex17 = complex5.atan();
      Complex complex18 = complex7.negate();
      Complex complex19 = complex18.multiply((-2634));
      assertEquals(2006.0390067874846, complex19.getReal(), 0.01);
      
      Complex complex20 = complex4.add((double) (-2634));
      Complex complex21 = complex20.ONE.multiply(702);
      complex15.tan();
      Complex complex22 = complex17.divide(complex8);
      assertEquals((-0.22101690190093917), complex17.getImaginary(), 0.01);
      assertSame(complex8, complex13);
      
      Complex complex23 = complex21.pow(Double.POSITIVE_INFINITY);
      assertSame(complex20, complex22);
      assertSame(complex4, complex11);
      assertNotSame(complex23, complex16);
      assertEquals(0.0, complex21.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 1;
      complex0.I.nthRoot(1);
      complex0.NaN.acos();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1749.27457, (-1407.120733539412));
      complex0.I.abs();
      Complex complex1 = complex0.cos();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf(4632.1986733568);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.acos();
      complex3.getField();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.ZERO.multiply((-5483));
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.subtract(complex5);
      assertEquals(0.7615941559557649, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.log();
      complex5.getArgument();
      complex8.getImaginary();
      assertSame(complex8, complex3);
      
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex9 = complex0.tan();
      assertSame(complex9, complex4);
      
      Complex complex10 = complex1.tan();
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.isInfinite());
      assertEquals(0.9534903170187385, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double double0 = (-1358.0);
      Complex complex0 = new Complex((-1358.0));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.INF.pow((-1358.0));
      Complex complex5 = complex3.tanh();
      complex5.I.add(3250.456879);
      Complex complex6 = complex3.reciprocal();
      double double1 = 0.0;
      complex6.ONE.toString();
      complex6.ZERO.multiply(0.0);
      Complex complex7 = complex1.createComplex((-1358.0), (-1358.0));
      complex2.ZERO.cos();
      complex1.toString();
      complex4.subtract(complex6);
      complex7.add(complex1);
      complex4.sin();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3021.124615803166);
      assertFalse(complex1.isInfinite());
      assertEquals(3021.124615803166, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex0.NaN.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
      
      Complex complex2 = complex0.negate();
      assertEquals(-0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.cosh();
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }
}
