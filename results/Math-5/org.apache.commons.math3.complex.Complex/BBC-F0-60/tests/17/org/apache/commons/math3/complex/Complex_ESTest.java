/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:51:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-1.0), 3.665820371396835E-77);
      Complex complex2 = new Complex(7.175096392165733E-66, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.multiply(complex2);
      complex1.log();
      complex3.sqrt();
      complex0.subtract(3.665820371396835E-77);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.I.negate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.tanh();
      complex0.pow(complex1);
      complex2.tan();
      Complex complex5 = complex3.conjugate();
      complex5.I.multiply(3487);
      complex3.I.acos();
      Complex complex6 = complex5.I.pow(complex4);
      Complex complex7 = complex3.multiply(675);
      complex7.toString();
      complex7.NaN.readResolve();
      complex3.sin();
      complex0.readResolve();
      complex3.divide((double) 675);
      Complex complex8 = complex6.sqrt1z();
      complex8.pow(complex3);
      complex0.readResolve();
      complex6.subtract((-0.7240616609663069));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex.valueOf(0.0, 3.665820371396835E-77);
      Complex complex0 = new Complex(3.665820371396835E-77, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(5.264388476949737E-217, 5.264388476949737E-217);
      Complex complex2 = Complex.valueOf(3.665820371396835E-77, 3.665820371396835E-77);
      complex1.log();
      Complex complex3 = complex2.reciprocal();
      complex1.readResolve();
      complex1.log();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex0.pow(complex1);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.INF.multiply(1391);
      Complex complex2 = complex1.multiply(1391);
      Complex complex3 = complex0.log();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 3.665820371396835E-77);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex.valueOf(3.665820371396835E-77, 0.21460183660255172);
      complex3.I.acos();
      Object object0 = complex2.ZERO.readResolve();
      ((Complex) object0).NaN.readResolve();
      Complex complex4 = complex1.I.conjugate();
      complex2.toString();
      Complex complex5 = new Complex(1.3130352854993315);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = new Complex(0.0);
      Complex complex9 = Complex.INF;
      complex1.I.exp();
      complex2.tanh();
      Complex complex10 = complex8.cos();
      complex7.pow(complex6);
      complex7.toString();
      complex10.getArgument();
      complex2.asin();
      complex9.I.nthRoot(1740);
      complex2.getReal();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(2309.28211217, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      complex3.I.subtract(complex0);
      Complex complex4 = complex0.createComplex(2309.28211217, 2309.28211217);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ONE.pow(complex0);
      complex8.toString();
      complex0.pow(complex1);
      Complex complex9 = complex5.negate();
      complex6.pow(2309.28211217);
      complex0.divide(complex6);
      Complex complex10 = complex0.subtract(complex2);
      Complex complex11 = complex7.divide(Double.POSITIVE_INFINITY);
      complex11.ONE.getField();
      complex5.tanh();
      Complex complex12 = complex7.sinh();
      complex12.INF.tan();
      complex10.toString();
      complex7.acos();
      complex0.multiply(complex9);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(86.25395, 86.25395);
      complex1.log();
      Complex complex3 = complex2.divide(86.25395);
      complex1.readResolve();
      Complex complex4 = complex1.conjugate();
      complex1.toString();
      Complex complex5 = new Complex(112.3330959692262);
      complex0.asin();
      complex2.subtract((-3340.35993083309));
      Complex complex6 = new Complex((-31.820972290257426));
      Complex complex7 = Complex.INF;
      Complex complex8 = new Complex(2846.299169);
      complex8.tanh();
      complex7.cos();
      complex3.pow(complex4);
      Complex complex9 = new Complex((-244.176), 86.25395);
      complex9.multiply(12);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.getField();
      Complex complex1 = complex0.INF.log();
      complex0.getField();
      Complex complex2 = complex0.sin();
      complex2.INF.nthRoot(531);
      complex2.I.cos();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.tanh();
      complex6.ONE.toString();
      Complex complex7 = complex3.sqrt1z();
      complex7.ONE.reciprocal();
      complex1.getField();
      Complex complex8 = complex2.log();
      Complex complex9 = complex0.sqrt1z();
      complex9.reciprocal();
      complex8.abs();
      Complex complex10 = complex3.sin();
      complex10.abs();
      complex3.pow((-995.6601230981535));
      complex7.getField();
      Complex complex11 = Complex.valueOf((double) 531, 2.6367639658206183E288);
      Complex complex12 = complex10.log();
      complex12.INF.multiply(1426);
      complex4.multiply(531);
      complex11.cos();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 3.665820371396835E-77);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      complex1.ZERO.reciprocal();
      complex2.ZERO.readResolve();
      complex1.I.conjugate();
      complex2.toString();
      Complex complex3 = new Complex(1.3130352854993315);
      complex3.asin();
      complex1.subtract(0.0);
      Complex complex4 = new Complex(190.865);
      Complex complex5 = Complex.INF;
      complex4.tanh();
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      complex1.ZERO.abs();
      complex1.multiply(124);
      Complex.valueOf(Double.NaN, 1.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 3.665820371396835E-77);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.log();
      complex3.ZERO.readResolve();
      Complex complex4 = complex1.I.conjugate();
      complex3.toString();
      Complex complex5 = new Complex(1.3130352854993315);
      complex5.asin();
      complex1.subtract(0.0);
      complex0.divide(1.0);
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      complex1.ZERO.reciprocal();
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.I.conjugate();
      complex3.sqrt1z();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-5.730898606435436E-9));
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.createComplex((-766.5138786658), (-20.0));
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.subtract((-766.5138786658));
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.ZERO;
      complex4.divide((-20.0));
      Object object0 = new Object();
      complex3.equals(complex1);
      complex2.tan();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 3.665820371396835E-77);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex4.sqrt();
      complex2.nthRoot(2434);
      Complex complex6 = new Complex(0.0);
      complex6.add(complex3);
      complex5.divide((double) 2434);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((double) 7, 20.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.subtract(Double.NaN);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(4696.429299017935);
      complex2.multiply(complex1);
      Complex complex4 = new Complex(4696.429299017935);
      complex1.ZERO.nthRoot(221);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.cos();
      complex1.pow(complex5);
      complex1.toString();
      complex2.getArgument();
      Complex complex7 = complex4.asin();
      complex6.getReal();
      complex4.add(0.027712143770207958);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2144.01365));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.log();
      complex2.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.conjugate();
      complex4.toString();
      Complex complex6 = new Complex(1.313035285499);
      complex6.asin();
      Complex complex7 = complex4.log();
      complex2.subtract(complex4);
      Complex complex8 = Complex.valueOf(1916.2718326592);
      complex8.multiply((-2144.01365));
      Complex complex9 = Complex.valueOf((-1894.06258197), (-414.0));
      complex9.getArgument();
      Complex.valueOf((-414.0), (-414.0));
      Complex.valueOf((-3753.2));
      Complex complex10 = complex5.subtract(Double.POSITIVE_INFINITY);
      complex6.ONE.exp();
      Complex complex11 = complex4.divide(complex2);
      complex11.cos();
      complex10.pow(complex7);
      Complex complex12 = complex4.tanh();
      complex6.toString();
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.createComplex((-766.5138786658), Double.POSITIVE_INFINITY);
      complex3.ZERO.sqrt();
      complex3.NaN.nthRoot(1158);
      complex1.add(complex2);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex2.equals((Object) null);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.INF.conjugate();
      complex2.negate();
      Complex complex3 = complex2.multiply((-3703));
      Complex complex4 = complex3.I.pow((-2957.347168351358));
      complex4.I.asin();
      Complex complex5 = complex0.sqrt();
      Complex.valueOf((-426.66354222));
      complex5.sqrt();
      complex0.toString();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1265.19062), (-1265.19062));
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.ZERO.nthRoot(4);
      Complex.valueOf((-1343.5));
      Complex complex2 = complex0.multiply((-1343.5));
      complex1.getArgument();
      Complex complex3 = Complex.valueOf((-1265.19062), 4890.49579113);
      Complex complex4 = complex3.subtract((-248.6115712));
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.subtract(complex0);
      Complex complex8 = Complex.valueOf((-414.0));
      complex8.multiply((-117.58751));
      complex3.getArgument();
      Complex.valueOf((-1.3070436427679952E-53), (-117.58751));
      Complex complex9 = Complex.valueOf((-3163.38037), 6.857987584726934E-4);
      complex7.subtract(998.5196716746);
      Complex complex10 = complex9.divide(complex4);
      complex10.cos();
      complex4.pow(complex5);
      Complex complex11 = complex5.tanh();
      complex11.toString();
      complex6.log();
      complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.1281392448732278E-6, Double.NaN);
      Complex complex2 = complex1.pow(1.1281392448732278E-6);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.sqrt();
      complex3.multiply(complex2);
      complex5.nthRoot(1158);
      Complex complex6 = new Complex(1265.19062);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(3.665820371396835E-77);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex1.ZERO.reciprocal();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      Complex complex4 = complex1.I.conjugate();
      complex2.toString();
      Complex complex5 = new Complex(1.3130352854993315);
      Complex complex6 = new Complex((-7.630957994128623E-8));
      Complex complex7 = new Complex(755.9986);
      complex7.multiply(complex3);
      Complex complex8 = new Complex(0.0);
      complex4.createComplex(0.0, 1.3130352854993315);
      complex7.divide((double) 301);
      complex2.equals(complex3);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.createComplex((-766.5138786658), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex2.multiply(complex1);
      complex2.pow(complex5);
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.ZERO;
      complex7.toString();
      complex6.getArgument();
      Complex complex8 = complex7.asin();
      complex8.getReal();
      complex4.tanh();
      complex7.hashCode();
      complex3.asin();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(3.665820371396835E-77);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.log();
      complex1.ZERO.reciprocal();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      Complex complex5 = complex1.I.conjugate();
      complex3.toString();
      Complex complex6 = new Complex(1.3130352854993315);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex1.log();
      complex5.subtract(complex4);
      Complex.valueOf(0.0);
      Complex complex9 = complex1.multiply((-414.0));
      complex1.getArgument();
      Complex complex10 = Complex.valueOf(0.0, (double) 301);
      complex9.subtract(0.0);
      Complex complex11 = complex0.divide(complex5);
      complex11.cos();
      complex8.pow(complex10);
      complex7.tanh();
      Complex complex12 = Complex.valueOf(737.0, (-918.0));
      complex12.toString();
      complex10.divide(96.22445);
      Complex.valueOf(1076.89508132);
      complex5.exp();
      Complex complex13 = Complex.NaN;
      complex13.sqrt();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(493.95427570121);
      Complex complex1 = complex0.I.subtract(493.95427570121);
      Complex complex2 = complex1.conjugate();
      complex0.I.atan();
      complex0.I.hashCode();
      complex1.getField();
      complex2.NaN.readResolve();
      Complex complex3 = complex1.createComplex((-3054927.1326091816), (-3054927.1326091816));
      Complex complex4 = complex2.divide(493.95427570121);
      complex4.isNaN();
      complex3.tan();
      complex1.divide(493.95427570121);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(Double.NaN);
      complex0.subtract(0.0);
      Complex complex2 = complex0.conjugate();
      complex1.atan();
      complex1.hashCode();
      complex2.getField();
      Complex complex3 = Complex.valueOf(916.504504701488);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(3.665820371396835E-77);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.INF;
      complex4.sqrt();
      Complex complex5 = Complex.NaN;
      complex2.nthRoot(301);
      complex3.divide(0.0);
      Complex.valueOf(3.665820371396835E-77);
      Complex.valueOf((-1389.7574174241445), 1509.234);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(493.95427570121);
      Complex complex1 = complex0.I.subtract(493.95427570121);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.I.atan();
      complex0.I.hashCode();
      complex1.getField();
      complex1.createComplex((-3054927.1326091816), (-3054927.1326091816));
      complex2.divide(493.95427570121);
      complex1.equals(complex3);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.asin();
      complex2.ZERO.hashCode();
      complex2.NaN.readResolve();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex4.NaN.acos();
      complex4.ZERO.reciprocal();
      complex0.ONE.pow(complex5);
      Complex complex7 = complex6.I.pow(2462.3795);
      Complex complex8 = complex6.ZERO.reciprocal();
      Complex complex9 = complex4.ONE.negate();
      Complex complex10 = complex1.exp();
      complex10.NaN.atan();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex1.multiply((-2048.91406));
      complex0.reciprocal();
      complex8.toString();
      Complex complex13 = complex11.divide(complex0);
      Complex complex14 = complex13.ZERO.sin();
      complex14.ONE.add(complex3);
      Complex.valueOf((-1687.6807));
      complex1.toString();
      complex5.multiply(complex9);
      complex6.subtract(90602.0);
      Complex complex15 = complex7.atan();
      complex4.add((-2048.91406));
      Complex complex16 = Complex.valueOf(2462.3795);
      complex16.I.pow(complex10);
      complex2.createComplex((-1829.465595114219), 90602.0);
      complex15.getImaginary();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1265.19062), (-1265.19062));
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.ZERO.nthRoot(1);
      complex0.createComplex(1, 394.16144742354);
      Complex complex2 = complex1.divide(Double.NaN);
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex2.pow(0.3817485570907593);
      Complex complex4 = complex0.subtract((-1.9054827792903468E-8));
      complex1.subtract(2.48754671923682E-4);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex0.asin();
      complex7.reciprocal();
      complex0.getField();
      complex4.hashCode();
      complex0.conjugate();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex8.sin();
      complex10.pow(0.3817485570907593);
      Complex complex11 = complex3.cos();
      complex9.hashCode();
      Complex complex12 = complex4.pow(complex11);
      complex0.cosh();
      Complex complex13 = complex1.pow(complex12);
      complex10.tanh();
      complex8.sqrt();
      complex13.add(complex7);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1265.19062), (-1265.19062));
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.ZERO.nthRoot(1);
      Complex.valueOf((-1343.5));
      Complex complex2 = complex0.multiply((-1343.5));
      complex1.getArgument();
      Complex complex3 = Complex.valueOf((-1265.19062), 4890.49579113);
      Complex complex4 = complex3.subtract((-248.6115712));
      complex2.divide(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.tanh();
      complex3.cos();
      Complex complex7 = complex2.pow(complex4);
      Complex complex8 = complex6.tanh();
      complex3.toString();
      complex7.getArgument();
      complex8.asin();
      complex1.getReal();
      Complex complex9 = complex0.multiply(3700);
      complex1.tanh();
      complex3.hashCode();
      complex2.asin();
      Complex complex10 = complex5.exp();
      complex10.multiply(1);
      complex9.pow((-1265.19062));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1712.011);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.INF.subtract(complex1);
      complex0.getField();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.sinh();
      complex4.sin();
      complex1.pow(1712.011);
      Complex complex6 = complex3.cos();
      complex6.ONE.sinh();
      complex1.hashCode();
      complex6.pow(complex0);
      complex5.cosh();
      complex2.pow(complex1);
      complex3.tanh();
      Complex complex7 = complex2.sqrt();
      complex4.add(complex7);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-20.0));
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf(1.7482123374938965, 0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex1.toString();
      complex4.ZERO.add(complex2);
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex3.subtract(complex2);
      Complex complex9 = new Complex(1.0);
      complex8.multiply(complex7);
      complex7.pow(complex1);
      complex0.createComplex(1.0, 0.0);
      complex5.divide(7.957037517331382E-8);
      complex7.equals("(1.0, 0.0)");
      Complex complex10 = Complex.valueOf((-414.0), (-414.0));
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1265.19062), (-1265.19062));
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.ZERO.nthRoot(1);
      Complex.valueOf((-1343.5));
      Complex complex2 = complex0.multiply((-1343.5));
      complex1.getArgument();
      Complex complex3 = Complex.valueOf((-1265.19062), 4890.49579113);
      Complex complex4 = complex3.subtract((-248.6115712));
      Complex complex5 = Complex.valueOf((-248.6115712));
      Complex complex6 = complex4.multiply(0.0);
      complex5.ONE.multiply(complex3);
      complex4.getArgument();
      Complex complex7 = Complex.valueOf(1.7757459859405442, 4890.49579113);
      Complex complex8 = complex6.subtract(Double.POSITIVE_INFINITY);
      complex4.divide(complex0);
      Complex complex9 = complex7.cos();
      Complex complex10 = complex9.pow(complex8);
      Complex complex11 = complex1.tanh();
      Complex complex12 = Complex.ZERO;
      complex12.toString();
      complex11.getArgument();
      complex10.asin();
      complex5.getReal();
      complex7.multiply(139);
      complex2.tanh();
      complex9.hashCode();
      complex7.asin();
      complex0.exp();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1265.19062), (-1265.19062));
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.reciprocal();
      complex0.readResolve();
      Complex complex5 = complex1.conjugate();
      complex5.negate();
      complex0.sinh();
      Complex complex6 = complex3.multiply(1561296243);
      complex2.getImaginary();
      Complex complex7 = complex5.divide((double) 1561296243);
      Complex complex8 = Complex.valueOf(4696.429299017935);
      Complex complex9 = complex8.tan();
      complex9.toString();
      complex7.tanh();
      complex4.readResolve();
      complex6.hashCode();
      complex1.cosh();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.tanh();
      complex10.readResolve();
      complex2.getImaginary();
      complex11.sqrt();
      complex4.pow((double) 301);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(3.665820371396835E-77);
      complex0.nthRoot(946);
      Complex complex2 = Complex.valueOf((-1343.5));
      Complex complex3 = complex2.multiply(3.665820371396835E-77);
      complex2.getArgument();
      Complex complex4 = Complex.valueOf(31.59453995403961, 0.0);
      Complex complex5 = complex3.subtract(31.59453995403961);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.tanh();
      complex1.cos();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.pow(complex6);
      complex9.tanh();
      complex6.toString();
      complex7.getArgument();
      complex0.asin();
      complex10.getReal();
      complex0.multiply(997460889);
      Complex complex11 = complex2.tanh();
      complex8.hashCode();
      complex11.asin();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = new Complex(4696.429299017935);
      complex2.multiply(complex1);
      complex3.pow(complex1);
      Complex complex4 = new Complex(4696.429299017935);
      Complex complex5 = complex4.createComplex(4696.429299017935, 4696.429299017935);
      complex3.divide(773.67);
      complex4.equals(complex3);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-555.56873), 29.172584894380215);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.createComplex((-489.67068162), (-555.56873));
      Complex complex4 = Complex.valueOf((-489.67068162));
      Complex complex5 = complex4.sqrt();
      complex4.multiply(complex5);
      complex3.nthRoot(950);
      complex0.divide((-1.0));
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.reciprocal();
      complex3.readResolve();
      complex1.conjugate();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex5.multiply(301);
      complex2.getImaginary();
      complex4.divide((-2395.91159334));
      complex0.tan();
      complex6.toString();
      Complex complex8 = complex5.tanh();
      complex8.readResolve();
      complex7.hashCode();
      complex0.cosh();
      complex0.tanh();
      complex4.readResolve();
      complex5.getImaginary();
      Complex complex9 = Complex.INF;
      complex8.pow((-1.0174221754786828E13));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(493.95427570121);
      Complex complex1 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.I.atan();
      complex0.I.hashCode();
      complex3.ZERO.add(99.3526359887);
      complex1.hashCode();
      Complex complex4 = complex2.conjugate();
      complex0.sinh();
      complex1.sin();
      Complex complex5 = complex2.pow((-1818.8204562889332));
      complex2.exp();
      Complex complex6 = Complex.NaN;
      complex0.hashCode();
      Complex complex7 = Complex.INF;
      complex7.pow(complex4);
      complex7.cosh();
      Complex complex8 = Complex.ONE;
      complex3.tanh();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1712.011);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.INF.subtract(complex1);
      complex0.getField();
      complex2.toString();
      Complex complex4 = Complex.ZERO;
      complex4.getArgument();
      Complex complex5 = complex4.asin();
      complex3.getReal();
      Complex complex6 = complex1.multiply(3700);
      Complex complex7 = complex5.tanh();
      complex7.hashCode();
      complex5.asin();
      complex2.exp();
      complex4.reciprocal();
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(3493098.086351652);
      complex0.ONE.subtract(20.0);
      Complex complex1 = complex0.ONE.createComplex(3493098.086351652, 3493098.086351652);
      complex0.INF.hashCode();
      Complex complex2 = complex1.ONE.sqrt();
      complex0.getImaginary();
      complex2.INF.createComplex(493.95427570121, 1513.8);
      complex1.isInfinite();
      complex2.I.pow((-2701.3865081757));
      Complex complex3 = complex1.multiply(1);
      complex3.ONE.getArgument();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1996.107, (-700.9593919032311));
      complex0.ONE.nthRoot(2289);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex3.createComplex(1996.107, 1.0);
      Complex complex5 = complex4.INF.reciprocal();
      complex4.ONE.sinh();
      Complex complex6 = complex1.INF.multiply((-1299.920619935981));
      Complex complex7 = complex0.sin();
      complex7.I.abs();
      Complex complex8 = complex0.divide(2026.0);
      complex8.cosh();
      complex0.equals(complex0);
      Complex complex9 = new Complex(1.0, 1.0);
      complex9.abs();
      complex1.pow(complex3);
      complex0.NaN.multiply(complex5);
      Complex complex10 = Complex.valueOf(1.7696814938972238E-4, 1.0);
      complex10.sqrt1z();
      complex6.isNaN();
      complex0.reciprocal();
      complex2.atan();
      complex7.multiply(166);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1295.5, (-1231.071243));
      complex0.ONE.sinh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex0);
      complex2.nthRoot(1158);
      Complex complex3 = complex1.divide((double) 1158);
      Complex complex4 = Complex.valueOf(1186.43317979);
      complex1.add(complex4);
      complex2.add(1186.43317979);
      complex2.getArgument();
      complex3.tan();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.divide((-320.2715));
      Complex complex3 = complex2.INF.exp();
      complex1.INF.acos();
      Complex complex4 = complex2.atan();
      complex4.getArgument();
      complex2.readResolve();
      complex0.exp();
      complex4.getField();
      Complex complex5 = Complex.ONE;
      complex5.cos();
      complex3.subtract(1996.107);
      Complex complex6 = Complex.INF;
      complex6.multiply(complex2);
      complex2.multiply(1204);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1996.107, (-700.9593919032311));
      complex0.ONE.nthRoot(2289);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex3.createComplex(1996.107, 1.0);
      complex4.INF.reciprocal();
      complex4.ONE.sinh();
      Complex complex5 = complex1.INF.multiply(1.0);
      Complex complex6 = complex0.sin();
      complex6.I.abs();
      complex0.equals(complex6);
      Complex complex7 = complex0.divide(2026.0);
      complex7.cosh();
      Complex.valueOf(2026.0);
      complex0.equals(complex1);
      Complex complex8 = complex0.multiply(complex1);
      complex1.log();
      Complex complex9 = complex5.I.asin();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex10.NaN.negate();
      complex12.ONE.sin();
      complex5.multiply(135);
      Complex complex13 = complex10.divide(complex8);
      Complex complex14 = complex11.tanh();
      complex14.add(1.0);
      Complex complex15 = complex13.subtract(1996.107);
      complex15.sin();
      complex14.sqrt();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(3.665820371396835E-77);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.log();
      complex1.ZERO.reciprocal();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      Complex complex5 = complex1.I.conjugate();
      complex3.toString();
      Complex complex6 = new Complex(1.3130352854993315);
      Complex complex7 = complex6.asin();
      complex1.log();
      complex5.subtract(complex4);
      Complex complex8 = Complex.valueOf(0.0);
      complex1.multiply((-414.0));
      complex1.getArgument();
      Complex complex9 = Complex.valueOf(0.0, (double) 301);
      Complex complex10 = complex7.subtract(2028.88);
      Complex complex11 = complex1.divide(complex3);
      Complex complex12 = complex4.cos();
      complex6.pow(complex12);
      complex0.tanh();
      complex10.toString();
      complex3.getArgument();
      complex9.asin();
      complex8.getReal();
      complex2.multiply(1);
      complex3.tanh();
      complex1.hashCode();
      complex0.asin();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-656.811148));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.NaN.createComplex((-656.811148), (-656.811148));
      Complex complex5 = complex3.pow((-656.811148));
      Complex complex6 = Complex.valueOf((-656.811148));
      Complex complex7 = new Complex((-960.4992769073));
      complex7.multiply((-656.811148));
      complex4.getArgument();
      Complex complex8 = Complex.valueOf(0.0, (-414.0));
      complex6.subtract((-960.4992769073));
      Complex complex9 = Complex.ONE;
      complex9.divide(complex5);
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex6.cos();
      Complex complex12 = complex6.pow(complex11);
      complex3.tanh();
      complex12.toString();
      complex3.getArgument();
      complex10.asin();
      complex8.getReal();
      Complex complex13 = complex11.multiply(1);
      complex1.tanh();
      complex13.hashCode();
      complex8.asin();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-20.0));
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf(1.7482123374938965, 0.0);
      complex4.ZERO.reciprocal();
      complex1.toString();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.ONE.log();
      complex3.subtract(complex2);
      complex2.add(700.9594702089522);
      complex4.divide(complex1);
      complex5.getArgument();
      complex4.readResolve();
      complex0.exp();
      complex6.getField();
      Complex complex7 = Complex.NaN;
      complex7.cos();
      complex2.subtract(1.0);
      Complex complex8 = new Complex((-9.438168176533759E-290), (-1510.5996338145942));
      complex8.multiply(complex7);
      Complex complex9 = new Complex((-3140.0125975289675));
      complex9.multiply(1266);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.createComplex(773.67, Double.POSITIVE_INFINITY);
      complex3.ZERO.sqrt();
      Complex complex4 = complex2.multiply(complex1);
      complex4.NaN.nthRoot(1158);
      complex3.divide((-960.4992769073));
      Complex.valueOf(0.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      complex0.INF.tan();
      Complex complex3 = complex0.createComplex((-578.8134), (-578.8134));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex2.multiply(complex4);
      complex3.nthRoot(1158);
      complex2.divide((-578.8134));
      complex0.add(complex5);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.add((-1321.281));
      complex7.INF.sin();
      complex7.ZERO.nthRoot(247);
      complex1.getArgument();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(3.665820371396835E-77);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.reciprocal();
      complex3.negate();
      Complex complex4 = complex2.createComplex(940.900234, 1836.98379441);
      Complex complex5 = complex1.pow(3.665820371396835E-77);
      Complex complex6 = complex0.add(5.763495903609913E-231);
      Complex complex7 = complex5.divide(complex6);
      complex0.getArgument();
      complex6.readResolve();
      Complex complex8 = complex3.exp();
      complex4.getField();
      complex6.cos();
      Complex complex9 = Complex.INF;
      complex9.subtract(1855.7);
      complex8.multiply(complex7);
      complex9.multiply((-1387));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1996.107, (-700.9593919032311));
      complex0.ONE.nthRoot(2289);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex4.createComplex(1996.107, 1.0);
      Complex complex6 = complex5.INF.reciprocal();
      complex5.ONE.sinh();
      Complex complex7 = complex1.INF.multiply((-1299.920619935981));
      Complex complex8 = complex0.sin();
      complex8.I.abs();
      complex0.equals(complex8);
      Complex complex9 = complex0.divide(2026.0);
      complex9.cosh();
      Complex.valueOf(2026.0);
      complex0.equals(complex2);
      Complex complex10 = new Complex(1.0, 1.0);
      complex10.abs();
      complex1.pow(complex4);
      complex0.NaN.multiply(complex6);
      Complex complex11 = Complex.valueOf(1.7696814938972238E-4, 1.0);
      complex11.sqrt1z();
      complex7.isNaN();
      complex0.reciprocal();
      complex3.atan();
      complex8.multiply(166);
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(2.0299429893493652);
      Complex complex2 = complex1.ZERO.multiply(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.NaN.add((-1068.7759918536294));
      complex4.ZERO.getField();
      complex1.getField();
      Complex complex5 = new Complex(20.0, 7.830572099010169E-5);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex2.log();
      complex0.asin();
      complex2.negate();
      complex5.conjugate();
      complex3.negate();
      complex7.divide(complex3);
      complex5.tanh();
      complex6.add((-1828.9));
      complex1.subtract(3561.161471);
      complex6.sin();
      Complex complex8 = Complex.I;
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-20.0));
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf(1.7482123374938965, 0.0);
      complex4.ZERO.reciprocal();
      complex1.toString();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex3.subtract(complex2);
      Complex complex8 = Complex.valueOf(0.0);
      complex7.multiply((-414.0));
      complex5.getArgument();
      Complex.valueOf(1.0, 1.7482123374938965);
      Complex complex9 = complex3.subtract((-248.6115712));
      complex1.divide(complex4);
      Complex complex10 = complex9.tanh();
      complex10.I.cos();
      Complex complex11 = complex9.pow(complex2);
      complex11.INF.tanh();
      complex10.toString();
      Complex complex12 = complex10.negate();
      complex2.multiply(135);
      complex6.divide(complex3);
      complex9.tanh();
      complex8.add(1.7482123374938965);
      complex7.subtract(6.283185307179586);
      complex12.sin();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.createComplex((-766.5138786658), Double.POSITIVE_INFINITY);
      complex3.ZERO.sqrt();
      Complex complex4 = complex2.multiply(complex1);
      complex4.NaN.nthRoot(1158);
      Complex complex5 = Complex.valueOf((-5.763495903609913E-231), 0.20787957635076193);
      Complex complex6 = complex5.pow((-1118.5663396565));
      Complex complex7 = Complex.valueOf((-5.763495903609913E-231));
      complex7.multiply(1158);
      complex6.atan();
      Complex complex8 = Complex.ZERO;
      complex0.pow(complex4);
      complex0.add((-3151.09501484));
      complex6.sqrt1z();
      Complex complex9 = Complex.valueOf(6.94872148530716E-8, (double) 1158);
      complex9.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1295.5, (-1231.071243));
      Complex complex1 = complex0.ONE.sinh();
      complex1.ZERO.subtract(complex0);
      complex0.abs();
      complex1.abs();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.cosh();
      complex3.isInfinite();
      complex2.readResolve();
      complex1.hashCode();
      int int0 = 379969;
      // Undeclared exception!
      complex4.nthRoot(379969);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.createComplex((-722.574892458636), 0.0);
      Complex complex3 = complex2.I.divide(complex0);
      complex3.NaN.sqrt1z();
      complex0.NaN.abs();
      complex0.INF.add(complex2);
      int int0 = (-955);
      try { 
        complex0.nthRoot((-955));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -955
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1265.19062), (-1265.19062));
      Object object0 = complex0.ONE.readResolve();
      complex0.ZERO.nthRoot(1);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.I.pow(complex1);
      Complex complex3 = complex0.createComplex((-1265.19062), (-1265.19062));
      complex3.divide((-362.868083));
      complex0.equals(object0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.NaN.negate();
      complex0.NaN.multiply(complex1);
      complex0.ONE.cos();
      complex1.ZERO.tan();
      Complex complex2 = new Complex((-2825.2255), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.INF.add(20.0);
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex4.ZERO.pow(complex0);
      Complex complex6 = Complex.valueOf(20.0, (-2825.2255));
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex2.sinh();
      complex1.readResolve();
      complex9.createComplex((-2825.2255), Double.NaN);
      complex7.toString();
      complex3.conjugate();
      complex0.createComplex(20.0, Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      complex4.exp();
      Complex.valueOf((-20.0), Double.NaN);
      complex5.sqrt1z();
      complex6.acos();
      complex8.subtract(2250.625);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.hashCode();
      complex0.cos();
      Complex complex2 = complex0.acos();
      complex0.multiply(complex2);
      complex0.equals((Object) null);
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.createComplex((-766.5138786658), Double.POSITIVE_INFINITY);
      complex3.ZERO.sqrt();
      Complex complex4 = complex2.multiply(complex1);
      complex4.NaN.nthRoot(1158);
      complex3.divide((-960.4992769073));
      complex1.add(complex4);
      complex2.add(2174.259073);
      complex2.getArgument();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1295.5, (-1231.071243));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex0.abs();
      complex1.abs();
      Complex complex3 = complex0.cosh();
      complex3.ZERO.tanh();
      complex3.ZERO.readResolve();
      complex2.getImaginary();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.add(Double.NaN);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.pow(complex1);
      complex1.ZERO.getArgument();
      complex0.sin();
      complex2.getArgument();
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-656.811148));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.NaN.createComplex((-656.811148), (-656.811148));
      complex3.pow((-656.811148));
      complex3.ONE.add((-1749.14));
      complex2.divide(complex0);
      complex0.getArgument();
      complex2.readResolve();
      Complex complex5 = complex1.exp();
      complex5.ONE.getField();
      complex1.cos();
      complex5.subtract((-656.811148));
      complex0.multiply(complex4);
      complex3.multiply((-1387));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.I.pow(complex0);
      complex3.abs();
      complex0.NaN.subtract(complex1);
      complex0.I.hashCode();
      complex3.I.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex5.ONE.divide(0.20787957635076193);
      Complex complex7 = complex6.add(complex2);
      Complex complex8 = complex0.divide(complex4);
      Complex complex9 = complex4.I.atan();
      complex9.ONE.asin();
      complex6.ZERO.tan();
      complex4.isNaN();
      Complex complex10 = complex4.NaN.asin();
      Complex complex11 = complex8.multiply(1.0);
      Complex.valueOf(1.0);
      Complex complex12 = complex1.NaN.conjugate();
      complex12.NaN.pow(51.07672);
      complex12.ONE.divide(complex4);
      complex12.ZERO.atan();
      complex1.getField();
      complex11.log();
      complex5.multiply(1);
      Complex complex13 = complex6.atan();
      complex13.NaN.divide(0.0);
      complex2.toString();
      complex7.sinh();
      Complex.valueOf(1.0, 0.0);
      complex11.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-463.44598426015716));
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.ZERO.sinh();
      Complex complex2 = complex1.NaN.multiply((-1270));
      complex2.I.multiply(2781);
      complex0.isNaN();
      Complex complex3 = complex0.I.subtract(complex1);
      complex3.I.negate();
      Complex complex4 = Complex.NaN;
      complex4.ONE.multiply((-1126));
      complex0.equals(complex4);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.02602556347846985);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.ONE.subtract(0.0);
      Complex complex4 = complex3.INF.conjugate();
      complex4.ONE.tanh();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.I.createComplex(1.5263078212738037, 0.02602556347846985);
      complex6.I.exp();
      complex1.I.reciprocal();
      complex6.nthRoot(1);
      complex2.getArgument();
      Complex complex8 = complex0.NaN.tan();
      complex5.pow(0.0);
      complex6.toString();
      complex1.getImaginary();
      complex5.isInfinite();
      complex3.getImaginary();
      Complex complex9 = complex1.multiply(1);
      complex0.ONE.getArgument();
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex10.NaN.add(1.0);
      complex9.ZERO.multiply(17);
      complex3.getReal();
      Complex complex12 = complex8.I.multiply(complex7);
      complex9.createComplex(1.0, (-1.5707963267948966));
      complex8.readResolve();
      complex0.getReal();
      complex12.multiply(0.0);
      complex11.sqrt();
      complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(3.665820371396835E-77);
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ZERO.reciprocal();
      complex2.ZERO.readResolve();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex2.ZERO.multiply(301);
      complex2.getImaginary();
      complex1.divide(3.665820371396835E-77);
      Complex complex8 = complex0.tan();
      complex7.toString();
      complex2.ZERO.tanh();
      complex8.ZERO.readResolve();
      complex1.hashCode();
      Complex complex9 = complex8.NaN.sinh();
      complex9.I.sinh();
      complex8.ZERO.cosh();
      complex7.isInfinite();
      complex8.readResolve();
      complex7.hashCode();
      complex4.nthRoot(301);
      complex0.negate();
      Complex.valueOf(0.0, 3.665820371396835E-77);
      complex5.tan();
      complex3.multiply(2356);
      complex6.equals("E");
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(2.0299429893493652);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ONE.sqrt();
      Complex complex4 = complex0.NaN.add((-1068.7759918536294));
      complex4.ZERO.getField();
      complex1.getField();
      complex1.ZERO.abs();
      Complex complex5 = complex1.pow(complex0);
      complex5.ONE.sqrt1z();
      complex5.isNaN();
      complex3.reciprocal();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add((-3862.158552));
      complex2.INF.getArgument();
      complex1.NaN.readResolve();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.divide((-3862.158552));
      complex4.I.cos();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex6.ZERO.multiply(complex3);
      Complex complex8 = complex6.I.negate();
      complex8.getArgument();
      complex6.I.nthRoot(1487);
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex9.ZERO.sinh();
      complex10.NaN.hashCode();
      Complex complex11 = complex0.createComplex(0.7853981633974483, 3.2345523990372546E-222);
      Complex complex12 = complex11.NaN.sqrt();
      complex11.isInfinite();
      complex1.add((-3862.158552));
      complex7.abs();
      complex0.ZERO.reciprocal();
      complex2.ONE.add(complex12);
      Complex complex13 = Complex.valueOf(1816.0675206934, 60.525568312);
      Complex complex14 = complex13.I.cosh();
      complex11.sqrt1z();
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(9.994400500679653E270, 9.994400500679653E270);
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.multiply((-1264));
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.NaN.createComplex(20.0, 9.994400500679653E270);
      Complex complex5 = complex4.NaN.acos();
      complex5.NaN.readResolve();
      Complex complex6 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.pow(complex6);
      complex8.getArgument();
      complex1.toString();
      complex4.equals(complex8);
      complex7.add(complex1);
      complex7.hashCode();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      complex0.INF.createComplex(4.85165184E8, 2430.86442611635);
      Complex complex1 = complex0.subtract(4.85165184E8);
      complex1.isInfinite();
      complex1.getReal();
      Complex complex2 = complex1.sin();
      complex0.toString();
      complex0.NaN.hashCode();
      complex0.cos();
      Complex complex3 = Complex.valueOf(7.89187408872514E284);
      complex3.NaN.hashCode();
      Complex.valueOf((-4.85165183E8), 6.283185307179586);
      complex2.INF.readResolve();
      Complex complex4 = complex2.sin();
      complex4.NaN.multiply(complex2);
      complex4.ONE.multiply(0);
      complex4.hashCode();
      Complex.valueOf(430.7, 2066.6723931);
      complex1.sqrt();
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1247.38414491), (-1247.38414491));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-20.0));
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf(1.7482123374938965, 0.0);
      complex4.ZERO.reciprocal();
      complex1.toString();
      Complex complex5 = complex3.asin();
      complex5.ONE.log();
      Complex complex6 = complex3.subtract(complex2);
      Complex.valueOf(0.0);
      complex6.multiply((-414.0));
      complex5.getArgument();
      Complex.valueOf(1.0, 1.7482123374938965);
      Complex complex7 = complex3.subtract((-248.6115712));
      complex1.divide(complex4);
      Complex complex8 = complex7.tanh();
      complex8.I.cos();
      Complex complex9 = complex7.pow(complex2);
      complex9.INF.tanh();
      complex8.toString();
      complex0.getArgument();
      Complex complex10 = complex1.asin();
      complex10.getReal();
      complex0.multiply(1);
      complex8.tanh();
      complex6.hashCode();
      complex5.asin();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.NaN.subtract(complex0);
      try { 
        complex1.I.nthRoot((-1512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,512
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3442378838418366E212);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex3.getField();
      complex1.cosh();
      complex2.NaN.multiply((-983));
      Complex complex4 = Complex.valueOf(2.3442378838418366E212);
      Complex complex5 = complex1.NaN.createComplex(2.3442378838418366E212, 2.3442378838418366E212);
      Complex.valueOf(0.0, 2.3442378838418366E212);
      complex5.ONE.add(complex2);
      Complex.valueOf(2.3442378838418366E212);
      complex1.getImaginary();
      Complex complex6 = complex4.pow(2.3442378838418366E212);
      Complex complex7 = complex4.pow(complex6);
      complex7.ONE.negate();
      complex7.getArgument();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1323.584577854), 974.22027);
      complex1.ZERO.nthRoot(1377);
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex4.ONE.sqrt();
      complex0.readResolve();
      complex0.ZERO.getField();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.multiply(complex3);
      complex5.ZERO.hashCode();
      complex4.multiply(11.2);
      complex5.add(complex4);
      Complex complex7 = new Complex((-1323.584577854));
      complex6.add(complex7);
      complex4.sinh();
      complex2.multiply(2148.1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.I.multiply((-1));
      complex3.INF.toString();
      complex0.hashCode();
      Complex complex4 = complex3.log();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.subtract(complex1);
      complex1.NaN.sqrt1z();
      complex3.exp();
      complex3.INF.nthRoot(2172);
      Complex.valueOf((double) 2172, 1171.582244);
      Complex complex4 = complex3.ONE.add((-20.0));
      complex4.NaN.cosh();
      Complex complex5 = complex1.pow(complex4);
      complex4.I.conjugate();
      complex5.I.subtract(complex1);
      complex1.isInfinite();
      complex3.acos();
      complex4.createComplex(88.11, 6.283185307179586);
      complex2.sin();
      complex3.nthRoot(1853);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1996.107, (-700.9593919032311));
      complex0.ONE.nthRoot(2289);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex4.createComplex(1996.107, 1.0);
      complex5.INF.reciprocal();
      complex5.ONE.sinh();
      Complex complex6 = complex1.INF.multiply((-1299.920619935981));
      Complex complex7 = complex0.sin();
      complex7.I.abs();
      complex0.equals(complex7);
      Complex complex8 = complex0.divide(2026.0);
      complex8.cosh();
      Complex.valueOf(2026.0);
      complex0.equals(complex2);
      Complex complex9 = complex0.multiply(complex2);
      complex1.log();
      complex6.I.asin();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex7.conjugate();
      complex10.NaN.negate();
      complex6.multiply(135);
      Complex complex12 = complex10.divide(complex9);
      Complex complex13 = complex11.tanh();
      complex13.add(1.0);
      Complex complex14 = complex12.subtract(1996.107);
      complex14.sin();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.divide((-320.2715));
      complex2.INF.exp();
      complex1.INF.acos();
      Complex complex3 = complex2.atan();
      complex3.I.cos();
      complex3.I.tanh();
      Complex complex4 = complex1.sinh();
      int int0 = 0;
      try { 
        complex4.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex2.getArgument();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.acos();
      complex1.toString();
      Complex complex2 = complex1.cos();
      complex2.I.exp();
      Complex complex3 = complex2.subtract(0.0);
      complex0.getField();
      Complex complex4 = complex0.tan();
      complex4.NaN.log();
      Complex complex5 = complex0.pow(complex1);
      complex2.sinh();
      complex5.nthRoot(45);
      complex3.NaN.pow(0.0);
      complex3.cosh();
      complex1.log();
      complex3.multiply(complex5);
      complex0.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.INF.divide(complex2);
      Complex complex5 = complex1.ZERO.exp();
      complex5.ZERO.cos();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.ZERO.cos();
      complex0.subtract((-2196.3396));
      Complex complex8 = complex2.multiply((-2196.3396));
      complex8.ONE.multiply(complex3);
      complex8.I.conjugate();
      complex6.sin();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex9.I.pow(complex4);
      complex10.ZERO.sinh();
      complex9.ZERO.sqrt1z();
      complex5.pow((-2196.3396));
      complex7.log();
      complex3.sqrt1z();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1128.4617), (-1128.4617));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.multiply((-2111.7));
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex1.ZERO.subtract((double) (-1));
      complex3.ONE.getField();
      Complex complex4 = Complex.valueOf(0.0, (-2111.7));
      Complex complex5 = complex4.ZERO.conjugate();
      complex5.ONE.tan();
      Complex complex6 = complex2.ONE.multiply((-1));
      complex6.NaN.add(1.4080573899148006E-210);
      complex0.ONE.toString();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1712.011);
      Complex complex1 = complex0.ONE.tan();
      complex1.INF.log();
      complex0.INF.subtract(complex1);
      complex0.getField();
      Complex.valueOf(916.504504701488);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3558.102934940832));
      Complex complex1 = complex0.I.subtract(2229.338961);
      Complex complex2 = Complex.valueOf((-3558.102934940832));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.add((-3558.102934940832));
      complex2.ONE.add(2229.338961);
      complex2.I.negate();
      complex0.I.toString();
      complex0.nthRoot(1);
      complex2.getImaginary();
      complex1.sinh();
      complex4.add((-2443.67));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.atan();
      assertEquals(1.4142135623730951, complex1.getReal(), 0.01);
      
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex4.ONE.createComplex((-1484.796412), 0.0);
      Complex complex6 = complex0.NaN.divide(2242.0);
      Complex complex7 = Complex.valueOf(0.3817485570907593);
      Complex complex8 = complex6.INF.pow(0.0);
      complex7.ONE.subtract(6.283185307179586);
      Complex complex9 = complex0.subtract(6.283185307179586);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex6.sinh();
      assertSame(complex11, complex2);
      
      complex9.ONE.conjugate();
      complex7.NaN.asin();
      Complex complex12 = complex3.reciprocal();
      complex9.ONE.getField();
      complex4.hashCode();
      Complex complex13 = complex9.conjugate();
      complex7.sinh();
      complex3.INF.sin();
      Complex complex14 = complex7.pow(0.0);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex5.cos();
      complex15.hashCode();
      Complex complex16 = complex13.pow(complex5);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.equals((Object)complex8));
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      complex6.cosh();
      Complex complex17 = complex12.pow(complex10);
      Complex complex18 = complex12.tanh();
      assertEquals((-3.793258883777134), complex18.getImaginary(), 0.01);
      assertEquals(0.0, complex18.getReal(), 0.01);
      
      Complex complex19 = complex3.sqrt();
      assertEquals(0.6170875772350974, complex19.getImaginary(), 0.01);
      
      Complex complex20 = complex17.add(complex9);
      assertEquals((-6.082967400437875), complex20.getReal(), 0.01);
      assertEquals(0.9440830250841507, complex20.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2306.1917185838);
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex0.I.multiply(3206);
      Complex complex3 = complex2.asin();
      complex3.NaN.readResolve();
      assertEquals(8.765926537885623, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ZERO.add((-2068.923693580126));
      Complex complex6 = complex4.INF.atan();
      complex1.ZERO.getField();
      Complex complex7 = complex1.sqrt();
      complex7.ZERO.log();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.I.add(520.041);
      complex9.INF.pow(0.0);
      Complex complex10 = complex1.ONE.reciprocal();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.ZERO.log();
      assertEquals(2.718281828459045, complex11.getReal(), 0.01);
      assertTrue(complex12.isInfinite());
      
      Complex complex13 = complex0.tanh();
      complex13.NaN.hashCode();
      Complex complex14 = complex13.atan();
      Complex complex15 = complex8.cos();
      assertSame(complex15, complex6);
      
      complex7.abs();
      Complex.valueOf(0.0);
      double double0 = complex5.abs();
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals(2068.923693580126, double0, 0.01);
      
      Complex complex16 = complex14.add(complex0);
      assertEquals(2306.4674246753953, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      
      Complex complex17 = Complex.valueOf(2306.1917185838, 0.0);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(364.7052512107969, 364.7052512107969);
      Complex complex1 = Complex.NaN;
      complex1.sinh();
      complex0.I.hashCode();
      complex0.ZERO.add(complex1);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-2536.526451936505);
      Complex complex0 = new Complex((-2536.526451936505));
      Complex complex1 = complex0.ONE.conjugate();
      complex1.INF.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.NaN.divide((-2536.526451936505));
      complex4.NaN.atan();
      int int0 = (-1926);
      try { 
        complex4.I.nthRoot((-1926));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,926
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
