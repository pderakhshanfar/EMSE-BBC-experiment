/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:34:52 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex1.ZERO.log();
      complex1.multiply(3118.184708002302);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1.0, 6.331009331992412E-18);
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex2.INF.pow(complex0);
      complex3.hashCode();
      complex2.acos();
      Complex complex4 = Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
      complex4.multiply(complex5);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
      complex0.ONE.nthRoot(4998);
      int int0 = (-2045222521);
      complex0.multiply((-2045222521));
      complex0.tanh();
      // Undeclared exception!
      complex0.NaN.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex0.multiply(complex2);
      complex0.sqrt();
      complex1.acos();
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex0.add(complex0);
      complex1.NaN.divide((-1.0));
      Complex complex2 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.ONE;
      complex1.acos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1.0, 6.331009331992412E-18);
      complex1.add(complex0);
      complex2.NaN.divide((-1.0));
      Complex complex3 = Complex.valueOf(18.50534972190327, 2.5866883048437488E280);
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex0.sqrt();
      complex2.acos();
      int int0 = (-671);
      Complex complex6 = new Complex(1.0);
      complex6.sqrt1z();
      complex4.reciprocal();
      try { 
        complex5.nthRoot((-671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -671
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 4.293620869258453E210);
      Complex complex1 = complex0.ONE.sqrt();
      complex1.NaN.abs();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.ZERO.createComplex((-1109.23565), 4.293620869258453E210);
      complex5.NaN.abs();
      complex2.nthRoot(1754);
      complex0.divide(complex4);
      Complex complex6 = complex2.exp();
      complex3.createComplex(3.507754341050756E-176, 1754);
      Complex complex7 = complex6.tanh();
      Complex.valueOf((double) 1754, 2.8332008343480686E-9);
      complex5.NaN.divide((-1.0));
      Complex complex8 = complex5.pow((-2266.6707400729065));
      complex8.I.readResolve();
      complex1.pow(3.507754341050756E-176);
      complex7.subtract(4.293620869258453E210);
      complex8.pow((-3767.4486));
      complex7.divide((-800.5163043259049));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(2494.9135194);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3222.82), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.cosh();
      complex1.INF.sinh();
      Complex complex2 = complex0.add(20.0);
      complex2.acos();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      complex0.equals(object0);
      Complex complex4 = complex3.sinh();
      complex4.INF.tanh();
      complex3.log();
      complex0.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1.0), 20.0);
      complex1.ONE.sinh();
      complex1.tan();
      complex1.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-19.544597024459414));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-366.597647939));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.negate();
      complex2.NaN.sin();
      Complex complex3 = Complex.valueOf(20.0, 1.0256862641218498E7);
      complex1.divide(complex2);
      Complex complex4 = complex3.I.divide(1.6977381706237793);
      Complex complex5 = Complex.valueOf(1.0256862641218498E7, 196.06779477);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex5.INF.reciprocal();
      Complex.valueOf((-1510440.0), (-366.597647939));
      complex7.INF.hashCode();
      complex7.ZERO.multiply(1);
      Complex complex8 = complex5.NaN.sqrt();
      complex8.ZERO.conjugate();
      Complex complex9 = complex6.divide(864.7371278911316);
      complex4.multiply(complex6);
      complex1.divide((-3023.938));
      complex9.getField();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-18.7185673966925));
      Complex complex1 = complex0.tan();
      complex0.toString();
      Complex complex2 = complex0.log();
      complex1.tan();
      Complex complex3 = null;
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.NaN.createComplex(671.7, 671.7);
      complex2.I.abs();
      Complex complex3 = complex1.I.subtract(0.0);
      Complex complex4 = complex0.pow(0.0);
      complex1.divide(2.0);
      Complex complex5 = complex4.multiply(4849);
      complex0.readResolve();
      complex0.hashCode();
      Complex complex6 = complex1.pow(2601.2971623);
      Complex complex7 = Complex.valueOf(1.0, (double) 4849);
      complex4.INF.hashCode();
      complex2.ZERO.multiply(1.0);
      Complex complex8 = complex7.I.cosh();
      complex3.ZERO.subtract(1422.9486626742546);
      Complex complex9 = complex4.multiply(671.7);
      complex9.tanh();
      complex1.equals(complex3);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex5.cosh();
      complex11.ZERO.readResolve();
      Complex complex12 = complex9.ZERO.divide(complex3);
      Complex complex13 = complex12.I.divide(complex5);
      Complex complex14 = complex13.NaN.subtract(complex8);
      complex14.NaN.hashCode();
      complex6.multiply(complex2);
      Object object0 = complex10.readResolve();
      complex4.equals(object0);
      complex2.asin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN);
      complex0.readResolve();
      Complex complex2 = complex0.atan();
      complex2.ZERO.multiply(Double.NaN);
      complex2.INF.exp();
      complex2.sqrt();
      Complex complex3 = complex0.subtract(3.0);
      Complex complex4 = new Complex(3.0, Double.NaN);
      complex3.pow(complex4);
      complex0.abs();
      complex3.tanh();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.4986113866728328, 8.66419234315257E-255);
      Complex complex2 = new Complex(0.4986113866728328);
      Complex complex3 = Complex.valueOf(8.66419234315257E-255);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = complex4.sqrt1z();
      complex9.sqrt1z();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.add(complex8);
      Complex complex11 = Complex.valueOf(9.602294242425163E-8);
      complex5.ZERO.reciprocal();
      complex11.conjugate();
      complex10.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.abs();
      Complex complex2 = complex0.I.pow(1116.00527);
      Object object0 = new Object();
      complex0.equals(object0);
      complex2.ONE.pow(1116.00527);
      Complex complex3 = complex0.ONE.pow(1116.00527);
      complex3.NaN.sqrt();
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.I.createComplex(Double.NaN, (-1077.572));
      Complex complex7 = complex5.subtract(complex3);
      complex7.ZERO.createComplex((-985.786809912), (-1581.57798));
      Complex complex8 = complex2.asin();
      Complex complex9 = complex8.NaN.createComplex((-1560.741), (-763.267444006));
      Complex complex10 = complex9.pow((-1581.57798));
      complex5.divide(complex6);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex7.multiply(complex11);
      complex5.toString();
      complex8.equals("(1.5707963267948966, -0.0)");
      complex12.toString();
      complex4.add(Double.POSITIVE_INFINITY);
      complex1.divide(54.07044131532327);
      complex1.cosh();
      complex10.createComplex((-1077.572), 1356.3842);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1384.79), (-1384.79));
      Complex complex1 = Complex.valueOf(1014.9949396671313, (-1384.79));
      complex0.tan();
      Complex complex2 = Complex.ONE;
      complex2.NaN.nthRoot(886);
      Complex complex3 = new Complex((-1384.79), (-1384.79));
      complex1.nthRoot(886);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.cosh();
      complex1.reciprocal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(0.0);
      complex3.divide(complex6);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex6.add(complex1);
      Complex complex8 = Complex.I;
      complex5.log();
      complex2.tanh();
      complex4.multiply(complex8);
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.multiply(Double.NaN);
      complex0.readResolve();
      Complex complex1 = complex0.atan();
      complex1.INF.exp();
      complex1.sqrt();
      Complex complex2 = complex0.subtract(2.0);
      Complex complex3 = new Complex(2.0, Double.NaN);
      complex2.pow(complex3);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      complex0.isInfinite();
      complex0.equals((Object) null);
      Object object0 = new Object();
      List<Complex> list0 = complex0.nthRoot(1215);
      complex1.equals(object0);
      Complex complex2 = complex0.conjugate();
      complex2.I.negate();
      Complex complex3 = complex0.I.pow(complex2);
      complex3.cosh();
      Complex complex4 = complex1.cos();
      complex1.cosh();
      complex0.ZERO.multiply((double) 1215);
      complex4.ZERO.toString();
      Complex complex5 = complex4.cosh();
      complex5.I.hashCode();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.ONE.divide(complex7);
      complex6.sin();
      complex6.conjugate();
      complex4.NaN.subtract((double) 1215);
      complex1.conjugate();
      Complex complex9 = Complex.valueOf((double) 1215);
      complex4.pow(complex9);
      complex1.equals(list0);
      complex8.equals("(0.0, 0.0)");
      Complex complex10 = complex7.sin();
      complex4.toString();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(674.16788);
      complex1.tanh();
      complex0.ONE.nthRoot(37);
      Complex complex2 = complex1.multiply(37);
      Complex complex3 = Complex.ONE;
      complex3.ZERO.atan();
      Complex complex4 = new Complex(674.16788, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.acos();
      Complex complex7 = complex4.sqrt();
      complex7.add(674.16788);
      complex4.pow(complex6);
      complex2.readResolve();
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.multiply(6.283185307179586);
      complex5.toString();
      Complex complex7 = complex6.cosh();
      complex4.hashCode();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = Complex.INF;
      complex9.I.multiply(complex1);
      Complex complex10 = complex8.divide(complex7);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.sin();
      complex2.conjugate();
      complex2.subtract(6.283185307179586);
      complex12.conjugate();
      Complex.valueOf(6.283185307179586);
      Complex complex13 = new Complex(1.0, 6.283185307179586);
      complex6.pow(complex13);
      complex7.equals(complex1);
      Complex complex14 = Complex.ZERO;
      complex14.equals("(1.149548905166106, -0.0)");
      complex10.sin();
      complex1.toString();
      Complex complex15 = new Complex((-2393.74624), 7.441451374243517E152);
      Complex complex16 = new Complex(1.0);
      complex6.add(complex16);
      complex2.acos();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.exp();
      complex1.multiply(206.029425257994);
      complex2.getArgument();
      complex2.getArgument();
      Complex complex3 = Complex.NaN;
      complex3.createComplex((-443.796), 9.602294242425163E-8);
      Complex.valueOf((-1005.5));
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(674.16788);
      complex1.tanh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(2024.2392379095);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      complex0.isInfinite();
      complex0.equals((Object) null);
      Object object0 = new Object();
      List<Complex> list0 = complex0.nthRoot(1215);
      complex1.equals(object0);
      Complex complex2 = complex0.conjugate();
      complex2.I.negate();
      Complex complex3 = complex0.I.pow(complex2);
      complex3.cosh();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.cosh();
      complex0.ZERO.multiply((double) 1215);
      complex4.ZERO.toString();
      Complex complex6 = complex4.cosh();
      complex6.I.hashCode();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.ONE.divide(complex8);
      complex7.sin();
      complex7.conjugate();
      complex4.NaN.subtract((double) 1215);
      complex1.conjugate();
      Complex complex10 = Complex.valueOf((double) 1215);
      complex4.pow(complex10);
      complex1.equals(list0);
      complex9.equals("(0.0, 0.0)");
      Complex complex11 = complex8.sin();
      complex4.toString();
      Complex complex12 = new Complex(3269017.5, 3269017.5);
      complex1.add(complex12);
      complex5.acos();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1384.79), 2368.8);
      Complex complex1 = Complex.valueOf(1014.9949396671313, (-1384.79));
      complex1.ONE.multiply(2368.8);
      complex0.pow(complex1);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(0.4986113866728328, 2374.4754806597666);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = Complex.valueOf(2374.4754806597666);
      complex4.cosh();
      complex4.reciprocal();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.ONE;
      complex0.divide(complex6);
      Complex complex9 = new Complex(448.38633063618437, 0.4986113866728328);
      Complex complex10 = complex5.add(complex0);
      complex6.nthRoot(2270);
      Complex complex11 = Complex.I;
      complex11.divide((double) 2270);
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.add(complex10);
      Complex.valueOf(Double.NaN);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(0.4986113866728328, 2374.4754806597666);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = new Complex(6605.6395617);
      complex1.getArgument();
      complex1.getArgument();
      complex4.createComplex(6605.6395617, 1.1828997135162354);
      Complex complex5 = Complex.valueOf(2.2590636576955473E265);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(1374.53012379883);
      Complex complex2 = Complex.valueOf(1374.53012379883);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex1.cosh();
      complex0.reciprocal();
      Complex complex6 = Complex.NaN;
      complex4.add(complex6);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.divide(complex4);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex5.sqrt1z();
      Complex complex12 = complex11.divide(Double.NaN);
      complex5.add(complex9);
      Complex.valueOf(1.2806275683797178E-57);
      complex1.atan();
      complex12.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.I.add(5198.8740316614);
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.NaN.conjugate();
      Complex complex3 = complex0.sqrt();
      complex2.exp();
      Complex complex4 = complex3.ONE.acos();
      complex4.exp();
      complex3.NaN.cos();
      complex3.abs();
      Complex complex5 = complex0.atan();
      complex5.I.readResolve();
      Complex complex6 = complex1.multiply(631.1154540502433);
      complex1.I.negate();
      complex6.INF.acos();
      // Undeclared exception!
      complex1.nthRoot(7675);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(0.4986113866728328, 2374.4754806597666);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = Complex.valueOf(9.602294242425163E-8);
      complex4.cosh();
      complex4.reciprocal();
      complex1.add(complex0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ONE;
      complex6.divide(complex7);
      Complex complex8 = Complex.INF;
      complex8.sqrt1z();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex5.add(complex8);
      Complex complex9 = Complex.valueOf(9.602294242425163E-8);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.add(4047.39);
      Complex complex3 = complex2.INF.tan();
      complex2.NaN.getField();
      complex1.NaN.cos();
      Complex complex4 = complex0.NaN.sqrt1z();
      Complex complex5 = complex4.ONE.subtract((-3221.8230579369));
      Complex complex6 = new Complex((-3221.8230579369), 4047.39);
      complex5.add(complex4);
      complex3.nthRoot(2270);
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.INF;
      complex8.tanh();
      complex7.multiply(complex2);
      Complex complex9 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ZERO.negate();
      complex1.equals(complex0);
      complex1.ONE.sqrt();
      complex0.toString();
      complex2.cosh();
      Complex.valueOf(0.0);
      complex1.sin();
      complex0.toString();
      complex0.subtract(complex0);
      complex1.multiply(complex1);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(3093);
      Complex complex3 = complex1.ONE.multiply(3093);
      complex3.NaN.multiply(3093);
      complex2.ZERO.readResolve();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex4.exp();
      complex5.pow(complex0);
      complex5.I.multiply(3093);
      complex4.I.add(complex0);
      complex4.ZERO.getField();
      complex0.NaN.toString();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.multiply(2146986359);
      complex1.sqrt();
      Complex.valueOf((-2.483854482306924E-4));
      Complex complex8 = Complex.INF;
      complex8.atan();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.add(0.0);
      complex2.INF.tan();
      complex2.NaN.getField();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.NaN.sqrt1z();
      complex4.subtract(914.881334757166);
      complex4.ONE.subtract((-3221.8230579369));
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.divide((-294.903512));
      complex5.I.add(complex3);
      Complex complex6 = complex3.tanh();
      complex6.multiply(complex2);
      Complex complex7 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4483.235897199);
      Complex complex1 = complex0.tan();
      complex0.pow(complex1);
      Complex.valueOf(0.0, 0.0);
      complex1.conjugate();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1.4668554399227007));
      Complex complex2 = new Complex(0.0);
      complex2.getArgument();
      complex0.getArgument();
      Complex complex3 = complex1.createComplex(0.0, 1374.53012379883);
      Complex.valueOf((-2519.68594));
      complex3.subtract((-810.5606471));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 5.521082422279256E-42;
      Complex complex0 = new Complex(5.521082422279256E-42, 5.521082422279256E-42);
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.add(4047.39);
      complex2.INF.tan();
      complex2.NaN.getField();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.NaN.sqrt1z();
      complex4.ONE.subtract((-3221.8230579369));
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.divide((-294.903512));
      complex5.I.add(complex3);
      Complex.valueOf(958.37138);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.ONE;
      complex2.createComplex(387733.59088676894, 387733.59088676894);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      complex0.getImaginary();
      Complex.valueOf(2.0, 0.0);
      complex1.NaN.exp();
      complex1.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.reciprocal();
      complex0.ONE.cosh();
      complex3.sqrt();
      Complex complex4 = new Complex(0.0, (-2950.12206063));
      complex2.cosh();
      Complex complex5 = complex3.INF.divide(complex4);
      Complex complex6 = complex4.I.divide(0.0);
      Complex complex7 = complex0.sinh();
      complex7.ONE.pow(complex5);
      Complex complex8 = complex5.exp();
      complex0.pow(complex2);
      complex5.asin();
      complex8.reciprocal();
      complex7.subtract(0.0);
      complex6.abs();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.divide((-1346.228153782644));
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ZERO;
      complex0.cos();
      complex2.INF.tanh();
      Complex complex5 = complex0.multiply(complex4);
      Complex.valueOf(Double.NaN, (-1346.228153782644));
      Complex complex6 = Complex.valueOf((-622.6833793243312));
      Complex complex7 = complex1.negate();
      complex5.sqrt();
      Complex complex8 = Complex.ONE;
      complex1.createComplex((-2462.215570896084), (-759.0));
      complex7.pow(complex8);
      complex6.acos();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex1.nthRoot(746);
      Complex complex3 = complex2.createComplex(746, 0.0);
      complex1.pow(complex2);
      Complex.valueOf(6.283185307179586, 1.5099995136260986);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.tanh();
      complex3.tanh();
      complex4.negate();
      complex0.hashCode();
      complex1.pow(complex5);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.multiply(complex6);
      complex2.cos();
      complex5.multiply(746);
      complex5.reciprocal();
      complex4.isNaN();
      complex1.toString();
      complex7.reciprocal();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2979.92424589, (-2374.4754806597666));
      Complex complex2 = Complex.valueOf((-2.5866883048437488E280));
      Complex complex3 = complex0.subtract(complex1);
      complex2.nthRoot(1364);
      complex3.createComplex((-592.19), (-24.2));
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = Complex.valueOf(1.099358320236206, Double.NaN);
      Complex complex6 = complex2.asin();
      complex4.getReal();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex2.negate();
      complex8.hashCode();
      complex5.pow(complex6);
      complex6.multiply(complex9);
      complex2.cos();
      complex7.multiply(1364);
      Complex complex10 = Complex.I;
      complex10.reciprocal();
      complex4.isNaN();
      Complex complex11 = Complex.I;
      complex11.toString();
      complex10.reciprocal();
      Complex complex12 = Complex.NaN;
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-1.8954903262418002E7));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.pow(9.935409963987224E-4);
      Complex complex10 = new Complex(9.935409963987224E-4, 4317.381949);
      complex10.sqrt1z();
      complex6.tanh();
      complex0.getField();
      complex2.atan();
      complex0.divide(complex4);
      Complex complex11 = complex9.subtract((-941.8263285489784));
      complex11.toString();
      complex9.multiply(complex8);
      Complex complex12 = new Complex(0.12038381397724152, 4317.381949);
      Complex complex13 = complex12.pow((-1743.7475984215));
      Complex complex14 = complex5.reciprocal();
      complex11.subtract(4317.381949);
      complex6.hashCode();
      complex13.isNaN();
      complex14.isNaN();
      complex7.subtract((-1743.7475984215));
      complex3.sinh();
      complex9.tanh();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-2343.1388906689135), 0.6296497583389282);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ONE;
      complex2.I.negate();
      Complex complex3 = complex1.createComplex((-2608.3683019), 4317.381949);
      complex0.pow(complex3);
      Complex complex4 = Complex.valueOf(3078.547, 3078.547);
      complex4.acos();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.exp();
      complex2.I.tan();
      complex1.hashCode();
      Complex complex3 = complex0.ONE.pow(complex1);
      complex0.I.subtract(complex3);
      Complex complex4 = complex0.createComplex((-1.1508772192025259E-158), (-1.1508772192025259E-158));
      Complex complex5 = complex4.multiply((-368));
      Complex complex6 = complex4.log();
      complex6.NaN.sin();
      complex4.getImaginary();
      Complex complex7 = complex0.multiply((-368));
      complex0.hashCode();
      complex2.reciprocal();
      complex4.isNaN();
      complex5.toString();
      complex0.reciprocal();
      complex7.reciprocal();
      complex6.subtract((-2222.3904302));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2013.0), (-1.0));
      Complex complex1 = Complex.valueOf((-2374.4754806597666));
      complex0.add(complex1);
      Complex complex2 = complex0.acos();
      complex2.I.multiply(complex0);
      complex2.INF.divide(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.cosh();
      complex4.ONE.getField();
      Complex complex5 = complex1.multiply((-1.0));
      complex2.sinh();
      complex1.hashCode();
      Complex complex6 = Complex.valueOf((-1.0), 590.1851740758436);
      complex6.isNaN();
      complex5.isNaN();
      complex1.subtract(1682.384310308);
      complex0.sinh();
      complex5.tanh();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.add(8.48292035519895E-10);
      Complex complex2 = complex0.tan();
      complex1.getField();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.sqrt1z();
      complex4.divide((-294.903512));
      complex3.add(complex0);
      Complex complex6 = new Complex((-294.903512), 4047.39);
      complex6.tanh();
      complex5.getField();
      complex5.subtract(1.0);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex0.multiply(3093);
      Complex complex2 = complex1.ONE.multiply(3093);
      complex0.hashCode();
      Complex complex3 = new Complex(1107.21383, 1850.8297911417);
      Complex complex4 = complex2.subtract(complex3);
      Complex.valueOf((double) 3093);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.add(complex4);
      complex4.divide(complex2);
      double double0 = 9.016946273084244E-9;
      Complex complex8 = new Complex(9.016946273084244E-9, (-2410.59878479));
      complex6.add(complex7);
      try { 
        complex8.nthRoot((-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -347
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex complex1 = complex0.add(288.77481);
      Complex complex2 = new Complex(2.0);
      Complex complex3 = complex2.tan();
      complex2.getField();
      Complex complex4 = new Complex(4047.39, 288.77481);
      Complex complex5 = complex4.cos();
      complex4.sqrt1z();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex5.divide((-0.386893449833));
      complex7.add(complex3);
      complex6.tanh();
      complex1.getField();
      complex6.subtract(Double.NaN);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tan();
      complex1.hashCode();
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex1.createComplex(Double.POSITIVE_INFINITY, 968.6166794185796);
      complex2.multiply((-368));
      complex5.log();
      Complex complex8 = Complex.NaN;
      complex8.sin();
      complex6.getImaginary();
      complex4.multiply(2049870754);
      Complex complex9 = Complex.ZERO;
      complex9.cosh();
      complex7.hashCode();
      complex8.sin();
      complex2.divide((-1.1508772192025259E-158));
      complex4.exp();
      complex3.createComplex(1.0, (-2.414213562373095));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.809247950589945E142, 0.0);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.multiply(1046);
      Complex complex2 = complex1.INF.conjugate();
      complex2.I.readResolve();
      Complex complex3 = complex1.exp();
      complex3.divide(0.0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.atan();
      complex6.multiply(0.0);
      complex4.ONE.abs();
      complex4.ONE.divide(complex0);
      complex2.tanh();
      complex1.divide((-7.159157201731446E-8));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(8.208715337901827E-9, Double.NaN);
      complex0.I.abs();
      Complex complex1 = Complex.ONE;
      complex1.ZERO.pow(0.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(5.3331719086630523E-8, 5.3331719086630523E-8);
      complex0.getField();
      Complex complex1 = complex0.multiply((-111));
      complex1.getArgument();
      Complex complex2 = complex1.NaN.asin();
      complex0.I.pow((-2.356194490192345));
      complex1.getArgument();
      complex2.ONE.cos();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.NaN.multiply((-2.356194490192345));
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.tanh();
      complex4.I.atan();
      Complex complex7 = complex6.sin();
      complex7.ONE.toString();
      complex2.abs();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex6.NaN.conjugate();
      Complex.valueOf(928.0);
      Complex complex10 = complex8.ZERO.log();
      complex10.ZERO.tanh();
      complex5.abs();
      complex6.isNaN();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex10.add(complex4);
      complex9.sinh();
      complex11.subtract(6.283185307179586);
      complex6.multiply((-2564));
      complex11.isNaN();
      complex0.reciprocal();
      complex12.multiply((-111));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(9.602293320384794E-8, 9.602293320384794E-8);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.add(9.602293320384794E-8);
      Complex complex4 = complex0.createComplex(9.602293320384794E-8, 1833.7825);
      Complex complex5 = complex3.subtract(0.0);
      complex1.toString();
      Complex complex6 = complex1.ONE.asin();
      complex4.getImaginary();
      complex0.INF.readResolve();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.multiply(complex2);
      complex8.ZERO.readResolve();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex9.INF.pow(1833.7825);
      complex10.readResolve();
      complex7.getReal();
      complex2.divide(0.0);
      complex0.acos();
      Complex complex11 = complex8.pow(0.0);
      Complex complex12 = complex4.add(1833.7825);
      complex12.ZERO.divide(complex2);
      Complex complex13 = complex11.cos();
      complex13.ZERO.sin();
      complex12.isInfinite();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(3093);
      Complex complex3 = complex1.ONE.multiply(3093);
      complex3.NaN.multiply(3093);
      complex2.ZERO.readResolve();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex4.exp();
      complex5.pow(complex0);
      complex5.I.multiply(3093);
      Complex complex6 = complex4.I.add(complex0);
      complex4.ZERO.getField();
      complex0.NaN.toString();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex0.subtract(complex7);
      Complex complex11 = complex7.tanh();
      complex4.cosh();
      complex8.pow((double) 3093);
      Complex complex12 = complex7.sqrt1z();
      complex2.ONE.tanh();
      complex12.ONE.getField();
      Complex complex13 = complex2.atan();
      complex8.I.divide(complex1);
      Complex complex14 = complex2.I.subtract((double) 3093);
      complex6.ZERO.toString();
      complex14.ZERO.multiply(complex13);
      Complex complex15 = complex2.pow((double) 3093);
      complex6.reciprocal();
      complex10.subtract((double) 3093);
      complex15.hashCode();
      complex5.isNaN();
      complex11.isNaN();
      complex9.subtract((double) 3093);
      complex11.sinh();
      complex15.tanh();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.INF.multiply(complex1);
      complex0.INF.add(complex1);
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(1689.665772907);
      complex0.isNaN();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2623.0), (-2623.0));
      Complex complex1 = complex0.INF.add((-2200.4163014));
      complex0.getArgument();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex1.I.divide((-1.0));
      Complex complex4 = complex1.createComplex((-2248.0), (-2248.0));
      complex4.INF.getField();
      complex3.equals(complex0);
      Complex complex5 = complex1.ONE.divide(0.0);
      Complex complex6 = complex3.atan();
      Complex complex7 = complex1.cos();
      complex7.ONE.divide(complex2);
      Complex complex8 = complex7.ZERO.cos();
      complex8.ONE.tan();
      Complex complex9 = complex7.I.sin();
      complex2.isInfinite();
      Complex complex10 = complex0.exp();
      complex4.negate();
      complex9.add((-445.28));
      Complex complex11 = complex3.negate();
      complex1.getArgument();
      complex9.hashCode();
      complex11.ONE.createComplex((-148.3874094911062), (-445.28));
      complex6.I.toString();
      complex6.toString();
      complex4.reciprocal();
      complex6.getArgument();
      Complex complex12 = complex5.createComplex((-2623.0), (-2.356194490192345));
      complex12.multiply(complex4);
      complex10.abs();
      complex11.sqrt();
      complex9.pow((-148.3874094911062));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      complex0.getImaginary();
      Complex.valueOf(2.0, 0.0);
      complex1.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.reciprocal();
      complex3.sqrt();
      Complex complex4 = new Complex(0.0, (-2950.12206063));
      complex2.cosh();
      Complex complex5 = complex3.INF.divide(complex4);
      Complex complex6 = complex4.I.divide(0.0);
      Complex complex7 = complex0.sinh();
      complex7.ONE.pow(complex5);
      Complex complex8 = complex5.exp();
      complex0.pow(complex2);
      complex5.asin();
      complex8.reciprocal();
      complex7.subtract(851.8);
      complex6.abs();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-9.692697614257269E-8));
      complex0.hashCode();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sin();
      complex3.INF.cos();
      Complex complex4 = complex3.ZERO.subtract(complex2);
      complex0.asin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.asin();
      complex6.getImaginary();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2.990535475079021E-239), (-2.990535475079021E-239));
      Complex complex2 = complex1.I.pow(complex0);
      complex2.I.exp();
      Complex complex3 = complex0.I.subtract(complex1);
      complex3.ONE.abs();
      Complex complex4 = complex0.tan();
      complex0.getImaginary();
      complex3.readResolve();
      complex1.getImaginary();
      complex3.asin();
      complex4.sqrt1z();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.ONE.negate();
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex0.ONE.cosh();
      complex0.isNaN();
      complex0.hashCode();
      complex7.I.atan();
      Complex complex8 = complex0.pow(Double.NaN);
      complex1.cos();
      Complex.valueOf((-20.0));
      complex7.getArgument();
      complex3.isInfinite();
      complex6.getImaginary();
      Complex complex9 = complex2.pow(complex1);
      complex9.NaN.conjugate();
      complex2.asin();
      complex5.log();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      complex8.equals("$06/c_(eR");
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.add(4047.39);
      complex2.INF.tan();
      complex2.NaN.getField();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.NaN.sqrt1z();
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.divide((-294.903512));
      complex5.I.add(complex3);
      Complex complex6 = complex3.tanh();
      complex6.ZERO.getField();
      complex4.subtract(4047.39);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-6.907085854395348E-8));
      Complex complex1 = complex0.pow((-6.907085854395348E-8));
      complex1.I.hashCode();
      complex1.ONE.cosh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.divide(complex0);
      complex3.INF.subtract((-6.907085854395348E-8));
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.NaN.add((-6.907085854395348E-8));
      complex5.getImaginary();
      Complex complex7 = complex4.conjugate();
      complex0.toString();
      Complex complex8 = complex2.sqrt1z();
      complex8.multiply((-6.907085854395348E-8));
      complex1.isNaN();
      complex5.getField();
      complex7.cosh();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(2110.2034, 2110.2034);
      complex0.NaN.abs();
      Complex complex1 = complex0.NaN.conjugate();
      complex1.ONE.getArgument();
      complex1.NaN.acos();
      Complex complex2 = complex0.log();
      int int0 = 0;
      Complex complex3 = complex0.multiply(0);
      complex3.ONE.cosh();
      Complex complex4 = complex2.sqrt1z();
      try { 
        complex4.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = new Complex(8.48292035519895E-10, 8.48292035519895E-10);
      Complex complex2 = complex0.subtract(complex1);
      Complex.valueOf(8.48292035519895E-10);
      Complex complex3 = complex2.cosh();
      complex3.I.reciprocal();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = new Complex(9.016946273084244E-9, 8.48292035519895E-10);
      Complex complex7 = complex2.ZERO.add(complex6);
      complex5.INF.nthRoot(2270);
      Complex complex8 = complex0.log();
      complex7.tanh();
      complex6.multiply(complex0);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(674.16788);
      Complex complex2 = complex0.I.tanh();
      complex2.ZERO.multiply(7);
      complex2.ONE.pow(1.3417105674743652);
      complex0.createComplex((-2.5866883048437488E280), (-2344.38));
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = 4.4940857547850743E-194;
      Complex complex0 = new Complex(4.4940857547850743E-194);
      Complex complex1 = complex0.reciprocal();
      complex1.I.conjugate();
      complex1.ZERO.conjugate();
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(1374.53012379883);
      complex0.getArgument();
      complex0.getArgument();
      complex1.createComplex(1374.53012379883, 0.0);
      Complex.valueOf(0.0);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1025.6, 1025.6);
      complex1.ZERO.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.ZERO.add(1.3861841053630075E-123);
      complex2.ZERO.abs();
      complex0.getReal();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex4.negate();
      complex6.reciprocal();
      complex5.createComplex(219.17220537, 5337.80526172);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.acos();
      complex2.hashCode();
      complex1.exp();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.INF.conjugate();
      complex0.I.sqrt1z();
      complex1.NaN.hashCode();
      Complex complex6 = complex4.I.multiply(complex3);
      complex6.pow((-3.861762510530086E240));
      complex0.getArgument();
      complex0.getArgument();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex0.divide(complex1);
      complex7.I.exp();
      complex5.INF.abs();
      Complex complex9 = complex1.exp();
      complex9.INF.pow((-3.861762510530086E240));
      complex7.sqrt();
      Complex complex10 = complex8.log();
      complex5.ZERO.hashCode();
      Complex complex11 = Complex.valueOf(0.0);
      complex10.getReal();
      Complex complex12 = complex5.divide(complex9);
      complex1.sqrt();
      complex10.tan();
      complex9.conjugate();
      Complex complex13 = complex12.cos();
      complex13.reciprocal();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex11.toString();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.divide((-1346.228153782644));
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.cos();
      complex2.INF.tanh();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = Complex.valueOf(Double.NaN, (-1346.228153782644));
      Complex.valueOf(2342.11975326002);
      complex7.ONE.subtract(complex3);
      complex7.ONE.nthRoot(1364);
      Complex complex8 = complex2.createComplex((-1067.4624409649), (-2296.3049222361));
      complex8.INF.pow(complex0);
      Complex.valueOf((-1346.228153782644), (-1.2277120342804144E295));
      complex0.asin();
      complex8.getReal();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex9.INF.tanh();
      complex10.ONE.negate();
      complex3.ONE.hashCode();
      complex5.pow(complex6);
      Complex complex11 = complex5.multiply(complex8);
      complex11.cos();
      Complex complex12 = complex11.multiply(1364);
      complex12.ZERO.reciprocal();
      complex3.isNaN();
      complex0.toString();
      complex8.reciprocal();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(488.1332, 488.1332);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.createComplex((-345.0), (-345.0));
      Object object0 = new Object();
      Complex complex3 = complex0.INF.createComplex((-3.861762510530086E240), (-3.861762510530086E240));
      Complex complex4 = complex3.I.pow(488.1332);
      Complex complex5 = complex1.cosh();
      complex5.I.toString();
      complex0.equals(object0);
      complex5.I.toString();
      Complex complex6 = complex0.exp();
      complex1.hashCode();
      complex1.getField();
      complex6.getField();
      complex0.abs();
      Complex complex7 = complex0.sinh();
      complex7.ONE.getField();
      complex5.cosh();
      Complex complex8 = complex2.pow(complex6);
      complex8.I.tanh();
      complex6.sin();
      complex4.add(690.3245916845785);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.multiply(1139);
      complex1.sqrt();
      Complex.valueOf(115.813096900488);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2013.0), (-1.0));
      Complex complex1 = Complex.valueOf((-2374.4754806597666));
      complex0.add(complex1);
      Complex complex2 = complex0.acos();
      complex2.I.multiply(complex0);
      complex2.INF.divide(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.cosh();
      complex4.ONE.getField();
      complex1.multiply((-1.0));
      complex2.sinh();
      complex1.createComplex((-2374.4754806597666), (-1.0));
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      complex1.ZERO.negate();
      complex1.ONE.sqrt();
      Complex complex2 = Complex.ONE;
      complex2.ONE.createComplex(0.0, 0.0);
      complex0.pow(complex2);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = Complex.ONE;
      complex2.ZERO.divide(0.0);
      Complex complex4 = complex2.INF.add(complex3);
      complex4.ZERO.atan();
      Complex complex5 = Complex.valueOf((-1.0));
      complex3.atan();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.subtract(1364.4);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex3.I.sqrt1z();
      Complex complex6 = complex0.ONE.asin();
      complex6.NaN.divide(1364.4);
      Complex complex7 = complex4.I.multiply(4299);
      complex7.ZERO.exp();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex10.I.pow((double) 4299);
      complex11.sinh();
      complex0.toString();
      complex2.ONE.sinh();
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex12.asin();
      complex13.I.pow(1226.789158855);
      complex10.pow(1364.4);
      complex9.getArgument();
      Complex complex14 = complex2.negate();
      complex14.NaN.multiply(1102.6559705642567);
      complex5.abs();
      Complex complex15 = complex3.exp();
      complex15.ZERO.createComplex(1.4142135623730951, 4299);
      complex8.equals(complex0);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      complex1.I.subtract((-1307.72996785869));
      Complex complex2 = complex0.sqrt1z();
      complex2.getReal();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.add(0.0);
      Complex complex1 = Complex.NaN;
      complex1.NaN.cos();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.multiply(2569);
      complex2.atan();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.divide(complex3);
      complex4.tanh();
      complex5.readResolve();
      complex6.sin();
      complex2.divide(2.337279322276433E-135);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4483.235897199);
      Complex complex1 = complex0.multiply(17);
      complex1.INF.getArgument();
      complex0.INF.sqrt();
      try { 
        complex0.nthRoot((-1123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,123
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.getImaginary();
      complex0.isInfinite();
      Complex complex1 = new Complex((-6.587776621471115E234));
      Complex complex2 = complex0.NaN.divide(complex1);
      complex1.ONE.cosh();
      complex2.NaN.toString();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex4.ONE.divide(complex1);
      complex1.log();
      complex5.abs();
      Complex complex6 = complex3.multiply(complex4);
      complex6.atan();
      complex2.multiply(1);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.INF.exp();
      complex1.multiply((-199.0));
      complex3.readResolve();
      Complex complex4 = complex0.sinh();
      complex0.ONE.add((-1604.81301));
      complex4.getReal();
      int int0 = 0;
      complex4.ONE.tanh();
      Complex complex5 = complex2.INF.sinh();
      complex5.ONE.cosh();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-2878.7071654), (-2878.7071654));
      Complex complex1 = complex0.INF.asin();
      complex1.I.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((-2878.7071654), (-4485.669878522));
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex0.atan();
      complex5.readResolve();
      Complex complex6 = complex0.multiply((-1.4652759033760925E-8));
      complex6.ZERO.negate();
      complex3.exp();
      complex0.reciprocal();
      complex2.createComplex(6.283185307179586, 6.283185307179586);
      complex5.acos();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(1504.12904991, 1504.12904991);
      complex0.I.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.NaN.multiply(complex1);
      complex0.INF.toString();
      Complex complex5 = complex2.I.asin();
      complex5.INF.getArgument();
      Complex complex6 = Complex.valueOf(1862.2146016318);
      complex6.ZERO.multiply(0);
      complex0.getImaginary();
      complex1.abs();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.ZERO.pow(complex2);
      Complex complex9 = complex5.log();
      complex5.equals(complex2);
      complex7.toString();
      complex7.NaN.cosh();
      Complex.valueOf((-438.2489392104));
      complex0.sin();
      complex0.toString();
      complex1.subtract(complex8);
      Complex complex10 = complex4.multiply(complex9);
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(2262.77624073);
      complex0.getReal();
      Complex complex1 = complex0.NaN.add(2262.77624073);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = new Complex(2262.77624073, 1.5793781280517578);
      Complex complex5 = complex4.ZERO.createComplex(2262.77624073, 0.0);
      Complex complex6 = new Complex(0.0, 1.5793781280517578);
      complex5.pow(complex6);
      Complex complex7 = complex4.ZERO.cosh();
      complex7.INF.subtract(1562.3752955282712);
      Complex complex8 = complex0.multiply(complex4);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.divide(2262.77624073);
      complex4.toString();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.INF.exp();
      complex12.ZERO.asin();
      complex1.isInfinite();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex13.subtract(complex8);
      complex13.readResolve();
      complex11.cos();
      complex3.NaN.divide(1.5793781280517578);
      complex14.acos();
      complex2.getImaginary();
      complex10.divide((-1278.01066));
      complex10.hashCode();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.add(complex0);
      complex2.INF.tanh();
      complex0.getImaginary();
      complex0.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-3214.71));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.I.atan();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex1.INF.multiply(complex4);
      Object object0 = new Object();
      complex3.NaN.hashCode();
      complex2.equals(object0);
      Complex.valueOf(1200.87119917, (-1649.953235));
      Complex complex8 = complex0.negate();
      complex8.INF.getField();
      complex7.sqrt1z();
      Complex complex9 = Complex.valueOf((-608.943627264955), 0.0);
      complex9.NaN.pow(complex5);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.exp();
      complex2.I.tan();
      complex1.hashCode();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = complex0.createComplex((-1.1508772192025259E-158), (-1.1508772192025259E-158));
      complex5.multiply((-368));
      Complex complex6 = complex5.log();
      complex6.NaN.sin();
      complex5.getImaginary();
      Complex complex7 = complex0.multiply((-368));
      complex4.cosh();
      complex0.hashCode();
      complex7.sin();
      Complex complex8 = complex7.divide((-1.1508772192025259E-158));
      complex8.exp();
      complex8.createComplex(0.0, (-1.1508772192025259E-158));
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3572.5143935363617, 3572.5143935363617);
      Complex complex1 = complex0.INF.divide(3572.5143935363617);
      complex1.INF.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.tanh();
      complex1.multiply(0);
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.ONE.sqrt();
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex7.NaN.sinh();
      complex7.NaN.getField();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex9 = new Complex((-982.10425786));
      complex9.getField();
      Complex complex10 = complex2.multiply(0);
      Complex complex11 = complex9.I.negate();
      complex1.pow(complex9);
      Complex complex12 = complex2.I.reciprocal();
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      complex3.isInfinite();
      Complex complex13 = complex0.atan();
      assertEquals(1.3995744688251373E-4, complex13.getImaginary(), 0.01);
      assertEquals(1.5706563693443587, complex13.getReal(), 0.01);
      
      complex2.add((-982.10425786));
      Complex complex14 = complex2.pow(complex1);
      Complex.valueOf(2468.717503925027, (-1268.0));
      complex2.add(0.0);
      Complex complex15 = complex0.cosh();
      complex11.getArgument();
      complex3.isInfinite();
      complex10.sin();
      Complex complex16 = complex2.tan();
      complex10.add(complex9);
      assertTrue(complex10.equals((Object)complex1));
      
      Complex complex17 = complex4.multiply(305);
      assertTrue(complex3.equals((Object)complex6));
      assertNotSame(complex17, complex14);
      assertSame(complex17, complex8);
      
      complex5.getImaginary();
      assertTrue(complex5.equals((Object)complex16));
      assertTrue(complex2.equals((Object)complex15));
  }
}
