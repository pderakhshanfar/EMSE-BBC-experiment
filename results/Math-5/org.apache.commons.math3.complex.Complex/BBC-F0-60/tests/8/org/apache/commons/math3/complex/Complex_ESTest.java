/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:37:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(1.058213771597129E-7);
      complex3.multiply(complex0);
      Complex complex4 = Complex.valueOf(3069.9694182);
      complex4.hashCode();
      complex1.asin();
      Complex complex5 = complex3.multiply(146);
      complex2.pow(1.2336299419403076);
      Complex complex6 = complex2.acos();
      complex3.sinh();
      complex5.nthRoot(146);
      Complex complex7 = Complex.INF;
      complex7.multiply(146);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1521.217866, 1521.217866);
      Complex complex1 = new Complex(0.41421356237309515, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex0.acos();
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7);
      Complex complex1 = complex0.asin();
      complex1.tanh();
      complex1.subtract(complex0);
      Complex complex2 = new Complex((-20.0), (-248.56769608));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.7853981633974483, 20.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.multiply(complex1);
      complex0.tan();
      Complex.valueOf(118.14);
      complex3.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.I.pow(1.1373425785132867E221);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ONE.subtract((-1861.229618889057));
      Complex complex6 = complex0.ZERO.atan();
      complex1.toString();
      complex5.NaN.sqrt1z();
      Complex complex7 = complex0.conjugate();
      complex7.INF.subtract((-2615.0136145));
      complex7.getField();
      complex6.multiply(1.0);
      complex2.INF.acos();
      complex0.ZERO.getField();
      complex2.toString();
      complex6.multiply(complex2);
      Complex complex8 = complex2.sqrt();
      complex1.conjugate();
      complex2.ZERO.pow(complex8);
      complex7.conjugate();
      Complex complex9 = complex7.atan();
      complex9.INF.sin();
      complex0.add((-2542.3));
      Complex complex10 = complex2.multiply(complex1);
      try { 
        complex10.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.abs();
      Complex complex2 = complex1.tan();
      complex1.isInfinite();
      complex2.subtract(complex1);
      Complex complex3 = complex2.sinh();
      complex1.sqrt();
      Complex complex4 = complex2.acos();
      complex3.toString();
      complex4.acos();
      Complex complex5 = complex4.negate();
      complex4.multiply(complex0);
      complex5.I.acos();
      complex3.readResolve();
      complex5.hashCode();
      complex5.cos();
      complex2.divide(1.908415302517694E-250);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      complex1.I.getField();
      complex1.NaN.getArgument();
      complex0.subtract(complex1);
      complex1.ONE.divide(complex0);
      Complex complex2 = Complex.valueOf((-20.0));
      Complex.valueOf(Double.NaN);
      complex2.subtract((-640.3041004741309));
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.abs();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.abs();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(710.0, (-20.0));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.tan();
      complex2.ONE.multiply(710.0);
      Complex complex3 = complex2.conjugate();
      complex0.ZERO.getArgument();
      Complex complex4 = complex3.negate();
      complex1.abs();
      complex3.readResolve();
      complex1.nthRoot(2147424341);
      complex4.pow((-1583.0));
      complex1.multiply((-1583.0));
      Complex complex5 = complex4.acos();
      complex5.NaN.log();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.sqrt();
      complex3.NaN.conjugate();
      Complex.valueOf(63.69965347);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.ONE.multiply(63.69965347);
      complex2.I.tanh();
      Complex.valueOf((-2613.47600019));
      complex0.nthRoot(37);
      Complex complex7 = complex1.multiply(1.3430713954289087E118);
      complex3.reciprocal();
      Complex complex8 = complex7.I.pow(complex5);
      complex0.ONE.asin();
      Complex complex9 = complex3.createComplex((-2613.47600019), 3289.9534551);
      complex9.I.toString();
      Complex complex10 = complex7.divide(3289.9534551);
      complex8.negate();
      complex2.add(750.807563);
      complex0.nthRoot(37);
      complex10.tan();
      complex4.pow(complex8);
      complex6.tanh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-295.84876094), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.INF;
      complex4.reciprocal();
      complex1.hashCode();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex((-295.84876094));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(1.6997387217850427E171);
      complex1.sqrt1z();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2622, 2622);
      complex0.acos();
      Complex complex1 = complex0.exp();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-786.186328247));
      Complex complex1 = complex0.asin();
      complex0.abs();
      complex0.log();
      complex1.reciprocal();
      complex0.tan();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.603390043);
      complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(complex0);
      complex0.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.log();
      complex4.tan();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex5.tanh();
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(426.1, (-722.257541095403));
      Complex complex1 = new Complex(426.1);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.NaN.pow((-722.257541095403));
      Complex.valueOf((-722.257541095403));
      Complex complex4 = Complex.valueOf((-722.257541095403), (-846.2));
      complex0.ZERO.conjugate();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.add(103.33612786565);
      Complex complex7 = complex6.conjugate();
      complex6.divide(103.33612786565);
      complex4.pow((-1.0));
      Complex complex8 = complex7.add(1583.853799);
      Complex complex9 = complex8.ONE.reciprocal();
      complex9.I.add(1.0582137715343053E-7);
      complex0.divide(complex7);
      Complex.valueOf(103.33612786565);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(2777.121187298839, 2777.121187298839);
      Complex complex1 = complex0.multiply(2777.121187298839);
      complex0.ONE.cosh();
      complex1.multiply((-6.793094743406533E110));
      Complex.valueOf(2777.121187298839, 2777.121187298839);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.058213771597129E-7, 1102.923174302);
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(complex1);
      Complex.valueOf(3069.9694182);
      complex2.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ZERO;
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(342.02851933, (-3382.56));
      Complex complex1 = complex0.divide((-1146.7541013));
      Complex complex2 = complex1.ZERO.tan();
      complex1.log();
      Complex complex3 = Complex.valueOf((-1146.7541013), Double.NaN);
      complex3.ZERO.divide(complex2);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN);
      complex1.toString();
      Complex complex2 = new Complex(Double.NaN, 2110.1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = new Complex(856.341425, 2543.4);
      complex2.multiply(complex3);
      Complex.valueOf(856.341425);
      Complex complex6 = complex4.log();
      complex1.tan();
      complex6.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.029878114318277E237));
      Complex complex1 = Complex.valueOf((-9.029878114318277E237), (-203.5240630559137));
      complex0.INF.add(complex1);
      complex0.divide((-9.029878114318277E237));
      complex1.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-9.029878114318277E237), (-203.5240630559137));
      complex2.ONE.log();
      complex2.readResolve();
      complex0.I.asin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.sinh();
      complex4.ONE.divide((-9.029878114318277E237));
      Complex complex5 = complex1.multiply((-1900));
      complex1.cosh();
      Complex complex6 = Complex.valueOf((-1.1102230246251565E-16), (-1.1102230246251565E-16));
      Complex complex7 = complex0.pow(complex6);
      complex1.subtract(complex5);
      complex5.cos();
      complex7.acos();
      complex3.equals("");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(Double.NaN);
      complex0.multiply(Double.NaN);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(65813.33137244161, 65813.33137244161);
      Complex complex1 = Complex.valueOf(20.0, 65813.33137244161);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 20.0);
      complex2.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.NaN;
      complex3.abs();
      complex0.log();
      complex4.reciprocal();
      complex1.tan();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.ZERO;
      complex0.asin();
      Complex complex2 = Complex.NaN;
      complex2.hashCode();
      Complex complex3 = Complex.NaN;
      complex3.abs();
      complex2.log();
      Complex complex4 = new Complex((-1152.4058), Double.NaN);
      complex3.multiply(Double.NaN);
      // Undeclared exception!
      complex0.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7);
      Complex complex1 = complex0.asin();
      complex0.subtract(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = Complex.valueOf(1.058213771597129E-7, 2238.83640588778);
      complex3.divide((-381.8));
      complex0.tanh();
      Object object0 = new Object();
      Complex complex5 = Complex.valueOf(1.058213771597129E-7, (-812.09356973));
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(20.0, (-843.9));
      Complex complex4 = Complex.valueOf((-3154.062));
      Complex complex5 = complex4.pow(complex3);
      Complex.valueOf((-3154.062), 400.8318775);
      complex2.divide(1.058213771597129E-7);
      Complex complex6 = complex5.tanh();
      Object object0 = new Object();
      complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(1.058213771597129E-7, 2238.83640588778);
      complex3.multiply(complex0);
      complex3.hashCode();
      Complex complex4 = Complex.NaN;
      complex0.abs();
      complex0.log();
      Complex complex5 = complex2.reciprocal();
      complex0.tan();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-656.8));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.multiply(complex0);
      complex1.hashCode();
      complex3.isInfinite();
      complex4.equals(complex0);
      complex2.sqrt();
      complex3.conjugate();
      complex1.getReal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-254690583));
      complex0.I.add(complex1);
      complex0.multiply(3450.35230818);
      complex0.multiply(3450.35230818);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ZERO.divide((-1146.7541013));
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex4.ONE.exp();
      complex3.divide(Double.NaN);
      complex1.tanh();
      Complex complex6 = new Complex(3680.0576028283);
      Complex complex7 = new Complex(3230.839, 3680.0576028283);
      complex7.negate();
      Complex complex8 = Complex.NaN;
      complex5.add(2082.625397054099);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.058213771597129E-7, 1102.923174302);
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(complex1);
      complex0.getArgument();
      Complex complex3 = complex0.multiply(1102.923174302);
      complex1.readResolve();
      Complex complex4 = new Complex(1.058213771597129E-7, (-276.0433364619));
      complex2.reciprocal();
      Complex complex5 = complex3.multiply((-2147482019));
      complex0.pow(0.0);
      complex5.acos();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = (-1146.7541013);
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.atan();
      complex1.NaN.pow(complex0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.cosh();
      complex3.I.pow(855.049);
      Complex complex4 = complex1.pow(complex2);
      try { 
        complex4.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1875.0224188, 1875.0224188);
      Complex complex1 = complex0.ONE.log();
      complex1.INF.getArgument();
      Complex complex2 = complex1.ONE.createComplex(2.0, 0.7853981633974483);
      complex2.nthRoot(337);
      Complex complex3 = complex0.sin();
      Complex.valueOf((-522.21229769), (-522.21229769));
      Complex complex4 = complex3.sin();
      complex4.INF.sqrt();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = Complex.valueOf(8.403812719710588E8);
      complex5.ZERO.asin();
      complex2.pow((-1006.0206327));
      complex6.asin();
      complex0.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(65813.33137244161, 65813.33137244161);
      Complex complex1 = complex0.asin();
      complex0.asin();
      Complex complex2 = Complex.valueOf(2.0, (-2550.0));
      Complex complex3 = new Complex(2.0, 65813.33137244161);
      complex1.tanh();
      complex3.getArgument();
      complex2.multiply(65813.33137244161);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.058213771597129E-7, 1102.923174302);
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(complex1);
      complex1.divide((-389.136349618743));
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex(1102.923174302);
      complex3.negate();
      complex1.hashCode();
      complex0.abs();
      complex3.log();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-1558.284), (-389.136349618743));
      complex6.getImaginary();
      Complex complex7 = complex2.divide(1.058213771597129E-7);
      complex7.subtract(787.73);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(1039);
      complex0.hashCode();
      complex0.abs();
      complex0.log();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf((-649.9424619), (-649.9424619));
      complex4.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-656.8));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.multiply(complex0);
      complex1.hashCode();
      complex3.isInfinite();
      complex4.equals(complex0);
      complex2.sqrt();
      complex3.conjugate();
      complex1.getReal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = Complex.valueOf(810.841);
      Complex complex2 = new Complex(810.841, Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      complex1.multiply(1);
      complex2.pow(875.0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.sinh();
      int int0 = 2144838445;
      complex0.I.multiply(2144838445);
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.add(1441.36682615);
      // Undeclared exception!
      complex1.ZERO.nthRoot(2144838445);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(810.841);
      Complex complex1 = complex0.INF.asin();
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.ZERO.subtract(complex0);
      Complex complex3 = complex1.NaN.multiply(complex0);
      complex0.hashCode();
      complex0.asin();
      complex2.exp();
      complex1.getArgument();
      Complex complex4 = Complex.valueOf(Double.NaN, (-6708.488));
      complex4.getReal();
      Complex complex5 = Complex.NaN;
      complex0.I.add(complex5);
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex3.divide(1288.92531807626);
      complex6.hashCode();
      Complex complex7 = Complex.NaN;
      complex2.getReal();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(174.5032, 174.5032);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(174.5032, (-3382.56));
      Complex complex4 = complex3.divide((-3575.4716));
      Complex complex5 = complex4.tanh();
      complex3.getArgument();
      Complex complex6 = complex2.multiply(7.597249350510538E-6);
      complex5.readResolve();
      Complex complex7 = complex5.asin();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.subtract(complex3);
      Complex complex10 = Complex.NaN;
      complex9.sqrt();
      complex7.conjugate();
      complex4.getReal();
      complex6.sqrt();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(45.79333017412342, 45.79333017412342);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(174.5032, 174.5032);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(174.5032, (-3382.56));
      Complex complex4 = complex3.divide((-3575.4716));
      Complex complex5 = complex4.tanh();
      complex3.getArgument();
      complex2.multiply(7.597249350510538E-6);
      complex5.readResolve();
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.subtract(complex3);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.multiply(908);
      complex5.getReal();
      complex6.abs();
      complex9.hashCode();
      Complex complex11 = Complex.ONE;
      complex11.reciprocal();
      complex10.sqrt1z();
      complex0.subtract(2.5526681615684215E63);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.exp();
      complex2.getArgument();
      Complex complex4 = Complex.valueOf(810.841);
      complex4.multiply(-0.0);
      complex2.readResolve();
      Complex complex5 = complex1.asin();
      Complex complex6 = Complex.ZERO;
      complex3.subtract(complex6);
      Complex complex7 = Complex.NaN;
      complex0.multiply(1234);
      Complex complex8 = Complex.ONE;
      complex8.getReal();
      complex3.abs();
      complex4.hashCode();
      complex8.reciprocal();
      complex0.sqrt1z();
      Complex complex9 = Complex.valueOf((-2528.8496414), (-2528.8496414));
      complex9.subtract(871.513);
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(810.841);
      Complex complex1 = complex0.INF.asin();
      complex0.ZERO.subtract(complex0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex0.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.negate();
      complex4.hashCode();
      complex1.abs();
      complex0.log();
      complex3.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7, 1.058213771597129E-7);
      Complex complex1 = complex0.ONE.add(1.058213771597129E-7);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex2.exp();
      complex4.isInfinite();
      complex1.equals(complex2);
      Complex complex5 = complex3.sqrt();
      complex5.conjugate();
      complex1.getReal();
      Complex complex6 = Complex.I;
      complex6.sqrt();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.613657850210907E-205, (-3.143132253171643E-4));
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
      Complex complex2 = complex0.conjugate();
      complex2.readResolve();
      complex0.subtract(1.058213771597129E-7);
      Complex complex3 = complex0.sinh();
      complex0.divide(1.9372589859580955E-8);
      complex3.cosh();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      Complex complex1 = Complex.valueOf((-1146.7541013), 0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(complex1);
      complex3.readResolve();
      Complex complex4 = complex0.subtract((-1146.7541013));
      complex4.sinh();
      Complex complex5 = complex4.divide(1392.9691755);
      complex5.cosh();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1590.77));
      Complex complex1 = Complex.valueOf((-1590.77));
      complex1.subtract(complex0);
      complex1.tanh();
      Complex complex2 = new Complex((-1590.77));
      complex2.exp();
      Complex complex3 = Complex.valueOf((double) 1789);
      complex3.multiply(7);
      complex2.pow((double) 7);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-3575.4716), (-3575.4716));
      Complex complex1 = complex0.reciprocal();
      complex1.getArgument();
      complex1.getReal();
      Complex complex2 = complex1.asin();
      complex2.readResolve();
      Complex complex3 = complex1.add(2.356194490192345);
      complex2.multiply(complex1);
      Complex complex4 = Complex.ONE;
      complex4.nthRoot(4202);
      complex3.pow(complex0);
      complex3.pow(complex1);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.77));
      Complex complex1 = complex0.pow((-2284.910723267473));
      complex0.hashCode();
      complex1.abs();
      Complex complex2 = complex1.log();
      complex2.tan();
      Complex complex3 = Complex.ONE;
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1493.94279));
      double double0 = -0.0;
      Complex complex1 = Complex.valueOf(-0.0, (-1493.94279));
      complex1.I.abs();
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.sqrt();
      complex2.NaN.sqrt();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ZERO.divide((-1146.7541013));
      Complex complex4 = complex1.ZERO.tanh();
      complex4.ONE.exp();
      complex0.getArgument();
      Complex complex5 = complex2.multiply((-1146.7541013));
      complex4.readResolve();
      complex4.asin();
      complex0.subtract(complex5);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.multiply(908);
      complex2.getReal();
      complex1.abs();
      complex0.hashCode();
      complex3.reciprocal();
      complex2.sqrt1z();
      complex7.subtract(Double.NaN);
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1590.77));
      Complex complex1 = Complex.valueOf((-1590.77));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex((-1590.77));
      complex4.exp();
      complex3.getArgument();
      complex2.getReal();
      Complex complex5 = complex4.asin();
      complex5.add(0.0);
      Complex complex6 = complex3.multiply(complex2);
      try { 
        complex6.nthRoot((-228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -228
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf((-1153.8798853767564), 1590.77);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.pow(1590.77);
      complex4.sinh();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex1.createComplex((-1153.8798853767564), 2.0);
      complex6.divide((-1146.7541013));
      complex7.asin();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = new Complex(1.0);
      complex7.divide(complex9);
      complex8.divide(1.058213771597129E-7);
      Complex.valueOf(1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7, 1.058213771597129E-7);
      Complex complex1 = complex0.ONE.add(1.058213771597129E-7);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex0.negate();
      complex0.hashCode();
      complex4.abs();
      complex2.log();
      complex0.tan();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.cos();
      complex2.multiply((-4.4100097152254264E-8));
      Complex complex5 = complex3.divide(1484.79573);
      complex3.conjugate();
      complex4.subtract(2.144047260284424);
      complex5.multiply((-0.3209979208897167));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = Complex.valueOf(1484.79573, (-1.90006842784209E8));
      complex6.toString();
      Complex complex9 = complex5.multiply(1484.79573);
      complex1.readResolve();
      complex8.asin();
      complex7.subtract(complex6);
      complex8.multiply(3157);
      complex2.getReal();
      complex9.abs();
      complex4.hashCode();
      complex8.reciprocal();
      complex1.sqrt1z();
      Complex complex10 = Complex.ZERO;
      complex10.subtract(3.35462624207139E-4);
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1590.77));
      Complex complex1 = Complex.valueOf((-1590.77));
      Complex complex2 = complex0.pow((-454.942519));
      complex0.multiply(complex1);
      Complex complex3 = complex2.sinh();
      complex0.tan();
      complex3.abs();
      complex2.sinh();
      try { 
        complex2.nthRoot((-517));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -517
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      complex1.ZERO.abs();
      Complex complex2 = complex1.subtract(complex0);
      complex1.atan();
      Complex complex3 = Complex.valueOf(0.0, 541.812);
      Complex complex4 = complex3.multiply(complex2);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-1590.77));
      Complex complex1 = Complex.valueOf((-1590.77));
      Complex complex2 = complex1.subtract(complex0);
      complex1.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.exp();
      complex5.isInfinite();
      Complex complex6 = Complex.NaN;
      complex6.equals(complex2);
      Complex complex7 = complex3.sqrt();
      complex0.conjugate();
      complex0.getReal();
      complex7.sqrt();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(810.841);
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      complex2.NaN.multiply(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.multiply(complex3);
      complex5.nthRoot(1441);
      Complex complex6 = new Complex(1315041.9688475241);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1590.77));
      Complex complex1 = new Complex(2419.473, 2419.473);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.divide((double) (-551));
      complex2.tanh();
      Complex complex4 = complex3.exp();
      complex0.getArgument();
      complex2.getReal();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.add(Double.NEGATIVE_INFINITY);
      complex2.multiply(complex5);
      try { 
        complex6.nthRoot((-551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -551
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.I.negate();
      complex5.NaN.toString();
      complex4.getArgument();
      Complex complex6 = complex3.I.sqrt1z();
      Complex complex7 = complex4.pow(-0.0);
      Complex complex8 = complex7.ONE.acos();
      complex3.sqrt1z();
      complex7.I.readResolve();
      complex3.getField();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex0.subtract(0.0);
      Complex complex11 = complex9.conjugate();
      complex11.ZERO.add(complex1);
      complex11.NaN.divide(0.0);
      Complex complex12 = Complex.INF;
      Complex complex13 = complex10.conjugate();
      complex13.tanh();
      complex9.getReal();
      complex8.NaN.reciprocal();
      complex12.subtract(133.917949821608);
      Complex complex14 = complex11.cos();
      complex10.multiply(786);
      Complex complex15 = complex14.pow((double) 786);
      complex0.ONE.readResolve();
      Complex.valueOf(133.917949821608);
      complex15.asin();
      complex5.isInfinite();
      complex14.add(complex10);
      complex12.divide(0.0);
      Complex complex16 = Complex.INF;
      complex6.divide(complex16);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1.1918070206953359E-228), (-1146.7541013));
      Complex complex1 = complex0.add(2.0000002116427655);
      complex0.ZERO.toString();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex1.negate();
      complex4.hashCode();
      complex1.abs();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-422.82038473798), (-2498.1));
      complex0.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.divide((-3617.54911145));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.exp();
      complex5.getArgument();
      complex4.getReal();
      complex1.asin();
      complex2.add((-1.3984169249169816E-4));
      Complex complex6 = new Complex((-2498.1), (-422.82038473798));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.77));
      complex0.pow((-2284.910723267473));
      Complex complex1 = complex0.multiply((-2284.910723267473));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.nthRoot(182);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ZERO.divide((-1146.7541013));
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex4.ONE.exp();
      complex0.getArgument();
      complex0.getReal();
      complex3.asin();
      complex3.add(768.33752328);
      Complex.valueOf((-58.451956344), 29.0);
      Complex complex6 = complex5.multiply(complex1);
      complex0.nthRoot(2205);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3239.7018872), (-3239.7018872));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.acos();
      complex2.NaN.getField();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.I.asin();
      complex4.ONE.pow((-3239.7018872));
      Complex complex5 = complex0.sinh();
      complex2.I.reciprocal();
      complex0.hashCode();
      Complex complex6 = complex5.I.createComplex(0.0, 0.0);
      complex0.divide((-3239.7018872));
      Complex complex7 = complex0.asin();
      complex7.getArgument();
      complex2.divide(complex6);
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-1590.77));
      Complex complex1 = Complex.valueOf((-1590.77));
      complex1.subtract(complex0);
      complex1.I.atan();
      complex0.multiply(complex1);
      try { 
        complex0.nthRoot((-551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -551
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.cosh();
      complex3.I.pow(855.049);
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.INF.divide(complex2);
      complex2.hashCode();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex4.INF.divide((-1488.12));
      complex7.ONE.tan();
      Complex complex8 = complex0.divide((-1488.12));
      Complex complex9 = complex6.add((-1790.0));
      complex9.ZERO.getArgument();
      complex8.getArgument();
      complex0.multiply(690.94345);
      Complex complex10 = complex2.cos();
      complex10.INF.hashCode();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1.058213771597129E-7, 1.058213771597129E-7);
      Complex complex1 = complex0.ONE.add(1.058213771597129E-7);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex0.negate();
      complex0.hashCode();
      complex4.abs();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.negate();
      complex1.ONE.getArgument();
      Complex complex3 = complex1.ZERO.createComplex((-832.4394078755811), (-1.0));
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex1.conjugate();
      complex5.NaN.divide(0.0);
      complex3.ZERO.pow(complex5);
      complex5.isInfinite();
      Complex complex6 = Complex.valueOf((-832.4394078755811), (-1.0482571326594316E-8));
      complex6.NaN.toString();
      complex3.cosh();
      complex3.exp();
      complex0.I.readResolve();
      complex2.getField();
      complex0.divide(complex2);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.createComplex(1089.37, 1089.37);
      complex2.NaN.multiply(1058);
      Complex complex3 = complex1.ZERO.add(complex2);
      complex3.NaN.reciprocal();
      complex1.I.readResolve();
      complex0.acos();
      Complex complex4 = complex1.cos();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex3.NaN.multiply(621);
      complex4.ZERO.exp();
      complex0.getArgument();
      Complex complex5 = complex2.cos();
      complex2.I.add(Double.NaN);
      complex2.INF.sqrt();
      Complex complex6 = complex2.ONE.divide(0.0);
      complex1.getArgument();
      Complex complex7 = complex2.add(Double.NaN);
      Complex complex8 = complex7.INF.cosh();
      complex7.ZERO.hashCode();
      Complex complex9 = complex7.createComplex(Double.NaN, Double.NaN);
      complex1.multiply(complex6);
      complex9.ONE.divide(0.0);
      complex1.getArgument();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex10.I.pow(complex3);
      Complex complex12 = complex2.acos();
      complex2.getField();
      complex12.INF.getField();
      Complex complex13 = complex2.negate();
      complex9.sqrt1z();
      complex9.pow(complex12);
      complex10.add(complex13);
      complex12.hashCode();
      complex8.I.createComplex((-21.34084544919), (-1.650155887561251E-8));
      complex5.acos();
      complex11.subtract(complex8);
      complex10.nthRoot(621);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      complex1.ZERO.conjugate();
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.divide(5007.08499835);
      Complex complex4 = complex3.NaN.add(2872.2207943756);
      complex4.ZERO.nthRoot(3534);
      Complex complex5 = complex4.NaN.atan();
      complex5.INF.exp();
      Complex complex6 = complex1.subtract(5007.08499835);
      complex6.ONE.divide(5007.08499835);
      complex3.getImaginary();
      complex2.getArgument();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.I.pow(complex6);
      complex0.toString();
      Complex complex9 = complex0.INF.sqrt();
      Complex complex10 = complex7.sinh();
      complex10.NaN.tan();
      complex1.tan();
      complex4.asin();
      complex9.abs();
      Complex complex11 = complex8.exp();
      complex2.add(0.0);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.I;
      complex0.ZERO.subtract(complex1);
      Complex complex2 = complex0.sin();
      complex1.ZERO.pow(complex2);
      Complex complex3 = complex0.pow((-32.44996175444));
      complex2.I.exp();
      complex2.add((-32.44996175444));
      complex2.toString();
      complex3.INF.getField();
      complex1.getField();
      complex1.getField();
      complex3.cosh();
      complex2.isNaN();
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.NaN.cos();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.exp();
      complex4.ZERO.getField();
      complex4.NaN.createComplex(1140.8604400748, 1.021996184153141E185);
      Complex complex5 = complex0.I.acos();
      complex0.INF.getArgument();
      complex0.isNaN();
      Complex complex6 = complex3.tan();
      complex6.INF.abs();
      complex1.negate();
      complex2.subtract(1.021996184153141E185);
      Complex complex7 = Complex.valueOf(0.0, 2813.82866);
      complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0381848020926893E-8, 1.0381848020926893E-8);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(665);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.acos();
      complex3.ONE.abs();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.ZERO.tanh();
      complex4.ONE.cosh();
      Complex complex6 = Complex.valueOf((double) 665);
      complex6.ZERO.cosh();
      complex0.getImaginary();
      complex2.getReal();
      Complex complex7 = complex2.pow((double) 665);
      complex7.subtract(complex3);
      complex7.getImaginary();
      Complex.valueOf(0.0);
      Complex complex8 = complex7.I.pow(complex3);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.ZERO.pow(Double.NaN);
      complex10.INF.sqrt1z();
      complex3.asin();
      Complex complex11 = complex0.multiply(665);
      complex11.I.sqrt();
      complex1.exp();
      Complex.valueOf((-1402.58348044));
      complex3.getReal();
      complex8.getField();
      complex3.sinh();
      complex3.negate();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.ONE.atan();
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex2.I.add(complex1);
      complex3.ZERO.negate();
      Complex complex4 = complex0.I.divide(complex1);
      complex4.getArgument();
      complex0.conjugate();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.conjugate();
      complex1.readResolve();
      complex2.subtract(1391.88);
      Complex complex3 = complex2.sinh();
      complex3.divide(2.739090595934893E-119);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(810.841);
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex1.INF.asin();
      complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex1.hashCode();
      complex0.asin();
      Complex complex4 = complex1.asin();
      complex4.ONE.exp();
      complex1.isInfinite();
      complex2.equals(complex1);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex3.conjugate();
      complex6.getReal();
      complex6.sqrt();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.multiply(255.78);
      try { 
        complex3.ONE.nthRoot((-1727));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,727
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.098547586845664E-245, 3.098547586845664E-245);
      Complex complex1 = new Complex(3.098547586845664E-245, 3.098547586845664E-245);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.NaN.acos();
      double double0 = Double.POSITIVE_INFINITY;
      complex3.NaN.createComplex(Double.POSITIVE_INFINITY, 3267.1);
      complex2.abs();
      complex0.isInfinite();
      Complex complex4 = complex1.multiply((-45.24668471677914));
      int int0 = 3094;
      try { 
        complex4.I.nthRoot((-852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -852
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.INF.add(0.0);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.I.negate();
      complex4.NaN.toString();
      complex3.getArgument();
      Complex complex5 = complex2.I.sqrt1z();
      Complex complex6 = complex3.pow(-0.0);
      Complex complex7 = complex6.ONE.acos();
      complex2.sqrt1z();
      complex6.I.readResolve();
      complex2.getField();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex0.subtract(0.0);
      Complex complex10 = complex8.conjugate();
      complex10.ZERO.add(complex1);
      Complex complex11 = complex4.acos();
      Complex complex12 = complex9.conjugate();
      complex12.tanh();
      complex8.getReal();
      complex7.NaN.reciprocal();
      complex11.subtract(133.917949821608);
      Complex complex13 = complex10.cos();
      complex9.multiply(786);
      Complex complex14 = complex13.pow((double) 786);
      complex0.ONE.readResolve();
      Complex.valueOf(133.917949821608);
      complex14.asin();
      complex7.isNaN();
      complex13.add(complex9);
      complex11.divide(0.0);
      Complex complex15 = Complex.INF;
      complex5.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.getArgument();
      complex0.nthRoot(1334);
      Complex complex2 = complex0.subtract((double) 1334);
      Complex complex3 = complex2.INF.sqrt();
      complex3.NaN.multiply(0);
      complex3.getArgument();
      complex3.NaN.atan();
      Complex complex4 = complex1.NaN.log();
      complex0.getImaginary();
      Complex complex5 = complex2.ONE.atan();
      complex5.ONE.add(66.059108597);
      Complex complex6 = complex2.add(complex0);
      complex6.readResolve();
      complex1.NaN.reciprocal();
      complex2.equals("/ K>x!.>");
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.ONE.createComplex(1334, 1451.923357586435);
      Complex complex9 = complex8.NaN.divide(complex0);
      complex9.I.tanh();
      complex1.I.createComplex(0.36290550231933594, 1334);
      complex1.divide((-3701.29405));
      Complex complex10 = Complex.ZERO;
      complex4.subtract(complex10);
      complex7.nthRoot(1);
      complex10.pow(203.1007568);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3239.7018872), (-3239.7018872));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.ONE.acos();
      complex3.NaN.getField();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.I.asin();
      complex5.ONE.pow((-3239.7018872));
      Complex complex6 = complex0.sinh();
      complex3.I.reciprocal();
      complex0.hashCode();
      complex6.I.createComplex(0.0, 0.0);
      complex2.divide((-3239.7018872));
      Complex complex7 = complex2.asin();
      complex7.getArgument();
      Complex complex8 = new Complex(1.0);
      complex3.divide(complex8);
      complex7.divide(0.0);
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow(216.414349737);
      Complex complex2 = complex1.ONE.multiply(0);
      complex0.getArgument();
      complex0.multiply((double) 0);
      complex0.isInfinite();
      complex2.asin();
      complex2.conjugate();
      complex0.hashCode();
      complex2.createComplex((-2557.903962384071), 1769.7);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-3575.4716), (-3575.4716));
      Complex complex1 = complex0.reciprocal();
      complex0.INF.multiply(1789);
      complex1.pow((-3575.4716));
      complex1.ONE.acos();
      complex0.multiply((-3575.4716));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      complex1.ZERO.abs();
      Complex complex2 = complex0.pow((-20.0));
      complex0.multiply(complex2);
      Complex complex3 = complex1.sinh();
      complex1.ONE.tan();
      complex3.INF.abs();
      complex3.sinh();
      try { 
        complex3.nthRoot((-517));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -517
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.NaN.negate();
      complex4.I.tanh();
      complex0.ZERO.abs();
      complex2.getImaginary();
      Complex complex5 = complex0.sinh();
      complex5.I.readResolve();
      Complex complex6 = complex5.subtract(complex1);
      complex6.pow((-571.2433));
      complex3.cosh();
      complex3.divide(complex5);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1852.64816319394), (-5687.239416535817));
      complex0.INF.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.atan();
      complex3.NaN.cos();
      Complex complex4 = complex0.conjugate();
      Complex.valueOf((-1852.64816319394), 1992.174559992399);
      Complex complex5 = complex4.exp();
      complex5.I.multiply((-5687.239416535817));
      complex4.getReal();
      Complex complex6 = complex1.sqrt();
      complex6.ONE.multiply((-1852.64816319394));
      complex6.tan();
      Complex complex7 = complex6.tanh();
      complex0.toString();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(206);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.INF.add(complex3);
      complex3.INF.nthRoot(206);
      complex3.I.getField();
      Complex complex5 = complex4.NaN.acos();
      complex5.NaN.asin();
      Complex complex6 = complex2.log();
      complex3.I.readResolve();
      complex1.readResolve();
      complex4.sqrt();
      complex1.sqrt1z();
      complex1.sinh();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(2.0133131420595028E-8, 3397.810888768903);
      Complex complex1 = Complex.INF;
      complex1.NaN.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.INF.exp();
      complex1.ZERO.sqrt1z();
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = complex4.INF.subtract(complex0);
      complex5.I.cos();
      complex4.I.sin();
      complex0.asin();
      Complex complex6 = complex4.divide(complex2);
      complex1.hashCode();
      Complex complex7 = complex6.ZERO.add(2.0133131420595028E-8);
      Complex complex8 = complex7.cosh();
      Complex complex9 = Complex.valueOf(2.0133131420595028E-8, 3397.810888768903);
      complex8.ONE.add(complex9);
      complex8.subtract(complex3);
      complex1.cosh();
      complex3.getImaginary();
      try { 
        complex4.NaN.nthRoot((-571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -571
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1692));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.log();
      complex3.ZERO.tanh();
      complex0.log();
      complex3.ONE.add(complex2);
      Complex complex5 = complex1.sin();
      complex4.ZERO.sin();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex2.asin();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.ZERO.log();
      complex6.ONE.readResolve();
      complex2.subtract(complex4);
      Complex complex9 = complex4.subtract(0.0);
      complex5.abs();
      Complex complex10 = Complex.valueOf((double) (-1692), 2639.6260056055676);
      complex10.NaN.pow(2461.764923);
      Complex complex11 = complex9.tan();
      complex11.ONE.getField();
      Complex complex12 = complex8.multiply(603);
      complex12.asin();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      complex1.ZERO.sqrt();
      complex0.ONE.readResolve();
      complex0.isInfinite();
      int int0 = 0;
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1442.84021329);
      Complex complex1 = complex0.tanh();
      complex1.ONE.abs();
      Complex complex2 = complex0.exp();
      complex0.ONE.sqrt1z();
      complex0.sin();
      complex1.asin();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.subtract((-5.095229574221907E-8));
      complex4.sqrt1z();
      Complex complex5 = complex4.ONE.cosh();
      complex5.NaN.getArgument();
      Complex complex6 = complex4.NaN.negate();
      complex6.NaN.hashCode();
      Complex complex7 = complex0.multiply(1.5574076175689697);
      Complex complex8 = complex1.sinh();
      complex8.NaN.subtract(complex7);
      complex8.asin();
      complex7.log();
      Complex complex9 = complex8.atan();
      complex9.subtract(complex6);
      complex9.I.getField();
      Complex complex10 = complex3.sqrt();
      complex2.readResolve();
      complex10.sqrt1z();
      complex8.nthRoot(7);
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-3408.4450413));
      Complex complex1 = new Complex(1.4573285967670963E-107, (-3408.4450413));
      complex0.INF.add(complex1);
      complex0.ONE.divide((-3408.4450413));
      complex0.ONE.hashCode();
      complex0.getReal();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex((-1146.7541013), (-1146.7541013));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ZERO.divide((-1146.7541013));
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex4.ONE.exp();
      complex0.getArgument();
      complex0.getReal();
      complex3.asin();
      complex3.add(768.33752328);
      complex5.multiply(complex1);
      complex0.nthRoot(2205);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-1699.086213750669), (-1699.086213750669));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.pow(complex1);
      complex1.hashCode();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.INF.asin();
      complex1.ZERO.exp();
      complex6.createComplex((-1699.086213750669), (-1699.086213750669));
      try { 
        complex2.INF.nthRoot((-2290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,290
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(4.363437558318513E-8);
      complex0.NaN.abs();
      Complex complex1 = complex0.acos();
      Complex.valueOf(1313.84);
      complex0.INF.getField();
      Complex complex2 = complex1.ONE.sinh();
      complex0.multiply(4.363437558318513E-8);
      Complex.valueOf(3419.320013921952, 1313.84);
      complex1.log();
      Complex complex3 = complex0.multiply((-2070));
      complex3.sinh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.divide(complex0);
      complex3.ZERO.sqrt1z();
      complex0.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = complex5.cosh();
      complex1.NaN.subtract(0.0);
      Complex complex7 = complex1.ONE.sin();
      Complex complex8 = complex4.exp();
      complex8.INF.toString();
      Complex complex9 = complex1.ZERO.sqrt1z();
      Complex complex10 = complex9.I.sin();
      Complex complex11 = complex10.ONE.acos();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex6.subtract(1661.069);
      String string0 = complex12.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex13 = complex1.multiply(1661.069);
      complex13.ONE.sqrt1z();
      complex8.isInfinite();
      Complex complex14 = complex6.cosh();
      Complex complex15 = complex1.pow(0.0);
      assertSame(complex15, complex2);
      
      complex14.isInfinite();
      complex6.tanh();
      Complex complex16 = complex7.acos();
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertSame(complex1, complex12);
      
      Complex complex17 = Complex.valueOf((-1794.4826), 1661.069);
      assertEquals((-1794.4826), complex17.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-92.0), (-2548.9824348));
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(2548.9824348, complex2.getImaginary(), 0.01);
      assertEquals(92.0, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-92.0), complex1.getReal(), 0.01);
      assertEquals((-2548.9824348), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      complex1.ZERO.pow(1.4106062639738257E-171);
      try { 
        complex1.I.nthRoot((-2112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,112
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.multiply((-1004.01262226158));
      assertSame(complex1, complex0);
      assertSame(complex2, complex0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.subtract(complex2);
      assertSame(complex4, complex1);
      assertSame(complex2, complex3);
  }
}
