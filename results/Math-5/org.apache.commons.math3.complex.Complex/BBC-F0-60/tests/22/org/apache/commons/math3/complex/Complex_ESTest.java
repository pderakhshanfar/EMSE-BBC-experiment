/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:59:48 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.232041173894351E-13, 6.232041173894351E-13);
      complex1.subtract(complex0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.NaN;
      complex0.abs();
      complex4.reciprocal();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex1.createComplex(6.232041173894351E-13, 1.0);
      Complex complex7 = complex5.add(1.0000000368791007);
      complex6.cosh();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex1.acos();
      complex3.nthRoot(1);
      complex1.abs();
      complex7.divide(complex8);
      Complex complex10 = Complex.INF;
      complex9.tan();
      Complex complex11 = new Complex((-4.443661736519001E-8));
      complex11.acos();
      complex6.divide((double) 372);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract(20.0);
      Complex complex2 = complex0.createComplex((-1539.39556), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ONE.subtract((-1193.95));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.add(20.0);
      complex5.INF.hashCode();
      complex4.ONE.exp();
      complex0.log();
      Complex.valueOf(2188232.0, (-1139.66206371682));
      Complex complex6 = complex0.I.multiply(complex2);
      Complex complex7 = complex1.negate();
      complex3.multiply(17);
      complex3.sinh();
      complex5.add(2.007428933605617E272);
      complex7.divide(20.0);
      complex0.multiply(364);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.254444083988621E161);
      Complex complex1 = complex0.sqrt1z();
      complex1.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.multiply(complex2);
      complex3.ZERO.sqrt();
      complex1.I.reciprocal();
      complex1.I.tanh();
      Complex.valueOf((-869.66637));
      complex1.pow((-1692.1));
      try { 
        complex0.nthRoot((-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -64
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.7838233889223407E279);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex4.ONE.atan();
      complex4.INF.toString();
      complex2.getField();
      Complex complex6 = complex1.divide(1575.7347288309);
      Complex complex7 = Complex.valueOf(9.597302512507479E247, 0.0);
      complex7.ZERO.abs();
      Complex complex8 = complex6.I.acos();
      complex8.sqrt1z();
      Complex complex9 = complex8.sin();
      complex3.tanh();
      Complex complex10 = complex0.sqrt();
      complex10.NaN.readResolve();
      complex6.add(complex3);
      complex8.tan();
      complex3.ONE.negate();
      complex5.NaN.sinh();
      Complex complex11 = complex7.asin();
      complex11.ZERO.subtract(complex0);
      Complex complex12 = complex10.sin();
      complex12.INF.pow(3791.27);
      complex9.tanh();
      complex2.multiply(0.0);
      Complex complex13 = complex12.asin();
      complex5.sqrt();
      complex6.pow(complex7);
      Complex.valueOf(0.0);
      complex1.tan();
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-14.7), (-14.7));
      Complex complex1 = complex0.multiply((-14.7));
      Complex complex2 = complex0.createComplex(20.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.add(1.0000000368791007);
      Complex complex4 = Complex.INF;
      complex1.acos();
      complex3.nthRoot(1241);
      complex1.abs();
      Complex complex5 = Complex.valueOf(829.63735221779, (-2562.7426516801106));
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = Complex.INF;
      complex6.tan();
      Complex complex8 = complex4.reciprocal();
      complex5.getArgument();
      complex8.tanh();
      complex5.exp();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-14.7), (-14.7));
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.createComplex((-20.0), 0.3063063621520996);
      complex2.reciprocal();
      Complex complex3 = Complex.I;
      complex3.getArgument();
      Complex complex4 = complex2.tanh();
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(25.497194171550706, 20.0);
      Complex complex1 = Complex.NaN;
      complex1.INF.cosh();
      Complex complex2 = Complex.valueOf((-642.12366090328));
      complex2.ONE.readResolve();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-267.5764221168687));
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.I.conjugate();
      complex0.createComplex(Double.POSITIVE_INFINITY, 0.25287599471772304);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add((-2834.4624971517));
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.createComplex((-642.8), (-642.8));
      Complex complex4 = Complex.valueOf((-642.8));
      Complex complex5 = complex4.createComplex((-642.8), (-642.8));
      Complex complex6 = complex5.INF.exp();
      complex0.pow(Double.POSITIVE_INFINITY);
      complex6.ONE.pow(complex4);
      complex5.I.readResolve();
      Complex complex7 = complex5.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-242.8285));
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex5.NaN.sqrt1z();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex8.add(complex4);
      complex1.ONE.pow(complex7);
      complex11.I.negate();
      Complex complex12 = complex6.createComplex((-2834.4624971517), Double.POSITIVE_INFINITY);
      Complex complex13 = complex0.ONE.sinh();
      complex3.abs();
      complex2.pow(complex5);
      complex4.ONE.reciprocal();
      Complex complex14 = complex12.multiply(588);
      complex14.ZERO.cosh();
      complex14.add(complex6);
      complex9.INF.reciprocal();
      complex12.exp();
      complex10.add(Double.POSITIVE_INFINITY);
      complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.acos();
      complex0.toString();
      int int0 = 596;
      Complex complex3 = complex0.createComplex(6.232041173894351E-13, -0.0);
      Complex complex4 = complex2.multiply(596);
      Complex complex5 = complex0.atan();
      complex1.conjugate();
      complex3.createComplex((-820.338871), 0.25);
      complex3.cosh();
      Complex complex6 = complex4.pow(complex5);
      complex6.cosh();
      complex1.tanh();
      try { 
        complex6.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      complex2.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(25.497194171550706, 3.6183475);
      complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.reciprocal();
      complex6.getArgument();
      complex7.tanh();
      Complex complex8 = new Complex(25.497194171550706);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = new Complex(1060.017, 5404.31313963009);
      complex4.readResolve();
      Complex complex5 = Complex.INF;
      complex2.createComplex(0.04113444685935974, 5404.31313963009);
      complex5.reciprocal();
      complex1.getArgument();
      Complex complex6 = Complex.valueOf((-1920.474));
      Complex complex7 = complex6.tanh();
      try { 
        complex7.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(468);
      Complex complex2 = Complex.valueOf((double) 468);
      complex2.acos();
      complex1.exp();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(468);
      complex0.createComplex(468, 2.0);
      Complex complex2 = complex0.reciprocal();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(20.0);
      complex3.tanh();
      complex3.multiply(complex1);
      Complex complex4 = Complex.I;
      complex2.pow(complex4);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      complex1.tan();
      complex1.readResolve();
      Complex complex3 = new Complex(12.67877444918074);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 529.0794);
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply(1360);
      complex4.ONE.add(Double.NaN);
      Complex complex5 = new Complex(1360);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(12.67877444918074);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.add(complex0);
      complex0.NaN.getField();
      complex0.INF.add(complex1);
      Complex complex3 = complex2.conjugate();
      complex0.getField();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ONE.createComplex(12.67877444918074, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex6.I.cosh();
      complex8.I.getField();
      complex8.INF.exp();
      complex8.ONE.hashCode();
      Complex complex9 = complex4.exp();
      complex2.conjugate();
      complex9.toString();
      Complex complex10 = Complex.valueOf(1.281869659878436E7);
      complex3.add(complex10);
      Complex complex11 = complex10.cos();
      complex11.getArgument();
      complex10.createComplex(20.0, 8.319947089683576E-278);
      Complex.valueOf((-775.1073387321107));
      complex0.cos();
      complex5.acos();
      Complex.valueOf(1710.26329, 1.281869659878436E7);
      Complex complex12 = complex7.atan();
      complex12.sqrt1z();
      complex12.getField();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.multiply(104);
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(1974.1362869);
      complex0.nthRoot(2106);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(25.357548403825408, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      complex1.abs();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.acos();
      complex2.multiply(1253.6606);
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2396.3382437833), 9.014222063978341);
      Complex complex1 = complex0.sqrt1z();
      complex0.I.add(5524.723384290094);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.tan();
      complex3.multiply(2583);
      complex1.cos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(12.67877444918074);
      Complex complex1 = Complex.valueOf(731.0, (-5.6696107089038004E-8));
      complex1.pow((-86.71685735));
      Complex complex2 = Complex.valueOf(731.0);
      complex2.add((-1310.555));
      complex1.getImaginary();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 3580.3206);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.multiply(complex1);
      complex0.asin();
      complex1.abs();
      complex0.reciprocal();
      Complex complex4 = complex0.acos();
      complex3.I.sqrt1z();
      Complex complex5 = complex2.multiply(3.1428221129306484E-8);
      complex5.createComplex(0.0, 3580.3206);
      complex1.add(3580.3206);
      Complex.valueOf(0.0, 3580.3206);
      Complex complex6 = complex3.cosh();
      complex6.acos();
      complex4.abs();
      Complex complex7 = (Complex)complex0.I.readResolve();
      Complex complex8 = complex3.divide(complex6);
      complex2.tan();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.divide((-994.991114037502));
      Complex complex11 = complex0.sin();
      complex8.reciprocal();
      complex11.getArgument();
      complex10.tanh();
      complex7.equals(complex11);
      complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.divide(complex0);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract(complex0);
      complex1.readResolve();
      complex1.NaN.sqrt1z();
      complex2.equals(complex1);
      complex2.atan();
      complex2.createComplex((-20.0), (-20.0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(12.67877444918074);
      Complex complex1 = Complex.valueOf(12.67877444918074, 3580.3206);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = Complex.NaN;
      complex2.abs();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.INF;
      complex3.readResolve();
      Complex complex8 = new Complex(0.5197699069976807);
      complex1.acos();
      Complex complex9 = Complex.valueOf(3580.3396476531375);
      Complex complex10 = complex9.divide(0.5197699069976807);
      complex6.sin();
      complex10.acos();
      Complex.valueOf(3580.3206);
      complex10.hashCode();
      complex3.exp();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.232041173894351E-13, 6.232041173894351E-13);
      complex1.subtract(complex0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.NaN;
      complex0.abs();
      complex4.reciprocal();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex2.multiply((-2544.424));
      Complex complex7 = complex6.createComplex(3.1428221129306484E-8, (-377.2214166326942));
      complex3.add(1.0000000368791007);
      Complex complex8 = complex7.cosh();
      Complex complex9 = Complex.INF;
      complex9.acos();
      complex5.nthRoot(372);
      complex4.abs();
      complex8.divide(complex4);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.tan();
      complex10.acos();
      complex5.divide(Double.NaN);
      complex11.sin();
      complex10.acos();
      Complex.valueOf((-1598.089212971));
      complex5.hashCode();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.multiply(3.1428221129306484E-8);
      Complex complex4 = complex3.createComplex(20.0, 1.6430755547607675E14);
      complex4.add(20.0);
      complex2.cosh();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex5.acos();
      complex6.nthRoot(1517);
      complex1.abs();
      Complex complex7 = Complex.ONE;
      try { 
        complex7.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = complex0.divide(1.080835500478704E-8);
      complex0.sqrt();
      complex1.INF.getField();
      complex0.createComplex(1.080835500478704E-8, 2.0218212591680696E9);
      Complex complex2 = complex1.add(1.080835500478704E-8);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(2.0218212591680696E9, 2.0218212591680696E9);
      complex4.ONE.divide(complex5);
      Complex complex6 = complex3.I.subtract(complex4);
      complex3.ONE.createComplex(2.6193447411060333E-10, 1.080835500478704E-8);
      Complex complex7 = complex0.pow(2.0218212591680696E9);
      complex7.ZERO.readResolve();
      complex2.pow(2.0218212591680696E9);
      complex0.equals(complex3);
      complex0.getField();
      complex3.multiply(complex7);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(291.9438, (-2544.424));
      complex0.pow((-2544.424));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex((-2544.424));
      Complex complex4 = Complex.ONE;
      complex0.readResolve();
      Complex complex5 = complex2.createComplex(8.006569251375383E36, 1.0);
      complex2.ZERO.tan();
      Complex complex6 = complex5.reciprocal();
      complex2.atan();
      complex5.getArgument();
      complex4.tanh();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 3580.3206);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex2.asin();
      complex2.abs();
      complex0.reciprocal();
      complex2.acos();
      Complex complex6 = complex3.multiply(3.1428221129306484E-8);
      Complex complex7 = complex6.add(3580.3207396522957);
      Complex complex8 = complex2.cosh();
      complex0.acos();
      complex0.sin();
      Complex complex9 = Complex.INF;
      complex9.abs();
      complex7.divide(complex0);
      Complex complex10 = complex4.tan();
      complex5.acos();
      complex10.sin();
      complex8.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(1150.2);
      complex6.cos();
      Complex complex11 = new Complex((-826.18104002));
      complex9.isNaN();
      // Undeclared exception!
      complex0.nthRoot(2147480108);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2544.424), 0.0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.NaN;
      complex4.cos();
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = Complex.I;
      complex6.readResolve();
      complex6.negate();
      complex4.ONE.toString();
      complex4.nthRoot(2145674030);
      complex5.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex1.reciprocal();
      complex2.atan();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2544.424), 0.0);
      complex0.pow(0.0);
      complex1.reciprocal();
      Complex complex2 = new Complex(0.0);
      complex2.negate();
      complex1.INF.readResolve();
      complex0.createComplex(1.396522848153836E-4, 0.02316705882549286);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.atan();
      complex4.I.getArgument();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2544.424), 0.0);
      complex0.pow(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.ZERO.cos();
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex2.negate();
      complex2.nthRoot(244);
      Complex complex6 = complex4.createComplex(1, Double.POSITIVE_INFINITY);
      complex3.reciprocal();
      complex6.atan();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.equals(complex1);
      complex1.divide(complex0);
      complex0.log();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.add((-758.662));
      complex4.sin();
      complex3.createComplex(6.283185307179586, 1.0);
      complex3.subtract(0.0);
      complex2.multiply((-3132));
      Complex complex5 = Complex.valueOf(1.1552273904608563E-172);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(11.376570134289793, 11.376570134289793);
      complex1.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      Complex complex4 = complex2.divide(complex3);
      complex4.log();
      Complex complex5 = Complex.valueOf(11.376570134289793);
      Complex complex6 = complex5.add(679.412089578);
      Complex complex7 = new Complex(11.376570134289793, 11.376570134289793);
      Complex complex8 = Complex.valueOf(1978.9100957879689, 1185.705698512228);
      Complex complex9 = complex8.sin();
      Complex complex10 = Complex.NaN;
      complex9.subtract((-1019.8999));
      complex6.multiply(923);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(complex0);
      complex0.I.sinh();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex3.createComplex((-833.54555), (-833.54555));
      complex0.add((-833.54555));
      complex1.cosh();
      complex4.acos();
      Complex complex6 = complex4.sin();
      complex4.abs();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.divide(complex5);
      Complex complex9 = complex2.tan();
      complex6.acos();
      complex9.sin();
      complex7.acos();
      Complex.valueOf((-3074.3533569));
      Complex.valueOf((-54.4));
      complex8.cos();
      Complex complex10 = new Complex((-833.54555));
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(Double.NaN, 1577.8914);
      Complex complex2 = complex1.add(complex0);
      complex1.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.divide(complex3);
      complex3.log();
      complex0.multiply((-1499.0));
      complex4.add(0.0);
      Complex complex5 = complex1.sin();
      complex5.createComplex(1536.3331, 2861.523665804468);
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = Complex.I;
      complex7.multiply(2147183788);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-1876.82), 3580.3206);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex3.multiply(complex0);
      complex5.NaN.sin();
      complex5.negate();
      Complex complex6 = complex4.divide(3580.3206);
      complex3.reciprocal();
      Complex complex7 = complex3.pow((-1876.82));
      complex2.tan();
      Complex complex8 = Complex.valueOf(1.0);
      complex6.conjugate();
      complex3.conjugate();
      complex7.atan();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = new Complex(3580.3206, 891.0);
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = Complex.I;
      complex7.negate();
      Complex complex8 = complex7.divide(0.5174442529678345);
      complex2.reciprocal();
      complex4.tan();
      Complex.valueOf(3580.3206);
      complex6.conjugate();
      Complex complex9 = new Complex(3120.776748825);
      complex9.conjugate();
      complex8.atan();
      Complex complex10 = Complex.ZERO;
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2294.549959910056, 2294.549959910056);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.INF.pow(complex1);
      complex3.INF.sqrt();
      complex1.ONE.asin();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.INF.tan();
      complex7.ZERO.pow(2.0);
      Complex complex8 = Complex.valueOf(4221.5369, 4221.5369);
      complex8.I.sinh();
      complex2.log();
      complex3.subtract(2294.549959910056);
      Complex complex9 = complex0.subtract(2294.549959910056);
      complex1.createComplex(2294.549959910056, 4221.5369);
      complex9.cosh();
      complex8.isInfinite();
      complex4.createComplex(4221.5369, 1.0177335739135742);
      complex6.createComplex(642.622170370223, 67.53140059839562);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1640.9));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.reciprocal();
      complex2.ZERO.pow((-1640.9));
      Complex.valueOf((-1198.875768707), (-1640.9));
      Complex complex3 = Complex.valueOf(640.9774983643215, (-1640.9));
      Complex complex4 = complex3.log();
      complex1.asin();
      complex3.reciprocal();
      complex1.tan();
      Complex complex5 = Complex.valueOf((-1198.875768707));
      complex5.conjugate();
      complex4.conjugate();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(5224.90905812);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(1993.0890427379018, 4221.5369);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.divide(complex2);
      complex2.ZERO.abs();
      complex2.multiply(complex1);
      Complex complex4 = complex0.negate();
      complex4.divide(2707.8969255083);
      try { 
        complex3.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sinh();
      complex0.reciprocal();
      complex0.pow(327.1027366875731);
      Complex complex3 = Complex.valueOf(0.0, (-286.44031861571));
      Complex.valueOf((-1198.875768707), 640.9774983643215);
      complex2.log();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf((-286.44031861571), (-1198.875768707));
      complex5.tan();
      complex4.getReal();
      complex5.I.readResolve();
      complex0.sqrt();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2544.424), 12.75263841119417);
      complex0.pow(12.75263841119417);
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.ZERO.cos();
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = (Complex)complex0.readResolve();
      complex0.equals(complex4);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.log();
      Complex complex7 = complex3.multiply((-2544.424));
      Complex complex8 = complex6.add(679.412089578);
      complex8.INF.sin();
      Complex complex9 = Complex.INF;
      complex9.exp();
      complex4.acos();
      Complex complex10 = new Complex(679.412089578);
      Complex complex11 = complex10.tanh();
      complex6.hashCode();
      Complex complex12 = Complex.ONE;
      complex12.readResolve();
      complex7.conjugate();
      Complex complex13 = Complex.ONE;
      complex3.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 281.9724421);
      Complex complex1 = complex0.tan();
      complex1.ZERO.abs();
      Complex complex2 = complex1.subtract(0.0);
      complex2.isInfinite();
      Complex complex3 = complex2.ZERO.exp();
      complex3.I.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex.valueOf((-2556.968548086));
      complex4.NaN.getField();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex5.ZERO.divide(complex0);
      complex6.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex9 = Complex.ONE;
      complex9.subtract(Double.NaN);
      complex8.multiply((-3132));
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(541.64406);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.add(complex1);
      complex0.readResolve();
      complex2.ZERO.multiply(complex4);
      complex3.equals(complex2);
      complex1.divide(complex3);
      Complex complex5 = complex4.log();
      complex1.multiply((-2544.424));
      complex4.add((-2544.424));
      complex5.sin();
      Complex complex6 = new Complex(2861.523665804468);
      complex6.createComplex((-2544.424), (-20.0));
      complex2.subtract(2861.523665804468);
      complex3.multiply((-1404));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 281.9724421);
      Complex complex1 = complex0.tan();
      complex1.ZERO.abs();
      Complex complex2 = complex1.subtract((-1.54434478239181E-8));
      complex2.isInfinite();
      Complex complex3 = complex2.ZERO.exp();
      complex3.I.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = Complex.valueOf((-2556.968548086));
      complex4.NaN.getField();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex4.NaN.tanh();
      Complex complex9 = complex0.negate();
      complex9.isNaN();
      complex8.asin();
      complex4.reciprocal();
      Complex complex10 = Complex.valueOf(325.5914722751, Double.NaN);
      complex10.tan();
      complex5.conjugate();
      complex6.conjugate();
      complex7.atan();
      complex7.subtract(1813.7690911392515);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, (-592.8532709459149));
      Complex complex2 = complex1.asin();
      complex2.add(complex1);
      Complex complex3 = Complex.valueOf((-592.8532709459149));
      complex2.getField();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.cosh();
      complex3.exp();
      Complex complex7 = complex2.createComplex((-833.54555), (-833.54555));
      complex7.add((-54.4));
      Complex complex8 = complex7.cosh();
      complex6.acos();
      Complex complex9 = complex2.sin();
      complex4.abs();
      Complex complex10 = complex6.divide(complex8);
      complex8.tan();
      complex8.acos();
      complex9.sin();
      complex10.acos();
      Complex.valueOf(2.0);
      Complex.valueOf(2.0);
      complex4.cos();
      Complex complex11 = new Complex(3.09768273342776E-42);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2544.424), (-2544.424));
      complex1.conjugate();
      complex1.ZERO.asin();
      Complex complex2 = complex0.negate();
      complex1.divide((-2544.424));
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      complex0.exp();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.createComplex((-833.54555), (-20.0));
      Complex complex3 = complex2.add(3.733241849647479E32);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex4.sin();
      complex6.abs();
      Complex complex7 = complex2.divide(complex5);
      Complex complex8 = complex2.tan();
      complex3.acos();
      complex1.sin();
      complex8.acos();
      Complex.valueOf((-1336.6229874448613));
      Complex complex9 = Complex.valueOf((-20.0));
      complex7.cos();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2027.0), 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = Complex.valueOf((-2027.0));
      complex1.INF.getField();
      Complex complex4 = complex0.NaN.tan();
      complex0.ZERO.cosh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex2.subtract(complex5);
      Complex complex6 = Complex.I;
      complex6.divide(complex3);
      complex4.multiply(complex3);
      complex5.negate();
      Complex complex7 = Complex.INF;
      complex7.divide((-2027.0));
      complex3.nthRoot(1642);
      Complex complex8 = new Complex(1642);
      complex8.pow(3893.9071937116823);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1640.9));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.reciprocal();
      Complex.valueOf((-1198.875768707), (-1640.9));
      complex2.asin();
      complex0.abs();
      Complex complex3 = complex2.reciprocal();
      complex1.multiply((-1198.875768707));
      complex1.createComplex((-1640.9), 0.0);
      complex2.getArgument();
      Complex complex4 = Complex.valueOf(2253.1466, (-1229.434480428));
      Complex complex5 = complex4.log();
      complex4.atan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.pow((-143.87118115));
      complex2.pow(complex3);
      complex5.isNaN();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 3580.3206);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.cosh();
      complex2.multiply(complex1);
      complex2.asin();
      complex2.abs();
      Complex complex4 = complex0.reciprocal();
      complex2.acos();
      Complex complex5 = complex3.multiply(3.1428221129306484E-8);
      Complex complex6 = complex5.createComplex(1.0000000368791007, 3580.3207396522957);
      Complex complex7 = new Complex((-2251.2959215287), 529.0);
      complex7.getArgument();
      Complex complex8 = Complex.valueOf(849.1225000503098, (-3797.906531));
      Complex complex9 = complex4.log();
      Complex complex10 = Complex.valueOf((-1032.10765445277), 3.1428221129306484E-8);
      complex10.atan();
      complex2.pow(3580.3206);
      Complex complex11 = complex3.pow(complex9);
      complex9.isNaN();
      Complex complex12 = Complex.ONE;
      complex12.getArgument();
      complex11.equals(complex0);
      complex6.multiply(complex4);
      complex8.multiply(0.24401789903640747);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      complex0.INF.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.atan();
      complex5.abs();
      Complex complex7 = complex1.INF.divide((-121.99974836776309));
      complex5.nthRoot(1);
      complex6.divide(complex0);
      complex7.multiply(complex4);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.negate();
      Complex complex10 = complex1.divide((-20.0));
      complex9.nthRoot(1);
      complex5.pow(2777.742511615357);
      Complex.valueOf(4053.9997533300293);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 3580.3206);
      complex0.ONE.subtract(complex1);
      complex1.ONE.divide(complex0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.divide(3580.3206);
      Complex complex5 = complex3.reciprocal();
      complex0.INF.pow(3120.776748825);
      complex5.tan();
      Complex complex6 = Complex.valueOf(3580.3206);
      complex6.conjugate();
      complex2.conjugate();
      Complex complex7 = complex4.atan();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-311.16720345), 0.1767723262310028);
      Complex complex2 = complex0.add(complex1);
      complex0.readResolve();
      complex0.equals(complex2);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.log();
      complex4.NaN.add(0.1767723262310028);
      complex2.add(974.73559432505);
      complex2.sin();
      complex3.createComplex(0.4500300884246826, 6.283185307179586);
      complex1.subtract(679.412089578);
      complex1.multiply((-3132));
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 4.85464582112459E-8;
      Complex complex1 = new Complex(4.85464582112459E-8, 4.85464582112459E-8);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      complex3.NaN.getField();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.tan();
      complex0.I.pow(complex2);
      double double1 = 0.0;
      Complex complex6 = complex4.ZERO.pow(complex5);
      complex6.ZERO.exp();
      complex6.ONE.tan();
      complex1.divide(0.0);
      complex0.abs();
      Complex complex7 = complex4.tan();
      complex7.INF.tanh();
      int int0 = (-3997);
      try { 
        complex7.NaN.nthRoot((-3997));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,997
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3791993048776982E-9);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(0);
      Complex complex3 = complex0.ONE.add(complex1);
      complex1.ONE.acos();
      Complex.valueOf((-1.0), 0.0);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex0.exp();
      complex0.getReal();
      Complex complex6 = complex5.I.sqrt();
      complex6.I.multiply(complex2);
      complex5.I.asin();
      complex0.hashCode();
      complex0.readResolve();
      Complex complex7 = complex5.negate();
      complex7.getField();
      complex7.ZERO.abs();
      Complex complex8 = complex7.multiply(1447.54);
      complex1.pow(complex7);
      Complex complex9 = complex4.createComplex(0.0, 0.0);
      complex9.abs();
      complex8.divide(complex5);
      complex7.sqrt();
      complex9.cosh();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2544.424), 0.0);
      complex0.pow(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.NaN.add(complex2);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex4.divide(complex3);
      Complex complex5 = complex1.log();
      complex4.multiply((-2544.424));
      Complex complex6 = complex5.add(679.412089578);
      Complex complex7 = complex6.INF.sin();
      complex7.ZERO.createComplex(2861.523665804468, 0.0);
      complex5.subtract(679.412089578);
      complex2.multiply((-3132));
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.sinh();
      complex2.ZERO.cos();
      Complex complex3 = complex0.subtract(complex1);
      complex3.ZERO.conjugate();
      Complex complex4 = Complex.valueOf(634.8);
      Complex complex5 = complex0.asin();
      complex3.NaN.negate();
      Complex complex6 = new Complex(294.272927, Double.NaN);
      complex5.I.subtract(complex6);
      complex4.INF.divide(634.8);
      Complex.valueOf(0.0);
      Complex complex7 = complex3.pow(complex1);
      Complex complex8 = complex7.sqrt();
      complex8.multiply(complex0);
      complex5.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.NaN.add(complex0);
      complex3.ONE.atan();
      Complex complex4 = complex0.ONE.cos();
      complex4.INF.hashCode();
      complex1.ONE.abs();
      Complex complex5 = complex2.INF.multiply(7.456824943331887E-9);
      Complex complex6 = complex5.NaN.reciprocal();
      complex6.ZERO.reciprocal();
      Complex complex7 = complex0.subtract(284.7459);
      complex7.exp();
      Complex complex8 = complex7.ONE.cosh();
      complex8.I.add(284.7459);
      complex2.isInfinite();
      Complex complex9 = complex7.exp();
      complex7.INF.sinh();
      complex9.I.acos();
      complex0.abs();
      complex4.exp();
      complex9.getImaginary();
      complex1.getReal();
      complex1.createComplex(Double.NaN, 1.0);
      complex8.multiply(Double.NaN);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-3.687854305539139E-8), (-3039.158938));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.I.createComplex((-1614.78424654), (-1614.78424654));
      Complex complex3 = complex0.INF.pow((-3.687854305539139E-8));
      Complex complex4 = complex3.ZERO.add(0.0);
      complex4.NaN.divide(complex2);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.pow((-1068.05987));
      Complex complex7 = complex6.pow(complex0);
      complex7.abs();
      complex5.asin();
      Complex complex8 = complex3.I.sin();
      complex8.ZERO.add(0.0);
      Complex complex9 = complex5.cos();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex10.conjugate();
      complex11.I.readResolve();
      complex1.isInfinite();
      complex9.getImaginary();
      complex0.pow((-3039.158938));
      Complex complex12 = complex1.multiply(831);
      complex4.equals(complex6);
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-5));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.tan();
      complex3.ZERO.asin();
      Complex complex4 = complex2.subtract(1.1254286766052246);
      complex4.NaN.conjugate();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.multiply(complex4);
      complex6.ONE.hashCode();
      complex6.ZERO.getField();
      complex1.ZERO.subtract(complex4);
      complex0.I.asin();
      Complex complex7 = complex2.multiply((double) (-5));
      complex7.ZERO.add(complex0);
      Complex complex8 = complex0.add(1.1254286766052246);
      complex8.hashCode();
      complex0.sin();
      complex2.divide(complex1);
      complex4.isNaN();
      complex6.atan();
      Complex.valueOf(1910.3432124536025);
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(312.2);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.add(complex3);
      complex4.add(complex3);
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex5.I.pow(complex2);
      complex6.sqrt();
      complex5.acos();
      try { 
        complex1.nthRoot((-289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -289
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.atan();
      complex0.ONE.tan();
      Complex complex3 = complex1.I.multiply(0.0);
      complex3.ONE.exp();
      Complex complex4 = complex0.sinh();
      complex4.INF.multiply((-467.9389861));
      Complex complex5 = complex1.sin();
      complex5.ONE.reciprocal();
      complex2.getImaginary();
      complex0.negate();
      complex3.isNaN();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.reciprocal();
      complex3.tan();
      complex6.conjugate();
      Complex complex8 = complex7.conjugate();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2027.0), 0.0);
      Complex complex1 = complex0.asin();
      complex1.NaN.add(complex0);
      Complex.valueOf((-2027.0));
      complex1.INF.getField();
      Complex complex2 = complex0.NaN.tan();
      complex0.ZERO.cosh();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.createComplex((-20.0), (-833.54555));
      Complex complex5 = complex4.add((-20.0));
      complex5.ONE.cosh();
      complex4.NaN.acos();
      complex3.INF.sin();
      complex4.abs();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.acos();
      complex3.sin();
      complex8.acos();
      Complex.valueOf(1471.2);
      Complex.valueOf(1551.4708);
      complex7.cos();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1445.9647785636);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.tanh();
      complex2.INF.subtract(complex0);
      complex1.ONE.conjugate();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex3.ZERO.createComplex((-2803.7290875954263), (-2259.2568086440738));
      Complex complex5 = complex0.multiply(complex1);
      complex3.cos();
      complex0.isInfinite();
      complex1.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.multiply((-1215));
      Complex complex7 = complex1.add(4780.7555092);
      complex6.getImaginary();
      complex1.getArgument();
      complex1.log();
      complex1.equals(complex4);
      complex7.toString();
      complex4.atan();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2654.4621, 2654.4621);
      complex0.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.subtract(0.7853981633974483);
      Complex complex3 = complex2.ZERO.createComplex((-2239.6064), 2719.8201211);
      complex3.NaN.log();
      Complex complex4 = Complex.valueOf(0.7853981633974483, 4.0320284712983994E273);
      complex4.NaN.getArgument();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.ZERO.reciprocal();
      complex7.cosh();
      complex6.ONE.conjugate();
      Complex complex8 = Complex.valueOf(1737.6909184, 4134.56);
      complex4.NaN.cos();
      complex2.getImaginary();
      complex2.readResolve();
      complex1.divide(5111.86669036782);
      Complex complex9 = complex1.subtract(complex4);
      complex9.toString();
      Complex complex10 = complex5.atan();
      complex1.log();
      complex2.getImaginary();
      complex8.toString();
      complex10.isNaN();
      Complex.valueOf(0.7853981633974483, 0.0);
      Complex.valueOf(5111.86669036782);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 3580.3206);
      complex0.ONE.subtract(complex1);
      complex1.ONE.divide(complex0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.negate();
      Complex complex3 = complex2.divide(3580.3206);
      try { 
        complex3.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex0.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex0.subtract(1385.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-311.16720345));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.tan();
      complex2.ONE.cosh();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex0.ZERO.multiply(1486);
      complex5.I.sqrt();
      complex4.INF.exp();
      int int0 = (-1723);
      try { 
        complex3.I.nthRoot((-1723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,723
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8143062591552734);
      complex0.ONE.negate();
      Complex complex1 = complex0.ONE.tanh();
      complex0.multiply((-4285.873825));
      complex1.sinh();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(0.0, 2.4875248571153216E73);
      complex1.NaN.sqrt();
      Complex complex3 = Complex.valueOf(2.4875248571153216E73, 2.4875248571153216E73);
      complex3.multiply(complex2);
      complex1.NaN.cosh();
      Complex complex4 = complex0.multiply(complex1);
      complex4.cosh();
      complex1.isInfinite();
      complex1.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.pow(6.283185307179586);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.I.multiply(162);
      complex1.equals(complex0);
      complex0.sqrt();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex2.exp();
      complex1.INF.hashCode();
      Complex complex7 = complex6.multiply(complex4);
      complex7.subtract(complex6);
      Complex complex8 = complex4.pow(complex1);
      complex8.INF.exp();
      Complex complex9 = complex6.subtract(complex0);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex10.ZERO.pow(1.5564982816556894E177);
      complex5.getReal();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex12.ZERO.multiply(1.5564982816556894E177);
      complex9.ZERO.abs();
      complex3.ZERO.getField();
      Complex complex14 = complex7.multiply(Double.NaN);
      complex11.getReal();
      complex3.sinh();
      complex4.isInfinite();
      complex14.tan();
      complex13.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.NaN.subtract(complex1);
      complex0.getArgument();
      Complex complex4 = complex1.createComplex(0.0, (-1274.069645425094));
      Complex complex5 = complex4.NaN.cosh();
      complex5.ONE.asin();
      complex4.I.exp();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex1.exp();
      complex7.I.getField();
      Complex complex8 = complex4.conjugate();
      complex8.NaN.pow(complex6);
      Complex complex9 = complex4.subtract((-914.7275115253398));
      complex4.ONE.multiply((-914.7275115253398));
      complex0.ZERO.acos();
      Complex complex10 = complex4.subtract(2963.88705528);
      complex10.ONE.log();
      Complex complex11 = complex2.sinh();
      complex9.add(complex5);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1196.0165566627836));
      Complex complex1 = complex0.INF.divide(0.0);
      complex1.INF.multiply((-1196.0165566627836));
      complex1.ONE.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.sinh();
      complex3.multiply(0.0);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ONE.reciprocal();
      complex2.isNaN();
      complex4.ZERO.cosh();
      complex0.getArgument();
      complex4.toString();
      complex5.pow(complex4);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      complex0.isNaN();
      complex1.readResolve();
      Complex complex2 = complex1.divide(complex0);
      complex1.I.sinh();
      complex0.INF.createComplex(781.19747518, (-1103.16748));
      Complex complex3 = complex2.subtract(719.738574705);
      complex2.cosh();
      complex0.negate();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      complex0.INF.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.subtract(0.0);
      complex3.ONE.sqrt();
      Complex complex4 = complex1.add(complex0);
      complex4.atan();
      complex4.abs();
      Complex complex5 = complex1.INF.divide((-121.99974836776309));
      complex4.nthRoot(1);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.multiply(complex4);
      complex6.ONE.asin();
      complex4.ZERO.abs();
      Complex complex8 = complex7.reciprocal();
      complex8.NaN.acos();
      complex8.ONE.multiply((-121.99974836776309));
      complex6.createComplex(0.0, 0.0);
      complex6.I.getArgument();
      Complex complex9 = Complex.valueOf((-1208.64), (-1208.64));
      Complex complex10 = complex9.NaN.log();
      complex5.atan();
      complex1.pow(0.0);
      complex6.pow(complex5);
      complex0.isNaN();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1282.6125484), (-1282.6125484));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex.valueOf(0.0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ZERO.sqrt();
      complex1.NaN.pow(complex2);
      complex0.isInfinite();
      complex4.NaN.sqrt();
      complex1.sqrt();
      complex1.tanh();
      complex3.tan();
      complex4.asin();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(1980.1767865, 0.0);
      complex0.getReal();
      Complex complex1 = complex0.createComplex(0.0, 1980.1767865);
      complex1.I.pow(complex0);
      complex0.reciprocal();
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-2054.458128), 0.30486756563186646);
      Complex complex1 = Complex.ZERO;
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = Complex.valueOf(220.90553883320504, (-754.62637));
      complex4.toString();
      complex0.hashCode();
      complex2.multiply(3749.9);
      complex1.divide(complex4);
      Complex complex5 = complex3.INF.pow(complex4);
      Complex.valueOf((-2054.458128));
      Complex complex6 = complex1.sqrt();
      complex6.INF.divide(complex1);
      complex3.isInfinite();
      Complex complex7 = complex5.acos();
      complex7.ZERO.asin();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(3.139132557537509E-17);
      Complex complex1 = complex0.ZERO.asin();
      complex1.I.toString();
      Complex complex2 = new Complex(3.139132557537509E-17, 1920.04471365156);
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex3.ONE.multiply(1920.04471365156);
      Complex complex5 = complex4.I.subtract(1920.04471365156);
      Complex complex6 = complex3.log();
      Complex.valueOf(1105.706699101);
      complex6.I.hashCode();
      complex0.getArgument();
      complex0.conjugate();
      complex6.sqrt();
      complex2.tanh();
      complex5.divide(1.7470924137873214E-8);
      complex6.sin();
      complex1.createComplex(1920.04471365156, 1920.04471365156);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(1.7984863104885375E-111, 0.0);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1640.9));
      complex0.sinh();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ZERO.pow((-1640.9));
      Complex complex3 = Complex.valueOf((-1198.875768707), (-1640.9));
      Complex complex4 = Complex.valueOf(640.9774983643215, (-1640.9));
      complex4.log();
      complex3.I.sqrt();
      Complex complex5 = complex3.tan();
      complex5.getReal();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(2.3718718327094683E-102, 1038.526161666);
      Complex complex1 = complex0.multiply(965);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex3.I.sin();
      complex3.ZERO.atan();
      Complex complex4 = complex2.subtract((double) 965);
      complex4.I.cosh();
      Complex complex5 = complex0.conjugate();
      complex5.I.atan();
      complex1.sqrt1z();
      Complex complex6 = complex1.NaN.pow(2.3718718327094683E-102);
      complex6.ZERO.pow(0.0);
      Complex complex7 = complex4.ONE.subtract(0.0);
      Complex complex8 = complex5.pow(2.3718718327094683E-102);
      complex8.NaN.hashCode();
      complex4.multiply(965);
      complex4.multiply((double) 965);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(2223.0, 2223.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.toString();
      Complex complex3 = complex1.INF.createComplex(0.0, (-720.608529651252));
      complex3.NaN.sin();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 3663.1854976794675);
      complex0.add(2223.0);
      complex4.negate();
      complex5.multiply(2.0);
      complex5.add(complex0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.cos();
      complex0.multiply(0.0);
      complex0.toString();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      complex3.equals("(0.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.INF.negate();
      complex1.nthRoot(1);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      complex2.NaN.reciprocal();
      Complex complex3 = complex2.atan();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.subtract(81.174425683);
      Complex complex4 = complex3.ONE.subtract(complex0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex1.ZERO.sqrt();
      Complex.valueOf(Double.NaN, (-1889.11794));
      Complex complex9 = complex8.ZERO.divide(complex6);
      complex1.equals((Object) null);
      Complex complex10 = complex1.cosh();
      Complex.valueOf(0.0);
      complex10.subtract(complex0);
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex7.sqrt1z();
      Complex complex13 = complex2.ZERO.add(complex10);
      assertSame(complex13, complex9);
      
      Object object0 = complex12.ONE.readResolve();
      assertTrue(object0.equals((Object)complex4));
      
      Complex complex14 = complex6.add(0.0);
      assertSame(complex14, complex11);
      
      Complex complex15 = complex5.exp();
      Complex complex16 = complex15.INF.negate();
      assertTrue(complex16.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex16.getImaginary(), 0.01);
      assertEquals((-81.174425683), complex3.getReal(), 0.01);
      
      Complex complex17 = complex1.pow(1268.06870240958);
      assertSame(complex17, complex12);
      
      complex0.getField();
      List<Complex> list0 = complex0.nthRoot(144);
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(list0.contains(complex2));
      assertTrue(list0.contains(complex8));
      assertEquals(144, list0.size());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      
      Complex complex4 = complex2.multiply(1499);
      Complex complex5 = (Complex)complex4.INF.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isInfinite());
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex4.getField();
      complex1.getReal();
      Complex complex6 = complex1.divide((-460.04252));
      assertSame(complex1, complex4);
      
      Complex complex7 = complex0.subtract(2902.953306053);
      assertSame(complex7, complex6);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(746.2407912785213);
      String string0 = complex0.toString();
      assertEquals("(746.2407912785213, 0.0)", string0);
      
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 281.9724421);
      Complex complex1 = complex0.tan();
      complex1.ZERO.abs();
      Complex complex2 = complex1.subtract((-1.54434478239181E-8));
      complex2.isInfinite();
      Complex complex3 = complex2.ZERO.exp();
      complex3.I.hashCode();
      Complex complex4 = complex0.tanh();
      complex4.NaN.divide(complex0);
      Complex complex5 = Complex.valueOf((-2556.968548086));
      assertEquals((-2556.968548086), complex5.getReal(), 0.01);
      
      complex4.NaN.getField();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex4.NaN.tanh();
      complex7.ONE.getArgument();
      assertSame(complex7, complex6);
      
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.ZERO.divide(complex0);
      complex1.exp();
      Complex complex10 = complex8.acos();
      assertEquals(1.5707963216350718, complex10.getReal(), 0.01);
      assertEquals((-0.7023967071298747), complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex4.tanh();
      complex4.hashCode();
      Complex complex12 = (Complex)complex11.readResolve();
      assertEquals((-1.4636216014079446), complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex9.conjugate();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex13.subtract(complex14);
      assertTrue(complex14.equals((Object)complex3));
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
  }
}
