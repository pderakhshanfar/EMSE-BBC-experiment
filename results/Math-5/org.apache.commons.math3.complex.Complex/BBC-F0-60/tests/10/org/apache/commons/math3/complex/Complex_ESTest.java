/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:42:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      complex1.ONE.atan();
      // Undeclared exception!
      complex0.nthRoot(4964);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      complex1.NaN.abs();
      complex0.ZERO.log();
      complex0.ZERO.subtract((double) 4997);
      // Undeclared exception!
      complex0.nthRoot(4997);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 206.437393025867);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sin();
      Complex complex1 = Complex.valueOf(145255.267482);
      Complex complex2 = complex0.sqrt();
      complex0.abs();
      complex1.multiply(1033);
      Complex complex3 = complex0.createComplex(714.3, Double.POSITIVE_INFINITY);
      complex3.INF.readResolve();
      Complex complex4 = complex2.add(Double.POSITIVE_INFINITY);
      complex1.pow(complex3);
      Complex complex5 = complex3.add(complex2);
      complex5.I.cosh();
      complex4.NaN.hashCode();
      Complex complex6 = Complex.valueOf((-746.0502882348), Double.POSITIVE_INFINITY);
      complex6.ZERO.atan();
      complex3.hashCode();
      Complex complex7 = complex4.exp();
      complex2.sinh();
      complex3.nthRoot(1033);
      complex3.tanh();
      complex7.tanh();
      complex3.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.exp();
      complex0.ZERO.log();
      complex0.ZERO.subtract((double) 4997);
      // Undeclared exception!
      complex0.nthRoot(4997);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.exp();
      complex0.add(2134.563683);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(2134.563683);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.negate();
      complex4.isInfinite();
      complex3.tanh();
      complex2.multiply(Double.NaN);
      Complex complex5 = new Complex(2134.563683, Double.NaN);
      complex5.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2761.51817518), 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2761.51817518), Double.POSITIVE_INFINITY);
      complex0.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2761.51817518), Double.POSITIVE_INFINITY);
      complex0.I.log();
      Complex complex1 = complex0.multiply((-283));
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = Complex.valueOf(20.0, Double.NaN);
      Complex complex2 = complex0.pow(complex1);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-2276.0);
      Complex complex0 = new Complex((-2276.0));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.multiply((-2276.0));
      Complex complex4 = Complex.valueOf((-2276.0));
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.ONE.reciprocal();
      int int0 = (-3108);
      complex6.multiply((-3108));
      complex3.ONE.readResolve();
      Complex complex7 = complex0.acos();
      complex7.NaN.abs();
      complex0.multiply(complex4);
      Complex complex8 = complex4.cosh();
      complex7.ONE.acos();
      complex7.multiply(Integer.MAX_VALUE);
      Complex complex9 = complex3.pow(Double.NaN);
      complex8.sqrt();
      complex2.negate();
      Complex complex10 = new Complex((-1805.5));
      // Undeclared exception!
      complex9.I.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1762.4800793937668), 10748.530005873848);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.createComplex(10748.530005873848, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = new Complex(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      int int0 = 2376;
      try { 
        complex1.nthRoot((-2139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,139
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1762.4800793937668), 10748.530005873848);
      Complex complex1 = Complex.valueOf((-1762.4800793937668));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.ONE.tan();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex1.abs();
      complex0.toString();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.0), (-2198.443));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1747.82659753884), (-1747.82659753884));
      Complex complex1 = complex0.acos();
      complex1.I.nthRoot(2376);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = new Complex(2376, (-1747.82659753884));
      complex2.atan();
      Complex complex4 = complex1.sqrt1z();
      complex0.log();
      complex4.readResolve();
      Complex complex5 = Complex.INF;
      complex4.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.divide(complex7);
      complex1.exp();
      complex7.equals(complex8);
      complex5.abs();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      complex1.I.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.subtract((-20.0));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.divide(complex2);
      complex1.divide(complex5);
      complex1.toString();
      Complex complex6 = Complex.ONE;
      complex6.sqrt1z();
      Complex complex7 = complex4.asin();
      complex4.exp();
      complex5.exp();
      complex7.equals("(0.0, 1.0)");
      complex1.abs();
      Complex complex8 = Complex.ZERO;
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1747.8265975388), (-1747.8265975388));
      Complex complex1 = complex0.acos();
      complex0.nthRoot(737);
      Complex complex2 = complex0.multiply(complex1);
      complex1.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.atan();
      Complex complex5 = new Complex((-1747.82659753884));
      Complex complex6 = Complex.INF;
      complex6.log();
      complex4.readResolve();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.acos();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.I;
      complex8.divide(complex6);
      complex4.exp();
      complex2.tan();
      Complex complex11 = Complex.I;
      complex1.isInfinite();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.INF.getField();
      complex1.NaN.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ONE.divide(Double.NaN);
      Complex complex4 = complex0.divide(Double.NaN);
      complex4.ONE.sin();
      Complex complex5 = complex3.ZERO.sinh();
      complex5.ZERO.getArgument();
      int int0 = 719;
      Complex complex6 = complex2.I.sqrt();
      complex6.cos();
      complex0.I.readResolve();
      complex2.nthRoot(719);
      Complex complex7 = complex3.createComplex(Double.NaN, 719);
      complex7.INF.readResolve();
      Complex complex8 = complex7.NaN.tanh();
      complex8.ONE.readResolve();
      complex8.ONE.add(0.0);
      complex8.ZERO.sinh();
      complex4.getField();
      complex0.exp();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1762.4800793937668), (-1762.4800793937668));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.subtract((-1762.4800793937668));
      complex2.sqrt();
      complex0.divide(complex2);
      complex0.divide(complex2);
      complex1.toString();
      Complex complex3 = complex0.sqrt1z();
      complex0.asin();
      Complex.valueOf((double) 4220);
      // Undeclared exception!
      complex3.nthRoot(4220);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1.5564982816556894E177, (-1747.82659753884));
      complex0.acos();
      Complex complex1 = complex0.tan();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7080734182735711, (-295.17114766281645));
      complex0.INF.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.INF.multiply(complex0);
      Complex complex3 = Complex.valueOf((-295.17114766281645));
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1747.82659753884), (-1747.82659753884));
      Complex complex1 = complex0.acos();
      complex1.I.nthRoot(2376);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.atan();
      complex1.sqrt1z();
      Complex complex4 = complex1.log();
      complex4.readResolve();
      Complex complex5 = Complex.NaN;
      complex4.conjugate();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.acos();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.I;
      Complex complex10 = complex3.divide(complex0);
      complex6.tanh();
      complex3.exp();
      Complex complex11 = Complex.INF;
      complex1.add((-1.0));
      complex10.tan();
      complex7.I.cos();
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.conjugate();
      // Undeclared exception!
      complex7.nthRoot(2376);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-295.56632729979), (-295.56632729979));
      Complex complex1 = new Complex((-295.56632729979));
      Complex complex2 = complex1.ONE.subtract(442413.375);
      Complex complex3 = complex2.NaN.exp();
      complex3.NaN.negate();
      Complex.valueOf((-1782.333727331176));
      complex1.INF.getField();
      complex0.pow(complex1);
      Complex.valueOf((-295.56632729979));
      Complex complex4 = complex2.asin();
      Complex complex5 = new Complex((-295.56632729979));
      complex2.INF.sinh();
      Complex complex6 = complex4.ZERO.conjugate();
      Object object0 = complex1.readResolve();
      ((Complex) object0).NaN.getArgument();
      complex6.getArgument();
      complex1.getField();
      Complex complex7 = complex4.atan();
      complex0.multiply(2371);
      Complex complex8 = Complex.NaN;
      complex5.nthRoot(37);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.I.negate();
      complex1.ONE.exp();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.NaN.conjugate();
      complex4.ZERO.divide(complex1);
      Complex complex5 = complex0.NaN.negate();
      complex5.ONE.hashCode();
      Complex complex6 = complex2.ZERO.add(complex4);
      complex0.equals((Object) null);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex4.NaN.sqrt1z();
      complex8.ONE.exp();
      Complex complex9 = complex7.multiply(1801.328897393173);
      complex7.INF.subtract(1.0);
      complex7.I.sqrt1z();
      complex7.multiply(2346);
      Complex complex10 = complex9.sqrt();
      complex10.divide(complex7);
      complex1.tan();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex9.ZERO.createComplex(8.505849123421056, 8.505849123421056);
      complex11.NaN.asin();
      Complex complex13 = complex1.multiply(37);
      complex13.I.add((-1.0));
      complex1.multiply(complex9);
      complex6.equals(complex13);
      complex12.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(998.0849777359, 998.0849777359);
      Complex complex2 = complex0.ONE.multiply(1244);
      Complex complex3 = complex0.sqrt1z();
      complex1.ZERO.cos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.subtract(complex4);
      complex5.NaN.tan();
      complex2.exp();
      Complex complex6 = Complex.valueOf((double) 1244);
      Complex complex7 = complex1.tan();
      complex2.getField();
      Complex complex8 = complex7.negate();
      complex6.divide(complex7);
      Complex complex9 = new Complex((-3258.7550805715), Double.NaN);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-295.17114766281645);
      double double1 = 247.0;
      Complex complex0 = new Complex((-295.17114766281645), 247.0);
      Complex.valueOf(247.0, 247.0);
      Complex complex1 = Complex.valueOf(247.0, 247.0);
      Complex complex2 = complex0.NaN.atan();
      Complex.valueOf(247.0, 2.0014700145557332E-75);
      complex2.atan();
      Complex complex3 = complex1.sqrt1z();
      complex0.log();
      complex1.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.INF.conjugate();
      complex5.ZERO.acos();
      complex4.INF.acos();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1801.328897393173);
      complex0.INF.tan();
      complex0.tanh();
      Complex complex1 = complex0.I.cos();
      complex1.ONE.hashCode();
      Complex complex2 = new Complex(1801.328897393173, 1801.328897393173);
      Complex complex3 = Complex.valueOf((-1820.3639286));
      complex0.acos();
      Complex complex4 = complex0.NaN.conjugate();
      complex4.ONE.abs();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex2.subtract((-1820.3639286));
      complex7.sqrt();
      complex7.divide(complex0);
      Complex complex8 = complex3.divide(complex7);
      complex8.ZERO.toString();
      complex8.ONE.sqrt1z();
      complex6.asin();
      Complex complex9 = Complex.valueOf(1801.328897393173);
      complex5.nthRoot(4220);
      Complex complex10 = complex2.exp();
      complex10.ZERO.exp();
      complex9.equals(complex2);
      complex0.abs();
      Complex complex11 = Complex.ZERO;
      complex8.tanh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1747.82659753884), (-1747.82659753884));
      Complex complex1 = complex0.acos();
      complex1.I.nthRoot(2376);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex.valueOf((double) 0);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.NaN;
      complex4.add(complex5);
      complex2.negate();
      Complex complex6 = complex0.cosh();
      complex6.atan();
      Complex complex7 = complex3.pow(complex5);
      Complex complex8 = complex2.subtract((-1747.82659753884));
      Complex complex9 = complex3.negate();
      complex9.ONE.sin();
      Complex complex10 = complex1.pow(complex8);
      Complex complex11 = Complex.INF;
      complex11.multiply(110.9451987897825);
      complex10.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-295.56632729979), (-295.56632729979));
      Complex complex1 = new Complex((-295.56632729979));
      Complex complex2 = complex1.ONE.subtract(442413.375);
      Complex complex3 = complex2.NaN.exp();
      complex3.NaN.negate();
      Complex.valueOf((-1782.333727331176));
      complex1.INF.getField();
      complex0.pow(complex1);
      Complex.valueOf((-295.56632729979));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex4.ZERO.conjugate();
      complex1.readResolve();
      complex6.getArgument();
      complex1.getField();
      complex4.atan();
      Complex.valueOf((-1782.333727331176), (-1782.333727331176));
      complex4.isNaN();
      Complex complex7 = complex5.conjugate();
      complex2.divide(complex5);
      complex5.INF.add(Double.NaN);
      Complex.valueOf(0.0);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide(6.283185307179586);
      complex0.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf(2128.27757512);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.NaN;
      complex4.add(complex6);
      Complex complex7 = new Complex(1.0, 2128.27757512);
      Complex complex8 = complex7.negate();
      complex6.cosh();
      Complex complex9 = Complex.I;
      complex7.INF.cosh();
      Complex complex10 = complex9.atan();
      complex0.pow(complex7);
      complex3.subtract((-1012.7792788419));
      complex4.negate();
      complex2.divide(complex8);
      Complex complex11 = new Complex(6.283185307179586, 0.0);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1747.82659753884), (-1747.82659753884));
      Complex complex1 = complex0.acos();
      complex1.I.nthRoot(2376);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.sqrt1z();
      complex1.divide(complex2);
      complex1.add(complex3);
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf((-1747.82659753884), (double) 0);
      complex6.getField();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1747.82659753884), (-1747.82659753884));
      Complex complex1 = complex0.acos();
      complex1.I.nthRoot(2376);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex.valueOf((double) 0);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.NaN;
      complex4.add(complex5);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex0.cosh();
      complex7.atan();
      complex3.pow(complex5);
      complex2.subtract((-1747.82659753884));
      complex3.negate();
      complex7.divide(complex6);
      Complex complex8 = new Complex(2376, Double.POSITIVE_INFINITY);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1801.328897393173);
      complex0.INF.tan();
      complex0.tanh();
      Complex complex1 = complex0.I.cos();
      complex1.I.toString();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = Complex.valueOf((-1820.3639286));
      complex0.acos();
      Complex complex4 = complex0.NaN.conjugate();
      complex4.ONE.abs();
      Complex complex5 = complex2.sinh();
      complex5.INF.acos();
      Complex complex6 = complex2.subtract((-1820.3639286));
      Complex complex7 = complex6.sqrt();
      complex7.multiply(1.0);
      complex6.divide(complex0);
      Complex complex8 = complex3.divide(complex6);
      complex8.ZERO.toString();
      complex8.ONE.sqrt1z();
      complex8.ONE.asin();
      Complex.valueOf(1801.328897393173);
      // Undeclared exception!
      complex5.nthRoot(4220);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-295.56632729979), (-295.56632729979));
      Complex complex1 = new Complex((-295.56632729979));
      Complex complex2 = complex1.ONE.subtract(442413.375);
      Complex complex3 = complex2.NaN.exp();
      complex3.NaN.negate();
      Complex.valueOf((-1782.333727331176));
      complex1.INF.getField();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.valueOf((-295.56632729979));
      Complex complex6 = complex2.asin();
      complex5.I.multiply(275.4371135919912);
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex6.ZERO.conjugate();
      complex1.readResolve();
      complex8.getArgument();
      complex1.getField();
      complex6.atan();
      Complex complex9 = complex7.conjugate();
      complex4.sqrt();
      complex0.cosh();
      complex5.isInfinite();
      complex9.tanh();
      complex0.reciprocal();
      Complex complex10 = complex3.acos();
      complex10.multiply(4198);
      complex1.pow(769.67);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.ZERO.add(complex5);
      complex6.ZERO.reciprocal();
      complex6.INF.createComplex(0.0, 20.0);
      Complex complex7 = complex1.conjugate();
      complex5.NaN.tanh();
      Complex complex8 = complex1.exp();
      complex8.NaN.log();
      Complex complex9 = complex2.multiply((-1.0705722541811197E-7));
      complex9.equals(complex3);
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.NaN.sinh();
      complex5.add(0.0);
      complex2.subtract(complex2);
      Complex complex12 = Complex.valueOf(6.283185307179586, 20.0);
      complex9.isNaN();
      Complex complex13 = complex7.conjugate();
      complex8.divide(complex11);
      complex8.createComplex((-1072.1), 6.283185307179586);
      complex12.hashCode();
      complex13.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
      Complex complex1 = Complex.valueOf((-814.3), (-814.3));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.divide(769.67);
      complex3.isInfinite();
      Complex complex6 = Complex.valueOf(134.1084, 2929.313589959522);
      complex6.add(complex5);
      complex6.tan();
      complex1.pow(1.0);
      complex0.multiply((-300722661));
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.tan();
      Object object0 = new Object();
      complex3.equals(object0);
      complex2.abs();
      complex2.multiply(0.0);
      Complex complex4 = complex3.tanh();
      complex0.reciprocal();
      complex4.subtract(3556.52903);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1801.328897393173);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex0.divide(1801.328897393173);
      complex3.isInfinite();
      Complex complex7 = Complex.valueOf(134.1084, 134.1084);
      Complex complex8 = complex1.add(complex0);
      Complex complex9 = Complex.INF;
      complex7.subtract(complex2);
      Complex complex10 = new Complex(2929.313589959522, 165.21733188345186);
      Complex complex11 = complex10.add(complex6);
      Complex.valueOf(134.1084);
      complex11.multiply(complex10);
      complex4.sqrt1z();
      complex5.conjugate();
      Complex complex12 = complex8.sqrt();
      Complex complex13 = complex7.cosh();
      Complex complex14 = Complex.ZERO;
      complex12.isInfinite();
      complex8.tanh();
      complex13.reciprocal();
      Complex complex15 = new Complex((-4087.9), (-3244784.7965837047));
      complex11.acos();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.sinh();
      complex1.hashCode();
      Complex complex3 = Complex.valueOf((-2026.475923379257), (-2026.475923379257));
      complex3.sqrt();
      double double0 = (-1820.3639286);
      double double1 = (-1.907487641016455E-8);
      Complex complex4 = Complex.valueOf((-1.907487641016455E-8));
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.conjugate();
      complex2.abs();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex7.subtract(Double.NaN);
      Complex complex10 = complex7.sqrt();
      complex2.divide(complex6);
      complex4.divide(complex2);
      complex10.toString();
      Complex complex11 = complex2.sqrt1z();
      complex11.ONE.cos();
      complex8.asin();
      Complex.valueOf((-1.907487641016455E-8));
      int int0 = (-464);
      try { 
        complex9.nthRoot((-464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -464
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-295.17114766281645), 247.0);
      Complex complex1 = Complex.valueOf(247.0, 247.0);
      Complex complex2 = Complex.valueOf(247.0, 247.0);
      Complex complex3 = complex0.NaN.atan();
      Complex.valueOf(247.0, 2.0014700145557332E-75);
      Complex complex4 = complex3.atan();
      complex2.sqrt1z();
      Complex complex5 = complex0.log();
      complex2.readResolve();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.INF.conjugate();
      complex7.ZERO.acos();
      Complex complex8 = complex6.INF.acos();
      complex6.divide(complex5);
      complex5.tanh();
      complex1.exp();
      Complex complex9 = Complex.INF;
      complex9.add((-295.17114766281645));
      Complex complex10 = complex5.tan();
      complex4.equals(complex8);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(complex0);
      Complex complex2 = complex1.divide(1.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(1067.14264912121, (-497.3));
      Complex complex5 = Complex.ZERO;
      complex5.multiply(complex1);
      Complex complex6 = complex3.add(complex2);
      Complex complex7 = Complex.valueOf(2463.3366711449);
      complex0.add(complex1);
      Complex complex8 = complex6.negate();
      complex4.cosh();
      Complex complex9 = complex7.atan();
      complex9.pow(complex8);
      Complex complex10 = complex6.subtract(0.0);
      complex7.negate();
      complex8.divide(complex3);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-295.17114766281645), 247.0);
      Complex complex1 = Complex.valueOf(247.0, 247.0);
      Complex complex2 = Complex.valueOf(247.0, 247.0);
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.subtract((-295.17114766281645));
      Complex complex5 = complex2.createComplex((-295.17114766281645), 247.0);
      Complex complex6 = complex2.exp();
      complex3.getArgument();
      complex0.cosh();
      complex5.createComplex((-882.229), 340.34179993265);
      Complex complex7 = complex4.atan();
      Complex complex8 = Complex.I;
      complex8.tan();
      complex2.createComplex((-20.0), (-1769.1731246));
      complex5.getField();
      complex8.subtract(1876.118);
      complex7.multiply((-20.0));
      complex8.hashCode();
      complex1.pow((-852.55));
      complex4.cosh();
      complex6.divide((-846.4759426));
      Complex complex9 = new Complex((-20.0), 3147.31326);
      complex9.subtract((-295.17114766281645));
      complex6.isNaN();
      complex4.log();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.subtract(complex0);
      complex2.ONE.sqrt1z();
      complex0.NaN.multiply(complex1);
      complex0.abs();
      Complex complex3 = Complex.valueOf((-2469.0), 851.09531);
      complex3.I.pow(complex1);
      Complex complex4 = Complex.valueOf(1770.4869958647, (-1.0));
      Complex complex5 = complex4.ZERO.divide(1770.4869958647);
      Complex complex6 = complex5.cos();
      complex6.ZERO.createComplex(1801.328897393173, 1801.328897393173);
      complex3.INF.tanh();
      int int0 = 1073741824;
      // Undeclared exception!
      complex0.ONE.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1778.9033213163766), (-1778.9033213163766));
      Complex complex1 = complex0.ZERO.subtract((-1778.9033213163766));
      complex1.createComplex(2.5312442779541016, 3578.519482723);
      Complex complex2 = complex0.sqrt1z();
      complex0.getField();
      Complex complex3 = complex2.sin();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-295.56632729979), (-295.56632729979));
      Complex complex1 = new Complex((-295.56632729979));
      Complex complex2 = complex1.ONE.subtract(442413.375);
      complex2.NaN.exp();
      Complex complex3 = complex0.negate();
      complex3.NaN.tanh();
      Complex complex4 = Complex.valueOf((-1782.333727331176));
      complex4.sqrt();
      complex1.INF.getField();
      Complex complex5 = complex0.pow(complex1);
      complex5.sin();
      Complex complex6 = Complex.valueOf((-295.56632729979));
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex7.ZERO.conjugate();
      complex1.readResolve();
      complex9.getArgument();
      complex1.getField();
      complex7.atan();
      Complex.valueOf((-1782.333727331176), (-1782.333727331176));
      complex7.isNaN();
      complex8.conjugate();
      Complex complex10 = Complex.INF;
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-814.3), (-814.3));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.divide(769.67);
      complex4.isInfinite();
      Complex complex7 = Complex.valueOf(134.1084, 2929.313589959522);
      Complex complex8 = complex7.add(complex6);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.subtract(complex9);
      complex9.add(complex3);
      Complex complex11 = Complex.valueOf(769.67);
      complex3.multiply(complex1);
      complex2.sqrt1z();
      Complex complex12 = complex0.conjugate();
      complex12.sqrt();
      complex11.cosh();
      Complex complex13 = Complex.ZERO;
      complex13.isInfinite();
      complex10.tanh();
      Complex complex14 = complex4.reciprocal();
      Complex complex15 = new Complex(769.67, 2174.8033866914006);
      complex15.acos();
      complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.divide(1.0);
      Complex complex4 = new Complex(1.0, 1.4535713195800781);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.multiply((-0.9987840699267185));
      complex0.equals(complex2);
      complex1.exp();
      Complex complex7 = complex6.sinh();
      complex5.add((-962.407628));
      Complex complex8 = complex4.subtract(complex3);
      complex8.toString();
      complex4.subtract((-0.9987840699267185));
      complex4.sqrt();
      complex6.getField();
      complex3.divide(1247.0429788748816);
      complex3.conjugate();
      complex1.getField();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.divide(8.422373919843096E-10);
      complex1.isInfinite();
      complex1.add(complex2);
      complex2.subtract(complex3);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-294.039003), 247.0);
      Complex complex1 = Complex.valueOf(247.0, 247.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex1.add(complex3);
      complex4.divide(0.6223390102386475);
      complex3.cosh();
      complex0.exp();
      complex0.exp();
      Complex complex5 = complex2.add(247.0);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-294.039003), 247.0);
      Complex complex1 = Complex.valueOf(247.0, 247.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = Complex.valueOf(247.0, 2.0014700145557332E-75);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = Complex.valueOf(247.0, 2.3686132431030273);
      Complex complex7 = complex5.sqrt1z();
      complex2.conjugate();
      complex7.exp();
      Complex complex8 = complex0.divide((-5.95068302161656));
      complex3.isInfinite();
      complex1.add(complex4);
      Complex complex9 = complex1.subtract(complex0);
      Complex complex10 = complex6.add(complex3);
      Complex.valueOf((-6.49667713553005E-8));
      Complex complex11 = complex8.multiply(complex7);
      complex11.sqrt1z();
      complex10.conjugate();
      complex0.sqrt();
      Complex complex12 = complex4.cosh();
      complex12.isInfinite();
      complex0.tanh();
      complex10.reciprocal();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1528.559, 1528.559);
      complex0.abs();
      Complex complex1 = complex0.multiply((-1002));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.log();
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1600.0));
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.sin();
      complex1.toString();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex3.INF.add((-1600.0));
      Complex complex5 = complex3.ZERO.acos();
      Complex complex6 = complex1.NaN.sqrt1z();
      complex0.NaN.readResolve();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.ZERO.add((double) 1);
      complex6.ONE.acos();
      complex8.ZERO.asin();
      complex5.ONE.subtract(complex0);
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex10.I.add(complex1);
      complex9.readResolve();
      Complex complex12 = complex0.divide(1349.43718128851);
      complex2.pow(complex3);
      complex2.isInfinite();
      complex5.getImaginary();
      complex4.multiply((-2051.122033016));
      complex8.pow(complex0);
      complex12.equals(complex11);
      complex7.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.INF.sinh();
      Complex complex2 = complex1.asin();
      complex2.tan();
      Complex complex3 = complex0.multiply((-78));
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 2513.98;
      complex0.multiply(2513.98);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sqrt();
      complex0.pow(complex1);
      complex2.INF.tan();
      complex2.INF.add(2513.98);
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      complex0.INF.sinh();
      Complex complex2 = complex1.NaN.pow(0.0);
      Complex complex3 = complex1.NaN.divide(complex2);
      complex0.INF.subtract(complex1);
      Complex.valueOf((-163.655), 0.0);
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex0.ONE.conjugate();
      Complex complex6 = complex5.I.exp();
      complex6.NaN.divide(0.0);
      complex1.isInfinite();
      Complex complex7 = complex4.ONE.add(complex1);
      complex7.NaN.subtract(complex0);
      Complex complex8 = complex0.add(complex4);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.NaN.multiply(complex8);
      complex2.ZERO.sqrt1z();
      complex10.ZERO.conjugate();
      Complex complex11 = complex0.sqrt();
      complex5.cosh();
      complex3.isInfinite();
      Complex complex12 = complex3.tanh();
      complex11.reciprocal();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1690.0482440371263);
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.getField();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.NaN.subtract((-1860.77));
      Complex complex4 = complex3.INF.cos();
      complex4.NaN.acos();
      complex0.I.subtract(1690.0482440371263);
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.cos();
      complex7.pow(0.0);
      complex6.abs();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex6.exp();
      complex6.toString();
      complex5.isNaN();
      complex2.atan();
      complex5.getReal();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.acos();
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.I.pow((-154.318582865264));
      complex0.divide(201.0);
      complex0.divide(complex2);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1801.328897393173);
      complex0.INF.tan();
      complex0.tanh();
      Complex complex1 = complex0.I.cos();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = Complex.valueOf((-1820.3639286));
      complex0.acos();
      Complex complex4 = complex0.NaN.conjugate();
      complex4.ONE.abs();
      Complex complex5 = complex2.sinh();
      complex5.INF.acos();
      Complex complex6 = complex2.subtract((-1820.3639286));
      complex6.sqrt();
      complex6.divide(complex0);
      Complex complex7 = complex3.divide(complex6);
      complex7.ZERO.toString();
      complex7.ONE.sqrt1z();
      complex7.ONE.asin();
      Complex.valueOf(1801.328897393173);
      // Undeclared exception!
      complex5.nthRoot(4220);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.ZERO.nthRoot(1656);
      complex0.INF.getArgument();
      complex0.getReal();
      complex0.isNaN();
      complex1.NaN.pow(complex0);
      Complex complex3 = complex0.add((-2202.31738073426));
      complex3.INF.pow((double) 1656);
      Complex complex4 = complex3.sqrt();
      complex1.cosh();
      complex0.getField();
      complex1.log();
      complex1.conjugate();
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.negate();
      complex0.I.subtract(complex1);
      complex0.INF.readResolve();
      Complex complex2 = complex0.sqrt();
      complex2.abs();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.NaN.multiply(0.0);
      complex2.sqrt();
      complex2.getImaginary();
      complex2.getArgument();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5096182622106617E-105), (-1.5096182622106617E-105));
      complex0.ONE.readResolve();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.acos();
      complex0.I.getArgument();
      complex0.NaN.toString();
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex0.NaN.negate();
      complex4.multiply(207.6);
      complex0.ONE.toString();
      complex0.INF.readResolve();
      complex2.INF.reciprocal();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex0.add(complex5);
      complex4.toString();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex5.divide(0.0);
      Complex.valueOf((-393.0), 1.0);
      complex10.ZERO.cosh();
      Complex complex11 = complex6.add(complex8);
      Complex complex12 = complex11.INF.add(complex0);
      complex1.isInfinite();
      complex3.getImaginary();
      complex2.cos();
      complex1.pow(complex4);
      complex3.add(complex9);
      complex4.cos();
      complex12.isNaN();
      complex7.subtract(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      complex1.I.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.multiply(0.0);
      complex2.I.sqrt();
      complex3.ONE.pow(complex0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.exp();
      complex3.isInfinite();
      complex6.subtract(complex5);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex1.I.multiply(complex0);
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      complex2.exp();
      complex2.INF.add(1938.06832136123);
      complex1.NaN.abs();
      Complex.valueOf((-20.0));
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.ONE.multiply(complex2);
      complex4.INF.divide(1.0);
      Complex.valueOf((-644.6983351095));
      complex2.log();
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.NaN.multiply(565);
      Complex complex4 = complex2.pow(0.0);
      complex4.INF.getField();
      Complex complex5 = complex4.ONE.multiply(complex0);
      complex1.NaN.multiply(258);
      Complex complex6 = complex5.INF.log();
      complex0.I.getField();
      complex1.createComplex(0.0, 1.4621131420135498);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.I.sin();
      complex1.getArgument();
      complex8.I.createComplex(1.4621131420135498, 1.4621131420135498);
      complex5.NaN.abs();
      complex7.I.abs();
      complex1.nthRoot(103);
      complex4.nthRoot(103);
      complex5.ZERO.atan();
      complex2.getField();
      complex6.log();
      complex8.sin();
      Complex complex9 = complex3.sqrt1z();
      complex9.getArgument();
      Complex complex10 = complex9.pow(complex2);
      complex2.add(1.1174279267498045E-159);
      complex10.asin();
      complex0.multiply(565);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1890.88913423095);
      complex0.I.nthRoot(171);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(1890.88913423095);
      Complex complex3 = complex0.ONE.multiply(171);
      complex3.INF.reciprocal();
      complex1.ZERO.getArgument();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex1.I.log();
      complex3.INF.tan();
      complex5.NaN.getArgument();
      Complex complex6 = complex1.multiply((double) 171);
      complex6.readResolve();
      complex3.getField();
      complex2.getReal();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.add(1.0);
      complex1.ONE.negate();
      complex0.equals(complex1);
      complex1.NaN.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.pow(complex0);
      complex1.pow(complex4);
      Complex complex5 = Complex.NaN;
      complex0.multiply(complex5);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.ONE.atan();
      complex7.INF.cosh();
      complex2.toString();
      Complex complex8 = complex0.cosh();
      complex3.getImaginary();
      complex0.getImaginary();
      complex8.getReal();
      complex5.add(1.0364355880696472E-7);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      complex0.NaN.negate();
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf((-1206.9663748));
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.createComplex(6.283185307179586, (-1206.9663748));
      Complex complex5 = Complex.valueOf((-2576.341988194144));
      Complex complex6 = complex4.ZERO.atan();
      complex5.NaN.add(complex0);
      complex6.INF.subtract(20.0);
      complex2.conjugate();
      complex5.log();
      complex3.getField();
      complex3.sqrt1z();
      Complex complex7 = complex1.sqrt();
      complex7.ZERO.subtract((-1301.6725));
      complex3.tanh();
      complex0.isNaN();
      complex5.multiply(1);
      complex2.pow((-2940.0629729999982));
      Complex.valueOf(6.283185307179586, (-1206.9663748));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-294.039003), 247.0);
      Complex complex1 = Complex.valueOf(247.0, 247.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = Complex.valueOf(247.0, 2.0014700145557332E-75);
      complex3.atan();
      complex2.sqrt1z();
      Complex complex5 = complex0.log();
      complex2.readResolve();
      Complex complex6 = Complex.valueOf(247.0, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.INF.conjugate();
      complex7.ZERO.acos();
      complex6.INF.acos();
      Complex complex8 = complex6.divide(complex5);
      Complex complex9 = complex5.tanh();
      Complex complex10 = Complex.valueOf(0.0, 1051.1);
      complex10.ZERO.multiply(complex8);
      complex1.ONE.add(complex10);
      complex10.conjugate();
      Complex complex11 = complex6.add(complex0);
      complex11.ONE.negate();
      complex1.cosh();
      Complex complex12 = complex5.atan();
      Complex complex13 = complex5.pow(complex1);
      complex10.subtract(Double.POSITIVE_INFINITY);
      complex9.negate();
      complex12.divide(complex4);
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.ZERO.subtract(0.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.ZERO.add(complex5);
      complex6.INF.createComplex(0.0, 20.0);
      Complex complex7 = complex3.INF.subtract(1.0183920005400422E109);
      complex1.conjugate();
      Complex complex8 = complex5.NaN.tanh();
      Complex complex9 = complex1.exp();
      complex9.NaN.log();
      Complex complex10 = complex2.multiply((-1.0705722541811197E-7));
      complex10.equals(complex3);
      Complex complex11 = complex3.exp();
      complex11.NaN.sinh();
      Complex complex12 = complex5.add(0.0);
      Complex complex13 = complex7.subtract(complex2);
      complex13.toString();
      complex13.ONE.subtract(1.2019307065458128E277);
      complex12.sqrt();
      complex2.getField();
      complex2.divide(1.2019307065458128E277);
      complex3.conjugate();
      complex1.getField();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1528.559, 1528.559);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex2.ZERO.cos();
      complex6.I.sinh();
      complex4.INF.readResolve();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex8.ONE.tanh();
      complex9.INF.getField();
      complex3.readResolve();
      complex8.INF.nthRoot(1);
      complex0.multiply(1528.559);
      complex7.getImaginary();
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex10.ONE.cosh();
      Complex complex12 = complex11.ONE.atan();
      complex12.I.createComplex(1528.559, (-3.2710544004782533E-4));
      complex2.getArgument();
      Complex complex13 = complex10.add(complex1);
      complex0.ONE.divide(complex10);
      complex3.tan();
      Complex complex14 = complex8.subtract(complex4);
      complex5.reciprocal();
      complex4.getArgument();
      complex13.NaN.sin();
      complex14.add(0.0);
      complex13.pow(306.5671196466426);
      complex4.tan();
      complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.INF.toString();
      complex0.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.subtract(0.0);
      complex2.NaN.asin();
      complex1.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.reciprocal();
      complex3.ONE.subtract(0.0);
      complex2.ZERO.acos();
      complex1.NaN.abs();
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      complex4.I.hashCode();
      try { 
        complex0.nthRoot((-2837));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,837
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3820.18458191, 3820.18458191);
      Complex complex2 = complex0.divide(0.0);
      complex2.INF.getField();
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex3.ZERO.tanh();
      complex4.ONE.hashCode();
      Complex complex5 = complex0.I.createComplex(0.0, 0.0);
      complex0.getReal();
      complex2.hashCode();
      complex5.NaN.toString();
      complex5.equals((Object) null);
      complex5.pow(1.0);
      complex0.sin();
      complex1.add(complex2);
      Complex.valueOf(3820.18458191);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-661.511487), 2676.276);
      Complex complex1 = complex0.ONE.divide((-661.511487));
      Complex complex2 = complex0.NaN.cos();
      complex2.ZERO.getArgument();
      complex0.ZERO.abs();
      complex2.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex0.multiply(0.0);
      complex6.ZERO.subtract(complex1);
      Complex complex7 = complex6.INF.log();
      complex7.ZERO.createComplex(2676.276, 2676.276);
      complex7.NaN.readResolve();
      complex7.INF.cos();
      Complex complex8 = complex1.tanh();
      complex3.nthRoot(1184);
      Complex complex9 = complex8.add(complex1);
      complex9.INF.readResolve();
      complex1.nthRoot(1);
      complex4.hashCode();
      complex9.ONE.sinh();
      complex8.isInfinite();
      Complex complex10 = complex1.INF.createComplex(1, 1);
      complex10.I.negate();
      complex2.sqrt1z();
      complex9.getField();
      complex9.acos();
      complex9.getReal();
      complex5.sinh();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-105.671451));
      Complex complex1 = complex0.I.exp();
      complex0.getReal();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.sin();
      complex2.exp();
      complex0.INF.createComplex(0.0, 0.0);
      Complex complex4 = Complex.valueOf((-105.671451), 0.0);
      complex4.INF.cos();
      complex2.createComplex((-105.671451), (-2094.41));
      complex0.divide(complex3);
      complex1.getField();
      complex1.sinh();
      complex3.getField();
      complex3.divide(3104.307856800344);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2213.62770275836), 373.05);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = Complex.valueOf(2.0, 2.0);
      complex0.INF.pow(complex3);
      complex4.I.add(complex2);
      complex0.ONE.sqrt();
      complex4.INF.sin();
      Complex complex5 = complex0.add(1603.3);
      Complex complex6 = complex5.ZERO.log();
      complex6.ONE.pow(complex4);
      Complex complex7 = complex2.acos();
      complex5.asin();
      complex2.acos();
      complex7.divide(complex4);
      complex4.sin();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.asin();
      complex0.getField();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.INF.multiply((-617.7741));
      Complex complex5 = complex1.log();
      complex3.I.add(complex2);
      complex2.getImaginary();
      Complex complex6 = complex3.tan();
      Complex.valueOf(Double.NaN, 604.8065695);
      Complex complex7 = complex4.sqrt();
      complex7.ZERO.divide(604.8065695);
      complex5.tan();
      complex6.getImaginary();
      Complex complex8 = complex6.add(complex1);
      Complex complex9 = complex8.add(complex6);
      complex9.I.sinh();
      complex8.atan();
      complex6.divide(2.677136737066629E238);
      Complex complex10 = complex6.asin();
      complex10.nthRoot(1285);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.abs();
      complex0.asin();
      Complex.valueOf(4110.1892, 0.0);
      complex0.getArgument();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.getImaginary();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.pow(293.9);
      complex0.I.acos();
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex5.INF.createComplex((-20.0), 0.0);
      complex6.atan();
      Complex complex7 = complex0.log();
      complex0.multiply((-1212));
      Complex complex8 = complex2.sqrt1z();
      complex8.NaN.reciprocal();
      Complex complex9 = complex0.I.acos();
      Complex complex10 = Complex.valueOf(293.9, 0.0);
      complex10.ZERO.add((double) (-1212));
      complex2.subtract(complex10);
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex11.INF.add(complex1);
      complex0.acos();
      Complex complex13 = Complex.ONE;
      complex3.I.multiply(complex13);
      complex9.subtract((-1026.0));
      Complex complex14 = complex12.multiply(complex3);
      complex14.NaN.getField();
      complex3.readResolve();
      complex11.subtract(0.0);
      Complex complex15 = new Complex(293.9, (-1026.0));
      complex8.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double double0 = 978.2;
      Complex complex0 = new Complex(978.2);
      Complex complex1 = complex0.cosh();
      complex0.ZERO.tanh();
      Complex complex2 = complex1.ONE.createComplex(216.0489056002, 216.0489056002);
      complex1.getField();
      Complex.valueOf(978.2);
      complex2.acos();
      complex1.toString();
      complex2.INF.multiply(1522);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.asin();
      complex2.toString();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.asin();
      complex0.ONE.readResolve();
      complex0.acos();
      Complex.valueOf((-1679.79));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      complex1.ONE.readResolve();
      complex1.nthRoot(1);
      Complex complex2 = complex0.exp();
      complex2.exp();
      Complex complex3 = complex1.pow(complex2);
      complex0.add(1.1541756557557508E254);
      complex3.createComplex(1.1541756557557508E254, 2.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex1.multiply(625.4392);
      complex0.getField();
      complex0.readResolve();
      Complex complex5 = complex0.reciprocal();
      complex4.add(9.602293320384794E-8);
      complex2.sqrt1z();
      complex0.INF.createComplex((-2122.64499), 625.4392);
      Complex complex6 = complex5.INF.createComplex(162.166867174016, 625.4392);
      Complex complex7 = complex0.INF.add(complex3);
      Complex complex8 = new Complex(0.0, 0.0);
      complex7.ONE.divide(complex8);
      complex4.getReal();
      complex4.getReal();
      complex6.INF.abs();
      Complex complex9 = complex3.cosh();
      complex9.ONE.readResolve();
      complex3.getReal();
      complex3.divide(complex4);
      complex5.getImaginary();
      complex2.equals(complex0);
      complex0.pow(complex6);
      complex6.toString();
      complex3.getField();
      complex5.isInfinite();
      complex3.getReal();
      complex2.createComplex(2880.7, 162.166867174016);
      complex5.cosh();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-295.56632729979), (-295.56632729979));
      Complex complex1 = new Complex((-295.56632729979));
      Complex complex2 = complex1.ONE.subtract(442413.375);
      Complex complex3 = complex2.NaN.exp();
      complex3.NaN.negate();
      Complex.valueOf((-1782.333727331176));
      complex1.INF.getField();
      complex0.pow(complex1);
      Complex.valueOf((-295.56632729979));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex4.ZERO.conjugate();
      complex1.readResolve();
      complex6.getArgument();
      complex1.getField();
      complex4.atan();
      Complex.valueOf((-1782.333727331176), (-1782.333727331176));
      complex4.isNaN();
      Complex complex7 = complex5.conjugate();
      complex2.divide(complex5);
      complex3.createComplex(0.0, 0.0);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(2641.9104, 2.778073442169904E185);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.asin();
      complex0.nthRoot(1);
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = Complex.valueOf(2.778073442169904E185, (-633.0));
      Complex complex5 = complex4.ZERO.subtract((double) 1);
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.ONE.subtract(complex5);
      Complex complex8 = Complex.I;
      complex8.ZERO.divide(2641.9104);
      complex7.ONE.subtract(complex8);
      complex3.getField();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.NaN.createComplex(0.0, (-556.0));
      Complex complex11 = complex2.exp();
      complex3.isInfinite();
      Complex.valueOf(0.9, (-1.8492643515928268E-7));
      complex1.negate();
      complex10.readResolve();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      complex0.sinh();
      Complex complex3 = complex1.NaN.acos();
      complex1.add(complex2);
      Complex complex4 = complex3.NaN.divide(complex2);
      complex4.getArgument();
      complex1.nthRoot(107);
      complex0.sinh();
      complex0.getArgument();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.sinh();
      complex6.I.tanh();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex((-1747.82659753884), (-1747.82659753884));
      Complex complex1 = complex0.acos();
      List<Complex> list0 = complex1.I.nthRoot(2376);
      assertEquals(2376, list0.size());
      
      Complex complex2 = complex1.pow((-1451.966277));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.multiply(0);
      Complex complex4 = complex3.cosh();
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(2.35619444886173, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-61.75799597847));
      Complex complex1 = Complex.valueOf((-61.75799597847));
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.NaN.divide((-61.75799597847));
      assertSame(complex3, complex2);
      
      Complex complex4 = complex1.I.add(0.0);
      Complex complex5 = complex0.NaN.add(complex1);
      Complex complex6 = complex0.add(complex1);
      String string0 = complex6.toString();
      assertEquals("(-123.51599195694, 0.0)", string0);
      
      Complex complex7 = complex6.divide((-22.00193941));
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex1.add(0.0);
      assertEquals((-61.75799597847), complex8.getReal(), 0.01);
      
      double double0 = complex6.abs();
      assertEquals(123.51599195694, double0, 0.01);
      
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex0.multiply(complex5);
      Complex complex11 = complex9.cos();
      assertEquals(2.4785912770698397, complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      complex10.add(complex0);
      Complex complex12 = complex5.acos();
      assertSame(complex12, complex10);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ONE.asin();
      try { 
        complex2.ZERO.nthRoot((-1792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,792
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-859.948009), 0.0);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.cos();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      
      complex2.ONE.sin();
      complex0.getReal();
      Complex complex4 = complex1.reciprocal();
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.exp();
      assertEquals(1.9371170116094756, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide(6.283185307179586);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = complex4.NaN.add(complex2);
      assertSame(complex5, complex4);
      
      complex3.ONE.cos();
      Complex complex6 = complex0.multiply(complex2);
      complex6.I.getField();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      double double0 = complex3.abs();
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }
}
