/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:34:52 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(484.160126, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.pow((-436.2209942));
      Complex complex3 = complex0.multiply(complex1);
      complex3.ONE.hashCode();
      Complex complex4 = complex3.NaN.add(complex1);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.INF.sin();
      complex8.INF.sqrt1z();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex1.sin();
      complex10.ZERO.multiply(complex1);
      complex7.cosh();
      complex10.INF.pow(Double.POSITIVE_INFINITY);
      complex9.toString();
      Complex complex11 = Complex.ZERO;
      complex2.ZERO.multiply(complex11);
      complex2.toString();
      complex0.multiply(complex3);
      complex4.ONE.add(484.160126);
      complex8.readResolve();
      complex2.exp();
      complex6.acos();
      complex10.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1375.5), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ZERO.atan();
      complex2.NaN.pow(complex1);
      complex2.ONE.asin();
      Complex complex3 = complex1.NaN.reciprocal();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex4.ZERO.add((-761.1563158429));
      complex4.INF.multiply(Double.POSITIVE_INFINITY);
      complex2.pow((-761.1563158429));
      Complex complex6 = complex5.cosh();
      complex6.ZERO.subtract((-1375.5));
      complex0.INF.readResolve();
      complex0.cos();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex3.INF.sqrt1z();
      complex8.ONE.pow(558.5234);
      Complex complex10 = complex0.add(complex2);
      Complex complex11 = complex7.exp();
      Complex complex12 = complex10.add(3705.7349);
      complex1.multiply(1);
      complex4.add((-761.1563158429));
      complex9.multiply(complex11);
      complex12.multiply(1);
      complex3.exp();
      Complex.valueOf(558.5234, 0.0);
      Complex.valueOf((-761.1563158429));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.41421356237309515);
      complex0.getField();
      Complex complex1 = new Complex(20.0, 0.41421356237309515);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add((-689.67794814423));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.divide(complex3);
      complex0.add(complex1);
      Complex complex5 = complex0.asin();
      complex2.hashCode();
      complex4.multiply(complex5);
      complex4.divide(1.4745488838292975E-18);
      Complex complex6 = complex4.log();
      complex1.toString();
      complex6.multiply(579);
      complex3.nthRoot(254);
      Complex complex7 = new Complex(254);
      complex1.getField();
      complex7.acos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.ZERO.subtract((-2.862720607805682E216));
      complex1.add(complex0);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.INF.multiply(655);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      complex0.cos();
      Complex complex3 = complex2.add((-1221.383822942));
      Complex complex4 = Complex.ZERO;
      complex0.subtract(complex4);
      Complex complex5 = complex0.createComplex(2.8542606680657947, 15.464331448579);
      Complex complex6 = Complex.valueOf(1454.53, Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.divide(complex3);
      complex4.multiply(complex6);
      Complex complex8 = complex2.sqrt1z();
      complex7.sqrt();
      complex3.readResolve();
      Complex complex9 = complex8.negate();
      complex8.sqrt();
      Complex complex10 = Complex.INF;
      Complex.valueOf(190.7180929482134);
      Complex complex11 = complex5.multiply(complex8);
      complex11.INF.cos();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1028.9), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2737.314223), (-20.0));
      Complex complex1 = complex0.NaN.tanh();
      complex0.tan();
      complex1.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-543), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(1066.393);
      complex1.ONE.pow(complex0);
      Complex.valueOf(1149.7027);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.I.sqrt();
      complex1.INF.divide((-439.0893141731665));
      Complex complex4 = complex1.ONE.add(Double.NaN);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.conjugate();
      complex7.toString();
      complex5.reciprocal();
      complex5.atan();
      complex4.asin();
      complex5.divide(complex3);
      complex1.reciprocal();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2127.0115520338), Double.POSITIVE_INFINITY);
      complex0.acos();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      complex0.toString();
      Complex complex3 = Complex.ZERO;
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1921772956848145, 7.675790582869644E157);
      Complex complex1 = complex0.pow(7.675790582869644E157);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.ZERO.negate();
      complex3.ZERO.tanh();
      complex2.NaN.conjugate();
      complex1.NaN.hashCode();
      Complex complex4 = Complex.valueOf(7.675790582869644E157, (-1.2489460589853119E153));
      complex0.ZERO.subtract(complex4);
      complex1.multiply((-1));
      Complex complex5 = complex0.ZERO.asin();
      complex0.abs();
      Complex complex6 = complex0.asin();
      complex6.I.asin();
      complex6.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.divide(7.675790582869644E157);
      Complex complex8 = complex7.ZERO.tanh();
      complex8.I.reciprocal();
      complex3.sinh();
      complex3.sqrt();
      complex4.getField();
      complex2.multiply(complex1);
      complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1.5707963267948966, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex0.ZERO.multiply(1073);
      Complex complex2 = complex1.add((-4.1291070428848755E-76));
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-21.69688381), (-21.69688381));
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-908.968));
      complex0.tanh();
      Complex complex1 = Complex.ONE;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(5362.41129495, 5362.41129495);
      complex1.tan();
      complex0.tanh();
      Complex complex2 = Complex.INF;
      complex2.divide(5362.41129495);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 258.664077167562);
      Complex complex1 = complex0.tanh();
      complex1.NaN.abs();
      Complex complex2 = Complex.ONE;
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex1.NaN.abs();
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.INF.multiply(Double.NaN);
      Complex complex3 = complex1.ONE.sinh();
      complex3.I.sqrt();
      complex3.INF.hashCode();
      Complex complex4 = complex0.createComplex(5.551115123125783E-17, 5.551115123125783E-17);
      Complex complex5 = complex1.multiply(0.0);
      complex5.I.log();
      complex5.ZERO.exp();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.pow(1.0);
      complex7.ONE.nthRoot(2898);
      complex1.toString();
      complex2.multiply(1603);
      complex2.abs();
      complex6.getField();
      Complex complex8 = complex6.add(1.1177616119384766);
      complex8.ZERO.subtract(complex1);
      Complex.valueOf(20.0);
      complex8.toString();
      Complex complex9 = complex2.divide(1138.26996401);
      complex2.nthRoot(1603);
      complex4.sqrt1z();
      Complex.valueOf(1.0, Double.NaN);
      complex9.nthRoot(1603);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2359976768493652, Double.POSITIVE_INFINITY);
      complex0.tan();
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-853.166927421));
      complex0.INF.subtract((-2247.68));
      complex0.nthRoot(2030);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4497.808245061187, 4497.808245061187);
      Complex complex2 = complex1.multiply((-3494.8));
      complex2.NaN.asin();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(258.664077167562);
      Complex complex1 = complex0.ONE.multiply(789);
      Complex complex2 = complex1.createComplex(258.664077167562, 20.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.tan();
      complex2.toString();
      complex1.divide(complex3);
      Complex complex5 = Complex.valueOf(258.664077167562);
      Complex complex6 = complex5.subtract(complex4);
      complex6.ZERO.cos();
      Complex complex7 = complex4.acos();
      complex3.createComplex(789, (-1494.51050518));
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 563.140878723088);
      Complex complex1 = complex0.subtract(563.140878723088);
      Complex complex2 = Complex.valueOf(Double.NaN, (-477.1281016696));
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.INF.sqrt();
      complex4.NaN.abs();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex0.divide(563.140878723088);
      Complex complex7 = complex6.ZERO.subtract(complex5);
      complex7.toString();
      Complex.valueOf((-1371.3816356409));
      Complex.valueOf(Double.NaN, (-477.1281016696));
      complex3.I.sinh();
      Complex complex8 = complex1.ZERO.divide((-1371.3816356409));
      complex8.INF.sqrt();
      complex8.ZERO.sqrt1z();
      complex6.subtract(1.0274494061148778E-8);
      complex1.sqrt();
      complex6.NaN.sqrt1z();
      Complex complex9 = complex0.cosh();
      complex9.divide(563.140878723088);
      Complex complex10 = complex6.add(Double.NaN);
      complex5.negate();
      complex10.toString();
      Complex complex11 = complex3.multiply(complex2);
      complex0.reciprocal();
      Complex complex12 = Complex.I;
      complex11.add(complex12);
      Complex.valueOf(595.46039154708);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-21.69688381), (-21.69688381));
      Complex complex1 = complex0.add((-21.69688381));
      complex1.isInfinite();
      complex0.exp();
      Complex complex2 = complex1.divide((-2909.69));
      complex2.ONE.hashCode();
      complex0.nthRoot(719);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-810.601858));
      Complex complex1 = complex0.atan();
      complex1.cosh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.multiply((-2864.6));
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex1.log();
      Complex complex8 = Complex.valueOf((-810.601858));
      complex7.add(complex8);
      Complex complex9 = complex4.divide((-988.595845577696));
      complex1.createComplex(2289.637101075, (-909.857852107637));
      complex8.conjugate();
      Complex complex10 = complex5.tan();
      complex6.toString();
      complex10.divide(complex9);
      Complex complex11 = Complex.ZERO;
      complex2.subtract(complex11);
      Complex complex12 = Complex.I;
      complex12.isInfinite();
      complex6.sin();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2923.21, (-21.69688381));
      Complex complex1 = complex0.add(1095.04057259);
      complex1.isInfinite();
      Complex complex2 = new Complex(2099.4019400568);
      complex1.isInfinite();
      complex2.tan();
      Complex complex3 = new Complex(2923.21, 1095.04057259);
      complex3.equals(complex0);
      complex2.equals("unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(589.7759779070277, Double.NaN);
      Complex complex1 = Complex.valueOf((-8205932.159999999));
      Complex complex2 = complex1.ONE.add((-2760.0));
      Complex complex3 = complex2.ZERO.log();
      complex3.INF.exp();
      complex0.cosh();
      complex0.reciprocal();
      Complex complex4 = Complex.valueOf((-2760.0), (-8205932.159999999));
      complex1.createComplex((-8205932.159999999), (-8205932.159999999));
      complex2.readResolve();
      complex2.sinh();
      complex4.atan();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.pow(0.0);
      complex1.ZERO.multiply(110.87378857);
      complex3.ZERO.nthRoot(17);
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.sqrt();
      complex1.multiply(complex4);
      complex6.abs();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf((-7.1844969234484515E-96), (-7.1844969234484515E-96));
      Complex complex4 = complex0.add((-228.297150622509));
      complex4.nthRoot(7);
      Complex complex5 = complex1.conjugate();
      complex5.ZERO.pow(complex2);
      complex2.exp();
      complex4.divide((-433.7656549553));
      complex4.nthRoot(7);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-514.06396), (-1105.6976003880995));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(2145425476);
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.INF.multiply(37);
      complex4.log();
      Complex complex5 = complex1.NaN.cos();
      Complex complex6 = Complex.valueOf(909.857852107637);
      Complex complex7 = complex6.ONE.sinh();
      complex0.pow(complex1);
      complex0.readResolve();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.NaN.sqrt1z();
      complex6.ONE.multiply(110);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex5.pow((double) 2145425476);
      complex11.ONE.tanh();
      Complex complex12 = Complex.valueOf(909.857852107637);
      Complex complex13 = complex10.multiply((double) 37);
      complex10.createComplex((-514.06396), (-514.06396));
      complex7.INF.add((double) 2145425476);
      complex2.exp();
      complex12.multiply(1466.806927968535);
      complex13.pow(complex3);
      complex0.reciprocal();
      complex9.createComplex(1466.806927968535, 1466.806927968535);
      complex5.sqrt1z();
      complex0.pow((double) 2145425476);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(0.0);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.isNaN();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
      complex1.tan();
      Complex.valueOf(3.9492069080365776E-17);
      Complex complex3 = Complex.I;
      Object object0 = new Object();
      Complex complex4 = Complex.I;
      complex4.nthRoot(422);
      complex0.add(Double.POSITIVE_INFINITY);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.tan();
      complex3.toString();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex1.subtract(798.937);
      Complex complex6 = complex2.subtract(complex5);
      complex4.isInfinite();
      complex5.sin();
      complex3.multiply(complex0);
      Complex.valueOf(3.9492069080365776E-17);
      complex2.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-293.3868437));
      complex0.atan();
      Complex complex1 = complex0.cosh();
      complex1.cosh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex3.asin();
      Complex complex4 = complex1.sqrt1z();
      Complex.valueOf((-1595.75064449), (-2864.6));
      complex3.acos();
      complex4.atan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.nthRoot(65);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.I.multiply(65);
      Complex complex5 = complex4.divide(1285.8650422342873);
      complex4.createComplex(65, 65);
      Complex complex6 = complex4.conjugate();
      complex3.tan();
      complex1.toString();
      Complex complex7 = complex3.divide(complex6);
      complex0.subtract(1285.8650422342873);
      Complex complex8 = complex7.subtract(complex6);
      complex5.isInfinite();
      Complex complex9 = complex3.sin();
      Complex complex10 = Complex.ZERO;
      complex9.multiply(complex10);
      Complex.valueOf((-2066.0));
      complex2.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.0, 258.664077167562);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.add(2.0);
      Complex complex5 = Complex.valueOf(258.664077167562);
      complex5.nthRoot(231);
      complex4.subtract(complex3);
      complex3.conjugate();
      complex2.INF.negate();
      Complex complex6 = new Complex(872.63377);
      complex6.exp();
      complex1.divide(2.0);
      try { 
        complex4.nthRoot((-1049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,049
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-293.3868437);
      Complex complex0 = new Complex((-293.3868437));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.cosh();
      complex1.I.multiply((-2864.6));
      Complex complex3 = complex0.NaN.asin();
      complex3.sqrt1z();
      int int0 = 2147481496;
      // Undeclared exception!
      complex2.nthRoot(2147481496);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-293.3868437));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex1.isNaN();
      complex1.pow((-293.3868437));
      Complex complex3 = Complex.valueOf((-293.3868437), 1618.7517525227);
      Complex complex4 = complex2.tan();
      Complex.valueOf((-4737.01), (-0.9999785006342314));
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = Complex.ONE;
      complex7.abs();
      complex6.toString();
      complex3.pow((-2693.68));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-293.3868437));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sqrt1z();
      complex3.nthRoot(37);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.multiply(37);
      complex5.sin();
      complex4.subtract(complex6);
      complex2.nthRoot(37);
      complex2.multiply(37);
      Complex complex7 = complex1.createComplex((-20.0), (-293.3868437));
      complex7.tanh();
      Complex complex8 = complex2.asin();
      Complex complex9 = Complex.valueOf(578.82878294957);
      complex9.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-21.696883813));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.ONE;
      complex3.add(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.createComplex((-2594.7382), 2.5510969161987305);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex2.tan();
      complex3.toString();
      complex2.divide(complex6);
      Complex complex9 = complex4.multiply((-21.696883813));
      complex9.subtract(complex7);
      complex1.isInfinite();
      complex8.sin();
      complex3.multiply(complex6);
      Complex.valueOf((-139.10116677547));
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.0, 2761.499664832751);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.sin();
      complex0.isNaN();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.sqrt1z();
      complex5.atan();
      Complex complex8 = complex1.subtract(2.0);
      complex7.multiply(2761.499664832751);
      complex3.abs();
      complex4.hashCode();
      complex0.cosh();
      complex8.atan();
      Complex complex9 = new Complex(3.667348665023154E221, (-682.50253));
      complex5.divide(complex9);
      complex9.divide(2761.499664832751);
      Complex complex10 = new Complex(2761.499664832751, 3.667348665023154E221);
      Complex complex11 = complex10.pow(complex9);
      complex11.atan();
      complex5.createComplex((-1332.188888032346), (-3326.17568067774));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.cos();
      Complex complex2 = new Complex(0.0, 0.0);
      complex2.ONE.multiply(0.0);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex2.NaN.hashCode();
      Complex complex4 = complex3.INF.cosh();
      complex0.atan();
      complex0.divide(complex1);
      complex3.multiply(1027);
      complex2.createComplex((-1.1564717694090882E-280), Double.NaN);
      complex4.tanh();
      complex4.asin();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sin();
      complex1.INF.sqrt1z();
      complex0.ZERO.nthRoot(37);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.I.multiply(37);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex3.NaN.subtract(complex2);
      complex3.nthRoot(37);
      Complex complex6 = new Complex(37, (-3935.875927915478));
      complex6.divide((-1727.551));
      complex0.pow(complex4);
      complex1.atan();
      complex5.createComplex(2645.317, Double.POSITIVE_INFINITY);
      complex6.multiply(24);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.multiply(3969.188141503);
      Complex complex5 = complex3.subtract(complex0);
      complex5.hashCode();
      Complex complex6 = complex4.cosh();
      complex0.atan();
      complex5.divide(complex2);
      complex3.divide((-827.769656));
      Complex complex7 = complex1.pow(complex4);
      complex6.atan();
      complex0.ONE.divide(complex3);
      complex7.createComplex(1912.5021598088, (-827.769656));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-293.3868437));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(complex4);
      complex6.multiply((-293.3868437));
      Complex complex7 = complex1.subtract(complex6);
      complex2.hashCode();
      Complex complex8 = complex0.cosh();
      complex8.INF.abs();
      Complex complex9 = complex0.atan();
      complex3.divide(complex0);
      Complex complex10 = complex1.divide((-293.3868437));
      complex10.pow(complex4);
      complex7.atan();
      complex9.createComplex((-2.260433328226171E-8), 20.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2985.632253594, 2985.632253594);
      complex0.getArgument();
      complex0.abs();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.tanh();
      complex1.INF.multiply((-1592));
      complex1.I.sin();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.ZERO.log();
      complex2.ONE.acos();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex1.ZERO.sin();
      complex2.isNaN();
      Complex complex8 = complex0.NaN.multiply(complex5);
      complex8.ZERO.sqrt1z();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.I.subtract(4222.3216252911825);
      Complex complex11 = complex1.multiply(0.7853981633974483);
      complex11.NaN.abs();
      Complex complex12 = complex1.tanh();
      complex12.ONE.tanh();
      complex2.getImaginary();
      Complex complex13 = complex6.log();
      complex11.getField();
      complex9.getReal();
      Complex complex14 = complex10.sin();
      complex14.ONE.subtract((-1132.4939888537));
      complex7.subtract(complex9);
      complex9.multiply(complex8);
      complex9.cosh();
      complex13.pow(complex6);
      complex7.log();
      complex10.atan();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(2985.632253594, 2985.632253594);
      complex0.getArgument();
      complex0.abs();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.sqrt1z();
      complex2.nthRoot(230);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.multiply(2595);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex1.subtract(complex4);
      complex2.nthRoot(2595);
      complex5.multiply(581);
      Complex complex8 = Complex.NaN;
      complex7.tanh();
      Complex complex9 = new Complex(0.7853981633974483, 581);
      complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.sin();
      Complex complex1 = complex0.multiply((-1592));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.log();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex3.cos();
      complex2.sin();
      complex0.isNaN();
      complex0.multiply(complex5);
      Complex complex8 = Complex.INF;
      complex8.sqrt1z();
      complex7.atan();
      complex4.subtract(0.0);
      Complex complex9 = complex5.multiply((double) (-1592));
      complex0.abs();
      Complex complex10 = Complex.ZERO;
      complex10.tanh();
      complex6.tanh();
      complex4.getImaginary();
      Complex complex11 = complex0.log();
      complex9.getField();
      complex1.getReal();
      complex6.sin();
      Complex complex12 = complex2.subtract((double) (-1592));
      Complex complex13 = complex6.subtract(complex10);
      Complex complex14 = Complex.valueOf((-1132.4939888537), (-3.141592653589793));
      complex5.multiply(complex14);
      complex10.cosh();
      complex1.pow(complex12);
      complex11.log();
      complex13.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.ZERO.add((-559.839951));
      complex0.I.nthRoot(231);
      complex1.subtract(complex3);
      Complex complex4 = complex0.conjugate();
      complex1.exp();
      Complex complex5 = new Complex(1130.129, 1130.129);
      complex0.divide(complex4);
      complex2.add(1130.129);
      Complex complex6 = Complex.NaN;
      complex6.isNaN();
      complex0.isInfinite();
      Complex complex7 = Complex.ONE;
      complex7.tan();
      Complex.valueOf(2.335970335559215E136);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf(588.5450023);
      complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-21.696883813), (-21.696883813));
      complex0.add((-21.696883813));
      complex0.isNaN();
      Complex complex1 = new Complex(999.0);
      complex1.isInfinite();
      Complex complex2 = complex1.tan();
      Complex.valueOf(660.232);
      complex0.equals(complex2);
      complex1.nthRoot(422);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.log();
      complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-293.3868437), (-0.9981071869732064));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-293.3868437));
      Complex complex3 = complex0.tanh();
      complex1.nthRoot(1);
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.INF;
      complex5.getArgument();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex4.createComplex(0.7853981633974483, (-293.3868437));
      complex5.divide(complex6);
      Complex complex8 = Complex.INF;
      complex8.cosh();
      Complex complex9 = complex7.pow(complex2);
      complex9.cos();
      complex8.add(0.7853981633974483);
      Complex complex10 = complex2.createComplex(2.0, 2.8542606680657947);
      Complex complex11 = Complex.valueOf(2.0, 1.8356926441192627);
      Complex complex12 = complex11.divide(complex2);
      complex3.multiply(complex9);
      complex9.sqrt1z();
      complex0.sqrt();
      complex12.readResolve();
      complex1.negate();
      complex2.sqrt();
      Complex complex13 = Complex.INF;
      complex13.subtract(1.324784755706787);
      complex0.atan();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2013.36276418643);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.multiply(complex2);
      complex3.multiply((-1.7839974359909697E-8));
      Complex complex5 = complex4.subtract(complex1);
      complex5.hashCode();
      complex5.cosh();
      Complex complex6 = complex1.atan();
      complex2.divide(complex4);
      Complex complex7 = Complex.valueOf(1056.6284);
      Complex complex8 = complex7.divide(1056.6284);
      complex8.sqrt1z();
      Complex complex9 = Complex.ONE;
      complex8.INF.add(complex9);
      complex5.pow(complex4);
      complex6.atan();
      complex7.createComplex(1056.6284, (-1.7839974359909697E-8));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.0, 2761.499664832751);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.sin();
      complex0.isNaN();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex1.subtract(2.0);
      Complex complex10 = complex7.multiply(2761.499664832751);
      complex3.abs();
      Complex complex11 = Complex.valueOf((-810.4151295239));
      complex11.tanh();
      complex1.tanh();
      complex3.getImaginary();
      Complex complex12 = complex8.log();
      complex2.getField();
      Complex complex13 = new Complex(2761.499664832751, 2.0);
      complex13.getReal();
      complex6.sin();
      complex10.subtract((-1607.600912857501));
      complex10.subtract(complex9);
      Complex complex14 = complex11.multiply(complex12);
      complex14.cosh();
      complex2.pow(complex12);
      complex8.log();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-293.3868437));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.cosh();
      complex1.I.multiply((-2864.6));
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.asin();
      complex3.ONE.log();
      complex7.NaN.add(complex1);
      complex7.I.divide(0.0);
      Complex complex8 = complex7.INF.createComplex((-293.3868437), (-909.857852107637));
      complex8.ZERO.conjugate();
      Complex complex9 = complex5.tan();
      complex9.ZERO.toString();
      Complex complex10 = complex8.divide(complex4);
      Complex complex11 = complex10.subtract((-293.3868437));
      complex9.multiply((-139.10116677547));
      complex10.subtract(complex4);
      complex10.isInfinite();
      complex0.sin();
      complex6.multiply(complex4);
      Complex.valueOf((-1659.474898363));
      complex1.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.sqrt1z();
      complex0.I.tan();
      Complex complex3 = Complex.valueOf(0.0, (-1055.6284));
      complex0.multiply(complex3);
      complex3.abs();
      Complex complex4 = complex0.asin();
      complex4.NaN.log();
      Complex complex5 = complex4.divide(1055.6284);
      Complex complex6 = complex5.ONE.multiply((-6850));
      complex5.INF.tanh();
      Complex complex7 = complex6.createComplex(1712.0066, 2384.768460467);
      Complex complex8 = complex5.atan();
      complex0.hashCode();
      complex5.acos();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex8.tan();
      complex2.ONE.pow(Double.NaN);
      Complex complex11 = complex9.negate();
      Complex complex12 = complex8.conjugate();
      complex11.abs();
      complex10.divide(complex5);
      complex1.add((double) (-6850));
      complex2.isNaN();
      complex7.isInfinite();
      Complex complex13 = Complex.INF;
      complex13.tan();
      Complex.valueOf(0.42743928496010214);
      complex12.equals((Object) null);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.tanh();
      Complex complex2 = complex0.ZERO.add((-559.839951));
      complex0.I.nthRoot(231);
      complex1.subtract(complex2);
      complex0.conjugate();
      complex2.nthRoot(773);
      complex1.multiply((-2832));
      Complex complex3 = complex0.createComplex((-1224.320433853204), (-559.839951));
      Complex complex4 = complex2.tanh();
      complex4.asin();
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2362.0, 2362.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.divide(873.75115848);
      complex1.ZERO.nthRoot(17);
      Complex complex4 = complex3.I.add(complex1);
      complex4.ZERO.toString();
      Complex complex5 = complex2.INF.pow(complex0);
      complex5.ONE.sqrt();
      complex0.isNaN();
      Complex.valueOf(0.0);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.ONE.exp();
      complex1.getField();
      complex8.I.multiply(complex7);
      complex5.INF.conjugate();
      Complex complex9 = complex1.createComplex((-3329.916055), (-1712.0066));
      complex6.readResolve();
      complex5.nthRoot(17);
      Complex complex10 = complex5.sqrt();
      complex10.abs();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex6.multiply(complex8);
      complex9.equals("nq-Wi;IF:-9bh_,0>");
      Complex complex13 = complex9.reciprocal();
      complex13.tan();
      complex11.tan();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = (-1827.057457876197);
      Complex complex0 = Complex.valueOf((-37.20652515479), (-1827.057457876197));
      complex0.getField();
      complex0.conjugate();
      Complex complex1 = complex0.I.asin();
      complex0.getArgument();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(3.975449484028966E-31);
      complex0.ONE.toString();
      complex0.INF.toString();
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.NaN.divide(3.975449484028966E-31);
      Complex complex3 = complex2.INF.exp();
      complex3.ONE.readResolve();
      complex0.NaN.toString();
      complex3.subtract(complex1);
      complex0.ONE.log();
      Complex complex4 = complex0.tan();
      complex2.hashCode();
      complex4.ZERO.hashCode();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.add(complex1);
      complex0.NaN.cos();
      Complex complex7 = complex6.INF.multiply(complex3);
      complex7.atan();
      Complex complex8 = complex6.INF.cos();
      Complex complex9 = complex2.tan();
      complex9.ONE.toString();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex9.sin();
      complex11.NaN.subtract(3.975449484028966E-31);
      complex10.multiply(0.0);
      complex5.sin();
      complex1.equals("(1.0, 0.0)");
      Complex complex12 = complex9.acos();
      complex8.exp();
      complex12.isInfinite();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt1z();
      Complex complex1 = complex0.conjugate();
      double double0 = 0.0;
      complex1.sinh();
      try { 
        complex1.ONE.nthRoot((-1366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,366
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.pow(0.0);
      complex3.INF.reciprocal();
      Complex complex4 = complex1.NaN.conjugate();
      complex2.ZERO.readResolve();
      complex4.getField();
      Complex complex5 = complex2.NaN.reciprocal();
      complex0.getReal();
      complex2.asin();
      complex1.hashCode();
      complex0.conjugate();
      Complex complex6 = complex5.pow(Double.NaN);
      complex0.divide(complex6);
      Complex complex7 = complex2.sqrt();
      complex7.NaN.reciprocal();
      Complex.valueOf(2107.78, 8.149473794244232E-10);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(3.270849446965521E-265);
      complex0.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.NaN.sin();
      complex1.ONE.getField();
      Complex complex5 = complex0.ZERO.divide(complex1);
      complex2.ONE.getField();
      complex1.hashCode();
      complex4.isNaN();
      complex5.ZERO.tanh();
      Complex complex6 = complex4.sqrt1z();
      complex2.INF.divide(0.0);
      complex5.createComplex(3.270849446965521E-265, 707.77);
      complex6.INF.asin();
      complex3.INF.conjugate();
      complex2.isNaN();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.subtract(complex3);
      Complex complex9 = complex7.ONE.subtract(complex3);
      complex9.multiply(complex4);
      complex8.I.nthRoot(264);
      complex5.ONE.nthRoot(264);
      complex7.hashCode();
      complex5.getField();
      complex7.isNaN();
      complex7.sin();
      complex6.INF.atan();
      complex8.cosh();
      complex4.tanh();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.tanh();
      Complex complex2 = complex0.ZERO.add((-559.839951));
      complex0.I.nthRoot(231);
      complex1.subtract(complex2);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.exp();
      complex3.divide(1130.129);
      try { 
        complex4.nthRoot((-1916));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,916
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1659.474898363), (-1659.474898363));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.I.tanh();
      complex2.ZERO.nthRoot(1);
      Complex complex4 = complex0.cos();
      complex0.ONE.getArgument();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.createComplex((-1659.474898363), (-1659.474898363));
      Complex complex7 = complex6.INF.divide(complex3);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.pow(complex5);
      Complex complex10 = complex5.NaN.cos();
      complex10.NaN.add(0.0);
      complex6.NaN.createComplex(1, 5052.07088);
      Complex complex11 = complex5.I.divide(complex6);
      complex8.multiply(complex11);
      complex8.sqrt1z();
      complex9.sqrt();
      complex4.readResolve();
      complex1.negate();
      complex5.sqrt();
      complex2.subtract(0.0);
      complex10.atan();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.675790582869644E157), (-295.7513678));
      complex0.NaN.toString();
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.tanh();
      complex1.I.sqrt1z();
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf((-295.7513678));
      Complex complex4 = complex2.subtract(complex3);
      complex2.I.getField();
      complex0.I.cos();
      Complex complex5 = complex3.createComplex(Double.NaN, (-295.7513678));
      Complex complex6 = complex3.sin();
      complex2.hashCode();
      complex6.NaN.getArgument();
      complex5.getField();
      complex6.abs();
      complex4.add((-295.7513678));
      complex3.subtract(Double.NaN);
      Complex.valueOf((-295.7513678), 2.1077440662171152E-207);
      complex6.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(2.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.INF.log();
      complex0.subtract(0.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.sqrt1z();
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.negate();
      complex2.add(564.42862875);
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 894;
      Complex complex1 = complex0.multiply(894);
      complex1.I.getArgument();
      complex1.ONE.add(complex0);
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      complex1.I.multiply(0.0);
      Complex complex3 = complex2.I.sin();
      complex2.ZERO.exp();
      complex3.createComplex(Double.NaN, 20.0);
      complex0.isInfinite();
      complex0.divide(0.0);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1732.853477745));
      complex0.I.toString();
      Complex complex1 = complex0.exp();
      complex0.getReal();
      complex1.INF.add(complex0);
      complex1.NaN.divide((-1384.2915996861868));
      Complex complex2 = Complex.valueOf(3437.77);
      complex2.ZERO.log();
      Complex complex3 = complex1.conjugate();
      Complex.valueOf((-2814.52298566594));
      complex1.NaN.abs();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex5.I.sqrt();
      complex6.abs();
      Complex complex7 = Complex.valueOf(686.7481232);
      Complex complex8 = complex1.tan();
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      Complex complex10 = complex9.INF.sinh();
      Complex complex11 = complex10.ZERO.tanh();
      complex7.NaN.nthRoot(4828);
      Complex complex12 = complex1.negate();
      complex12.hashCode();
      Complex complex13 = Complex.valueOf(3437.77, (-1898.8575106172543));
      complex13.INF.sqrt1z();
      complex9.multiply(4828);
      complex8.getImaginary();
      Complex complex14 = complex11.sinh();
      complex14.ZERO.acos();
      Complex complex15 = complex9.sqrt1z();
      complex15.tanh();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.add((-2571.8803));
      complex1.NaN.createComplex(754.22, 754.22);
      Complex complex3 = complex0.INF.cosh();
      complex0.hashCode();
      Complex.valueOf(3.0482348236054953E-83);
      complex2.INF.pow(935.5523114357);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.INF.subtract(0.0);
      complex3.pow(0.0);
      complex3.sinh();
      complex2.createComplex(0.0, 2383.37);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.sqrt();
      complex2.ONE.add((-1731.526802280027));
      Complex complex3 = complex0.add(900.736);
      Complex complex4 = Complex.valueOf(1.0, (-196.7));
      complex4.I.subtract((-1731.526802280027));
      Complex complex5 = complex3.I.acos();
      Complex complex6 = Complex.valueOf(0.04168701738764507);
      complex3.getField();
      complex4.isNaN();
      complex6.NaN.sqrt1z();
      Complex complex7 = Complex.valueOf(900.736);
      complex7.NaN.getField();
      complex3.sin();
      complex6.tan();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 7.196457718729758E281);
      Complex complex1 = complex0.sin();
      complex0.toString();
      complex1.I.subtract((-1179.963941));
      Complex complex2 = complex0.multiply(1090);
      Complex complex3 = complex1.I.subtract(complex0);
      complex2.ONE.tanh();
      complex3.INF.abs();
      Complex complex4 = complex3.INF.add(complex1);
      Complex complex5 = complex4.INF.add((-172.947763));
      complex5.INF.sqrt();
      complex1.getImaginary();
      Complex complex6 = complex1.tanh();
      complex6.I.multiply((-4.595250028278979E-113));
      Complex complex7 = complex0.sqrt1z();
      complex7.ZERO.log();
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-826.0474757648904), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex.valueOf(0.0);
      Complex complex4 = complex2.NaN.pow(complex3);
      try { 
        complex4.INF.nthRoot((-1690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,690
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sqrt();
      complex1.INF.subtract(0.0);
      complex1.sin();
      complex2.hashCode();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      complex1.sqrt1z();
      complex0.I.tan();
      Complex complex2 = Complex.valueOf(0.0, (-1055.6284));
      Complex complex3 = complex0.multiply(complex2);
      complex2.abs();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex4.divide(1055.6284);
      complex6.ONE.multiply((-6850));
      complex6.INF.tanh();
      Complex complex7 = complex4.subtract((-191.8));
      complex7.ONE.multiply((-191.8));
      complex1.subtract(complex7);
      complex0.isInfinite();
      Complex complex8 = complex5.sin();
      complex8.multiply(complex1);
      Complex complex9 = Complex.valueOf(779.431);
      complex3.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(4138.991122, 4138.991122);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.atan();
      complex1.ZERO.acos();
      Complex complex3 = complex0.INF.asin();
      complex3.ONE.sqrt();
      Complex complex4 = complex0.reciprocal();
      complex0.I.pow(4138.991122);
      Complex complex5 = complex1.NaN.conjugate();
      complex0.getReal();
      Complex complex6 = complex4.I.atan();
      complex0.subtract(complex1);
      complex4.getField();
      complex5.cos();
      Complex complex7 = complex6.multiply(complex2);
      complex7.ONE.pow((-436.116));
      complex2.sqrt();
      Complex.valueOf(4138.991122, 20.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.reciprocal();
      complex1.I.cosh();
      Complex complex2 = Complex.valueOf(775.0, 0.0);
      Complex complex3 = complex2.ONE.multiply(complex1);
      complex3.NaN.getArgument();
      complex0.getField();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.add(775.0);
      Complex complex6 = complex5.ZERO.multiply(1044);
      Complex complex7 = complex5.ONE.createComplex(1044, 1044);
      Complex complex8 = complex5.NaN.sqrt();
      Complex complex9 = Complex.ZERO;
      complex8.ONE.cos();
      Complex complex10 = complex9.tanh();
      complex10.ZERO.createComplex(1389.612140832, 0.0);
      Complex complex11 = complex8.ONE.add(complex9);
      Complex complex12 = complex5.INF.sinh();
      Complex complex13 = complex12.NaN.sqrt();
      complex5.sqrt1z();
      Complex complex14 = complex13.cos();
      complex14.ZERO.multiply(complex7);
      complex14.NaN.tanh();
      Complex.valueOf(0.0, 0.0);
      complex5.getArgument();
      complex11.getField();
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-816.39315));
      complex0.hashCode();
      Complex complex1 = complex0.sqrt();
      complex1.abs();
      Complex complex2 = Complex.valueOf((-1322.634699525203));
      Complex complex3 = complex2.multiply((-1322.634699525203));
      complex3.ONE.hashCode();
      Complex complex4 = complex1.cosh();
      complex0.toString();
      Complex.valueOf((-3859.617080217108));
      Complex complex5 = Complex.valueOf((-1322.634699525203), (-3859.617080217108));
      Complex complex6 = complex5.subtract(complex1);
      complex5.NaN.add((-3859.617080217108));
      complex5.ZERO.hashCode();
      Complex complex7 = complex1.NaN.add((-816.39315));
      Complex complex8 = complex6.ZERO.asin();
      complex8.NaN.abs();
      complex1.readResolve();
      Complex complex9 = complex4.subtract((-1322.634699525203));
      Complex complex10 = complex6.reciprocal();
      complex10.INF.log();
      complex7.reciprocal();
      try { 
        complex9.nthRoot((-236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -236
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6167001724243164, 0.00971824862062931);
      Complex complex1 = complex0.createComplex(2.6167001724243164, 2.6167001724243164);
      complex0.NaN.readResolve();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.ZERO.divide(complex1);
      complex3.ZERO.nthRoot(2797);
      complex2.I.toString();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.INF.add(complex0);
      complex5.ZERO.tan();
      Complex complex7 = complex0.pow(complex5);
      complex5.sqrt();
      Complex complex8 = complex3.sin();
      complex8.subtract(2.6167001724243164);
      Complex.valueOf(6.283185307179586, 0.00971824862062931);
      complex1.abs();
      complex4.sqrt();
      complex6.add(complex7);
      Complex complex9 = Complex.ZERO;
      complex3.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-293.3868437));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.cosh();
      Complex complex3 = complex1.I.multiply((-2864.6));
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.sqrt();
      complex0.sin();
      Complex complex7 = complex6.asin();
      complex4.ONE.log();
      complex7.NaN.add(complex1);
      complex7.I.divide(0.0);
      Complex complex8 = complex7.INF.createComplex((-293.3868437), (-909.857852107637));
      complex8.ZERO.conjugate();
      Complex complex9 = complex6.tan();
      complex9.ZERO.toString();
      Complex complex10 = complex8.divide(complex5);
      complex10.ONE.createComplex((-909.857852107637), (-421.7019508281));
      Complex complex11 = complex10.INF.atan();
      complex11.ONE.hashCode();
      Complex complex12 = complex7.I.acos();
      Complex complex13 = complex0.exp();
      complex13.ZERO.tan();
      complex12.I.negate();
      complex8.conjugate();
      complex12.abs();
      Complex complex14 = complex9.divide(complex5);
      complex14.INF.add((-1417.17));
      complex12.isNaN();
      complex1.isInfinite();
      complex3.ZERO.tan();
      Complex complex15 = Complex.valueOf((-293.3868437));
      complex3.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.cos();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.ONE.multiply(0.0);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex2.NaN.hashCode();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.atan();
      complex0.divide(complex1);
      Complex complex6 = complex0.divide(0.0);
      complex6.pow(complex1);
      complex5.atan();
      complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(101);
      complex1.ZERO.nthRoot(101);
      complex1.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.multiply(3099.467453);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.valueOf((-2439.31393));
      complex6.I.pow((-122.030183));
      Complex complex7 = complex6.exp();
      complex7.ZERO.toString();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex0.cosh();
      complex9.INF.subtract((-2439.31393));
      Complex complex10 = complex9.ZERO.reciprocal();
      complex4.INF.multiply(438.30918916285);
      Complex complex11 = complex10.I.subtract(3099.467453);
      complex5.sqrt1z();
      complex9.sqrt();
      complex5.multiply(complex6);
      complex9.isNaN();
      complex8.add((-122.030183));
      complex0.exp();
      Complex complex12 = complex4.subtract(complex7);
      complex11.cos();
      complex12.reciprocal();
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-21.696883813), (-21.696883813));
      Complex complex1 = complex0.acos();
      assertEquals(2.3559289592209156, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.negate();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.asin();
      complex2.I.conjugate();
      complex1.tan();
      complex1.ZERO.log();
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex5.atan();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.sqrt();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex7.createComplex(0.0, 0.0);
      complex7.getImaginary();
      Complex complex9 = complex1.log();
      assertNotSame(complex9, complex3);
      assertSame(complex9, complex7);
      assertSame(complex9, complex4);
      
      boolean boolean0 = complex8.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-2225);
      complex0.NaN.conjugate();
      complex0.I.readResolve();
      complex0.NaN.getArgument();
      complex0.I.conjugate();
      try { 
        complex0.ZERO.nthRoot((-2225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,225
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
