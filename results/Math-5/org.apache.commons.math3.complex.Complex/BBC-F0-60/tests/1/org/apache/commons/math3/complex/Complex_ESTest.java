/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:28:29 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.nthRoot(602);
      Complex complex1 = complex0.subtract((-20.0));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.acos();
      complex3.ONE.asin();
      Complex complex4 = complex2.asin();
      complex4.tan();
      complex0.sqrt1z();
      complex1.nthRoot(4970);
      Complex complex5 = Complex.ONE;
      complex5.multiply((double) 602);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.ZERO.cosh();
      Complex.valueOf(20.0);
      complex2.ZERO.getArgument();
      Complex complex3 = complex2.I.subtract(20.0);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ZERO.conjugate();
      complex3.I.pow(complex1);
      Complex complex6 = Complex.valueOf(1497.165259902, 1497.165259902);
      complex6.I.multiply(complex2);
      complex6.INF.cosh();
      complex2.I.conjugate();
      Complex complex7 = complex6.add(complex3);
      complex7.ZERO.pow(0.0);
      complex1.tan();
      Complex complex8 = complex3.divide(1497.165259902);
      complex2.pow(complex1);
      complex8.divide(1497.165259902);
      complex5.createComplex(1.0380723705441457E-168, 1.0380723705441457E-168);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5851251724785243E286);
      complex0.acos();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.divide(17.0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.ONE;
      complex1.readResolve();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex4.acos();
      complex1.asin();
      Complex complex9 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex9.reciprocal();
      Complex complex10 = complex7.pow(complex2);
      Complex complex11 = new Complex((-388.88094556069));
      Complex complex12 = complex10.add((-20.0));
      complex8.abs();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-20.0), 20.0);
      complex1.INF.readResolve();
      complex0.divide(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-20.0));
      complex1.tanh();
      Complex complex2 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex2.asin();
      complex2.multiply(2469);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.9618050962556135E-8, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.subtract(888.81956942346);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.458843364504023E-8));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.NaN;
      complex5.sin();
      complex3.asin();
      Complex complex6 = complex5.add((-1.458843364504023E-8));
      Complex complex7 = complex1.pow(Double.NaN);
      complex4.cosh();
      Complex complex8 = complex7.sinh();
      complex6.subtract(0.5080875158309937);
      Complex complex9 = Complex.NaN;
      complex9.multiply(complex6);
      complex2.multiply(complex8);
      Complex complex10 = complex2.add(complex0);
      Complex complex11 = new Complex((-1358.1270193499));
      complex11.tan();
      complex10.divide(2.42881369E9);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      complex0.subtract((-20.0));
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = Complex.valueOf(1.0, (-1.7129778861999512));
      Complex complex2 = complex0.subtract((-20.0));
      complex1.hashCode();
      Complex complex3 = complex2.tanh();
      complex3.acos();
      Complex complex4 = Complex.valueOf((-1.7129778861999512));
      complex4.tanh();
      Complex.valueOf(435.27, 1.0);
      complex4.createComplex(0.19622188806533813, (-20.0));
      Complex.valueOf(5.606492666349878E-9);
      complex2.negate();
      complex4.sin();
      complex1.asin();
      Complex complex5 = Complex.ONE;
      complex5.tan();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      complex0.ONE.acos();
      Complex complex1 = Complex.ONE;
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      Complex.valueOf(4061.2, Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex2 = new Complex(535.156, Double.POSITIVE_INFINITY);
      complex2.multiply(4061.2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sinh();
      complex1.I.add(Double.NaN);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(554.47);
      Complex complex1 = complex0.NaN.subtract(554.47);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.I.conjugate();
      complex5.INF.divide(complex0);
      Complex complex6 = complex2.add(893.46725595);
      Complex complex7 = complex6.I.sqrt1z();
      complex2.INF.abs();
      complex2.getField();
      Complex complex8 = complex5.tan();
      complex1.INF.divide(complex3);
      Complex complex9 = complex2.tan();
      Complex complex10 = complex2.INF.asin();
      complex10.NaN.reciprocal();
      complex5.readResolve();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex1.atan();
      Complex complex13 = Complex.ZERO;
      complex9.equals(complex13);
      Complex complex14 = complex8.sinh();
      complex11.sqrt1z();
      Complex complex15 = complex0.subtract(complex7);
      complex1.cos();
      complex14.cosh();
      Complex complex16 = complex15.negate();
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex16.multiply(554.47);
      complex14.equals(complex13);
      complex6.tanh();
      complex12.readResolve();
      Complex complex17 = Complex.valueOf(0.037378571927547455);
      complex4.equals(complex17);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(57433.56297955032, 1089.867499);
      complex0.readResolve();
      Complex complex1 = new Complex(8.702576451469213E-6, Double.NaN);
      Complex complex2 = complex1.asin();
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.conjugate();
      complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      complex0.pow((-1.1455271549574576E-7));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.sin();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex4 = complex3.sin();
      Object object0 = new Object();
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.I.tanh();
      complex3.createComplex((-20.0), (-20.0));
      Complex complex4 = complex0.multiply(1397.48);
      Complex complex5 = complex4.NaN.exp();
      complex1.ONE.reciprocal();
      complex0.ZERO.log();
      Complex complex6 = complex5.ZERO.add((-207.51054529344685));
      complex6.ZERO.subtract(1397.48);
      Complex complex7 = complex0.multiply(1397.48);
      complex2.readResolve();
      complex7.reciprocal();
      complex7.sqrt1z();
      Complex complex8 = Complex.I;
      complex3.equals(complex8);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1867.325513238));
      Complex complex1 = Complex.valueOf((-1867.325513238));
      complex1.NaN.abs();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-3421793.3849773607));
      complex0.abs();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(0.06666666666666667);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.asin();
      Complex.valueOf((-900.062808248), (-900.062808248));
      complex4.NaN.readResolve();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.pow(complex0);
      complex6.ZERO.multiply((-393));
      complex0.equals("CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS");
      Complex complex7 = complex1.acos();
      Complex complex8 = complex6.pow(complex5);
      complex8.ONE.multiply((-393));
      Complex complex9 = complex7.ONE.pow(3.012949677076715E-11);
      complex7.tan();
      complex9.I.pow(0.06666666666666667);
      complex7.asin();
      Complex complex10 = complex6.atan();
      complex9.abs();
      Complex complex11 = complex2.cosh();
      complex11.multiply(3.012949677076715E-11);
      complex5.negate();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex.valueOf((-4.541194749189272E-10));
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.sqrt1z();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-4257.248830324951));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.pow(1.1102230246251565E-16);
      complex4.ZERO.nthRoot(1);
      complex0.readResolve();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-3421793.3849773607));
      complex1.NaN.getField();
      Complex complex2 = complex0.atan();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-3421793.3849773607));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      complex2.reciprocal();
      Complex complex3 = Complex.valueOf(1215.2244786852539);
      complex3.nthRoot(17);
      Complex complex4 = complex2.sqrt1z();
      Complex.valueOf((-3421793.3849773607), 0.7237368419565787);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.asin();
      Complex.valueOf(29.2393021117);
      Complex complex4 = complex1.tanh();
      complex1.getField();
      Complex complex5 = Complex.valueOf(5.32006955298355E-9);
      Complex complex6 = complex5.negate();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ZERO;
      complex8.pow(complex4);
      Complex complex9 = complex5.cosh();
      Complex complex10 = new Complex(5.32006955298355E-9, (-20.0));
      Complex complex11 = complex10.tan();
      complex9.cosh();
      complex8.negate();
      complex9.getField();
      complex6.reciprocal();
      Complex complex12 = Complex.I;
      complex12.acos();
      Complex complex13 = Complex.I;
      complex1.isInfinite();
      complex11.equals(complex13);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      complex0.ZERO.sqrt1z();
      complex0.asin();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.INF;
      complex1.pow(complex2);
      Complex complex5 = complex2.cosh();
      complex1.getArgument();
      complex0.tan();
      complex0.cosh();
      complex3.negate();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.acos();
      Complex complex8 = Complex.I;
      complex2.isInfinite();
      complex6.equals(complex7);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.184451106), (-1590.184451106));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.sqrt1z();
      Complex complex3 = complex2.cos();
      complex0.exp();
      Complex complex4 = Complex.ONE;
      complex1.sinh();
      complex0.subtract(2.0);
      Complex complex5 = complex2.atan();
      complex3.pow(1794.0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.184451106), (-1590.184451106));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.sqrt1z();
      Complex complex3 = Complex.valueOf((-1590.184451106), (-4787.7547700989));
      Complex complex4 = complex3.reciprocal();
      complex1.nthRoot(17);
      Complex complex5 = complex0.multiply((-1171));
      Complex complex6 = complex3.tan();
      complex4.cosh();
      complex6.hashCode();
      complex5.negate();
      Complex complex7 = new Complex((-1171));
      complex7.getField();
      complex6.reciprocal();
      complex3.acos();
      Complex complex8 = Complex.I;
      complex8.isInfinite();
      complex4.atan();
      complex1.pow(407.92381805488);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4257.248830324951), (-4257.248830324951));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.pow(complex1);
      complex1.cosh();
      complex1.getArgument();
      complex0.sqrt1z();
      complex0.ZERO.sqrt();
      Complex.valueOf(1.0510656833648682, (-20.0));
      complex1.readResolve();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.reciprocal();
      complex5.I.add(1.0510656833648682);
      Complex complex6 = complex4.divide(1393.4540851056854);
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(2273.835889916);
      Complex complex1 = Complex.valueOf((-4257.248830324951), (-4257.248830324951));
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.NaN.multiply(complex0);
      Complex complex6 = complex4.INF.cosh();
      complex6.multiply(1196);
      Complex complex7 = complex5.INF.tanh();
      complex7.NaN.readResolve();
      complex4.nthRoot(1196);
      complex0.readResolve();
      complex5.negate();
      complex0.conjugate();
      complex3.equals(complex1);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4257.248830324951));
      complex0.ZERO.cos();
      Complex complex1 = Complex.valueOf((-4257.248830324951), (-4257.248830324951));
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex1.tanh();
      complex0.getField();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.INF;
      complex4.pow(complex6);
      Complex complex7 = complex3.cosh();
      complex2.getArgument();
      complex1.multiply(complex6);
      complex5.abs();
      complex3.multiply(complex7);
      Complex complex8 = new Complex((-7.839574072711142E-8));
      complex1.tan();
      Complex complex9 = complex1.subtract((-20.0));
      complex3.atan();
      complex4.pow(4257.248830324951);
      complex0.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.184451106), (-1590.184451106));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf((-1590.184451106), (-4787.7547700989));
      complex4.reciprocal();
      complex1.nthRoot(17);
      Complex complex5 = complex0.add(1.0521983802642893E-8);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.multiply(complex6);
      complex7.abs();
      complex4.multiply(complex3);
      Complex complex8 = new Complex(17);
      complex8.tan();
      complex7.subtract((-2128.2));
      Complex complex9 = complex0.atan();
      complex2.pow(2.5631381141873417E-132);
      complex4.negate();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.INF.cos();
      complex0.getReal();
      Complex complex4 = complex1.INF.pow(0.0);
      complex4.NaN.hashCode();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.sqrt();
      complex0.divide(complex1);
      complex6.subtract(complex3);
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.valueOf((-3641.324900898679), 0.0);
      Complex complex9 = complex7.sin();
      Object object0 = new Object();
      complex8.equals(object0);
      complex2.divide(Double.POSITIVE_INFINITY);
      try { 
        complex9.nthRoot((-751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -751
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.184451106), (-1590.184451106));
      Complex complex1 = complex0.INF.subtract(complex0);
      complex1.tanh();
      complex0.getField();
      complex0.negate();
      Complex complex2 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.atan();
      complex2.NaN.multiply((-1));
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = Complex.valueOf(1.0738916397094727, 1.8597132378953187E-240);
      complex0.getField();
      complex2.add(complex3);
      Complex complex6 = complex1.multiply(2.131521224975586);
      complex6.I.getField();
      complex6.getImaginary();
      Complex complex7 = complex1.log();
      complex7.NaN.tan();
      complex0.isInfinite();
      Complex complex8 = complex7.cos();
      complex8.hashCode();
      complex4.getImaginary();
      complex3.multiply((-2147465748));
      Complex complex9 = complex8.sqrt();
      complex9.nthRoot(302);
      complex6.createComplex((-2147465748), (-226.0));
      complex5.pow((-226.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.INF.divide(6.283185307179586);
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf(6.283185307179586, (-440.032616856));
      Complex complex6 = complex5.sin();
      complex5.ZERO.cosh();
      Complex complex7 = complex4.conjugate();
      complex0.ZERO.reciprocal();
      complex7.NaN.reciprocal();
      complex7.NaN.getArgument();
      complex0.equals(complex2);
      complex0.conjugate();
      complex2.I.cos();
      complex3.createComplex(1119.5083116777453, 4.7835721669653157E-296);
      complex0.add(complex6);
      complex1.sin();
      complex2.I.multiply(1599);
      complex6.toString();
      complex5.tan();
      Complex complex8 = complex7.sqrt();
      complex3.tanh();
      int int0 = (-760);
      try { 
        complex8.nthRoot((-760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -760
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4257.248830324951));
      Complex complex1 = complex0.ZERO.cos();
      complex1.NaN.add((-4257.248830324951));
      Complex complex2 = Complex.valueOf((-4257.248830324951), (-4257.248830324951));
      Complex complex3 = complex2.asin();
      Complex.valueOf((-20.0));
      Complex complex4 = complex0.tanh();
      complex0.getField();
      complex2.negate();
      Complex complex5 = Complex.INF;
      complex5.pow(complex4);
      Complex complex6 = complex3.cosh();
      Complex complex7 = Complex.ONE;
      complex7.getArgument();
      complex2.tan();
      Complex complex8 = new Complex(0.0, 0.9999925023695305);
      complex8.conjugate();
      complex3.isInfinite();
      complex6.multiply(complex7);
      complex3.toString();
      complex6.subtract((-1561.545158));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1314.22175941), (-1314.22175941));
      complex0.NaN.hashCode();
      complex0.INF.acos();
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.log();
      complex0.ZERO.readResolve();
      complex0.NaN.add(complex0);
      complex0.createComplex((-2363.4258454515398), Double.POSITIVE_INFINITY);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.add(0.0);
      complex0.ZERO.sqrt1z();
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.tanh();
      Complex complex2 = complex1.sin();
      int int0 = 320150882;
      // Undeclared exception!
      complex2.nthRoot(320150882);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.conjugate();
      complex0.getArgument();
      complex1.toString();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.cos();
      complex3.getReal();
      complex2.pow(0.0);
      complex2.atan();
      complex1.sqrt();
      Complex complex4 = complex2.divide(complex0);
      complex0.subtract(complex1);
      complex0.sin();
      Complex.valueOf((-1.0), 1.669785737991333);
      complex3.sin();
      complex1.equals((Object) null);
      complex4.getReal();
      complex0.cos();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4257.248830324951));
      complex0.ZERO.cos();
      Complex complex1 = Complex.valueOf((-4257.248830324951), (-4257.248830324951));
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex1.tanh();
      complex0.getField();
      complex0.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.pow(complex5);
      complex3.cosh();
      complex2.getArgument();
      Complex complex7 = complex2.tan();
      complex7.INF.cosh();
      complex7.negate();
      complex5.ZERO.getField();
      complex1.reciprocal();
      Complex complex8 = complex1.acos();
      Complex complex9 = Complex.I;
      complex9.isInfinite();
      complex6.equals(complex8);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.1022790876160215E-9), (-4.1022790876160215E-9));
      Complex complex1 = complex0.INF.acos();
      complex1.ZERO.hashCode();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      complex3.ZERO.hashCode();
      Complex complex4 = complex0.multiply((-171));
      Complex complex5 = complex4.NaN.acos();
      complex0.tanh();
      complex5.NaN.add(complex0);
      complex0.I.readResolve();
      complex5.abs();
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2506598.719830912, 2506598.719830912);
      Complex complex2 = complex1.acos();
      complex2.pow(complex1);
      complex0.add(2506598.719830912);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(1553.61298976);
      Complex complex2 = complex1.INF.createComplex(1119.50853499, 1119.50853499);
      complex0.toString();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.INF.divide((-1482.75694));
      complex4.isInfinite();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex6.ZERO.cosh();
      complex8.ZERO.hashCode();
      complex3.hashCode();
      complex6.abs();
      Complex complex9 = complex1.I.sin();
      Complex complex10 = complex1.multiply((-516.4784054183154));
      complex1.subtract(complex9);
      complex0.sin();
      Complex complex11 = Complex.valueOf(1.0567886837680406E56, 3196.7118783367955);
      complex10.sin();
      complex11.equals(complex8);
      complex7.divide(8514.497719373274);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.ZERO.asin();
      complex3.I.multiply(complex2);
      Complex complex4 = Complex.NaN;
      complex1.I.divide(complex0);
      complex4.ONE.multiply((-20.0));
      complex4.readResolve();
      Complex complex5 = complex2.INF.add(2.0);
      Complex complex6 = complex2.INF.multiply(complex4);
      complex6.abs();
      Complex complex7 = complex1.NaN.multiply(complex2);
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex8.I.tan();
      complex9.add(0.0);
      complex2.equals(complex8);
      Complex complex10 = complex0.divide(0.0);
      Complex complex11 = complex10.I.atan();
      complex4.toString();
      Complex complex12 = complex1.tanh();
      complex4.abs();
      complex4.tanh();
      complex4.log();
      complex10.ONE.hashCode();
      complex12.getField();
      complex6.multiply((-3732));
      complex7.divide(complex11);
      complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.NaN;
      complex1.I.divide(complex0);
      complex4.ONE.multiply((-20.0));
      complex4.readResolve();
      complex2.INF.add(2.0);
      Complex complex5 = complex2.INF.multiply(complex4);
      complex5.abs();
      complex1.NaN.multiply(complex2);
      Complex complex6 = new Complex((-0.2817984512063101));
      Complex complex7 = complex6.I.tan();
      complex7.add(0.0);
      complex2.equals(complex6);
      Complex complex8 = complex0.divide((-0.2817984512063101));
      complex8.I.atan();
      complex4.toString();
      Complex complex9 = complex1.tanh();
      complex4.abs();
      complex4.tanh();
      complex4.log();
      complex9.getField();
      complex5.multiply((-3732));
      complex9.equals("(NaN, NaN)");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.createComplex(4842.28569, 4842.28569);
      Complex complex3 = complex1.subtract(complex2);
      complex3.isNaN();
      complex2.exp();
      complex0.hashCode();
      complex0.abs();
      complex0.hashCode();
      Complex complex4 = new Complex(1.0, 4842.28569);
      complex4.tanh();
      complex1.sqrt1z();
      complex1.isInfinite();
      complex4.getReal();
      Complex complex5 = complex3.cosh();
      try { 
        complex5.nthRoot((-2146812259));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,146,812,259
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4257.248830324951));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf((-4257.248830324951), (-4257.248830324951));
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex2.tanh();
      complex0.getField();
      complex0.negate();
      Complex complex6 = Complex.INF;
      complex5.pow(complex6);
      Complex complex7 = complex4.cosh();
      complex3.getArgument();
      complex3.tan();
      complex7.conjugate();
      complex7.isInfinite();
      complex4.multiply(complex1);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1314.22175941), (-1314.22175941));
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.multiply(2978);
      complex0.asin();
      Complex complex3 = Complex.valueOf((double) 2978);
      Complex complex4 = complex2.tanh();
      complex1.getField();
      Complex complex5 = complex3.negate();
      complex4.pow(complex3);
      complex5.cosh();
      complex1.getArgument();
      complex1.tan();
      Complex complex6 = new Complex(1, 2.2776327994966818E-125);
      Complex complex7 = complex6.conjugate();
      complex1.isInfinite();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.multiply(complex8);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex2.INF.cos();
      complex0.getReal();
      complex1.INF.pow(0.0);
      Complex complex4 = complex0.atan();
      complex4.I.sqrt();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.ZERO.subtract(complex2);
      Complex complex7 = complex0.sin();
      Complex.valueOf(0.0, 0.0);
      complex5.sin();
      complex1.equals(complex7);
      complex3.hashCode();
      complex3.isNaN();
      complex6.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.conjugate();
      complex0.getArgument();
      complex1.toString();
      complex1.negate();
      complex0.tanh();
      complex1.sin();
      try { 
        complex1.nthRoot((-688));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -688
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex5.multiply(0.0);
      complex2.readResolve();
      Complex complex7 = complex1.add(2.0);
      complex2.multiply(complex6);
      complex4.abs();
      Complex complex8 = complex3.multiply(complex2);
      Complex complex9 = new Complex((-20.0));
      Complex complex10 = complex0.tan();
      complex4.add((-2.1745347282493023E-299));
      complex8.equals((Object) null);
      Complex complex11 = complex4.divide(Double.POSITIVE_INFINITY);
      complex8.atan();
      complex9.toString();
      complex9.tanh();
      complex10.abs();
      complex11.tanh();
      Complex complex12 = complex11.log();
      complex8.getField();
      complex7.multiply((-3732));
      complex8.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1213.9864407937955), (-1213.9864407937955));
      Complex complex2 = complex0.add((-2607.50420608));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf((-1213.9864407937955), 0.0);
      complex3.cos();
      complex4.getReal();
      Complex complex5 = Complex.ONE;
      complex5.pow((-2607.50420608));
      complex1.atan();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.divide(complex3);
      complex3.subtract(complex7);
      Complex complex8 = complex1.sin();
      Complex.valueOf(79.3775, 79.3775);
      complex4.sin();
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      complex8.divide((-2607.50420608));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1502.505136));
      Complex complex1 = complex0.multiply((-147814.06536918576));
      Complex complex2 = complex1.multiply((-197));
      Complex complex3 = complex2.asin();
      Complex.valueOf(3.408223442335828);
      complex2.I.toString();
      Complex complex4 = complex2.tanh();
      complex3.getField();
      Complex complex5 = complex1.negate();
      complex5.pow(complex4);
      Complex complex6 = complex2.cosh();
      complex6.getArgument();
      Complex complex7 = complex4.tan();
      complex1.conjugate();
      complex6.isInfinite();
      Complex complex8 = Complex.NaN;
      complex8.INF.multiply(complex7);
      complex1.multiply(complex8);
      complex1.toString();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-271.85847914787));
      Complex complex1 = complex0.divide((-271.85847914787));
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.I.readResolve();
      Complex complex3 = Complex.valueOf((-271.85847914787), (-271.85847914787));
      complex3.INF.getArgument();
      complex0.getReal();
      Complex complex4 = complex1.subtract((-271.85847914787));
      complex4.NaN.getField();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex3.multiply(complex1);
      complex0.getImaginary();
      Complex.valueOf((-271.85847914787), 0.0);
      Complex complex7 = complex5.sinh();
      complex7.I.hashCode();
      Complex complex8 = complex6.multiply(0.7853981633974483);
      complex5.I.atan();
      Complex.valueOf(0.7853981633974483, (-271.85847914787));
      Complex complex9 = complex8.subtract(complex6);
      complex9.ONE.abs();
      complex8.readResolve();
      Complex complex10 = complex7.multiply((-2570));
      complex10.I.pow(0.0);
      complex6.asin();
      complex8.divide((-1971.466));
      complex3.isInfinite();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(877.6835392);
      complex1.INF.subtract(complex0);
      Complex complex2 = Complex.valueOf(877.6835392);
      complex2.NaN.nthRoot(1);
      complex1.INF.conjugate();
      Complex complex3 = Complex.valueOf(877.6835392, 0.3241194486618042);
      complex3.INF.sqrt();
      complex0.readResolve();
      Complex complex4 = complex0.log();
      complex4.toString();
      complex4.sinh();
      Complex.valueOf(0.0, 0.0);
      complex1.readResolve();
      Complex complex5 = complex1.sqrt1z();
      complex5.add(complex3);
      Complex.valueOf((-3770.484143142957));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4257.248830324951));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.exp();
      complex2.INF.sinh();
      Complex complex3 = complex0.subtract(0.0);
      complex1.atan();
      complex3.pow((-2443.989892));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1590.184451106), (-1590.184451106));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.sqrt1z();
      Complex complex3 = Complex.valueOf((-1590.184451106), (-4787.7547700989));
      complex3.reciprocal();
      complex1.nthRoot(17);
      Complex complex4 = complex0.multiply((-1171));
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex.valueOf((-1590.184451106), (double) (-1171));
      complex1.readResolve();
      complex3.multiply((double) (-1171));
      complex3.cos();
      complex5.reciprocal();
      complex0.getReal();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.ONE.subtract(6.283185307179586);
      Complex complex3 = complex2.ZERO.tanh();
      complex2.ONE.multiply(6.283185307179586);
      Complex complex4 = complex2.I.exp();
      complex0.getReal();
      Complex complex5 = complex4.atan();
      complex5.ZERO.multiply(complex1);
      complex1.NaN.tanh();
      complex2.sinh();
      Complex complex6 = complex1.ONE.multiply(98);
      Complex complex7 = Complex.valueOf(2181.068295);
      complex7.INF.subtract(complex0);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.divide(complex8);
      complex9.NaN.add(364.6167483);
      Complex complex10 = complex8.log();
      complex10.sinh();
      Complex complex11 = Complex.valueOf(0.0);
      complex11.NaN.sqrt1z();
      complex3.subtract(complex6);
      complex0.tanh();
      complex3.divide(738.07879719118);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.readResolve();
      Complex complex1 = complex0.ONE.createComplex((-574.927305322), (-574.927305322));
      Complex complex2 = complex1.ZERO.sqrt();
      complex1.INF.exp();
      complex0.ZERO.getField();
      Complex complex3 = complex0.multiply(0);
      Complex complex4 = complex3.NaN.divide((double) 0);
      complex4.I.exp();
      complex3.getField();
      complex3.NaN.cos();
      Complex complex5 = complex1.INF.log();
      complex5.ONE.readResolve();
      complex4.NaN.subtract((double) 0);
      complex3.I.log();
      Complex complex6 = complex3.createComplex((-467.4), (-1839.5796495));
      Complex complex7 = complex3.reciprocal();
      complex7.getArgument();
      complex7.cosh();
      complex6.I.asin();
      complex3.getArgument();
      Complex complex8 = complex6.add(complex0);
      complex7.cos();
      complex1.asin();
      complex2.acos();
      Complex complex9 = complex2.sqrt();
      complex8.add(complex9);
      complex5.hashCode();
      Complex.valueOf(5013.419569793202, (-1839.5796495));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(1553.61298976);
      Complex complex2 = complex1.INF.createComplex(1119.50853499, 1119.50853499);
      complex0.toString();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.INF.divide((-1482.75694));
      complex4.isInfinite();
      complex6.divide(complex1);
      Complex complex7 = complex6.ZERO.cosh();
      complex7.ZERO.hashCode();
      complex3.hashCode();
      complex6.abs();
      complex1.I.sin();
      Complex complex8 = complex1.multiply((-516.4784054183154));
      complex8.atan();
      Complex.valueOf(6.283185307179586, 1119.50853499);
      complex6.acos();
      complex2.NaN.getArgument();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.I.negate();
      complex4.reciprocal();
      complex5.INF.acos();
      complex8.isInfinite();
      complex8.equals(complex5);
      complex4.subtract(complex3);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1786.312, 1786.312);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.pow(1786.312);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(1786.312);
      complex4.INF.acos();
      Complex complex5 = complex4.NaN.asin();
      complex5.INF.atan();
      Complex complex6 = complex5.exp();
      complex4.ZERO.nthRoot(2116);
      Complex complex7 = complex0.asin();
      complex0.ZERO.asin();
      Complex complex8 = complex1.INF.subtract((double) 2116);
      complex2.nthRoot(2610);
      complex0.ZERO.nthRoot(2116);
      complex2.abs();
      complex5.getField();
      Complex complex9 = complex7.pow(1786.312);
      Complex complex10 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex7.NaN.subtract(complex4);
      complex11.I.createComplex(2.51946651720982E81, 2116);
      Complex complex12 = complex10.I.sqrt();
      List<Complex> list0 = complex9.nthRoot(3166);
      Complex complex13 = complex1.add(216.32294591603164);
      complex11.multiply(3166);
      complex13.I.add(2.1778111457824707);
      complex7.divide(complex12);
      complex13.toString();
      complex8.equals(list0);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3001.2997564);
      complex0.hashCode();
      complex0.NaN.hashCode();
      Complex complex1 = new Complex(3001.2997564, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      complex1.negate();
      complex2.INF.tanh();
      complex1.NaN.sqrt1z();
      complex0.ZERO.log();
      Complex complex3 = complex2.createComplex(0.0, 117.36591730790347);
      complex2.NaN.hashCode();
      complex0.multiply(2207);
      complex1.hashCode();
      complex2.readResolve();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex3.divide(0.0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.add(complex7);
      complex2.getReal();
      complex7.cos();
      complex8.getField();
      complex5.cosh();
      complex3.nthRoot(2207);
      Complex.valueOf((-4991.8388319), 9007800.2277667);
      complex6.tanh();
      complex7.pow(3001.2997564);
      complex6.tanh();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.conjugate();
      complex1.I.getArgument();
      complex1.NaN.toString();
      complex0.ONE.negate();
      complex1.I.tanh();
      complex0.sin();
      complex0.I.nthRoot(1343);
      try { 
        complex0.nthRoot((-280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -280
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4227.330201, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.subtract(0.0);
      complex1.toString();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex3.INF.multiply(4227.330201);
      complex5.NaN.cosh();
      complex2.pow(complex0);
      complex4.multiply(complex0);
      Complex complex6 = complex3.exp();
      complex0.acos();
      complex2.hashCode();
      complex4.sqrt1z();
      Complex complex7 = complex2.reciprocal();
      complex7.NaN.add(0.0);
      Complex complex8 = complex1.ONE.exp();
      complex8.INF.divide(complex3);
      Complex complex9 = Complex.valueOf(6.283185307179586);
      complex9.I.sin();
      complex6.add(complex4);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex.valueOf(0.0, 0.0);
      complex2.INF.cos();
      complex0.getReal();
      complex1.INF.pow(0.0);
      Complex complex3 = complex0.atan();
      complex3.I.sqrt();
      Complex complex4 = complex0.divide(complex1);
      complex4.ZERO.subtract(complex2);
      Complex complex5 = complex0.sin();
      Complex.valueOf(0.0, 0.0);
      complex4.sin();
      complex1.equals(complex5);
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex1.pow(3384.355);
      Complex.valueOf(0.0, 0.0);
      complex0.NaN.getField();
      double double0 = 0.0;
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex0.INF.asin();
      complex3.sinh();
      Complex complex4 = complex0.reciprocal();
      complex4.ONE.acos();
      try { 
        complex2.nthRoot((-2977));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,977
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.nthRoot(3001);
      complex0.ONE.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY, (double) 3001);
      complex0.getReal();
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.exp();
      complex3.I.tan();
      complex2.getImaginary();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex4.I.divide(complex0);
      Complex complex7 = complex2.atan();
      complex7.subtract(1.9722796756250217E-108);
      Complex complex8 = Complex.valueOf(0.0);
      complex2.NaN.abs();
      complex6.cos();
      Complex complex9 = complex5.cosh();
      complex9.I.exp();
      complex2.I.abs();
      try { 
        complex8.nthRoot((-1109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,109
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1711.25004));
      Complex complex1 = complex0.cos();
      complex1.divide((-1641.0961447145));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      complex0.ZERO.asin();
      Complex complex3 = Complex.NaN;
      complex1.I.divide(complex0);
      complex3.ONE.multiply((-20.0));
      complex3.readResolve();
      complex2.INF.add(2.0);
      Complex complex4 = complex2.INF.multiply(complex3);
      complex4.abs();
      complex1.NaN.multiply(complex2);
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex5.I.tan();
      complex6.add(0.0);
      complex2.equals(complex5);
      Complex complex7 = complex0.divide(0.0);
      complex7.I.atan();
      complex3.toString();
      Complex complex8 = complex1.tanh();
      complex3.abs();
      complex3.tanh();
      complex3.log();
      complex8.getField();
      complex4.multiply((-3732));
      complex8.equals("(NaN, NaN)");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex1.sinh();
      complex1.abs();
      complex1.sinh();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.multiply(929);
      complex0.divide((double) 929);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.createComplex(1.0, 1.0);
      complex1.subtract(complex0);
      complex0.getReal();
      complex0.multiply(2194);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      complex2.NaN.multiply(complex0);
      Complex complex3 = complex2.NaN.negate();
      complex3.asin();
      complex0.getArgument();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex3.divide(complex4);
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      complex1.INF.atan();
      Complex complex2 = complex0.sinh();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.pow((-1489.00721855));
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.subtract((-1489.00721855));
      Complex complex6 = Complex.valueOf((-1489.00721855));
      Complex complex7 = complex0.ONE.reciprocal();
      Complex complex8 = complex7.I.divide(complex1);
      complex7.NaN.getArgument();
      complex6.ZERO.getField();
      Complex complex9 = complex1.negate();
      complex9.NaN.readResolve();
      complex9.isNaN();
      complex2.ZERO.atan();
      Complex.valueOf(2286.413);
      complex8.INF.acos();
      complex9.INF.log();
      complex5.abs();
      Complex complex10 = complex1.tanh();
      complex10.INF.add(complex2);
      Complex complex11 = complex10.ONE.add(2286.413);
      complex9.hashCode();
      complex0.getImaginary();
      complex0.INF.pow((-1489.00721855));
      complex0.reciprocal();
      Complex complex12 = complex7.tanh();
      complex7.sqrt1z();
      complex8.nthRoot(1476);
      complex1.isInfinite();
      complex11.divide((-1532.5));
      complex12.atan();
      complex1.sinh();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(2213.694108588948, 739.672383782749);
      complex0.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = Complex.valueOf(1769.45131);
      Complex complex4 = complex1.multiply(87);
      complex4.divide(complex0);
      complex0.negate();
      Complex complex5 = complex1.ZERO.asin();
      complex5.I.divide((-1389.67836707));
      Complex complex6 = complex4.createComplex(20.0, 2213.694108588948);
      Complex complex7 = complex2.sinh();
      complex3.isNaN();
      Complex complex8 = new Complex(739.672383782749);
      complex2.ONE.tanh();
      complex4.equals(complex8);
      Complex complex9 = complex8.createComplex(3310.43867043, 0.0);
      complex7.abs();
      complex6.divide(6.283185307179586);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1314.22175941), (-1314.22175941));
      complex0.NaN.hashCode();
      Complex complex1 = complex0.INF.acos();
      complex0.ONE.readResolve();
      Complex complex2 = complex0.log();
      complex0.ZERO.readResolve();
      Complex complex3 = Complex.valueOf((-1314.22175941), (-1314.22175941));
      complex1.ZERO.atan();
      complex2.NaN.createComplex(0.0, 4842.28569);
      Complex complex4 = complex3.ZERO.subtract(complex0);
      complex0.isNaN();
      complex3.I.exp();
      complex2.hashCode();
      complex0.abs();
      complex1.hashCode();
      complex2.tanh();
      complex2.I.sqrt1z();
      complex4.isInfinite();
      complex2.getReal();
      complex0.cosh();
      try { 
        complex0.nthRoot((-867));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -867
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.NaN.acos();
      complex0.equals("population size must be positive ({0})");
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.divide(0.0);
      complex1.NaN.exp();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex2.NaN.createComplex(297.5, 297.5);
      complex1.ONE.readResolve();
      Complex complex5 = complex1.I.createComplex(0.0, 0.0);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.INF.acos();
      complex1.getField();
      Complex complex9 = complex4.add((-251.8));
      complex6.INF.getArgument();
      complex9.ONE.hashCode();
      complex5.createComplex(297.5, (-251.8));
      Complex complex10 = complex6.subtract(complex3);
      Complex complex11 = complex7.atan();
      Complex complex12 = complex11.pow((-12.093));
      complex10.subtract(complex0);
      Complex complex13 = complex8.add(complex9);
      complex12.isInfinite();
      complex3.isInfinite();
      complex7.tanh();
      Complex complex14 = complex1.conjugate();
      complex14.ZERO.tanh();
      complex13.divide(complex4);
      Complex.valueOf(4415.1684579);
      complex13.createComplex((-12.093), 297.5);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.NaN.subtract((-2398.4752474394));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.multiply(complex2);
      complex0.abs();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.ZERO.pow(complex3);
      complex3.ONE.getField();
      Complex complex6 = complex5.ZERO.conjugate();
      complex3.I.multiply(complex0);
      complex1.INF.toString();
      complex4.getReal();
      complex0.ONE.exp();
      Complex complex7 = complex1.multiply(2259);
      Complex complex8 = complex7.pow(complex1);
      complex7.add(complex3);
      complex1.getArgument();
      complex8.getReal();
      complex6.exp();
      Complex complex9 = Complex.INF;
      Complex.valueOf(20.0);
      complex1.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1227.81028283, 1227.81028283);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.ONE.reciprocal();
      Complex complex5 = complex4.INF.tan();
      complex5.NaN.add((-20.0));
      Complex complex6 = complex0.ONE.cosh();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.ZERO.multiply(37);
      complex10.nthRoot(1);
      complex10.tan();
      complex8.ONE.reciprocal();
      complex9.getReal();
      Complex complex11 = complex8.sqrt();
      complex11.I.hashCode();
      complex1.createComplex(1227.81028283, 1569.6457407485489);
      complex9.toString();
      Object object0 = complex4.readResolve();
      complex7.equals(object0);
      complex6.tanh();
      complex2.ONE.sinh();
      Complex.valueOf((double) 37, (-5.688639355498786E-10));
      complex6.divide(complex3);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3756.329892099367, 2.0);
      Complex complex1 = complex0.I.add((-2515.772925343003));
      complex1.NaN.getArgument();
      Complex complex2 = complex0.ZERO.createComplex((-1374.945380718912), (-2241.12893669363));
      complex1.NaN.multiply(1469);
      Complex.valueOf(0.0, 0.0);
      complex2.ZERO.atan();
      Complex complex3 = complex1.INF.sqrt1z();
      complex0.conjugate();
      complex1.getField();
      complex2.hashCode();
      complex3.hashCode();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, 1333.94466663346);
      complex1.ZERO.multiply(1.1817638600528107E-136);
      Complex complex2 = complex0.NaN.sqrt();
      complex2.INF.cos();
      complex0.ONE.sin();
      Complex complex3 = complex0.cosh();
      complex3.I.atan();
      Complex complex4 = complex3.INF.cosh();
      complex3.INF.sin();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex3.cosh();
      complex5.subtract(complex1);
      Complex complex7 = complex2.subtract(complex4);
      complex0.NaN.sqrt();
      complex6.nthRoot(450);
      Complex complex8 = complex7.acos();
      complex8.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-784.674415998773));
      Complex complex1 = Complex.NaN;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.add(20.0);
      complex4.toString();
      complex1.ONE.add(complex0);
      complex2.ONE.negate();
      Complex complex5 = complex0.pow(complex2);
      complex5.NaN.divide(complex4);
      Complex.valueOf((-2643.2413));
      Complex.valueOf(0.0, (-2643.2413));
      Complex complex6 = complex1.tanh();
      complex6.ONE.cos();
      complex3.toString();
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.valueOf((-2643.2413));
      Complex complex9 = complex1.divide(452.6353762964563);
      Complex complex10 = complex9.INF.multiply(complex8);
      complex8.ZERO.cosh();
      Complex complex11 = Complex.valueOf(1.7591819833844019E252);
      complex0.ONE.negate();
      complex10.divide(complex11);
      Complex complex12 = complex7.sin();
      complex12.INF.multiply(1.7591819833844019E252);
      complex8.sqrt();
      complex8.pow(20.0);
      complex10.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.multiply(473);
      Complex complex2 = complex0.NaN.cos();
      complex0.getReal();
      complex2.toString();
      complex1.I.sqrt();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.subtract(0.0);
      complex4.getField();
      complex3.getField();
      complex2.abs();
      complex1.sqrt();
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.createComplex((-100.0), (-100.0));
      Complex complex3 = complex0.ZERO.createComplex((-100.0), 0.0);
      Complex complex4 = complex2.ONE.divide(complex1);
      complex0.isNaN();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex3.multiply((-100.0));
      Complex complex7 = complex6.I.multiply(complex0);
      complex1.ZERO.toString();
      complex6.INF.divide(complex2);
      complex5.ZERO.log();
      complex5.ZERO.tan();
      complex1.divide(complex5);
      complex5.isInfinite();
      Complex complex8 = complex4.sinh();
      Complex complex9 = Complex.INF;
      complex0.divide(complex9);
      complex2.hashCode();
      complex7.isNaN();
      complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      int int0 = 0;
      Complex complex2 = complex1.INF.multiply(0);
      complex0.abs();
      Complex complex3 = complex1.INF.multiply(complex0);
      complex3.NaN.multiply((-621));
      complex1.getArgument();
      double double0 = 2035.46509716;
      Complex complex4 = complex1.I.subtract(2035.46509716);
      complex4.getArgument();
      complex2.toString();
      try { 
        complex2.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ONE.log();
      complex2.INF.abs();
      Complex complex3 = complex1.add((-670.84));
      complex2.NaN.acos();
      complex0.getField();
      complex3.getArgument();
      complex3.divide((-670.84));
      Complex complex4 = complex1.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      complex4.createComplex(0.0, Double.NaN);
      complex1.isInfinite();
      complex4.isNaN();
      Complex complex5 = complex0.acos();
      complex5.createComplex(0.42799586057662964, (-670.84));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isNaN();
      Complex complex1 = complex0.cosh();
      complex0.hashCode();
      complex0.toString();
      complex0.nthRoot(1510);
      complex0.ZERO.abs();
      Complex complex2 = complex0.add(1.4399358260219398E-7);
      complex2.ZERO.abs();
      complex0.isInfinite();
      Complex complex3 = complex2.multiply(complex0);
      complex3.cosh();
      complex2.INF.cosh();
      Complex complex4 = complex1.NaN.multiply(1006.67013095);
      complex0.readResolve();
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.multiply(complex6);
      complex7.INF.hashCode();
      complex4.INF.pow(complex3);
      Complex complex8 = complex7.ONE.multiply(0.0);
      complex8.ZERO.add(complex4);
      Complex complex9 = complex0.atan();
      Complex.valueOf(0.0, 1795.0586067442432);
      Complex complex10 = Complex.valueOf(0.0);
      complex0.pow(complex10);
      complex5.abs();
      Complex complex11 = complex2.multiply(2.595079206183114E-167);
      complex6.add(complex4);
      Complex complex12 = complex9.sqrt();
      complex12.sinh();
      complex11.nthRoot(1510);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = Complex.valueOf(0.0, 0.33605360984802246);
      complex4.NaN.negate();
      assertEquals(1.557407724654902, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex1.ONE.sinh();
      complex7.ZERO.abs();
      assertEquals(1.1752011936438014, complex7.getReal(), 0.01);
      
      complex3.equals(complex1);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex9.ZERO.cos();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex0.pow(complex8);
      complex11.NaN.pow(complex9);
      Complex complex12 = complex6.divide(0.0);
      Complex complex13 = complex12.ZERO.reciprocal();
      Complex complex14 = complex12.reciprocal();
      Complex complex15 = complex12.pow(complex2);
      complex12.NaN.getField();
      Complex complex16 = complex11.atan();
      assertSame(complex16, complex14);
      
      complex12.exp();
      assertSame(complex6, complex2);
      
      Complex complex17 = complex3.negate();
      Complex complex18 = complex17.ZERO.sqrt();
      assertFalse(complex18.equals((Object)complex10));
      assertSame(complex17, complex13);
      assertSame(complex17, complex15);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex5.log();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals((-1.0904845786270636), complex19.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-1502.2628322));
      Complex complex1 = complex0.I.tanh();
      complex1.ZERO.divide((-1.0543075713098835E-10));
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.multiply(complex2);
      complex3.ONE.getArgument();
      complex2.ONE.abs();
      complex2.INF.pow(280.807151287646);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.createComplex((-1502.2628322), 280.807151287646);
      complex4.NaN.readResolve();
      try { 
        complex5.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.541194749189272E-10));
      Complex complex1 = complex0.atan();
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
  }
}
