/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:04:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-3754.191363646496));
      Complex complex1 = Complex.valueOf((-20.0), (-3754.191363646496));
      Complex complex2 = complex0.multiply(582);
      complex2.nthRoot(754);
      complex0.asin();
      Complex.valueOf(1457.932141788554);
      complex1.tanh();
      complex2.tan();
      Complex complex3 = new Complex(582);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.INF;
      complex2.ONE.multiply(421);
      complex0.NaN.cos();
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex0.ONE.sqrt();
      complex1.getField();
      complex3.add(complex1);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.I.atan();
      complex5.atan();
      complex4.multiply(421);
      complex3.tanh();
      complex3.pow(complex8);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1436.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract(complex0);
      complex0.equals(complex0);
      complex1.NaN.hashCode();
      complex0.isInfinite();
      complex1.toString();
      complex1.acos();
      Complex complex2 = complex0.multiply(complex0);
      complex0.abs();
      complex0.multiply((-1));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(7.644396100658923E-5);
      complex0.INF.createComplex(3.425518820814759, 3.425518820814759);
      complex0.readResolve();
      Complex complex1 = complex0.I.conjugate();
      complex0.add(Double.NaN);
      complex1.ZERO.abs();
      Complex.valueOf((-11.84996147496472), (-1397.713381));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide((-275.88815345));
      complex0.divide(Double.NaN);
      Complex.valueOf((-275.88815345));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0155552195374609E-134), (-1.0155552195374609E-134));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.I;
      complex2.NaN.pow(complex3);
      complex0.readResolve();
      Complex complex4 = Complex.ONE;
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      complex3.isInfinite();
      Complex complex5 = Complex.valueOf((-1.0155552195374609E-134));
      complex2.divide(complex5);
      Complex complex6 = new Complex(1206.0, 0.6244332790374756);
      complex6.toString();
      Complex complex7 = complex3.acos();
      complex5.abs();
      complex1.isInfinite();
      complex4.tan();
      Complex complex8 = new Complex((-1.0155552195374609E-134));
      complex1.pow(complex8);
      complex7.sqrt1z();
      complex1.multiply((-1860));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.createComplex((-598.47), 4.039437286589528E271);
      Complex complex3 = complex1.divide((-572.53026));
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex0.acos();
      complex1.sqrt1z();
      complex4.tanh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.conjugate();
      complex7.add(1435.4211733129857);
      complex2.sqrt1z();
      complex0.multiply((-2347));
      complex5.subtract(2.0);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      complex1.isInfinite();
      complex2.equals(complex0);
      complex1.pow(complex2);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-0.381065023096377), (-0.381065023096377));
      complex0.asin();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.createComplex((-2700.536657199681), 1.2567956334920216E105);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.divide(535.6823489163994);
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.subtract(Double.NaN);
      Complex complex1 = Complex.I;
      complex1.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.createComplex((-75.5827065657), 38.64162822253678);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3270.369559103206), (-3270.369559103206));
      complex0.getField();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.cos();
      complex2.equals(complex1);
      complex2.isInfinite();
      complex2.ONE.divide(complex1);
      complex2.toString();
      complex0.add(complex2);
      Complex complex3 = new Complex((-3270.369559103206), (-20.0));
      complex0.abs();
      complex1.isInfinite();
      complex3.tan();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.createComplex((-2700.536657199681), (-2700.536657199681));
      Complex complex2 = complex1.ZERO.asin();
      complex2.INF.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf((-2767.624034512375), (-2700.536657199681));
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex3.ONE.subtract(complex2);
      complex0.multiply((-2700.536657199681));
      complex0.tan();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.NaN.sqrt1z();
      complex8.INF.getField();
      complex3.I.multiply(2189.980187522481);
      Complex complex9 = Complex.valueOf((-2700.536657199681));
      complex9.INF.createComplex((-2700.536657199681), (-1285.89218776483));
      complex0.divide(complex4);
      complex5.sqrt();
      complex6.sinh();
      try { 
        complex4.nthRoot((-1180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,180
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(41.630046343649504);
      Complex complex2 = complex1.subtract(41.630046343649504);
      complex2.ONE.readResolve();
      complex0.NaN.pow(1.0);
      Complex complex3 = complex1.subtract(2314.9);
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = complex3.ONE.sqrt1z();
      complex5.ZERO.subtract(complex1);
      complex0.divide(complex3);
      complex2.cosh();
      complex4.subtract(complex1);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-3270.369559103206), 1.1712579802975851E287);
      Complex complex3 = complex1.sqrt1z();
      complex0.getArgument();
      Complex complex4 = complex3.tanh();
      complex2.acos();
      complex3.abs();
      complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex4.getArgument();
      Complex complex5 = new Complex(7.644396100658923E-5);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex3.acos();
      complex7.abs();
      complex6.pow(complex7);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(2.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.createComplex(1275.194, 676.0047244098373);
      complex3.NaN.toString();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex3.reciprocal();
      complex3.ZERO.sinh();
      Complex complex6 = complex5.ZERO.log();
      complex6.ONE.sin();
      complex6.ONE.toString();
      complex6.NaN.multiply(complex2);
      complex1.sin();
      complex0.asin();
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1436.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      complex1.equals(complex0);
      complex2.NaN.hashCode();
      complex1.isInfinite();
      complex2.toString();
      complex2.acos();
      complex0.multiply(complex1);
      complex1.abs();
      complex2.multiply((-1312145731));
      complex1.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Object object0 = new Object();
      complex1.equals(object0);
      complex1.isInfinite();
      complex1.toString();
      complex1.acos();
      complex1.abs();
      Complex complex2 = Complex.I;
      complex2.isInfinite();
      complex1.tan();
      Complex complex3 = new Complex((-2477.69), Double.NaN);
      complex3.nthRoot(2386);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(17.0);
      Complex complex3 = complex2.reciprocal();
      complex3.subtract(1.545909820981726E-8);
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      Complex complex5 = complex1.pow((-2011.0));
      Complex complex6 = Complex.I;
      complex5.subtract(complex1);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(1109.479647863589);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex3.log();
      complex5.ONE.getArgument();
      complex1.tanh();
      complex5.hashCode();
      Complex complex6 = complex2.ONE.exp();
      complex2.abs();
      complex1.isNaN();
      Complex complex7 = Complex.valueOf(1109.479647863589, Double.NaN);
      complex7.multiply(complex6);
      complex1.atan();
      complex4.exp();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1120.6004531489525, Double.POSITIVE_INFINITY);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3270.369406215282, Double.POSITIVE_INFINITY);
      complex0.ONE.pow(complex1);
      Complex complex2 = complex0.I.divide(64.828067006);
      Complex complex3 = complex2.divide(1.0);
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex2.I.cosh();
      Complex complex6 = complex5.I.multiply(64.828067006);
      complex0.add(0.0);
      complex0.log();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.ZERO.negate();
      complex8.I.sqrt();
      Complex.valueOf(64.828067006, Double.POSITIVE_INFINITY);
      Complex complex9 = complex4.multiply(1191);
      complex2.NaN.tanh();
      Complex complex10 = complex0.sin();
      complex10.ZERO.nthRoot(190);
      complex6.divide(complex9);
      Complex complex11 = complex5.sinh();
      complex7.conjugate();
      complex3.sinh();
      Complex complex12 = complex11.tanh();
      complex6.tan();
      complex12.subtract(1.0);
      complex3.multiply(complex11);
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(3012);
      Complex complex2 = complex0.I.createComplex(0.002001834334862451, 0.002001834334862451);
      Complex complex3 = complex2.ONE.multiply(0.002001834334862451);
      complex3.I.sqrt1z();
      complex2.NaN.cosh();
      complex0.NaN.pow(0.002001834334862451);
      complex0.abs();
      complex0.abs();
      Complex complex4 = complex2.I.acos();
      Complex complex5 = complex0.negate();
      complex2.divide(complex5);
      complex2.negate();
      complex5.sinh();
      complex4.equals(complex5);
      complex1.createComplex(698.26619536, 500.74);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(2461890.178047027, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.atan();
      complex1.abs();
      complex2.sinh();
      complex1.getField();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.99786, (-896.9));
      complex0.I.getField();
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.readResolve();
      Complex complex2 = complex0.add(2413.99786);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.log();
      complex4.getArgument();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex2.tanh();
      complex1.hashCode();
      complex5.exp();
      complex2.nthRoot(366);
      Complex complex7 = new Complex(2426.100475, 1.4997124671936035);
      Complex complex8 = Complex.NaN;
      complex7.subtract(complex8);
      complex8.log();
      Complex complex9 = complex5.multiply(complex6);
      complex9.sqrt();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-8.160628910742724E110), (-4451.605106399297));
      Complex complex1 = complex0.sinh();
      complex1.NaN.cosh();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex6.INF.multiply(complex2);
      complex7.I.add(complex4);
      complex5.ONE.acos();
      Complex.valueOf(0.35573500273692893, 0.35573500273692893);
      complex0.createComplex(9.924030156169606E118, (-4451.605106399297));
      complex5.asin();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(1916.36119151446, 1916.36119151446);
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
      complex1.abs();
      Complex complex2 = complex1.pow(0.5162794589996338);
      complex2.NaN.divide(Double.NaN);
      complex1.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf(0.5573811531066895);
      complex2.sqrt1z();
      complex7.subtract(complex6);
      Complex complex8 = complex1.divide(complex4);
      complex5.cosh();
      complex8.subtract(complex3);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.99786, (-896.9));
      Complex complex1 = Complex.valueOf(2413.99786);
      complex1.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ZERO.cos();
      complex0.equals(object0);
      complex2.isInfinite();
      Complex complex3 = complex0.asin();
      complex1.getArgument();
      Complex.valueOf(0.0);
      complex3.createComplex((-2666.45112355), 1.5288792383216787E-4);
      Complex complex4 = complex2.createComplex((-1438.58787975609), Double.NaN);
      complex0.getImaginary();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sin();
      complex2.sinh();
      Complex complex3 = complex0.add((-1.0));
      complex3.I.pow(complex0);
      complex0.tanh();
      try { 
        complex1.nthRoot((-1450));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,450
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2140.0));
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.I;
      complex0.multiply(complex2);
      complex1.acos();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex0.subtract((-2140.0));
      Complex complex6 = Complex.valueOf((-2140.0), (-2140.0));
      Complex complex7 = complex2.divide((-2140.0));
      complex0.getImaginary();
      complex5.add(complex1);
      Complex complex8 = complex5.sin();
      complex8.tanh();
      Complex complex9 = Complex.I;
      complex9.exp();
      complex6.cosh();
      complex9.divide(complex4);
      complex9.multiply(2556);
      Complex complex10 = complex4.tanh();
      complex10.getField();
      complex7.isNaN();
      complex4.multiply(complex2);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.99786, (-896.9));
      Complex complex1 = complex0.INF.multiply(2413.99786);
      complex1.I.getField();
      Complex complex2 = complex0.ZERO.cos();
      complex0.equals(complex0);
      complex0.isInfinite();
      complex0.toString();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex1.acos();
      complex4.isInfinite();
      Complex complex5 = complex4.tan();
      complex5.log();
      complex5.toString();
      Complex complex6 = complex0.reciprocal();
      complex5.reciprocal();
      complex6.tanh();
      complex1.log();
      complex2.getImaginary();
      complex0.readResolve();
      complex3.createComplex(2413.99786, (-1261.51598));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      complex1.NaN.log();
      Complex complex2 = Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.asin();
      complex5.I.getArgument();
      Complex complex6 = Complex.valueOf(0.5573811531066895);
      complex4.log();
      complex6.toString();
      complex4.reciprocal();
      Complex complex7 = complex6.reciprocal();
      complex2.tanh();
      Complex complex8 = complex7.log();
      complex8.getImaginary();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(4.363437558318513E-8);
      complex0.INF.hashCode();
      Complex complex1 = complex0.multiply((-59282910));
      complex1.nthRoot(2390);
      complex0.abs();
      complex0.toString();
      complex1.add(1.5288792383216787E-4);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.multiply(4995);
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.toString();
      complex1.I.exp();
      Complex complex2 = complex1.multiply(complex0);
      complex2.toString();
      Complex complex3 = complex0.INF.reciprocal();
      complex0.I.divide(complex3);
      Complex complex4 = complex3.multiply(complex0);
      complex4.NaN.multiply((double) 4995);
      complex2.I.multiply(complex0);
      Complex complex5 = complex2.ZERO.multiply(1742);
      Complex complex6 = complex2.cosh();
      complex2.getField();
      complex6.ONE.hashCode();
      complex6.add((-4279.999766355128));
      Complex.valueOf((-4279.999766355128));
      Complex complex7 = complex6.subtract(complex1);
      complex0.asin();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex8.I.conjugate();
      complex0.tanh();
      complex5.equals(complex7);
      Complex complex10 = complex1.asin();
      complex7.tan();
      complex10.acos();
      complex9.equals(complex5);
      complex5.nthRoot(2411);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(17.0);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex1.subtract(17.0);
      complex3.ONE.readResolve();
      complex0.NaN.pow(1.0);
      Complex complex4 = complex1.subtract(2314.9);
      Complex complex5 = complex0.ONE.sin();
      Complex complex6 = complex4.ONE.sqrt1z();
      complex6.ZERO.subtract(complex2);
      complex2.divide(complex4);
      complex3.cosh();
      complex5.subtract(complex1);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1592.47505));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.ONE.multiply(79.87638658290571);
      Complex complex5 = complex0.INF.tan();
      complex5.cos();
      Complex complex6 = complex1.createComplex((-1592.47505), 2051.032);
      Complex complex7 = Complex.NaN;
      complex7.pow(79.87638658290571);
      complex4.divide(0.4556184411048889);
      Complex complex8 = new Complex(0.4556184411048889, 79.87638658290571);
      complex3.subtract(complex8);
      complex6.add(complex7);
      Complex.valueOf(1.728610646009749E253, 8.689987517871135E92);
      // Undeclared exception!
      complex3.nthRoot(1518500250);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.99786, (-896.9));
      Complex complex1 = complex0.INF.multiply(2413.99786);
      complex1.I.getField();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.ZERO.cos();
      complex0.equals(complex2);
      complex0.isInfinite();
      complex0.toString();
      complex0.abs();
      Complex complex3 = new Complex(0.3541676242512473);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.cosh();
      complex0.multiply(2256);
      Complex complex6 = complex4.multiply((-4068.90377453));
      Complex complex7 = complex6.tan();
      complex7.add(complex5);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.multiply(2256);
      complex0.pow(complex2);
      Complex complex10 = complex1.tanh();
      complex3.pow(complex8);
      complex8.tan();
      complex9.sin();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.asin();
      complex1.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.cos();
      complex1.createComplex(0.0, -0.0);
      Complex complex4 = complex3.pow(-0.0);
      Complex complex5 = Complex.valueOf(1.557407724654902);
      Complex complex6 = complex5.divide(-0.0);
      complex3.subtract(complex4);
      complex1.add(complex2);
      Complex.valueOf((-9.868269632073771E-8), (-1876.7385425807765));
      complex6.nthRoot(2307);
      Complex complex7 = Complex.valueOf((-2.432215917965441E-8));
      complex7.abs();
      Complex complex8 = new Complex(1.0);
      complex8.multiply((-227.445214636001));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-2611.0), (-2611.0));
      Complex complex3 = complex1.multiply((-1346.2));
      complex1.getField();
      complex1.readResolve();
      Complex complex4 = complex3.cos();
      complex4.equals(complex1);
      Complex complex5 = new Complex(599.9302);
      complex5.isInfinite();
      complex2.toString();
      Complex complex6 = complex5.acos();
      complex4.abs();
      complex0.isInfinite();
      Complex complex7 = Complex.ONE;
      complex7.tan();
      complex7.log();
      complex6.toString();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex5.reciprocal();
      complex5.tanh();
      complex8.log();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.asin();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex3.NaN.sin();
      complex5.INF.sinh();
      Complex complex6 = complex2.conjugate();
      Complex.valueOf(2370.171);
      complex3.reciprocal();
      complex2.multiply(2370.171);
      complex4.abs();
      Complex complex7 = complex2.atan();
      complex2.cosh();
      complex0.multiply(2256);
      Complex complex8 = complex6.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex7.I.tan();
      Complex complex9 = complex1.add(complex4);
      Complex complex10 = complex9.ONE.multiply(2256);
      complex10.createComplex(Double.POSITIVE_INFINITY, 2370.171);
      Complex complex11 = Complex.valueOf(6.283185307179586, 2.3100480183046895E179);
      complex11.getImaginary();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      Complex complex2 = complex1.NaN.log();
      Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex3 = complex0.sin();
      complex3.sqrt();
      Complex complex4 = complex0.asin();
      complex4.I.getArgument();
      Complex complex5 = Complex.valueOf(0.5573811531066895);
      Complex complex6 = complex5.NaN.createComplex((-6.414337408955734E-8), (-2666.45112355));
      complex2.pow(complex1);
      Complex complex7 = Complex.valueOf(0.5573811531066895, (-6.414337408955734E-8));
      complex7.tanh();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.pow(complex3);
      complex6.tan();
      complex7.sin();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, (-1378.0807273));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.asin();
      complex2.getArgument();
      complex1.reciprocal();
      complex3.cos();
      Complex complex4 = complex2.createComplex((-1378.0807273), 1.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.pow((-1378.0807273));
      complex2.divide((-1378.0807273));
      Complex complex7 = Complex.I;
      complex7.subtract(complex6);
      complex4.add(complex5);
      Complex.valueOf(2.5988736152648926, 0.0);
      try { 
        complex4.nthRoot((-1951));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,951
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.99786, (-896.9));
      Complex complex1 = complex0.INF.multiply(2413.99786);
      complex1.I.getField();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex2.subtract((-896.9));
      complex1.ONE.atan();
      complex2.cos();
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(2413.99786, 6.414337408955734E-8);
      complex4.abs();
      complex3.sinh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex0.asin();
      complex6.I.getArgument();
      Complex complex7 = Complex.valueOf(0.5573811531066895);
      Complex complex8 = complex7.NaN.createComplex((-6.414337408955734E-8), (-2666.45112355));
      complex3.createComplex((-517.35440496349), (-1.0));
      complex3.getImaginary();
      complex2.getImaginary();
      complex8.pow(complex5);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      complex1.NaN.log();
      Complex complex2 = Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex3 = complex0.sin();
      complex3.sqrt();
      Complex complex4 = complex1.acos();
      complex0.abs();
      complex4.isInfinite();
      Complex complex5 = complex0.tan();
      complex2.log();
      complex5.toString();
      complex2.reciprocal();
      Complex complex6 = new Complex(3270.369559103206);
      complex6.reciprocal();
      complex3.tanh();
      complex2.log();
      Complex complex7 = Complex.NaN;
      try { 
        complex7.INF.nthRoot((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,741,824
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1610.505);
      Complex complex1 = complex0.sqrt();
      complex0.I.abs();
      Complex complex2 = complex1.I.multiply(1610.505);
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex2.NaN.divide(1610.505);
      complex4.ZERO.pow(complex0);
      complex4.INF.acos();
      complex0.toString();
      complex0.INF.hashCode();
      Complex complex5 = complex1.divide(complex0);
      complex0.INF.getField();
      complex5.NaN.createComplex(1610.505, 1610.505);
      Complex complex6 = complex2.reciprocal();
      complex5.INF.readResolve();
      Complex complex7 = complex6.divide((-1762.244508777));
      complex5.asin();
      complex5.toString();
      Complex complex8 = complex0.pow(complex3);
      complex8.INF.abs();
      complex5.exp();
      complex3.subtract(complex7);
      complex7.divide(complex5);
      Complex complex9 = Complex.valueOf(738.6251942730705);
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex10.INF.divide(complex2);
      complex11.ZERO.toString();
      complex7.readResolve();
      complex10.cos();
      complex2.divide(1610.505);
      complex9.tan();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2058.70867993828);
      complex0.readResolve();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.ONE;
      complex2.I.getField();
      Complex complex3 = complex0.pow(complex2);
      complex0.ZERO.exp();
      Complex complex4 = complex3.I.multiply(0);
      complex4.I.exp();
      Complex complex5 = complex2.NaN.sqrt1z();
      Complex complex6 = complex3.createComplex(1449.9933, (-524.0818528295));
      complex1.subtract(complex2);
      Complex complex7 = (Complex)complex4.readResolve();
      Complex complex8 = complex7.log();
      complex6.getImaginary();
      complex5.divide(complex8);
      complex4.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.subtract(complex1);
      Complex complex2 = Complex.valueOf((-2140.0));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.multiply((-2140.0));
      complex1.multiply(complex3);
      complex2.acos();
      complex1.pow(complex4);
      Complex complex5 = complex1.subtract((-2140.0));
      Complex complex6 = Complex.valueOf((-2140.0), (-2140.0));
      complex3.divide(919.5);
      complex1.getImaginary();
      complex5.add(complex2);
      Complex complex7 = complex5.sin();
      complex7.tanh();
      Complex complex8 = Complex.I;
      complex8.exp();
      complex6.cosh();
      try { 
        complex8.nthRoot((-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -86
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(147.08);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.multiply(147.08);
      Complex complex5 = new Complex(147.08, 147.08);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.cosh();
      complex3.sinh();
      Complex complex8 = complex4.cosh();
      complex8.conjugate();
      Complex complex9 = complex6.pow(complex7);
      complex8.negate();
      complex8.add(1235.463101150555);
      complex5.subtract((-1054.6793934615957));
      complex9.atan();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.divide(3010.202);
      Complex complex12 = new Complex(2945.0925);
      complex12.readResolve();
      complex7.sin();
      complex6.divide(complex0);
      Complex complex13 = complex11.cosh();
      Complex complex14 = Complex.INF;
      complex14.asin();
      complex13.exp();
      Complex complex15 = Complex.I;
      complex15.divide(712.6);
      complex9.multiply(complex12);
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3270.369559103206), (-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      complex1.NaN.log();
      Complex complex2 = Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.ZERO;
      complex5.I.getArgument();
      Complex complex6 = Complex.valueOf(0.5573811531066895);
      complex6.NaN.createComplex((-6.414337408955734E-8), (-2666.45112355));
      complex2.createComplex((-517.35440496349), (-1.0));
      complex2.getImaginary();
      complex1.createComplex(0.5573811531066895, 2350.346);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1592.47505));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.ONE.multiply(79.87638658290571);
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex5.ONE.cosh();
      complex5.INF.sinh();
      complex3.I.cosh();
      Complex complex7 = complex1.ZERO.conjugate();
      Complex complex8 = complex6.pow(complex4);
      complex8.negate();
      complex7.add(290.58360639);
      complex1.subtract(1593.2);
      Complex complex9 = complex8.atan();
      complex8.divide(290.58360639);
      complex0.readResolve();
      complex3.sin();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.divide(complex6);
      complex8.cosh();
      complex10.asin();
      complex11.exp();
      Complex complex12 = Complex.INF;
      complex12.divide(1357.04);
      complex9.multiply(complex5);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1592.47505));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.ONE.multiply(79.87638658290571);
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex5.ONE.cosh();
      complex5.INF.sinh();
      Complex complex7 = complex3.I.cosh();
      complex1.ZERO.conjugate();
      complex3.pow(complex6);
      complex5.negate();
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.add(79.87638658290571);
      Complex complex10 = complex9.subtract(Double.NaN);
      Complex complex11 = complex9.atan();
      complex10.divide(1574.9221561);
      complex4.readResolve();
      complex11.sin();
      complex5.divide(complex0);
      Complex complex12 = complex11.cosh();
      complex12.asin();
      Complex complex13 = complex11.exp();
      complex3.divide(147.08);
      complex0.multiply(complex7);
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1382.0, 1.733140900346534E-58);
      Complex complex1 = new Complex(1382.0, (-1.728610646009749E253));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.INF.divide(complex1);
      Complex.valueOf((-100.2));
      complex0.hashCode();
      Complex complex5 = Complex.valueOf(1382.0);
      complex5.ONE.add(1382.0);
      Complex.valueOf(Double.NaN, (-906.1858945259735));
      Complex complex6 = Complex.valueOf(2.0, (-5.004237248003625E181));
      Complex complex7 = complex6.divide((-1.728610646009749E253));
      complex2.readResolve();
      complex4.add(complex7);
      Complex complex8 = new Complex((-100.2));
      complex8.getReal();
      Complex complex9 = Complex.ZERO;
      complex9.isInfinite();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.I.readResolve();
      complex0.getReal();
      Complex complex2 = complex0.reciprocal();
      complex0.INF.pow(0.0);
      complex2.I.negate();
      Complex complex3 = complex1.multiply(3404.9265);
      Complex complex4 = complex3.reciprocal();
      complex0.sqrt();
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex3.pow(Double.NaN);
      complex5.getField();
      Complex complex7 = complex4.multiply(Double.NaN);
      Complex complex8 = Complex.valueOf(3202.18546372624, 0.6788584169941934);
      complex8.divide(0.0);
      complex4.readResolve();
      complex3.INF.exp();
      complex6.add(complex7);
      complex6.getReal();
      Complex complex9 = new Complex((-0.168491747314389), 0.0);
      complex9.isInfinite();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1592.47505));
      Complex complex2 = Complex.ONE;
      complex1.multiply(complex2);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.createComplex((-248.7674573986), (-248.7674573986));
      complex1.pow((-248.7674573986));
      Complex complex6 = complex5.divide(0.0);
      complex3.multiply((-248.7674573986));
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex8.sqrt();
      Complex complex9 = Complex.I;
      complex7.multiply(complex9);
      Complex complex10 = complex9.pow(Double.NaN);
      complex3.getField();
      complex4.multiply(350.6);
      Complex.valueOf(0.22392448782920837, (-3270.369559103206));
      complex6.divide(0.22392448782920837);
      Complex complex11 = Complex.INF;
      complex11.readResolve();
      complex8.add(complex7);
      complex0.getReal();
      complex1.isInfinite();
      complex2.exp();
      complex10.multiply(complex2);
      complex8.createComplex((-9.517971970450354E15), 1.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.asin();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex3.NaN.sin();
      complex5.INF.sinh();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex3.reciprocal();
      complex4.abs();
      Complex complex8 = complex5.cosh();
      complex8.INF.log();
      complex6.multiply(1487);
      Complex complex9 = Complex.ONE;
      complex9.multiply((double) 2256);
      complex7.tanh();
      Complex complex10 = Complex.ZERO;
      complex10.pow(complex4);
      complex1.tan();
      Complex complex11 = Complex.ZERO;
      complex11.hashCode();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.ZERO.divide(complex1);
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex4.NaN.sin();
      complex6.INF.sinh();
      complex2.conjugate();
      Complex.valueOf(2370.171);
      Complex complex7 = complex4.reciprocal();
      complex2.multiply(2370.171);
      complex5.abs();
      complex2.atan();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.multiply(2256);
      Complex complex10 = complex9.multiply(2.3701238867206538);
      Complex complex11 = complex10.tan();
      complex10.INF.divide(complex3);
      complex8.add(complex2);
      complex4.multiply(37);
      complex0.pow(complex6);
      Complex complex12 = complex2.tanh();
      complex12.pow(complex8);
      complex11.tan();
      complex1.sin();
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.asin();
      complex1.getArgument();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.ZERO.cos();
      complex2.createComplex(-0.0, (-248.7674573986));
      Complex complex6 = complex4.divide(0.0);
      Complex complex7 = complex4.multiply((-227.445214636001));
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex9.sqrt();
      complex5.multiply(complex0);
      Complex complex10 = Complex.valueOf(406.0, (-227.445214636001));
      complex10.getField();
      complex7.multiply(Double.NaN);
      Complex complex11 = Complex.valueOf(406.0, (-5185.6892139479));
      complex3.divide(406.0);
      complex8.readResolve();
      Complex complex12 = Complex.I;
      complex11.getReal();
      complex12.isInfinite();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      Complex complex2 = complex1.NaN.log();
      Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.asin();
      complex5.I.getArgument();
      Complex complex6 = complex4.multiply(complex2);
      Complex complex7 = complex4.pow((-3270.369559103206));
      complex7.getField();
      Complex complex8 = complex2.multiply((-3270.369559103206));
      Complex complex9 = Complex.valueOf(0.5573811531066895, 0.5573811531066895);
      complex4.divide(0.0);
      complex7.readResolve();
      Complex complex10 = new Complex(986.8650811881686, 0.4855077862739563);
      Complex complex11 = complex10.add(complex6);
      complex11.I.sqrt();
      complex9.getReal();
      complex5.isInfinite();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.asin();
      complex1.getArgument();
      Complex complex4 = complex3.I.reciprocal();
      complex3.ZERO.cos();
      Complex complex5 = complex2.createComplex(-0.0, (-248.7674573986));
      complex5.ZERO.pow((-248.7674573986));
      Complex complex6 = complex0.divide(0.0);
      complex3.I.getField();
      Complex complex7 = complex6.ONE.multiply((-227.445214636001));
      complex3.reciprocal();
      complex5.sqrt();
      Complex.valueOf((-248.7674573986));
      complex5.createComplex(6.283185307179586, (-20.0));
      complex6.createComplex((-227.445214636001), 1.557407724654902);
      complex3.getImaginary();
      complex4.createComplex((-350.6), (-1.0));
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      complex0.getReal();
      Complex complex1 = complex0.reciprocal();
      complex0.INF.pow(0.0);
      Complex complex2 = complex1.I.negate();
      complex2.ZERO.subtract(complex1);
      Complex complex3 = complex1.ONE.add(complex0);
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      complex4.I.nthRoot(2307);
      complex4.abs();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(325.7);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.add(806.2444198186);
      complex3.I.pow(0.0);
      complex1.ONE.getField();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.ONE.negate();
      complex5.INF.getArgument();
      complex1.I.sin();
      complex4.I.nthRoot(1);
      Complex complex6 = complex1.multiply(complex2);
      complex0.reciprocal();
      complex6.createComplex(1.0311034276196487E-7, (-5857.23433304736));
      complex1.INF.asin();
      Complex complex7 = complex2.divide(0.0);
      complex7.sin();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1592.47505));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex2);
      complex1.ONE.multiply(79.87638658290571);
      Complex complex4 = complex0.INF.tan();
      complex4.ONE.cosh();
      Complex complex5 = complex4.INF.sinh();
      complex3.I.cosh();
      complex1.ZERO.conjugate();
      Complex complex6 = complex0.pow(complex3);
      complex5.INF.negate();
      Complex complex7 = complex0.add(1357.04);
      Complex complex8 = complex1.subtract(1357.04);
      Complex complex9 = complex7.atan();
      complex8.divide(3010.202);
      complex7.ZERO.readResolve();
      Complex complex10 = complex7.sin();
      complex10.divide(complex6);
      Complex complex11 = complex2.cosh();
      complex11.ONE.asin();
      Complex complex12 = complex9.exp();
      complex12.divide((-2.607907890164073E-8));
      complex9.multiply(complex5);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.306111510463843E-162);
      complex0.hashCode();
      Complex complex1 = complex0.add(2.0);
      complex1.ONE.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.atan();
      complex0.ZERO.toString();
      Complex complex4 = complex3.sin();
      complex0.add(complex2);
      complex2.cosh();
      complex1.isInfinite();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.tanh();
      complex2.NaN.cos();
      Complex complex4 = complex1.ZERO.exp();
      complex3.INF.hashCode();
      complex0.toString();
      Complex complex5 = complex0.add(1155.96);
      Complex complex6 = complex1.createComplex(1.349595069885254, 0.0);
      Complex complex7 = complex6.multiply(1);
      complex7.I.subtract((double) 1);
      Complex complex8 = complex0.createComplex(0.0, 1155.96);
      complex6.abs();
      complex0.ONE.nthRoot(1);
      complex7.getField();
      complex1.readResolve();
      complex8.ZERO.add(0.0);
      Complex complex9 = complex0.negate();
      Complex complex10 = Complex.valueOf((double) 1, 2.1388659707647114E-62);
      Complex complex11 = complex8.divide(complex1);
      complex11.sin();
      complex10.multiply(8.938334752179552E-9);
      complex9.divide(complex10);
      complex4.getImaginary();
      complex5.subtract(1.349595069885254);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-962.28116989542));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.multiply(complex0);
      complex1.I.add((-87.3928));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.NaN.getField();
      try { 
        complex0.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex1.I.toString();
      complex1.equals(complex0);
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex0.multiply(1318.113496);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.conjugate();
      complex5.ONE.getField();
      complex0.add(complex3);
      Complex complex6 = complex3.sqrt1z();
      Complex.valueOf(1.0);
      complex6.INF.sin();
      complex2.nthRoot(1);
      complex4.NaN.multiply((double) 1);
      Complex complex7 = complex5.pow(0.0);
      complex7.INF.createComplex(0.0, (-3592.0));
      Complex complex8 = complex2.sqrt1z();
      complex8.readResolve();
      Complex complex9 = Complex.valueOf(0.0, (-3133.003709));
      complex0.sinh();
      complex0.getField();
      complex9.divide(1318.113496);
      complex7.add(complex9);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.6437112632041807E-8));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.ZERO.acos();
      complex3.INF.log();
      complex3.ONE.nthRoot(1001);
      int int0 = (-1198);
      complex0.ZERO.acos();
      Complex complex4 = complex2.INF.divide(complex0);
      complex0.ONE.divide(complex2);
      complex4.ONE.sqrt();
      try { 
        complex3.NaN.nthRoot((-1198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,198
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.asin();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex3.NaN.sin();
      complex5.INF.sinh();
      Complex complex6 = complex2.conjugate();
      Complex.valueOf(2370.171);
      complex3.reciprocal();
      complex2.multiply(2370.171);
      complex4.abs();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex2.cosh();
      complex0.multiply(2256);
      complex6.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex7.I.tan();
      Complex complex9 = complex1.add(complex4);
      complex9.ONE.multiply(2256);
      complex7.pow(complex6);
      complex7.tanh();
      Complex complex10 = complex3.pow(complex8);
      complex1.tan();
      complex10.sin();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(837.90215933);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide((-413.291));
      complex2.ZERO.acos();
      Complex complex3 = complex1.pow((-888.10657990976));
      complex3.ZERO.getArgument();
      Complex complex4 = complex0.INF.add((-888.10657990976));
      Complex complex5 = complex1.INF.divide(complex0);
      Complex complex6 = complex0.I.multiply(837.90215933);
      Complex complex7 = complex5.NaN.add(837.90215933);
      Complex complex8 = complex1.INF.asin();
      complex8.NaN.abs();
      complex8.INF.getArgument();
      complex5.ONE.getArgument();
      complex1.INF.exp();
      complex5.ZERO.negate();
      Complex complex9 = complex0.add(complex1);
      Complex complex10 = complex6.asin();
      complex10.ONE.log();
      Complex complex11 = complex1.cos();
      complex0.getField();
      complex7.INF.add(complex0);
      complex3.equals(complex1);
      complex11.readResolve();
      Complex complex12 = complex7.tanh();
      complex12.getImaginary();
      complex4.sinh();
      complex12.cosh();
      Complex.valueOf(353.137, (-3173.836038));
      complex3.exp();
      complex5.isInfinite();
      complex8.createComplex((-3933.7730202618045), (-888.10657990976));
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      complex0.NaN.asin();
      Complex complex1 = Complex.valueOf((-2140.0));
      complex1.INF.multiply((-2140.0));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex2.I.pow(complex0);
      Complex complex5 = complex3.subtract((-2140.0));
      Complex complex6 = Complex.valueOf((-2140.0), (-2140.0));
      complex6.INF.divide(919.5);
      complex0.getImaginary();
      Complex complex7 = complex0.add(complex2);
      complex7.I.sin();
      complex2.tanh();
      complex0.exp();
      complex4.cosh();
      try { 
        complex5.ZERO.nthRoot((-2190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,190
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-3270.369559103206));
      Complex complex1 = complex0.pow(0.5573811531066895);
      complex1.NaN.log();
      Complex complex2 = Complex.valueOf((-6.414337408955734E-8), 0.5573811531066895);
      Complex complex3 = complex0.sin();
      complex3.sqrt();
      Complex complex4 = complex0.asin();
      complex4.I.getArgument();
      Complex complex5 = Complex.valueOf(0.5573811531066895);
      complex5.NaN.createComplex((-6.414337408955734E-8), (-2666.45112355));
      complex2.createComplex((-517.35440496349), (-1.0));
      complex2.getImaginary();
      complex1.createComplex(0.5573811531066895, 2350.346);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-350.6));
      Complex complex1 = Complex.valueOf((-350.6), (-3376.48));
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.ONE.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.pow((-350.6));
      complex3.I.nthRoot(1);
      Complex complex6 = complex5.INF.pow((-3273.0));
      Complex complex7 = complex4.subtract((-744.4));
      complex5.abs();
      Complex complex8 = complex3.NaN.multiply(0);
      Complex complex9 = complex6.acos();
      complex9.INF.sin();
      Complex complex10 = complex9.ZERO.acos();
      complex6.ZERO.sin();
      Complex complex11 = complex6.multiply(20.0);
      Complex complex12 = Complex.valueOf(0.0, 20.0);
      complex11.I.abs();
      complex5.NaN.abs();
      Complex complex13 = complex11.NaN.pow(complex12);
      complex13.ZERO.sqrt1z();
      complex12.sqrt1z();
      complex7.cosh();
      complex11.isInfinite();
      complex12.getField();
      complex8.add(complex5);
      complex13.subtract(complex7);
      Complex complex14 = complex10.cos();
      complex14.conjugate();
      complex13.add(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(639.1599548339, 639.1599548339);
      Complex complex1 = Complex.I;
      complex1.NaN.multiply(complex0);
      complex0.subtract(complex1);
      complex0.INF.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      Complex complex3 = complex2.sinh();
      complex2.I.toString();
      complex0.ONE.tan();
      Complex complex4 = Complex.valueOf(1.6023339607737848E-7);
      complex0.sqrt1z();
      Complex complex5 = complex3.divide(0.7853981633974483);
      Complex complex6 = complex4.exp();
      complex6.ONE.createComplex(639.1599548339, 0.0);
      complex4.toString();
      Complex complex7 = complex5.reciprocal();
      try { 
        complex7.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(4.363437558318513E-8);
      complex0.INF.hashCode();
      complex0.INF.multiply(Double.POSITIVE_INFINITY);
      complex0.I.atan();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1594.48198), (-1594.48198));
      complex0.NaN.sin();
      Complex complex1 = complex0.cos();
      complex1.I.nthRoot(730);
      Complex complex2 = complex1.I.exp();
      complex1.I.acos();
      complex2.I.multiply((-1594.48198));
      Complex complex3 = Complex.valueOf((-3520.761379), 0.0);
      complex3.toString();
      complex1.multiply(0.0);
      Complex complex4 = complex1.tanh();
      complex4.I.getArgument();
      complex2.isInfinite();
      Complex complex5 = complex1.tan();
      complex5.tan();
      complex1.getArgument();
      complex4.multiply(2119.3443700771877);
      Complex complex6 = complex5.multiply(complex2);
      complex2.getArgument();
      complex0.getImaginary();
      complex6.sin();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-827.2455220046494));
      Complex complex1 = Complex.valueOf((-856.440322), (-1.0));
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide((-248.525806304286));
      Complex complex2 = complex1.ONE.acos();
      complex1.ZERO.tan();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex1.NaN.reciprocal();
      complex4.INF.tan();
      complex0.INF.abs();
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex5.ZERO.sqrt();
      complex5.ZERO.toString();
      Complex complex7 = complex4.NaN.pow(complex3);
      Complex complex8 = complex7.NaN.divide(complex3);
      Complex complex9 = complex4.conjugate();
      complex0.getArgument();
      complex0.getArgument();
      Complex complex10 = complex0.multiply((-248.525806304286));
      complex10.I.divide(complex6);
      Complex complex11 = complex4.conjugate();
      complex9.tanh();
      complex0.negate();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex12.ONE.add(complex8);
      complex0.cos();
      complex6.tanh();
      complex8.pow((-365.962845));
      complex13.abs();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      complex1.add(complex0);
      complex1.ZERO.acos();
      complex1.INF.sinh();
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.ONE.subtract((-1.2268014119628852E249));
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex5.NaN.createComplex(0.0, (-1.2268014119628852E249));
      Complex complex7 = complex5.I.divide(6.283185307179586);
      complex7.NaN.readResolve();
      Complex complex8 = complex3.atan();
      complex4.equals(complex6);
      complex6.getArgument();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(1931.5);
      Complex complex2 = complex1.NaN.sinh();
      complex1.ZERO.abs();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.INF.multiply(1289);
      complex0.pow((-325.0));
      complex0.isNaN();
      complex5.ZERO.conjugate();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-686.0158459042));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.pow((-686.0158459042));
      complex1.NaN.subtract(Double.NaN);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex3.pow((-686.0158459042));
      complex4.reciprocal();
      complex3.readResolve();
      Complex complex6 = complex4.acos();
      complex6.sqrt();
      complex5.toString();
      Complex complex7 = complex4.sinh();
      complex4.divide(complex3);
      Complex complex8 = complex7.I.multiply((-4687.840583806579));
      Complex complex9 = complex2.multiply((-686.0158459042));
      complex9.INF.getArgument();
      complex7.getArgument();
      Complex complex10 = complex1.negate();
      complex10.isNaN();
      complex4.isInfinite();
      complex5.log();
      complex3.multiply((-791.8400541));
      complex8.exp();
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2058.70867993828);
      complex0.readResolve();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.ONE;
      complex2.I.getField();
      Complex complex3 = complex0.pow(complex2);
      complex0.ZERO.exp();
      Complex complex4 = complex3.I.multiply(0);
      complex4.I.exp();
      complex2.NaN.sqrt1z();
      complex3.createComplex(1449.9933, (-524.0818528295));
      complex1.subtract(complex2);
      complex4.readResolve();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(1382.0, 1.733140900346534E-58);
      Complex complex1 = new Complex(1382.0, (-1.728610646009749E253));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.INF.sqrt();
      complex3.INF.divide(complex1);
      Complex.valueOf((-100.2));
      complex0.hashCode();
      Complex complex4 = Complex.valueOf(1382.0);
      complex4.ONE.add(1382.0);
      Complex complex5 = complex3.exp();
      complex5.getArgument();
      complex0.exp();
      Complex complex6 = Complex.NaN;
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.cos();
      Complex complex2 = complex1.NaN.acos();
      complex2.ZERO.pow(complex1);
      Complex complex3 = complex1.multiply(823.491476932071);
      complex3.I.subtract(823.491476932071);
      complex3.cos();
      Complex complex4 = complex0.pow(complex2);
      complex4.NaN.sinh();
      complex0.readResolve();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1107.0493865415415);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.subtract(1107.0493865415415);
      complex0.I.cos();
      complex2.readResolve();
      complex1.abs();
      complex1.sinh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      double double0 = (-434.60947487665);
      complex1.INF.createComplex((-434.60947487665), (-434.60947487665));
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.divide(0.0);
      complex2.I.sqrt();
      complex2.NaN.getArgument();
      complex0.getImaginary();
      complex1.reciprocal();
      Complex.valueOf(4.363736368635843E-9);
      complex1.tan();
      complex2.getImaginary();
      complex2.conjugate();
      Complex.valueOf(639.9951259559856);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 1342.882863;
      Complex complex0 = new Complex(1342.882863);
      Complex complex1 = complex0.NaN.negate();
      complex1.pow(1342.882863);
      Complex complex2 = complex0.acos();
      complex2.INF.cos();
      complex2.ZERO.multiply(1342.882863);
      int int0 = (-4003);
      try { 
        complex2.I.nthRoot((-4003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,003
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-3675.96003935478));
      complex1.INF.getArgument();
      complex0.I.cosh();
      Complex complex2 = Complex.valueOf(1863.87);
      complex0.ZERO.readResolve();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.multiply((-3675.96003935478));
      Complex complex5 = complex3.ONE.subtract(4247.223899);
      complex5.I.pow(complex4);
      complex1.getArgument();
      complex3.reciprocal();
      Complex complex6 = complex3.multiply(677);
      complex6.ONE.readResolve();
      complex1.toString();
      Complex complex7 = complex0.I.subtract(4247.223899);
      complex3.INF.exp();
      complex7.I.hashCode();
      complex4.ZERO.acos();
      Complex complex8 = complex2.createComplex(677, 258.433368166722);
      complex1.ONE.cosh();
      complex8.ZERO.subtract(complex4);
      complex1.INF.log();
      Complex.valueOf(0.7853981633974483);
      Complex complex9 = complex3.sin();
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = Complex.valueOf(258.433368166722);
      complex11.ONE.tanh();
      complex3.isNaN();
      Complex.valueOf(258.433368166722, 3311.3746148987);
      Complex.valueOf(0.0, 4247.223899);
      complex2.getField();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.createComplex(2.5411510467529297, 2.5411510467529297);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.add(0.0);
      complex5.createComplex(151.0, 151.0);
      complex0.getArgument();
      Complex complex6 = complex1.NaN.cosh();
      complex6.ONE.asin();
      complex1.isNaN();
      Complex complex7 = complex2.I.multiply(complex3);
      complex0.multiply(complex1);
      Complex.valueOf(2.5411510467529297);
      complex0.I.multiply(0);
      complex6.readResolve();
      Complex complex8 = Complex.valueOf(1.75879225876483E-25, 2.5411510467529297);
      complex0.readResolve();
      complex0.getReal();
      complex2.tanh();
      complex3.multiply(3580.6);
      complex7.cos();
      complex1.multiply((double) 0);
      complex6.tanh();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.valueOf(0.0, 762.7110709);
      complex2.ZERO.getArgument();
      Complex complex3 = complex2.ONE.divide(762.7110709);
      complex3.ZERO.cos();
      complex0.ZERO.readResolve();
      complex2.I.multiply(0.0);
      Complex complex4 = complex1.ZERO.negate();
      complex4.ZERO.abs();
      complex0.abs();
      complex1.conjugate();
      complex0.pow(complex1);
      Complex complex5 = Complex.valueOf((-1211.340511574));
      complex0.getArgument();
      complex2.sqrt1z();
      complex5.tanh();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.ZERO.sin();
      Complex complex1 = complex0.sinh();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.asin();
      complex1.getArgument();
      complex3.I.reciprocal();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex2.createComplex(-0.0, (-248.7674573986));
      Complex complex6 = complex5.ZERO.pow((-248.7674573986));
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex7.ONE.multiply((-227.445214636001));
      Complex complex9 = complex3.reciprocal();
      complex5.sqrt();
      Complex complex10 = complex6.multiply(complex9);
      complex10.I.pow(-0.0);
      complex1.getField();
      complex0.multiply((-227.445214636001));
      Complex.valueOf(0.0, -0.0);
      Complex complex11 = complex2.divide(0.0);
      complex10.readResolve();
      complex9.add(complex7);
      complex4.getReal();
      complex8.isInfinite();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.isNaN();
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
      complex0.getImaginary();
      Complex complex2 = complex0.reciprocal();
      complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.multiply(528);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex0.log();
      complex0.cos();
      complex3.I.sqrt1z();
      complex3.I.acos();
      complex3.sqrt1z();
      Complex.valueOf(1559.0);
      complex2.hashCode();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 4012.71601;
      Complex complex0 = Complex.valueOf(4012.71601);
      complex0.ONE.negate();
      Complex complex1 = complex0.ONE.cosh();
      double double1 = 0.0;
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.NaN.nthRoot((-529));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -529
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1400);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cos();
      complex0.toString();
      Complex complex2 = Complex.valueOf(1968.6664732416, 998.1853);
      Complex complex3 = complex0.ONE.multiply(complex2);
      Complex complex4 = complex3.divide(complex0);
      complex4.I.pow(complex3);
      Complex complex5 = complex4.INF.subtract(122.28);
      Complex complex6 = complex0.subtract(complex2);
      complex6.readResolve();
      Complex complex7 = complex4.sin();
      complex7.NaN.cos();
      complex6.INF.multiply(1);
      Complex complex8 = complex2.log();
      Complex complex9 = complex2.conjugate();
      complex0.sin();
      complex9.getReal();
      complex9.isInfinite();
      Complex complex10 = complex2.add(998.1853);
      complex10.sinh();
      complex8.readResolve();
      Complex complex11 = complex10.INF.sinh();
      complex11.INF.hashCode();
      complex8.getImaginary();
      complex10.readResolve();
      Complex complex12 = complex4.tan();
      complex12.log();
      Complex complex13 = complex5.log();
      complex6.isInfinite();
      complex13.abs();
      complex1.createComplex(2.316005229949951, 0.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      complex0.ONE.getField();
      Complex complex1 = complex0.divide((-2021.5169));
      complex1.INF.sqrt();
      Complex complex2 = complex1.ZERO.subtract((-2021.5169));
      complex1.ZERO.add(complex0);
      complex0.conjugate();
      Complex.valueOf((-2021.5169));
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(657.8463, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = complex0.log();
      complex1.INF.subtract(complex0);
      complex1.INF.getArgument();
      complex1.isNaN();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
      
      Complex complex3 = complex2.NaN.subtract(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotNull(complex3);
      
      Complex complex4 = complex2.ZERO.pow(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotNull(complex4);
      
      Complex complex5 = complex2.asin();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotNull(complex5);
      
      Complex complex6 = complex1.ONE.exp();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2.718281828459045, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotNull(complex6);
      
      Complex complex7 = complex5.I.conjugate();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotNull(complex7);
      
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      
      Complex complex8 = complex2.ZERO.add(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotNull(complex8);
      
      Complex complex9 = complex7.ZERO.cos();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotNull(complex9);
      
      Complex complex10 = complex0.NaN.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex1));
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex10, complex5);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotNull(complex10);
      
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotNull(string0);
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex11 = complex5.I.tan();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.7615941559557649, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex6));
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex6);
      assertNotNull(complex11);
      
      double double0 = complex1.getImaginary();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      Complex complex12 = complex4.divide(complex7);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertTrue(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertTrue(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex3);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotNull(complex12);
      
      Complex complex13 = Complex.ONE;
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertEquals(1.0, complex13.getReal(), 0.01);
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertTrue(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex8));
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex8);
      assertSame(complex13, complex0);
      assertNotNull(complex13);
      
      Complex complex14 = complex12.NaN.divide(complex13);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertEquals(1.0, complex13.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertTrue(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertTrue(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex2));
      assertTrue(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertTrue(complex14.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertTrue(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex13));
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex8);
      assertSame(complex13, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex13);
      assertSame(complex14, complex12);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex2);
      assertSame(complex14, complex3);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex10);
      assertNotSame(complex14, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex13);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex12, complex1);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex2);
      assertSame(complex12, complex14);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex3);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotNull(complex14);
      
      Complex complex15 = complex7.multiply(2325.0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals((-2325.0), complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex13);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotNull(complex15);
      
      ComplexField complexField0 = complex7.getField();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.5836293809324178), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex13);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotNull(complexField0);
      
      Complex complex16 = complex3.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertTrue(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex8));
      assertTrue(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex15));
      assertTrue(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertSame(complex3, complex16);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex16, complex11);
      assertSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertSame(complex16, complex12);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex9);
      assertSame(complex16, complex3);
      assertSame(complex16, complex14);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex5);
      assertNotNull(complex16);
      
      List<Complex> list0 = complex16.ZERO.nthRoot(2409);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertTrue(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(2409, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex8));
      assertTrue(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex15));
      assertTrue(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertSame(complex3, complex16);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex16, complex11);
      assertSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertSame(complex16, complex12);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex9);
      assertSame(complex16, complex3);
      assertSame(complex16, complex14);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex5);
      assertFalse(list0.contains(complex9));
      assertTrue(list0.contains(complex8));
      assertNotNull(list0);
      
      List<Complex> list1 = complex6.nthRoot(1122);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1122, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2.718281828459045, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex1.equals((Object)complex16));
      assertTrue(complex1.equals((Object)complex12));
      assertFalse(list1.equals((Object)list0));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex12));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex11);
      assertNotSame(list1, list0);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex12);
      assertFalse(list1.contains(complex11));
      assertNotNull(list1);
      
      Complex complex17 = complex4.tan();
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertTrue(complex17.isNaN());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex7));
      assertTrue(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex5));
      assertTrue(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex13));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex17);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex2);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex9);
      assertSame(complex17, complex10);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex13);
      assertSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertSame(complex17, complex12);
      assertSame(complex17, complex16);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex6);
      assertSame(complex17, complex14);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex5);
      assertNotNull(complex17);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.I.readResolve();
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      complex0.getReal();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.INF.pow(0.0);
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ZERO.subtract(complex2);
      assertEquals((-1.0), complex4.getImaginary(), 0.01);
      
      Complex complex6 = complex2.ONE.add(complex0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      List<Complex> list0 = complex7.I.nthRoot(2307);
      assertFalse(list0.contains(complex0));
      assertEquals(2307, list0.size());
      
      double double0 = complex7.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex8 = complex6.multiply(0.0);
      assertSame(complex6, complex0);
      assertSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertTrue(complex8.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 2666.470562237844;
      Complex complex0 = new Complex(2666.470562237844, 2666.470562237844);
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.99786, (-896.9));
      Complex complex1 = complex0.INF.multiply(2413.99786);
      complex1.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ZERO.cos();
      boolean boolean0 = complex0.equals(object0);
      complex0.isInfinite();
      complex0.toString();
      Complex complex3 = complex1.acos();
      double double0 = complex3.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = complex1.isInfinite();
      assertTrue(boolean1 == boolean0);
      
      complex3.tan();
      Complex complex4 = complex0.log();
      complex1.toString();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.INF.reciprocal();
      assertEquals(1.3524200575427446E-4, complex5.getImaginary(), 0.01);
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = complex4.tanh();
      assertEquals(0.9999997715850529, complex7.getReal(), 0.01);
      assertEquals((-1.9691371017541686E-7), complex7.getImaginary(), 0.01);
      
      complex3.log();
      assertNotSame(complex3, complex6);
      assertFalse(complex3.equals((Object)complex2));
      
      double double1 = complex1.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }
}
