/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:04:50 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2577.0973502056));
      complex0.hashCode();
      Complex complex2 = complex1.divide((-283.898));
      Complex complex3 = new Complex((-1129.1829710454247), (-1129.1829710454247));
      complex2.sqrt1z();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.tan();
      complex5.pow(3.42171232580676E-8);
      complex6.multiply(complex5);
      complex2.nthRoot(714);
      complex5.asin();
      complex4.getField();
      Complex.valueOf(3.42171232580676E-8, (-2577.0973502056));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2073.624708049196), 20.0);
      Complex complex2 = complex1.tan();
      complex2.divide((-6500969.089999999));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.divide(complex0);
      Complex complex1 = new Complex((-6500969.089999999), Double.POSITIVE_INFINITY);
      complex1.NaN.divide(6.283185307179586);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-893.91815953), (-893.91815953));
      Complex complex2 = Complex.valueOf(0.0, 0.6461620330810547);
      complex2.NaN.tan();
      Complex complex3 = new Complex(0.0, (-893.91815953));
      Complex complex4 = complex1.sqrt1z();
      complex1.reciprocal();
      complex4.atan();
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex(2802.2434027, (-20.0));
      complex6.tan();
      Complex.valueOf(1.0233519853128553E-7, 6.076820259849921E-27);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = new Complex((-6500969.089999999), Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.tan();
      complex3.I.multiply(complex1);
      complex0.multiply(complex1);
      complex2.multiply((-708.5811915412771));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex((-6500969.089999999), Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = new Complex((-6500969.089999999), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.subtract((-4405.4585));
      Complex complex4 = new Complex((-6500969.089999999), (-4405.4585));
      complex4.exp();
      complex1.pow((-323.1417627696775));
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = new Complex(0.0016737419434450307, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.ONE;
      complex1.toString();
      complex2.divide(complex1);
      Complex complex4 = new Complex(0.0016737419434450307, Double.POSITIVE_INFINITY);
      complex2.tan();
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-937.0990167), 165.730286);
      Complex complex2 = complex0.multiply(complex1);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1227.5804), 6500969.089999999);
      Complex complex1 = complex0.NaN.multiply(6500969.089999999);
      Complex complex2 = complex1.I.add(2.9254832789181E165);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.createComplex((-167.7787462536), (-1227.5804));
      complex4.INF.multiply(314);
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex0.sqrt();
      complex6.ONE.subtract(complex4);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.add(596.24);
      complex8.INF.getField();
      complex6.nthRoot(2255);
      Complex complex9 = complex2.sinh();
      complex5.cosh();
      Complex complex10 = complex3.createComplex(596.24, 582.760972975057);
      complex9.getField();
      complex10.sqrt();
      Complex complex11 = complex0.atan();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = new Complex(2721.4672843251, 2721.4672843251);
      complex2.hashCode();
      complex1.getReal();
      Complex complex4 = complex2.subtract(complex2);
      complex2.multiply(2721.4672843251);
      Complex complex5 = complex4.exp();
      complex4.INF.multiply(654);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex5.pow(100.73507);
      complex3.multiply(complex7);
      complex0.nthRoot(301);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex((-955.431546145), Double.NaN);
      Complex complex1 = complex0.divide((-955.431546145));
      complex0.readResolve();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide(6500969.089999999);
      complex3.asin();
      Complex complex4 = Complex.NaN;
      complex0.readResolve();
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.divide((-4224.62));
      complex2.hashCode();
      complex2.divide(6500969.089999999);
      Complex complex8 = new Complex((-4224.62), (-4224.62));
      complex5.sqrt1z();
      Complex complex9 = complex7.reciprocal();
      complex3.atan();
      complex9.acos();
      Complex complex10 = Complex.valueOf(2041.06);
      complex10.tan();
      complex2.equals(complex4);
      complex1.readResolve();
      Complex complex11 = Complex.valueOf((-644.876803), (-955.431546145));
      complex11.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2492.722, 2492.722);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(2678.569522428385, 2678.569522428385);
      Complex complex2 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex0.ONE.readResolve();
      Complex complex3 = complex0.multiply(complex0);
      complex0.I.divide(2041.06);
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.NaN;
      complex3.I.readResolve();
      Complex complex6 = complex1.acos();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.INF.divide((-644.876803));
      complex3.ONE.hashCode();
      complex4.divide(2678.569522428385);
      Complex complex9 = new Complex((-644.876803), (-644.876803));
      complex0.sqrt();
      complex9.pow(2041.06);
      Complex complex10 = complex0.multiply(complex8);
      Complex complex11 = Complex.ZERO;
      complex11.divide(complex1);
      complex1.getReal();
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = new Complex(531.38);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-590.9540585560582), 3055.5089);
      Complex complex1 = Complex.I;
      complex0.ONE.getArgument();
      complex1.I.reciprocal();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.INF.pow(complex0);
      complex4.ZERO.exp();
      Complex complex5 = complex0.add(complex1);
      complex5.NaN.createComplex((-590.9540585560582), (-590.9540585560582));
      Complex complex6 = complex5.I.sin();
      complex5.I.tan();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.multiply((-590.9540585560582));
      Complex complex9 = complex3.acos();
      complex0.I.tan();
      Complex complex10 = complex9.I.reciprocal();
      complex10.getArgument();
      Complex complex11 = complex7.multiply(complex8);
      complex8.asin();
      complex5.divide(complex2);
      Complex complex12 = complex1.asin();
      complex2.asin();
      Complex complex13 = complex11.divide((-590.9540585560582));
      Complex complex14 = complex6.tanh();
      complex0.negate();
      Complex complex15 = complex12.sqrt();
      Complex complex16 = complex15.I.sinh();
      complex16.INF.tan();
      Complex complex17 = complex13.add((-590.9540585560582));
      complex10.atan();
      complex6.pow(0.0);
      complex16.cosh();
      Complex complex18 = complex14.add((-1.5707963267948966));
      complex10.divide(complex18);
      complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.reciprocal();
      complex2.atan();
      complex2.divide(complex1);
      complex1.acos();
      complex0.tan();
      Complex complex3 = Complex.INF;
      complex1.equals(complex3);
      complex1.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.I;
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.ONE.createComplex(2678.569522428385, 2678.569522428385);
      Complex complex2 = Complex.ONE;
      complex1.ONE.readResolve();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.divide(2041.06);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 2041.06);
      complex4.pow(Double.POSITIVE_INFINITY);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.createComplex(2678.569522428385, 2678.569522428385);
      Complex complex3 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = (Complex)complex1.ONE.readResolve();
      complex0.multiply(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.NaN;
      complex4.readResolve();
      Complex complex7 = complex4.acos();
      Complex complex8 = Complex.INF;
      complex5.subtract(complex0);
      Complex complex9 = complex4.divide((-644.876803));
      complex9.hashCode();
      Complex complex10 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = new Complex((-873.168714), Double.POSITIVE_INFINITY);
      complex7.sqrt1z();
      complex6.reciprocal();
      Complex complex12 = complex7.atan();
      complex3.divide(complex10);
      complex12.tan();
      Complex.valueOf((-873.168714), 3113.46);
      complex9.subtract(Double.POSITIVE_INFINITY);
      complex5.pow(complex6);
      complex3.acos();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.createComplex(2678.569522428385, 2678.569522428385);
      Complex complex3 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = (Complex)complex1.ONE.readResolve();
      complex0.multiply(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.NaN;
      complex6.readResolve();
      Complex complex8 = complex3.acos();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex2.subtract(complex6);
      Complex complex11 = complex2.divide((-644.876803));
      Complex complex12 = Complex.ONE;
      complex12.hashCode();
      complex10.divide(1.6861720085144043);
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY, 1465.440544552799);
      complex3.INF.multiply((-2201));
      complex8.sqrt1z();
      complex5.reciprocal();
      complex7.atan();
      Complex complex14 = complex4.divide(complex11);
      complex9.tan();
      Complex.valueOf(1465.440544552799, (-644.876803));
      complex14.subtract(1.6861720085144043);
      complex14.pow(complex8);
      complex0.acos();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.createComplex(2678.569522428385, 2678.569522428385);
      complex2.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = (Complex)complex1.ONE.readResolve();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.NaN;
      complex4.I.readResolve();
      Complex complex7 = complex2.acos();
      Complex complex8 = Complex.INF;
      complex0.subtract(complex8);
      complex7.INF.divide((-644.876803));
      complex4.ONE.hashCode();
      complex5.divide(2678.569522428385);
      Complex complex9 = new Complex((-644.876803), (-644.876803));
      complex5.sqrt1z();
      Complex complex10 = complex6.reciprocal();
      complex10.ZERO.atan();
      Complex complex11 = complex7.divide(complex5);
      complex7.tan();
      Complex.valueOf(0.14285714285714285, 6.283185307179586);
      complex2.subtract(0.14285714285714285);
      complex11.pow(complex3);
      complex7.acos();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-315.4749), (-315.4749));
      complex0.I.subtract(complex1);
      Complex complex2 = Complex.I;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.cosh();
      complex1.NaN.createComplex(1.0, 1.0);
      Complex complex2 = complex1.ONE.asin();
      complex2.I.tan();
      Complex complex3 = complex2.I.pow(1.0);
      complex0.NaN.sqrt();
      Complex complex4 = Complex.valueOf((-893.91815953), 1.0233519853128553E-7);
      complex4.hashCode();
      complex0.getReal();
      Complex.valueOf(0.0, 1.0);
      complex0.subtract(complex1);
      complex2.multiply(1.0);
      Complex complex5 = Complex.valueOf(1.0, (-2548.7));
      complex0.tanh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex(1.0, (-1667.98459073));
      complex7.hashCode();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex3.pow(complex5);
      Complex complex10 = complex0.acos();
      complex10.add(complex9);
      complex9.subtract(6.123233995736766E-17);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.4616672175682191E240);
      complex0.nthRoot(1410);
      Complex complex1 = complex0.createComplex(1.4616672175682191E240, (-1.0));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.NaN.add(6.283185307179586);
      complex3.NaN.subtract(complex2);
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = complex2.I.conjugate();
      complex5.subtract(complex4);
      complex1.NaN.hashCode();
      complex0.subtract(complex1);
      Complex complex6 = complex0.multiply((-1.0));
      Complex complex7 = complex6.INF.multiply((-1.0));
      complex6.I.abs();
      complex1.multiply(complex6);
      complex7.ONE.pow((double) 1410);
      complex6.ZERO.readResolve();
      Complex complex8 = complex6.INF.add(2548.7);
      Complex complex9 = complex8.I.conjugate();
      complex9.NaN.getArgument();
      Complex complex10 = complex7.I.divide(complex4);
      complex10.I.createComplex(1.4616672175682191E240, 2.0);
      complex2.subtract((double) 1410);
      Complex complex11 = complex7.exp();
      Complex.valueOf(5.2364136172269755E-8, 2548.7);
      complex2.acos();
      Complex complex12 = complex2.tan();
      complex11.conjugate();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.380286345847567E70), (-2.325147219074669E-10));
      Complex complex1 = complex0.ONE.multiply((-2.325147219074669E-10));
      complex0.sqrt();
      Complex complex2 = complex0.add((-863.28589213));
      complex0.abs();
      Complex complex3 = complex2.divide((-2.380286345847567E70));
      complex3.toString();
      Complex complex4 = complex2.createComplex(2084.06, (-863.28589213));
      complex4.ONE.acos();
      Complex complex5 = complex0.INF.divide((-2.380286345847567E70));
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex2.asin();
      complex4.I.sin();
      complex7.INF.tan();
      complex7.abs();
      complex7.INF.abs();
      complex2.equals(complex1);
      complex2.tan();
      complex4.sinh();
      Complex complex8 = Complex.valueOf(162.74890505283696);
      Complex complex9 = complex3.divide(complex8);
      complex9.ONE.add(complex6);
      complex9.createComplex(2.0, 2084.06);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.divide(1.0);
      complex0.ZERO.hashCode();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ONE.conjugate();
      Complex complex6 = complex2.NaN.sqrt();
      complex6.divide(complex1);
      complex4.NaN.getField();
      complex0.NaN.pow((-8.932562616338982));
      complex1.toString();
      complex2.ZERO.multiply((-3418));
      Complex complex7 = complex2.pow(1.0);
      complex7.tanh();
      Complex complex8 = complex3.tan();
      try { 
        complex8.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1179.7848299));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.divide((-1179.7848299));
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.NaN.sin();
      complex5.INF.hashCode();
      complex5.ZERO.readResolve();
      Complex complex7 = complex2.divide((-7.877917738262007E-9));
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = Complex.ZERO;
      complex3.equals(complex9);
      Complex.valueOf((-1179.7848299), (-7.877917738262007E-9));
      Complex complex10 = complex8.exp();
      complex0.hashCode();
      complex6.subtract(complex7);
      Complex complex11 = Complex.I;
      Complex complex12 = complex2.atan();
      Complex complex13 = Complex.valueOf(2.3810978455418157, 386.5106888639);
      complex13.tanh();
      Complex complex14 = Complex.NaN;
      complex10.hashCode();
      Complex complex15 = Complex.ONE;
      complex10.pow(complex12);
      Complex complex16 = Complex.INF;
      complex16.acos();
      complex16.isInfinite();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1179.7848299));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.divide((-1179.7848299));
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.NaN.sin();
      complex5.INF.hashCode();
      complex5.ZERO.readResolve();
      Complex complex7 = complex2.divide((-7.877917738262007E-9));
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = Complex.ZERO;
      complex3.equals(complex9);
      Complex.valueOf((-1179.7848299), (-7.877917738262007E-9));
      complex8.exp();
      complex0.hashCode();
      complex6.subtract(complex7);
      Complex complex10 = Complex.I;
      complex2.atan();
      Complex complex11 = Complex.valueOf(2.3810978455418157, 386.5106888639);
      complex11.tanh();
      Complex complex12 = Complex.NaN;
      // Undeclared exception!
      complex11.nthRoot(2048909197);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2405.7203, Double.POSITIVE_INFINITY);
      complex0.subtract(6.283185307179586);
      Complex complex2 = Complex.INF;
      complex2.cos();
      complex0.tan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1179.7848299));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.divide((-1179.7848299));
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.NaN.sin();
      complex5.INF.hashCode();
      complex5.ZERO.readResolve();
      Complex complex7 = complex2.divide((-7.877917738262007E-9));
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = Complex.ZERO;
      complex3.equals(complex9);
      Complex complex10 = Complex.valueOf((-1179.7848299), (-7.877917738262007E-9));
      Complex complex11 = complex8.exp();
      complex0.hashCode();
      complex6.subtract(complex7);
      Complex complex12 = Complex.I;
      Complex complex13 = complex2.atan();
      Complex complex14 = Complex.valueOf(2.3810978455418157, 386.5106888639);
      complex14.tanh();
      Complex complex15 = Complex.NaN;
      complex11.hashCode();
      Complex complex16 = Complex.ONE;
      complex11.pow(complex13);
      Complex complex17 = Complex.INF;
      complex17.acos();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(648);
      Complex complex4 = complex1.subtract(967.0);
      complex1.readResolve();
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.pow((-2548.7));
      Complex complex8 = complex2.subtract(complex4);
      complex0.hashCode();
      Complex complex9 = complex3.add((double) 361);
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.INF;
      complex11.subtract(complex12);
      complex12.getField();
      complex10.reciprocal();
      complex4.atan();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex12.divide(complex9);
      complex12.tan();
      complex14.sin();
      complex12.reciprocal();
      Complex.valueOf(729.5631466962903, 729.5631466962903);
      complex14.subtract((double) 361);
      complex8.conjugate();
      Complex complex15 = complex12.tan();
      complex15.cos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-1.249628759599122));
      complex0.NaN.getField();
      Complex complex1 = Complex.valueOf((-1.249628759599122));
      complex0.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.multiply(361);
      Complex complex6 = complex3.subtract(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex7 = complex5.acos();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.pow(2591.0);
      Complex complex10 = complex3.subtract(complex9);
      complex3.hashCode();
      complex8.divide(2591.0);
      complex0.add((-2677.175569));
      Complex complex11 = complex6.sqrt1z();
      complex8.getField();
      complex8.reciprocal();
      Complex complex12 = complex4.atan();
      Complex complex13 = Complex.INF;
      complex7.divide(complex8);
      complex5.tan();
      complex10.sin();
      complex11.reciprocal();
      complex9.subtract((-644.876803));
      complex2.conjugate();
      complex3.tan();
      complex12.cos();
      complex10.tan();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(305.7315119, 305.7315119);
      Complex complex2 = complex1.tan();
      complex0.multiply(305.7315119);
      Complex.valueOf(6.283185307179586, (-1.0));
      Complex complex3 = Complex.valueOf((-516.331), Double.POSITIVE_INFINITY);
      complex3.reciprocal();
      Complex.valueOf((-1.9821451970481713E-7), 143.5472172252);
      complex3.hashCode();
      Complex complex4 = Complex.I;
      complex2.subtract(complex4);
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.atan();
      Complex complex7 = Complex.valueOf(6.283185307179586, (-516.331));
      Complex complex8 = complex6.tanh();
      Complex complex9 = Complex.NaN;
      complex8.hashCode();
      Complex complex10 = Complex.ONE;
      complex7.pow(complex8);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(648);
      complex0.ONE.getArgument();
      Complex complex3 = complex1.subtract((-2548.7));
      complex2.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex((-2548.7), Double.NaN);
      Complex complex6 = complex1.pow(Double.NaN);
      complex4.subtract(complex0);
      complex0.hashCode();
      Complex complex7 = complex4.divide((-2548.7));
      Complex complex8 = complex4.add(1.5707963267948966);
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex5.subtract(complex7);
      complex6.getField();
      complex9.reciprocal();
      Complex complex11 = complex7.atan();
      Complex complex12 = Complex.INF;
      complex10.divide(complex7);
      complex8.tan();
      Complex complex13 = complex2.sin();
      Complex complex14 = complex13.reciprocal();
      complex14.NaN.conjugate();
      Complex complex15 = Complex.valueOf(488.803134611091, Double.NaN);
      complex15.subtract((double) 363);
      complex11.conjugate();
      complex14.tan();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1273.9, 1273.9);
      complex0.ONE.cosh();
      Complex complex1 = new Complex(1273.9, 1273.9);
      complex0.NaN.add(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.createComplex(2732.75, 2732.75);
      complex3.ONE.getField();
      complex2.toString();
      Complex complex4 = complex0.log();
      complex4.NaN.atan();
      complex1.INF.atan();
      Complex complex5 = Complex.valueOf(1273.9, 1273.9);
      complex5.ONE.cosh();
      Complex complex6 = complex5.I.conjugate();
      complex6.ONE.subtract(1273.9);
      Complex.valueOf(1273.9, 1273.9);
      complex1.exp();
      Complex complex7 = complex5.ZERO.reciprocal();
      complex7.createComplex(1273.9, 1273.9);
      try { 
        complex5.nthRoot((-498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -498
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(648);
      Complex complex3 = complex1.subtract((-2548.7));
      complex2.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.pow(Double.NaN);
      complex4.subtract(complex0);
      complex0.hashCode();
      Complex complex7 = complex4.divide((-2548.7));
      Complex complex8 = complex4.add(1.5707963267948966);
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex5.subtract(complex7);
      complex6.getField();
      complex9.reciprocal();
      Complex complex11 = complex7.atan();
      Complex complex12 = Complex.INF;
      complex10.divide(complex7);
      Complex complex13 = complex8.tan();
      Complex complex14 = complex2.sin();
      Complex complex15 = complex14.reciprocal();
      Complex complex16 = Complex.valueOf(488.803134611091, Double.NaN);
      complex16.subtract((double) 361);
      Complex complex17 = complex11.conjugate();
      complex15.tan();
      complex13.cos();
      complex17.tan();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(4.2035646586788297E-246);
      Complex complex2 = complex1.conjugate();
      complex1.sinh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.multiply((-2226.422289018));
      Complex complex6 = Complex.valueOf((-2226.422289018), (-2226.422289018));
      Complex complex7 = complex6.tan();
      complex0.negate();
      complex7.sin();
      Complex complex8 = complex7.multiply(complex6);
      complex8.toString();
      complex3.createComplex((-2226.422289018), 0.0);
      Complex complex9 = new Complex(6.283185307179586, 6.283185307179586);
      complex9.multiply(complex0);
      Complex complex10 = Complex.ONE;
      Complex.valueOf(4.2035646586788297E-246);
      complex2.cos();
      complex5.I.cosh();
      complex5.ZERO.atan();
      Complex complex11 = Complex.NaN;
      Object object0 = new Object();
      Complex complex12 = complex5.divide(complex8);
      complex12.exp();
      Complex.valueOf(763.544978);
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf((-487.2847162137));
      complex2.multiply((-509.7478));
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.sin();
      Complex complex6 = Complex.valueOf(0.7853981808265376);
      Complex complex7 = complex1.multiply(complex6);
      complex7.toString();
      Complex complex8 = complex5.createComplex(0.7853981808265376, 0.7853981808265376);
      complex1.multiply(complex4);
      Complex complex9 = new Complex(2.0, (-509.7478));
      complex9.exp();
      complex1.cos();
      complex8.readResolve();
      complex9.divide(complex5);
      complex3.exp();
      Complex.valueOf((-487.2847162137));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.cos();
      complex1.isInfinite();
      complex1.asin();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.ONE.acos();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.ONE.conjugate();
      complex7.NaN.getField();
      Complex complex9 = complex7.ONE.pow((-702.7956986500502));
      Complex complex10 = Complex.valueOf(2002.684, Double.NaN);
      complex10.add(Double.NaN);
      Complex complex11 = Complex.valueOf(Double.NaN, (-3318.87));
      Complex complex12 = complex11.I.log();
      complex11.I.divide(complex0);
      Complex complex13 = complex4.add(1.0);
      complex11.INF.nthRoot(94);
      complex2.tan();
      complex5.getField();
      complex9.equals(complex1);
      complex12.log();
      complex6.INF.getField();
      complex0.subtract(complex2);
      complex5.ZERO.log();
      complex13.toString();
      complex5.negate();
      complex10.acos();
      complex6.asin();
      complex8.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(901.3);
      Complex complex1 = new Complex((-1.9821451970481713E-7));
      complex0.INF.multiply(192);
      Complex complex2 = Complex.valueOf((-1.9821451970481713E-7), 901.3);
      complex2.NaN.subtract(complex1);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.cos();
      complex5.NaN.hashCode();
      complex5.multiply((-1));
      complex1.sqrt1z();
      complex4.reciprocal();
      complex1.toString();
      complex3.I.nthRoot(815);
      complex1.abs();
      Complex complex6 = complex0.ZERO.sqrt1z();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.ZERO.sinh();
      complex8.ZERO.negate();
      complex0.sqrt1z();
      complex7.exp();
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      complex3.negate();
      complex3.readResolve();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-35.171220037831), (-35.171220037831));
      complex0.I.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex0.ZERO.multiply((-389));
      complex2.ONE.negate();
      complex0.readResolve();
      complex2.cos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-509.7478), (-509.7478));
      Complex complex1 = new Complex(0.7071067811865476, 0.05970507860183716);
      Complex complex2 = complex1.tan();
      complex2.multiply(0.7071067811865476);
      Complex complex3 = Complex.valueOf(0.7071067811865476, 270.01372853634);
      complex0.reciprocal();
      Complex complex4 = Complex.valueOf((-2539.005066676646), (-509.7478));
      complex3.hashCode();
      complex3.subtract(complex2);
      Complex complex5 = Complex.I;
      complex5.atan();
      Complex.valueOf((-354.444369), 2.3810978455418157);
      complex5.tanh();
      Complex complex6 = Complex.NaN;
      complex5.hashCode();
      Complex complex7 = Complex.ONE;
      complex7.pow(complex4);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.createComplex(2678.0437033026, 2678.0437033026);
      complex1.ONE.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.I.multiply(2678.0437033026);
      complex4.divide((-644.876803));
      Complex complex5 = complex3.asin();
      Complex complex6 = complex3.ZERO.sqrt1z();
      Complex complex7 = complex6.I.multiply(361);
      complex7.INF.subtract(Double.NaN);
      complex3.I.readResolve();
      Complex complex8 = complex2.acos();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.NaN.pow((double) 361);
      Complex complex11 = complex0.subtract(complex9);
      complex3.ONE.hashCode();
      Complex complex12 = complex5.divide(2678.0437033026);
      complex12.NaN.add((-644.876803));
      Complex complex13 = complex5.sqrt1z();
      complex13.INF.subtract(complex2);
      complex10.getField();
      Complex complex14 = complex6.reciprocal();
      Complex complex15 = complex14.ZERO.atan();
      Complex complex16 = Complex.INF;
      complex8.divide(complex16);
      complex8.tan();
      complex10.sin();
      complex8.reciprocal();
      complex3.subtract(2678.0437033026);
      complex11.conjugate();
      complex3.tan();
      Complex complex17 = complex15.cos();
      complex17.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.ZERO.exp();
      complex4.ONE.divide(0.8813735870195428);
      complex2.NaN.nthRoot(821);
      Complex complex5 = complex0.add(2037.9544723523);
      Complex complex6 = complex5.negate();
      complex3.isNaN();
      complex5.cos();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.ZERO.divide(2037.9544723523);
      Complex complex9 = complex5.acos();
      complex9.NaN.getArgument();
      complex2.sin();
      complex2.conjugate();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex0.ZERO.add(complex2);
      Complex complex4 = complex2.createComplex(0.38308101892471313, 0.8813735870195428);
      complex4.I.divide((-1567.3322997843602));
      Complex complex5 = Complex.valueOf(-0.0);
      complex5.ZERO.asin();
      complex4.INF.getArgument();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.ZERO.add(complex0);
      complex7.NaN.createComplex((-20.0), 3262.875315359347);
      complex0.isNaN();
      Complex complex8 = complex3.divide(24.99559009293974);
      Complex complex9 = complex0.divide((-1185.7505113536));
      Complex complex10 = complex1.divide(complex4);
      Complex complex11 = complex10.ZERO.reciprocal();
      complex11.NaN.multiply(0.38308101892471313);
      complex8.log();
      complex2.add(complex9);
      complex9.createComplex(0.42893588515301007, (-20.0));
      complex2.createComplex(3654.1, 24.99559009293974);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-35.171220037831), (-35.171220037831));
      complex0.I.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.multiply((-389));
      complex3.I.createComplex((-35.171220037831), (-389));
      Complex complex4 = complex2.ONE.negate();
      complex4.sin();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ONE;
      complex1.nthRoot(1816);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
      complex0.getArgument();
      Complex complex1 = new Complex(Double.NaN, 20.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.multiply(Double.NaN);
      complex1.abs();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.multiply(437970.33781435015);
      complex3.add(complex2);
      complex4.pow((-1.0));
      complex5.getArgument();
      complex2.atan();
      complex0.abs();
      complex4.reciprocal();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(6.283185307179586);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.cosh();
      complex3.I.multiply((-703.7));
      Complex complex4 = complex3.ZERO.tan();
      complex4.INF.negate();
      Complex complex5 = complex2.sin();
      complex2.multiply(complex0);
      complex1.ONE.toString();
      complex0.reciprocal();
      Complex complex6 = Complex.valueOf((-703.7), 239.2119398894);
      complex6.hashCode();
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.subtract(complex7);
      complex5.atan();
      Complex.valueOf(239.2119398894, (-703.7));
      complex8.tanh();
      Complex complex9 = Complex.NaN;
      complex3.hashCode();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.ZERO;
      complex8.pow(complex11);
      Complex complex12 = complex6.acos();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.NaN.multiply(complex0);
      complex0.readResolve();
      Complex complex3 = complex1.divide(complex2);
      complex1.abs();
      Complex complex4 = complex3.multiply(0.7615941559557649);
      complex2.getImaginary();
      Complex complex5 = complex3.reciprocal();
      complex0.readResolve();
      complex4.divide(complex5);
      Complex complex6 = Complex.valueOf((-2121.66469));
      Object object0 = complex6.readResolve();
      complex1.equals(object0);
      Complex.valueOf(2425.5);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(5.294053246347931E-8);
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.sinh();
      complex0.getArgument();
      Complex complex2 = new Complex(5.294053246347931E-8, 0.0);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.ONE.multiply((-1.9821451970481713E-7));
      Complex complex5 = new Complex((-1211.3805132101513), 1.3006683896462346E-8);
      complex5.abs();
      complex3.tan();
      complex1.multiply(1211.3805132101513);
      Complex complex6 = complex0.add(complex5);
      complex0.pow(2403.0432331519);
      complex6.getArgument();
      complex1.atan();
      complex4.abs();
      complex5.reciprocal();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-509.7478), (-509.7478));
      Complex.valueOf((-509.7478), 0.9305076599121094);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf(24.9787932218);
      complex1.getField();
      Complex complex2 = complex0.sinh();
      complex1.getArgument();
      Complex complex3 = new Complex(0.0, (-4.691));
      complex1.tan();
      Complex complex4 = Complex.INF;
      complex4.multiply(56821.35218564993);
      complex4.abs();
      Complex complex5 = complex4.tan();
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex0.add(complex4);
      Complex complex6 = complex3.pow(4.214069215058856E-4);
      complex6.getArgument();
      complex4.atan();
      complex2.abs();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.reciprocal();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("PS87TyJs");
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex3.ONE.cosh();
      complex0.isInfinite();
      Complex.valueOf(Double.NaN);
      complex2.divide(Double.NaN);
      Complex complex4 = Complex.INF;
      complex4.multiply(Double.NaN);
      complex3.nthRoot(1800);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2184));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide(complex0);
      complex4.toString();
      complex2.reciprocal();
      Complex complex5 = Complex.valueOf((-56821.35218564993), (double) (-2184));
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.valueOf(0.0, (-844.0));
      complex7.hashCode();
      Complex complex8 = complex0.subtract(complex7);
      complex6.atan();
      Complex complex9 = new Complex(316.2421234951, 0.002075695800755284);
      complex9.tanh();
      complex0.pow(complex8);
      Complex complex10 = new Complex(1.42893588515301);
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.valueOf(20.0);
      complex1.equals("G*H'~e$9qMhnX");
      complex0.toString();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex4.subtract(complex1);
      complex3.cosh();
      complex3.isInfinite();
      complex5.getField();
      complex0.subtract((-6.714376022102489E279));
      Complex complex6 = Complex.ONE;
      complex6.hashCode();
      complex6.getImaginary();
      complex1.getImaginary();
      complex6.atan();
      complex0.hashCode();
      complex6.atan();
      complex2.getField();
      Complex complex7 = Complex.valueOf((-6.714376022102489E279), (-6.714376022102489E279));
      Complex complex8 = complex7.conjugate();
      complex6.asin();
      complex8.acos();
      complex1.getArgument();
      complex8.divide(292.966738);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.getImaginary();
      double double0 = 0.0;
      complex0.multiply(1.0);
      complex0.negate();
      Complex complex1 = complex0.tanh();
      complex1.sqrt();
      complex1.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(5.294053246347931E-8);
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.sinh();
      complex0.getArgument();
      Complex complex2 = new Complex(5.294053246347931E-8, 0.0);
      Complex complex3 = complex2.ZERO.tan();
      complex1.ONE.multiply((-1.9821451970481713E-7));
      Complex complex4 = Complex.valueOf(2.0, (-20.0));
      complex4.reciprocal();
      Complex complex5 = Complex.valueOf(239.2119398894, (-20.0));
      complex3.hashCode();
      complex0.subtract(complex2);
      complex3.atan();
      Complex complex6 = Complex.valueOf((-20.0), 0.5947071313858032);
      complex6.tanh();
      Complex complex7 = Complex.NaN;
      complex7.ZERO.hashCode();
      Complex complex8 = Complex.ONE;
      complex7.pow(complex8);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.negate();
      Complex complex2 = complex0.tanh();
      complex2.ONE.sqrt();
      complex2.ZERO.atan();
      Complex complex3 = Complex.NaN;
      complex2.add(complex3);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = Complex.valueOf(0.9305076599121094);
      complex4.isInfinite();
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.pow(complex5);
      complex5.sinh();
      complex2.pow(complex1);
      complex1.subtract(20.0);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("PS87TyJs");
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex3.ONE.cosh();
      complex0.isInfinite();
      complex0.getField();
      complex0.ONE.subtract(4784.798241729747);
      complex0.hashCode();
      complex0.getImaginary();
      complex1.getImaginary();
      Complex complex5 = complex2.cos();
      complex5.negate();
      complex5.readResolve();
      Complex complex6 = Complex.valueOf(4784.798241729747, 1.1752011936438014);
      complex6.divide(complex5);
      Complex complex7 = Complex.I;
      complex7.abs();
      complex6.multiply(1.1752011936438014);
      complex0.getImaginary();
      Complex complex8 = Complex.valueOf(1.0, (-8.757272519238786E-9));
      complex8.reciprocal();
      complex1.readResolve();
      complex6.divide(complex7);
      Complex complex9 = Complex.valueOf(1.1752011936438014, 0.9999998951270247);
      complex9.equals((Object) null);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(6.283185307179586);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.multiply((-703.7));
      Complex complex6 = complex4.ZERO.tan();
      Complex complex7 = complex6.INF.negate();
      complex3.sin();
      Complex complex8 = complex3.multiply(complex0);
      complex1.ONE.toString();
      complex1.ONE.createComplex(6.283185307179586, 0.0);
      complex1.multiply(complex8);
      complex1.atan();
      complex2.hashCode();
      Complex complex9 = complex8.atan();
      complex1.getField();
      complex0.conjugate();
      complex7.asin();
      complex6.acos();
      complex5.getArgument();
      complex9.divide(1136.468021802684);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex.valueOf(1.1886897087097168);
      Complex complex1 = complex0.divide((-1.0));
      complex1.multiply(1433.314016612348);
      complex1.nthRoot(1800);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.sqrt1z();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf((-1.0), 1131.22);
      Complex complex3 = complex2.reciprocal();
      complex1.nthRoot(1754);
      Complex complex4 = complex1.log();
      complex1.getArgument();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.subtract(complex3);
      complex2.abs();
      Complex complex6 = complex4.pow((double) 1);
      Complex complex7 = complex3.multiply(1754);
      complex7.atan();
      complex2.cos();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.6745327333941766);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = Complex.NaN;
      complex2.sqrt1z();
      complex0.hashCode();
      Complex complex3 = complex1.reciprocal();
      try { 
        complex3.nthRoot((-435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -435
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2184));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.divide(complex1);
      complex0.toString();
      Complex complex5 = complex0.reciprocal();
      Complex.valueOf(670.6, 2017.39449006);
      Complex complex6 = complex3.reciprocal();
      Complex.valueOf((double) (-2184), 1973.0);
      complex5.hashCode();
      Complex complex7 = Complex.I;
      complex7.subtract(complex2);
      Complex complex8 = complex4.atan();
      complex6.tanh();
      Complex complex9 = Complex.valueOf((-1.1253822296423454E-15), 1.0);
      Complex complex10 = new Complex(20.0);
      complex9.pow(complex10);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(0.296916663646698, (-4288.63744871));
      complex2.getImaginary();
      complex1.getImaginary();
      Complex complex3 = complex1.atan();
      complex3.hashCode();
      Complex complex4 = complex3.atan();
      complex4.getField();
      complex1.conjugate();
      complex4.asin();
      Complex complex5 = complex0.acos();
      complex3.getArgument();
      Complex complex6 = Complex.I;
      complex6.divide(Double.NaN);
      complex5.asin();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 574.718669);
      Complex complex1 = Complex.NaN;
      complex1.INF.toString();
      Complex complex2 = complex1.I.add(complex0);
      complex2.sqrt1z();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.divide(574.718669);
      complex4.NaN.getArgument();
      complex3.ZERO.acos();
      complex0.ONE.acos();
      complex0.I.getArgument();
      complex0.getImaginary();
      complex0.getField();
      complex1.readResolve();
      complex3.add(171.63977618);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.NaN.log();
      complex3.NaN.abs();
      Complex complex4 = complex3.INF.subtract(173.53072819);
      Complex complex5 = complex1.add(complex0);
      complex0.readResolve();
      Complex complex6 = complex0.atan();
      complex1.multiply(complex0);
      complex6.pow(2894.486292843433);
      Complex complex7 = complex1.cos();
      complex7.getArgument();
      Complex complex8 = complex1.add((-2.7527887552743672E-8));
      complex8.tanh();
      complex0.sqrt();
      complex6.reciprocal();
      complex5.conjugate();
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0256131352582533E261, 1.0256131352582533E261);
      Complex complex1 = complex0.ONE.divide(1.0256131352582533E261);
      Complex complex2 = complex1.ZERO.sinh();
      complex2.INF.sin();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex3.ONE.exp();
      complex4.NaN.subtract(1.0256131352582533E261);
      complex4.atan();
      complex0.nthRoot(3827);
      Complex.valueOf((double) 3827, (double) 3827);
      complex2.readResolve();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.NaN.add(complex0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.sqrt();
      complex4.ZERO.atan();
      Complex complex5 = complex4.createComplex(2542.61779, (-1480.0008087));
      complex3.asin();
      complex5.toString();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex1.ZERO.toString();
      complex1.I.add(0.0);
      complex1.ZERO.toString();
      Complex complex2 = complex0.INF.multiply(2143);
      complex2.I.createComplex(2143, 1.2167897656061312E23);
      complex0.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.sinh();
      complex4.NaN.atan();
      complex4.asin();
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.acos();
      Complex.valueOf(0.0);
      complex1.NaN.pow(0.0);
      complex4.I.conjugate();
      complex2.ZERO.add(0.0);
      complex2.createComplex((-29.9), 0.0);
      complex0.isNaN();
      Complex complex5 = complex2.cosh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.subtract(complex0);
      complex3.createComplex(0.0, 0.0);
      complex2.I.divide(complex1);
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = complex1.subtract((-1585.0));
      complex5.INF.readResolve();
      complex0.NaN.atan();
      complex5.I.sqrt();
      complex0.getReal();
      complex5.getImaginary();
      Complex complex6 = complex0.negate();
      complex6.ZERO.nthRoot(1355);
      complex4.conjugate();
      complex1.tan();
      complex0.acos();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.negate();
      Complex complex2 = complex0.tanh();
      complex2.ONE.sqrt();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = Complex.NaN;
      complex2.add(complex4);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = Complex.valueOf(0.9305076599121094);
      complex5.isInfinite();
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.pow(complex6);
      complex6.sinh();
      complex2.pow(complex7);
      complex3.subtract(0.9305076599121094);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1910.12941), 1.080835500478704E-8);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.I.cosh();
      complex2.INF.createComplex(1.080835500478704E-8, 0.0);
      complex3.I.abs();
      complex0.ZERO.abs();
      complex0.toString();
      complex2.sqrt1z();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.tanh();
      Complex complex1 = Complex.valueOf((-120.26193439944));
      Complex complex2 = Complex.valueOf((-120.26193439944), (-3.356118100840571E-7));
      Complex complex3 = complex2.NaN.exp();
      complex0.ZERO.getField();
      Complex complex4 = complex0.subtract(2376.041934165477);
      complex4.ONE.sinh();
      Complex complex5 = complex4.INF.negate();
      complex5.NaN.log();
      complex5.NaN.acos();
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex6.NaN.pow(complex4);
      Complex complex8 = complex2.pow((-120.26193439944));
      complex3.sqrt();
      Complex complex9 = complex8.add(Double.NaN);
      complex6.I.multiply((-905));
      complex9.ONE.pow((-2134.5191815281714));
      complex8.getReal();
      complex7.toString();
      Complex complex10 = complex1.tan();
      complex6.log();
      complex8.ONE.sqrt();
      Complex complex11 = complex0.asin();
      complex11.NaN.tan();
      complex11.NaN.getField();
      complex8.add(complex3);
      complex4.readResolve();
      Complex complex12 = complex2.sqrt();
      complex12.sqrt1z();
      complex8.isInfinite();
      complex10.pow((-120.26193439944));
      Complex.valueOf(4.702582781813407E-251);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex3.INF.divide(complex1);
      complex0.INF.toString();
      Complex complex5 = complex0.reciprocal();
      Complex.valueOf(670.6, (-1.0));
      complex5.INF.reciprocal();
      Complex.valueOf(0.0, 1.0);
      complex2.hashCode();
      Complex complex6 = complex3.subtract(complex1);
      complex4.atan();
      complex6.tanh();
      complex6.pow(complex2);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.I.tan();
      complex0.NaN.multiply(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.subtract(4282.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.cosh();
      complex5.I.sinh();
      complex0.tan();
      Complex complex6 = complex4.negate();
      Complex.valueOf((-1429.181783));
      complex2.acos();
      complex6.divide((-1429.181783));
      complex1.multiply(4282.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3054.3431938052963));
      Complex complex1 = complex0.tanh();
      complex1.I.add(0.0);
      complex1.subtract(complex0);
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.subtract(7.126414081261746E-168);
      complex3.readResolve();
      complex2.hashCode();
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.I.createComplex((-2195.031897), (-2195.031897));
      complex7.ONE.abs();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.subtract(complex1);
      complex6.I.exp();
      Complex complex10 = complex9.atan();
      complex5.multiply((-2195.031897));
      Complex complex11 = complex0.subtract(complex1);
      complex3.NaN.multiply(1.0);
      complex11.ZERO.cosh();
      complex1.INF.abs();
      Complex complex12 = complex10.multiply(0.0);
      complex12.log();
      complex12.NaN.subtract((-2195.031897));
      complex10.NaN.cosh();
      complex1.abs();
      complex4.conjugate();
      complex1.tanh();
      complex4.isNaN();
      complex7.sqrt1z();
      complex4.reciprocal();
      Object object0 = new Object();
      complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.divide(0.0);
      complex0.ONE.hashCode();
      complex0.multiply((-1380.047792564085));
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(9.39987974788905E-8, 1066.893);
      complex0.I.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.pow(9.39987974788905E-8);
      complex1.ZERO.negate();
      complex0.hashCode();
      Complex complex4 = complex0.acos();
      complex0.isNaN();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex5.NaN.pow(1066.893);
      complex6.ZERO.divide(2407.0901);
      Complex complex7 = complex1.negate();
      complex4.NaN.cos();
      Complex complex8 = complex7.multiply(1.5707963267948966);
      Complex complex9 = complex0.ZERO.sqrt1z();
      complex0.getImaginary();
      Complex complex10 = complex4.cos();
      complex10.INF.getField();
      complex1.getArgument();
      Complex complex11 = complex2.add((-2008.11417));
      complex11.ZERO.getField();
      complex7.add(complex4);
      complex2.multiply(1.5707963267948966);
      Complex complex12 = complex3.divide(complex9);
      complex12.ZERO.toString();
      Object object0 = new Object();
      complex11.equals(object0);
      complex3.sin();
      complex7.subtract(9.39987974788905E-8);
      complex7.multiply(2085);
      complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2184));
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex4 = complex1.log();
      complex0.getArgument();
      complex1.subtract(complex0);
      complex4.abs();
      Complex complex5 = complex1.pow(Double.NaN);
      complex5.multiply(1185);
      complex5.I.atan();
      complex0.cos();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.readResolve();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex0.sqrt();
      complex4.ZERO.hashCode();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.ZERO.atan();
      complex6.readResolve();
      complex2.isInfinite();
      Complex complex7 = complex1.cosh();
      complex7.ZERO.sqrt();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.I.conjugate();
      complex3.I.getArgument();
      complex9.ZERO.acos();
      complex0.readResolve();
      complex3.exp();
      complex8.NaN.atan();
      Complex complex10 = complex9.createComplex(Double.POSITIVE_INFINITY, 0.0354953333735466);
      complex10.subtract(0.0354953333735466);
      Complex complex11 = complex3.reciprocal();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 261.6344);
      Complex complex1 = complex0.cos();
      complex1.ZERO.subtract(complex0);
      complex1.INF.sqrt();
      Complex.valueOf(261.6344);
      complex0.getImaginary();
      complex0.ZERO.createComplex((-20.0), 261.6344);
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.multiply((-687.609));
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.log();
      int int0 = (-2243);
      try { 
        complex0.nthRoot((-2243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,243
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.nthRoot(4284);
      Complex complex1 = complex0.I.pow(6.283185307179586);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.I.pow(0.0);
      complex0.INF.sinh();
      Complex.valueOf(2232.3534, 0.0);
      complex3.getField();
      Complex complex5 = complex2.atan();
      complex2.I.cosh();
      Complex complex6 = complex4.asin();
      complex6.NaN.multiply(2232.3534);
      Complex complex7 = complex3.subtract(complex5);
      complex4.isNaN();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex2.sinh();
      complex6.subtract(complex1);
      complex9.getReal();
      complex8.atan();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("PS87TyJs");
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex3.ONE.cosh();
      complex0.isInfinite();
      complex0.getField();
      complex0.ONE.subtract(4784.798241729747);
      complex0.hashCode();
      complex0.getImaginary();
      complex1.getImaginary();
      Complex complex4 = complex3.atan();
      complex4.hashCode();
      Complex complex5 = complex4.atan();
      complex3.getField();
      complex4.conjugate();
      complex3.ONE.asin();
      complex4.INF.acos();
      complex4.getArgument();
      complex5.divide(298.7);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.asin();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt();
      complex2.divide((-563.978));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1897.79529), (-1897.79529));
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.ZERO.multiply(578);
      complex0.readResolve();
      complex4.NaN.cos();
      Complex complex5 = complex4.log();
      complex4.INF.sin();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex1.ONE.add(complex0);
      Complex complex8 = complex5.add(complex0);
      complex8.ONE.hashCode();
      Complex complex9 = complex8.NaN.asin();
      complex9.I.sin();
      complex6.NaN.getArgument();
      complex2.INF.negate();
      complex3.getArgument();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex6.multiply(complex7);
      Complex complex12 = complex11.pow((double) 578);
      complex12.ONE.acos();
      complex6.abs();
      complex4.ZERO.sin();
      Complex complex13 = Complex.ZERO;
      complex10.NaN.divide(complex13);
      Complex complex14 = complex3.multiply((-206));
      complex14.subtract((-20.0));
      complex3.multiply(complex10);
      complex5.getImaginary();
      complex8.createComplex(578, (-1897.79529));
      complex11.reciprocal();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.INF.add((-2792.376049629043));
      Complex complex3 = complex0.negate();
      complex1.NaN.negate();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.acos();
      complex5.ONE.cosh();
      Complex complex6 = complex1.divide(complex3);
      complex0.getImaginary();
      Complex complex7 = complex1.pow(complex4);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.I.sinh();
      complex9.NaN.getField();
      complex1.subtract(complex8);
      Complex complex10 = Complex.NaN;
      complex0.ZERO.sqrt();
      complex0.NaN.divide(complex1);
      complex6.equals(complex10);
      complex3.subtract((-1192.74460997272));
      complex7.cosh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(5.294053246347931E-8);
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.sinh();
      complex0.getArgument();
      Complex complex2 = new Complex(5.294053246347931E-8, 0.0);
      Complex complex3 = complex2.ZERO.tan();
      complex1.ONE.multiply((-1.9821451970481713E-7));
      complex3.ONE.abs();
      complex3.tan();
      complex2.ZERO.multiply(5.294053246347931E-8);
      Complex complex4 = complex0.add(complex2);
      complex1.pow(0.0);
      complex2.getArgument();
      Complex complex5 = complex1.atan();
      complex5.abs();
      complex4.reciprocal();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(6.283185307179586);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.cosh();
      complex3.I.multiply((-703.7));
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex4.INF.negate();
      complex2.sin();
      Complex complex6 = complex2.multiply(complex0);
      complex1.ONE.toString();
      Complex complex7 = complex1.ONE.createComplex(6.283185307179586, 0.0);
      Complex complex8 = complex1.multiply(complex6);
      complex0.ZERO.cos();
      Complex complex9 = complex1.negate();
      complex2.readResolve();
      Complex complex10 = complex2.I.divide(complex1);
      complex9.ZERO.abs();
      complex10.ONE.multiply(6.283185307179586);
      complex7.getImaginary();
      complex8.reciprocal();
      complex5.readResolve();
      complex4.divide(complex5);
      complex9.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex0.cos();
      complex2.I.pow(complex0);
      complex0.I.subtract(complex1);
      Complex complex3 = complex0.ZERO.cosh();
      complex0.getField();
      complex0.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ZERO.multiply(276.45228);
      complex5.negate();
      complex5.NaN.divide(complex1);
      complex4.I.add(0.0);
      Complex complex6 = complex0.negate();
      complex6.sinh();
      Complex complex7 = complex3.add(complex1);
      complex7.subtract(complex4);
      complex0.cosh();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-35.171220037831), (-35.171220037831));
      complex0.I.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex0.ZERO.multiply((-389));
      complex2.ONE.negate();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
      Complex complex1 = Complex.valueOf(0.0, 1148.417);
      Complex complex2 = complex1.ONE.cos();
      complex0.atan();
      Complex complex3 = Complex.valueOf(1148.417);
      complex3.toString();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      complex1.INF.add(0.0);
      Complex complex2 = complex0.ONE.multiply(0.0);
      complex0.abs();
      complex0.getField();
      Complex complex3 = complex0.reciprocal();
      complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex4.ZERO.pow(complex0);
      Complex complex5 = complex3.negate();
      complex2.sinh();
      Complex complex6 = Complex.INF;
      complex6.divide(complex2);
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex3.tan();
      complex8.NaN.multiply(complex7);
      complex8.add((-3.141592653589793));
      Complex complex9 = complex5.cosh();
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.cosh();
      complex1.NaN.createComplex(1.0, 1.0);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.I.pow(1.0);
      complex0.NaN.sqrt();
      Complex complex5 = Complex.valueOf((-893.91815953), 1.0233519853128553E-7);
      complex5.hashCode();
      complex0.getReal();
      Complex complex6 = Complex.valueOf(0.0, 1.0);
      complex0.subtract(complex1);
      complex2.multiply(1.0);
      Complex complex7 = complex3.exp();
      complex3.sqrt();
      Complex complex8 = complex4.pow((-1913.96493387273));
      complex8.ONE.multiply(complex7);
      Complex complex9 = complex3.divide(complex6);
      complex5.getReal();
      complex2.multiply((-1913.96493387273));
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      assertTrue(complex1.isInfinite());
      
      Complex complex2 = Complex.valueOf(6.283185307179586, 2.0);
      complex2.I.multiply(complex0);
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex6.NaN.subtract(2.0);
      Complex complex8 = complex4.ONE.asin();
      Complex complex9 = complex0.acos();
      Complex complex10 = Complex.valueOf(0.0, (-316.645372927));
      List<Complex> list0 = complex10.I.nthRoot(1334);
      assertEquals(1334, list0.size());
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      complex4.equals(complex9);
      Complex complex11 = complex3.cos();
      Complex complex12 = complex11.add(complex8);
      complex11.ZERO.abs();
      double double0 = complex11.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex11.getArgument();
      Complex complex13 = complex5.cosh();
      complex13.ONE.sin();
      complex13.getField();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex6));
      
      Object object0 = new Object();
      complex4.equals(object0);
      complex12.cosh();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex8.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex7));
      
      Complex complex14 = complex11.tan();
      assertSame(complex14, complex9);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.I.pow(complex3);
      assertTrue(complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getImaginary(), 0.01);
      
      Complex complex6 = complex4.multiply(complex1);
      assertFalse(complex4.isInfinite());
      
      complex1.exp();
      complex1.hashCode();
      Complex complex7 = complex2.divide(0.0);
      assertNotSame(complex7, complex2);
      assertTrue(complex7.equals((Object)complex5));
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      
      Complex complex8 = Complex.valueOf(0.0, (-2926.92491931314));
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals((-2926.92491931314), complex8.getImaginary(), 0.01);
  }
}
