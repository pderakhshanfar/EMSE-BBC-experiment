/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:05:39 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-2.44242319E-315));
      complex0.getField();
      Complex complex1 = complex0.sinh();
      complex0.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.sqrt();
      complex2.I.pow(204.96341216);
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.add(complex3);
      Object object0 = new Object();
      Complex complex7 = complex4.I.conjugate();
      complex6.equals("");
      complex1.divide(complex4);
      Complex complex8 = Complex.valueOf(3.141592653589793, 1433.314016612348);
      complex8.subtract(complex5);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.NaN;
      complex2.add(complex3);
      Object object0 = new Object();
      Complex complex5 = complex3.conjugate();
      complex5.equals("");
      Complex complex6 = complex4.divide(complex3);
      complex6.ONE.subtract(complex5);
      Complex complex7 = Complex.valueOf((-5.134437087949345), (-414.2318991954107));
      complex7.subtract(complex1);
      Complex complex8 = new Complex(2070.0, 70.0264);
      Complex complex9 = new Complex(2070.0, (-827.8073075));
      Complex complex10 = complex9.tan();
      complex3.abs();
      complex5.subtract(0.8152596799841477);
      Complex complex11 = complex1.multiply(3037);
      complex11.ONE.pow((-203.0));
      complex4.cos();
      complex11.nthRoot(3037);
      Complex complex12 = Complex.ONE;
      complex12.createComplex(2982.0, 3037);
      Complex.valueOf(2286.66900355097);
      complex10.createComplex((-2041.7), (-5.134437087949345));
      complex8.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex1.sin();
      Complex complex2 = Complex.NaN;
      complex0.add(complex2);
      Complex complex3 = Complex.ZERO;
      complex1.atan();
      complex3.nthRoot(3015);
      complex0.log();
      Complex complex4 = Complex.valueOf((double) 3015, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.multiply((double) 3015);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.multiply(complex5);
      complex4.multiply(3015);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex.valueOf(2183.38);
      complex1.getField();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.NaN.subtract((-1.6411525886171892E248));
      Complex complex5 = Complex.valueOf(908.2101941, (-1.6411525886171892E248));
      Complex complex6 = complex3.I.pow(complex4);
      complex5.ZERO.tanh();
      Complex complex7 = complex3.multiply(complex5);
      complex6.ZERO.getArgument();
      complex7.tanh();
      Complex complex8 = complex1.log();
      complex8.INF.getField();
      complex6.readResolve();
      complex3.cosh();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.pow((-1537.197573));
      Complex complex1 = new Complex((-1537.197573), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3500.04077), 1.9716943051755635E273);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.cos();
      complex2.getField();
      Complex complex4 = complex1.log();
      complex3.pow(complex2);
      Complex.valueOf((-3500.04077), (-3500.04077));
      complex3.sqrt();
      complex0.sqrt();
      Complex complex5 = complex0.negate();
      complex5.ZERO.multiply((-3500.04077));
      complex1.multiply(complex3);
      complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(1863.4377443969224);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(3024);
      Complex complex2 = Complex.valueOf((double) 3024);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.negate();
      complex4.abs();
      Complex complex6 = complex5.divide(complex0);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex7.sqrt();
      complex5.conjugate();
      Complex complex9 = complex8.sinh();
      Complex complex10 = new Complex(0.0);
      Complex complex11 = complex10.subtract(complex4);
      Complex complex12 = Complex.INF;
      complex11.add(complex12);
      complex9.tanh();
      Complex complex13 = complex5.reciprocal();
      Complex complex14 = Complex.I;
      Complex complex15 = Complex.valueOf(0.0, 1.723826394935661E-7);
      Complex complex16 = complex15.asin();
      Complex complex17 = complex16.pow((double) 3024);
      complex4.tan();
      complex13.multiply((-2260));
      complex17.tan();
      Complex complex18 = new Complex((-20.0));
      complex8.divide((-20.0));
      Complex.valueOf(2.5189146995544434);
      complex16.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      complex1.ZERO.multiply(4019);
      Complex complex2 = complex0.I.divide(complex0);
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.ONE.negate();
      complex2.INF.abs();
      Complex complex4 = complex0.ZERO.divide(complex0);
      Complex complex5 = complex0.multiply(complex0);
      Complex complex6 = complex4.sqrt();
      complex6.ZERO.conjugate();
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex7.ZERO.subtract(complex2);
      Complex complex9 = complex5.add(complex4);
      complex9.I.tanh();
      complex5.reciprocal();
      Complex complex10 = Complex.I;
      complex10.ONE.asin();
      complex0.pow(20.0);
      complex2.tan();
      complex6.multiply((-1781));
      complex8.tan();
      Complex complex11 = new Complex(1.4573285967670963E-107);
      complex11.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.valueOf((-46.71769));
      complex6.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-2.44242319E-315));
      complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sqrt();
      complex2.ZERO.sin();
      complex1.ONE.divide(complex0);
      complex2.nthRoot(3015);
      Complex complex3 = complex1.log();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.ONE.add(complex0);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.subtract(292.455);
      complex0.getArgument();
      Complex complex1 = complex0.multiply(1.6525336989036362E59);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1237.0721848981), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2540.5987599152, 2540.5987599152);
      complex0.sinh();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(3.794385569450774E-9, Double.NaN);
      Complex complex1 = complex0.sqrt();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(357.047044165);
      Complex complex1 = complex0.divide(357.047044165);
      complex1.ONE.acos();
      complex0.cosh();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.INF.reciprocal();
      complex0.NaN.conjugate();
      Complex complex4 = complex2.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex4.NaN.subtract((-1450.412398));
      Complex complex5 = complex4.INF.acos();
      complex5.ONE.cosh();
      Complex complex6 = complex4.ZERO.cosh();
      complex0.ZERO.multiply((-20.0));
      complex6.INF.abs();
      complex6.abs();
      Complex complex7 = complex0.divide(1.929433822631836);
      Complex complex8 = Complex.valueOf((-94.3), Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.asin();
      complex9.sinh();
      complex7.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(1.0);
      complex8.acos();
      Complex complex10 = Complex.valueOf(1.929433822631836);
      complex10.INF.negate();
      Complex.valueOf(357.047044165);
      complex3.add(82.1346812503725);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(3035);
      Complex complex2 = complex1.createComplex(3035, 230.18);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.nthRoot(1264);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      try { 
        complex1.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.ONE.abs();
      Complex complex1 = complex0.sinh();
      complex1.ZERO.log();
      complex0.pow(4.88484638E-315);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.I;
      complex1.pow(Double.POSITIVE_INFINITY);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add((-20.0));
      Complex complex3 = new Complex((-20.0), (-20.0));
      complex1.I.getField();
      complex3.divide(complex1);
      complex3.NaN.getField();
      complex1.subtract(complex2);
      Complex complex4 = complex3.tan();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add((-2747.1));
      complex2.divide(complex1);
      complex1.subtract(complex2);
      Complex complex3 = complex2.tan();
      complex0.nthRoot(4963);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-20.0));
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN, 9.186471222585239E-9);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(4215.87, (-1370302.6375861906));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5072.5938262556, 5072.5938262556);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply(Double.NaN);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = new Complex(5072.5938262556);
      complex0.divide(5072.5938262556);
      Complex complex7 = Complex.I;
      complex3.subtract(complex7);
      complex5.cosh();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(211.0, 211.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf(211.0, (-2379.922));
      complex5.ONE.log();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.log();
      Complex complex11 = complex10.INF.sqrt1z();
      complex11.ZERO.multiply(298);
      complex6.ZERO.add(complex9);
      complex1.I.sqrt1z();
      Complex complex12 = complex3.exp();
      complex7.acos();
      complex8.toString();
      complex6.abs();
      Complex.valueOf(20.0);
      complex0.reciprocal();
      complex12.NaN.abs();
      complex7.ONE.log();
      complex12.divide(0.5403023058681398);
      Complex complex13 = complex7.add(298.3990616607231);
      complex13.subtract(complex4);
      Object object0 = new Object();
      complex4.equals(object0);
      complex5.subtract(complex9);
      complex12.createComplex(20.0, 209.85399646);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.createComplex(4555.0791, 4555.0791);
      Complex complex4 = complex3.multiply(complex2);
      complex3.I.subtract(1170.599691434348);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.negate();
      complex1.readResolve();
      complex4.divide(complex6);
      Complex complex7 = new Complex(4555.0791);
      Complex complex8 = new Complex((-483.0));
      complex8.abs();
      Complex complex9 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(8.422373919843096E-10, (-20.0));
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.I.pow(complex0);
      Object object0 = complex3.readResolve();
      complex1.ZERO.sin();
      Complex complex6 = complex2.NaN.pow(complex4);
      complex1.equals(object0);
      Complex complex7 = complex2.ONE.cosh();
      complex2.getImaginary();
      complex4.NaN.subtract(complex5);
      Object object1 = new Object();
      Complex complex8 = complex6.ZERO.log();
      Complex complex9 = complex0.negate();
      complex0.INF.abs();
      complex7.NaN.readResolve();
      complex4.equals(object1);
      Complex complex10 = complex0.add(complex6);
      complex10.getField();
      complex3.conjugate();
      Object object2 = complex8.readResolve();
      complex6.equals(object2);
      complex2.add(complex7);
      complex0.subtract(complex9);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 6.283185307179586;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.valueOf(21.460287466329472, 21.460287466329472);
      complex4.cosh();
      Complex complex5 = complex0.multiply(1.2708985520400816E62);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.multiply(complex4);
      complex0.toString();
      Complex complex9 = complex6.createComplex((-20.0), 0.0);
      Complex complex10 = complex0.multiply(complex3);
      Complex complex11 = complex3.cos();
      complex11.negate();
      complex5.readResolve();
      complex10.divide(complex3);
      complex9.abs();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(6.283185307179586);
      complex0.conjugate();
      complex0.sinh();
      Complex.valueOf(6.283185307179586, 20.0);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex1 = complex0.log();
      complex0.add(251.8);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex2.subtract(complex1);
      complex3.tan();
      complex3.abs();
      complex1.multiply(1051);
      complex4.nthRoot(1777);
      Complex.valueOf((double) 1051, Double.NaN);
      complex1.sinh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(1.0);
      Complex complex2 = complex1.INF.createComplex(2.2272801399230957, (-872.1105724166));
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex1.ONE.createComplex(1021.0, 1.0);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex5.I.add(5.32048248832E11);
      Complex complex7 = complex4.I.log();
      Complex complex8 = complex0.atan();
      Complex.valueOf((-1.0), 1158.05969548);
      complex8.NaN.getArgument();
      complex0.NaN.getArgument();
      complex8.I.tanh();
      complex0.ZERO.toString();
      Complex complex9 = complex0.log();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex11.ONE.add(2.0);
      complex1.pow(688.49);
      Complex complex13 = complex7.add(complex2);
      complex13.sqrt();
      complex13.ONE.tanh();
      complex9.atan();
      complex7.pow(complex6);
      complex9.pow(complex7);
      complex10.divide(complex4);
      complex12.pow(5.32048248832E11);
      complex3.subtract((-3.141592653589793));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2144.741512139615));
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.sinh();
      complex1.getArgument();
      complex1.tan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.add(complex2);
      Object object0 = new Object();
      complex6.equals(complexField0);
      Complex.valueOf(1.1886897087097168);
      complex6.isInfinite();
      complex1.log();
      complex5.atan();
      complex4.tanh();
      Complex.valueOf(Double.NaN, 1.1886897087097168);
      Complex.valueOf(1244.0);
      Complex complex7 = complex1.log();
      complex6.add(complex7);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2054.393757835212, 2054.393757835212);
      Complex complex1 = new Complex(2054.393757835212, 2054.393757835212);
      complex1.NaN.getArgument();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.ZERO.add(complex1);
      complex2.ZERO.tanh();
      complex1.INF.sqrt();
      complex2.toString();
      complex3.ZERO.getField();
      complex3.ZERO.subtract(complex0);
      complex1.nthRoot(1276);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 266.8385021148444);
      Complex complex1 = complex0.subtract(266.8385021148444);
      complex1.conjugate();
      Complex.valueOf(266.8385021148444, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5072.5938262556, 5072.5938262556);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.multiply(Double.NaN);
      Complex complex3 = complex0.sin();
      complex3.INF.sqrt1z();
      complex3.NaN.sqrt1z();
      complex0.divide(5072.5938262556);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.NaN;
      complex2.getArgument();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.NaN;
      complex1.add(complex5);
      Object object0 = new Object();
      complex0.equals(complex4);
      Complex.valueOf(Double.NaN);
      complex4.isInfinite();
      complex3.atan();
      complex1.tanh();
      Complex.valueOf(1433.314016612348, 1433.314016612348);
      complex4.acos();
      Complex complex7 = Complex.ZERO;
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1026.17137);
      Complex complex1 = complex0.I.subtract(1026.17137);
      complex0.ONE.getField();
      Complex complex2 = complex0.cos();
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(0.7071067811865475);
      Complex complex4 = complex3.ONE.exp();
      complex3.I.exp();
      complex1.ONE.hashCode();
      complex0.ZERO.getArgument();
      complex0.readResolve();
      Complex complex5 = complex2.log();
      complex5.ONE.add(0.6664261817932129);
      Complex complex6 = complex0.pow(2.0);
      complex2.divide(complex1);
      Complex complex7 = complex6.subtract(complex1);
      Complex complex8 = complex7.tan();
      complex8.ZERO.abs();
      complex8.ZERO.multiply(1771);
      complex7.nthRoot(160);
      Complex complex9 = complex4.reciprocal();
      complex9.NaN.sinh();
      Complex complex10 = complex1.cos();
      complex10.sin();
      Complex complex11 = complex8.multiply(1026.17137);
      complex2.sin();
      complex6.NaN.getField();
      complex0.nthRoot(1784);
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(1026.17137);
      Complex complex1 = complex0.I.subtract(1026.17137);
      complex0.ONE.getField();
      Complex complex2 = complex0.cos();
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(0.7071067811865475);
      Complex complex4 = complex3.ONE.exp();
      complex3.I.exp();
      Complex complex5 = complex3.NaN.createComplex(1026.17137, 0.7071067811865475);
      complex5.ONE.hashCode();
      complex5.ZERO.getArgument();
      complex0.readResolve();
      Complex complex6 = complex2.log();
      complex6.ONE.add(0.6664261817932129);
      Complex complex7 = complex0.pow(0.0);
      complex2.divide(complex1);
      Complex complex8 = complex7.subtract(complex1);
      Complex complex9 = complex8.tan();
      complex9.ZERO.abs();
      complex9.ZERO.multiply(1777);
      complex8.nthRoot(160);
      Complex complex10 = complex4.reciprocal();
      complex10.NaN.sinh();
      // Undeclared exception!
      complex0.nthRoot(306374028);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(6.283185307179586);
      complex1.NaN.conjugate();
      complex0.sinh();
      Complex complex2 = Complex.valueOf(6.283185307179586, (-2771.207751905665));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2054.393757835212);
      Complex complex1 = new Complex(2054.393757835212, 2054.393757835212);
      complex1.NaN.getArgument();
      Complex complex2 = complex1.ONE.add(2054.393757835212);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.ZERO.add(complex1);
      complex1.INF.sqrt();
      complex4.toString();
      complex4.ZERO.getField();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      complex5.NaN.sin();
      Complex.valueOf(2054.393757835212);
      complex0.multiply(2054.393757835212);
      complex4.equals(complex0);
      complex3.isInfinite();
      complex2.sin();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.subtract((-736.9934682984218));
      complex1.pow(1054053.8519776776);
      Complex complex2 = complex0.divide(224.44701519173654);
      complex0.multiply(complex2);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.I.sinh();
      complex0.toString();
      Complex complex4 = complex1.divide(233.0);
      complex4.readResolve();
      complex0.isInfinite();
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = Complex.valueOf(20.0, 3.429465847404678E-129);
      complex7.ZERO.nthRoot(1942);
      complex0.ZERO.pow(20.0);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex3.multiply(complex8);
      complex2.I.exp();
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex0.multiply(complex2);
      Complex complex12 = complex11.INF.sinh();
      Complex complex13 = new Complex(1433.314016612348);
      complex12.INF.divide(complex13);
      complex12.abs();
      Complex complex14 = complex10.sqrt1z();
      complex14.getArgument();
      complex11.isNaN();
      Complex.valueOf(0.0);
      complex5.cos();
      complex5.ONE.log();
      complex14.sqrt();
      complex6.sqrt1z();
      complex11.pow((-1.0086206640289417));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(1026.17137);
      Complex complex1 = complex0.I.subtract(1026.17137);
      complex0.ONE.getField();
      Complex complex2 = complex0.cos();
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(0.7071067811865475);
      Complex complex4 = complex3.ONE.exp();
      complex3.I.exp();
      Complex complex5 = complex3.NaN.createComplex(1026.17137, 0.7071067811865475);
      complex5.ONE.hashCode();
      complex5.ZERO.getArgument();
      complex0.readResolve();
      Complex complex6 = complex2.log();
      complex6.ONE.add(0.6664261817932129);
      Complex complex7 = complex0.pow(2.0);
      complex2.divide(complex1);
      Complex complex8 = complex7.subtract(complex1);
      Complex complex9 = complex8.tan();
      complex9.ZERO.abs();
      complex9.ZERO.multiply(1777);
      complex8.nthRoot(160);
      Complex complex10 = complex4.reciprocal();
      complex10.NaN.sinh();
      Complex complex11 = complex1.cos();
      complex11.sin();
      Complex complex12 = complex9.multiply(1026.17137);
      complex2.sin();
      complex7.NaN.getField();
      complex0.nthRoot(1784);
      complex12.pow(0.7071067811865475);
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-2.44242319E-315));
      Complex complex2 = Complex.NaN;
      complex2.getField();
      Complex complex3 = complex1.sinh();
      complex1.getArgument();
      Complex complex4 = new Complex(1433.314016612348, 641.9241619419763);
      Complex complex5 = Complex.NaN;
      complex5.tan();
      Complex complex6 = Complex.I;
      complex6.sqrt();
      Complex.valueOf(641.9241619419763);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.add(complex4);
      Object object0 = new Object();
      complex0.equals("tz*I?(V[");
      Complex.valueOf(0.0);
      complex8.isInfinite();
      Complex complex9 = complex5.log();
      complex5.atan();
      complex4.tanh();
      Complex.valueOf((-1212.7401105257893), (-4406.303343682));
      complex9.acos();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.subtract(6.283185307179586);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.multiply(0.0);
      complex0.negate();
      Complex complex6 = complex5.sin();
      complex4.multiply(complex6);
      complex2.toString();
      Complex complex7 = complex3.createComplex(0.41421356237309515, 1.0);
      complex6.multiply(complex0);
      complex6.cos();
      complex5.negate();
      complex0.readResolve();
      Complex complex8 = complex1.divide(complex3);
      complex3.abs();
      Complex.valueOf(0.0, (-703.7));
      Complex complex9 = Complex.ZERO;
      complex8.atan();
      complex7.cos();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex.valueOf(2054.393757835212, 2054.393757835212);
      Complex complex0 = new Complex(2054.393757835212, 2054.393757835212);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.add(2054.393757835212);
      Complex complex2 = complex0.multiply(2145.9675);
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tanh();
      complex3.divide(Double.NaN);
      complex2.multiply(2145.9675);
      complex5.acos();
      complex4.nthRoot(1803);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.createComplex(Double.NaN, 0.0);
      complex0.multiply(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.negate();
      complex4.readResolve();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.divide(complex4);
      complex5.abs();
      Complex complex7 = complex6.multiply(2248.78968);
      complex2.atan();
      Complex complex8 = complex3.cos();
      complex8.log();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2054.393757835212, 2054.393757835212);
      Complex complex1 = new Complex(2054.393757835212, 2054.393757835212);
      complex1.NaN.getArgument();
      Complex complex2 = complex1.ONE.add(2054.393757835212);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.ZERO.add(complex1);
      complex1.INF.sqrt();
      complex4.toString();
      complex4.ZERO.getField();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      complex5.NaN.sin();
      Complex.valueOf(2054.393757835212);
      complex0.multiply(2054.393757835212);
      complex4.equals(complex0);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(2054.393757835212, 2054.393757835212);
      Complex complex1 = complex0.multiply(0.9820367578797864);
      Complex complex2 = Complex.valueOf((-2185.0));
      Complex complex3 = complex0.ZERO.sinh();
      complex3.NaN.add(complex1);
      complex2.NaN.sqrt1z();
      complex0.INF.sinh();
      Complex complex4 = complex0.reciprocal();
      complex4.cosh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2185));
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex4 = complex1.log();
      complex0.getArgument();
      Complex complex5 = complex1.subtract(complex0);
      complex4.abs();
      complex1.pow(Double.NaN);
      Complex complex6 = complex5.multiply(0.6916812658309937);
      complex6.getImaginary();
      Complex complex7 = complex0.reciprocal();
      complex1.readResolve();
      complex2.divide(complex6);
      complex3.log();
      complex2.createComplex(1.5707963267948966, 1.5707963267948966);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2184));
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex4 = complex1.log();
      complex0.getArgument();
      complex1.subtract(complex0);
      complex4.abs();
      Complex complex5 = complex1.pow(Double.NaN);
      complex5.multiply(1185);
      complex5.I.atan();
      complex0.cos();
      complex3.log();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.sqrt1z();
      complex2.INF.createComplex(0.0, 2.0);
      complex2.I.subtract(8.386000915905356E-7);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.createComplex((-1.3810978455418157), (-790.8392387268061));
      complex4.abs();
      complex3.abs();
      Complex complex5 = Complex.ZERO;
      complex5.toString();
      complex5.ONE.acos();
      try { 
        complex5.nthRoot((-3638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,638
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("PS87TyJs");
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.subtract(complex1);
      Complex complex3 = complex2.ONE.cosh();
      complex0.isInfinite();
      complex0.getField();
      Complex complex4 = complex0.ONE.subtract(4784.798242);
      Complex complex5 = complex1.subtract(complex3);
      complex4.abs();
      complex5.pow(4784.798242);
      Complex complex6 = complex0.multiply(1170);
      complex5.atan();
      Complex complex7 = complex4.cos();
      complex6.log();
      complex3.atan();
      complex7.equals("INVALID_REGRESSION_ARRAY");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2184));
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.hashCode();
      complex2.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex3 = complex1.log();
      complex0.getArgument();
      complex1.hashCode();
      complex0.getImaginary();
      complex0.getImaginary();
      complex1.atan();
      complex2.hashCode();
      complex1.atan();
      complex2.abs();
      complex0.toString();
      complex3.sqrt1z();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("PS87TyJs");
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex3.ONE.cosh();
      complex0.isInfinite();
      complex0.getField();
      Complex complex5 = complex0.ONE.subtract(4784.798242);
      complex5.tanh();
      complex0.hashCode();
      complex0.getImaginary();
      complex1.getImaginary();
      Complex complex6 = complex3.atan();
      complex6.hashCode();
      complex6.atan();
      complex3.abs();
      complex1.toString();
      Complex complex7 = complex4.sqrt1z();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.add(complex2);
      complex3.INF.divide(complex1);
      complex0.INF.toString();
      Complex complex4 = complex0.reciprocal();
      complex1.multiply(complex4);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1.0186485886120274E93);
      Complex complex1 = complex0.multiply((-1846.429361966));
      complex0.abs();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.multiply(1.0875755416683464);
      complex3.add(complex2);
      Complex complex4 = complex0.pow(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex5 = Complex.INF;
      complex4.atan();
      complex5.abs();
      complex1.reciprocal();
      Complex complex6 = Complex.ZERO;
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2184));
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex4 = complex1.log();
      complex0.getArgument();
      Complex complex5 = complex1.subtract(complex0);
      complex0.I.abs();
      complex4.abs();
      Complex complex6 = complex1.pow(Double.NaN);
      complex6.multiply(1185);
      complex0.getImaginary();
      complex5.reciprocal();
      complex4.readResolve();
      complex3.divide(complex1);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("PS87TyJs");
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex3.ONE.cosh();
      complex0.isInfinite();
      complex0.getField();
      Complex complex5 = complex0.ONE.subtract(4784.798241729747);
      complex0.hashCode();
      complex0.getImaginary();
      complex1.getImaginary();
      Complex complex6 = complex3.atan();
      complex1.readResolve();
      Complex complex7 = new Complex(4381.54961075, 1.1752011936438014);
      Complex complex8 = complex5.divide(complex7);
      complex8.abs();
      complex6.multiply(1518.80470981);
      complex0.getImaginary();
      complex8.reciprocal();
      Complex complex9 = new Complex(1.1752011936438014);
      complex9.readResolve();
      complex6.divide(complex4);
      Complex complex10 = Complex.I;
      complex10.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(6.283185307179586);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.cosh();
      complex3.I.multiply((-703.7));
      Complex complex4 = complex3.ZERO.tan();
      complex4.INF.negate();
      complex2.sin();
      Complex complex5 = complex2.multiply(complex0);
      complex1.ONE.toString();
      Complex complex6 = complex1.ONE.createComplex(6.283185307179586, 0.0);
      Complex complex7 = complex1.multiply(complex5);
      complex7.multiply(1433.314016612348);
      complex6.nthRoot(1800);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.valueOf(1.1886897087097168);
      Complex complex2 = complex0.divide((-1.0));
      Complex complex3 = complex2.cos();
      complex1.negate();
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      complex0.divide(complex3);
      complex3.abs();
      Complex complex5 = complex1.multiply((-3140.0215471480487));
      complex5.getImaginary();
      Complex complex6 = complex4.reciprocal();
      complex6.readResolve();
      complex2.divide(complex4);
      Complex complex7 = Complex.ZERO;
      complex4.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.valueOf(1.1886897087097168);
      complex0.divide((-1.0));
      complex1.multiply(complex0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(0.0);
      complex2.add(complex1);
      complex2.pow(0.0);
      complex0.getArgument();
      complex0.atan();
      complex0.abs();
      Complex complex3 = Complex.I;
      complex3.reciprocal();
      Complex complex4 = Complex.ONE;
      complex4.getImaginary();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-2.44242319E-315));
      complex0.getField();
      Complex complex1 = complex0.sinh();
      complex0.getArgument();
      Complex complex2 = new Complex((-35.171220037831), 1433.314016612348);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.multiply((-1.9821451970481713E-7));
      complex2.abs();
      Complex complex5 = complex3.tan();
      complex5.multiply(3276.885106264);
      complex2.add(complex3);
      Complex complex6 = complex0.pow(3458.179652290142);
      complex6.getArgument();
      Complex complex7 = Complex.INF;
      complex7.atan();
      complex2.abs();
      complex4.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.5181620926417371);
      Complex complex2 = complex0.subtract(complex1);
      complex0.cosh();
      complex2.isInfinite();
      complex1.getField();
      Complex complex3 = complex2.subtract(4784.798241729747);
      complex2.hashCode();
      complex3.getImaginary();
      complex1.getImaginary();
      complex3.atan();
      complex1.hashCode();
      complex2.atan();
      complex0.getField();
      complex2.conjugate();
      Complex complex4 = complex1.asin();
      complex2.acos();
      complex4.getArgument();
      complex1.divide(4784.798241729747);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-2184));
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex4 = complex1.log();
      complex0.getArgument();
      complex1.subtract(complex0);
      complex4.abs();
      Complex complex5 = complex1.pow(Double.NaN);
      complex2.log();
      complex2.pow(complex3);
      Complex complex6 = complex5.sinh();
      complex0.pow(complex2);
      complex6.subtract((-4683.6));
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex.valueOf(1.1886897087097168);
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.reciprocal();
      Complex.valueOf(0.0, 1.1886897087097168);
      complex1.hashCode();
      Complex complex3 = Complex.INF;
      complex2.subtract(complex3);
      complex0.atan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tanh();
      complex5.pow(complex1);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 574.718669);
      Complex complex1 = Complex.NaN;
      complex1.INF.toString();
      Complex complex2 = complex1.I.add(complex0);
      complex2.sqrt1z();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.divide(574.718669);
      complex4.NaN.getArgument();
      complex3.ZERO.acos();
      complex0.ONE.acos();
      complex0.I.getArgument();
      complex0.getImaginary();
      complex0.getField();
      complex1.readResolve();
      complex3.add(171.63977618);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.NaN.log();
      complex3.NaN.abs();
      Complex complex4 = complex3.INF.subtract(173.53072819);
      Complex complex5 = complex1.add(complex0);
      complex0.readResolve();
      Complex complex6 = complex0.atan();
      complex1.multiply(complex0);
      complex6.pow(2894.486292843433);
      Complex complex7 = complex1.cos();
      complex7.getArgument();
      Complex complex8 = complex1.add((-2.7527887552743672E-8));
      complex8.tanh();
      complex0.sqrt();
      complex6.reciprocal();
      complex5.conjugate();
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0256131352582533E261, 1.0256131352582533E261);
      Complex complex1 = complex0.ONE.divide(1.0256131352582533E261);
      Complex complex2 = complex1.ZERO.sinh();
      complex2.INF.sin();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex3.ONE.exp();
      complex4.NaN.subtract(1.0256131352582533E261);
      complex4.atan();
      complex0.nthRoot(3827);
      Complex.valueOf((double) 3827, (double) 3827);
      complex2.readResolve();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.NaN.add(complex0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.sqrt();
      complex4.ZERO.atan();
      Complex complex5 = complex4.createComplex(2542.61779, (-1480.0008087));
      complex3.asin();
      complex5.toString();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex1.ZERO.toString();
      complex1.I.add(0.0);
      complex1.ZERO.toString();
      Complex complex2 = complex0.INF.multiply(2143);
      complex2.I.createComplex(2143, 1.2167897656061312E23);
      complex0.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.sinh();
      complex4.NaN.atan();
      complex4.asin();
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.acos();
      Complex.valueOf(0.0);
      complex1.NaN.pow(0.0);
      complex4.I.conjugate();
      complex2.ZERO.add(0.0);
      complex2.createComplex((-29.9), 0.0);
      complex0.isNaN();
      Complex complex5 = complex2.cosh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.subtract(complex0);
      complex3.createComplex(0.0, 0.0);
      complex2.I.divide(complex1);
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = complex1.subtract((-1585.0));
      complex5.INF.readResolve();
      complex0.NaN.atan();
      complex5.I.sqrt();
      complex0.getReal();
      complex5.getImaginary();
      Complex complex6 = complex0.negate();
      complex6.ZERO.nthRoot(1355);
      complex4.conjugate();
      complex1.tan();
      complex0.acos();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.negate();
      Complex complex2 = complex0.tanh();
      complex2.ONE.sqrt();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = Complex.NaN;
      complex2.add(complex4);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = Complex.valueOf(0.9305076599121094);
      complex5.isInfinite();
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.pow(complex6);
      complex6.sinh();
      complex2.pow(complex7);
      complex3.subtract(0.9305076599121094);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1910.12941), 1.080835500478704E-8);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.I.cosh();
      complex2.INF.createComplex(1.080835500478704E-8, 0.0);
      complex3.I.abs();
      complex0.ZERO.abs();
      complex0.toString();
      complex2.sqrt1z();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.tanh();
      Complex complex1 = Complex.valueOf((-120.26193439944));
      Complex complex2 = Complex.valueOf((-120.26193439944), (-3.356118100840571E-7));
      Complex complex3 = complex2.NaN.exp();
      complex0.ZERO.getField();
      Complex complex4 = complex0.subtract(2376.041934165477);
      complex4.ONE.sinh();
      Complex complex5 = complex4.INF.negate();
      complex5.NaN.log();
      complex5.NaN.acos();
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex6.NaN.pow(complex4);
      Complex complex8 = complex2.pow((-120.26193439944));
      complex3.sqrt();
      Complex complex9 = complex8.add(Double.NaN);
      complex6.I.multiply((-905));
      complex9.ONE.pow((-2134.5191815281714));
      complex8.getReal();
      complex7.toString();
      Complex complex10 = complex1.tan();
      complex6.log();
      complex8.ONE.sqrt();
      Complex complex11 = complex0.asin();
      complex11.NaN.tan();
      complex11.NaN.getField();
      complex8.add(complex3);
      complex4.readResolve();
      Complex complex12 = complex2.sqrt();
      complex12.sqrt1z();
      complex8.isInfinite();
      complex10.pow((-120.26193439944));
      Complex.valueOf(4.702582781813407E-251);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex3.INF.divide(complex1);
      complex0.INF.toString();
      Complex complex5 = complex0.reciprocal();
      Complex.valueOf(670.6, (-1.0));
      complex5.INF.reciprocal();
      Complex.valueOf(0.0, 1.0);
      complex2.hashCode();
      Complex complex6 = complex3.subtract(complex1);
      complex4.atan();
      complex6.tanh();
      complex6.pow(complex2);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.I.tan();
      complex0.NaN.multiply(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.subtract(4282.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.cosh();
      complex5.I.sinh();
      complex0.tan();
      Complex complex6 = complex4.negate();
      Complex.valueOf((-1429.181783));
      complex2.acos();
      complex6.divide((-1429.181783));
      complex1.multiply(4282.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3054.3431938052963));
      Complex complex1 = complex0.tanh();
      complex1.I.add(0.0);
      complex1.subtract(complex0);
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.subtract(7.126414081261746E-168);
      complex3.readResolve();
      complex2.hashCode();
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.I.createComplex((-2195.031897), (-2195.031897));
      complex7.ONE.abs();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.subtract(complex1);
      complex6.I.exp();
      Complex complex10 = complex9.atan();
      complex5.multiply((-2195.031897));
      Complex complex11 = complex0.subtract(complex1);
      complex3.NaN.multiply(1.0);
      complex11.ZERO.cosh();
      complex1.INF.abs();
      Complex complex12 = complex10.multiply(0.0);
      complex12.log();
      complex12.NaN.subtract((-2195.031897));
      complex10.NaN.cosh();
      complex1.abs();
      complex4.conjugate();
      complex1.tanh();
      complex4.isNaN();
      complex7.sqrt1z();
      complex4.reciprocal();
      Object object0 = new Object();
      complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.divide(0.0);
      complex0.ONE.hashCode();
      complex0.multiply((-1380.047792564085));
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(9.39987974788905E-8, 1066.893);
      complex0.I.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.pow(9.39987974788905E-8);
      complex1.ZERO.negate();
      complex0.hashCode();
      Complex complex4 = complex0.acos();
      complex0.isNaN();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex5.NaN.pow(1066.893);
      complex6.ZERO.divide(2407.0901);
      Complex complex7 = complex1.negate();
      complex4.NaN.cos();
      Complex complex8 = complex7.multiply(1.5707963267948966);
      Complex complex9 = complex0.ZERO.sqrt1z();
      complex0.getImaginary();
      Complex complex10 = complex4.cos();
      complex10.INF.getField();
      complex1.getArgument();
      Complex complex11 = complex2.add((-2008.11417));
      complex11.ZERO.getField();
      complex7.add(complex4);
      complex2.multiply(1.5707963267948966);
      Complex complex12 = complex3.divide(complex9);
      complex12.ZERO.toString();
      Object object0 = new Object();
      complex11.equals(object0);
      complex3.sin();
      complex7.subtract(9.39987974788905E-8);
      complex7.multiply(2085);
      complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.readResolve();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex0.sqrt();
      complex4.ZERO.hashCode();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.ZERO.atan();
      complex6.readResolve();
      complex2.isInfinite();
      Complex complex7 = complex1.cosh();
      complex7.ZERO.sqrt();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.I.conjugate();
      complex3.I.getArgument();
      complex9.ZERO.acos();
      complex0.readResolve();
      complex3.exp();
      complex8.NaN.atan();
      Complex complex10 = complex9.createComplex(Double.POSITIVE_INFINITY, 0.0354953333735466);
      complex10.subtract(0.0354953333735466);
      Complex complex11 = complex3.reciprocal();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 261.6344);
      Complex complex1 = complex0.cos();
      complex1.ZERO.subtract(complex0);
      complex1.INF.sqrt();
      Complex.valueOf(261.6344);
      complex0.getImaginary();
      complex0.ZERO.createComplex((-20.0), 261.6344);
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.multiply((-687.609));
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.log();
      int int0 = (-2243);
      try { 
        complex0.nthRoot((-2243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,243
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.nthRoot(4284);
      Complex complex1 = complex0.I.pow(6.283185307179586);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.I.pow(0.0);
      complex0.INF.sinh();
      Complex.valueOf(2232.3534, 0.0);
      complex3.getField();
      Complex complex5 = complex2.atan();
      complex2.I.cosh();
      Complex complex6 = complex4.asin();
      complex6.NaN.multiply(2232.3534);
      Complex complex7 = complex3.subtract(complex5);
      complex4.isNaN();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex2.sinh();
      complex6.subtract(complex1);
      complex9.getReal();
      complex8.atan();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex.valueOf(1.1886897087097168);
      Complex complex1 = complex0.divide((-1.0));
      complex1.multiply(1433.314016612348);
      complex1.nthRoot(1800);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals("PS87TyJs");
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex3.ONE.cosh();
      complex0.isInfinite();
      complex0.getField();
      complex0.ONE.subtract(4784.798241729747);
      complex0.hashCode();
      complex0.getImaginary();
      complex1.getImaginary();
      Complex complex4 = complex3.atan();
      complex4.hashCode();
      Complex complex5 = complex4.atan();
      complex3.getField();
      complex4.conjugate();
      complex3.ONE.asin();
      complex4.INF.acos();
      complex4.getArgument();
      complex5.divide(298.7);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.asin();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt();
      complex2.divide((-563.978));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1897.79529), (-1897.79529));
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.ZERO.multiply(578);
      complex0.readResolve();
      complex4.NaN.cos();
      Complex complex5 = complex4.log();
      complex4.INF.sin();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex1.ONE.add(complex0);
      Complex complex8 = complex5.add(complex0);
      complex8.ONE.hashCode();
      Complex complex9 = complex8.NaN.asin();
      complex9.I.sin();
      complex6.NaN.getArgument();
      complex2.INF.negate();
      complex3.getArgument();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex6.multiply(complex7);
      Complex complex12 = complex11.pow((double) 578);
      complex12.ONE.acos();
      complex6.abs();
      complex4.ZERO.sin();
      Complex complex13 = Complex.ZERO;
      complex10.NaN.divide(complex13);
      Complex complex14 = complex3.multiply((-206));
      complex14.subtract((-20.0));
      complex3.multiply(complex10);
      complex5.getImaginary();
      complex8.createComplex(578, (-1897.79529));
      complex11.reciprocal();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.INF.add((-2792.376049629043));
      Complex complex3 = complex0.negate();
      complex1.NaN.negate();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.acos();
      complex5.ONE.cosh();
      Complex complex6 = complex1.divide(complex3);
      complex0.getImaginary();
      Complex complex7 = complex1.pow(complex4);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.I.sinh();
      complex9.NaN.getField();
      complex1.subtract(complex8);
      Complex complex10 = Complex.NaN;
      complex0.ZERO.sqrt();
      complex0.NaN.divide(complex1);
      complex6.equals(complex10);
      complex3.subtract((-1192.74460997272));
      complex7.cosh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(5.294053246347931E-8);
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.sinh();
      complex0.getArgument();
      Complex complex2 = new Complex(5.294053246347931E-8, 0.0);
      Complex complex3 = complex2.ZERO.tan();
      complex1.ONE.multiply((-1.9821451970481713E-7));
      complex3.ONE.abs();
      complex3.tan();
      complex2.ZERO.multiply(5.294053246347931E-8);
      Complex complex4 = complex0.add(complex2);
      complex1.pow(0.0);
      complex2.getArgument();
      Complex complex5 = complex1.atan();
      complex5.abs();
      complex4.reciprocal();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(6.283185307179586);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.cosh();
      complex3.I.multiply((-703.7));
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex4.INF.negate();
      complex2.sin();
      Complex complex6 = complex2.multiply(complex0);
      complex1.ONE.toString();
      Complex complex7 = complex1.ONE.createComplex(6.283185307179586, 0.0);
      Complex complex8 = complex1.multiply(complex6);
      complex0.ZERO.cos();
      Complex complex9 = complex1.negate();
      complex2.readResolve();
      Complex complex10 = complex2.I.divide(complex1);
      complex9.ZERO.abs();
      complex10.ONE.multiply(6.283185307179586);
      complex7.getImaginary();
      complex8.reciprocal();
      complex5.readResolve();
      complex4.divide(complex5);
      complex9.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex0.cos();
      complex2.I.pow(complex0);
      complex0.I.subtract(complex1);
      Complex complex3 = complex0.ZERO.cosh();
      complex0.getField();
      complex0.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ZERO.multiply(276.45228);
      complex5.negate();
      complex5.NaN.divide(complex1);
      complex4.I.add(0.0);
      Complex complex6 = complex0.negate();
      complex6.sinh();
      Complex complex7 = complex3.add(complex1);
      complex7.subtract(complex4);
      complex0.cosh();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-35.171220037831), (-35.171220037831));
      complex0.I.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex0.ZERO.multiply((-389));
      complex2.ONE.negate();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
      Complex complex1 = Complex.valueOf(0.0, 1148.417);
      Complex complex2 = complex1.ONE.cos();
      complex0.atan();
      Complex complex3 = Complex.valueOf(1148.417);
      complex3.toString();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      complex1.INF.add(0.0);
      Complex complex2 = complex0.ONE.multiply(0.0);
      complex0.abs();
      complex0.getField();
      Complex complex3 = complex0.reciprocal();
      complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex4.ZERO.pow(complex0);
      Complex complex5 = complex3.negate();
      complex2.sinh();
      Complex complex6 = Complex.INF;
      complex6.divide(complex2);
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex3.tan();
      complex8.NaN.multiply(complex7);
      complex8.add((-3.141592653589793));
      Complex complex9 = complex5.cosh();
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.cosh();
      complex1.NaN.createComplex(1.0, 1.0);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.I.pow(1.0);
      complex0.NaN.sqrt();
      Complex complex5 = Complex.valueOf((-893.91815953), 1.0233519853128553E-7);
      complex5.hashCode();
      complex0.getReal();
      Complex complex6 = Complex.valueOf(0.0, 1.0);
      complex0.subtract(complex1);
      complex2.multiply(1.0);
      Complex complex7 = complex3.exp();
      complex3.sqrt();
      Complex complex8 = complex4.pow((-1913.96493387273));
      complex8.ONE.multiply(complex7);
      Complex complex9 = complex3.divide(complex6);
      complex5.getReal();
      complex2.multiply((-1913.96493387273));
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.log();
      Complex complex1 = Complex.valueOf(6.283185307179586, 2.0);
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.NaN.subtract(2.0);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex7 = complex3.ONE.asin();
      Complex complex8 = complex0.acos();
      Complex complex9 = Complex.valueOf(0.0, (-316.645372927));
      List<Complex> list0 = complex9.I.nthRoot(1334);
      assertEquals(1334, list0.size());
      
      boolean boolean0 = complex3.equals(complex8);
      assertTrue(boolean0);
      
      Complex complex10 = complex2.cos();
      Complex complex11 = complex10.add(complex7);
      complex10.ZERO.abs();
      double double0 = complex10.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex10.getArgument();
      Complex complex12 = complex4.cosh();
      complex12.ONE.sin();
      complex12.getField();
      assertEquals(1.0, complex12.getReal(), 0.01);
      
      Object object0 = new Object();
      complex3.equals(object0);
      complex11.cosh();
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      
      Complex complex13 = complex10.tan();
      assertNotSame(complex10, complex1);
      assertSame(complex13, complex6);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.I.pow(complex3);
      assertEquals(0.7853981633974483, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      
      Complex complex6 = complex4.multiply(complex1);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex1.exp();
      complex1.hashCode();
      Complex complex7 = complex2.divide(0.0);
      assertNotSame(complex7, complex5);
      assertTrue(complex2.isNaN());
      assertSame(complex1, complex6);
      assertNotSame(complex7, complex2);
      
      Complex complex8 = Complex.valueOf(0.0, (-2926.92491931314));
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals((-2926.92491931314), complex8.getImaginary(), 0.01);
  }
}
