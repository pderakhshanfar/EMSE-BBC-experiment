/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:18:51 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(647.65721875987);
      complex0.I.reciprocal();
      Complex complex1 = complex0.NaN.pow(8.707092668016246E-211);
      complex0.nthRoot(1061);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sqrt1z();
      complex0.toString();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex3.tan();
      complex5.NaN.tan();
      complex5.ZERO.nthRoot(1061);
      complex5.divide(complex4);
      Complex complex6 = complex3.add(1.888423204421997);
      Complex complex7 = complex6.NaN.pow(8.707092668016246E-211);
      complex1.reciprocal();
      Complex complex8 = complex0.tanh();
      complex0.I.multiply(complex8);
      Complex.valueOf(1031.2458);
      Complex complex9 = complex7.multiply(complex3);
      complex9.tan();
      Complex complex10 = complex9.exp();
      complex10.I.log();
      complex1.multiply(1738);
      complex4.sqrt1z();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-4.595250028278979E-113), Double.POSITIVE_INFINITY);
      complex0.nthRoot(37);
      Complex complex1 = Complex.valueOf((double) 37, (-4.595250028278979E-113));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.35156474306708874);
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2074.255478);
      Complex complex1 = new Complex(4.6573184163366984E-61);
      complex0.NaN.divide(complex1);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2212.557, 2212.557);
      Complex complex1 = complex0.multiply(3593);
      Complex complex2 = Complex.valueOf(1465.6581011056248, 2212.557);
      Complex complex3 = complex2.negate();
      complex2.INF.sin();
      Complex complex4 = complex3.pow((-376.0701));
      complex2.I.readResolve();
      complex3.I.conjugate();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.valueOf(1465.6581011056248);
      Complex complex7 = complex6.I.divide(complex2);
      complex7.INF.getField();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex8.atan();
      Complex.valueOf((-4339.1988));
      Complex complex10 = complex9.add(1262.36139646);
      complex0.conjugate();
      complex5.multiply(complex2);
      complex0.createComplex((-376.0701), (-4339.1988));
      Complex complex11 = complex10.conjugate();
      complex1.createComplex(1040.8074, (-376.0701));
      complex4.tan();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-4.595250028278979E-113), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.ZERO.sqrt();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-4.595250028278979E-113), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.I.sinh();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-4.595250028278979E-113), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.pow(complex0);
      complex1.createComplex((-4.595250028278979E-113), 2.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(805);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.ZERO.getArgument();
      complex2.abs();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-646.8743791), Double.NaN);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(19.160024860942556, Double.POSITIVE_INFINITY);
      complex1.isInfinite();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(19.160024860942556, Double.POSITIVE_INFINITY);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-104));
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.abs();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.824454861992054E-31), Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.I.tanh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.multiply(complex0);
      complex1.tanh();
      Complex complex3 = Complex.ONE;
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.8494343291160577E254), 6.283185307179586);
      complex1.conjugate();
      complex0.exp();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-2846.667265));
      Complex complex1 = complex0.createComplex(2.0860312877435047E-8, (-2846.667265));
      Complex complex2 = complex1.NaN.createComplex((-2846.667265), 2.0860312877435047E-8);
      Complex complex3 = complex2.NaN.createComplex((-20.0), 2.0860312877435047E-8);
      complex1.toString();
      Complex complex4 = complex0.divide(Double.NaN);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = Complex.valueOf((-20.0), 2.0860312877435047E-8);
      Complex complex7 = complex6.INF.tanh();
      complex4.subtract(complex5);
      complex6.reciprocal();
      Complex complex8 = complex6.add(916.1190245);
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex9.asin();
      complex10.I.reciprocal();
      complex5.multiply(complex2);
      complex1.ZERO.pow((-2846.667265));
      Complex complex11 = complex5.multiply((-420.0));
      complex7.ZERO.add(916.1190245);
      Complex.valueOf(2.0860312877435047E-8, (-2.873405334847288E-4));
      complex3.subtract(complex7);
      complex3.subtract(complex7);
      complex8.createComplex((-2846.667265), Double.NaN);
      complex11.asin();
      complex10.reciprocal();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.multiply(1618);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1098.6857664213));
      Complex complex1 = Complex.valueOf((-20.0), (-1098.6857664213));
      complex1.conjugate();
      Complex complex2 = Complex.valueOf(1.1231621190000476E-7, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply((-164));
      Complex complex4 = complex2.divide(complex3);
      complex1.getReal();
      Complex complex5 = complex4.sin();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = Complex.INF;
      complex4.getReal();
      Complex complex7 = Complex.ZERO;
      complex7.I.subtract(Double.NaN);
      complex5.sin();
      Complex complex8 = new Complex((-1.5707963267948966), (-1.5707963267948966));
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-104));
      Complex complex2 = Complex.valueOf((double) (-104), (-1242.76631198));
      complex2.INF.multiply(complex0);
      Complex complex3 = Complex.ONE;
      complex1.tan();
      Complex complex4 = Complex.INF;
      complex1.reciprocal();
      Complex complex5 = Complex.ZERO;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.exp();
      int int0 = 1069;
      complex1.nthRoot(1069);
      complex0.sin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.divide(0.0);
      int int1 = (-323);
      complex3.ONE.abs();
      try { 
        complex2.INF.nthRoot((-323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -323
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.conjugate();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(800);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.multiply(2553);
      Complex complex5 = complex2.subtract((-2.927400468384075E-6));
      Complex complex6 = complex5.cos();
      complex3.equals(complex4);
      complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.8494343291160577E254), 6.283185307179586);
      complex1.conjugate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.NaN;
      complex4.divide(complex2);
      Complex complex6 = Complex.INF;
      complex0.getReal();
      Complex complex7 = Complex.ZERO;
      complex7.sin();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 6.283185307179586);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-104));
      complex0.tan();
      Complex complex2 = Complex.INF;
      complex2.multiply((-1728));
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.tan();
      Complex complex2 = complex1.multiply(800);
      complex2.divide(complex1);
      complex1.getReal();
      complex2.sin();
      complex1.tan();
      Complex.valueOf((double) 800, Double.POSITIVE_INFINITY);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-1.0772154376548336E-8), (-1.0772154376548336E-8));
      complex0.INF.asin();
      Complex complex1 = complex0.NaN.tan();
      complex0.INF.acos();
      Complex complex2 = new Complex((-1.0772154376548336E-8), 20.0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.valueOf((-1.0772154376548336E-8), (-1.0772154376548336E-8));
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex3.NaN.add(complex5);
      Complex complex8 = complex6.NaN.acos();
      Complex.valueOf(0.0, (-40.0));
      complex8.NaN.add((-1.0772154376548336E-8));
      complex6.I.pow(20.0);
      Complex.valueOf(2679.173, 2.2800989151000977);
      complex3.getImaginary();
      Complex complex9 = complex4.tanh();
      complex9.nthRoot(624);
      complex1.isInfinite();
      complex4.sin();
      try { 
        complex7.nthRoot((-2145728832));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,145,728,832
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(804);
      Complex complex2 = Complex.valueOf((double) 804, (double) 804);
      complex2.ONE.conjugate();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex1.ONE.divide(complex0);
      complex4.pow(complex2);
      Complex complex6 = complex0.negate();
      complex0.tanh();
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.acos();
      complex8.exp();
      Complex complex9 = Complex.I;
      complex9.cosh();
      Complex complex10 = complex4.exp();
      complex8.subtract((double) 804);
      complex10.tanh();
      complex7.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.valueOf((double) 0, (-1858.9455863));
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex2.exp();
      complex2.tan();
      complex3.divide(complex0);
      complex0.multiply((-427));
      complex4.INF.getArgument();
      Complex complex5 = Complex.INF;
      complex3.divide(complex5);
      complex3.getReal();
      complex4.sin();
      Complex complex6 = Complex.ONE;
      complex6.sin();
      Complex complex7 = Complex.I;
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.multiply(2145523333);
      Complex complex1 = complex0.divide((-387563.026275212));
      Complex complex2 = complex1.ONE.sinh();
      complex2.INF.log();
      complex1.I.sin();
      Complex complex3 = complex0.exp();
      complex3.sqrt1z();
      complex1.getImaginary();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.sin();
      complex2.pow(0.0);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf(64.05918222460645, 0.0);
      complex4.sinh();
      Complex complex5 = Complex.INF;
      complex5.asin();
      complex1.createComplex(64.05918222460645, 1891.3202171558025);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cos();
      complex2.NaN.getField();
      Complex complex3 = complex0.I.conjugate();
      complex2.I.reciprocal();
      complex2.ONE.abs();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = Complex.valueOf(0.7853981633974483);
      complex1.add((-1371.351316714971));
      complex4.multiply(2142471424);
      // Undeclared exception!
      complex5.nthRoot(2142471424);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      Complex complex1 = complex0.atan();
      complex0.NaN.getField();
      Complex complex2 = complex0.I.conjugate();
      complex1.I.reciprocal();
      complex0.ONE.abs();
      complex2.multiply(0.0);
      Complex complex3 = Complex.valueOf(0.7853981633974483);
      Complex complex4 = complex3.ZERO.divide(1.0);
      complex1.NaN.multiply(2.0454950851007314E110);
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex0.tanh();
      complex2.sqrt();
      Complex complex8 = complex4.createComplex(2.2741891590028428E-8, 2791.1294465);
      complex8.INF.sqrt1z();
      complex7.I.asin();
      Complex complex9 = complex5.log();
      complex0.asin();
      Complex complex10 = complex6.asin();
      complex10.ONE.multiply(2791.1294465);
      Complex complex11 = Complex.NaN;
      complex11.getField();
      complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(69.678537625);
      Complex complex1 = Complex.valueOf(3129.71660791056, 626.577);
      Complex complex2 = complex0.INF.multiply(2.3971445233885962E126);
      Complex complex3 = complex0.pow(2.1313950901331177E258);
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = complex0.createComplex(626.577, 2.3971445233885962E126);
      Complex.valueOf(69.678537625, 0.7071067811865476);
      Complex complex6 = complex3.pow(complex2);
      complex5.multiply(complex4);
      complex6.multiply(2463);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.cosh();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex3.createComplex((-2472.3), 0.26820653676986694);
      Complex.valueOf((-5.7618793749770706E-8), 6.283185307179586);
      Complex complex7 = complex0.pow(complex6);
      complex4.multiply(complex7);
      complex5.multiply(2463);
      complex5.cosh();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      complex0.atan();
      Complex complex1 = complex0.cos();
      complex1.NaN.getField();
      Complex complex2 = complex0.I.conjugate();
      complex1.I.reciprocal();
      complex1.ONE.abs();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = Complex.valueOf(0.7853981633974483);
      Complex complex6 = complex5.ZERO.divide((-576.6973));
      complex4.negate();
      complex4.tanh();
      complex2.log();
      Complex complex7 = Complex.valueOf((-576.6973));
      complex7.acos();
      complex0.exp();
      Complex complex8 = complex2.cosh();
      complex4.createComplex(0.0800878869904249, 4.793444363780116E219);
      Complex complex9 = complex2.exp();
      complex7.subtract((-1.548715389333397E-8));
      complex9.tanh();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex8.asin();
      complex11.NaN.acos();
      complex0.tan();
      complex10.subtract(complex8);
      complex11.pow((-1.0944489746753362E211));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-5.7618793749770706E-8), (-5.7618793749770706E-8));
      Complex complex2 = complex0.add((double) 2491);
      complex1.divide((double) 2491);
      Complex complex3 = complex2.multiply((-576.6973));
      complex3.pow(complex2);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.negate();
      complex1.tanh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex6.exp();
      complex8.INF.toString();
      complex6.cosh();
      complex0.exp();
      complex7.subtract(2.0454950851007314E110);
      Complex complex9 = Complex.ZERO;
      complex9.tanh();
      complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2.4077713605057384E-4), (-2.4077713605057384E-4));
      complex0.add(complex1);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.ONE.pow(complex1);
      complex4.NaN.readResolve();
      Complex complex5 = complex0.cos();
      complex5.NaN.asin();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = Complex.valueOf((-20.0), (-20.0));
      complex7.nthRoot(2607);
      Complex complex8 = complex2.subtract(complex1);
      Complex complex9 = complex1.sqrt();
      complex9.subtract(complex3);
      complex8.isInfinite();
      complex0.sin();
      complex6.exp();
      complex4.add(complex9);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(416.76, 416.76);
      Complex complex1 = complex0.multiply(416.76);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.reciprocal();
      complex3.INF.hashCode();
      complex0.ZERO.subtract(complex2);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.valueOf(4.84038176769263E-10);
      complex5.INF.hashCode();
      Complex complex6 = complex4.I.add(complex5);
      Complex complex7 = complex4.ZERO.pow(1488.18972701976);
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex8.ONE.sin();
      complex9.getArgument();
      complex8.readResolve();
      Complex complex10 = complex5.NaN.cos();
      complex10.INF.getField();
      complex0.isInfinite();
      Complex complex11 = complex1.sin();
      complex11.ONE.nthRoot(1311);
      complex0.getField();
      complex6.getImaginary();
      complex7.toString();
      complex11.tan();
      complex0.reciprocal();
      complex2.toString();
      complex1.abs();
      complex5.cosh();
      Complex.valueOf(4.84038176769263E-10, 245633.19461955174);
      complex7.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(804);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.NaN.exp();
      complex4.I.tan();
      Complex complex5 = complex4.NaN.tanh();
      complex5.NaN.readResolve();
      Complex complex6 = complex5.createComplex((-268.073091577442), (-1801.5369));
      Complex.valueOf((-1801.5369), (-2.6542661873565E-4));
      complex1.pow(complex6);
      complex1.multiply(complex6);
      complex3.multiply(804);
      complex4.cosh();
      complex0.exp();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(3261.93);
      Complex complex1 = Complex.valueOf((-0.7853981633974483), 626.577);
      Complex complex2 = complex0.multiply(0.46424978971481323);
      Complex complex3 = complex0.pow(2.2361985518423144E-8);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = Complex.valueOf((-0.7853981633974483), 3129.71660791056);
      Complex complex6 = complex2.sqrt();
      complex2.createComplex((-1276.765315495), Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.log();
      complex7.asin();
      complex3.asin();
      Complex complex8 = Complex.NaN;
      complex8.getField();
      complex6.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(804);
      Complex complex1 = Complex.valueOf((double) 804, (double) 804);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.NaN.tanh();
      Complex complex6 = complex5.divide(complex3);
      Complex.valueOf(1.418513298034668, 1.418513298034668);
      Complex complex7 = Complex.ONE;
      complex3.createComplex((-0.8813735870195429), 2791.1294465);
      Complex complex8 = complex5.log();
      complex8.ONE.cosh();
      complex2.asin();
      Complex complex9 = complex3.asin();
      complex9.INF.nthRoot(804);
      complex1.getField();
      complex1.divide(complex4);
      complex6.cos();
      Complex complex10 = Complex.valueOf((-1401.0362147743454), 98.162);
      Complex complex11 = complex0.multiply(complex10);
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(965.8);
      Complex complex1 = Complex.valueOf(965.8, 626.577);
      Complex complex2 = complex0.INF.multiply(2.3971445233885962E126);
      Complex complex3 = complex0.pow(2.1313950901331177E258);
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = Complex.valueOf(1.418513298034668, 2.1313950901331177E258);
      Complex complex6 = complex2.sqrt();
      complex4.ZERO.tanh();
      complex6.NaN.createComplex(2791.1294465, 0.0);
      Complex complex7 = complex2.NaN.log();
      complex7.asin();
      complex2.asin();
      complex6.getField();
      complex5.acos();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.NaN.divide(complex2);
      Complex complex5 = complex3.I.cosh();
      complex5.ONE.conjugate();
      complex2.INF.divide(0.0);
      complex0.divide(complex4);
      complex2.multiply(2480);
      complex3.multiply((-1.2618366811281002E-7));
      Complex complex6 = complex5.cosh();
      complex2.nthRoot(2480);
      complex6.equals((Object) null);
      complex0.cos();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1593.054));
      complex0.toString();
      Complex complex1 = complex0.I.createComplex((-1593.054), 427.449272);
      complex1.I.cosh();
      complex0.INF.getArgument();
      complex1.ONE.add(621.546404917105);
      complex0.abs();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.log();
      complex2.I.sinh();
      Complex complex4 = complex1.multiply((-427));
      complex4.subtract(1447.6117);
      complex2.cos();
      complex1.equals(complex0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(965.8, 626.577);
      Complex complex1 = Complex.NaN;
      complex1.abs();
      complex0.log();
      Complex complex2 = Complex.I;
      complex2.I.createComplex(965.8, 626.577);
      complex2.multiply((-128));
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      complex3.ONE.negate();
      complex3.nthRoot(523);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(804);
      Complex complex2 = Complex.valueOf((double) 804, (double) 804);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.NaN.exp();
      complex4.I.tan();
      complex4.NaN.tanh();
      complex1.ONE.divide(complex0);
      Complex complex5 = complex2.negate();
      complex5.tanh();
      Complex complex6 = complex3.log();
      complex2.acos();
      complex4.exp();
      Complex complex7 = Complex.INF;
      complex7.cosh();
      Complex complex8 = Complex.valueOf((-2644.884038030512));
      complex8.exp();
      complex6.subtract(413.719064938937);
      complex1.acos();
      Complex complex9 = new Complex(0.0, 0.0);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ZERO.multiply((-337.0));
      Complex complex3 = complex0.I.pow(2047.70962277);
      Complex complex4 = complex1.createComplex(0.9999997531935372, (-94.193185707));
      complex4.I.add(Double.NaN);
      Complex complex5 = complex3.I.add(2047.70962277);
      Complex complex6 = complex5.sin();
      complex2.multiply(complex3);
      Complex complex7 = complex5.INF.createComplex(20.0, 2853.68685857);
      Complex complex8 = complex3.ZERO.negate();
      complex8.ZERO.nthRoot(1478);
      complex8.NaN.sqrt();
      Complex.valueOf(3186.107686137413, 2.414213562373095);
      Complex complex9 = complex0.pow((-1554.48498555111));
      complex9.getArgument();
      complex2.getArgument();
      complex7.negate();
      complex9.getArgument();
      complex6.subtract((-760.310890305));
      Complex complex10 = new Complex(2827.667265);
      complex9.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2826.667265));
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex1.ZERO.multiply(575.78919685597);
      complex3.ONE.toString();
      Complex complex4 = complex2.INF.createComplex(Double.POSITIVE_INFINITY, (-5.7169586962345785E-8));
      Complex complex5 = complex4.NaN.subtract((-5.7169586962345785E-8));
      complex5.INF.subtract((-20.0));
      Complex complex6 = complex1.log();
      Complex complex7 = Complex.valueOf((-20.0));
      Complex complex8 = complex6.sinh();
      complex8.I.hashCode();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex1.atan();
      complex10.ZERO.getArgument();
      Complex complex11 = complex0.log();
      complex0.divide(2.0);
      complex9.negate();
      complex1.exp();
      Complex complex12 = complex2.atan();
      complex7.sqrt();
      complex12.subtract((-144.86636955341243));
      complex4.subtract(complex8);
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.47036975622177124, 2.559185648444699E-8);
      complex1.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(773.0, 626.577);
      complex3.createComplex(773.0, (-1.0));
      Complex complex4 = Complex.valueOf((-1.0), 626.577);
      complex4.cosh();
      complex3.tan();
      int int0 = (-3383);
      try { 
        complex2.nthRoot((-3383));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,383
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(804);
      Complex complex2 = Complex.valueOf((double) 804, (double) 804);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex4.I.tan();
      complex4.NaN.tanh();
      complex1.ONE.divide(complex0);
      complex1.I.multiply((-427));
      complex5.divide(complex1);
      complex5.getReal();
      Complex complex6 = complex4.acos();
      complex3.sin();
      Complex complex7 = complex6.sin();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1593.054));
      double double0 = 427.449272;
      complex0.toString();
      Complex complex1 = complex0.I.createComplex((-1593.054), 427.449272);
      Complex complex2 = complex1.reciprocal();
      complex0.abs();
      Complex complex3 = complex2.add(427.449272);
      complex1.multiply(427.449272);
      Complex.valueOf((-1593.054));
      complex0.divide(3.323458344853057E-8);
      complex0.multiply(2.0454950851007314E110);
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cos();
      complex2.NaN.getField();
      complex0.cosh();
      complex0.getArgument();
      Complex complex3 = new Complex((-1732.93683));
      Complex complex4 = complex3.add(Double.NaN);
      complex1.abs();
      Complex complex5 = complex4.asin();
      complex5.log();
      complex4.multiply(0);
      complex4.multiply(1083.10448399033);
      complex1.cosh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.valueOf((-3767.5196435213), (-3767.5196435213));
      complex5.sqrt();
      Complex complex6 = complex1.createComplex(0.0, (-3767.5196435213));
      complex3.log();
      complex4.asin();
      complex6.asin();
      complex4.getField();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(965.8);
      Complex complex1 = Complex.valueOf(3129.71660791056, 626.577);
      Complex complex2 = complex0.INF.multiply(2.3971445233885962E126);
      complex2.pow((-2.927833561443549E-4));
      complex1.log();
      Complex complex3 = complex1.sinh();
      complex3.getReal();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1593.054));
      double double0 = 427.449272;
      complex0.toString();
      Complex complex1 = complex0.I.createComplex((-1593.054), 427.449272);
      complex1.I.cosh();
      complex0.INF.getArgument();
      complex1.ONE.add(621.546404917105);
      complex0.abs();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.multiply(2247);
      Complex complex4 = new Complex(1.4161468365471424, 1.4161468365471424);
      int int0 = (-840);
      complex4.multiply((-840));
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.tan();
      complex3.reciprocal();
      complex0.acos();
      Complex complex6 = Complex.valueOf(1593.054);
      int int1 = (-534);
      try { 
        complex6.nthRoot((-534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -534
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.subtract((-3767.5196435213));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex1.INF.divide(complex0);
      complex4.I.subtract(complex0);
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex5.ONE.divide((-3767.5196435213));
      complex5.ONE.cosh();
      Complex complex7 = complex3.NaN.cosh();
      Complex complex8 = complex1.multiply((-3767.5196435213));
      Complex.valueOf((-3767.5196435213), (-2311.43762973));
      Complex complex9 = complex0.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.add(complex9);
      complex3.ZERO.abs();
      complex10.pow((-3767.5196435213));
      complex3.multiply(507);
      complex0.asin();
      complex6.log();
      Complex complex11 = Complex.ONE;
      complex11.multiply(17);
      complex7.multiply(6.283185307179586);
      Complex complex12 = new Complex((-20.0));
      complex12.cosh();
      complex0.nthRoot(17);
      complex10.equals(complex2);
      complex8.cos();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9942459560614366);
      Complex complex1 = complex0.cos();
      complex0.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.reciprocal();
      complex2.abs();
      complex3.add((-1331.5310869322109));
      complex1.multiply((-1095.7775));
      Complex complex4 = Complex.valueOf(20.0);
      complex0.divide(3.466887271843006E138);
      Complex complex5 = complex2.multiply((-1331.5310869322109));
      Complex complex6 = new Complex(2.0454950851007314E110);
      complex0.pow(complex6);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex3.tanh();
      complex1.log();
      Complex complex9 = complex2.acos();
      complex7.exp();
      complex5.cosh();
      complex8.exp();
      complex9.subtract((-2.5113270522478854E-277));
      complex9.tanh();
      complex8.acos();
      Complex complex10 = new Complex((-2.5113270522478854E-277), 0.0);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.ZERO.pow(0.0);
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = new Complex(1285.9458329, 442.6985521418915);
      complex6.tanh();
      complex1.getField();
      complex5.divide(1285.9458329);
      complex3.sinh();
      complex4.getArgument();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.sin();
      complex1.ZERO.pow(0.0);
      complex2.I.log();
      complex2.I.sinh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.getReal();
      complex1.asin();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(965.8);
      Complex complex1 = Complex.valueOf(3129.71660791056, 626.577);
      Complex complex2 = complex0.INF.multiply(2.3971445233885962E126);
      Complex complex3 = complex0.pow(2.1313950901331177E258);
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex.valueOf(1.418513298034668, 2.1313950901331177E258);
      complex2.sqrt();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.log();
      complex2.acos();
      complex4.exp();
      complex0.cosh();
      complex3.exp();
      complex0.subtract(965.8);
      complex6.tanh();
      complex2.acos();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3782.5738907261), (-3782.5738907261));
      Complex complex1 = Complex.valueOf(2380.27178903228, (-870.039));
      Complex complex2 = complex1.conjugate();
      complex1.exp();
      Complex complex3 = complex2.tan();
      complex3.tanh();
      complex1.divide(complex0);
      complex1.multiply((-427));
      complex2.subtract((-870.039));
      Complex complex4 = Complex.valueOf((-3782.5738907261), 1.3);
      complex4.cos();
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-5.7618793749770706E-8), (-5.7618793749770706E-8));
      Complex complex2 = complex0.add((double) 2491);
      complex2.multiply(2491);
      Complex complex3 = complex1.cos();
      complex1.hashCode();
      complex3.hashCode();
      complex2.nthRoot(2491);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.subtract((-1617.76602437));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = new Complex(567.920443, 2938.93117521012);
      complex3.acos();
      complex4.toString();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex1.divide(complex8);
      Complex complex10 = complex6.sqrt();
      complex6.tanh();
      complex9.tanh();
      Complex complex11 = complex8.atan();
      Complex complex12 = new Complex(20.0, 20.0);
      complex2.add(complex12);
      complex0.tanh();
      complex9.getField();
      complex10.divide(2938.93117521012);
      complex11.sinh();
      complex0.getArgument();
      complex12.sinh();
      complex0.add(complex5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      complex0.atan();
      Complex complex1 = complex0.cos();
      complex1.NaN.getField();
      Complex complex2 = complex0.I.conjugate();
      complex1.I.reciprocal();
      complex1.ONE.abs();
      Complex complex3 = complex0.add(0.7853981633974483);
      complex2.multiply(0.0);
      Complex.valueOf(0.7853981633974483);
      Complex complex4 = complex2.pow(7.855983250237841E-5);
      complex4.log();
      Complex complex5 = Complex.NaN;
      complex5.sinh();
      complex3.getReal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.divide((-1323.524078));
      Complex complex4 = complex3.multiply((-576.6973));
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex5.negate();
      Complex complex7 = new Complex(2220.0155543536653);
      complex7.tanh();
      Complex complex8 = complex6.log();
      complex1.acos();
      complex2.exp();
      complex1.exp();
      complex5.subtract((-1323.524078));
      complex8.tanh();
      complex5.acos();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(2.1753390051977871E-221);
      complex1.NaN.sinh();
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex1.ONE.conjugate();
      complex0.NaN.conjugate();
      Complex complex3 = new Complex(0.0, 2.1753390051977871E-221);
      Complex complex4 = complex3.INF.acos();
      complex4.I.toString();
      complex2.ZERO.divide(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.cosh();
      Complex complex6 = Complex.ONE;
      complex6.tan();
      try { 
        complex2.nthRoot((-3383));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,383
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.559185648444699E-8, 1464.9049);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex0.createComplex(1.0, (-346.5787579494));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex2.tanh();
      complex5.tanh();
      complex4.atan();
      Complex complex7 = Complex.ONE;
      complex1.add(complex7);
      Complex complex8 = complex3.tanh();
      complex6.getField();
      complex2.divide(1.0);
      complex8.sinh();
      complex1.getArgument();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.4459728627968634E222), (-2.4459728627968634E222));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.INF.conjugate();
      complex2.NaN.negate();
      complex2.I.hashCode();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.divide((-2.4459728627968634E222));
      Complex complex5 = complex0.multiply((-2.4459728627968634E222));
      complex0.NaN.add(complex5);
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex4.NaN.reciprocal();
      Complex complex8 = complex6.ZERO.pow(3895.351781229066);
      Complex complex9 = complex8.add((-2.4459728627968634E222));
      Complex complex10 = complex4.multiply((-447));
      Complex complex11 = complex10.INF.pow(complex7);
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex4.add(1.0);
      complex6.INF.hashCode();
      Complex complex14 = complex6.I.subtract(complex11);
      complex4.subtract(0.0);
      complex13.add(1.0);
      complex6.asin();
      Complex.valueOf(4290.0);
      Complex complex15 = complex5.pow(1334.6);
      complex15.NaN.pow(1.0);
      Complex complex16 = complex13.divide(complex9);
      complex16.NaN.hashCode();
      complex4.negate();
      complex12.sqrt1z();
      complex14.sin();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.subtract((-3767.5196435213));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex1.INF.divide(complex0);
      complex4.I.subtract(complex0);
      Complex complex5 = complex4.ONE.divide(complex3);
      complex5.ONE.divide((-3767.5196435213));
      complex5.ONE.cosh();
      Complex complex6 = complex3.NaN.cosh();
      Complex complex7 = complex1.multiply((-3767.5196435213));
      Complex complex8 = Complex.valueOf((-3767.5196435213), (-2311.43762973));
      Complex complex9 = complex0.sin();
      Complex complex10 = complex0.add(complex9);
      complex3.ZERO.abs();
      Complex complex11 = complex10.pow((-3767.5196435213));
      Complex complex12 = complex3.multiply(507);
      Complex complex13 = complex0.asin();
      complex10.multiply(2247);
      Complex complex14 = complex13.multiply(507);
      Complex complex15 = complex3.tan();
      complex13.reciprocal();
      Complex complex16 = complex15.acos();
      complex10.nthRoot(507);
      complex11.multiply(complex8);
      Complex complex17 = complex6.multiply(complex12);
      complex17.getArgument();
      complex4.isNaN();
      Complex complex18 = complex0.pow(0.0);
      complex11.atan();
      complex18.subtract(complex3);
      complex16.multiply(Double.NaN);
      complex14.negate();
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      complex0.INF.asin();
      complex1.getReal();
      complex0.asin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.ZERO.createComplex(Double.NaN, (-1551.8466801057314));
      complex1.getArgument();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.NaN.add(complex2);
      Complex complex9 = complex7.ZERO.reciprocal();
      complex0.tan();
      complex2.ONE.toString();
      complex3.equals(complex5);
      Complex complex10 = complex2.negate();
      complex10.NaN.nthRoot(1622);
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex6.pow(Double.NaN);
      Complex complex13 = complex4.cosh();
      complex13.ZERO.conjugate();
      complex0.getReal();
      complex3.cosh();
      Complex complex14 = complex4.exp();
      complex6.pow(complex9);
      complex1.reciprocal();
      complex14.add(complex5);
      complex12.divide(complex8);
      complex11.isNaN();
      complex0.pow(2098.8457);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2197.0167790314445));
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex1.cos();
      complex3.INF.createComplex((-454.3199), (-2197.0167790314445));
      complex2.I.createComplex((-2197.0167790314445), (-2197.0167790314445));
      Complex.valueOf(Double.NaN);
      complex0.ZERO.tan();
      complex1.I.nthRoot(2198);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex2.atan();
      complex6.I.hashCode();
      Complex complex7 = complex1.log();
      Complex complex8 = complex4.sqrt1z();
      complex7.toString();
      Complex complex9 = complex5.add(Double.NaN);
      complex4.sin();
      complex8.getReal();
      complex0.cosh();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex2.NaN.hashCode();
      Complex complex3 = complex0.divide(2.2867766559333004E-7);
      complex3.ONE.add(complex1);
      Complex complex4 = complex1.INF.asin();
      complex4.ONE.abs();
      complex4.I.cos();
      complex4.ZERO.getArgument();
      Complex complex5 = complex0.tanh();
      complex5.ONE.createComplex(0.0, 0.0);
      complex1.conjugate();
      Complex complex6 = Complex.valueOf((-4691.4661625357));
      complex6.I.tanh();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex0.multiply(complex7);
      complex8.ZERO.toString();
      Complex complex9 = complex8.subtract(853.771595466165);
      Complex complex10 = complex9.ZERO.atan();
      complex0.abs();
      complex9.sqrt();
      complex10.sqrt();
      Complex complex11 = complex3.multiply(354.09);
      complex11.sqrt1z();
      complex10.tan();
      complex3.subtract(complex4);
      complex2.multiply(0.0);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.divide(complex1);
      complex3.NaN.abs();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ZERO.add(complex0);
      Complex complex6 = complex1.sqrt1z();
      complex4.acos();
      int int0 = 1;
      Complex complex7 = complex6.ONE.multiply(1);
      complex7.ONE.pow(0.0);
      complex1.ZERO.tanh();
      complex3.ZERO.add(complex5);
      complex6.nthRoot(320);
      complex4.INF.tan();
      complex6.multiply(1);
      complex0.getField();
      Complex complex8 = complex2.asin();
      complex4.getImaginary();
      try { 
        complex8.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(2.1753390051977871E-221);
      Complex complex2 = complex1.NaN.sinh();
      complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.ONE.conjugate();
      complex0.NaN.conjugate();
      Complex complex4 = new Complex(0.0, 2.1753390051977871E-221);
      Complex complex5 = complex4.INF.acos();
      complex5.I.toString();
      complex3.ZERO.divide(complex4);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.INF.tanh();
      complex6.ONE.tanh();
      complex7.INF.atan();
      Complex complex8 = complex7.NaN.add(complex2);
      complex8.NaN.tanh();
      complex1.getField();
      complex1.divide((-3041.80391331778));
      complex4.sinh();
      complex2.getArgument();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1593.054));
      complex0.toString();
      Complex complex1 = complex0.I.createComplex((-1593.054), 427.449272);
      complex1.I.cosh();
      complex0.INF.getArgument();
      Complex complex2 = complex1.ONE.add(621.546404917105);
      complex0.abs();
      complex1.asin();
      complex0.log();
      Complex complex3 = complex0.multiply(0);
      complex3.ZERO.multiply((-20.0));
      complex1.cosh();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getField();
      complex0.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(1.0);
      complex2.getArgument();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.sinh();
      complex4.sin();
      complex5.ZERO.getField();
      complex5.NaN.asin();
      Complex complex6 = complex0.INF.add(complex3);
      Complex complex7 = complex4.tanh();
      complex0.ONE.readResolve();
      complex4.multiply(0.0);
      Complex complex8 = complex1.acos();
      complex3.sqrt();
      complex3.nthRoot(948);
      Complex complex9 = complex0.negate();
      complex9.readResolve();
      complex9.INF.hashCode();
      Complex complex10 = complex7.pow(0.0);
      complex10.I.sqrt1z();
      complex10.ONE.multiply(183);
      complex6.nthRoot(1242);
      complex5.sqrt1z();
      complex8.tan();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.I.divide(1.0692462289051038E-258);
      int int0 = 0;
      Complex complex3 = complex2.ONE.multiply(0);
      complex3.I.toString();
      Complex complex4 = complex2.INF.pow(470.03);
      complex4.ZERO.asin();
      Complex complex5 = complex0.ONE.log();
      complex5.INF.hashCode();
      complex5.ZERO.hashCode();
      Complex complex6 = complex0.sin();
      complex3.ZERO.atan();
      Complex.valueOf(1.0692462289051038E-258);
      Complex complex7 = complex2.tanh();
      complex7.multiply((-1));
      complex0.exp();
      complex3.toString();
      complex5.isInfinite();
      Complex complex8 = complex3.INF.createComplex(0, 2207.0);
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.tanh();
      complex10.NaN.subtract(1.0692462289051038E-258);
      complex8.log();
      complex2.asin();
      Complex complex11 = complex0.exp();
      complex6.reciprocal();
      complex0.sin();
      try { 
        complex11.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.reciprocal();
      Complex complex1 = Complex.valueOf((-3779.6266));
      Complex complex2 = Complex.valueOf(590.53911518);
      complex1.NaN.acos();
      complex2.I.add(590.53911518);
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex3.ZERO.createComplex((-1938.7635052), (-3779.6266));
      complex4.ONE.cosh();
      Complex.valueOf((-3779.6266), (-5502.2));
      Complex.valueOf((-1022.635004026975), 1100.63256345654);
      complex0.getReal();
      Complex complex5 = Complex.valueOf((-1.3584500601329896E-8), Double.NaN);
      Complex.valueOf((-1234.2804));
      complex5.equals(complex1);
      complex0.hashCode();
      complex5.INF.readResolve();
      Complex complex6 = Complex.ONE;
      complex1.INF.add(complex6);
      complex3.getField();
      complex3.subtract(complex4);
      Complex complex7 = complex1.multiply(7);
      complex7.INF.subtract(complex1);
      complex5.getImaginary();
      complex5.tan();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-336.49));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.INF.conjugate();
      Complex.valueOf((-336.49));
      complex3.atan();
      Complex complex4 = complex2.INF.divide((-336.49));
      Complex complex5 = complex0.pow((-336.49));
      complex5.ZERO.add((-1453.251));
      complex2.pow(complex5);
      complex4.toString();
      complex4.tanh();
      complex4.multiply((-336.49));
      try { 
        complex5.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.559185648444699E-8, 1464.9049);
      complex1.tan();
      complex0.I.subtract(complex1);
      complex0.createComplex(1.0, (-346.5787579494));
      Complex complex2 = complex0.cosh();
      complex2.ZERO.tan();
      int int0 = (-3383);
      try { 
        complex1.nthRoot((-3383));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,383
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      complex1.I.toString();
      Complex complex2 = complex0.INF.atan();
      complex2.ONE.sqrt();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex3.NaN.createComplex((-5097.3471584), (-5097.3471584));
      complex0.NaN.multiply(complex5);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.sqrt1z();
      complex7.I.getField();
      complex6.nthRoot(1);
      complex3.divide(4880.4922701);
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex8.add(complex6);
      Complex complex10 = complex9.ONE.exp();
      complex10.ZERO.abs();
      complex2.toString();
      complex4.toString();
      complex1.sqrt1z();
      complex5.tan();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.NaN.getArgument();
      complex1.I.readResolve();
      Complex complex2 = complex0.add(20.0);
      complex2.ZERO.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.I.tan();
      complex2.getField();
      complex3.hashCode();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.add(0.0);
      complex7.ZERO.divide(complex5);
      complex5.log();
      complex6.getReal();
      Complex complex8 = complex2.divide(complex5);
      complex0.getReal();
      complex5.acos();
      complex4.sin();
      complex1.sin();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-27.36));
      Complex complex2 = complex1.ZERO.createComplex((-27.36), (-27.36));
      complex0.I.getArgument();
      complex0.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.pow(807.39876);
      complex4.hashCode();
      Complex complex5 = complex4.multiply(3551.24169857543);
      Complex complex6 = complex0.I.log();
      complex6.cosh();
      complex0.INF.cos();
      complex3.ONE.readResolve();
      complex5.pow(0.0);
      complex2.getReal();
      complex3.hashCode();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.sinh();
      int int0 = (-1632);
      try { 
        complex0.ONE.nthRoot((-1632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,632
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(804);
      Complex complex2 = Complex.valueOf((double) 804, (double) 804);
      complex2.ONE.conjugate();
      Complex complex3 = complex2.NaN.exp();
      complex3.I.tan();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex1.ONE.divide(complex0);
      complex1.I.multiply((-427));
      Complex complex6 = complex5.NaN.subtract(0.0);
      complex0.cos();
      complex6.equals(complex4);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.sin();
      complex1.ZERO.pow(0.0);
      complex2.I.log();
      complex2.I.sinh();
      complex0.getReal();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.ONE.cosh();
      complex2.ONE.log();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.add(0.0);
      complex7.I.divide(962.74833);
      complex4.abs();
      Complex complex8 = complex0.acos();
      complex8.readResolve();
      complex2.INF.nthRoot(1);
      complex1.conjugate();
      Complex complex9 = complex8.exp();
      Complex complex10 = new Complex((-2273.7502242825));
      complex9.ONE.multiply(complex10);
      Complex complex11 = complex4.pow(complex2);
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex12.I.tanh();
      complex13.ZERO.sqrt();
      complex3.add(0.0);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-803.776314), 1331.1837677546412);
      Complex complex1 = complex0.createComplex(0.0, 7.066491077377918E172);
      Complex complex2 = Complex.I;
      complex1.add(complex2);
      complex1.ONE.asin();
      Complex complex3 = complex1.sqrt();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(965.8);
      Complex complex1 = Complex.valueOf(3129.71660791056, 626.577);
      Complex complex2 = complex0.INF.multiply(2.3971445233885962E126);
      Complex complex3 = complex0.pow(2.1313950901331177E258);
      complex3.NaN.divide(complex1);
      Complex.valueOf(1.418513298034668, 2.1313950901331177E258);
      Complex complex4 = complex2.sqrt();
      complex4.NaN.createComplex(2791.1294465, 0.0);
      Complex complex5 = complex2.NaN.log();
      complex5.asin();
      complex2.asin();
      complex4.getField();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.add(0.0);
      Complex complex3 = complex0.ZERO.atan();
      complex3.INF.log();
      complex1.ONE.conjugate();
      complex0.readResolve();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.sqrt();
      complex4.log();
      complex4.add(0.0);
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.add(1.0);
      complex2.NaN.hashCode();
      double double0 = 0.0;
      complex1.createComplex(0.0, 0.0);
      double double1 = (-1788.697867);
      Complex complex3 = Complex.valueOf((-1788.697867), (-77.176837312));
      Complex complex4 = complex1.I.exp();
      complex4.INF.divide((-77.176837312));
      complex3.INF.tan();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1530.0598375), (-1530.0598375));
      complex1.ZERO.asin();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.getArgument();
      Complex complex3 = Complex.valueOf((-1530.0598375));
      complex3.NaN.pow(803.441);
      Complex complex4 = complex0.NaN.tan();
      complex4.ZERO.hashCode();
      complex0.tanh();
      complex4.NaN.sin();
      Complex complex5 = complex4.pow((-1530.0598375));
      complex5.NaN.readResolve();
      complex5.isInfinite();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2275.5718729692, 2275.5718729692);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.ONE.conjugate();
      complex0.getImaginary();
      complex0.hashCode();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.ZERO.divide(complex2);
      Complex complex7 = complex2.asin();
      complex0.ZERO.createComplex(1690.7, 261);
      Complex complex8 = complex7.I.multiply(261);
      Complex complex9 = Complex.valueOf(738.11);
      complex9.multiply(complex8);
      complex3.getField();
      complex4.multiply((-40));
      complex6.asin();
      Complex complex10 = Complex.valueOf(0.0, 2275.5718729692);
      complex5.readResolve();
      complex10.divide(0.0);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cos();
      complex2.NaN.getField();
      Complex complex3 = complex0.I.conjugate();
      complex2.I.reciprocal();
      complex2.ONE.abs();
      Complex complex4 = complex0.add(0.7853981633974483);
      complex3.multiply(0.0);
      Complex complex5 = Complex.valueOf(0.7853981633974483);
      complex5.ZERO.divide((-576.6973));
      complex4.NaN.multiply(2.0454950851007314E110);
      Complex complex6 = complex4.pow(complex0);
      complex6.ONE.negate();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.log();
      complex1.NaN.acos();
      complex8.I.exp();
      complex7.cosh();
      complex1.exp();
      Complex complex9 = complex3.subtract(0.7853981633974483);
      complex9.tanh();
      complex8.acos();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex2.I.exp();
      complex3.NaN.divide(complex2);
      complex3.I.cosh();
      Complex complex4 = complex2.INF.divide(0.0);
      complex2.I.createComplex(0.0, (-1801.5369));
      Complex complex5 = Complex.valueOf(0.0, 846.166053);
      Complex complex6 = complex5.ONE.pow(complex4);
      complex6.ZERO.multiply(complex5);
      Complex complex7 = complex5.multiply((-3826));
      complex7.NaN.cosh();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3782.5738907261), (-3782.5738907261));
      complex0.ZERO.add((double) 2491);
      Complex complex1 = complex0.I.multiply(2491);
      complex0.I.cos();
      complex0.hashCode();
      complex0.hashCode();
      complex0.nthRoot(1195);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.ZERO.cos();
      complex3.abs();
      complex0.I.abs();
      complex0.I.nthRoot(576);
      Complex complex4 = complex0.cosh();
      complex4.INF.sin();
      complex4.ONE.toString();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.ONE.exp();
      complex7.ZERO.nthRoot(576);
      complex5.negate();
      Complex complex8 = Complex.valueOf((double) 576, 413.0636609104287);
      complex5.getField();
      complex6.cos();
      complex4.abs();
      complex8.I.hashCode();
      complex0.createComplex((-1319.17212), (-2383.0));
      Complex complex9 = complex0.multiply(0);
      complex9.subtract(complex0);
      complex4.isInfinite();
      complex8.log();
      complex0.reciprocal();
      complex3.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-316.3180915));
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.exp();
      complex0.ONE.createComplex(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      complex0.multiply((-3237.80233));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.subtract(0.0);
      complex3.NaN.nthRoot(7);
      complex2.add(complex3);
      complex3.asin();
      complex3.nthRoot(1);
      complex3.subtract((double) 7);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getField();
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.cosh();
      complex1.NaN.hashCode();
      complex0.getField();
      complex0.getArgument();
      Complex complex4 = Complex.valueOf(0.0, 0.7853981633974483);
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.I.log();
      Object object0 = complex0.readResolve();
      complex0.cosh();
      Complex complex8 = complex3.exp();
      complex7.readResolve();
      complex8.ZERO.hashCode();
      Complex complex9 = complex0.pow(372.5649030615903);
      Complex complex10 = complex5.acos();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex7.ZERO.negate();
      Complex complex12 = Complex.valueOf(0.7853981633974483, (-1049.885660729));
      Complex complex13 = complex9.ONE.atan();
      assertEquals(0.7853981633974483, complex13.getReal(), 0.01);
      
      complex7.exp();
      complex7.nthRoot(1637);
      complex7.getImaginary();
      Complex complex14 = complex3.pow(2009.0563067);
      complex7.sin();
      Complex complex15 = complex12.multiply(complex11);
      assertTrue(complex15.equals((Object)complex14));
      
      Complex complex16 = complex9.acos();
      complex4.exp();
      complex11.toString();
      assertNotSame(complex6, complex2);
      assertSame(complex6, complex16);
      assertTrue(complex0.equals((Object)object0));
      
      Complex complex17 = complex12.sin();
      assertTrue(complex17.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex17.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.divide((-1728.80065717201));
      Complex complex3 = complex0.INF.sinh();
      complex0.ZERO.hashCode();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex4.INF.sqrt1z();
      complex0.getField();
      complex0.toString();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.ONE.subtract((-734.44));
      complex4.abs();
      String string0 = complex5.toString();
      assertEquals("(NaN, -Infinity)", string0);
      
      complex7.createComplex(3205.9329092843655, (-1.5449538712332313E-8));
      Complex complex8 = complex5.divide((-734.44));
      Complex complex9 = complex0.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex7.subtract(complex8);
      assertTrue(complex11.equals((Object)complex9));
      assertEquals(735.44, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertSame(complex11, complex10);
      
      Object object0 = complex8.readResolve();
      complex4.equals(object0);
      Complex complex12 = complex2.log();
      Complex complex13 = complex3.log();
      assertNotSame(complex13, complex12);
      
      Complex complex14 = complex1.pow(1.1622881889343262);
      assertEquals(0.48804055350201947, complex14.getImaginary(), 0.01);
  }
}
