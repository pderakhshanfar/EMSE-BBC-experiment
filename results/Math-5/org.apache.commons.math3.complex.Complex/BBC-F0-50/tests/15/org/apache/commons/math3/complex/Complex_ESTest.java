/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:07:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf(749.56385, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = new Complex((-0.9996159447946292), Double.POSITIVE_INFINITY);
      complex2.multiply(complex3);
      complex3.nthRoot(1261);
      complex2.readResolve();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.617018127348274E-12);
      Complex complex1 = new Complex(4847.4955977434165, 20.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.reciprocal();
      complex0.nthRoot(36);
      complex1.tan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(5.9994277301267294E175);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.tanh();
      complex0.pow(20.0);
      try { 
        complex1.nthRoot((-2568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,568
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1170.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      complex1.sinh();
      complex1.abs();
      complex1.cosh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(Double.NaN);
      Complex complex3 = complex2.tan();
      complex3.add(complex2);
      complex0.add(672.22);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(7.617018127348274E-12);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      complex0.asin();
      Complex complex4 = complex2.sinh();
      complex0.tan();
      complex3.sqrt();
      complex4.add(20.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.atan();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-541.716));
      Complex complex1 = complex0.reciprocal();
      complex0.getArgument();
      complex0.multiply(complex1);
      complex0.asin();
      Complex complex2 = Complex.valueOf(0.0037138836379846814, Double.POSITIVE_INFINITY);
      complex2.multiply(7);
      complex0.abs();
      complex2.pow(541.716);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      complex0.divide(3.199872062545402);
      Complex.valueOf(3.199872062545402);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.abs();
      complex0.ZERO.conjugate();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1681.1531974153788, Double.NaN);
      complex1.tanh();
      Complex complex2 = Complex.I;
      complex2.log();
      complex2.sqrt1z();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-404.78099));
      Complex complex1 = complex0.sinh();
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ONE.tan();
      complex2.ONE.cosh();
      Complex complex3 = complex1.ZERO.pow(complex0);
      complex3.ONE.getField();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.add(Double.NaN);
      complex5.reciprocal();
      complex4.NaN.cosh();
      complex0.nthRoot(37);
      complex2.log();
      complex2.pow((-1282.5534855274843));
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.INF;
      complex1.multiply(complex2);
      Complex complex3 = Complex.INF;
      complex2.getField();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-217.1629731));
      Complex complex5 = complex4.reciprocal();
      complex3.getArgument();
      complex1.multiply(complex5);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(578.77161211, 1.6691582322891918E-4);
      complex0.INF.sin();
      Complex complex1 = complex0.I.subtract(2024.3498618391);
      Complex complex2 = Complex.valueOf(2024.3498618391, 2566.0001948558215);
      complex1.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.add(complex2);
      complex3.ONE.acos();
      Complex.valueOf((-891.8));
      complex2.NaN.readResolve();
      complex1.asin();
      Complex complex4 = complex3.multiply(1.6691582322891918E-4);
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex2.NaN.subtract(complex5);
      complex4.add(20.0);
      complex3.toString();
      Complex complex7 = complex1.pow(198.8);
      Complex.valueOf(477.6356, 578.77161211);
      complex7.sqrt();
      Complex.valueOf(2566.0001948558215);
      Complex complex8 = complex0.add(complex6);
      complex8.readResolve();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.sqrt1z();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ZERO;
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      complex2.divide(complex1);
      Complex complex3 = Complex.I;
      complex0.isInfinite();
      complex1.getImaginary();
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1679.3);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = Complex.valueOf((-2111.630120946347), (-1638.632));
      complex0.abs();
      Complex complex4 = complex0.sin();
      complex4.I.abs();
      Complex complex5 = complex0.createComplex((-1056.2228909803218), 1817.807);
      complex1.sin();
      Complex complex6 = complex5.NaN.multiply((-3855.308));
      complex2.ZERO.subtract(complex1);
      complex5.toString();
      complex4.pow(complex2);
      complex6.getField();
      complex0.cos();
      complex3.subtract((-1056.2228909803218));
      complex1.pow((-2111.630120946347));
      Complex complex7 = complex5.pow(complex1);
      Complex complex8 = complex6.asin();
      Complex complex9 = Complex.valueOf((-1056.2228909803218));
      complex8.I.multiply(complex9);
      complex4.nthRoot(4108);
      complex3.sqrt1z();
      complex3.sqrt();
      // Undeclared exception!
      complex7.nthRoot(4108);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.exp();
      Complex complex1 = Complex.INF;
      complex1.abs();
      complex0.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = Complex.valueOf(20.0);
      double double1 = (-2187.0887336638);
      Complex complex1 = Complex.valueOf((-2187.0887336638));
      complex0.I.abs();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.I.tanh();
      complex2.INF.divide(complex1);
      try { 
        complex3.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.I;
      complex4.readResolve();
      complex4.isInfinite();
      complex1.getImaginary();
      complex0.tan();
      complex4.createComplex(4052.46811, Double.NEGATIVE_INFINITY);
      complex0.add(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.multiply(2.5486068725585938);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex0.cosh();
      complex4.nthRoot(4202);
      complex4.NaN.toString();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.sqrt();
      complex6.INF.sin();
      complex0.subtract((-472.87));
      complex1.I.subtract(complex3);
      Complex complex7 = complex5.tanh();
      complex7.INF.subtract(complex4);
      complex2.getField();
      Complex complex8 = complex7.acos();
      complex8.I.cosh();
      complex1.cosh();
      Complex complex9 = complex4.tan();
      complex9.ZERO.multiply(20.0);
      complex4.acos();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.negate();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
      complex2.createComplex(1.0, 1.0);
      complex3.isInfinite();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.add(2.1478649410390003E-162);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1211.6875297848));
      complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.atan();
      complex0.ZERO.atan();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.pow(complex2);
      complex2.I.exp();
      Complex complex5 = complex4.exp();
      complex5.ZERO.multiply(complex3);
      Complex complex6 = complex3.negate();
      Complex complex7 = complex5.NaN.reciprocal();
      Complex complex8 = complex3.pow(complex6);
      complex7.I.asin();
      complex8.cosh();
      Complex complex9 = complex5.I.acos();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex5.pow((-1211.6875297848));
      complex11.abs();
      complex4.add(complex7);
      complex9.log();
      complex3.exp();
      complex4.tan();
      complex10.sinh();
      complex6.conjugate();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2383.655, 1293.1);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.add((-595.981646556827));
      Complex complex4 = complex3.tan();
      complex4.ZERO.add(complex2);
      complex3.I.reciprocal();
      Complex complex5 = complex2.sqrt1z();
      complex5.I.toString();
      Complex complex6 = Complex.valueOf((-595.981646556827), 2383.655);
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.valueOf((-408.7155751), (-408.7155751));
      complex8.ZERO.add(complex0);
      complex6.toString();
      Complex complex9 = complex2.asin();
      complex6.INF.reciprocal();
      Complex complex10 = complex6.add((-1111.935241));
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex11.NaN.createComplex((-595.981646556827), 6.3890560989306495);
      Complex complex13 = complex12.ONE.subtract(complex0);
      complex13.ZERO.getArgument();
      complex10.NaN.getArgument();
      complex2.INF.atan();
      complex5.readResolve();
      complex6.acos();
      complex9.sqrt1z();
      complex2.abs();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.add(complex0);
      complex3.nthRoot(603);
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex5.tan();
      complex1.getArgument();
      complex4.exp();
      complex1.toString();
      Complex complex7 = complex6.add(complex0);
      complex7.tan();
      complex1.tanh();
      Complex complex8 = Complex.INF;
      complex4.add(complex0);
      Complex complex9 = new Complex((-1.5707963267948966), 3970.4322976449);
      Complex complex10 = new Complex(3970.4322976449, (-1283));
      complex3.negate();
      complex6.cosh();
      complex3.tanh();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(20.0);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.tan();
      complex4.getArgument();
      complex1.exp();
      complex0.toString();
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      complex5.add(complex4);
      complex1.tan();
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.INF;
      complex4.add(complex7);
      Complex complex8 = new Complex(1.5841615940018272, 0.0);
      Complex complex9 = new Complex(20.0, (-4692.421643222));
      complex7.negate();
      complex3.cosh();
      complex6.tanh();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      try { 
        complex2.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-1283));
      Complex complex1 = complex0.multiply((double) (-1283));
      Complex complex2 = complex1.ZERO.atan();
      complex2.tan();
      Complex complex3 = complex0.tanh();
      complex1.cos();
      Complex complex4 = complex3.createComplex(56, 56);
      complex3.isInfinite();
      complex3.getArgument();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ONE;
      complex5.pow(complex4);
      complex0.cosh();
      complex3.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1805));
      complex1.multiply(0.13755163550376892);
      complex0.atan();
      Complex complex2 = Complex.valueOf((-1451.0), 1.0127761363983154);
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.INF;
      complex3.divide(complex4);
      Complex complex5 = Complex.I;
      complex5.readResolve();
      complex1.equals(complex2);
      complex2.tan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf(2865.84056, 1.6058173179626465);
      complex1.multiply(complex4);
      Complex complex5 = complex2.conjugate();
      complex4.getField();
      Complex complex6 = Complex.valueOf(2865.84056, 2865.84056);
      complex4.reciprocal();
      complex3.getArgument();
      complex0.multiply(complex2);
      complex4.asin();
      complex5.atan();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2080.791292, 2080.791292);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply((-475));
      Complex complex3 = complex2.multiply(Double.NaN);
      complex1.atan();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex3.negate();
      Complex complex4 = Complex.valueOf(4.8182788286170926E89, 4.8182788286170926E89);
      Complex complex5 = complex4.divide(complex3);
      complex5.readResolve();
      complex4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      complex0.INF.add(1380.93);
      Complex complex2 = complex0.NaN.tanh();
      complex0.log();
      Complex complex3 = complex2.divide(complex1);
      Object object0 = new Object();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ONE.add(complex0);
      complex2.I.nthRoot(1);
      Complex complex5 = complex4.pow(complex2);
      complex3.ONE.tan();
      complex4.ONE.getArgument();
      Complex complex6 = complex2.ZERO.exp();
      complex4.toString();
      Complex complex7 = complex6.add(complex4);
      complex3.tan();
      complex5.tanh();
      complex3.cos();
      Complex complex8 = Complex.ZERO;
      complex8.createComplex(1, 0.0);
      complex7.isInfinite();
      Complex complex9 = Complex.INF;
      complex9.getArgument();
      Complex complex10 = complex8.divide((double) 1);
      Complex.valueOf(1.0);
      Complex complex11 = complex6.pow(complex7);
      complex10.cosh();
      complex11.add((-1982.5));
      complex2.hashCode();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = new Complex((-328.5736436379026), 2914.569);
      complex12.subtract(complex13);
      Complex complex14 = new Complex(Double.POSITIVE_INFINITY, 0.6218148469924927);
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-481));
      Complex complex1 = complex0.multiply((double) (-481));
      complex0.atan();
      Complex complex2 = Complex.valueOf((double) (-462), 4625.74796937957);
      complex1.negate();
      complex2.divide(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply((double) (-1283));
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.tanh();
      complex1.log();
      complex0.divide(complex3);
      Object object0 = new Object();
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.INF.add(1380.93);
      Complex complex3 = Complex.valueOf(1380.93, 1380.93);
      complex2.nthRoot(56);
      complex1.asin();
      complex3.multiply(complex2);
      Complex complex4 = new Complex(56);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      complex3.conjugate();
      Complex complex4 = Complex.ONE;
      complex4.add(complex0);
      complex1.nthRoot(1569);
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex2.tan();
      Complex complex7 = new Complex(1.0);
      complex7.getArgument();
      complex2.exp();
      complex5.toString();
      Complex complex8 = complex5.add(complex1);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.tan();
      complex4.tanh();
      complex8.cos();
      Complex complex11 = complex9.createComplex(1753.89071163, 1.0);
      complex10.isInfinite();
      complex11.getArgument();
      complex11.divide((-512.570335930616));
      Complex.valueOf((-398.2));
      Complex complex12 = complex1.pow(complex4);
      complex11.cosh();
      complex12.multiply(466.42);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply((double) (-1283));
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = Complex.valueOf((double) (-1283), 0.0);
      Complex complex5 = complex4.negate();
      complex1.divide(complex5);
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ONE.add(complex0);
      complex2.I.nthRoot(1);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex3.ONE.tan();
      complex4.ONE.getArgument();
      Complex complex7 = complex2.ZERO.exp();
      complex4.toString();
      Complex complex8 = complex7.add(complex4);
      complex3.tan();
      complex5.tanh();
      Complex complex9 = complex3.cos();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.createComplex(1, 0.0);
      complex8.isInfinite();
      complex7.getArgument();
      complex7.divide(0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex1.pow(complex6);
      complex8.cosh();
      Complex complex13 = complex11.add((double) 1);
      complex9.hashCode();
      complex1.subtract(complex13);
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.tanh();
      complex3.multiply(1478);
      complex3.ONE.subtract(0.0);
      complex0.pow(complex1);
      complex4.getReal();
      Complex complex5 = new Complex(1.5430806348152437, 6.283185307179586);
      complex3.equals(complex5);
      Complex complex6 = complex5.cosh();
      complex6.sinh();
      complex5.cos();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-598.0));
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = new Complex((-598.0), (-598.0));
      complex2.negate();
      complex5.cosh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      complex2.multiply(complex1);
      double double0 = (-148.644726232589);
      Complex complex3 = Complex.valueOf((-148.644726232589));
      complex3.conjugate();
      Complex complex4 = null;
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1884.5753035));
      Complex complex1 = Complex.I;
      complex1.ONE.tanh();
      Complex complex2 = complex1.INF.sin();
      complex2.I.sinh();
      complex0.ONE.multiply(complex1);
      complex0.getImaginary();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.I.reciprocal();
      complex4.I.readResolve();
      complex0.ONE.divide((-1884.5753035));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1018.55, 595.22487);
      Complex.valueOf(595.22487, 1018.55);
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.INF.subtract(complex2);
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex4.multiply(complex0);
      complex5.multiply(complex1);
      complex4.negate();
      complex0.isInfinite();
      complex0.asin();
      complex3.I.getArgument();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex6.INF.pow(1331.920300793801);
      Complex complex9 = complex8.NaN.cosh();
      complex9.ZERO.subtract((-123.875));
      complex3.readResolve();
      complex2.cosh();
      complex7.abs();
      complex5.createComplex(1367.7, 3705.10040068406);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex2.NaN.subtract((-3844.8924));
      Complex complex5 = complex2.I.atan();
      complex5.ONE.tan();
      Complex.valueOf((-1.0), Double.NaN);
      complex5.multiply(complex4);
      Complex complex6 = complex2.conjugate();
      complex3.getField();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.reciprocal();
      complex0.getArgument();
      complex8.multiply(complex7);
      complex6.asin();
      Complex complex9 = new Complex(538.5124060702723, (-1.0));
      complex9.multiply((-1559));
      complex9.atan();
      complex3.isInfinite();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf((double) 1, 2175.193947);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tan();
      complex0.getArgument();
      Complex complex4 = complex2.exp();
      complex3.toString();
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.tan();
      complex1.tanh();
      complex2.cos();
      Complex complex8 = complex5.createComplex((-3775.942765136), 2175.193947);
      Complex complex9 = new Complex(2175.193947);
      complex9.isInfinite();
      complex6.getArgument();
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex10.divide((-2263.66958158));
      Complex.valueOf(Double.NaN);
      complex8.pow(complex9);
      complex1.cosh();
      Complex complex12 = Complex.valueOf((-2263.66958158), (-3775.942765136));
      complex12.add((double) 1);
      complex4.hashCode();
      complex11.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-1283));
      Complex complex1 = complex0.multiply((double) (-1283));
      Complex complex2 = complex1.ZERO.atan();
      Complex.valueOf((double) (-1283), 0.0);
      complex1.negate();
      complex1.divide(complex2);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract((double) 17);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.tan();
      complex3.createComplex(1522.595484337487, 17);
      Complex complex5 = complex4.subtract(0.9996933136308475);
      Complex complex6 = complex0.multiply(538.5124060702723);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex7.add(complex9);
      Complex complex11 = Complex.valueOf((-1.0));
      complex6.abs();
      Complex complex12 = complex5.pow((double) 17);
      Complex.valueOf((-6226.65899), (-3844.8924));
      complex10.sin();
      complex11.sin();
      complex2.sqrt();
      complex12.multiply(0.0);
      complex1.pow(0.0);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2108.5);
      Complex complex1 = new Complex((-184.835223866546), (-1589.5));
      complex1.I.getArgument();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.NaN.add(1.5707963267948966);
      complex0.multiply((-184.835223866546));
      complex1.atan();
      Complex complex4 = Complex.valueOf((-1589.5), (-184.835223866546));
      complex1.negate();
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex6);
      complex0.pow((-184.835223866546));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.I.divide(20.0);
      complex3.negate();
      Complex.valueOf(1.688911928929718E-48, 1.688911928929718E-48);
      complex0.atan();
      complex1.sin();
      complex3.sqrt();
      complex0.multiply(1.688911928929718E-48);
      complex2.pow(6.283185307179586);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      complex2.nthRoot(1);
      complex0.pow(complex1);
      Complex complex3 = complex1.tan();
      complex1.getArgument();
      Complex complex4 = Complex.valueOf((-3022.70821), 642139.6670342401);
      Complex complex5 = complex4.exp();
      complex0.toString();
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex0.tan();
      complex5.tanh();
      complex1.cos();
      complex7.createComplex(-0.0, (-3022.70821));
      complex6.isInfinite();
      complex3.getArgument();
      complex6.divide((-3022.70821));
      Complex complex8 = Complex.valueOf((double) 17);
      Complex complex9 = complex6.pow(complex3);
      complex8.cosh();
      Complex complex10 = complex9.add(Double.NaN);
      complex4.hashCode();
      complex10.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex1.multiply(413);
      Complex complex3 = complex0.atan();
      complex2.getField();
      complex2.atan();
      complex2.INF.reciprocal();
      complex3.cos();
      Complex complex4 = complex2.acos();
      complex2.reciprocal();
      Complex complex5 = new Complex(1.0);
      complex5.readResolve();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex0.atan();
      complex1.getField();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.atan();
      complex2.cos();
      complex4.acos();
      Complex complex5 = Complex.valueOf((-3247.490111), (double) 17);
      complex5.reciprocal();
      Complex complex6 = Complex.NaN;
      complex6.readResolve();
      Complex complex7 = Complex.ONE;
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.abs();
      complex0.getArgument();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.add((-597.6477));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.subtract(complex5);
      complex2.equals(complex6);
      complex4.readResolve();
      complex5.sin();
      complex7.pow(complex3);
      Complex complex9 = complex3.atan();
      Complex complex10 = complex9.createComplex(399.643435313, 0.0);
      complex3.sinh();
      Complex complex11 = complex5.sqrt1z();
      complex6.sin();
      Complex complex12 = new Complex(399.643435313);
      complex12.reciprocal();
      Complex complex13 = complex11.pow((-742.4040894661));
      complex7.equals(complex10);
      Complex complex14 = complex9.sinh();
      complex14.I.exp();
      complex10.createComplex(2596.11, (-4809.539522));
      complex8.add(complex12);
      complex13.sinh();
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2108.5);
      Complex complex1 = new Complex((-184.835223866546), (-1589.5));
      complex1.add(complex0);
      complex1.cos();
      complex1.tanh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply(688);
      complex1.subtract(2.414213562373095);
      Complex complex4 = complex1.pow(complex0);
      complex1.getReal();
      complex4.equals("(");
      Complex complex5 = Complex.valueOf(2.0);
      complex5.cosh();
      complex3.sinh();
      complex5.cos();
      Complex complex6 = new Complex(2.414213562373095, 503.56061754941);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply((double) (-1283));
      complex2.getArgument();
      Complex complex3 = complex1.add(0.0);
      complex3.divide(complex0);
      Complex complex4 = Complex.ZERO;
      complex4.toString();
      Complex complex5 = complex0.conjugate();
      complex5.asin();
      Complex complex6 = Complex.valueOf((-2.390559468285979));
      Complex complex7 = complex3.multiply(complex6);
      complex6.divide((double) (-1657));
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      complex2.multiply(1);
      complex2.atan();
      complex0.getField();
      Complex complex3 = complex0.atan();
      complex2.cos();
      Complex complex4 = new Complex(1, 0.0);
      complex4.acos();
      complex1.reciprocal();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.conjugate();
      Complex complex3 = complex1.ONE.add(complex0);
      complex2.I.nthRoot(1);
      Complex complex4 = complex2.add((-3378.156416934));
      Complex complex5 = complex1.sinh();
      complex5.isInfinite();
      complex0.acos();
      Complex complex6 = complex1.sin();
      complex2.hashCode();
      complex1.pow(4390.4802029);
      complex6.pow(1769.684);
      complex5.sin();
      Complex complex7 = Complex.ONE;
      complex3.divide(complex7);
      Complex.valueOf(28.31178);
      Complex.valueOf(6.283185307179586);
      complex0.sqrt1z();
      complex4.getField();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply((double) (-1283));
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = Complex.valueOf((double) (-1283), 0.0);
      Complex complex5 = complex4.INF.subtract(complex0);
      complex5.ONE.createComplex((-1283), 0.05256241787122208);
      complex2.negate();
      complex2.divide(complex3);
      complex1.equals(complex0);
      complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.pow((-1.0));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex3.divide((-20.0));
      Complex.valueOf(610.4172714, (-585.9));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.multiply(complex2);
      complex5.conjugate();
      complex7.getField();
      Complex complex8 = complex5.cos();
      Complex complex9 = new Complex(2865.84056, (-1.0));
      complex9.reciprocal();
      complex4.getArgument();
      Complex complex10 = complex8.multiply(complex3);
      complex3.asin();
      Complex complex11 = Complex.valueOf(610.4172714, (-1.0));
      complex11.atan();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.pow((-1.0));
      Complex complex2 = complex0.tanh();
      complex2.INF.log();
      Complex complex3 = complex2.divide((-20.0));
      complex3.ZERO.getField();
      complex2.getArgument();
      Complex complex4 = complex0.add(0.0);
      complex4.ONE.divide(complex3);
      complex3.toString();
      Complex complex5 = complex2.I.conjugate();
      try { 
        complex5.I.nthRoot((-1657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,657
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-2276.629313017414), (-2976.550804552));
      Complex complex1 = complex0.INF.exp();
      complex1.INF.subtract(2.0);
      complex0.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex2.INF.divide((-1193.48767));
      complex5.I.createComplex(20.0, (-1193.48767));
      Complex complex6 = complex0.I.log();
      Complex complex7 = complex0.I.tanh();
      complex7.I.hashCode();
      complex1.abs();
      Complex complex8 = complex1.add(complex4);
      complex2.toString();
      complex8.INF.tan();
      complex3.toString();
      Complex complex9 = complex4.reciprocal();
      complex9.I.sinh();
      Complex complex10 = complex6.add(1.0);
      complex10.INF.subtract((-1445.62654496927));
      complex2.tan();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.ZERO.divide(complex6);
      complex1.NaN.divide(0.0);
      complex7.INF.subtract(0.0);
      Complex complex8 = complex1.pow(complex4);
      Complex complex9 = complex3.multiply(37);
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex10.cos();
      complex11.ZERO.add(0.0);
      complex0.getReal();
      complex3.nthRoot(37);
      complex9.isInfinite();
      complex9.equals((Object) null);
      complex2.multiply(37);
      complex2.abs();
      complex1.log();
      complex4.nthRoot(7);
      complex6.subtract(complex9);
      Complex complex12 = Complex.valueOf(1.1752011936438014, (double) 7);
      complex12.NaN.add(complex8);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.conjugate();
      complex2.I.divide(20.0);
      Complex.valueOf(1.688911928929718E-48, 1.688911928929718E-48);
      complex0.atan();
      complex0.multiply(3866.972);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ZERO.sqrt();
      complex2.nthRoot(1);
      complex0.INF.multiply((-45.2864615727644));
      Complex complex4 = complex1.INF.add(0.0);
      Complex complex5 = complex0.sinh();
      complex0.isInfinite();
      Complex complex6 = complex3.INF.acos();
      Complex complex7 = complex5.sin();
      complex7.INF.hashCode();
      complex7.ZERO.pow((-1.0));
      complex7.NaN.pow(0.0);
      complex6.ONE.sin();
      complex3.divide(complex0);
      Complex.valueOf((double) 1);
      Complex.valueOf(0.0);
      Complex complex8 = complex6.sqrt1z();
      complex4.getField();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      complex0.getImaginary();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.subtract(complex0);
      complex3.ZERO.readResolve();
      complex3.readResolve();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex4.ZERO.atan();
      complex6.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.multiply(0.0);
      complex0.ONE.abs();
      complex4.NaN.hashCode();
      complex1.sin();
      Complex complex8 = complex5.cosh();
      complex8.divide((-1633.0925344342));
      complex8.sinh();
      Complex complex9 = complex5.tan();
      complex4.acos();
      complex7.pow(complex8);
      complex9.add(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.I.createComplex(2.0, 1834.812634);
      complex4.ZERO.getArgument();
      Complex complex5 = complex1.add((-3165.07907));
      complex3.NaN.getField();
      Complex complex6 = complex3.sinh();
      complex6.NaN.cosh();
      complex3.toString();
      complex5.getField();
      complex4.getField();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.tan();
      complex2.NaN.subtract((-3844.8924));
      Complex complex3 = complex2.I.atan();
      complex3.ONE.tan();
      Complex complex4 = complex3.createComplex((-1.0), 538.5124060702723);
      complex4.I.subtract(1.49824857711792);
      complex3.INF.multiply((-3844.8924));
      Complex complex5 = complex2.ZERO.conjugate();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex5.ZERO.negate();
      complex2.add(complex0);
      Complex.valueOf((-3844.8924));
      complex1.ZERO.abs();
      complex7.NaN.pow(0.0);
      Complex.valueOf(0.0, (-3844.8924));
      complex6.sin();
      complex6.sin();
      Complex complex8 = complex6.sqrt();
      complex8.INF.multiply((-3844.8924));
      complex7.pow(6.283185307179586);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      complex3.INF.nthRoot(1);
      complex2.toString();
      complex1.add(complex3);
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      complex0.getArgument();
      Complex complex2 = complex0.INF.add(complex1);
      complex0.isInfinite();
      Complex complex3 = complex0.subtract(8.738625278484571E-8);
      complex0.isNaN();
      complex3.INF.add(complex0);
      Complex complex4 = complex3.divide(complex2);
      complex4.ONE.atan();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.conjugate();
      complex6.INF.createComplex(Double.NaN, 0.0);
      Complex.valueOf(0.0, 852.352);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.9313342464E12);
      complex0.NaN.subtract(3.9313342464E12);
      Complex complex1 = complex0.atan();
      Complex.valueOf(7.130134251490065E-128, 3.9313342464E12);
      complex0.abs();
      complex0.I.subtract(0.0);
      complex0.createComplex(3.9313342464E12, (-1202.3256));
      complex1.reciprocal();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2080.791292, 2080.791292);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply((-475));
      Complex complex3 = complex0.ONE.sinh();
      complex3.NaN.reciprocal();
      Complex complex4 = Complex.valueOf(2080.791292, 2865.84056);
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex1.conjugate();
      complex6.getField();
      complex0.ONE.cos();
      Complex complex7 = complex4.reciprocal();
      complex7.getArgument();
      Complex complex8 = complex0.multiply(complex5);
      complex8.asin();
      complex2.atan();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.pow(1056.2228909803218);
      Complex complex1 = complex0.I.subtract(1056.2228909803218);
      complex0.abs();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.INF.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.NaN.sinh();
      complex5.asin();
      Complex complex6 = complex5.ONE.asin();
      complex6.NaN.multiply(0.4494072198867798);
      Complex complex7 = complex3.createComplex(0.1710275411605835, 1056.2228909803218);
      Complex complex8 = complex4.conjugate();
      complex4.getArgument();
      Complex complex9 = complex2.pow(complex8);
      complex9.I.divide(complex7);
      Complex complex10 = complex3.negate();
      complex10.INF.conjugate();
      complex1.log();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex7.negate();
      complex11.atan();
      complex12.exp();
      complex10.sinh();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-305.657514288), 2710.09177);
      complex0.getField();
      complex0.nthRoot(3783);
      Complex complex1 = Complex.valueOf(2710.09177, 0.0);
      complex1.add(complex0);
      Complex complex2 = complex0.add((-305.657514288));
      complex2.NaN.getArgument();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      complex0.NaN.toString();
      complex1.exp();
      int int0 = (-1581);
      try { 
        complex0.nthRoot((-1581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,581
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-20.0), (-20.0));
      complex0.abs();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.ONE.pow(3874.7776690176);
      Complex complex4 = complex3.INF.reciprocal();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ONE.createComplex((-20.0), (-20.0));
      complex7.NaN.divide((-564.22));
      complex1.ZERO.cos();
      complex3.INF.multiply(0);
      complex7.getField();
      complex0.I.getArgument();
      Complex complex8 = complex5.divide(0.0);
      complex5.readResolve();
      complex6.multiply(2136);
      complex1.equals("3q)vB$kS|3JR.{jQ9mv");
      complex8.isInfinite();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-578.63));
      Complex complex2 = complex1.INF.tanh();
      complex2.multiply(complex1);
      complex2.INF.divide(complex1);
      Complex complex3 = complex0.add(complex1);
      complex0.sinh();
      Complex complex4 = complex2.negate();
      complex3.cosh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.multiply((-3242.74));
      complex2.ONE.tan();
      complex0.isNaN();
      complex0.readResolve();
      complex0.ONE.toString();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.pow(complex2);
      complex3.multiply(complex1);
      complex0.INF.acos();
      complex4.hashCode();
      complex1.getImaginary();
      complex1.atan();
      Complex complex5 = complex0.subtract(complex1);
      complex5.createComplex(6.283185307179586, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex1.I.subtract(complex2);
      complex0.createComplex(0.0, 0.0);
      complex0.getImaginary();
      complex1.isInfinite();
      Complex complex4 = complex0.sin();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.tan();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = Complex.valueOf((-907.2), (-4661.703235057));
      complex4.sqrt1z();
      complex2.I.add(complex4);
      complex2.getImaginary();
      complex2.getReal();
      Complex complex5 = Complex.valueOf(1.0);
      complex3.hashCode();
      complex5.hashCode();
      complex0.toString();
      complex0.getImaginary();
      Complex complex6 = complex5.I.pow(1.0);
      complex2.isInfinite();
      Complex complex7 = complex4.ONE.tan();
      complex5.multiply(1.0);
      complex4.getReal();
      complex7.multiply((-752));
      complex0.subtract(complex6);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1709.57913673), (-1709.57913673));
      Complex complex1 = complex0.sin();
      complex0.asin();
      complex1.ZERO.hashCode();
      complex0.sinh();
      complex0.I.sin();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.negate();
      complex3.INF.log();
      Complex complex4 = complex3.acos();
      complex4.reciprocal();
      complex1.pow(complex3);
      complex2.equals((Object) null);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.multiply(1478);
      complex3.ONE.subtract(0.0);
      Complex complex6 = complex0.pow(complex1);
      complex4.getReal();
      complex5.equals(complex0);
      complex6.cosh();
      complex5.sinh();
      complex5.cos();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(5.517990469846618E229);
      Complex complex1 = complex0.INF.cos();
      complex0.toString();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.subtract(1.485138177871704);
      complex1.asin();
      Complex complex4 = complex2.divide((-3158.37));
      complex4.divide(0.0);
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex1.INF.asin();
      complex5.nthRoot(424);
      complex4.pow(complex1);
      complex6.readResolve();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(5.328392630534142E-8);
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex1.ZERO.subtract((double) 0);
      complex0.I.toString();
      Complex complex3 = complex2.I.acos();
      complex3.ONE.cos();
      complex1.I.asin();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex0.multiply(17);
      complex5.ONE.add(503.05401891456);
      complex4.ONE.getArgument();
      Complex complex6 = complex5.sin();
      complex4.ZERO.exp();
      complex6.createComplex(3831.2120393964124, 3831.2120393964124);
      Complex.valueOf((double) 0);
      try { 
        complex6.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ONE.add(complex0);
      complex2.I.nthRoot(1);
      Complex complex5 = complex4.pow(complex2);
      complex3.ONE.tan();
      complex4.ONE.getArgument();
      Complex complex6 = complex2.ZERO.exp();
      complex6.ONE.toString();
      complex0.add(complex1);
      Complex complex7 = complex5.tan();
      complex5.tanh();
      complex7.ZERO.cos();
      Complex complex8 = complex1.createComplex(0.0, 0.0);
      complex2.isInfinite();
      complex2.getArgument();
      Complex complex9 = complex5.divide(0.7853981633974483);
      Complex.valueOf(0.0);
      complex8.pow(complex3);
      Complex complex10 = complex1.cosh();
      complex10.add(0.7853981633974483);
      complex9.hashCode();
      complex8.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2108.5);
      Complex complex1 = new Complex((-184.835223866546), (-1589.5));
      complex1.I.getArgument();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.NaN.add(1.5707963267948966);
      Complex complex4 = complex0.ZERO.exp();
      Complex complex5 = complex0.asin();
      complex5.negate();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex4.subtract(complex0);
      complex5.equals(complex4);
      complex7.readResolve();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex5.atan();
      complex9.createComplex(2596.11, 1.5707963267948966);
      complex4.sinh();
      complex0.ZERO.sqrt1z();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex11.reciprocal();
      complex8.pow(0.0);
      complex11.equals(complex12);
      complex9.sinh();
      Complex complex13 = complex10.createComplex(Double.NaN, Double.NaN);
      complex3.add(complex13);
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-2779.139));
      complex1.NaN.readResolve();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.NaN.pow((-2779.139));
      complex3.ZERO.pow(complex2);
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex0.tan();
      complex1.ZERO.abs();
      complex2.toString();
      complex4.ZERO.multiply((-2317));
      Complex complex6 = complex1.INF.reciprocal();
      complex2.subtract(complex1);
      complex0.getField();
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex0.reciprocal();
      complex5.subtract(complex0);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex3.multiply((-2779.139));
      complex4.getImaginary();
      complex8.readResolve();
      complex7.divide(0.0);
      complex1.sin();
      complex3.sin();
      complex0.abs();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-99.7448), (-99.7448));
      Complex complex1 = Complex.valueOf((-99.7448));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply((double) (-1283));
      Complex complex3 = complex2.ZERO.atan();
      Complex.valueOf((double) (-1283), 0.0);
      complex2.negate();
      complex2.divide(complex3);
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(2659.1163);
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-128.91416630786262), 1953.065722374663);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(1274);
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = Complex.valueOf(1953.065722374663);
      Complex complex8 = complex7.sqrt1z();
      complex8.I.abs();
      complex0.negate();
      Complex complex9 = complex2.atan();
      complex9.NaN.cos();
      complex1.atan();
      Complex complex10 = complex3.subtract(complex6);
      complex10.I.cosh();
      complex5.ZERO.acos();
      complex5.createComplex(1.0, 7.374944406615125E-186);
      complex5.multiply(complex0);
      complex8.tan();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getImaginary();
      complex0.getField();
      Complex complex1 = complex0.pow(6089.0119);
      complex1.isInfinite();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = new Complex(Double.NaN, 0.0);
      complex4.ZERO.pow(1.0);
      complex3.NaN.subtract(complex4);
      Complex complex5 = complex1.subtract(1933.804449825813);
      Complex complex6 = Complex.valueOf(2.0, 0.0);
      Complex complex7 = complex6.ZERO.divide(complex5);
      complex2.negate();
      complex0.ONE.log();
      Complex complex8 = complex1.exp();
      complex1.divide(complex5);
      complex8.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex3.ZERO.tan();
      complex5.INF.cosh();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex8.pow(899.0151116966);
      complex0.readResolve();
      Complex complex10 = complex9.ZERO.cos();
      complex7.getArgument();
      complex3.nthRoot(1719);
      double double0 = complex5.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      complex0.INF.reciprocal();
      complex0.ONE.negate();
      Complex complex11 = complex6.I.asin();
      Complex complex12 = complex1.divide(complex0);
      complex3.NaN.sin();
      Complex complex13 = complex4.conjugate();
      Complex complex14 = complex6.negate();
      complex7.readResolve();
      complex14.reciprocal();
      complex2.sqrt1z();
      Complex complex15 = complex2.cosh();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      
      List<Complex> list0 = complex7.nthRoot(1719);
      assertTrue(list0.contains(complex2));
      
      complex11.subtract(1.6911191940307617);
      complex1.subtract((-563.682645683174));
      Complex complex16 = complex11.pow((double) 1719);
      assertEquals((-5.371481088609508E-95), complex16.getImaginary(), 0.01);
      assertEquals(6.082315977209754E-108, complex16.getReal(), 0.01);
      
      complex10.getImaginary();
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      complex2.isNaN();
      Complex complex17 = complex11.divide(complex5);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertSame(complex17, complex12);
      assertTrue(complex6.equals((Object)complex13));
      assertTrue(complex5.equals((Object)complex8));
      assertEquals(0.0, complex5.getReal(), 0.01);
  }
}
