/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:10:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1.785277385538302E272);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.NaN.sqrt();
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex1.sqrt();
      complex4.ONE.getArgument();
      complex0.ZERO.getArgument();
      complex4.I.readResolve();
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex3.ONE.exp();
      complex6.I.toString();
      complex4.INF.cosh();
      complex6.NaN.multiply(1);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex3.ONE.divide(0.0);
      complex9.NaN.sinh();
      complex3.INF.readResolve();
      complex8.ONE.cosh();
      complex7.getField();
      Complex complex10 = complex0.conjugate();
      complex10.ZERO.divide(1458.1);
      complex3.reciprocal();
      Complex complex11 = complex7.atan();
      complex3.sin();
      complex5.multiply(1);
      complex11.acos();
      complex4.multiply(883);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.createComplex(3418.847, Double.POSITIVE_INFINITY);
      complex3.multiply(17);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-172.62431), Double.POSITIVE_INFINITY);
      complex0.I.multiply(complex1);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.asin();
      complex0.nthRoot(619);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.asin();
      complex3.tan();
      Complex complex6 = Complex.valueOf((-5.848862070736576E-9));
      complex0.multiply(complex6);
      complex2.asin();
      complex5.negate();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.subtract(Double.NaN);
      complex8.tan();
      complex6.toString();
      complex6.add((-1644.850864928572));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.NaN);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = Complex.I;
      complex0.ZERO.createComplex(1.9663371585920686E-4, (-20.0));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.asin();
      complex3.tan();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = Complex.I;
      complex0.ONE.multiply((-1420));
      Complex complex2 = complex1.multiply(complex0);
      complex0.toString();
      Complex complex3 = complex2.tanh();
      complex3.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1.0000000000000004));
      Complex complex2 = complex0.add(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex0.sqrt();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.negate();
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.INF.getArgument();
      complex0.I.sqrt1z();
      Complex complex2 = complex0.add(complex1);
      complex2.I.sqrt1z();
      Complex complex3 = complex0.exp();
      complex3.ONE.multiply(0.7853981633974483);
      double double0 = 0.3877306580543518;
      Complex.valueOf(0.7853981633974483, 0.3877306580543518);
      Complex complex4 = Complex.I;
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.sqrt();
      Complex complex2 = null;
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.INF.getArgument();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ONE.multiply(0.7853981633974483);
      Complex complex7 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex8.ONE.add(complex7);
      Complex complex11 = complex8.ONE.acos();
      Complex complex12 = complex7.negate();
      complex12.sin();
      complex2.sqrt1z();
      complex6.acos();
      complex4.add(complex11);
      complex9.acos();
      Complex complex13 = complex10.divide(Double.POSITIVE_INFINITY);
      complex13.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.acos();
      complex0.I.tan();
      complex1.add(complex3);
      Complex complex5 = complex0.add(4278.08793895);
      complex5.I.atan();
      Complex.valueOf(4278.08793895);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.ZERO.createComplex(813.02799398, 0.45437926054000854);
      complex4.subtract(1741.745423418704);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.sqrt1z();
      // Undeclared exception!
      complex0.nthRoot(204200528);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-799.13313254922), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sqrt1z();
      complex3.exp();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(1705.9935);
      Complex complex4 = Complex.NaN;
      complex4.reciprocal();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.I;
      complex6.add(complex5);
      complex1.acos();
      Complex complex7 = Complex.NaN;
      complex7.divide((-618.545));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1550.137369);
      Complex complex2 = complex1.add(1550.137369);
      Complex complex3 = complex0.reciprocal();
      complex2.sqrt();
      Complex complex4 = complex3.add(complex0);
      complex1.acos();
      Complex complex5 = complex2.negate();
      complex4.reciprocal();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.sqrt1z();
      complex7.acos();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.cosh();
      Complex complex10 = Complex.NaN;
      complex10.add(complex6);
      complex9.cos();
      complex5.tanh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.INF.getArgument();
      Complex complex2 = new Complex(0.7853981633974483, 0.7853981633974483);
      Complex complex3 = complex0.add(complex1);
      complex3.I.sqrt1z();
      Complex complex4 = complex0.exp();
      complex4.ONE.multiply(0.7853981633974483);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.reciprocal();
      complex5.sqrt();
      complex6.ONE.add(complex5);
      complex6.ONE.acos();
      complex5.negate();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-0.6192698468866863));
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      complex0.multiply((-1245));
      complex0.pow(491.7454077559398);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.INF.getArgument();
      complex0.I.sqrt1z();
      Complex complex2 = complex0.add(complex1);
      complex2.I.sqrt1z();
      Complex complex3 = complex0.exp();
      complex3.ONE.multiply(0.7853981633974483);
      Complex complex4 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.reciprocal();
      complex4.sqrt();
      complex5.ONE.add(complex4);
      complex5.ONE.acos();
      complex4.negate();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.INF.getArgument();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ONE.multiply(0.7853981633974483);
      Complex complex7 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex8.ONE.add(complex7);
      Complex complex11 = complex8.ONE.acos();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex8.reciprocal();
      complex12.sin();
      complex2.sqrt1z();
      Complex complex14 = complex6.acos();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex15.NaN.add(complex1);
      Complex complex17 = complex11.cos();
      Complex complex18 = complex12.tanh();
      complex11.sqrt();
      complex6.INF.atan();
      complex13.sin();
      Complex complex19 = complex18.add(Double.POSITIVE_INFINITY);
      complex16.readResolve();
      complex9.conjugate();
      complex17.readResolve();
      complex5.exp();
      complex10.acos();
      complex10.sqrt();
      complex2.nthRoot(235);
      complex19.add(complex17);
      complex4.asin();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.conjugate();
      complex0.divide((double) (-1283));
      Complex complex3 = complex2.atan();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.getField();
      complex0.nthRoot(3783);
      Complex complex1 = complex0.log();
      complex1.ZERO.hashCode();
      complex0.sqrt1z();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.12523519281980874;
      Complex complex0 = Complex.valueOf((-20.0), 0.12523519281980874);
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex0.ZERO.cosh();
      complex4.readResolve();
      complex3.INF.pow(complex2);
      complex0.nthRoot(1);
      complex0.toString();
      complex3.cosh();
      complex0.add((double) 1);
      complex1.ZERO.subtract((double) 1);
      complex2.pow(Double.POSITIVE_INFINITY);
      complex5.add(1241.6361387);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-2976.550804552), 808.2325442603);
      Complex complex2 = Complex.valueOf((-2976.550804552), (-1960.00152627888));
      Complex complex3 = complex2.exp();
      complex3.subtract((-2976.550804552));
      Complex complex4 = new Complex((-2524.0), Double.POSITIVE_INFINITY);
      complex4.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-1283));
      Complex complex1 = complex0.multiply((double) (-1283));
      complex1.ZERO.atan();
      Complex.valueOf(Double.NaN, 1.6525336989036362E59);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.INF;
      complex0.divide(complex3);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.I.cos();
      Complex complex3 = complex0.multiply(36);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = Complex.valueOf(20.0, 1.557407724654902);
      Complex complex7 = Complex.ONE;
      complex7.multiply(complex0);
      Complex complex8 = complex6.conjugate();
      complex4.getField();
      Complex complex9 = complex5.cos();
      complex3.reciprocal();
      complex6.getArgument();
      Complex complex10 = Complex.ONE;
      complex8.multiply(complex10);
      complex1.atan();
      Object object0 = complex9.readResolve();
      complex9.equals(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2276.629313017414), (-2976.550804552));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.subtract((-2976.550804552));
      complex1.log();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.conjugate();
      complex2.I.divide(20.0);
      Complex.valueOf(1.688911928929718E-48, 1.688911928929718E-48);
      Complex complex3 = complex0.atan();
      complex3.atan();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.subtract(complex0);
      complex6.createComplex(Double.POSITIVE_INFINITY, 2214.489035997989);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getArgument();
      Complex complex1 = complex0.ONE.sinh();
      complex1.I.readResolve();
      complex0.INF.acos();
      Complex complex2 = complex0.multiply((-1.7959243076374794E242));
      Complex complex3 = complex2.sqrt1z();
      complex2.ONE.hashCode();
      Complex complex4 = complex1.divide(complex0);
      complex0.multiply(1012);
      Complex complex5 = complex4.ONE.sqrt1z();
      complex5.conjugate();
      Complex complex6 = complex3.pow(complex0);
      complex6.ONE.divide((-1.7959243076374794E242));
      Complex complex7 = complex1.tanh();
      complex7.ONE.createComplex(0.7853981633974483, (-1.7959243076374794E242));
      Complex complex8 = complex1.multiply(complex4);
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex8.ONE.multiply(1012);
      complex10.sin();
      complex8.add((double) 1012);
      complex1.nthRoot(1261);
      Complex.valueOf((-1384.358839886), (-1330.1));
      Complex complex11 = complex7.divide((double) 1261);
      complex11.pow(complex5);
      complex6.reciprocal();
      Complex complex12 = complex2.tanh();
      complex12.ZERO.subtract(complex5);
      complex5.acos();
      complex7.sqrt1z();
      complex9.atan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2108.5);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = new Complex(0.27175258531951174, (-336.2));
      Complex.valueOf(0.27175258531951174);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex6.tan();
      complex7.getArgument();
      complex3.readResolve();
      complex6.toString();
      Complex complex8 = complex0.sqrt();
      complex6.pow(complex5);
      complex8.multiply(complex0);
      complex3.multiply(1);
      complex7.sinh();
      complex2.sinh();
      Complex complex9 = complex5.reciprocal();
      complex9.log();
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.pow((-1.0));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex3.tan();
      complex4.getArgument();
      complex4.readResolve();
      complex0.toString();
      Complex complex5 = Complex.INF;
      complex5.sqrt();
      Complex complex6 = Complex.valueOf((-1.0), 26.63030827729251);
      complex6.pow(complex1);
      Complex complex7 = Complex.I;
      complex7.multiply(complex6);
      Complex complex8 = Complex.INF;
      complex4.acos();
      complex8.hashCode();
      complex8.getImaginary();
      Complex complex9 = complex7.atan();
      complex9.subtract(complex2);
      Complex complex10 = Complex.I;
      complex10.createComplex((-855.3305052028), 1619.80297595);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-43.0755601723));
      complex1.pow(Double.NaN);
      complex1.tanh();
      Complex complex2 = complex0.divide((-6.461509354879894E29));
      Complex complex3 = complex1.divide((-1.0));
      complex3.ONE.tan();
      Complex.valueOf((-1.0), (-1.3810978455418157));
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.ZERO;
      complex5.add(complex2);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.pow((-1.0));
      Complex complex2 = new Complex((-20.0), (-20.0));
      complex0.pow(complex1);
      Complex complex3 = complex2.tan();
      complex2.getArgument();
      complex1.readResolve();
      Complex complex4 = new Complex((-20.0));
      complex4.toString();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.pow(complex3);
      complex2.multiply(complex1);
      Complex complex7 = Complex.INF;
      complex7.acos();
      complex6.hashCode();
      complex5.getImaginary();
      Complex complex8 = Complex.ZERO;
      complex8.atan();
      Complex complex9 = Complex.ONE;
      complex9.subtract(complex4);
      Complex complex10 = Complex.ZERO;
      complex10.createComplex((-2.356194490192345), (-2657.646555408));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2108.5);
      complex0.getField();
      Complex complex1 = Complex.valueOf(2108.5, 2108.5);
      Complex complex2 = complex1.cos();
      complex2.sinh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf((-3481.888), (-2602.9779));
      complex2.multiply(complex1);
      Complex complex5 = complex4.conjugate();
      complex4.getField();
      complex0.cos();
      Complex complex6 = complex0.reciprocal();
      complex3.getArgument();
      Complex complex7 = Complex.ONE;
      complex7.multiply(complex2);
      complex0.atan();
      complex6.isInfinite();
      complex5.multiply((-307.088715));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(646.666085053);
      Complex complex1 = Complex.INF;
      complex0.ZERO.getField();
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex2.NaN.getField();
      complex0.ONE.toString();
      complex0.ZERO.pow(complex2);
      complex0.INF.abs();
      complex0.multiply(646.666085053);
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex2.multiply(complex0);
      complex5.toString();
      complex5.conjugate();
      complex4.I.add(complex3);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex7.I.divide(complex4);
      complex8.NaN.cosh();
      Complex complex9 = complex0.conjugate();
      complex9.sin();
      complex9.getField();
      try { 
        complex6.nthRoot((-2095105998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,095,105,998
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.cos();
      complex2.nthRoot(37);
      complex1.pow(complex2);
      Complex complex4 = complex0.tan();
      complex4.getArgument();
      complex4.exp();
      complex4.toString();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.add(complex1);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex2.tan();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex5.cos();
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.ONE;
      complex12.createComplex(37, 2148.143);
      complex10.isInfinite();
      complex11.getArgument();
      Complex complex13 = new Complex(Double.NaN, Double.POSITIVE_INFINITY);
      complex4.divide((-1454.712391256522));
      Complex complex14 = Complex.valueOf(Double.NaN);
      complex3.pow(complex0);
      complex9.cosh();
      complex6.add(Double.NaN);
      complex14.hashCode();
      Complex complex15 = Complex.ZERO;
      complex15.subtract(complex8);
      complex10.negate();
      complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(2812.386456842146);
      Complex complex1 = complex0.cos();
      complex0.multiply((-2045));
      Complex complex2 = complex1.sinh();
      complex0.reciprocal();
      Complex complex3 = Complex.valueOf(995.4155367, 20.0);
      Complex complex4 = complex3.multiply(complex0);
      Complex.valueOf(1.0);
      complex0.conjugate();
      complex4.getField();
      complex2.cos();
      Complex complex5 = complex1.reciprocal();
      complex5.getArgument();
      Complex complex6 = Complex.ONE;
      complex6.multiply(complex5);
      complex3.asin();
      complex3.atan();
      complex4.isInfinite();
      complex5.add(complex4);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(2108.5);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.conjugate();
      complex2.pow(2108.5);
      complex1.tanh();
      Complex complex4 = Complex.INF;
      complex4.divide(Double.NaN);
      complex3.getField();
      Complex complex5 = new Complex((-1.0), 1.0010157385851406);
      complex5.divide((-263.9091610606008));
      Complex.valueOf(2108.5, 1.0010157385851406);
      complex5.atan();
      complex1.multiply((-3779.928443));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = new Complex(1.0010157385851406, (-20.0));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.add(complex0);
      complex2.sinh();
      Complex complex5 = new Complex(1, 564.538);
      complex1.nthRoot(17);
      Complex complex6 = complex5.pow(complex1);
      complex0.tan();
      complex2.getArgument();
      complex6.readResolve();
      complex3.toString();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = Complex.I;
      complex3.pow(complex8);
      complex7.multiply(complex4);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex6.acos();
      complex10.I.multiply(1.0010157385851406);
      complex8.hashCode();
      complex3.getImaginary();
      complex0.atan();
      complex2.subtract(complex3);
      Complex complex11 = complex5.createComplex(1, 1);
      complex11.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex1.multiply(2129.083985451445);
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf((double) (-1283), 161.0);
      Complex complex5 = Complex.I;
      complex5.negate();
      complex5.divide(complex2);
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.INF;
      complex2.nthRoot(1);
      Complex complex4 = complex0.INF.multiply((-45.2864615727644));
      complex2.divide((double) 1);
      complex0.getField();
      complex3.atan();
      Complex complex5 = complex3.cos();
      complex4.acos();
      complex2.reciprocal();
      complex5.readResolve();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.pow((-20.0));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex3.divide((-20.0));
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex6.INF.reciprocal();
      Complex complex8 = Complex.INF;
      complex8.divide(complex4);
      complex1.add(complex4);
      complex2.sinh();
      complex3.negate();
      complex2.cosh();
      complex3.tanh();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(2108.5);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.add(complex0);
      complex1.nthRoot(1);
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex4.tan();
      complex5.getArgument();
      complex1.exp();
      complex5.toString();
      complex3.add(complex2);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.tan();
      complex1.tanh();
      complex7.cos();
      Complex complex8 = Complex.INF;
      complex8.createComplex((-336.2), 2108.5);
      complex1.isInfinite();
      complex4.getArgument();
      Complex complex9 = complex7.divide(Double.NaN);
      Complex.valueOf((-3683.16682346044));
      Complex complex10 = complex2.pow(complex0);
      Complex complex11 = complex9.cosh();
      complex0.add(Double.NaN);
      complex6.hashCode();
      complex11.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sinh();
      Complex complex1 = new Complex((-336.2), (-336.2));
      Complex complex2 = new Complex((-263.4));
      complex2.nthRoot(3760);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = new Complex(1279.160467393, 6.47023467943241E-26);
      Complex complex6 = complex5.tan();
      complex6.getArgument();
      Complex complex7 = complex4.exp();
      complex4.toString();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex3.add(complex7);
      Complex complex10 = Complex.NaN;
      complex3.tan();
      Complex complex11 = complex3.tanh();
      complex9.cos();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex8.createComplex(970.769442197, 0.27175258531951174);
      complex9.isInfinite();
      complex3.getArgument();
      complex7.divide(970.769442197);
      Complex.valueOf(0.7853981633974483);
      Complex complex14 = complex7.pow(complex13);
      complex5.cosh();
      complex11.add(1279.160467393);
      complex14.hashCode();
      Complex complex15 = Complex.INF;
      complex2.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply((double) (-1283));
      complex2.toString();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = new Complex((-1283), 39816.621468);
      complex5.multiply(complex1);
      complex3.acos();
      complex0.getImaginary();
      complex1.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.subtract(complex6);
      complex7.ZERO.conjugate();
      complex1.createComplex((-1283), 37.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2812.386456842146);
      Complex complex1 = complex0.cos();
      complex0.multiply((-2045));
      Complex complex2 = complex1.sinh();
      complex0.reciprocal();
      Complex complex3 = Complex.valueOf(995.4155367, 20.0);
      Complex complex4 = complex3.multiply(complex0);
      complex0.conjugate();
      complex4.getField();
      complex2.cos();
      Complex complex5 = complex1.reciprocal();
      complex5.getArgument();
      Complex complex6 = Complex.ONE;
      complex6.multiply(complex5);
      complex3.asin();
      complex3.atan();
      complex4.isInfinite();
      complex5.add(complex4);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.9313342464E12);
      Complex complex1 = complex0.NaN.subtract(3.9313342464E12);
      complex0.atan();
      Complex complex2 = Complex.valueOf(7.130134251490065E-128, 3.9313342464E12);
      complex0.abs();
      Complex complex3 = complex0.I.subtract(0.0);
      complex3.INF.negate();
      complex0.nthRoot(7);
      complex2.asin();
      Complex complex4 = complex2.multiply(complex1);
      complex4.divide(1128.7235);
      complex4.sin();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.I.cos();
      complex1.nthRoot(37);
      complex1.pow(complex2);
      complex2.tan();
      complex2.getArgument();
      Complex complex4 = complex3.exp();
      complex1.toString();
      Complex complex5 = Complex.INF;
      complex4.add(complex2);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.tan();
      complex7.tanh();
      complex3.cos();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex0.createComplex(37, 2148.143);
      complex6.isInfinite();
      complex3.getArgument();
      Complex complex10 = new Complex((-539.5963293976108), 0.0);
      complex10.divide(112.224458925244);
      Complex complex11 = Complex.valueOf((-539.5963293976108));
      complex9.pow(complex11);
      complex6.cosh();
      complex1.add(5.744446753652847E185);
      complex10.hashCode();
      complex9.subtract(complex2);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = (-740.880535);
      Complex complex0 = new Complex((-740.880535));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex0.ZERO.multiply((-740.880535));
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.conjugate();
      complex1.sinh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf((-173.6827540759), 2865.84056);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.multiply(complex1);
      complex5.conjugate();
      complex6.getField();
      complex0.reciprocal();
      complex4.getArgument();
      complex3.multiply(complex0);
      complex0.asin();
      Complex complex7 = complex6.atan();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2108.5);
      double double0 = (-184.835223866546);
      Complex complex1 = new Complex((-184.835223866546), (-1589.5));
      Complex complex2 = complex1.pow((-1589.5));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.log();
      Complex complex5 = complex2.divide((-1589.5));
      complex3.getField();
      complex4.getArgument();
      Complex complex6 = Complex.ONE;
      complex6.add(0.0);
      complex4.divide(complex5);
      complex5.toString();
      complex6.conjugate();
      try { 
        complex0.nthRoot((-1657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,657
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ZERO.sqrt();
      complex2.nthRoot(1);
      Complex complex4 = complex0.INF.multiply((-45.2864615727644));
      complex1.INF.add(0.0);
      Complex complex5 = complex0.sinh();
      complex0.isInfinite();
      Complex complex6 = complex3.INF.acos();
      Complex complex7 = complex5.sin();
      complex7.INF.hashCode();
      Complex complex8 = complex7.ZERO.pow((-1.0));
      Complex complex9 = complex7.NaN.pow(0.0);
      complex6.ONE.sin();
      complex3.divide(complex0);
      Complex complex10 = Complex.valueOf((double) 1);
      complex9.sin();
      complex5.sqrt();
      complex4.multiply((-1589.5));
      complex8.pow((-45.2864615727644));
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = complex0.ONE.multiply(complex0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ONE.add(complex0);
      complex1.I.nthRoot(1);
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex2.ONE.tan();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = Complex.ONE;
      complex2.subtract(complex7);
      complex0.equals(complex0);
      complex4.readResolve();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex1.pow(complex8);
      complex9.atan();
      complex2.createComplex(1.0, -0.0);
      Complex complex10 = complex0.sqrt1z();
      complex10.sin();
      complex8.pow((double) 1);
      Complex complex11 = Complex.INF;
      complex1.equals(complex11);
      Complex complex12 = Complex.valueOf(2596.11);
      complex12.sinh();
      Complex complex13 = complex4.createComplex(2.3093822298965837E116, 511.57150199);
      complex13.ONE.pow(complex2);
      complex1.add(complex4);
      complex0.sinh();
      complex6.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2108.5);
      Complex complex1 = new Complex((-184.835223866546), (-1589.5));
      complex1.I.getArgument();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.NaN.add(1.5707963267948966);
      Complex complex4 = complex0.ZERO.exp();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.I.exp();
      complex1.getArgument();
      complex0.exp();
      complex6.toString();
      complex0.add(complex2);
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex9.cos();
      Complex complex11 = new Complex((-138.5));
      complex1.ZERO.negate();
      complex11.createComplex(0.0349720403297031, 9.008499734799015E-141);
      complex10.isInfinite();
      complex10.NaN.asin();
      Complex complex12 = new Complex((-424.438));
      complex12.getArgument();
      complex10.divide(2482.6634108132);
      Complex complex13 = Complex.valueOf(0.0349720403297031);
      complex11.pow(complex7);
      complex0.cosh();
      complex4.add((-1524.2922));
      complex13.hashCode();
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.tan();
      complex1.NaN.subtract((-3844.8924));
      Complex complex2 = complex1.I.atan();
      complex2.ONE.tan();
      Complex complex3 = complex2.createComplex((-1.0), 538.5124060702723);
      complex3.I.subtract(1.49824857711792);
      Complex complex4 = complex2.INF.multiply((-3844.8924));
      Complex complex5 = complex1.ZERO.conjugate();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex5.ZERO.negate();
      complex1.add(complex0);
      Complex.valueOf((-3844.8924));
      complex0.ZERO.abs();
      complex7.NaN.pow(0.0);
      Complex.valueOf(0.0, (-3844.8924));
      complex6.sin();
      complex6.sin();
      complex6.sqrt();
      complex4.asin();
      complex3.atan();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.subtract((-1.0));
      Complex complex3 = complex0.atan();
      complex0.tan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.subtract((-20.0));
      Complex complex6 = Complex.valueOf(538.5124060702723);
      complex6.multiply(851.30480925695);
      complex3.conjugate();
      Complex complex7 = new Complex((-20.0), 2471.951753);
      complex7.reciprocal();
      Complex complex8 = complex7.negate();
      complex7.add(complex6);
      Complex complex9 = Complex.valueOf((-20.0));
      complex5.INF.add(complex3);
      Complex complex10 = Complex.ZERO;
      complex10.abs();
      complex6.pow(851.30480925695);
      Complex.valueOf(2471.951753, (-1.0));
      complex9.sin();
      complex7.sin();
      complex10.sqrt();
      complex8.multiply(1376.6209);
      complex5.pow(1270.6361065919468);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.tan();
      complex3.pow(Double.NaN);
      Complex complex4 = complex0.tanh();
      complex0.log();
      Complex complex5 = complex2.divide(0.5973974466323853);
      complex3.getField();
      complex0.INF.cosh();
      complex5.getArgument();
      double double0 = 0.0;
      complex1.add(758.7761);
      Complex complex6 = complex5.divide(complex4);
      complex5.toString();
      complex6.conjugate();
      try { 
        complex6.nthRoot((-745));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -745
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2108.5);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = new Complex(0.27175258531951174, (-336.2));
      complex5.nthRoot(1);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex6.tan();
      complex7.getArgument();
      complex5.exp();
      complex7.toString();
      Complex complex8 = Complex.INF;
      complex8.add(complex2);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.tan();
      complex1.tanh();
      complex10.cos();
      Complex complex11 = Complex.INF;
      complex11.createComplex((-336.2), (-539.5963293976108));
      complex5.isInfinite();
      complex6.getArgument();
      Complex complex12 = complex10.divide(2.761840891681204);
      Complex.valueOf((-3683.16682346044));
      Complex complex13 = complex3.pow(complex0);
      Complex complex14 = complex12.cosh();
      complex0.add(1.5747329867858744);
      complex9.hashCode();
      complex14.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = new Complex(1.0, (-1589.5));
      complex1.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.add(1342.0056);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex2.subtract(complex5);
      complex6.equals(complex7);
      complex0.sin();
      complex1.pow(complex0);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.atan();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.createComplex((-1.5701671982210899), (-4409.72));
      complex4.sinh();
      Complex complex13 = complex6.sqrt1z();
      complex5.sin();
      Complex complex14 = complex12.reciprocal();
      complex14.ONE.readResolve();
      complex0.pow((-1589.5));
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      complex5.sinh();
      complex8.createComplex((-4409.72), -0.0);
      complex10.add(complex13);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.subtract((-550.0));
      Complex complex4 = complex2.atan();
      complex1.tan();
      complex0.createComplex((-3844.8924), (-3844.8924));
      Complex complex5 = complex4.subtract(1.49824857711792);
      Complex complex6 = complex5.multiply(538.5124060702723);
      Complex complex7 = complex2.conjugate();
      complex4.reciprocal();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.add(complex7);
      Complex.valueOf(0.29520377065448367);
      complex7.abs();
      Complex complex10 = complex1.pow(1.1174700207060702);
      Complex.valueOf((-1633.0925344342), (-550.0));
      Complex complex11 = complex3.sin();
      complex10.sin();
      complex6.sqrt();
      Complex complex12 = complex11.multiply(1096.757);
      complex9.pow(1.49824857711792);
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.add(complex3);
      complex0.nthRoot(1);
      complex1.pow(complex0);
      complex6.tan();
      complex2.getArgument();
      complex3.exp();
      complex1.toString();
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex2.tan();
      complex4.tanh();
      complex0.cos();
      Complex complex9 = complex2.createComplex(Double.NaN, 1);
      complex7.isInfinite();
      complex0.getArgument();
      Complex complex10 = new Complex(6.246139569588422, Double.NaN);
      complex10.divide((-87.78));
      Complex complex11 = Complex.valueOf((-1526.754104276731));
      Complex complex12 = Complex.NaN;
      complex7.pow(complex12);
      complex8.cosh();
      complex11.add((-87.78));
      complex7.hashCode();
      Complex complex13 = Complex.valueOf((-1.82770041073856E-243), 0.0);
      complex9.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ONE.add(complex0);
      complex1.tanh();
      Complex complex5 = complex4.multiply(304);
      Complex complex6 = complex5.subtract(1306.22);
      complex6.pow(complex1);
      complex1.getReal();
      Complex complex7 = Complex.valueOf(578.63, 1.1752011936438014);
      complex7.equals(complex0);
      Complex complex8 = complex6.cosh();
      complex3.sinh();
      complex6.cos();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-578.63));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex2.INF.divide(complex1);
      Complex complex5 = complex0.add(complex1);
      complex1.pow((-578.63));
      complex5.sin();
      complex5.divide(complex3);
      Complex.valueOf(105.130847);
      Complex.valueOf(105.130847);
      complex5.sqrt1z();
      complex0.getField();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.tan();
      complex2.NaN.subtract((-3844.8924));
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.createComplex((-1.0), 538.5124060702723);
      complex5.I.subtract(1.49824857711792);
      complex3.INF.multiply((-3844.8924));
      Complex complex6 = complex2.ZERO.conjugate();
      Complex complex7 = complex6.ONE.reciprocal();
      Complex complex8 = complex6.ZERO.negate();
      complex2.add(complex0);
      Complex.valueOf((-3844.8924));
      complex1.ZERO.abs();
      complex8.NaN.pow(0.0);
      Complex.valueOf(0.0, (-3844.8924));
      complex7.sin();
      complex7.sin();
      complex7.sqrt();
      Complex complex9 = Complex.valueOf(538.5124060702723, Double.NaN);
      complex9.sqrt1z();
      complex9.getField();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-1283));
      Complex complex1 = complex0.multiply((double) (-1283));
      Complex complex2 = complex1.ZERO.atan();
      complex1.negate();
      Complex complex3 = complex1.divide(complex2);
      Complex.valueOf(0.0, 610.417271);
      complex1.tanh();
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.NaN.pow((-1.0));
      Complex complex2 = complex0.tanh();
      complex2.INF.log();
      Complex complex3 = complex2.divide((-20.0));
      complex3.ZERO.getField();
      complex2.getArgument();
      Complex complex4 = complex0.add(0.0);
      complex4.ONE.divide(complex3);
      complex3.toString();
      Complex complex5 = complex2.I.conjugate();
      try { 
        complex5.I.nthRoot((-1657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,657
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-2276.629313017414), (-2976.550804552));
      Complex complex1 = complex0.INF.exp();
      complex1.INF.subtract(2.0);
      complex0.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex2.INF.divide((-1193.48767));
      complex5.I.createComplex(20.0, (-1193.48767));
      Complex complex6 = complex0.I.log();
      Complex complex7 = complex0.I.tanh();
      complex7.I.hashCode();
      complex1.abs();
      Complex complex8 = complex1.add(complex4);
      complex2.toString();
      complex8.INF.tan();
      complex3.toString();
      Complex complex9 = complex4.reciprocal();
      complex9.I.sinh();
      Complex complex10 = complex6.add(1.0);
      complex10.INF.subtract((-1445.62654496927));
      complex2.tan();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.ZERO.divide(complex6);
      complex1.NaN.divide(0.0);
      complex7.INF.subtract(0.0);
      Complex complex8 = complex1.pow(complex4);
      Complex complex9 = complex3.multiply(37);
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex10.cos();
      complex11.ZERO.add(0.0);
      complex0.getReal();
      complex3.nthRoot(37);
      complex9.isInfinite();
      complex9.equals((Object) null);
      complex2.multiply(37);
      complex2.abs();
      complex1.log();
      complex4.nthRoot(7);
      complex6.subtract(complex9);
      Complex complex12 = Complex.valueOf(1.1752011936438014, (double) 7);
      complex12.NaN.add(complex8);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.conjugate();
      complex2.I.divide(20.0);
      Complex.valueOf(1.688911928929718E-48, 1.688911928929718E-48);
      complex0.atan();
      complex0.multiply(3866.972);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ZERO.sqrt();
      complex2.nthRoot(1);
      complex0.INF.multiply((-45.2864615727644));
      Complex complex4 = complex1.INF.add(0.0);
      Complex complex5 = complex0.sinh();
      complex0.isInfinite();
      Complex complex6 = complex3.INF.acos();
      Complex complex7 = complex5.sin();
      complex7.INF.hashCode();
      complex7.ZERO.pow((-1.0));
      complex7.NaN.pow(0.0);
      complex6.ONE.sin();
      complex3.divide(complex0);
      Complex.valueOf((double) 1);
      Complex.valueOf(0.0);
      Complex complex8 = complex6.sqrt1z();
      complex4.getField();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      complex0.getImaginary();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.subtract(complex0);
      complex3.ZERO.readResolve();
      complex3.readResolve();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex4.ZERO.atan();
      complex6.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.multiply(0.0);
      complex0.ONE.abs();
      complex4.NaN.hashCode();
      complex1.sin();
      Complex complex8 = complex5.cosh();
      complex8.divide((-1633.0925344342));
      complex8.sinh();
      Complex complex9 = complex5.tan();
      complex4.acos();
      complex7.pow(complex8);
      complex9.add(complex0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.I.createComplex(2.0, 1834.812634);
      complex4.ZERO.getArgument();
      Complex complex5 = complex1.add((-3165.07907));
      complex3.NaN.getField();
      Complex complex6 = complex3.sinh();
      complex6.NaN.cosh();
      complex3.toString();
      complex5.getField();
      complex4.getField();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.tan();
      complex2.NaN.subtract((-3844.8924));
      Complex complex3 = complex2.I.atan();
      complex3.ONE.tan();
      Complex complex4 = complex3.createComplex((-1.0), 538.5124060702723);
      complex4.I.subtract(1.49824857711792);
      complex3.INF.multiply((-3844.8924));
      Complex complex5 = complex2.ZERO.conjugate();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex5.ZERO.negate();
      complex2.add(complex0);
      Complex.valueOf((-3844.8924));
      complex1.ZERO.abs();
      complex7.NaN.pow(0.0);
      Complex.valueOf(0.0, (-3844.8924));
      complex6.sin();
      complex6.sin();
      Complex complex8 = complex6.sqrt();
      complex8.INF.multiply((-3844.8924));
      complex7.pow(6.283185307179586);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      complex3.INF.nthRoot(1);
      complex2.toString();
      complex1.add(complex3);
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      complex0.getArgument();
      Complex complex2 = complex0.INF.add(complex1);
      complex0.isInfinite();
      Complex complex3 = complex0.subtract(8.738625278484571E-8);
      complex0.isNaN();
      complex3.INF.add(complex0);
      Complex complex4 = complex3.divide(complex2);
      complex4.ONE.atan();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.conjugate();
      complex6.INF.createComplex(Double.NaN, 0.0);
      Complex.valueOf(0.0, 852.352);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.9313342464E12);
      complex0.NaN.subtract(3.9313342464E12);
      Complex complex1 = complex0.atan();
      Complex.valueOf(7.130134251490065E-128, 3.9313342464E12);
      complex0.abs();
      complex0.I.subtract(0.0);
      complex0.createComplex(3.9313342464E12, (-1202.3256));
      complex1.reciprocal();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2080.791292, 2080.791292);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply((-475));
      Complex complex3 = complex0.ONE.sinh();
      complex3.NaN.reciprocal();
      Complex complex4 = Complex.valueOf(2080.791292, 2865.84056);
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex1.conjugate();
      complex6.getField();
      complex0.ONE.cos();
      Complex complex7 = complex4.reciprocal();
      complex7.getArgument();
      Complex complex8 = complex0.multiply(complex5);
      complex8.asin();
      complex2.atan();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.pow(1056.2228909803218);
      Complex complex1 = complex0.I.subtract(1056.2228909803218);
      complex0.abs();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.INF.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.NaN.sinh();
      complex5.asin();
      Complex complex6 = complex5.ONE.asin();
      complex6.NaN.multiply(0.4494072198867798);
      Complex complex7 = complex3.createComplex(0.1710275411605835, 1056.2228909803218);
      Complex complex8 = complex4.conjugate();
      complex4.getArgument();
      Complex complex9 = complex2.pow(complex8);
      complex9.I.divide(complex7);
      Complex complex10 = complex3.negate();
      complex10.INF.conjugate();
      complex1.log();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex7.negate();
      complex11.atan();
      complex12.exp();
      complex10.sinh();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-305.657514288), 2710.09177);
      complex0.getField();
      complex0.nthRoot(3783);
      Complex complex1 = Complex.valueOf(2710.09177, 0.0);
      complex1.add(complex0);
      Complex complex2 = complex0.add((-305.657514288));
      complex2.NaN.getArgument();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      complex0.NaN.toString();
      complex1.exp();
      int int0 = (-1581);
      try { 
        complex0.nthRoot((-1581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,581
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-20.0), (-20.0));
      complex0.abs();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.ONE.pow(3874.7776690176);
      Complex complex4 = complex3.INF.reciprocal();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ONE.createComplex((-20.0), (-20.0));
      complex7.NaN.divide((-564.22));
      complex1.ZERO.cos();
      complex3.INF.multiply(0);
      complex7.getField();
      complex0.I.getArgument();
      Complex complex8 = complex5.divide(0.0);
      complex5.readResolve();
      complex6.multiply(2136);
      complex1.equals("3q)vB$kS|3JR.{jQ9mv");
      complex8.isInfinite();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-578.63));
      Complex complex2 = complex1.INF.tanh();
      complex2.multiply(complex1);
      complex2.INF.divide(complex1);
      Complex complex3 = complex0.add(complex1);
      complex0.sinh();
      Complex complex4 = complex2.negate();
      complex3.cosh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.multiply((-3242.74));
      complex2.ONE.tan();
      complex0.isNaN();
      complex0.readResolve();
      complex0.ONE.toString();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.pow(complex2);
      complex3.multiply(complex1);
      complex0.INF.acos();
      complex4.hashCode();
      complex1.getImaginary();
      complex1.atan();
      Complex complex5 = complex0.subtract(complex1);
      complex5.createComplex(6.283185307179586, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex1.I.subtract(complex2);
      complex0.createComplex(0.0, 0.0);
      complex0.getImaginary();
      complex1.isInfinite();
      Complex complex4 = complex0.sin();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.tan();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = Complex.valueOf((-907.2), (-4661.703235057));
      complex4.sqrt1z();
      complex2.I.add(complex4);
      complex2.getImaginary();
      complex2.getReal();
      Complex complex5 = Complex.valueOf(1.0);
      complex3.hashCode();
      complex5.hashCode();
      complex0.toString();
      complex0.getImaginary();
      Complex complex6 = complex5.I.pow(1.0);
      complex2.isInfinite();
      Complex complex7 = complex4.ONE.tan();
      complex5.multiply(1.0);
      complex4.getReal();
      complex7.multiply((-752));
      complex0.subtract(complex6);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-1709.57913673), (-1709.57913673));
      Complex complex1 = complex0.sin();
      complex0.asin();
      complex1.ZERO.hashCode();
      complex0.sinh();
      complex0.I.sin();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.negate();
      complex3.INF.log();
      Complex complex4 = complex3.acos();
      complex4.reciprocal();
      complex1.pow(complex3);
      complex2.equals((Object) null);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.multiply(1478);
      complex3.ONE.subtract(0.0);
      Complex complex6 = complex0.pow(complex1);
      complex4.getReal();
      complex5.equals(complex0);
      complex6.cosh();
      complex5.sinh();
      complex5.cos();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(5.517990469846618E229);
      Complex complex1 = complex0.INF.cos();
      complex0.toString();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.subtract(1.485138177871704);
      complex1.asin();
      Complex complex4 = complex2.divide((-3158.37));
      complex4.divide(0.0);
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex1.INF.asin();
      complex5.nthRoot(424);
      complex4.pow(complex1);
      complex6.readResolve();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(5.328392630534142E-8);
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex1.ZERO.subtract((double) 0);
      complex0.I.toString();
      Complex complex3 = complex2.I.acos();
      complex3.ONE.cos();
      complex1.I.asin();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex0.multiply(17);
      complex5.ONE.add(503.05401891456);
      complex4.ONE.getArgument();
      Complex complex6 = complex5.sin();
      complex4.ZERO.exp();
      complex6.createComplex(3831.2120393964124, 3831.2120393964124);
      Complex.valueOf((double) 0);
      try { 
        complex6.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ONE.add(complex0);
      complex2.I.nthRoot(1);
      Complex complex5 = complex4.pow(complex2);
      complex3.ONE.tan();
      complex4.ONE.getArgument();
      Complex complex6 = complex2.ZERO.exp();
      complex6.ONE.toString();
      complex0.add(complex1);
      Complex complex7 = complex5.tan();
      complex5.tanh();
      complex7.ZERO.cos();
      Complex complex8 = complex1.createComplex(0.0, 0.0);
      complex2.isInfinite();
      complex2.getArgument();
      Complex complex9 = complex5.divide(0.7853981633974483);
      Complex.valueOf(0.0);
      complex8.pow(complex3);
      Complex complex10 = complex1.cosh();
      complex10.add(0.7853981633974483);
      complex9.hashCode();
      complex8.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2108.5);
      Complex complex1 = new Complex((-184.835223866546), (-1589.5));
      complex1.I.getArgument();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.NaN.add(1.5707963267948966);
      Complex complex4 = complex0.ZERO.exp();
      Complex complex5 = complex0.asin();
      complex5.negate();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex4.subtract(complex0);
      complex5.equals(complex4);
      complex7.readResolve();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex5.atan();
      complex9.createComplex(2596.11, 1.5707963267948966);
      complex4.sinh();
      complex0.ZERO.sqrt1z();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex11.reciprocal();
      complex8.pow(0.0);
      complex11.equals(complex12);
      complex9.sinh();
      Complex complex13 = complex10.createComplex(Double.NaN, Double.NaN);
      complex3.add(complex13);
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-2779.139));
      complex1.NaN.readResolve();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.NaN.pow((-2779.139));
      complex3.ZERO.pow(complex2);
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex0.tan();
      complex1.ZERO.abs();
      complex2.toString();
      complex4.ZERO.multiply((-2317));
      Complex complex6 = complex1.INF.reciprocal();
      complex2.subtract(complex1);
      complex0.getField();
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex0.reciprocal();
      complex5.subtract(complex0);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex3.multiply((-2779.139));
      complex4.getImaginary();
      complex8.readResolve();
      complex7.divide(0.0);
      complex1.sin();
      complex3.sin();
      complex0.abs();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-99.7448), (-99.7448));
      Complex complex1 = Complex.valueOf((-99.7448));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1283));
      Complex complex2 = complex0.multiply((double) (-1283));
      Complex complex3 = complex2.ZERO.atan();
      Complex.valueOf((double) (-1283), 0.0);
      complex2.negate();
      complex2.divide(complex3);
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(2659.1163);
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-128.91416630786262), 1953.065722374663);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(1274);
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = Complex.valueOf(1953.065722374663);
      Complex complex8 = complex7.sqrt1z();
      complex8.I.abs();
      complex0.negate();
      Complex complex9 = complex2.atan();
      complex9.NaN.cos();
      complex1.atan();
      Complex complex10 = complex3.subtract(complex6);
      complex10.I.cosh();
      complex5.ZERO.acos();
      complex5.createComplex(1.0, 7.374944406615125E-186);
      complex5.multiply(complex0);
      complex8.tan();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getImaginary();
      complex0.getField();
      Complex complex1 = complex0.pow(6089.0119);
      complex1.isInfinite();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = new Complex(Double.NaN, 0.0);
      complex4.ZERO.pow(1.0);
      complex3.NaN.subtract(complex4);
      Complex complex5 = complex1.subtract(1933.804449825813);
      Complex complex6 = Complex.valueOf(2.0, 0.0);
      Complex complex7 = complex6.ZERO.divide(complex5);
      complex2.negate();
      complex0.ONE.log();
      Complex complex8 = complex1.exp();
      complex1.divide(complex5);
      complex8.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex3.ZERO.tan();
      complex5.INF.cosh();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex8.pow(899.0151116966);
      complex0.readResolve();
      Complex complex10 = complex9.ZERO.cos();
      complex7.getArgument();
      List<Complex> list0 = complex3.nthRoot(1719);
      assertTrue(list0.contains(complex8));
      
      double double0 = complex5.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      complex0.INF.reciprocal();
      complex0.ONE.negate();
      Complex complex11 = complex6.I.asin();
      complex1.divide(complex0);
      complex3.NaN.sin();
      complex4.conjugate();
      Complex complex12 = complex6.negate();
      complex7.readResolve();
      complex12.reciprocal();
      complex2.sqrt1z();
      complex2.cosh();
      List<Complex> list1 = complex7.nthRoot(1719);
      assertEquals(1719, list1.size());
      
      Complex complex13 = complex11.subtract(1.6911191940307617);
      Complex complex14 = complex1.subtract((-563.682645683174));
      Complex complex15 = complex11.pow((double) 1719);
      assertEquals(6.082315977209754E-108, complex15.getReal(), 0.01);
      
      complex10.getImaginary();
      complex2.isNaN();
      Complex complex16 = complex11.divide(complex5);
      assertTrue(complex5.equals((Object)complex8));
      assertNotSame(complex16, complex13);
      assertTrue(complex6.equals((Object)complex14));
  }
}
